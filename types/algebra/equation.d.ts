import type { EQUATION_SIGN, IAlgebra, IEquation, InputAlgebra, InputValue, IPiMathObject, ISolution, literalType } from "../pimath.interface";
import { Fraction } from "../coefficients/fraction";
import { Polynom } from "./polynom";
export declare class Equation implements IPiMathObject<Equation>, IEquation<Equation>, IAlgebra<Equation> {
    #private;
    constructor(equation: InputAlgebra<Polynom> | Equation);
    constructor(left: InputAlgebra<Polynom>, right: InputAlgebra<Polynom>, sign?: EQUATION_SIGN);
    parse: (equationString: string) => this;
    create: (left: Polynom, right: Polynom, sign?: string) => this;
    clone: () => Equation;
    add(value: InputValue<Equation | Polynom>): this;
    degree: (letter?: string) => Fraction;
    divide: (value: InputValue<Fraction>) => this;
    evaluate(values: InputValue<Fraction> | literalType<number | Fraction>, asNumeric?: boolean): boolean;
    hasVariable: (letter: string) => boolean;
    isEqual(value: InputValue<Equation>): boolean;
    isLinearTo: (equ: Equation) => boolean;
    isMultiVariable: () => boolean;
    isEqualTo: (equ: Equation) => boolean;
    isolate: (letter?: string) => this | false;
    letters: () => string[];
    moveLeft: () => this;
    multiply: (value: InputValue<Fraction>) => this;
    pow(value: number): this;
    opposite: () => this;
    reduce(): this;
    reorder: (allLeft?: boolean) => this;
    replaceBy: (letter: string, P: Polynom) => this;
    simplify: () => this;
    solve: () => ISolution[];
    split(): [Polynom, Polynom];
    subtract(value: InputValue<Equation | Polynom>): this;
    test: (values: literalType<Fraction>) => boolean;
    static isEquationString(equationString: string): boolean;
    static makeSolutionsUnique(solutions: ISolution[], sorted?: boolean): ISolution[];
    get display(): string;
    get left(): Polynom;
    set left(value: Polynom);
    get numberOfVars(): number;
    get right(): Polynom;
    set right(value: Polynom);
    get sign(): string;
    set sign(value: string);
    get signAsTex(): string;
    get tex(): string;
    get variables(): string[];
}
//# sourceMappingURL=equation.d.ts.map