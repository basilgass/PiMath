export declare type FractionParsingType = number | string | Fraction;
export declare class Fraction {
    private _numerator;
    private _denominator;
    constructor(value?: unknown, denominatorOrPeriodic?: number);
    get isFraction(): boolean;
    get numerator(): number;
    set numerator(value: number);
    get denominator(): number;
    set denominator(value: number);
    get value(): number;
    get tex(): string;
    get display(): string;
    get frac(): string;
    get dfrac(): string;
    get tfrac(): string;
    parse: (value: unknown, denominatorOrPeriodic?: number) => Fraction;
    clone: () => Fraction;
    zero: () => Fraction;
    one: () => Fraction;
    infinite: () => Fraction;
    invalid: () => Fraction;
    opposed: () => Fraction;
    add: (F: Fraction | number) => Fraction;
    subtract: (F: Fraction | number) => Fraction;
    multiply: (F: Fraction | number) => Fraction;
    divide: (F: Fraction | number) => Fraction;
    invert: () => Fraction;
    pow: (p: number | Fraction) => Fraction;
    root: (p: number) => Fraction;
    sqrt: () => Fraction;
    abs: () => Fraction;
    static max: (...fractions: (Fraction | number)[]) => Fraction;
    static min: (...fractions: (Fraction | number)[]) => Fraction;
    reduce: () => Fraction;
    amplify: (k: number) => Fraction;
    compare: (F: unknown, sign?: string) => boolean;
    lesser: (than: Fraction | number) => Boolean;
    leq: (than: Fraction | number) => Boolean;
    greater: (than: Fraction | number) => Boolean;
    geq: (than: Fraction | number) => Boolean;
    isEqual: (than: Fraction | number) => boolean;
    isNotEqual: (than: Fraction | number) => boolean;
    isOpposed: (p: Fraction) => boolean;
    isInverted: (p: Fraction) => boolean;
    isZero: () => boolean;
    isNotZero: () => boolean;
    isOne: () => boolean;
    isNegativeOne: () => boolean;
    isPositive: () => boolean;
    isNegative: () => boolean;
    isStrictlyPositive: () => boolean;
    isStrictlyNegative: () => Boolean;
    isNaN: () => boolean;
    isInfinity: () => boolean;
    isFinite: () => boolean;
    isSquare: () => boolean;
    isReduced: () => boolean;
    isNatural: () => boolean;
    isRelative: () => boolean;
    isRational: () => boolean;
    isEven: () => boolean;
    isOdd: () => boolean;
    sign: () => number;
    areEquals: (...F: Fraction[]) => boolean;
}
