{"version":3,"file":"pi.esm.js","mappings":"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","sources":["webpack://Pi/webpack/universalModuleDefinition","webpack://Pi/webpack/bootstrap","webpack://Pi/./src/maths/random/random.ts","webpack://Pi/webpack/runtime/make namespace object","webpack://Pi/./src/maths/numeric.ts","webpack://Pi/./src/maths/shutingyard.ts","webpack://Pi/./src/maths/coefficients/fraction.ts","webpack://Pi/./src/maths/coefficients/nthroot.ts","webpack://Pi/./src/maths/algebra/monom.ts","webpack://Pi/./src/maths/random/randomCore.ts","webpack://Pi/./src/maths/random/rndMonom.ts","webpack://Pi/./src/maths/random/rndPolynom.ts","webpack://Pi/./src/maths/random/rndHelpers.ts","webpack://Pi/./src/maths/algebra/polynom.ts","webpack://Pi/./src/maths/algebra/equation.ts","webpack://Pi/./src/maths/algebra/linearSystem.ts","webpack://Pi/./src/maths/geometry/vector.ts","webpack://Pi/./src/maths/geometry/point.ts","webpack://Pi/./src/maths/geometry/line.ts","webpack://Pi/./src/main.ts","webpack://Pi/./src/maths/algebra/rational.ts","webpack://Pi/./src/maths/algebra/logicalset.ts","webpack://Pi/./src/maths/geometry/triangle.ts","webpack://Pi/./src/maths/geometry/circle.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Pi\"] = factory();\n\telse\n\t\troot[\"Pi\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","import rndPolynom from \"./rndPolynom\";\r\nimport rndMonom from \"./rndMonom\";\r\nimport rndHelpers from \"./rndHelpers\";\r\nimport {randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport Monom from \"../algebra/monom\";\r\nimport Polynom from \"../algebra/polynom\";\r\n\r\n// export var Random = {\r\n//     monom: rndMonom,\r\n//     polynom: rndPolynom,\r\n//     number: rndHelpers.randomInt,\r\n//     numberSym: rndHelpers.randomIntSym,\r\n//     bool: rndHelpers.randomBool,\r\n//     array: rndHelpers.randomArray,\r\n//     item: rndHelpers.randomItem,\r\n//     shuffle: rndHelpers.shuffleArray\r\n// }\r\n\r\nexport namespace Random {\r\n    export function polynom(config?: randomPolynomConfig): Polynom {\r\n        return new rndPolynom(config).generate()\r\n    }\r\n\r\n    export function monom(config?: randomMonomConfig): Monom {\r\n        return new rndMonom(config).generate()\r\n    }\r\n\r\n    export function number(from:number, to:number):number { return rndHelpers.randomInt(from,to)}\r\n    export function numberSym(max:number, allowZero?:boolean):number { return rndHelpers.randomIntSym(max, allowZero)}\r\n    export function bool(percent?:number):boolean { return rndHelpers.randomBool(percent)}\r\n    export function array(arr:any[], number?:number):any[] { return rndHelpers.randomArray(arr, number)}\r\n    export function item(arr:any[]):any { return rndHelpers.randomItem(arr)}\r\n    export function shuffle(arr:any[]):any { rndHelpers.shuffleArray(arr)}\r\n\r\n\r\n}","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export default class Numeric{\r\n    static round(value:number, decimals:number=2):number {\r\n        return Number(Math.round(Number(value+'e'+decimals))+'e-'+decimals);\r\n    }\r\n\r\n    /**\r\n     * Get the list of the nth first prime numbers.\r\n     * @param nb : number of primes to choose from\r\n     */\r\n    static prime(nb?:number):number[]{\r\n        let primes:number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973];\r\n        if(nb === undefined){\r\n            return primes;\r\n        }else{\r\n            return primes.slice(0,Math.max(primes.length,nb));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the list of all dividers of a number.\r\n     * @param value\r\n     */\r\n    static dividers(value:number):number[]{\r\n        let D: number[];\r\n        const maxV = Math.sqrt(Math.abs(value));\r\n\r\n        // Initialize the list of dividers.\r\n        D = [];\r\n\r\n        for(let i=1; i<=maxV; i++){\r\n            if(value%i===0){\r\n                D.push(i);\r\n                D.push(value/i);\r\n            }\r\n        }\r\n\r\n        // Order numbers.\r\n        D.sort(function(a, b){return a-b;});\r\n\r\n        // Make sure the array of value is unique.\r\n        return [...new Set(D)];\r\n    }\r\n    /**\r\n     * Great Common Divisor\r\n     * @param values : number values\r\n     */\r\n    static gcd(...values:number[]):number{\r\n        // Define the gcd for two number\r\n        let gcd2 = function(a:number,b:number):number{\r\n            if(b===0){return a;}\r\n            return gcd2(b, a%b);\r\n        };\r\n\r\n        let g:number = 1,\r\n            i:number = 2;\r\n\r\n        // Nothing is given\r\n        if(values.length===0){return 1;}\r\n        // Only one number is given\r\n        if(values.length===1){\r\n            // The first number is zero\r\n            if(values[0]===0){return 1;}\r\n            // Return the number\r\n            return values[0];\r\n        }\r\n\r\n        // We have at least 2 numbers.\r\n        g = gcd2(values[0],values[1]);\r\n\r\n        // The gcd of the two first value is one ? It's already finished.\r\n        if(g===1){return 1;}\r\n\r\n        // The current gcd isn't one. Continue with all next values.\r\n        for(i=2; i<values.length; i++){\r\n            g = gcd2(g, values[i]);\r\n            // Escape if gcd is already one.\r\n            if(g===1){break;}\r\n        }\r\n\r\n        return Math.abs(g);\r\n    }\r\n\r\n    /**\r\n     * Least Common Multiple\r\n     * @param values: list of numbers\r\n     */\r\n    static lcm(...values:number[]):number{\r\n        return values.reduce(function(a,b){\r\n            return Math.abs(a * b / Numeric.gcd(a, b));\r\n        });\r\n    }\r\n}","type tokenType = {\r\n    [key: string]: {\r\n        precedence: number,\r\n        associative: string\r\n    }\r\n}\r\n\r\nexport default class Shutingyard {\r\n    private _rpn: { token: string, tokenType: string }[] = [];\r\n    readonly _mode: 'polynom' | 'set';\r\n    private _tokenConfig: tokenType;\r\n    private _uniformize: boolean;\r\n\r\n    constructor(mode?: 'polynom' | 'set') {\r\n        this._mode = typeof mode === 'undefined' ? 'polynom' : mode;\r\n        this.tokenConfigInitialization()\r\n    }\r\n\r\n    /**\r\n     * Determin if the token is a defined operation\r\n     * Defined operations: + - * / ^ sin cos tan\r\n     * @param token\r\n     */\r\n    isOperation(token: string): boolean {\r\n        if (token[0].match(/[+\\-*/^]/g)) {\r\n            return true;\r\n        }\r\n        //\r\n        // if (token.match(/^sin|cos|tan/g)) {\r\n        //     return true;\r\n        // }\r\n\r\n        return false;\r\n    }\r\n\r\n    tokenConfigInitialization(): tokenType {\r\n        if (this._mode === 'set') {\r\n            this._tokenConfig = {\r\n                '&': {precedence: 3, associative: 'left'},\r\n                '|': {precedence: 3, associative: 'left'},\r\n                '!': {precedence: 4, associative: 'right'},\r\n                '-': {precedence: 2, associative: 'left'}\r\n            }\r\n            this._uniformize = false;\r\n        } else {\r\n            this._tokenConfig = {\r\n                '^': {precedence: 4, associative: 'right'},\r\n                '*': {precedence: 3, associative: 'left'},\r\n                '/': {precedence: 3, associative: 'left'},\r\n                '+': {precedence: 2, associative: 'left'},\r\n                '-': {precedence: 2, associative: 'left'},\r\n                '%': {precedence: 3, associative: 'right'},\r\n                'sin': {precedence: 4, associative: 'right'},\r\n                'cos': {precedence: 4, associative: 'right'},\r\n                'tab': {precedence: 4, associative: 'right'},\r\n            }\r\n            this._uniformize = true\r\n        }\r\n        return this._tokenConfig\r\n    }\r\n\r\n    /**\r\n     * Get the next token to analyse.\r\n     * @param expr (string) Expression to analyse\r\n     * @param start (number) CUrrent position in the expr string.\r\n     */\r\n    NextToken2(expr: string, start: number): [string, number, string] {\r\n        let token: string, tokenType: string;\r\n        token = '';\r\n        tokenType = '';\r\n        // Case of parenthesis or comma (generic items)\r\n        if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        } else{\r\n            // Order token keys by token characters length (descending)\r\n            const keys = Object.keys(this._tokenConfig).sort((a,b)=>b.length-a.length)\r\n\r\n            for(let key of keys){\r\n                if(expr.substr(start, key.length) === key){\r\n                    token += key;\r\n                    tokenType = 'operation'\r\n                    break\r\n                }\r\n            }\r\n\r\n            if(token===''){\r\n                // No function found ! Might be a coefficient !\r\n                if( expr[start].match(/[0-9]/) ) {\r\n                    token = expr.substr(start).match(/^([0-9.,/]+)/)[0]\r\n                    tokenType = 'coefficient'\r\n                }else if (expr[start].match(/[a-zA-Z]/)) {\r\n                    token = expr.substr(start).match(/^([a-zA-Z])/)[0]\r\n                    tokenType = 'variable'\r\n                }else{\r\n                    console.log('Unidentified token', expr[start], expr, start)\r\n                    token = expr[start]\r\n                    tokenType = 'monom'\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n\r\n        // console.log(token, tokenType)\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    NextToken(expr: string, start: number): [string, number, string] {\r\n        let tokenMatch: string[], token: string, tokenType: string;\r\n\r\n        this.NextToken2(expr, start)\r\n        // Detect a fraction monoms or return empty array\r\n        tokenMatch = (expr.substr(start).match(/^[0-9/a-zA-Z^]+/g)) || [];\r\n\r\n        if (expr.substr(start, start + 3).match(/^(sin|cos|tan)/g)) {\r\n            token = expr.substr(start, 3)\r\n            tokenType = 'function'\r\n        } else if (tokenMatch.length > 0) {\r\n            token = tokenMatch[0];\r\n            tokenType = 'monom';\r\n        }\r\n        // It's an operation !\r\n        else if (expr[start].match(/[+\\-*/^]/g)) {\r\n            token = expr[start];\r\n            tokenType = 'operation';\r\n        } else if (expr[start].match(/[&|!]/g)) {\r\n            token = expr[start];\r\n            tokenType = 'operation';\r\n        }\r\n        // It's an opening parenthese\r\n        else if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        }\r\n        // It's a monom.\r\n        else {\r\n            // TODO: Actually, negative exposant aren't supported.\r\n            // token = (expr.substr(start).match(/^[\\da-z\\^]+/g)[0])||'';\r\n            token = tokenMatch[0];\r\n            tokenType = 'monom';\r\n\r\n            if (token === '') {\r\n                token = expr[start];\r\n                tokenType = 'monom';\r\n                console.log('SHUTING YARD - NEXT TOKEN: error at ', start);\r\n            }\r\n        }\r\n\r\n        // console.log(token, start + token.length, tokenType);\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    /**\r\n     * Sanitize an expression by adding missing common operation (multiplication between parentheseses)\r\n     * @param expr\r\n     * @constructor\r\n     */\r\n    Uniformizer(expr: string): string {\r\n        // Determiner if need to be uniformized\r\n        if(!this._uniformize){return expr}\r\n\r\n        let expr2;\r\n        // Replace missing multiplication between two parenthese\r\n        expr2 = expr.replace(/\\)\\(/g, ')*(');\r\n\r\n        // Replace missing multiplication between number or setLetter and parenthese.\r\n\r\n        // 3x(x-4) => 3x*(x-4)\r\n        expr2 = expr2.replace(/([\\da-zA-Z])(\\()/g, \"$1*$2\");\r\n\r\n        // (x-4)3x => (x-4)*3x\r\n        expr2 = expr2.replace(/(\\))([\\da-zA-Z])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between number and letters.\r\n        // 3x => 3*x\r\n        expr2 = expr2.replace(/([0-9])([a-zA-Z])/g, \"$1*$2\");\r\n        expr2 = expr2.replace(/([a-zA-Z])([0-9])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between letters ?\r\n        // TODO: More robust solution to handle all letters ?\r\n        expr2 = expr2.replace(/([abcxyz])([abcxyz])/g, \"$1*$2\");\r\n\r\n        // Restore operation auto formating (prevent adding the mutliplcation star)\r\n        // TODO: Accept list of functions\r\n        let fnToken = ['sin', 'cos', 'tan']\r\n        for (let token of fnToken) {\r\n            expr2 = expr2.replace(new RegExp(token + '\\\\*', 'g'), token);\r\n        }\r\n\r\n        return expr2;\r\n    }\r\n\r\n    /**\r\n     * Parse an expression using the shutting yard tree algorithms\r\n     * @param expr (string) Expression to analyse\r\n     * Returns a RPN list of items.\r\n     * @param operators\r\n     */\r\n    parse(expr: string, operators?: string[]): Shutingyard {\r\n        let outQueue: {token:string, tokenType: string}[] = [],    // Output queue\r\n            opStack: {token:string, tokenType: string}[] = [],     // Operation queue\r\n            token: string = '',\r\n            tokenPos: number = 0,\r\n            tokenType: string = '',\r\n            previousOpStatckLength = 0\r\n\r\n        expr = this.Uniformizer(expr);\r\n\r\n        let securityLoopLvl1 = 50,\r\n            securityLoopLvl2_default = 50,\r\n            securityLoopLvl2;\r\n\r\n        while (tokenPos < expr.length) {\r\n            securityLoopLvl1--;\r\n            if (securityLoopLvl1 === 0) {\r\n                console.log('SECURITY LEVEL 1 EXIT');\r\n                break;\r\n            }\r\n\r\n            // Get the next token and the corresponding new (ending) position\r\n            [token, tokenPos, tokenType] = this.NextToken2(expr, tokenPos);\r\n\r\n            switch (tokenType) {\r\n                case 'monom':\r\n                case 'coefficient':\r\n                case 'variable':\r\n                    outQueue.push({\r\n                        token,\r\n                        tokenType\r\n                    });\r\n                    // if(previousOpStatckLength == opStack.length && outQueue.length>=2){\r\n                    //     console.log('opStatckLength', outQueue, opStack.length)\r\n                    //     outQueue.push('*')\r\n                    // }\r\n                    break;\r\n                case 'operation':\r\n                    previousOpStatckLength = opStack.length;\r\n                    //If the token is an operator, o1, then:\r\n                    if (opStack.length > 0) {\r\n                        let opTop = opStack[opStack.length - 1];\r\n\r\n\r\n                        securityLoopLvl2 = +securityLoopLvl2_default;\r\n\r\n                        //while there is an operator token o2, at the top of the operator stack and\r\n                        while (opTop.token in this._tokenConfig && (\r\n                                //either o1 is left-associative and its precedence is less than or equal to that of o2,\r\n                                (this._tokenConfig[token].associative === 'left' && this._tokenConfig[token].precedence <= this._tokenConfig[opTop.token].precedence)\r\n                                ||\r\n                                //or o1 is right associative, and has precedence less than that of o2,\r\n                                (this._tokenConfig[token].associative === 'right' && this._tokenConfig[token].precedence < this._tokenConfig[opTop.token].precedence)\r\n                            )\r\n                            ) {\r\n\r\n                            /* Security exit ! */\r\n                            securityLoopLvl2--;\r\n                            if (securityLoopLvl2 === 0) {\r\n                                console.log('SECURITY LEVEL 2 OPERATION EXIT');\r\n                                break;\r\n                            }\r\n\r\n                            // Add the operation to the queue\r\n                            outQueue.push((opStack.pop()) || {token: '', tokenType: 'operation'});\r\n\r\n                            // Get the next operation on top of the Stack.\r\n                            if(opStack.length===0){break;}\r\n                            opTop = opStack[opStack.length - 1];\r\n                        }\r\n                    }\r\n                    //at the end of iteration push o1 onto the operator stack\r\n                    opStack.push({token,tokenType});\r\n                    break;\r\n                case 'function-argument':\r\n                    // TODO: check if the opStack exist.\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 0) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 FUNCTION ARGUMENT EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n                    break;\r\n                case '(':\r\n                    opStack.push({token,tokenType});\r\n                    // Add an empty value if next element is negative.\r\n                    if (expr[tokenPos] === '-') {\r\n                        outQueue.push({token: '0', tokenType: 'coefficient'});\r\n                    }\r\n                    break;\r\n                case ')':\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    //Until the token at the top of the stack is a left parenthesis, pop operators off the stack onto the output queue.\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 1 /*Maybe zero !? */) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 CLOSING PARENTHESE EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n\r\n                    //Pop the left parenthesis from the stack, but not onto the output queue.\r\n                    opStack.pop();\r\n                    break;\r\n                case 'function':\r\n                    opStack.push({token, tokenType});\r\n                    break;\r\n                default:\r\n                    // In theory, everything should be handled.\r\n                    console.log(`SHUTING YARD: ${tokenType} : ${token} `);\r\n            }\r\n\r\n            // Output\r\n            // console.log(outQueue.concat(opStack.reverse()).join(\" \"));\r\n        }\r\n\r\n        // console.log(outQueue.concat(opStack.reverse()));\r\n        this._rpn = outQueue.concat(opStack.reverse());\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    // Getter\r\n    get rpn() {\r\n        // console.log(this._rpn)\r\n        return this._rpn;\r\n    }\r\n\r\n\r\n}\r\n","import Numeric from \"../numeric\";\r\n\r\nexport default class Fraction {\r\n    private _numerator: number;\r\n    private _denominator: number;\r\n\r\n    constructor(value?: any, denominatorOrPeriodic?: number) {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n\r\n        if (value !== undefined) {\r\n            this.parse(value, denominatorOrPeriodic);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isFraction() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n\r\n    get numerator(): number {\r\n        return this._numerator;\r\n    }\r\n\r\n    set numerator(value: number) {\r\n        this._numerator = value;\r\n    }\r\n\r\n    get denominator(): number {\r\n        return this._denominator;\r\n    }\r\n\r\n    set denominator(value: number) {\r\n        this._denominator = value;\r\n    }\r\n\r\n    get value(): number {\r\n        return this._numerator / this._denominator;\r\n    }\r\n\r\n    // Display getter\r\n    get tex(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else if (this._numerator < 0) {\r\n            return `-\\\\frac{ ${-this._numerator} }{ ${this._denominator} }`;\r\n        } else {\r\n            return `\\\\frac{ ${this._numerator} }{ ${this._denominator} }`;\r\n        }\r\n    }\r\n\r\n    get display(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else {\r\n            return `${this._numerator}/${this._denominator}`;\r\n        }\r\n    }\r\n\r\n    // Helper function to display fractions\r\n    get frac(): string {\r\n        return this.tex;\r\n    }\r\n\r\n    get dfrac(): string {\r\n        return this.tex.replace('\\\\frac', '\\\\dfrac');\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse the value to get the numerator and denominator\r\n     * @param value : number or string to parse to get the fraction\r\n     * @param denominatorOrPeriodic (optional|number) : length of the periodic part: 2.333333 => 1 or denominator value\r\n     */\r\n    parse = (value: any, denominatorOrPeriodic?: number): Fraction => {\r\n        let S: string[];\r\n\r\n        // A null value means a zero fraction.\r\n        if (value === null || value === \"\") {\r\n            this._numerator = 0;\r\n            this._denominator = 1;\r\n            return this;\r\n        }\r\n\r\n        switch (typeof value) {\r\n            case \"string\":\r\n                // Split the sting value in two parts: Numerator/Denominator\r\n                S = value.split('/');\r\n\r\n                // Security checks\r\n                    if (S.length > 2) throw \"Two many divide signs\";\r\n                    if (S.map(x => x === '' || isNaN(Number(x))).includes(true)) throw \"Not a number\"\r\n\r\n\r\n                if (S.length === 1) {\r\n                    // No divide sign\r\n                    return this.parse(+S[0]);\r\n                } else if (S.length === 2) {\r\n                    // One divide signe\r\n                    // We check if the denominator is zero\r\n                    if (S[1] === '0') {\r\n                        this._numerator = NaN;\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._numerator = +S[0];\r\n                        this._denominator = +S[1];\r\n                    }\r\n                } else {\r\n                    // More than one divide sign ?\r\n                    this._numerator = NaN;\r\n                    this._denominator = 1;\r\n                }\r\n                break;\r\n            case \"number\":\r\n                if (Number.isSafeInteger(value)) {\r\n                    // The given value is an integer\r\n                    this._numerator = +value;\r\n\r\n                    if (denominatorOrPeriodic === undefined || !Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._denominator = +denominatorOrPeriodic;\r\n                    }\r\n                } else {\r\n                    // The given value is a float number\r\n\r\n                    // Get the number of decimals after the float sign\r\n                    let p: number = (value.toString()).split('.')[1].length;\r\n\r\n                    // Transform the float number in two integer\r\n                    if (denominatorOrPeriodic === undefined) {\r\n                        this._numerator = value * Math.pow(10, p);\r\n                        this._denominator = Math.pow(10, p);\r\n                    } else if (Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._numerator = value * Math.pow(10, p) - Math.floor(value * Math.pow(10, p - denominatorOrPeriodic));\r\n                        this.denominator = Math.pow(10, p) - Math.pow(10, p - denominatorOrPeriodic)\r\n                    }\r\n                }\r\n                break;\r\n            case \"object\":\r\n                if (value.isFraction) {\r\n                    this._numerator = +value.numerator;\r\n                    this._denominator = +value.denominator;\r\n                }\r\n                break;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): Fraction => {\r\n        let F = new Fraction();\r\n        F.numerator = +this._numerator;\r\n        F.denominator = +this._denominator;\r\n        return F;\r\n    };\r\n\r\n    zero = (): Fraction => {\r\n        this._numerator = 0;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    one = (): Fraction => {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    infinite = (): Fraction => {\r\n        this._numerator = Infinity;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    invalid = (): Fraction => {\r\n        this._numerator = NaN;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Fraction => {\r\n        this._numerator = -this._numerator;\r\n        return this;\r\n    };\r\n\r\n    add = (F: Fraction): Fraction => {\r\n        let N: number = this._numerator,\r\n            D: number = this._denominator;\r\n\r\n        this._numerator = N * F.denominator + F.numerator * D;\r\n        this._denominator = D * F.denominator;\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (F: Fraction): Fraction => {\r\n        return this.add(F.clone().opposed());\r\n    };\r\n\r\n    multiply = (F: Fraction | number): Fraction => {\r\n        // Parse the value.\r\n        // If it's a fraction, return a clone of it\r\n        // If it's an integer, return the fraction F/1\r\n        let Q = new Fraction(F);\r\n\r\n        this._numerator = this._numerator * Q.numerator;\r\n        this._denominator = this._denominator * Q.denominator;\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    divide = (F: Fraction | number): Fraction => {\r\n        let Q = new Fraction(F);\r\n\r\n        if (Q.numerator === 0) {\r\n            return new Fraction().infinite();\r\n        }\r\n\r\n        let N: number = +this._numerator,\r\n            D: number = +this._denominator;\r\n\r\n        this._numerator = N * Q.denominator;\r\n        this._denominator = D * Q.numerator;\r\n        return this.reduce();\r\n    };\r\n\r\n    invert = (): Fraction => {\r\n        let n = +this._numerator, d = +this._denominator;\r\n        this._numerator = d;\r\n        this._denominator = n;\r\n\r\n        return this;\r\n    }\r\n    pow = (p: number): Fraction => {\r\n        if (!Number.isSafeInteger(p)) {\r\n            return this.invalid();\r\n        }\r\n        this.reduce();\r\n\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        this._numerator = this._numerator ** Math.abs(p);\r\n        this._denominator = this._denominator ** Math.abs(p);\r\n        return this;\r\n    };\r\n\r\n    root = (p: number): Fraction => {\r\n        // TODO: nth - root of a fraction => this will return another type of coefficient.\r\n\r\n        // Check if they are perfect roots..\r\n        if (p === 0) {\r\n            return this;\r\n        }\r\n\r\n        // If negative, invert the fraction\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        let n = Math.pow(this._numerator, Math.abs(1 / p)),\r\n            d = Math.pow(this._denominator, Math.abs(1 / p));\r\n\r\n        this._numerator = Math.pow(this._numerator, Math.abs(1 / p));\r\n        this._denominator = Math.pow(this._denominator, Math.abs(1 / p));\r\n        return this;\r\n    }\r\n\r\n    sqrt = (): Fraction => {\r\n        return this.root(2);\r\n    }\r\n\r\n    abs = (): Fraction => {\r\n        this._numerator = Math.abs(this._numerator);\r\n        this._denominator = Math.abs(this._denominator);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations specific to fractions\r\n    // ------------------------------------------\r\n    reduce = (): Fraction => {\r\n        let g = Numeric.gcd(this._numerator, this._denominator);\r\n        this._numerator = this._numerator / g;\r\n        this._denominator = this._denominator / g;\r\n\r\n        if (this._denominator < 0) {\r\n            this._denominator = -this._denominator;\r\n            this._numerator = -this._numerator;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    amplify = (k: number): Fraction => {\r\n        if (Number.isSafeInteger(k)) {\r\n            this._numerator *= k;\r\n            this._denominator *= k;\r\n        }\r\n        return this;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param F (Coefficient) The coefficient to compare\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (F: Fraction, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n\r\n        switch (sign) {\r\n            case '>':\r\n                return this.value > F.value;\r\n            case \">=\" || \"=>\" || \"geq\":\r\n                return this.value >= F.value;\r\n            case \"<\":\r\n                return this.value < F.value;\r\n            case \"<=\" || \"=>\" || \"leq\":\r\n                return this.value <= F.value;\r\n            case \"=\":\r\n                // let F2: Fraction = F.clone().reduce(),\r\n                //     F1: Fraction = this.clone().reduce();\r\n                // return (F1.numerator === F2.numerator && F1.denominator === F2.denominator);\r\n                return this.value === F.value;\r\n            case \"<>\":\r\n                return this.value !== F.value;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n    /* Compare shortcuts */\r\n    lesser = (than: Fraction): Boolean => {\r\n        return this.compare(than, '<');\r\n    };\r\n    leq = (than: Fraction): Boolean => {\r\n        return this.compare(than, '<=');\r\n    };\r\n    greater = (than: Fraction): Boolean => {\r\n        return this.compare(than, '>');\r\n    };\r\n    geq = (than: Fraction): Boolean => {\r\n        return this.compare(than, '>=');\r\n    };\r\n    isEqual = (than: Fraction): boolean => {\r\n        return this.compare(than, '=');\r\n    }\r\n    isDifferent = (than: Fraction): boolean => {\r\n        return this.compare(than, '<>');\r\n    }\r\n    isOpposed = (p: Fraction): boolean => {\r\n        return this.isEqual(p.clone().opposed());\r\n    }\r\n    isInverted = (p: Fraction): boolean => {\r\n        return this.isEqual(new Fraction().one().divide(p.clone()));\r\n    }\r\n    isZero = (): boolean => {\r\n        return this._numerator === 0;\r\n    }\r\n    isOne = (): boolean => {\r\n        return this._numerator === 1 && this._denominator === 1;\r\n    }\r\n    isPositive = (): boolean => {\r\n        return this.sign()===1;\r\n    }\r\n    isNegative = (): boolean => {\r\n        return this.sign()===-1;\r\n    }\r\n    isNaN = (): boolean => {\r\n        return isNaN(this._numerator);\r\n    }\r\n    isInfinity = (): boolean => {\r\n        return this._numerator === Infinity;\r\n    }\r\n    isFinite = (): boolean => {\r\n        return !this.isInfinity();\r\n    }\r\n    isSquare = (): boolean => {\r\n        return Math.sqrt(this._numerator) % 1 === 0 && Math.sqrt(this._denominator) % 1 === 0\r\n    }\r\n    isReduced = (): boolean => {\r\n        return Math.abs(Numeric.gcd(this._numerator, this._denominator))===1\r\n    }\r\n    sign = (): number => {\r\n        return (this._numerator * this._denominator >= 0) ? 1 : -1;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Simple function to determine if it's a fraction\r\n     */\r\n    areEquals = (...F: Fraction[]): boolean => {\r\n        for (let i = 0; i < F.length; i++) {\r\n            if (!this.isEqual(F[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n}","export default class Nthroot {\r\n    private _radical: number;\r\n    private _nth: number;\r\n    private _coefficient: number;\r\n    private _isValid:boolean;\r\n\r\n    constructor() {\r\n        this._radical = 1;\r\n        this._coefficient = 1;\r\n        this._nth = 2;\r\n        this._isValid = true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get radical(): number {\r\n        return this._radical;\r\n    }\r\n\r\n    set radical(value: number) {\r\n        this._radical = value;\r\n    }\r\n\r\n    get nth(): number {\r\n        return this._nth;\r\n    }\r\n\r\n    set nth(value: number) {\r\n        if (Number.isSafeInteger(value) && value >= 2) {\r\n            this._nth = value;\r\n        } else {\r\n            // Error setting the nth root.\r\n            console.log('Error setting the nth root');\r\n            this._nth = 2;\r\n        }\r\n    }\r\n\r\n    get coefficient(): number {\r\n        return this._coefficient;\r\n    }\r\n\r\n    set coefficient(value: number) {\r\n        this._coefficient = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let C: string;\r\n\r\n        if (this._coefficient === 1) {\r\n            C = '';\r\n        } else if (this._coefficient === -1) {\r\n            C = '-';\r\n        } else {\r\n            C = this._coefficient.toString();\r\n        }\r\n\r\n        if (this._radical === 1) {\r\n            return `${this._coefficient}`;\r\n        } else {\r\n            if (this._nth === 2) {\r\n                return `${C}\\\\sqrt{${this._radical}}`\r\n            } else {\r\n                return `${C}\\\\sqrt[${this._nth}]{${this._radical}}`\r\n            }\r\n        }\r\n    }\r\n\r\n    get value(): number {\r\n        return this._coefficient * Math.pow(this._radical, 1 / this._nth);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (radical: number, nthroot?: number, coefficient?: number): Nthroot => {\r\n        this._coefficient = (coefficient === undefined) ? 1 : coefficient;\r\n        this._nth = (nthroot === undefined) ? 2 : nthroot;\r\n        this._radical = (radical === undefined) ? 1 : radical;\r\n\r\n        if(this._nth%2===0 && this._radical<0){\r\n            this._isValid = false;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    reduce = (): Nthroot => {\r\n        // Max value to test.\r\n        let V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n        while (V > 1) {\r\n            if (this._radical % Math.pow(V, this._nth) === 0) {\r\n                // It's dividable by V^n\r\n                this._coefficient *= V;\r\n                this._radical = this._radical / Math.pow(V, this._nth);\r\n\r\n                // Redifine the new testing value (this is optimization)\r\n                V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n                continue;\r\n            }\r\n            V--;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiply = (N: Nthroot): Nthroot => {\r\n        this._radical *= N.radical;\r\n        return this.reduce();\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Help functions\r\n    // ------------------------------------------\r\n    hasRadical = ():boolean => {\r\n        return !(this._radical===1 || this._radical===0 || this._isValid===false)\r\n    };\r\n}","/***\r\n * Monom class\r\n * Defined as coefficient * literal\r\n * Examples: 3x^2, 3/5x^2, ...\r\n */\r\nimport Fraction from \"../coefficients/fraction\";\r\nimport Numeric from \"../numeric\";\r\n\r\nexport default class Monom {\r\n    private _coefficient: Fraction;\r\n    private _literal: { [Key: string]: number };\r\n\r\n    /**\r\n     * Create the monom object.\r\n     * @param value (optional) string\r\n     */\r\n    constructor(value?: string) {\r\n        this.zero();\r\n\r\n        if (value !== undefined) {\r\n            // A string is given - try to parse the value.\r\n            this.parse(value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get isMonom() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Get the coefficient as fraction\r\n     */\r\n    get coefficient(): Fraction {\r\n        return this._coefficient;\r\n    }\r\n\r\n    /**\r\n     * Set the coefficient value of the monom\r\n     * @param F     Fraction\r\n     */\r\n    set coefficient(F: Fraction) {\r\n        this._coefficient = F;\r\n    }\r\n\r\n    /**\r\n     * Get the literal part, as dictionary\r\n     */\r\n    get literal(): { [Key: string]: number } {\r\n        return this._literal;\r\n    }\r\n\r\n    get literalSqrt(): { [Key: string]: number } {\r\n\r\n        if (this.isLitteralSquare()) {\r\n            let L: { [Key: string]: number } = {}\r\n            for (let key in this._literal) {\r\n                L[key] = this._literal[key] / 2\r\n            }\r\n            return L;\r\n        } else {\r\n            return this._literal;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom\r\n     * @param L     Literal part as dictionary: <setLetter: exposant>\r\n     */\r\n    set literal(L: { [Key: string]: number }) {\r\n        this._literal = L;\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom from a string\r\n     * @param inputStr  String like x^2y^3\r\n     */\r\n    set literalStr(inputStr: string) {\r\n        // Match all x^n\r\n        for (const v of [...inputStr.matchAll(/([a-z])\\^([+-]?[0-9]+)/g)]) {\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = 0;\r\n            }\r\n            this._literal[v[1]] += +v[2];\r\n        }\r\n        for (const v of [...inputStr.matchAll(/([a-z](?!\\^))/g)]) {\r\n            // Match all single letters\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = 0;\r\n            }\r\n            this._literal[v[1]] += 1;\r\n        }\r\n    }\r\n\r\n    // Getter heplers.\r\n    /**\r\n     * Get the variables letters\r\n     */\r\n    get variables(): string[] {\r\n        this.clone().clean();\r\n        return Object.keys(this._literal)\r\n    }\r\n\r\n    // Display getter\r\n    /**\r\n     * This display getter is to be used in the polynom display getter\r\n     */\r\n    get display(): string {\r\n        let L: string = '';\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter] !== 0) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter] > 1) {\r\n                    L += `^${this._literal[letter]}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.display}`;\r\n            } else {\r\n                return '';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.display}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    get dividers(): Monom[] {\r\n        // Decompose only if the coefficient it a complet value\r\n        if (this.coefficient.denominator !== 1) {\r\n            return [this.clone()]\r\n        }\r\n\r\n        // Security : do not do this if greater than 10000\r\n        if (this.coefficient.numerator > 10000) {\r\n            return [this.clone()]\r\n        }\r\n        const dividers = Numeric.dividers(Math.abs(this.coefficient.numerator))\r\n\r\n        // Decompose the litterals parts.\r\n        let litterals: { [key: string]: number }[] = [];\r\n        for (let L in this.literal) {\r\n            // L is the letter.\r\n            litterals = this._getLitteralDividers(litterals, L)\r\n        }\r\n\r\n        const monomDividers: Monom[] = [];\r\n        if (litterals.length > 0 && dividers.length>0) {\r\n            for (let N of dividers) {\r\n                for (let L of litterals) {\r\n                    let M = new Monom();\r\n                    M.coefficient = new Fraction(N)\r\n                    M.literal = L\r\n                    monomDividers.push(M)\r\n                }\r\n            }\r\n        }else if (dividers.length===0) {\r\n            for (let L of litterals) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction().one()\r\n                M.literal = L\r\n                monomDividers.push(M)\r\n            }\r\n        } else {\r\n            for (let N of dividers) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction(N)\r\n                monomDividers.push(M)\r\n            }\r\n        }\r\n\r\n        return monomDividers.length===0? [new Monom().one()]: monomDividers;\r\n    }\r\n\r\n    private _getLitteralDividers(arr: { [key: string]: number }[], letter: string): { [key: string]: number }[] {\r\n        let tmpList: { [key: string]: number }[] = [];\r\n\r\n        for (let d = 0; d <= this.literal[letter]; d++) {\r\n            if (arr.length === 0) {\r\n                let litt: { [key: string]: number } = {}\r\n                litt[letter] = d\r\n                tmpList.push(litt)\r\n            } else {\r\n                for (let item of arr) {\r\n                    let litt: { [key: string]: number } = {}\r\n                    for(let currentLetter in item){\r\n                        litt[currentLetter] = item[currentLetter]\r\n                    }\r\n                    litt[letter] = d\r\n                    tmpList.push(litt)\r\n                }\r\n            }\r\n        }\r\n        return tmpList;\r\n    }\r\n\r\n    /**\r\n     * Display the monom, forcing the '+' sign to appear\r\n     */\r\n    get displayWithSign(): string {\r\n        // TODO: Rename or remove this getter ?\r\n        let d: String = this.display;\r\n        return (d[0] !== '-' ? '+' : '') + d;\r\n    }\r\n\r\n    /**\r\n     * Get the tex output of the monom\r\n     */\r\n    get tex(): string {\r\n        let L: string = '';\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter] !== 0) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter] > 1) {\r\n                    L += `^${this._literal[letter]}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.dfrac}`;\r\n            } else {\r\n                return '0';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.dfrac}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // -----------------------------------------\r\n    /**\r\n     * Parse a string to a monom. The string may include fraction.\r\n     * @param inputStr\r\n     */\r\n    parse = (inputStr: string): Monom => {\r\n        // Set the literal part.\r\n        this.literalStr = inputStr;\r\n\r\n        // Get the coefficient\r\n        this._coefficient = new Fraction();\r\n\r\n        for (const v of [...inputStr.replace(/([a-z])|(\\^[+-]?[0-9]+)/g, ',').split(',')]) {\r\n            // The value is empty.\r\n            if (v.trim() === '') {\r\n                continue;\r\n            }\r\n\r\n            // Multiple the current coefficient by the new found value.\r\n            this._coefficient.multiply(new Fraction(v.trim()));\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Clone the current Monom.\r\n     */\r\n    clone = (): Monom => {\r\n        let F: Monom = new Monom();\r\n\r\n        F.coefficient = this._coefficient.clone();\r\n\r\n        // Copy the literal parts.\r\n        for (let k in this._literal) {\r\n            F.setLetter(k, this._literal[k]);\r\n        }\r\n        return F;\r\n    };\r\n\r\n    /**\r\n     * Create a zero value monom\r\n     */\r\n    zero = (): Monom => {\r\n        this._coefficient = new Fraction().zero();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Create a one value monom\r\n     */\r\n    one = (): Monom => {\r\n        this._coefficient = new Fraction().one();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Clean the monom by removing each letters with a power of zero.\r\n     */\r\n    clean = (): Monom => {\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter] === 0) {\r\n                delete this._literal[letter];\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Get the opposed\r\n     * Returns a monom.\r\n     */\r\n    opposed = (): Monom => {\r\n        this._coefficient.opposed();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Add all similar monoms. If they aren't similar, they are simply skipped.\r\n     * @param M (Monom[]) The monoms to add.\r\n     */\r\n    add = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                this._coefficient.add(m.coefficient);\r\n            } else {\r\n                console.log('Add: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Subtract multiple monoms\r\n     * @param M (Monom[]) The monoms to subtract\r\n     */\r\n    subtract = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                this._coefficient.add(m.coefficient.clone().opposed());\r\n            } else {\r\n                console.log('Subtract: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiple multiple monoms to the current monom\r\n     * @param M (Monom[]) The monoms to multiply to.\r\n     */\r\n    multiply = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            // Multiply the coefficient.\r\n            this._coefficient.multiply(m.coefficient);\r\n            // Multiply the literal parts.\r\n            for (let letter in m.literal) {\r\n                this._literal[letter] = (this._literal[letter] === undefined) ? m.literal[letter] : this._literal[letter] + m.literal[letter];\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiplyByNumber = (F: Fraction | number): Monom => {\r\n        this._coefficient.multiply(F);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divide the current monoms by multiple monoms\r\n     * @param M (Monom[])\r\n     */\r\n    divide = (...M: Monom[]): Monom => {\r\n        // Depending on the given value, choose the current item\r\n        for (let v of M) {\r\n            // Divide the coefficient\r\n            this._coefficient.divide(v.coefficient);\r\n\r\n            // Subtract the power values\r\n            for (let letter in v.literal) {\r\n                this._literal[letter] = (this._literal[letter] === undefined) ? -v.literal[letter] : this._literal[letter] - v.literal[letter];\r\n\r\n                // If the power of a particular setLetter is zero, delete it from the literal part..\r\n                if (this._literal[letter] === 0) {\r\n                    delete this._literal[letter];\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the pow of a monom.\r\n     * @param nb (number) : Mathematical pow\r\n     */\r\n    pow = (nb: number): Monom => {\r\n        this._coefficient.pow(nb);\r\n        for (let letter in this._literal) {\r\n            this._literal[letter] *= nb;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the nth-root of the monom\r\n     * @param p\r\n     */\r\n    root = (p: number): Monom => {\r\n        // TODO: determiner the nth root of a monom\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Return the square root of a monom\r\n     */\r\n    sqrt = (): Monom => {\r\n        if (this.isSquare()) {\r\n            this._coefficient.sqrt();\r\n            for (let letter in this._literal) {\r\n                this._literal[letter] /= 2;\r\n            }\r\n        }\r\n        return this.root(2);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    compare = (M: Monom, sign?: string): boolean => {\r\n        // TODO: Build the compare systems.\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // To be equal, they must be the isSame\r\n                if (!this.compare(M, 'same')) {\r\n                    return false;\r\n                }\r\n\r\n                // The litteral parts are the isSame. The coefficient must be equal\r\n                return this._coefficient.isEqual(M.coefficient);\r\n            case 'same':\r\n                // Get the list of all variables from both monoms.\r\n                let M1: string[] = this.variables,\r\n                    M2: string[] = M.variables,\r\n                    K: string[] = M1.concat(M2.filter((item) => M1.indexOf(item) < 0));\r\n\r\n                for (let key of K) {\r\n                    // The setLetter is not available in one of the monom\r\n                    if (this._literal[key] === undefined || M.literal[key] === undefined) {\r\n                        return false;\r\n                    }\r\n                    // The setLetter does not have the isSame power in each monoms.\r\n                    if (this._literal[key] !== M.literal[key]) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                // All are positive check - the monoms are the sames.\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is null\r\n     */\r\n    isZero(): boolean {\r\n        return this._coefficient.value === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is one\r\n     */\r\n    isOne(): boolean {\r\n        return this._coefficient.value === 1 && this.variables.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if two monoms are equals\r\n     * @param M\r\n     */\r\n    isEqual = (M: Monom): boolean => {\r\n        return this.compare(M, '=');\r\n    };\r\n\r\n    /**\r\n     * Determine if two monoms are similar\r\n     * @param M\r\n     */\r\n    isSameAs = (M: Monom): boolean => {\r\n        return this.compare(M, 'same');\r\n    };\r\n\r\n    isSquare = (): boolean => {\r\n        if (!this.coefficient.isSquare()) {\r\n            return false;\r\n        }\r\n        return this.isLitteralSquare();\r\n    }\r\n\r\n    isLitteralSquare = (): boolean => {\r\n        for (let letter in this.literal) {\r\n            if (this.literal[letter] % 2 !== 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    // ------------------------------------------\r\n    // Misc monoms functions\r\n    // -------------------------------------\r\n    /**\r\n     * Determine if a monom contains a setLetter in it's literal part\r\n     * @param letter\r\n     */\r\n    hasLetter = (letter?: string): boolean => {\r\n        return this._literal[letter === undefined ? 'x' : letter] > 0;\r\n    };\r\n\r\n    /**\r\n     * Set the power of a particular setLetter\r\n     * @param letter (string) Letter to change\r\n     * @param pow (number) Power of the setLetter (must be positive integer.\r\n     */\r\n    setLetter = (letter: string, pow: number): void => {\r\n        // If the power is not legal or is zero, remove the setLetter from the dict\r\n        if (pow <= 0 || !Number.isSafeInteger(pow)) {\r\n            if (this._literal[letter] !== undefined) {\r\n                delete this._literal[letter];\r\n            }\r\n        } else {\r\n            this._literal[letter] = pow;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the degree of a monom. If no setLetter is given, the result will be the global degree.\r\n     * @param letter (string) Letter to get to degree (power)\r\n     */\r\n    degree = (letter?: string): number => {\r\n        if (this.variables.length === 0) {\r\n            return 0;\r\n        }\r\n        if (letter === undefined) {\r\n            // Not setLetter given -> we get the global monom degree (sum of all the letters).\r\n            return Object.values(this._literal).reduce((t, n) => t + n);\r\n        } else {\r\n            // A setLetter is given -> get the corresponding power.\r\n            return this._literal[letter] === undefined ? 0 : this._literal[letter];\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Evaluate a monom. Each setLetter must be assigned to a Fraction.\r\n     * @param values    Dictionary of <setLetter: Fraction>\r\n     */\r\n    evaluate = (values: { [key: string]: Fraction|number }|Fraction|number): Fraction => {\r\n        let r = this.coefficient.clone();\r\n\r\n        if(typeof values === 'number' || values instanceof Fraction){\r\n            let tmpValues:{ [key: string]: Fraction|number } = {}\r\n\r\n            tmpValues[this.variables[0]] = new Fraction(values)\r\n            return this.evaluate(tmpValues);\r\n        }\r\n\r\n        if(typeof values === 'object') {\r\n            for (let L in this._literal) {\r\n                if (values[L] === undefined) {\r\n                    return new Fraction().zero();\r\n                }\r\n                let value = new Fraction(values[L])\r\n                r.multiply(value.pow(this._literal[L]));\r\n            }\r\n        }\r\n        return r;\r\n    };\r\n\r\n    /**\r\n     * Derivative the monom\r\n     * @param letter\r\n     */\r\n    derivative = (letter?: string): Monom => {\r\n        // No setLetter given - assume it's the setLetter 'x'\r\n        if (letter === undefined) {\r\n            letter = 'x';\r\n        }\r\n        if (this.hasLetter(letter)) {\r\n            let d = +this._literal[letter],\r\n                dM = this.clone();\r\n\r\n            // Subtract one to the degree.\r\n            dM._literal[letter] -= 1;\r\n\r\n            // Multiply the coefficient by the previous degree\r\n            dM._coefficient.multiply(new Fraction('' + d));\r\n            return dM;\r\n        } else {\r\n            return new Monom().zero();\r\n        }\r\n    };\r\n\r\n    primitive = (letter?: string): Monom => {\r\n        if(letter===undefined){letter = 'x'}\r\n\r\n        // Zero monom\r\n        let M = this.clone()\r\n\r\n        if(M.hasLetter(letter)){\r\n            M.coefficient = M.coefficient.clone().divide(M.degree(letter)+1)\r\n            M.setLetter(letter, M.degree(letter)+1)\r\n        }else{\r\n            // There is no letter.\r\n\r\n            // The coefficient might be zero (=> x) or a number a (=> ax)\r\n            if(M.coefficient.isZero()){\r\n                M.coefficient = new Fraction().one()\r\n            }\r\n            M.setLetter(letter, 1)\r\n        }\r\n        return M\r\n    }\r\n    // ----------------------------------------\r\n    // Static functions\r\n    // ----------------------------------------\r\n\r\n    /**\r\n     * Get the least common multiple of monoms\r\n     * @param monoms    Array of monoms\r\n     */\r\n    static lcm = (...monoms: Monom[]): Monom => {\r\n        let M = new Monom(),\r\n            coeffN: number[] = monoms.map(value => value.coefficient.numerator),\r\n            coeffD: number[] = monoms.map(value => value.coefficient.denominator),\r\n            n = Numeric.gcd(...coeffN),\r\n            d = Numeric.lcm(...coeffD);\r\n\r\n        // Get the coefficient.\r\n        M.coefficient = new Fraction(n, d).reduce();\r\n\r\n        // Set the literal parts - go through each monoms literal parts and get only the lowest degree of each letters.\r\n        for (let m of monoms) {\r\n            // Remove the inexistant letters from the resulting monom\r\n            for (let letter in M.literal) {\r\n                if (!(letter in m.literal)) {\r\n                    M.literal[letter] = 0;\r\n                }\r\n            }\r\n            for (let letter in m.literal) {\r\n                if (M.literal[letter] === undefined && m.literal[letter] > 0) {\r\n                    M.literal[letter] = m.literal[letter];\r\n                } else {\r\n                    M.literal[letter] = Math.min(m.literal[letter], M.literal[letter]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n    /**\r\n     * Multiply two monoms and return a NEW monom.\r\n     * @param monoms\r\n     */\r\n    static xmultiply = (...monoms: Monom[]): Monom => {\r\n        let M = new Monom().one();\r\n\r\n        for (let m of monoms) {\r\n            M.multiply(m);\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Determine if multiple monoms are similar\r\n     * @param M\r\n     */\r\n    areSameAs = (...M: Monom[]): boolean => {\r\n        let result: boolean = true;\r\n\r\n        // Check all monoms if they are the isSame as the \"this\" one.\r\n        for (let i = 0; i < M.length; i++) {\r\n            if (!this.isSameAs(M[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All check passed -> all the monoms are similar.\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Determine if multiple monoms are equals\r\n     * @param M\r\n     */\r\n    areEquals = (...M: Monom[]): boolean => {\r\n        // They are not similar.\r\n        if (!this.areSameAs(...M)) {\r\n            return false;\r\n        }\r\n\r\n        // Check all coefficient. They must be equals.\r\n        for (let m of M) {\r\n            if (!this._coefficient.isEqual(m.coefficient)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All checks passed.\r\n        return true;\r\n    };\r\n\r\n}","export default class randomCore {\r\n    protected _config: Object\r\n    protected _defaultConfig: Object\r\n    mergeConfig = (config: Object, defaultConfig: Object): Object => {\r\n        if (config !== undefined) {\r\n            return {...defaultConfig, ...config}\r\n        }\r\n        return defaultConfig\r\n    }\r\n\r\n    generate = (): unknown => {\r\n        return undefined\r\n    }\r\n\r\n    config = (config: Object): randomCore => {\r\n        this._config = this.mergeConfig(config, this._defaultConfig)\r\n        return this\r\n    }\r\n}","import randomCore from \"./randomCore\";\r\nimport {randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {Random} from \"./random\";\r\nimport Monom from \"../algebra/monom\";\r\n\r\n/**\r\n * Create a random monom based on a based configuration\r\n */\r\n    export default class rndMonom extends randomCore {\r\n        declare protected _config: randomMonomConfig\r\n        declare protected _defaultConfig: randomPolynomConfig\r\n\r\n        constructor(userConfig?: randomMonomConfig) {\r\n            super();\r\n\r\n            this._defaultConfig = {\r\n                letters: 'x',\r\n                degree: 2,\r\n                fraction: true,\r\n                zero: false\r\n            }\r\n\r\n            this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n        }\r\n\r\n        generate = (): Monom => {\r\n            // Create a monom instance\r\n            let M = new Monom()\r\n\r\n            // Generate the coefficient\r\n            M.coefficient.parse(Random.numberSym(10, this._config.zero), (this._config.fraction) ? Random.number(1, 10) : 1).reduce();\r\n\r\n            // Calculate the degree of the monom\r\n            if (this._config.letters.length > 1) {\r\n                // Initialise each items...\r\n                for (let L of this._config.letters.split('')) {\r\n                    M.setLetter(L, 0);\r\n                }\r\n                for (let i = 0; i < this._config.degree; i++) {\r\n                    const L = Random.item(this._config.letters.split(\"\"))\r\n                    M.setLetter(L, M.degree(L) + 1)\r\n                }\r\n            } else {\r\n                M.setLetter(this._config.letters, this._config.degree)\r\n            }\r\n\r\n            return M\r\n        }\r\n    }\r\n","import randomCore from \"./randomCore\";\r\nimport {randomPolynomConfig} from \"./rndTypes\";\r\nimport rndMonom from \"./rndMonom\";\r\nimport {Random} from \"./random\";\r\nimport Polynom from \"../algebra/polynom\";\r\nimport Monom from \"../algebra/monom\";\r\n\r\n/**\r\n * Random polynoms\r\n */\r\nexport default class rndPolynom extends randomCore {\r\n    declare protected _config: randomPolynomConfig\r\n    declare protected _defaultConfig: randomPolynomConfig\r\n\r\n    constructor(userConfig?: randomPolynomConfig) {\r\n        super();\r\n\r\n        // Default config for a random polynom\r\n        this._defaultConfig = {\r\n            letters: 'x',\r\n            degree: 2,\r\n            fraction: false,\r\n            zero: false,\r\n            unit: false,\r\n            factorable: false,\r\n            allowNullMonom: true,\r\n            numberOfMonoms: 0\r\n        }\r\n\r\n        // Merge config with initialiser\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Polynom => {\r\n        // Create the polynom\r\n        let P = new Polynom().empty(),\r\n            M: Monom\r\n\r\n        for (let i = this._config.degree; i >= 0; i--) {\r\n            // Create monom of corresponding degree.\r\n            M = new rndMonom({\r\n                letters: this._config.letters,\r\n                degree: i,\r\n                fraction: this._config.fraction,\r\n                zero: (i === this._config.degree) ? false : this._config.allowNullMonom\r\n            }).generate()\r\n\r\n            // If degree is the greatest and unit is true, set the monom value to one.\r\n            if (this._config.unit && this._config.degree === i) {\r\n                M.coefficient.one()\r\n            }\r\n\r\n            // Add to the polynom\r\n            P.add(M)\r\n        }\r\n\r\n        // If the number of monoms is greater than the allowed value, remove some of them...\r\n        if (this._config.numberOfMonoms > 0 && this._config.numberOfMonoms < P.length) {\r\n            console.log(P.monoms.length)\r\n            P.monoms = Random.array(P.monoms, this._config.numberOfMonoms)\r\n        }\r\n        return P\r\n    }\r\n\r\n    factorable = (): Polynom => {\r\n        let P = new Polynom()\r\n\r\n        return P\r\n    }\r\n}","/**\r\n * Random helpers\r\n */\r\nexport default class rndHelpers {\r\n\r\n    /**\r\n     * Random boolean with a percent ratio\r\n     * @param percent\r\n     */\r\n    static randomBool(percent:number=0.5):boolean{\r\n        return Math.random()<percent;\r\n    }\r\n\r\n    /**\r\n     * Random integer between two values.\r\n     * @param a (number) : From this value to the second value. If the second is ommited, this value is the max value.\r\n     * @param b (number) : To this value. If this is ommited.\r\n     */\r\n    static randomInt(a:number, b?:number):number{\r\n        if(b===undefined){return this.randomInt(0,a);}\r\n\r\n        return Math.floor(Math.random() * (b - a + 1) + a);\r\n    }\r\n\r\n    /**\r\n     * Random integer between -max and max value.\r\n     * @param max (number) : determine the limits.\r\n     * @param zero (bool) : determine if zero is allowed or not.\r\n     */\r\n    static randomIntSym(max:number, zero?:boolean):number{\r\n        if(zero===false){\r\n            return this.randomBool()?this.randomInt(1,max):-this.randomInt(1,max);\r\n        }else{\r\n            return this.randomInt(-max, max);\r\n        }\r\n    }\r\n\r\n    static randomArray(arr: any[], number?:number):any[]{\r\n        if(number===undefined){number = 1}\r\n\r\n        // Return a clone array\r\n        if(arr.length<=0){return Object.values(arr)}\r\n\r\n        // Randomize the array and return the n first elements.\r\n        return rndHelpers.shuffleArray(arr).slice(0,number);\r\n    }\r\n\r\n    static randomItem(arr: any[]): any{\r\n        if(arr.length===0){return ''}\r\n        return this.randomArray(arr, 1)[0]\r\n    }\r\n\r\n    static shuffleArray(arr: any[]): any[] {\r\n        // The Fisher-Yates algorithm\r\n        let shuffleArray = Object.values(arr)\r\n        for (let i = shuffleArray.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            const temp = shuffleArray[i];\r\n            shuffleArray[i] = shuffleArray[j];\r\n            shuffleArray[j] = temp;\r\n        }\r\n\r\n        return shuffleArray;\r\n    }\r\n\r\n}","/**\r\n * Polynom module contains everything necessary to handle polynoms.*\r\n * @module Polynom\r\n */\r\n\r\nimport Monom from './monom';\r\nimport Shutingyard from '../shutingyard';\r\nimport Numeric from '../numeric';\r\nimport {Random} from \"../random/random\";\r\nimport Fraction from \"../coefficients/fraction\";\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n * ```\r\n * let P = new Polynom('3x-4')\r\n * ```\r\n */\r\nexport default class Polynom {\r\n    private _rawString: string;\r\n    private _monoms: Monom[];\r\n    private _factors: Polynom[];\r\n    private _texString: string;\r\n\r\n    /**\r\n     *\r\n     * @param {string} polynomString (optional) Default polynom to parse on class creation\r\n     * @param values\r\n     */\r\n    constructor(polynomString?: string, ...values: any[]) {\r\n        this._monoms = [];\r\n        this._factors = [];\r\n        if (polynomString !== undefined) {\r\n            this.parse(polynomString, ...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    get isPolynom() {\r\n        return true;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get monoms() {\r\n        return this._monoms;\r\n    }\r\n\r\n    set monoms(M: Monom[]) {\r\n        this._monoms = M;\r\n    }\r\n\r\n    get factors(): Polynom[] {\r\n        return this._factors;\r\n    }\r\n\r\n    set factors(value: Polynom[]) {\r\n        this._factors = value;\r\n    }\r\n\r\n    get texFactors(): string {\r\n        this.factorize()\r\n\r\n        let tex = ''\r\n        for (let f of this.factors) {\r\n            if (f.monoms.length > 1) {\r\n                tex += `(${f.tex})`\r\n            } else {\r\n                tex = f.tex + tex;\r\n            }\r\n        }\r\n        return tex;\r\n    }\r\n\r\n    get texString(): string {\r\n        return this._texString;\r\n    }\r\n\r\n    get length() {\r\n        // TODO: Must reduce the monoms list to remove the zero coefficient.\r\n        return this._monoms.length;\r\n    }\r\n\r\n    get display(): string {\r\n        return this.genDisplay();\r\n    }\r\n\r\n    get raw(): string {\r\n        return this._rawString\r\n    }\r\n\r\n    get tex(): string {\r\n        return this.genDisplay('tex');\r\n    }\r\n\r\n    get isMultiVariable(): boolean {\r\n        const B = false;\r\n        for (const m of this._monoms) {\r\n            if (m.variables.length > 1) {\r\n                return true;\r\n            }\r\n        }\r\n        return B;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            V = V.concat(m.variables);\r\n        }\r\n\r\n        // Remove duplicates.\r\n        V = [...new Set(V)];\r\n\r\n        return V;\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    private genDisplay = (output?: string, forceSign?: boolean, wrapParentheses?: boolean): string => {\r\n        let P: string = '';\r\n\r\n        for (const k of this._monoms) {\r\n            if (k.coefficient.value === 0) {\r\n                continue;\r\n            }\r\n\r\n            P += `${(k.coefficient.sign() === 1 && (P !== '' || forceSign === true)) ? '+' : ''}${(output === 'tex') ? k.tex : k.display}`;\r\n        }\r\n\r\n        if (wrapParentheses === true && this.length > 1) {\r\n            if (output === 'tex') {\r\n                P = `\\\\left( ${P} \\\\right)`;\r\n            } else {\r\n                P = `(${P})`;\r\n            }\r\n        }\r\n\r\n        if (P === '') {\r\n            P = '0';\r\n        }\r\n        return P;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse a string to a polynom.\r\n     * @param inputStr\r\n     * @param values: as string, numbers or fractions\r\n     */\r\n    parse = (inputStr: string, ...values: any[]): Polynom => {\r\n        if (values === undefined || values.length === 0) {\r\n            inputStr = '' + inputStr;\r\n            this._rawString = inputStr;\r\n\r\n            // Parse the polynom using the shuting yard algorithm\r\n            if (inputStr !== '' && !isNaN(Number(inputStr))) {\r\n                this.empty();\r\n                // It's a simple number.\r\n                let m = new Monom();\r\n                m.coefficient = new Fraction(inputStr);\r\n                m.literalStr = '';\r\n                this.add(m);\r\n                return this;\r\n            }\r\n\r\n            // Parse the string.\r\n            return this.shutingYardToReducedPolynom(inputStr);\r\n        } else if (/^[a-z]/.test(inputStr)) {\r\n            // We assume the inputStr contains only letters.\r\n            this.empty();\r\n\r\n            let fractions = values.map(x => new Fraction(x));\r\n            // Multiple setLetter version\r\n            if (inputStr.length > 1) {\r\n                // TODO: check that the number of values given correspond to the letters (+1 eventually)\r\n                let letters = inputStr.split(''),\r\n                    i = 0;\r\n                for (let F of fractions) {\r\n                    let m = new Monom();\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = letters[i] || '';\r\n                    this.add(m);\r\n                    i++;\r\n                }\r\n            }\r\n            // Single setLetter version\r\n            else {\r\n                let n = fractions.length - 1;\r\n                for (let F of fractions) {\r\n                    let m = new Monom()\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = `${inputStr}^${n}`\r\n                    this.add(m);\r\n                    n--;\r\n                }\r\n            }\r\n            return this;\r\n        } else {\r\n            return this.zero();\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * Main parse using a shutting yard class\r\n     * @param inputStr\r\n     */\r\n    private shutingYardToReducedPolynom = (inputStr: string): Polynom => {\r\n        // Get the RPN array of the current expression\r\n        const SY: Shutingyard = new Shutingyard().parse(inputStr);\r\n        const rpn: { token: string, tokenType: string }[] = SY.rpn;\r\n        let m1: Polynom;\r\n        let m2: Polynom;\r\n\r\n        let stack: Polynom[] = [],\r\n            previousToken: string = null,\r\n            tempPolynom\r\n        for (const element of rpn) {\r\n            if (element.tokenType === 'coefficient' || element.tokenType === 'variable') {\r\n                tempPolynom = new Polynom().zero();\r\n                tempPolynom.monoms = [new Monom(element.token)]\r\n                stack.push(tempPolynom.clone())\r\n            } else if (element.tokenType === 'operation') {\r\n                m2 = (stack.pop()) || new Polynom().zero();\r\n                m1 = (stack.pop()) || new Polynom().zero();\r\n                switch (element.token) {\r\n                    case '+':\r\n                        stack.push(m1.add(m2))\r\n                        break;\r\n                    case '-':\r\n                        stack.push(m1.subtract(m2))\r\n                        break;\r\n                    case '*':\r\n                        stack.push(m1.multiply(m2))\r\n                        break;\r\n                    case '^':\r\n                        stack.push(m1.pow(+previousToken))\r\n                }\r\n            }\r\n            previousToken = element.token;\r\n        }\r\n\r\n        this._monoms = stack[0].monoms;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the polynom\r\n     */\r\n    clone = (): Polynom => {\r\n        const P = new Polynom();\r\n        const M: Monom[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            M.push(m.clone());\r\n        }\r\n\r\n        P.monoms = M;\r\n        return P;\r\n    };\r\n\r\n    /**\r\n     * Set the polynom to zero.\r\n     * @returns {this}\r\n     */\r\n    zero = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().zero());\r\n        this._rawString = '0';\r\n        return this;\r\n    };\r\n\r\n    one = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().one());\r\n        this._rawString = '1';\r\n        return this;\r\n    }\r\n\r\n    empty = (): Polynom => {\r\n        this._monoms = [];\r\n        this._rawString = '';\r\n        return this;\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Polynom generators and randomizers\r\n    // -----------------------------------------------\r\n    private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n        degree: 2,\r\n        unit: true,\r\n        fractions: false,\r\n        factorable: false,\r\n        letters: 'x',\r\n        allowNullMonom: false,\r\n        numberOfMonoms: false\r\n    };\r\n    get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n        return this._randomizeDefaults;\r\n    }\r\n\r\n    set randomizeDefaults(value) {\r\n        this._randomizeDefaults = value;\r\n    }\r\n\r\n    randomize = (config: { [key: string]: number | string | boolean }): Polynom => {\r\n        let P = new Polynom();\r\n\r\n        // Check the config file and use the default values.\r\n        if (config === undefined) {\r\n            config = {};\r\n        }\r\n        for (let k in this._randomizeDefaults) {\r\n            if (config[k] === undefined) {\r\n                config[k] = this._randomizeDefaults[k];\r\n            }\r\n        }\r\n\r\n        // TODO: Build a more robust randomize function\r\n        return P;\r\n    }\r\n\r\n    rndFactorable = (degree: number = 2, unit: boolean | number = false, letters: string = 'x'): Polynom => {\r\n        // TODO: Make rndFactorable polynom generator more user friendly\r\n        this._factors = [];\r\n        for (let i = 0; i < degree; i++) {\r\n            let factorUnit = unit === true || i >= unit,\r\n                p = Random.polynom({\r\n                    degree: 1,\r\n                    unit: factorUnit,\r\n                    fraction: false,\r\n                    letters\r\n                });\r\n            this._factors.push(p);\r\n        }\r\n\r\n        this.empty().monoms = this._factors[0].monoms;\r\n        for (let i = 1; i < this._factors.length; i++) {\r\n            this.multiply(this._factors[i]);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Polynom => {\r\n        this._monoms = this._monoms.map(m => m.opposed());\r\n        return this;\r\n    };\r\n\r\n    add = (...values: any[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value.isPolynom) {\r\n                this._monoms = this._monoms.concat(value.monoms);\r\n            } else if (value.isMonom) {\r\n                this._monoms.push(value.clone());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()));\r\n            } else {\r\n                this._monoms.push(new Monom(value));\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (...values: any[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value.isPolynom) {\r\n                this._monoms = this._monoms.concat(value.clone().opposed().monoms);\r\n            } else if (value.isMonom) {\r\n                this._monoms.push(value.clone().opposed());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()).opposed());\r\n            } else {\r\n                this._monoms.push(new Monom(value).opposed());\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    multiply = (value: any): Polynom => {\r\n        if (value.isPolynom) {\r\n            return this.multiplyByPolynom(value);\r\n        } else if (value.isFraction) {\r\n            return this.multiplyByFraction(value);\r\n        } else if (value.isMonom) {\r\n            return this.multiplyByMonom(value);\r\n        } else if (Number.isSafeInteger(value)) {\r\n            return this.multiplyByInteger(value);\r\n        }\r\n\r\n        // Something went wrong...\r\n        return this;\r\n    }\r\n\r\n    private multiplyByPolynom = (P: Polynom): Polynom => {\r\n        const M: Monom[] = [];\r\n        for (const m1 of this._monoms) {\r\n            for (const m2 of P.monoms) {\r\n                M.push(Monom.xmultiply(m1, m2));\r\n            }\r\n        }\r\n\r\n        this._monoms = M;\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.multiply(F);\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByInteger = (nb: number): Polynom => {\r\n        return this.multiplyByFraction(new Fraction(nb));\r\n    };\r\n\r\n    private multiplyByMonom = (M: Monom): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.multiply(M)\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n    /**\r\n     * Divide the current polynom by another polynom.\r\n     * @param P\r\n     * returns {quotient: Polynom, reminder: Polynom}\r\n     */\r\n    euclidian = (P: Polynom): { quotient: Polynom, reminder: Polynom } => {\r\n        const letter: string = P.variables[0];\r\n        const quotient: Polynom = new Polynom().zero();\r\n        const reminder: Polynom = this.clone().reorder(letter);\r\n\r\n        // There is no variable !\r\n        if (P.variables.length === 0) {\r\n            return {quotient, reminder}\r\n        }\r\n\r\n        // Get at least a letter\r\n\r\n        const maxMP: Monom = P.monomByDegree(undefined, letter);\r\n        const degreeP: number = P.degree(letter);\r\n\r\n        let newM: Monom;\r\n\r\n        // Make the euclidian division of the two polynoms.\r\n        let MaxIteration = this.degree(letter) * 2;\r\n        while (reminder.degree(letter) >= degreeP && MaxIteration >= 0) {\r\n            // console.log('EUCLIDE Q', quotient.degree(letter), quotient.tex)\r\n            // console.log('EUCLIDE R', reminder.degree(letter), reminder.tex)\r\n            // console.log('ITERATION', MaxIteration)\r\n            MaxIteration--\r\n\r\n            // Get the greatest monom divided by the max monom of the divider\r\n            newM = reminder.monomByDegree(undefined, letter).clone().divide(maxMP);\r\n\r\n            if (newM.isZero()) {\r\n                break;\r\n            }\r\n\r\n            // Get the new quotient and reminder.\r\n            quotient.add(newM);\r\n            reminder.subtract(P.clone().multiply(newM));\r\n        }\r\n\r\n        return {quotient, reminder};\r\n    };\r\n\r\n    divide = (value: any): Polynom => {\r\n        if (value.isFraction) {\r\n            this.divideByFraction(value);\r\n        } else if (Number.isSafeInteger(value)) {\r\n            return this.divideByInteger(value);\r\n        }\r\n    }\r\n\r\n    private divideByInteger = (nb: number): Polynom => {\r\n        const nbF = new Fraction(nb);\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(nbF);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    private divideByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(F);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    pow = (nb: number): Polynom => {\r\n        if (!Number.isSafeInteger(nb)) {\r\n            return this.zero();\r\n        }\r\n        if (nb < 0) {\r\n            return this.zero();\r\n        }\r\n        if (nb === 0) {\r\n            return new Polynom();\r\n        }\r\n\r\n        const P = this.clone();\r\n        for (let i = 1; i < nb; i++) {\r\n            this.multiply(P);\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param P\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (P: Polynom, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '='\r\n        }\r\n\r\n        // Create clone version to reduce them without altering the original polynoms.\r\n        const cP1 = this.clone().reduce().reorder();\r\n        const cP2 = P.clone().reduce().reorder();\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree() !== cP2.degree()) {\r\n                    return false;\r\n                }\r\n\r\n                // Check if the coefficients are the isSame.\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isEqual(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            case 'same':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree() !== cP2.degree()) {\r\n                    return false;\r\n                }\r\n\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isSameAs(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    isZero(): boolean {\r\n        return (this._monoms.length === 1 && this._monoms[0].coefficient.isZero()) || this._monoms.length === 0;\r\n    }\r\n\r\n    isOne(): boolean {\r\n        return this._monoms.length === 1 && this._monoms[0].coefficient.isOne();\r\n    }\r\n\r\n    isEqual = (P: Polynom): boolean => {\r\n        return this.compare(P, '=');\r\n    };\r\n\r\n    isSameAs = (P: Polynom): boolean => {\r\n        return this.compare(P, 'same');\r\n    };\r\n\r\n    isOpposedAt = (P: Polynom): boolean => {\r\n        return this.compare(P.clone().opposed(), '=');\r\n    };\r\n\r\n    isFactorized = (polynomString: string): boolean => {\r\n        let P;\r\n\r\n        // Check if polynom is complete...\r\n        if (polynomString.match(/\\(/g).length !== polynomString.match(/\\)/g).length) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check if the provided (string) version is fully factorized.\r\n        // Run a regex on the string.\r\n        let polynomStringNormalized = polynomString.replaceAll('*', ''),\r\n            polynomStringReduced = '' + polynomStringNormalized,\r\n            factors: string[] = [];\r\n\r\n        for (let x of polynomStringNormalized.matchAll(/\\(([a-z0-9+\\-]+)\\)(\\^[0-9]*)?/g)) {\r\n            if (x[2] !== undefined) {\r\n                for (let i = 0; i < +x[2].substr(1); i++) {\r\n                    factors.push(x[1])\r\n                }\r\n            } else {\r\n                factors.push(x[1]);\r\n            }\r\n            polynomStringReduced = polynomStringReduced.replaceAll(x[0], '');\r\n        }\r\n        if (polynomStringReduced !== '') {\r\n            factors.push(polynomStringReduced);\r\n        }\r\n        let polyFactors = factors.map(x => new Polynom(x));\r\n\r\n        // Factorize the current polynom.\r\n        this.factorize();\r\n\r\n        // Compare the given factors with the generated factors\r\n        let sign = 1;\r\n        for (let f of this.factors) {\r\n            for (let i = 0; i < polyFactors.length; i++) {\r\n                if (f.isEqual(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    break;\r\n                } else if (f.isOpposedAt(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    sign = -sign;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // The polyfactors must be empty and the cumulative opposite factors must be 1.\r\n        return (polyFactors.length === 0 && sign === 1);\r\n    }\r\n\r\n    isDeveloped = (polynomString: string): Boolean => {\r\n        let P: Polynom;\r\n\r\n        // There is at least one parenthese - it is not developed.\r\n        if (polynomString.match(/\\(/g).length + polynomString.match(/\\)/g).length) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            // Build the polynom\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check that everything is completely developed. Actually, there are no parentheses... so it is fully developed\r\n\r\n        // maybe it wasn't reduced and not ordered...\r\n        // compare polynom string.\r\n\r\n        // normalize the string\r\n        let polynomStringNormalized = polynomString.replaceAll('[*\\s]', '')\r\n\r\n        // Determine if it's the exact same string.\r\n        // TODO: Maybe it's enough to just make this test !\r\n        return polynomStringNormalized === P.reduce().reorder().display\r\n    }\r\n    // ------------------------------------------\r\n    // Misc polynoms functions\r\n    // -------------------------------------\r\n    reduce = (): Polynom => {\r\n        for (let i = 0; i < this._monoms.length; i++) {\r\n            for (let j = i + 1; j < this._monoms.length; j++) {\r\n                if (this._monoms[i].isSameAs(this.monoms[j])) {\r\n                    this._monoms[i].add(this.monoms[j]);\r\n                    this._monoms.splice(j, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Remove all null monoms\r\n        this._monoms = this._monoms.filter((m) => {\r\n            return m.coefficient.value !== 0\r\n        });\r\n\r\n        // Reduce all monoms coefficient.\r\n        for (const m of this._monoms) {\r\n            m.coefficient.reduce();\r\n        }\r\n\r\n        if (this.length === 0) {\r\n            return new Polynom().zero();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    reorder = (letter: string = 'x'): Polynom => {\r\n        // TODO: Must handle multiple setLetter reorder system\r\n        this._monoms.sort(function (a, b) {\r\n            return b.degree(letter) - a.degree(letter)\r\n        });\r\n        return this.reduce();\r\n    };\r\n\r\n    degree = (letter?: string): number => {\r\n        let d: number = 0;\r\n        for (const m of this._monoms) {\r\n            d = Math.max(m.degree(letter), d);\r\n        }\r\n        return d;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        let L: string[] = [], S = new Set();\r\n\r\n        for (let m of this._monoms) {\r\n            S = new Set([...S, ...m.variables]);\r\n        }\r\n\r\n        // @ts-ignore\r\n        return [...S];\r\n    }\r\n\r\n    /**\r\n     * Replace a variable (letter) by a polynom.\r\n     * @param letter\r\n     * @param P\r\n     */\r\n    replaceBy = (letter: string, P: Polynom): Polynom => {\r\n        let pow: number;\r\n        const resultPolynom: Polynom = new Polynom().zero();\r\n\r\n        for (const m of this.monoms) {\r\n            if (m.literal[letter] === undefined || m.literal[letter] === 0) {\r\n                resultPolynom.add(m.clone());\r\n            } else {\r\n                // We have found a setLetter.\r\n                // Get the power and reset it.\r\n                pow = +m.literal[letter];\r\n                delete m.literal[letter];\r\n\r\n                resultPolynom.add(P.clone().pow(pow).multiply(m));\r\n            }\r\n        }\r\n\r\n        this._monoms = resultPolynom.reduce().reorder().monoms;\r\n        return this;\r\n    };\r\n\r\n    // Evaluate a polynom.\r\n    evaluate = (values: { [key: string]: Fraction | number } | Fraction | number): Fraction => {\r\n        const r = new Fraction().zero();\r\n\r\n        this._monoms.forEach(monom => {\r\n            //console.log('Evaluate polynom: ', monom.display, values, monom.evaluate(values).display);\r\n            r.add(monom.evaluate(values));\r\n        });\r\n        return r;\r\n    };\r\n\r\n    derivative = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.derivative(letter));\r\n        }\r\n        return dP;\r\n\r\n    }\r\n\r\n    primitive = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.primitive(letter))\r\n        }\r\n        return dP\r\n    }\r\n\r\n    integrate = (a: Fraction | number, b: Fraction | number, letter?: string): Fraction => {\r\n        const primitive = this.primitive(letter)\r\n\r\n        if (letter === undefined) {\r\n            letter = 'x'\r\n        }\r\n\r\n        let valuesA: { [key: string]: Fraction | number } = {},\r\n            valuesB: { [key: string]: Fraction | number } = {}\r\n        valuesA[letter] = a;\r\n        valuesB[letter] = b;\r\n\r\n        return primitive.evaluate(valuesB).subtract(primitive.evaluate(valuesA))\r\n    }\r\n    // ------------------------------------------\r\n    // Polynoms factorization functions\r\n    // -------------------------------------\r\n    /**\r\n     * Factorize a polynom and store the best results in factors.\r\n     * @param maxValue Defines the greatest value to search to (default is 20).\r\n     */\r\n    factorize_OLD = (maxValue?: number): Polynom => {\r\n        // TODO: Must handle other letters than 'x'\r\n        this._factors = [];\r\n\r\n        // Duplicate the polynom\r\n        let P = this.clone(),\r\n            nbFactorsFound = 0;\r\n\r\n        // Determine if the polynom is \"negative\", eg has a max monom degree with a negative coefficient.\r\n        if (P.monomByDegree().coefficient.numerator < 0) {\r\n            this._factors.push(new Polynom('-1'));\r\n        }\r\n\r\n        // Determine if there is a 'common' monom\r\n        let M = P.commonMonom();\r\n        if (!M.isOne()) {\r\n            let commonPolynom = new Polynom()\r\n            commonPolynom.monoms = [M]\r\n            if (this._factors.length === 0) {\r\n                this._factors.push(commonPolynom);\r\n            } else {\r\n                this._factors = [];\r\n                this._factors.push(commonPolynom.opposed());\r\n            }\r\n            P = P.euclidian(commonPolynom).quotient;\r\n\r\n            nbFactorsFound = commonPolynom.degree();\r\n        }\r\n\r\n        // Main loop.\r\n        //\r\n        // Do it only if degree is equal or less than one.\r\n        if (P.degree() <= 1) {\r\n            this._factors.push(P.clone());\r\n        } else {\r\n            // Force test.\r\n            let Q = new Fraction(),\r\n                F,\r\n                degree = P.degree();\r\n\r\n            maxValue = maxValue === undefined ? 20 : maxValue;\r\n\r\n            // Test all polynom similar to ax+b\r\n            for (let a = 1; a <= maxValue; a++) {\r\n                // Skip a coefficient of 0\r\n                for (let b = -maxValue; b <= maxValue; b++) {\r\n\r\n                    Q.parse(-b, a);\r\n\r\n                    if (P.evaluate({x: Q})) {\r\n                        F = new Polynom(`${a}x+${b}`);\r\n                        while (P.evaluate({x: Q}).value === 0) {\r\n                            this._factors.push(F.clone());\r\n                            nbFactorsFound++;\r\n\r\n                            // Means it can be divided without reminders.\r\n                            P = P.euclidian(F).quotient;\r\n                        }\r\n                    }\r\n\r\n                    // Continue if the numbers of factors found equals the degree.\r\n                    if (nbFactorsFound > degree) {\r\n                        return this;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (P.degree() > 1) {\r\n                this._factors.push(P.clone());\r\n                return this;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    factorize = (letter?: string): Polynom[] => {\r\n        let factors: Polynom[] = [];\r\n\r\n        // Extract the common monom\r\n        let P = this.clone().reorder(),\r\n            M = P.commonMonom(),\r\n            tempPolynom: Polynom\r\n        // It has a common monom.\r\n        if (!M.isOne()) {\r\n            tempPolynom = new Polynom()\r\n            tempPolynom.monoms = [M]\r\n            factors = [tempPolynom.clone()]\r\n            P = P.euclidian(tempPolynom).quotient;\r\n        }\r\n\r\n        let securityLoop = P.degree() * 2\r\n        // securityLoop = 0\r\n        while (securityLoop >= 0) {\r\n            securityLoop--\r\n\r\n\r\n            if (P.monoms.length < 2) {\r\n                if (!P.isOne()) {\r\n                    factors.push(P.clone());\r\n                }\r\n                break;\r\n            } else {\r\n                // Get the first and last monom.\r\n                let m1 = P.monoms[0].dividers,\r\n                    m2 = P.monoms[P.monoms.length - 1].dividers\r\n\r\n                // console.log('CURRENT VALUE')\r\n                // console.log(P.tex)\r\n                // console.log('---------------------')\r\n                for (let m1d of m1) {\r\n                    for (let m2d of m2) {\r\n                        // if(m1d.degree()===m2d.degree()){continue}\r\n                        let dividerPolynom = new Polynom(),\r\n                            result\r\n                        dividerPolynom.monoms = [m1d.clone(), m2d.clone()]\r\n                        result = P.euclidian(dividerPolynom)\r\n\r\n                        // console.log(dividerPolynom.tex, '=>', result.reminder.tex, '|||||', result.quotient.tex)\r\n                        if (result.reminder.isZero()) {\r\n                            P = result.quotient.clone();\r\n                            factors.push(dividerPolynom)\r\n                            continue;\r\n                        }\r\n\r\n                        dividerPolynom.monoms = [m1d.clone(), m2d.clone().opposed()]\r\n                        result = P.euclidian(dividerPolynom)\r\n                        if (result.reminder.isZero()) {\r\n                            P = result.quotient.clone();\r\n                            factors.push(dividerPolynom)\r\n                        }\r\n                        // console.log(dividerPolynom.tex, '=>', result.reminder.tex)\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        this.factors = factors\r\n        return factors;\r\n    }\r\n\r\n    private _factorize2ndDegree = (letter: string): Polynom[] => {\r\n        let P1: Polynom, P2: Polynom,\r\n            a, b, c, delta, x1, x2, factor;\r\n\r\n        // One variable only\r\n        if (this.numberOfVars === 1) {\r\n            a = this.monomByDegree(2, letter).coefficient;\r\n            b = this.monomByDegree(1, letter).coefficient;\r\n            c = this.monomByDegree(0, letter).coefficient;\r\n            delta = b.clone().pow(2).subtract(a.clone().multiply(c).multiply(4));\r\n\r\n            if (delta.isZero()) {\r\n                x1 = b.clone().opposed().divide(a.clone().multiply(2))\r\n                P1 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                P2 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                factor = a.divide(x1.denominator).divide(x1.denominator);\r\n\r\n                if (!factor.isOne()) {\r\n                    // TODO: Update new Polynom to accept anything...\r\n                    return [new Polynom(factor.display), P1, P2]\r\n                } else {\r\n                    return [P1, P2]\r\n                }\r\n            } else if (delta.isPositive() && delta.isSquare()) {\r\n                x1 = b.clone().opposed()\r\n                    .add(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n                x2 = b.clone().opposed()\r\n                    .subtract(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n\r\n                // (2x+5)(3x-2)\r\n                // 6x^2+11x-10\r\n                // a = 6, b = 11, c = -10\r\n                // delta = 121-4*6*(-10) = 361= 19^2\r\n                // x1 = (-11 + 19)  / 12 = 8/12 = 2/3\r\n                // x2 = (-11 - 19)  / 12 = -30/12 = -5/2\r\n                factor = a.divide(x1.denominator).divide(x2.denominator);\r\n                if (factor.isOne()) {\r\n                    return [\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n                } else {\r\n                    return [\r\n                        new Polynom(factor.display),\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n\r\n                }\r\n            } else {\r\n                // No solution possible - return the complete value.\r\n                return [this.clone()]\r\n            }\r\n        } else {\r\n            // If multiple variables, only handle perfect squares...\r\n            a = this.monomByDegree(2, letter);\r\n            b = this.monomByDegree(1, letter);\r\n            c = this.monomByDegree(0, letter);\r\n\r\n\r\n            if (a.isLitteralSquare() && c.isLitteralSquare()) {\r\n                // Check the middle item is same as...\r\n                if (b.clone().pow(2).isSameAs(a.clone().multiply(c))) {\r\n                    // Determine if the coefficient values matches.\r\n\r\n                    // Search 4 values (r, s, t, u) that matches:\r\n                    // (r X + s Y)(t X + u Y) = rt X^2 + (ru + st) XY + su Y^2\r\n\r\n                    let xPolynom = new Polynom('x', a.coefficient, b.coefficient, c.coefficient);\r\n                    let xFactors = xPolynom._factorize2ndDegree('x');\r\n\r\n                    let factors = [], xyzPolynom: Polynom;\r\n\r\n                    if (xFactors.length >= 2) {\r\n                        for (let p of xFactors) {\r\n                            if (p.degree() === 0) {\r\n                                factors.push(p.clone())\r\n                            } else {\r\n                                xyzPolynom = p.clone();\r\n                                xyzPolynom.monoms[0].literal = a.literalSqrt\r\n                                xyzPolynom.monoms[1].literal = c.literalSqrt\r\n                                factors.push(xyzPolynom.clone())\r\n                            }\r\n                        }\r\n                        return factors\r\n                    }\r\n                }\r\n            }\r\n\r\n            return [this.clone()]\r\n            //\r\n            // console.log(a.tex, b.tex, c.tex)\r\n            // if (a.isSquare() && c.isSquare()) {\r\n            //     console.log('A C squares')\r\n            //     if (a.clone().sqrt().multiply(c.clone().sqrt()).multiplyByNumber(2).isSameAs(b)) {\r\n            //         console.log('HERE')\r\n            //         if (a.coefficient.sign() === b.coefficient.sign()) {\r\n            //             return []\r\n            //         }else{\r\n            //             return []\r\n            //         }\r\n            //     }\r\n            // } else if(a.isLitteralSquare() && c.isLitteralSquare()) {\r\n            //     console.log('A C litteral SQUARES')\r\n            //     // Check that the middle element is the product of a and c.\r\n            //\r\n            //     if(b.clone().pow(2).isSameAs(a.clone().multiply(c))){\r\n            //         console.log('SAME')\r\n            //\r\n            //     }else{\r\n            //         console.log('NOT SAME')\r\n            //     }\r\n            //\r\n            //     return [this.clone()]\r\n            // } else {\r\n            //     console.log('NOT SQUARES AT ALL !!!!')\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    private _factorizeByGroups = (): Polynom[] => {\r\n        // TODO: Factorize by groups.\r\n        return [];\r\n    }\r\n    // ------------------------------------------\r\n    // Polynoms helpers functions\r\n    // -------------------------------------\r\n    // TODO: get zeroes for more than first degree\r\n    getZeroes = (): (Fraction | boolean)[] => {\r\n        const Z: Fraction[] = [];\r\n\r\n        switch (this.degree()) {\r\n            case 0:\r\n                if (this._monoms[0].coefficient.value === 0) {\r\n                    return [true];\r\n                } else {\r\n                    return [false];\r\n                }\r\n            case 1:\r\n                // There is only one monoms,\r\n                if (this._monoms.length === 1) {\r\n                    return [new Fraction().zero()];\r\n                } else {\r\n                    const P = this.clone().reduce().reorder();\r\n                    return [P.monoms[1].coefficient.opposed().divide(P.monoms[0].coefficient)];\r\n                }\r\n            // TODO: Determine the zeros of an equation of second degree.\r\n            //case 2:\r\n            default:\r\n                // Make sure the polynom is factorized.\r\n                if (this._factors.length === 0) {\r\n                    this.factorize()\r\n                }\r\n\r\n                let zeroes = [], zeroesAsTex = [];\r\n                for (let P of this._factors) {\r\n                    if (P.degree() > 2) {\r\n                        // TODO: Handle other polynom.\r\n\r\n                    } else if (P.degree() === 2) {\r\n                        let A = P.monomByDegree(2).coefficient,\r\n                            B = P.monomByDegree(1).coefficient,\r\n                            C = P.monomByDegree(0).coefficient,\r\n                            D = B.clone().pow(2).subtract(A.clone().multiply(C).multiply(4));\r\n\r\n                        if (D.value > 0) {\r\n                            /*console.log('Two zeroes for ', P.tex); */\r\n                            let x1 = (-(B.value) + Math.sqrt(D.value)) / (2 * A.value),\r\n                                x2 = (-(B.value) - Math.sqrt(D.value)) / (2 * A.value);\r\n\r\n                            zeroes.push(new Fraction(x1.toFixed(3)).reduce());\r\n                            zeroes.push(new Fraction(x2.toFixed(3)).reduce());\r\n                        } else if (D.value === 0) {\r\n                            /*console.log('One zero for ', P.tex); */\r\n\r\n                        } else {\r\n                            console.log('No zero for ', P.tex);\r\n                        }\r\n                    } else {\r\n                        for (let z of P.getZeroes()) {\r\n                            // Check if the zero is already in the list.\r\n                            if (z === false || z === true) {\r\n                                continue;\r\n                            }\r\n                            if (zeroesAsTex.indexOf(z.frac) === -1) {\r\n                                zeroes.push(z);\r\n                                zeroesAsTex.push(z.frac);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return zeroes;\r\n        }\r\n        return Z;\r\n    };\r\n\r\n\r\n    // TODO: analyse the next functions to determine if they are useful or not...\r\n    monomByDegree = (degree?: number, letter?: string): Monom => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomByDegree(this.degree(letter), letter);\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter) === degree) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        // Nothing was found - return the null monom.\r\n        return new Monom().zero();\r\n    };\r\n\r\n    monomsByDegree = (degree?: number, letter?: string): Monom[] => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomsByDegree(this.degree(letter));\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        let Ms: Monom[] = [];\r\n\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter) === degree) {\r\n                Ms.push(m.clone())\r\n            }\r\n        }\r\n\r\n        return Ms\r\n        // Nothing was found - retur\r\n    }\r\n\r\n    // Used in LinearSystem.tex\r\n    monomByLetter = (letter: string): Monom => {\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.hasLetter(letter)) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        return new Monom().zero();\r\n    };\r\n\r\n\r\n    // Next functions are used for for commonMonom, which is used in the factorize method.\r\n    getDenominators = (): number[] => {\r\n        const denominators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            denominators.push(m.coefficient.denominator);\r\n        }\r\n        return denominators;\r\n    };\r\n\r\n    getNumerators = (): number[] => {\r\n        const numerators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            numerators.push(m.coefficient.numerator);\r\n        }\r\n        return numerators;\r\n    };\r\n\r\n    lcmDenominator = (): number => {\r\n        return Numeric.lcm(...this.getDenominators());\r\n    };\r\n\r\n    gcdDenominator = (): number => {\r\n        return Numeric.gcd(...this.getDenominators());\r\n    };\r\n\r\n    lcmNumerator = (): number => {\r\n        return Numeric.lcm(...this.getNumerators());\r\n    };\r\n\r\n    gcdNumerator = (): number => {\r\n        return Numeric.gcd(...this.getNumerators());\r\n    };\r\n\r\n    commonMonom = (): Monom => {\r\n        let M = new Monom().one(), numerator: number, denominator: number, degree = this.degree();\r\n\r\n        numerator = this.gcdNumerator();\r\n        denominator = this.gcdDenominator();\r\n\r\n        M.coefficient = new Fraction(numerator, denominator);\r\n        for (let L of this.variables) {\r\n            // Initialize the setLetter with the max degree\r\n            M.setLetter(L, degree);\r\n            for (let m of this._monoms) {\r\n                M.setLetter(L, Math.min(m.degree(L), M.degree(L)));\r\n                if (M.degree(L) === 0) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return M;\r\n    }\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * This will generate a not reduced tex string of the polynom.\r\n     * @param complexity : Number of iteration to increase the complexity.\r\n     */\r\n    makeItComplicate = (complexity: number = 1): Polynom => {\r\n        this._texString = '';\r\n\r\n        // The polynom must be at least of the first degree.\r\n        if (this.degree() < 1) {\r\n            return this;\r\n        }\r\n\r\n        // TODO: update this function !\r\n\r\n        const mDegree = Random.number(0, this.degree() - 1);\r\n        // const A = new Polynom().rndSimple(mDegree, false, complexity > 1, 'x', false, complexity > 1 ? -1 : 1);\r\n        // const B = new Polynom().rndSimple(1, false, complexity > 1);\r\n        // const C = this.clone().subtract(A.clone().multiply(B));\r\n\r\n        // Try to factorize a little bit the C polynom.\r\n        // C.factorizePartial(true);\r\n        // this._texString = `${A.genDisplay('tex', false, true)} \\\\cdot ${B.genDisplay('tex', false, true)} ${C.texString} `;\r\n        //\r\n        return this;\r\n    };\r\n    factorizePartial = (forceSign?: boolean): Polynom => {\r\n        this._texString = '';\r\n        // Try to find two monoms with a common coefficient.\r\n        if (this.length <= 1) {\r\n            return this;\r\n        }\r\n\r\n        let mMain: Monom,\r\n            mCheck: Monom,\r\n            mFactor: Monom,\r\n            pFactor: Polynom,\r\n            // pRemain: Polynom,\r\n            g: number, sign: string;\r\n\r\n        for (let i = 0; i < this.length; i++) {\r\n            mMain = this._monoms[i].clone();\r\n            // We factorize only if the main coefficient isn't a fraction\r\n            // if(mMain.coefficient.denominator!==1){continue;}\r\n            for (let j = i + 1; j < this.length; j++) {\r\n                mCheck = this._monoms[j].clone();\r\n                // if(mCheck.coefficient.denominator!==1){continue;}\r\n\r\n                g = Numeric.gcd(mMain.coefficient.numerator, mCheck.coefficient.numerator);\r\n                if (g !== 1) {\r\n                    // mFactor = mMain.clone().divide(mCheck); // This gets the literal part.\r\n                    // mFactor.coefficient = new Fraction(g); // Set the coefficient to the gcd.\r\n                    mFactor = Monom.lcm(mMain, mCheck);\r\n                    sign = mMain.coefficient.sign() === 1 ? '+' : '-';\r\n                    this._texString = `${forceSign === true ? sign : (sign === '+' ? '' : sign)}${mFactor.tex}`;\r\n\r\n                    pFactor = new Polynom().add(mMain.divide(mFactor)).add(mCheck.divide(mFactor));\r\n                    this._texString += pFactor.genDisplay('tex', false, true);\r\n\r\n                    this._texString += this.clone().subtract(pFactor.clone().multiply(mFactor)).genDisplay('tex', true, false);\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._texString = this.genDisplay('tex', forceSign);\r\n\r\n        return this;\r\n    };\r\n    /**\r\n     * reduce the coefficient value as if the polynom was equal to zero.\r\n     */\r\n    minify = (): Polynom => {\r\n        // First multiply by the common denominator.\r\n        this.multiply(this.lcmDenominator()).divide(this.gcdNumerator()).reduce();\r\n        return this.reduce();\r\n    };\r\n    /**\r\n     * Determine if the current polynom is divisible by P\r\n     * TODO: should work with any polynom, not only first degree polynoms and the setLetter should disappear\r\n     * @param P\r\n     * @param letter - default setLetter\r\n     */\r\n    canDivide = (P: Polynom, letter: string = 'x'): boolean => {\r\n        const d = P.degree();\r\n\r\n        const evalValue: { [key: string]: Fraction } = {};\r\n        // A zero degree polynom can always divide, except if it's the zero polynom.\r\n        if (d === 0) {\r\n            return !P.isZero;\r\n        }\r\n\r\n        // The polynom is of degree one.\r\n        if (d === 1) {\r\n            const z = P.getZeroes();\r\n            // The zero is an undefined zero.\r\n            if (z[0] === true || z[0] === false) {\r\n                return false;\r\n            }\r\n\r\n            evalValue[letter] = z[0];\r\n            return this.evaluate(evalValue).value === 0;\r\n        }\r\n\r\n        // The polynom is of degree 2 or more...\r\n        if (d > 1) {\r\n            console.log('Currently, only first degree polynom are supported');\r\n            return false;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n\r\n}\r\n","/**\r\n * Equation is a class to manage equations...\r\n */\r\nimport Polynom from \"./polynom\";\r\nimport Monom from \"./monom\";\r\nimport Numeric from \"../numeric\";\r\nimport Fraction from \"../coefficients/fraction\";\r\nimport Nthroot from \"../coefficients/nthroot\";\r\n\r\nexport default class Equation {\r\n    private _left: Polynom;  // Left part of the equation\r\n    private _right: Polynom; // Right part of the equation\r\n    private _sign: string;   // Signe of the equation, by default =\r\n\r\n    private _polynom: Polynom;  // Used to solve the equation // TODO: remove the private value ?\r\n    private _solutions: string[];    // Array of the solutions\r\n\r\n    // Undetermined solutions.\r\n    private _varnothing: string = '\\\\varnothing';\r\n    private _real: string = '\\\\mathbb{R}';\r\n\r\n    /**\r\n     * Create an Equation using two polynoms.\r\n     * @param equations\r\n     */\r\n    constructor(...equations: any) {\r\n        // Default equation\r\n        this._left = new Polynom().zero();\r\n        this._right = new Polynom().zero();\r\n        this._sign = '=';\r\n\r\n        if (equations.length === 1) {\r\n            if (equations[0].isEquation === true) {\r\n                return equations[0].clone();\r\n            } else {\r\n                this.parse(equations[0]);\r\n            }\r\n        } else if (equations.length === 2) {\r\n            this.left = equations[0].isPolynom ? equations[0].clone() : new Polynom(equations[0]);\r\n            this.right = equations[1].isPolynom ? equations[1].clone() : new Polynom(equations[1]);\r\n        } else {\r\n            // Return default empty equation\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isEquation() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    // TODO: Check the getters and setters.\r\n    get solutions(): string[] {\r\n        return this._solutions;\r\n    }\r\n\r\n    get solution(): string {\r\n        if (this._solutions.length === 1\r\n            &&\r\n            (\r\n                this._solutions[0] === this._real\r\n                || this._solutions[0] === this._varnothing\r\n                || this._solutions[0].includes('\\\\left')\r\n            )\r\n        ) {\r\n            return `S = ${this._solutions[0]}`;\r\n        }\r\n        return `S = \\\\left{ ${this._solutions.join(';')} \\\\right}`;\r\n    }\r\n\r\n    get isReal(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0] === this._real;\r\n    }\r\n\r\n    get isVarnothing(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0] === this._varnothing;\r\n    }\r\n\r\n    get signAsTex(): string {\r\n        if (this._sign === '>=' || this._sign === '=>' || this._sign === 'geq') {\r\n            return '\\\\geq';\r\n        }\r\n        if (this._sign === '<=' || this._sign === '=<' || this._sign === 'leq') {\r\n            return '\\\\leq';\r\n        }\r\n        return this._sign;\r\n    }\r\n\r\n    get tex(): string {\r\n        return `${this._left.tex}${this.signAsTex}${this._right.tex}`;\r\n    }\r\n\r\n    get raw(): string {\r\n        return `${this._left.raw}${this.signAsTex}${this._right.raw}`;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        return [...new Set(this._right.variables.concat(this._left.variables))];\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    get left(): Polynom {\r\n        return this._left;\r\n    }\r\n\r\n    set left(value: Polynom) {\r\n        this._left = value;\r\n    }\r\n\r\n    get right(): Polynom {\r\n        return this._right;\r\n    }\r\n\r\n    set right(value: Polynom) {\r\n        this._right = value;\r\n    }\r\n\r\n    get sign(): string {\r\n        return this._sign;\r\n    }\r\n\r\n    set sign(value: string) {\r\n        // Set the sign value as formatted.\r\n        this._sign = this._formatSign(value);\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (equationString: string): Equation => {\r\n        let pStr: string[], strSign: string | false;\r\n        // Find the string separator\r\n        strSign = this._findSign(equationString);\r\n\r\n        if (strSign === false) {\r\n            console.log('The equation is not valid (no sign found)');\r\n            return;\r\n        }\r\n\r\n        // The StrSign is found\r\n        pStr = equationString.split(strSign);\r\n\r\n        return this.create(new Polynom(pStr[0]), new Polynom(pStr[1]), this._formatSign(strSign));\r\n    };\r\n\r\n    private _findSign = (equationString: string): string | false => {\r\n        let strSign: string = '';\r\n\r\n        if (equationString.includes('geq')) {\r\n            return (equationString.includes('\\\\geq')) ? '\\\\geq' : 'geq';\r\n        } else if (equationString.includes('leq')) {\r\n            return (equationString.includes('\\\\leq')) ? '\\\\leq' : 'leq';\r\n        } else if (equationString.includes('>=')) {\r\n            return '>=';\r\n        } else if (equationString.includes('=>')) {\r\n            return '=>';\r\n        } else if (equationString.includes('>')) {\r\n            return '>';\r\n        } else if (equationString.includes('<=')) {\r\n            return '<=';\r\n        } else if (equationString.includes('=<')) {\r\n            return '=<';\r\n        } else if (equationString.includes('<')) {\r\n            return '<';\r\n        } else if (equationString.includes('=')) {\r\n            return '='\r\n        }\r\n        if (strSign === '') {\r\n            console.log('Equation: parse string : sign not found');\r\n            return false;\r\n        }\r\n    };\r\n\r\n    private _formatSign = (signStr: string): string => {\r\n        if (signStr === undefined) {\r\n            return '=';\r\n        }\r\n\r\n        if (signStr.includes('geq')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>=')) {\r\n            return '>=';\r\n        } else if (signStr.includes('=>')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>')) {\r\n            return '>';\r\n        } else if (signStr.includes('leq')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<=')) {\r\n            return '<=';\r\n        } else if (signStr.includes('=<')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<')) {\r\n            return '<';\r\n        } else {\r\n            return '='\r\n        }\r\n    };\r\n\r\n    private _reverseSign = (): Equation => {\r\n        if (this._sign === '=') {\r\n            return this;\r\n        }\r\n\r\n        if (this._sign.includes('<')) {\r\n            this._sign.replace('<', '>');\r\n            return this;\r\n        }\r\n        if (this._sign.includes('>')) {\r\n            this._sign.replace('>', '<');\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    create = (left: Polynom, right: Polynom, sign?: string): Equation => {\r\n        this._left = left;\r\n        this._right = right;\r\n        this._sign = this._formatSign(sign);\r\n        return this;\r\n    };\r\n\r\n    clone = (): Equation => {\r\n        return new Equation().create(this._left.clone(), this._right.clone(), this._sign + '');\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n    // -----------------------------------------------\r\n    private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n        degree: 2\r\n    };\r\n    get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n        return this._randomizeDefaults;\r\n    }\r\n\r\n    set randomizeDefaults(value) {\r\n        this._randomizeDefaults = value;\r\n    }\r\n\r\n    randomize = (opts?: {}, sign?: string): Equation => {\r\n        // TODO: Generate equations randomly, using config.\r\n        return new Equation().create(new Polynom(), new Polynom(), sign);\r\n    };\r\n\r\n\r\n    // -----------------------------------------------\r\n    // Equations operations\r\n    // -----------------------------------------------\r\n    /**\r\n     * Reorder will move all monoms containing a letter on the left, all the other on the right.\r\n     */\r\n    moveLeft = (): Equation => {\r\n        this._left = this._left.clone().subtract(this._right)\r\n        this._right.zero()\r\n        return this;\r\n    }\r\n    reorder = (allLeft?: boolean): Equation => {\r\n        // Move all monoms of degree greater than 0 to the left.\r\n        // and all zero degree monoms to the right.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n\r\n        if (allLeft) {\r\n            return this.moveLeft()\r\n        }\r\n        let mMove: Monom;\r\n        for (let m of this._left.monoms) {\r\n            if (m.degree() === 0) {\r\n                mMove = m.clone();\r\n                this._left.subtract(mMove);\r\n                this._right.subtract(mMove);\r\n            }\r\n        }\r\n\r\n        // Reorder the left and right polynoms\r\n        this._left.reorder();\r\n        this._right.reorder();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiply by the lcm denominator and divide by the gcm numerators.\r\n     */\r\n    simplify = (): Equation => {\r\n        this.multiply(Numeric.lcm(...this._left.getDenominators(),...this._right.getDenominators()));\r\n        this.divide(Numeric.gcd(...this._left.getNumerators(),...this._right.getNumerators()));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Reorder the polynom to have only one letter on the left, the rest on the right.\r\n     * @param letter\r\n     */\r\n    isolate = (letter?: string): Equation | false => {\r\n        // Determine if we can isolate the variables.\r\n\r\n        // Both part of the equations must be of the first degree.\r\n        //TODO: handle equations of degree two or more ?\r\n        if (this.degree(letter) !== 1) {\r\n            return false;\r\n        }\r\n\r\n        // Modify the equation to isolate the asked variable.\r\n        // TODO: must handle equations like 3xy+5y=4 => y = 4/(3x-5)\r\n        if (this.isMultiVariable()) {\r\n            return false;\r\n        }\r\n\r\n        // Isolate the letter.\r\n        let mMove: Monom, cMove: Fraction;\r\n        // Start by moving everything to the left.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n        for (let m of this._left.monoms) {\r\n            if (!m.hasLetter(letter)) {\r\n                mMove = m.clone();\r\n                this._left.add(mMove.clone().opposed());\r\n                this._right.add(mMove.clone().opposed());\r\n            }\r\n        }\r\n\r\n        // In theory, we should have only one item on the left.\r\n        if (this._left.length !== 1) {\r\n            return false;\r\n        }\r\n        cMove = this._left.monoms[0].coefficient.clone();\r\n        this._left.divide(cMove);\r\n        this._right.divide(cMove);\r\n        return this;\r\n    };\r\n\r\n    replaceBy = (letter: string, P: Polynom): Equation => {\r\n        this._left.replaceBy(letter, P)\r\n        this._right.replaceBy(letter, P)\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiple an equation by a fraction value.\r\n     * @param value\r\n     */\r\n    multiply = (value: any): Equation => {\r\n\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        // Multiply each part of the equation by the fraction\r\n        this._left.multiply(F);\r\n        this._right.multiply(F);\r\n\r\n        // The sign of the inequation must be changed.\r\n        if (this._sign !== '=' && F.sign() === -1) {\r\n            this._reverseSign();\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    divide = (value: any): Equation => {\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        if(F.isZero()){\r\n            return this;\r\n        }else {\r\n            return this.multiply(F.invert());\r\n        }\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations helpers\r\n    // -----------------------------------------------\r\n\r\n    /**\r\n     * Get the degree of the equation\r\n     * @param letter\r\n     */\r\n    degree = (letter?: string): number => {\r\n        return Math.max(this._left.degree(letter), this._right.degree(letter));\r\n    };\r\n\r\n    /**\r\n     * Determine if the equation contains more than one letter/variable.\r\n     */\r\n    isMultiVariable = (): boolean => {\r\n        return this._left.isMultiVariable || this._right.isMultiVariable;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        // @ts-ignore\r\n        return [...new Set([...this._left.letters(), ...this._right.letters()])];\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations solving algorithms\r\n    // -----------------------------------------------\r\n    solve = (letter?: string): Equation => {\r\n        // Initialise the variables:\r\n        this._solutions = [];\r\n\r\n        // TODO: this._polynom could be removed.\r\n        // TODO: consolidate solving equations (inequations vs equations)\r\n        this._polynom = this._left.clone().subtract(this._right);\r\n\r\n        switch (this._polynom.degree(letter)) {\r\n            case 0:\r\n            case 1:\r\n                this._solveDegree1(letter);\r\n                break;\r\n            case 2:\r\n                this._solveDegree2(letter);\r\n                break;\r\n            default:\r\n                this._solveDegree3plus(letter);\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    private isGreater = (): boolean => {\r\n        if (this._sign.indexOf('>') !== -1) {\r\n            return true;\r\n        }\r\n        return this._sign.indexOf('geq') !== -1;\r\n\r\n    };\r\n    private isStrictEqual = (): boolean => {\r\n        return this._sign === '=';\r\n    };\r\n    private isAlsoEqual = (): boolean => {\r\n        if (this._sign.indexOf('=') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('geq') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('leq') !== -1) {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    private _solveDegree1 = (letter?: string): string[] => {\r\n        const m1 = this._polynom.monomByDegree(1, letter).coefficient,\r\n            m0 = this._polynom.monomByDegree(0, letter).coefficient,\r\n            v = m0.clone().opposed().divide(m1).display;\r\n        let s: string;\r\n\r\n        if (this.isStrictEqual()) {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0) {\r\n                    this._solutions = [this._real];\r\n                } else {\r\n                    this._solutions = [this._varnothing];\r\n                }\r\n            } else {\r\n                this._solutions = [v];\r\n            }\r\n        } else {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0 && this.isAlsoEqual()) {\r\n                    s = '\\\\mathbb{R}';\r\n                } else {\r\n                    if (m0.value > 0) {\r\n                        s = this.isGreater() ? this._real : this._varnothing;\r\n                    } else {\r\n                        s = !this.isGreater() ? this._real : this._varnothing;\r\n                    }\r\n                }\r\n            } else {\r\n                // Must handle the case if the m1 monom is negative.\r\n                if ((this.isGreater() && m1.sign() === 1) || (!this.isGreater() && m1.sign() === -1)) {\r\n                    s = `\\\\left${this.isAlsoEqual() ? '\\\\[' : '\\\\]'}${v};+\\\\infty\\\\right\\\\[`;\r\n                } else {\r\n                    s = `\\\\left\\\\]-\\\\infty;${v} \\\\right\\\\${this.isAlsoEqual() ? '\\\\]' : '\\\\['}`;\r\n                }\r\n            }\r\n            this._solutions = [s];\r\n        }\r\n\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree2 = (letter?: string): string[] => {\r\n        let aF = this._polynom.monomByDegree(2, letter).coefficient,\r\n            bF = this._polynom.monomByDegree(1, letter).coefficient,\r\n            cF = this._polynom.monomByDegree(0, letter).coefficient,\r\n            delta: number, nthDelta: Nthroot,\r\n            lcm = Numeric.lcm(aF.denominator, bF.denominator, cF.denominator),\r\n            a = aF.multiply(lcm).value,\r\n            b = bF.multiply(lcm).value,\r\n            c = cF.multiply(lcm).value,\r\n            realX1: number, realX2: number,\r\n            sX1: string, sX2: string;\r\n\r\n        delta = b * b - 4 * a * c;\r\n\r\n        if (delta > 0) {\r\n            realX1 = (-b - Math.sqrt(delta)) / (2 * a);\r\n            realX2 = (-b + Math.sqrt(delta)) / (2 * a);\r\n\r\n            if(delta>1.0e5){\r\n                // The delta is too big to be parsed !\r\n                this._solutions = [\r\n                    ((-b - Math.sqrt(delta))/(2 * a)).toFixed(5),\r\n                    ((-b + Math.sqrt(delta))/(2 * a)).toFixed(5)\r\n                ]\r\n            }else {\r\n                nthDelta = new Nthroot().parse(delta).reduce();\r\n                if (nthDelta.hasRadical()) {\r\n                    // -b +- coeff\\sqrt{radical}\r\n                    // -------------------------\r\n                    //           2a\r\n                    let gcd = Numeric.gcd(b, 2 * a, nthDelta.coefficient);\r\n                    nthDelta.coefficient = nthDelta.coefficient / gcd;\r\n\r\n                    // TODO: Can i delete the next line ?\r\n                    // let deltaC = nthDelta.coefficient, deltaR = nthDelta.radical;\r\n                    if (b !== 0) {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                `${-b / gcd} - ${nthDelta.tex}`,\r\n                                `${-b / gcd} + ${nthDelta.tex}`,\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                `\\\\dfrac{${-b / gcd} - ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                `\\\\dfrac{${-b / gcd} + ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                            ]\r\n                        }\r\n                    } else {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                `- ${nthDelta.tex}`,\r\n                                `${nthDelta.tex}`,\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                `\\\\dfrac{- ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                `\\\\dfrac{${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                            ]\r\n                        }\r\n                    }\r\n                } else {\r\n                    // -b +- d / 2a\r\n                    this._solutions = [\r\n                        new Fraction(-b - nthDelta.coefficient, 2 * a).reduce().dfrac,\r\n                        new Fraction(-b + nthDelta.coefficient, 2 * a).reduce().dfrac\r\n                    ]\r\n                }\r\n            }\r\n\r\n        } else if (delta === 0) {\r\n            this._solutions = [new Fraction(-b, 2 * a).reduce().dfrac];\r\n        } else {\r\n            this._solutions = [this._varnothing];\r\n        }\r\n\r\n\r\n        // Handle now the inequations.\r\n        if (!this.isStrictEqual()) {\r\n            if (this._solutions.length === 2) {\r\n                sX1 = (realX1 < realX2) ? this._solutions[0] : this._solutions[1];\r\n                sX2 = (realX1 < realX2) ? this._solutions[1] : this._solutions[0];\r\n\r\n                if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                    this._solutions = [\r\n                        `\\\\left]-\\\\infty ; ${sX1}\\\\right${this.isAlsoEqual() ? ']' : '['} \\\\cup \\\\left${this.isAlsoEqual() ? '[' : ']'}${sX2};+\\\\infty\\\\right[`\r\n                    ];\r\n                } else {\r\n                    this._solutions = [\r\n                        `\\\\left${this.isAlsoEqual() ? '[' : ']'}${sX1} ; ${sX2}\\\\right${this.isAlsoEqual() ? ']' : '['}`\r\n                    ]\r\n                }\r\n            } else if (this._solutions.length === 1 && this._solutions[0] !== this._varnothing) {\r\n                if (!this.isAlsoEqual()) {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [\r\n                            `\\\\left]-\\\\infty ; ${this._solutions[0]}\\\\right[ \\\\cup \\\\left]${this._solutions[0]};+\\\\infty\\\\right[`\r\n                        ];\r\n                    } else {\r\n                        this._solutions = [this._varnothing];\r\n                    }\r\n                } else {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [this._real];\r\n                    } else {\r\n                        // this._solutions = [ this._solutions[0] ];\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.isGreater()) {\r\n                    this._solutions = [aF.sign() === 1 ? this._real : this._varnothing];\r\n                } else {\r\n                    this._solutions = [aF.sign() === -1 ? this._real : this._varnothing];\r\n                }\r\n            }\r\n        }\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree3plus = (letter?: string): string[] => {\r\n        // TODO: try to resolve equations with a degree superior than 2.\r\n        this._solutions = [letter];  // ESLint remove system :(\r\n        return this._solutions;\r\n    };\r\n\r\n}","import Fraction from \"../coefficients/fraction\";\r\nimport Equation from \"./equation\";\r\nimport Polynom from \"./polynom\";\r\nimport Monom from \"./monom\";\r\nimport {Random} from \"../random/random\";\r\n\r\nexport default class LinearSystem {\r\n    private _solutions: { [letter: string]: { value: Fraction, isReal: boolean, isVarnothing: boolean } };\r\n    private _resolutionSteps: LinearSystem[];\r\n    private _equations: Equation[];\r\n    private _letters: string[];\r\n\r\n    constructor(...equationStrings: string[]) {\r\n        this._equations = [];\r\n        this._letters = 'xy'.split('');\r\n\r\n        if (equationStrings !== undefined && equationStrings.length > 0) {\r\n            this.parse(...equationStrings);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isLinerarSystem() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equations(): Equation[] {\r\n        return this._equations;\r\n    }\r\n\r\n    set equations(value) {\r\n        this._equations = value;\r\n    }\r\n\r\n    get letters(): string {\r\n        return this._letters.join('')\r\n    }\r\n\r\n    set letters(value: string) {\r\n        this._letters = value.split('');\r\n    }\r\n\r\n    get isSolvable(): boolean {\r\n        let V = this.variables;\r\n\r\n        // TODO: in some case, it is possible to resolve systems if there isn't the isSame number of vars and equations\r\n        if (V.length !== this._equations.length) {\r\n            return false;\r\n        }\r\n\r\n        //TOOD: Must check if two equations isn't a linear combination of the others ?\r\n\r\n        return true;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n        for (let E of this._equations) {\r\n            V = V.concat(E.variables);\r\n        }\r\n        return [...new Set(V)].sort();\r\n    }\r\n\r\n    get tex(): string {\r\n        // Build the array of values.\r\n        // Reorder\r\n        // This clone the system :!!!\r\n        //TODO: Avoid cloning this linear system\r\n        let LS = this.clone().reorder(),\r\n            letters = LS.variables,\r\n            equStr: string[],\r\n            equArray: string[] = [],\r\n            m: Monom;\r\n\r\n        // TODO: Manage tex output of linear equations\r\n        for (let equ of LS.equations) {\r\n            equStr = [];\r\n            for (let L of letters) {\r\n                m = equ.left.monomByLetter(L);\r\n\r\n                if (equStr.length === 0) {\r\n                    equStr.push(m.isZero() ? '' : m.tex);\r\n                } else {\r\n                    equStr.push(m.isZero() ? '' : ((m.coefficient.sign() === 1) ? '+' : '') + m.tex);\r\n                }\r\n            }\r\n\r\n            // Add the equal sign\r\n            equStr.push('=');\r\n\r\n            // Add the right hand part of the equation (should be only a number, because it has been reorderd)\r\n            equStr.push(equ.right.tex);\r\n\r\n            // Add to the list.\r\n            equArray.push(equStr.join('&'));\r\n        }\r\n\r\n\r\n        return `\\\\left\\\\{\\\\begin{array}{${\"r\".repeat(letters.length)}cl}${equArray.join('\\\\\\\\\\ ')}\\\\end{array}\\\\right.`;\r\n        //return `\\\\left\\\\{\\\\begin{array}{rrrcl}${this._equations.map(equ => `${equ.tex}`).join('\\\\\\\\\\ \\n')}\\\\end{array}\\\\right.`;\r\n    }\r\n\r\n    get texSolution(): string {\r\n        let tex: string[] = [];\r\n\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n\r\n        for (let letter in this._solutions) {\r\n            if (this._solutions[letter].isReal) {\r\n                console.log(`Undetermined (letter ${letter})`);\r\n                return;\r\n            }\r\n            if (this._solutions[letter].isVarnothing) {\r\n                console.log(`Undefined (letter ${letter})`);\r\n                return;\r\n            }\r\n\r\n            tex.push(this._solutions[letter].value.dfrac);\r\n        }\r\n        return `(${tex.join(';')})`;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...equations: any[]): LinearSystem => {\r\n        this._equations = equations.map(value => new Equation(value));\r\n        this._findLetters();\r\n        return this;\r\n    };\r\n\r\n    setCoefficient = (...coefficients: string[]): LinearSystem => {\r\n        // Reset the equations list\r\n        this._equations = [];\r\n\r\n        let i = 0;\r\n        while (i < coefficients.length - this._letters.length) {\r\n            let left = new Polynom().parse(this._letters.join(''), ...coefficients.slice(i, i + this._letters.length)),\r\n                right = new Polynom(coefficients[i + this._letters.length].toString()),\r\n                equ = new Equation().create(left, right);\r\n            this._equations.push(equ.clone());\r\n\r\n            i = i + this._letters.length + 1;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): LinearSystem => {\r\n        return new LinearSystem().parse(...this._equations.map(equ => equ.clone()));\r\n    };\r\n\r\n    setLetters = (...letters: string[]): LinearSystem => {\r\n        this._letters = letters;\r\n        return this\r\n    }\r\n    private _findLetters = (): LinearSystem => {\r\n        // Find all letters used.\r\n        let variables = new Set();\r\n\r\n        for (let equ of this._equations) {\r\n            variables = new Set([...variables, ...equ.variables]);\r\n        }\r\n\r\n        // TODO: How to transform (Set of string) to string[]\r\n        // @ts-ignore\r\n        this._letters = [...variables];\r\n        return this;\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n    // -----------------------------------------------\r\n    generate = (...solutions: Fraction[] | number[]): LinearSystem => {\r\n        let solutionsF: Fraction[] = [];\r\n\r\n        // Convert the numbers to fractions if necessary\r\n        for (let s of solutions) {\r\n            if (typeof s === \"number\") {\r\n                solutionsF.push(new Fraction(s.toString()));\r\n            } else {\r\n                solutionsF.push(s.clone());\r\n            }\r\n        }\r\n\r\n        // Create the equations and make sure they are not linear combined.\r\n        this._equations = [];\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            this._equations.push(this._generateOneEquation(...solutionsF));\r\n        }\r\n        return this;\r\n    };\r\n    private _generateOneEquation = (...solutions: Fraction[]): Equation => {\r\n        let coeff: number[] = [], leftValue: Fraction = new Fraction().zero(),\r\n            letters: string[] = ['x', 'y', 'z', 't', 'u', 'v', 'w', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],\r\n            equString: string = '', equ: Equation;\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            coeff.push(Random.numberSym(5));\r\n            leftValue.add(solutions[i].clone().multiply(coeff[i]));\r\n            equString += `${(coeff[i] < 0) ? coeff[i] : '+' + coeff[i]}${letters[i]}`\r\n        }\r\n\r\n        // LeftValue contains the left part oof the equation - and is then the isSame as the right part.\r\n        // It might be a Fraction.\r\n\r\n        // Must check if it's not a linear combination\r\n        equ = new Equation(`${equString}=${leftValue.display}`);\r\n        if (equ.right.monoms[0].coefficient.denominator != 1) {\r\n            equ.multiply(new Fraction(equ.right.monoms[0].coefficient.denominator, 1));\r\n        }\r\n        if (this._checkIfLinerCombination(equ)) {\r\n            return equ;\r\n        } else {\r\n            return this._generateOneEquation(...solutions);\r\n        }\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    private _linearReduction(eq1: Equation, eq2: Equation, letter: string): Equation {\r\n        // TODO: handle other signs for equations ?\r\n        // Get the monom for the particular letter.\r\n        let c1 = eq1.left.monomByDegree(1, letter).coefficient.clone(),\r\n            c2 = eq2.left.monomByDegree(1, letter).coefficient.clone().opposed();\r\n\r\n        return this.mergeEquations(eq1, eq2, c2, c1);\r\n    }\r\n\r\n    mergeEquations = (eq1: Equation, eq2: Equation, factor1: any, factor2: any): Equation => {\r\n        // Set and clone the equations.\r\n\r\n        let eq1multiplied = eq1.clone().multiply(new Fraction(factor1)),\r\n            eq2multiplied = eq2.clone().multiply(new Fraction(factor2));\r\n\r\n        // Add both equations together.\r\n        eq1multiplied.left.add(eq2multiplied.left);\r\n        eq1multiplied.right.add(eq2multiplied.right);\r\n\r\n        return eq1multiplied;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Solvers algorithm\r\n    // ------------------------------------------\r\n    reorder = (): LinearSystem => {\r\n        for (let E of this._equations) {\r\n            E.reorder();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    solve = (): LinearSystem => {\r\n        // Solve it by linear\r\n        this._solutions = {};\r\n        this._resolutionSteps = [];\r\n\r\n        // Reorder all equations.\r\n        this.reorder();\r\n\r\n        // Get all variables in the linear system\r\n        let V = this.variables.sort();\r\n\r\n        for (let letter of V) {\r\n            this._solutions[letter] = this._solveOneLetter(letter, V)\r\n        }\r\n\r\n        // TODO: LinearSystem - solve: optimization and handle undetermined and undefined systems.\r\n        return this;\r\n    };\r\n\r\n    private _checkIfLinerCombination = (equ: Equation): boolean => {\r\n\r\n        return true;\r\n    };\r\n\r\n    private _solveOneLetter(letter: string, V: string[]): { value: Fraction, isReal: boolean, isVarnothing: boolean } {\r\n        // list of equations.\r\n        let LE: Equation[] = this.clone().equations,\r\n            reducedEquations: Equation[] = [];\r\n\r\n        // Reduce the equations.\r\n        // Do it as long as there is more than one step, but no more than the number of equations.\r\n        for (let L of V) {\r\n            // remove the setLetter from all equations using linear combinations\r\n            if (L === letter) {\r\n                continue;\r\n            }\r\n\r\n            // Linear reduction.\r\n            // TODO: Search for better association\r\n            for (let i = 0; i < LE.length - 1; i++) {\r\n                reducedEquations.push(this._linearReduction(LE[i], LE[i + 1], L));\r\n            }\r\n\r\n            // Keep track of each steps.\r\n            this._resolutionSteps.push(new LinearSystem().parse(...reducedEquations));\r\n\r\n            // Set the list of equations to the new version.\r\n            LE = this._resolutionSteps[this._resolutionSteps.length - 1].clone().equations;\r\n\r\n            // Reset the stack\r\n            reducedEquations = [];\r\n        }\r\n\r\n        // Solve the equations\r\n        let E = this._resolutionSteps[this._resolutionSteps.length - 1].equations[0];\r\n        E.solve();\r\n\r\n        return {\r\n            value: new Fraction(E.solutions[0]),\r\n            isReal: E.isReal,\r\n            isVarnothing: E.isVarnothing\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Helpers\r\n    // ------------------------------------------\r\n    log = (): string => {\r\n        let str: string = '';\r\n\r\n        for (let E of this._equations) {\r\n            console.log(E.tex);\r\n            str += `${E.tex}\\\\n}`;\r\n        }\r\n\r\n        return str;\r\n    };\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport Fraction from \"../coefficients/fraction\";\r\nimport Numeric from \"../numeric\";\r\n\r\nexport default class Vector {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n\r\n    constructor(...values: any) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n    };\r\n\r\n    get isVector() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get normSquare(): Fraction {\r\n        return this._x.clone().pow(2).add(this._y.clone().pow(2));\r\n    }\r\n\r\n    get norm(): number {\r\n        return Math.sqrt(this.normSquare.value);\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\begin{pmatrix}${this._x.tex} \\\\\\\\\\ ${this._y.tex} \\\\end{pmatrix}`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Vector => {\r\n        // TODO: Must be more strict about what is given and limit to two dimensional vectors.p\r\n        // Maybe more than one value was given...\r\n        // Initialize the vector\r\n        this.zero();\r\n\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        if (values.length === 1) {\r\n            if (values[0].isVector) {\r\n                return values[0].clone()\r\n            } else {\r\n                return this._parseString(values[0])\r\n            }\r\n        }\r\n\r\n        if (values.length >= 2) {\r\n            // Two points are given - skip the third value.\r\n            if (values[0].isPoint && values[1].isPoint) {\r\n                this._x = values[1].x.clone().subtract(values[0].x)\r\n                this._y = values[1].y.clone().subtract(values[0].y)\r\n                return this;\r\n            }\r\n\r\n            // Fractions or a number are give\r\n            if (values[0].isFraction || !isNaN(values[0])) {\r\n                this._x = new Fraction(values[0])\r\n            }\r\n            if (values[1].isFraction || !isNaN(values[1])) {\r\n                this._y = new Fraction(values[1])\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Vector => {\r\n        let V = new Vector();\r\n\r\n        if (this._x !== null) {\r\n            V.x = this._x.clone();\r\n        }\r\n        if (this._y !== null) {\r\n            V.y = this._y.clone();\r\n        }\r\n        return V;\r\n    }\r\n\r\n    reset = (): Vector => {\r\n        this._x = null;\r\n        this._y = null;\r\n        return this;\r\n    }\r\n\r\n    zero = (): Vector => {\r\n        this.reset();\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    one = (): Vector => {\r\n        this._x = new Fraction();\r\n        this._y = new Fraction();\r\n        return this;\r\n    }\r\n\r\n    private _parseString = (value: string): Vector => {\r\n        // Split comma, semi colon or single space.\r\n        let components = value.split(/[,;\\s]/g);\r\n\r\n        // Validate the fraction values.\r\n        this.x = new Fraction(components[0] || null);\r\n        this.y = new Fraction(components[1] || null);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Vector => {\r\n        this._x.opposed();\r\n        this._y.opposed();\r\n        return this;\r\n    }\r\n\r\n    add = (V: Vector): Vector => {\r\n        this._x.add(V.x);\r\n        this._y.add(V.y);\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (V: Vector): Vector => {\r\n        return this.add(V.clone().opposed());\r\n    }\r\n\r\n    scalarProductWithVector = (V: Vector): Fraction => {\r\n        // TODO: Add the scalar factor !!!!\r\n        return this._x.clone().multiply(V.x).add(this._y.clone().multiply(V.y));\r\n    }\r\n\r\n    static scalarProduct = (v1: Vector, v2: Vector): number => {\r\n        // TODO: Transform to fraction with nthroot.\r\n        return  v1.x.value * v2.x.value + v1.y.value * v2.y.value;\r\n    };\r\n\r\n    normal = (): Vector => {\r\n        let x = this.x.clone().opposed(), y = this.y.clone();\r\n        this._x = y;\r\n        this._y = x;\r\n        return this;\r\n    }\r\n\r\n    isNormalTo = (v: Vector): boolean => {\r\n        return this.scalarProductWithVector(v).isZero()\r\n    }\r\n\r\n    multiplyByScalar = (k: any): Vector => {\r\n        let scalar = new Fraction(k);\r\n        this._x.multiply(scalar);\r\n        this._y.multiply(scalar);\r\n        return this;\r\n    }\r\n\r\n    divideByScalar = (k:any): Vector => {\r\n        return this.multiplyByScalar(new Fraction(k).invert());\r\n    }\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    simplify = (): Vector => {\r\n        // Multiply by the lcm of denominators.\r\n        return this.multiplyByScalar(Numeric.lcm(this._x.denominator, this._y.denominator))\r\n            .divideByScalar(Numeric.gcd(this._x.numerator, this._y.numerator));\r\n    }\r\n\r\n    angleWith = (V: Vector, sharp?: Boolean, radian?: Boolean): number => {\r\n        let scalar = this.scalarProductWithVector(V).value,\r\n            toDegree = radian ? 1 : 180 / Math.PI;\r\n        if (sharp) {\r\n            scalar = Math.abs(scalar);\r\n        }\r\n\r\n        return toDegree * Math.acos(scalar / (this.norm * V.norm));\r\n    }\r\n}\r\n","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport Fraction from \"../coefficients/fraction\";\r\n\r\n//TODO: Ajouter une vérification si la droite existe.\r\nexport default class Point {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n    private _exist: Boolean;\r\n\r\n    constructor(...values: any) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this\r\n    };\r\n\r\n    get isPoint() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.tex);\r\n        pts.push(this._y.tex);\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Point => {\r\n        // Initialize the value.\r\n        this.zero();\r\n\r\n        // Nothing is given\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        // One element is given - might be already a point !\r\n        if (values.length === 1) {\r\n            // it's already a point - clone it\r\n            if (values[0] instanceof Point) {\r\n                this._x = values[0].x.clone()\r\n                this._y = values[0].y.clone()\r\n                return this;\r\n            }\r\n\r\n            // Value is given as string, comma separated.\r\n            if(typeof values[0] === 'string'){\r\n                let xy = values[0].split(',')\r\n                if(xy.length===2){\r\n                    this._x = new Fraction(xy[0]).reduce()\r\n                    this._y = new Fraction(xy[1]).reduce()\r\n                    return this;\r\n                }\r\n            }\r\n\r\n            // Value given as an object with {x: value, y: value}\r\n            if (values[0].x !== undefined && values[0].y !== undefined) {\r\n                this._x = new Fraction(values[0].x).reduce()\r\n                this._y = new Fraction(values[0].y).reduce()\r\n            } else {\r\n                return this.zero();\r\n            }\r\n        }\r\n        if (values.length === 2) {\r\n            this._x = new Fraction(values[0]).reduce()\r\n            this._y = new Fraction(values[1]).reduce()\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Point => {\r\n        this._x = this._x.clone()\r\n        this._y = this._y.clone()\r\n\r\n        return this\r\n    }\r\n\r\n    zero = (): Point => {\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    origin = (): Point => {\r\n        this.zero();\r\n        return this;\r\n    }\r\n\r\n    middleOf = (P1: Point, P2: Point): Point => {\r\n        this._x = P1.x.clone().add(P2.x).divide(2);\r\n        this._y = P1.y.clone().add(P2.y).divide(2);\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Display functions\r\n    // ------------------------------------------\r\n    texValues = (numberOfDigits: number): string => {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.value.toFixed(numberOfDigits===undefined?2:numberOfDigits));\r\n        pts.push(this._y.value.toFixed(numberOfDigits===undefined?2:numberOfDigits));\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Static functions\r\n    // ------------------------------------------\r\n    static pmatrix = (a: any, b: any, c?: any): string => {\r\n        if (c === undefined) {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\end{pmatrix}`;\r\n        } else {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\\\\\ ${c.tex ? c.tex : c} \\\\end{pmatrix}`;\r\n        }\r\n    };\r\n\r\n}\r\n","/**\r\n * This class works for 2d line in a plane.\r\n */\r\n\r\nimport Fraction from \"../coefficients/fraction\";\r\nimport Vector from \"./vector\";\r\nimport Point from \"./point\";\r\nimport Polynom from \"../algebra/polynom\";\r\nimport Numeric from \"../numeric\";\r\nimport Equation from \"../algebra/equation\";\r\n\r\nexport default class Line {\r\n    // A line is defined as the canonical form\r\n    // ax + by + c = 0\r\n    private _a: Fraction;\r\n    private _b: Fraction;\r\n    private _c: Fraction;\r\n    private _OA: Point;\r\n    private _d: Vector;\r\n    private _n: Vector;\r\n    private _exists: boolean\r\n\r\n    constructor(...values: any) {\r\n\r\n        this._exists = false;\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isLine():boolean {return true;}\r\n    get exists(): boolean {return this._exists; }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equation(): Equation {\r\n        return new Equation(new Polynom().parse('xy', this._a, this._b, this._c), new Polynom('0')).simplify();\r\n    }\r\n    get tex(): { canonical: string, mxh: string, parametric: string } {\r\n        // canonical    =>  ax + by + c = 0\r\n        // mxh          =>  y = -a/b x - c/b\r\n        // parametric   =>  (xy) = OA + k*d\r\n\r\n        let canonical = this.equation;\r\n        // Make sur the first item is positive.\r\n        if(this._a.isNegative()){\r\n            canonical.multiply(-1);\r\n        }\r\n\r\n        return {\r\n            canonical: canonical.tex,\r\n            mxh: this.slope.isInfinity() ? 'x=' + this.OA.x.tex : 'y=' + new Polynom().parse('x', this.slope, this.height).tex,\r\n            parametric: `${Point.pmatrix('x', 'y')} = ${Point.pmatrix(this._OA.x, this._OA.y)} + k\\\\cdot ${Point.pmatrix(this._d.x, this._d.y)}`\r\n        }\r\n    }\r\n\r\n    get a(): Fraction {\r\n        return this._a;\r\n    }\r\n\r\n    set a(value: Fraction) {\r\n        this._a = value;\r\n    }\r\n\r\n    get b(): Fraction {\r\n        return this._b;\r\n    }\r\n\r\n    set b(value: Fraction) {\r\n        this._b = value;\r\n    }\r\n\r\n    get c(): Fraction {\r\n        return this._c;\r\n    }\r\n\r\n    set c(value: Fraction) {\r\n        this._c = value;\r\n    }\r\n\r\n    get OA(): Point {\r\n        return this._OA;\r\n    }\r\n\r\n    set OA(value: Point) {\r\n        this._OA = value;\r\n    }\r\n\r\n    get d(): Vector {\r\n        return this._d;\r\n    }\r\n\r\n    get n(): Vector {\r\n        return this._n;\r\n    }\r\n\r\n    get normal(): Vector {\r\n        return new Vector(this._a, this._b);\r\n    }\r\n\r\n    set d(value: Vector) {\r\n        this._d = value;\r\n    }\r\n\r\n    get slope(): Fraction {\r\n        return this._a.clone().opposed().divide(this._b);\r\n    }\r\n\r\n    get height(): Fraction {\r\n        return this._c.clone().opposed().divide(this._b);\r\n    }\r\n\r\n// ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...values: any): Line => {\r\n        this._exists = false;\r\n\r\n        if (values.length === 3) {\r\n            return this.parseByCoefficient(values[0], values[1], values[2]);\r\n        } else if (values.length === 2) {\r\n            if (values[0].isPoint && values[1].isVector) {\r\n                return this.parseByPointAndVector(values[0], values[1]);\r\n            } else if (values[0].isPoint && values[1].isPoint) {\r\n                return this.parseByPointAndVector(values[0], new Vector(values[0], values[1]));\r\n            }\r\n        } else if (values.length === 1){\r\n            // It's a already a line - clone it !\r\n            if(values[0].isLine){\r\n                return values[0].clone();\r\n            }\r\n\r\n            // Maybe it's a string or an equation\r\n            let equ = new Equation(values[0]);\r\n            if(equ.isEquation){\r\n                // Check if it's a valid equation.\r\n                equ.reorder(true)\r\n\r\n                // It must contain either x, y or both.\r\n                let letters = new Set(equ.letters());\r\n\r\n                // No 'x', no 'y' in the equations\r\n                if(!(letters.has('x') || letters.has('y'))){return;}\r\n\r\n                // Another letter in the equation.\r\n                for(let elem of ['x', 'y']){\r\n                    if(letters.has(elem)){\r\n                        letters.delete(elem)}\r\n                }\r\n\r\n                if(letters.size>0){\r\n                    console.log('Extra variable in the equation.')\r\n                    return this;\r\n                }\r\n\r\n                // Everything should be ok now...\r\n                return this.parseByCoefficient(equ.left.monomByLetter('x').coefficient, equ.left.monomByLetter('y').coefficient, equ.left.monomByDegree(0).coefficient)\r\n            }\r\n        }\r\n        // TODO: Add the ability to create line from a normal vector\r\n        console.log('Someting wrong happend while creating the line')\r\n        return this;\r\n    }\r\n\r\n    parseByCoefficient = (a: Fraction, b: Fraction, c: Fraction): Line => {\r\n        this._a = new Fraction(a);\r\n        this._b = new Fraction(b);\r\n        this._c = new Fraction(c);\r\n\r\n        // TODO: initialize direction and reference point\r\n        this._d = new Vector(this._b.clone(), this._a.clone().opposed());\r\n        this._OA = new Point(new Fraction().zero(), this._c.clone());\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    parseByPointAndVector = (P: Point, d: Vector): Line => {\r\n        // OX = OP + k*d\r\n        // x = px + kdx     * dy\r\n        // y = py + kdy     * dx\r\n        // ------------------\r\n        // dy * x = px * dy + kdxdy\r\n        // dx * y = py * dx + kdxdy\r\n        // ------------------\r\n        // dy * x - dx * y = px * dy - py * dx\r\n        // dy * x - dx * y - (px * dy - py * dx) = 0\r\n        this.parseByCoefficient(\r\n            d.y,\r\n            d.x.clone().opposed(),\r\n            P.x.clone().multiply(d.y).subtract(P.y.clone().multiply(d.x)).opposed()\r\n        )\r\n\r\n        // Choose the current values as point and direction vector instead of the automatic version.\r\n        this._OA = P.clone();\r\n        this._d = d.clone();\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    clone = (): Line => {\r\n        this._a = this._a.clone();\r\n        this._b = this._b.clone();\r\n        this._c = this._c.clone();\r\n\r\n        this._d = this._d.clone();\r\n        this._OA = this._OA.clone();\r\n        this._n = this._n.clone();\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    isParellelTo = (line: Line): Boolean => {\r\n        // Do they have the isSame direction ?\r\n        return this.slope.isEqual(line.slope) && this.height.isDifferent(line.height);\r\n    }\r\n    isSameAs = (line: Line): Boolean => {\r\n        return this.slope.isEqual(line.slope) && this.height.isEqual(line.height);\r\n    }\r\n    simplifyDirection = (): Line => {\r\n        let lcm = Numeric.lcm(this._d.x.denominator, this._d.y.denominator),\r\n            gcd = Numeric.gcd(this._d.x.numerator, this._d.y.numerator);\r\n\r\n        this._d.x.multiply(lcm).divide(gcd);\r\n        this._d.y.multiply(lcm).divide(gcd);\r\n        return this;\r\n    }\r\n    intersection = (line: Line): { point: Point, hasIntersection: boolean, isParallel: boolean, isSame: boolean } => {\r\n        let Pt = new Point(), isParallel = false, isSame = false, hasIntersection = true;\r\n\r\n        // this         => ax+by+c = 0\r\n        // line         => dx+ey+f = 0\r\n        //\r\n        //  aex + bey + ce = 0\r\n        //  dbx + bey + bf = 0\r\n        // (ae-db)x + ce-bf = 0\r\n        //\r\n        //  adx + bdy + cd = 0\r\n        //  adx + aey + af = 0\r\n        // (bd-ae)y + (cd-af)\r\n        //\r\n        // x = (bf-ce)/(ae-db)\r\n        // y = (af-cd)/(bd-ae)\r\n\r\n\r\n        // Theres is no 'y'\r\n        if (this._b.isZero() || line.b.isZero()) {\r\n            // TODO : handle no y in the line canonical form\r\n        }\r\n\r\n        if (this.isParellelTo(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isParallel = true;\r\n        } else if (this.isSameAs(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isSame = true;\r\n        } else {\r\n            Pt.x = this._b.clone().multiply(line.c).subtract(this._c.clone().multiply(line.b))\r\n                .divide(this._a.clone().multiply(line.b).subtract(this._b.clone().multiply(line.a)));\r\n            Pt.y = this._a.clone().multiply(line.c).subtract(this._c.clone().multiply(line.a))\r\n                .divide(this._b.clone().multiply(line.a).subtract(this._a.clone().multiply(line.b)));\r\n        }\r\n\r\n        return {\r\n            point: Pt,\r\n            hasIntersection: !(isParallel || isSame),\r\n            isParallel,\r\n            isSame\r\n        };\r\n    }\r\n\r\n    distanceTo(pt: Point): { value: number, fraction: Fraction, tex: string } {\r\n        let numerator = pt.x.clone().multiply(this._a)\r\n                .add(pt.y.clone().multiply(this._b))\r\n                .add(this._c).abs(),\r\n            d2 = this.normal.normSquare;\r\n\r\n        // The denominator is null - shouldn't be possible\r\n        if (d2.isZero()) {\r\n            return {\r\n                value: NaN,\r\n                tex: 'Not a line',\r\n                fraction: new Fraction().infinite()\r\n            }\r\n        }\r\n        // The denominator is a perfect square - simplify the tex result\r\n        let value = numerator.value / Math.sqrt(d2.value),\r\n            F = numerator.clone().divide(d2.clone().sqrt());\r\n\r\n        // The denominator is a perfect square.\r\n        if (d2.isSquare()) {\r\n            return {\r\n                value,\r\n                tex: F.tex,\r\n                fraction: F\r\n            }\r\n        }\r\n        // Complete answer...\r\n        return {\r\n            value,\r\n            tex: `\\\\frac{${numerator.tex}}{\\\\sqrt{${d2.tex}}}`,\r\n            fraction: F\r\n        };\r\n    }\r\n\r\n    hitSegment(A: Point, B: Point): boolean {\r\n        let iPt = this.intersection(\r\n            new Line(A, B)\r\n        )\r\n\r\n        // There is an intersection point\r\n        if(iPt.hasIntersection) {\r\n            return iPt.point.x.value >= Math.min(A.x.value, B.x.value)\r\n                && iPt.point.x.value <= Math.max(A.x.value, B.x.value)\r\n                && iPt.point.y.value >= Math.min(A.y.value, B.y.value)\r\n                && iPt.point.y.value <= Math.max(A.y.value, B.y.value)\r\n        }\r\n        return false;\r\n    }\r\n    // ------------------------------------------\r\n    // Special functions\r\n    // ------------------------------------------\r\n    canonicalAsFloatCoefficient(decimals: number): string{\r\n        if(decimals===undefined){\r\n            decimals = 2;\r\n        }\r\n\r\n        let ca = this._a.value,\r\n            cb = this._b.value,\r\n            cc= this._c.value,\r\n            canonical = '';\r\n\r\n        if(!this._a.isZero()){\r\n            if(this._a.isOne()){\r\n                canonical = 'x'\r\n            }else if(this._a.clone().opposed().isOne()){\r\n                canonical = '-x'\r\n            }else{\r\n                canonical = this._a.value.toFixed(decimals)+'x'\r\n            }\r\n        }\r\n\r\n        if(!this._b.isZero()){\r\n            if(this._b.isPositive()){canonical+='+'}\r\n            canonical += this._b.value.toFixed(decimals) + 'y'\r\n        }\r\n\r\n        if(!this._c.isZero()){\r\n            if(this._c.isPositive()){canonical+='+'}\r\n            canonical += this._c.value.toFixed(decimals)\r\n        }\r\n\r\n\r\n        return canonical + '=0';\r\n    }\r\n}","import Numeric from \"./maths/numeric\";\r\nimport Shutingyard from \"./maths/shutingyard\";\r\nimport Fraction from \"./maths/coefficients/fraction\";\r\nimport Nthroot from \"./maths/coefficients/nthroot\";\r\nimport Monom from \"./maths/algebra/monom\";\r\nimport Polynom from \"./maths/algebra/polynom\";\r\nimport Equation from \"./maths/algebra/equation\";\r\nimport LinearSystem from \"./maths/algebra/linearSystem\";\r\nimport Line from \"./maths/geometry/line\";\r\nimport Circle from \"./maths/geometry/circle\";\r\nimport Logicalset from \"./maths/algebra/logicalset\";\r\nimport Rational from \"./maths/algebra/rational\";\r\nimport {Random} from \"./maths/random/random\";\r\nimport Triangle from \"./maths/geometry/triangle\";\r\nimport Point from \"./maths/geometry/point\";\r\nimport Vector from \"./maths/geometry/vector\";\r\n\r\n// Expose as global\r\n// export let Pi = {\r\n(<any>window).Pi = {\r\n    ShutingYard: Shutingyard,\r\n    Numeric: Numeric,\r\n    Fraction: Fraction,\r\n    Root: Nthroot,\r\n    Monom: Monom,\r\n    Polynom: Polynom,\r\n    Equation: Equation,\r\n    LinearSystem: LinearSystem,\r\n    Rational: Rational,\r\n    Logicalset: Logicalset,\r\n    Random: Random,\r\n    Geometry: {\r\n        Vector: Vector,\r\n        Point: Point,\r\n        Line: Line,\r\n        Triangle: Triangle,\r\n        Circle: Circle\r\n    }\r\n};\r\n","/**\r\n * Rational polynom module contains everything necessary to handle rational polynoms.\r\n * @module Polynom\r\n */\r\n\r\nimport Polynom from \"./polynom\";\r\nimport Fraction from \"../coefficients/fraction\";\r\n\r\n/**\r\n * Rational class can handle rational polynoms\r\n */\r\nexport default class Rational {\r\n    private _rawString: string;\r\n    private _numerator: Polynom;\r\n    private _denominator: Polynom;\r\n\r\n    /**\r\n     *\r\n     * @param numerator\r\n     * @param denominator\r\n     */\r\n    constructor(numerator?: Polynom, denominator?: Polynom) {\r\n        this._numerator = numerator?numerator.clone():new Polynom();\r\n        this._denominator = denominator?denominator.clone():new Polynom();\r\n    }\r\n\r\n    clone = (): Rational => {\r\n        this._numerator = this._numerator.clone()\r\n        this._denominator = this._denominator.clone()\r\n\r\n        return this;\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\dfrac{ ${this._numerator.tex} }{ ${this._denominator.tex} }`;\r\n    }\r\n\r\n    get texFactors(): string {\r\n        this._numerator.factorize()\r\n        this._denominator.factorize()\r\n\r\n        return `\\\\dfrac{ ${this._numerator.texFactors} }{ ${this._denominator.texFactors} }`\r\n    }\r\n\r\n    get numerator(): Polynom {\r\n        return this._numerator\r\n    }\r\n    get denominator(): Polynom {\r\n        return this._denominator\r\n    }\r\n\r\n    domain = (): string => {\r\n        let zeroes = this._denominator.getZeroes();\r\n        if( zeroes.length===0 || zeroes[0]===false){\r\n            return '\\\\mathbb{R}'\r\n        }else if(zeroes[0]===true){\r\n            return '\\\\varnothing'\r\n        }else{\r\n            return '\\\\mathbb{R}\\\\setminus\\\\left{'+\r\n                zeroes.map(x=> {\r\n                    return (typeof x === 'boolean')?'':x.frac\r\n                    })\r\n                    .join(';')+'\\\\right}'\r\n        }\r\n    }\r\n\r\n    amplify = (P: Polynom): Rational => {\r\n        this._numerator.multiply(P);\r\n        this._denominator.multiply(P);\r\n\r\n        return this;\r\n    }\r\n\r\n    simplify = (P: Polynom): Rational => {\r\n        let NumeratorEuclidien = this._numerator.euclidian(P);\r\n        if(!NumeratorEuclidien.reminder.isZero()){return this;}\r\n\r\n        let DenominatorEuclidien = this._denominator.euclidian(P);\r\n        if(!DenominatorEuclidien.reminder.isZero()){return this;}\r\n\r\n        this._numerator = NumeratorEuclidien.quotient;\r\n        this._denominator = DenominatorEuclidien.quotient;\r\n        return this;\r\n    }\r\n\r\n    reduce = (): Rational => {\r\n        console.log(this._numerator.tex)\r\n        this._numerator.factorize();\r\n        console.log(this._numerator.factors.map(x => x.tex))\r\n        for(let f of this._numerator.factors){\r\n            this.simplify(f);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    opposed = (): Rational => {\r\n        this._numerator.opposed();\r\n        return this;\r\n    }\r\n    add = (R: Rational): Rational => {\r\n        // 1. Make sure both rational are at the same denominator\r\n        // 2. Add the numerators.\r\n        // 3. Simplify\r\n\r\n        // Store the adding denominator\r\n        let denominator = this._denominator.clone()\r\n\r\n        // Amplif the main rational polynom by the adding denominator\r\n        this.amplify(R._denominator)\r\n\r\n        // Add to the numerator the adding value...\r\n        this._numerator.add(R._numerator.clone().multiply(denominator));\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (R: Rational): Rational => {\r\n        return this.add(R.clone().opposed())\r\n    }\r\n\r\n    limits = (value: Fraction|number, letter?: string):Fraction|number => {\r\n        if(value===Infinity || value===-Infinity){\r\n            let N = this._numerator.monomByDegree(this._numerator.degree(letter), letter),\r\n                D = this._denominator.monomByDegree(this._denominator.degree(letter), letter)\r\n\r\n            N.divide(D)\r\n\r\n            if(N.degree(letter)>0){return N.coefficient.sign()*(Math.pow((value>0?1:-1),N.degree(letter)%2))===1?Infinity:-Infinity}\r\n            if(N.degree(letter)===0){return N.coefficient}\r\n            if(N.degree(letter)>0){return N.coefficient.sign()*(Math.pow(-1,N.degree(letter)%2))===1?0:-0}\r\n        }else{\r\n            return this._numerator.evaluate({letter: value}).divide(this._denominator.evaluate({letter: value}))\r\n        }\r\n    }\r\n}","/**\r\n * Polynom module contains everything necessary to handle polynoms.\r\n * @module Logicalset\r\n */\r\n\r\nimport Shutingyard from '../shutingyard';\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n */\r\nexport default class Logicalset {\r\n    private _rawString: string;\r\n    private _rpn: { token: string, tokenType: string }[]\r\n\r\n    /**\r\n     *\r\n     * @param {string} value (optional) Default polynom to parse on class creation\r\n     */\r\n    constructor(value: string) {\r\n        this._rawString = value\r\n        this.parse(value)\r\n        return this;\r\n    }\r\n\r\n    get isLogicalset() {\r\n        return true;\r\n    };\r\n\r\n    private parse = (value: string): Logicalset => {\r\n        // TODO: Must format the value string to convert some items...\r\n\r\n        // Parse the updated value to the shutingyard algorithm\r\n        this._rpn = new Shutingyard('set').parse(value).rpn;\r\n\r\n        return this;\r\n    }\r\n\r\n    evaluate(tokenSets: { [key: string]: any[] }, reference?: any[]): any[] {\r\n        let varStack: (Set<unknown>)[] = []\r\n\r\n        let referenceSet: Set<unknown>\r\n        if (reference === undefined) {\r\n            referenceSet = new Set()\r\n            for (let key in tokenSets) {\r\n                referenceSet = new Set([...referenceSet, ...tokenSets[key]])\r\n            }\r\n        } else {\r\n            referenceSet = new Set(reference)\r\n        }\r\n\r\n        for (let token of this._rpn) {\r\n            if (token.tokenType === 'variable') {\r\n                // The variable has no token - assume it's empty.\r\n                if (tokenSets[token.token] === undefined) {\r\n                    varStack.push(new Set())\r\n                } else {\r\n                    varStack.push(new Set(tokenSets[token.token]));\r\n                }\r\n\r\n            } else {\r\n                switch (token.token) {\r\n                    case '&':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            varStack.push(new Set([...first].filter(x => second.has(x))))\r\n                        }\r\n                        break\r\n                    case '|':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n                            varStack.push(new Set([...first, ...second]))\r\n                        }\r\n                        break\r\n                    case '-':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n                            varStack.push(new Set([...first].filter(x => !second.has(x))))\r\n                        }\r\n                        break\r\n                    case '!':\r\n                        if (varStack.length >= 1) {\r\n                            let first = varStack.pop()\r\n\r\n                            varStack.push(new Set([...referenceSet].filter(x => !first.has(x))))\r\n                        }\r\n                        break\r\n                }\r\n            }\r\n        }\r\n\r\n        return [...varStack[0]].sort();\r\n    }\r\n\r\n    vennAB(): any[] {\r\n        return this.evaluate({\r\n                A: ['A', 'AB'],\r\n                B: ['B', 'AB']\r\n            },\r\n            ['A', 'B', 'AB', 'E']\r\n        )\r\n    }\r\n\r\n    vennABC(): any[] {\r\n        return this.evaluate({\r\n                A: ['A', 'AB', 'AC', 'ABC'],\r\n                B: ['B', 'AB', 'BC', 'ABC'],\r\n                C: ['C', 'AC', 'BC', 'ABC']\r\n            },\r\n            ['A', 'B', 'C', 'AB', 'AC', 'BC', 'E']\r\n        )\r\n    }\r\n\r\n    get rpn(): { token: string, tokenType: string }[] {\r\n        return this._rpn\r\n    }\r\n\r\n    get tex(): string {\r\n        let varStack: { token:string, tokenType: string } [] = []\r\n\r\n        for (let token of this._rpn) {\r\n            if (token.tokenType === 'variable') {\r\n                varStack.push(token);\r\n            } else {\r\n                switch (token.token) {\r\n                    case '&':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if(first.tokenType==='mix'){first.token = `( ${first.token} )`}\r\n                            if(second.tokenType==='mix'){second.token = `( ${second.token} )`}\r\n                            varStack.push({token: `${first.token} \\\\cap ${second.token}`, tokenType: 'mix'})\r\n                        }\r\n                        break\r\n                    case '|':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if(first.tokenType==='mix'){first.token = `( ${first.token} )`}\r\n                            if(second.tokenType==='mix'){second.token = `( ${second.token} )`}\r\n                            varStack.push({token: `${first.token} \\\\cup ${second.token}`, tokenType: 'mix'})\r\n                        }\r\n                        break\r\n                    case '-':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if(first.tokenType==='mix'){first.token = `( ${first.token} )`}\r\n                            if(second.tokenType==='mix'){second.token = `( ${second.token} )`}\r\n                            varStack.push({token: `${first.token} \\\\setminus ${second.token}`, tokenType: 'mix'})\r\n                        }\r\n                        break\r\n                    case '!':\r\n                        if (varStack.length >= 1) {\r\n                            let first = varStack.pop()\r\n                            varStack.push({token: `\\\\overline{ ${first.token} }`, tokenType: 'variable'})\r\n                        }\r\n                        break\r\n                }\r\n            }\r\n        }\r\n\r\n        return varStack[0].token\r\n    }\r\n}\r\n","import Point from \"./point\";\r\nimport Fraction from \"../coefficients/fraction\";\r\nimport Vector from \"./vector\";\r\nimport Line from \"./line\";\r\nimport Equation from \"../algebra/equation\";\r\n\r\ninterface remarquableLines {\r\n    'medians': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'mediators': {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line,\r\n        'intersection': Point\r\n    },\r\n    'heights': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'bisectors': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    }\r\n}\r\n\r\nexport default class Triangle {\r\n    private _A: Point;\r\n    private _B: Point;\r\n    private _C: Point;\r\n    private _lines: {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line\r\n    };\r\n    private _middles: {\r\n        'AB': Point,\r\n        'AC': Point,\r\n        'BC': Point\r\n    };\r\n    private _remarquables: remarquableLines;\r\n\r\n\r\n    constructor(...values: any) {\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    get isTriangle():boolean {return true;}\r\n\r\n    // ------------------------------------------\r\n    // Getter and setters\r\n    // ------------------------------------------\r\n\r\n    get A(): Point {\r\n        return this._A;\r\n    }\r\n\r\n    get B(): Point {\r\n        return this._B;\r\n    }\r\n\r\n    get C(): Point {\r\n        return this._C;\r\n    }\r\n\r\n    get AB(): Vector {\r\n        return this.getSegment('A', 'B');\r\n    }\r\n\r\n    get BA(): Vector {\r\n        return this.getSegment('B', 'A');\r\n    }\r\n\r\n    get BC(): Vector {\r\n        return this.getSegment('B', 'C');\r\n    }\r\n\r\n    get CB(): Vector {\r\n        return this.getSegment('C', 'B');\r\n    }\r\n\r\n    get AC(): Vector {\r\n        return this.getSegment('A', 'C');\r\n    }\r\n\r\n    get CA(): Vector {\r\n        return this.getSegment('C', 'A');\r\n    }\r\n\r\n    get isRectangle(): boolean {\r\n        if (this.AB.isNormalTo(this.BC)) {\r\n            return true;\r\n        }\r\n        if (this.AB.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n        if (this.BC.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    get isEquilateral(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) &&\r\n            this.AB.normSquare.isEqual(this.AC.normSquare);\r\n    }\r\n\r\n    get isIsocele(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) ||\r\n            this.AB.normSquare.isEqual(this.AC.normSquare) ||\r\n            this.BC.normSquare.isEqual(this.AC.normSquare)\r\n    }\r\n\r\n    get lines(): { 'AB': Line, 'BC': Line, 'AC': Line } {\r\n        return this._lines;\r\n    }\r\n\r\n    get remarquables(): remarquableLines {\r\n        return this._remarquables;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Parse values to a triangle. Supported formats:\r\n     * Point, Point, Point\r\n     * x1, y1, x2, y2, x3, y3\r\n     * TODO: Something else ?\r\n     * @param values\r\n     */\r\n    parse = (...values: any): Triangle => {\r\n        if (values.length === 6) {\r\n            // Check if all values are number or fractions.\r\n            let v = values.map((x: any) => new Fraction(x));\r\n            return this.parse(\r\n                new Point(v[0], v[1]),\r\n                new Point(v[2], v[3]),\r\n                new Point(v[4], v[5]),\r\n            )\r\n        } else if (values.length === 3) {\r\n            // Possibilities:\r\n            // - Three points (or part of points, only dict for example, or array (TODO: Add the array syntax for point)\r\n            // - Three lines\r\n            // - Three lines as text.\r\n            if(values.filter((x:any) => typeof x === 'string').length===3) {\r\n                return this.parse( ...values.map((x:string) => new Line(x)) )\r\n            }else if(values.filter((x:any) => x.isLine === true).length===3) {\r\n                // We have three lines\r\n                this._lines = {\r\n                    'AB': values[0],\r\n                    'BC': values[1],\r\n                    'AC': values[2]\r\n                };\r\n\r\n                // Get the intersection points -> build the triangle using these intersection points.\r\n                let intersect = values[0].intersection(values[1]);\r\n                if (intersect.hasIntersection) {\r\n                    this._B = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[1].intersection(values[2]);\r\n                if (intersect.hasIntersection) {\r\n                    this._C = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[2].intersection(values[0]);\r\n                if (intersect.hasIntersection) {\r\n                    this._A = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n            }else {\r\n                // At least, one of the value is not a point.\r\n                if (values.filter((x: any) => x.isPoint === true).length < 3) {\r\n                    return this.parse(\r\n                        new Point(values[0]),\r\n                        new Point(values[1]),\r\n                        new Point(values[2])\r\n                    )\r\n                }\r\n\r\n                // We have three points.\r\n                this._A = values[0].clone();\r\n                this._B = values[1].clone();\r\n                this._C = values[2].clone();\r\n\r\n                this._lines = {\r\n                    'AB': new Line(this._A, this._B),\r\n                    'BC': new Line(this._B, this._C),\r\n                    'AC': new Line(this._A, this._C)\r\n                };\r\n            }\r\n        } else if (values.length === 1) {\r\n            if (values[0].isTriangle === true) {\r\n                return values[0].clone();\r\n            }\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the Triangle class\r\n     */\r\n    clone = (): Triangle => {\r\n        this._A = this._A.clone();\r\n        this._B = this._B.clone();\r\n        this._C = this._C.clone();\r\n\r\n        this._lines = {\r\n            'AB': this._lines.AB.clone(),\r\n            'BC': this._lines.BC.clone(),\r\n            'AC': this._lines.AC.clone()\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Triangle operations and properties\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Generate the Line object for the three segments of the triangle\r\n     */\r\n    private _updateTriangle = () => {\r\n        this._middles = {\r\n            'AB': new Point().middleOf(this._A, this._B),\r\n            'AC': new Point().middleOf(this._A, this._C),\r\n            'BC': new Point().middleOf(this._B, this._C)\r\n        }\r\n\r\n        this._remarquables = this._calculateRemarquableLines();\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the Point class for the given name\r\n     * @param ptName\r\n     */\r\n    private getPointByName = (ptName: string): Point => {\r\n        switch (ptName.toUpperCase()) {\r\n            case 'A':\r\n                return this._A;\r\n            case 'B':\r\n                return this._B;\r\n            case 'C':\r\n                return this._C;\r\n        }\r\n\r\n        // Something went wrong ! Return the first point\r\n        return this._A;\r\n    }\r\n    /**\r\n     * Get the vector for the segment given by name.\r\n     * @param ptName1\r\n     * @param ptName2\r\n     */\r\n    private getSegment = (ptName1: string, ptName2: string): Vector => {\r\n        return new Vector(\r\n            this.getPointByName(ptName1),\r\n            this.getPointByName(ptName2)\r\n        );\r\n    }\r\n\r\n    private _calculateRemarquableLines = (): remarquableLines => {\r\n        let remarquables: remarquableLines = {\r\n            'medians': {\r\n                'A': new Line(this._A, this._middles.BC),\r\n                'B': new Line(this._B, this._middles.AC),\r\n                'C': new Line(this._C, this._middles.AB),\r\n                'intersection': null\r\n            },\r\n            'mediators': {\r\n                'AB': new Line(this._middles.AB, new Vector(this._A, this._B).normal()),\r\n                'AC': new Line(this._middles.AC, new Vector(this._A, this._C).normal()),\r\n                'BC': new Line(this._middles.BC, new Vector(this._B, this._C).normal()),\r\n                'intersection': null\r\n            },\r\n            'heights': {\r\n                'A': new Line(this._A, new Vector(this._B, this._C).normal()),\r\n                'B': new Line(this._B, new Vector(this._A, this._C).normal()),\r\n                'C': new Line(this._C, new Vector(this._A, this._B).normal()),\r\n                'intersection': null\r\n            },\r\n            'bisectors': {\r\n                'A': this._calculateBisectors('A'),\r\n                'B': this._calculateBisectors('B'),\r\n                'C': this._calculateBisectors('C'),\r\n                'intersection': null\r\n            }\r\n        }\r\n\r\n        // As it's a triangle, we assume the lines are intersecting and aren't parallel or superposed.\r\n        remarquables.medians.intersection = remarquables.medians.A.intersection(remarquables.medians.B).point;\r\n        remarquables.mediators.intersection = remarquables.mediators.AB.intersection(remarquables.mediators.BC).point;\r\n        remarquables.heights.intersection = remarquables.heights.A.intersection(remarquables.heights.B).point;\r\n        remarquables.bisectors.intersection = remarquables.bisectors.A.intersection(remarquables.bisectors.B).point;\r\n\r\n        // Everything was calculated for the remarquable lines.\r\n        return remarquables;\r\n    }\r\n\r\n    private _calculateBisectors = (pt: string): Line => {\r\n        let tlines = this.lines, d1, d2;\r\n\r\n        if(pt==='A'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.AC;\r\n        }else if(pt==='B'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.BC;\r\n        }else if(pt==='C'){\r\n            d1 = tlines.BC;\r\n            d2 = tlines.AC;\r\n        }\r\n\r\n        let b1 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm)).reorder(true).simplify()),\r\n            b2 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm).opposed()).reorder(true).simplify());\r\n\r\n        // Must determine which bisectors is in the triangle\r\n        if(pt==='A'){\r\n            return b1.hitSegment(this.B, this.C)?b1:b2;\r\n        }\r\n        if(pt==='B'){\r\n            return b1.hitSegment(this.A, this.C)?b1:b2;\r\n        }\r\n        if(pt==='C'){\r\n            return b1.hitSegment(this.B, this.A)?b1:b2;\r\n        }\r\n\r\n        // Default returns the first bisector\r\n        return b1;\r\n    }\r\n}","import Point from \"./point\";\r\nimport Fraction from \"../coefficients/fraction\";\r\nimport Equation from \"../algebra/equation\";\r\nimport Polynom from \"../algebra/polynom\";\r\n\r\n\r\nexport default class Circle {\r\n    private _center: Point;\r\n    private _radius: Fraction;\r\n    private _exists: boolean;\r\n    constructor(...values: any) {\r\n        this._exists = false\r\n\r\n        if(values!==undefined){this.parse(...values)}\r\n    }\r\n\r\n    private parse(...values: any) {\r\n        if(values.length===2){\r\n            this._center = new Point(values[0])\r\n            this._radius = new Fraction(values[1])\r\n        }\r\n    }\r\n\r\n    get tex(): string {\r\n        let cx, cy\r\n        if(this._center.x.isZero()){\r\n            cx = 'x^2'\r\n        }else{\r\n            cx = `\\\\left(x-${this._center.x.tex}\\\\right)^2`\r\n        }\r\n        if(this._center.y.isZero()){\r\n            cy = 'y^2'\r\n        }else{\r\n            cy = `\\\\left(y-${this._center.y.tex}\\\\right)^2`\r\n        }\r\n        return `${cx}+${cy}=${this._radius.pow(2).tex}`\r\n    }\r\n\r\n    get developed():string {\r\n        let equ = new Equation(\r\n            new Polynom(`(x-(${this._center.x.display}))^2+(y-(${this._center.y.display}))^2`),\r\n            new Polynom(`${this._radius.pow(2).display}`)\r\n        )\r\n\r\n        return equ.moveLeft().tex;\r\n    }\r\n}"],"names":["root","factory","exports","module","define","amd","self","Random","Symbol","toStringTag","Object","defineProperty","value","Numeric","static","decimals","Number","Math","round","nb","primes","undefined","slice","max","length","D","maxV","sqrt","abs","i","push","sort","a","b","Set","values","gcd2","g","reduce","gcd","Shutingyard","_rpn","_mode","_tokenConfig","_uniformize","constructor","mode","this","tokenConfigInitialization","isOperation","token","match","precedence","associative","NextToken2","expr","start","tokenType","keys","key","substr","console","log","NextToken","tokenMatch","Uniformizer","expr2","replace","fnToken","RegExp","parse","operators","outQueue","opStack","tokenPos","previousOpStatckLength","securityLoopLvl2","securityLoopLvl1","opTop","pop","concat","reverse","rpn","Fraction","_numerator","_denominator","denominatorOrPeriodic","isFraction","numerator","denominator","tex","display","frac","dfrac","S","split","map","x","isNaN","includes","NaN","isSafeInteger","p","toString","pow","floor","clone","F","zero","one","infinite","Infinity","invalid","opposed","add","N","subtract","multiply","Q","divide","invert","n","d","amplify","k","compare","sign","lesser","than","leq","greater","geq","isEqual","isDifferent","isOpposed","isInverted","isZero","isOne","isPositive","isNegative","isInfinity","isFinite","isSquare","isReduced","areEquals","Nthroot","_radical","_nth","_coefficient","_isValid","radical","nth","coefficient","C","nthroot","V","hasRadical","Monom","_literal","isMonom","literal","literalSqrt","isLitteralSquare","L","literalStr","inputStr","v","matchAll","variables","clean","letter","dividers","litterals","_getLitteralDividers","monomDividers","M","arr","tmpList","litt","item","currentLetter","displayWithSign","trim","setLetter","m","isSameAs","multiplyByNumber","M1","M2","K","filter","indexOf","hasLetter","degree","t","evaluate","r","tmpValues","derivative","dM","primitive","monoms","coeffN","coeffD","lcm","min","areSameAs","randomCore","_config","_defaultConfig","mergeConfig","config","defaultConfig","generate","rndMonom","userConfig","super","letters","fraction","numberSym","number","rndPolynom","unit","factorable","allowNullMonom","numberOfMonoms","P","Polynom","empty","array","rndHelpers","percent","random","randomInt","randomBool","shuffleArray","randomArray","j","temp","polynom","monom","from","to","allowZero","randomIntSym","bool","randomItem","shuffle","_rawString","_monoms","_factors","_texString","polynomString","isPolynom","factors","texFactors","factorize","f","texString","genDisplay","raw","isMultiVariable","numberOfVars","output","forceSign","wrapParentheses","shutingYardToReducedPolynom","test","fractions","m1","m2","tempPolynom","stack","previousToken","element","_randomizeDefaults","randomizeDefaults","randomize","rndFactorable","factorUnit","multiplyByPolynom","multiplyByFraction","multiplyByMonom","multiplyByInteger","xmultiply","euclidian","quotient","reminder","reorder","maxMP","monomByDegree","degreeP","newM","MaxIteration","divideByFraction","divideByInteger","nbF","cP1","cP2","isOpposedAt","isFactorized","e","polynomStringNormalized","replaceAll","polynomStringReduced","polyFactors","splice","isDeveloped","replaceBy","resultPolynom","forEach","dP","integrate","valuesA","valuesB","factorize_OLD","maxValue","nbFactorsFound","commonMonom","commonPolynom","securityLoop","m1d","m2d","result","dividerPolynom","_factorize2ndDegree","P1","P2","c","delta","x1","x2","factor","xyzPolynom","xFactors","_factorizeByGroups","getZeroes","zeroes","zeroesAsTex","A","B","toFixed","z","monomsByDegree","Ms","monomByLetter","getDenominators","denominators","getNumerators","numerators","lcmDenominator","gcdDenominator","lcmNumerator","gcdNumerator","makeItComplicate","complexity","factorizePartial","mMain","mCheck","mFactor","pFactor","minify","canDivide","evalValue","Equation","_left","_right","_sign","_polynom","_solutions","_varnothing","_real","equations","isEquation","left","right","solutions","solution","join","isReal","solve","isVarnothing","signAsTex","_formatSign","equationString","pStr","strSign","_findSign","create","signStr","_reverseSign","opts","moveLeft","allLeft","mMove","simplify","isolate","cMove","_solveDegree1","_solveDegree2","_solveDegree3plus","isGreater","isStrictEqual","isAlsoEqual","m0","s","nthDelta","realX1","realX2","sX1","sX2","aF","bF","cF","LinearSystem","_resolutionSteps","_equations","_letters","equationStrings","isLinerarSystem","isSolvable","E","equStr","LS","equArray","equ","repeat","texSolution","_findLetters","setCoefficient","coefficients","setLetters","solutionsF","_generateOneEquation","coeff","leftValue","equString","_checkIfLinerCombination","_linearReduction","eq1","eq2","c1","c2","mergeEquations","factor1","factor2","eq1multiplied","eq2multiplied","_solveOneLetter","LE","reducedEquations","str","Vector","_x","_y","isVector","y","normSquare","norm","_parseString","isPoint","reset","components","scalarProductWithVector","v1","v2","normal","isNormalTo","multiplyByScalar","scalar","divideByScalar","angleWith","sharp","radian","toDegree","PI","acos","Point","_exist","pts","xy","origin","middleOf","texValues","numberOfDigits","Line","_a","_b","_c","_OA","_d","_n","_exists","isLine","exists","equation","canonical","mxh","slope","OA","height","parametric","pmatrix","parseByCoefficient","parseByPointAndVector","has","elem","delete","size","isParellelTo","line","simplifyDirection","intersection","Pt","isParallel","isSame","point","hasIntersection","distanceTo","pt","d2","hitSegment","iPt","canonicalAsFloatCoefficient","window","Pi","ShutingYard","Root","Rational","domain","NumeratorEuclidien","DenominatorEuclidien","R","limits","Logicalset","isLogicalset","tokenSets","reference","referenceSet","varStack","second","first","vennAB","vennABC","Geometry","Triangle","_A","_B","_C","_lines","_middles","_remarquables","isTriangle","AB","getSegment","BA","BC","CB","AC","CA","isRectangle","isEquilateral","isIsocele","lines","remarquables","intersect","_updateTriangle","_calculateRemarquableLines","getPointByName","ptName","toUpperCase","ptName1","ptName2","_calculateBisectors","medians","mediators","heights","bisectors","d1","tlines","b1","b2","Circle","_center","_radius","cx","cy","developed"],"sourceRoot":""}