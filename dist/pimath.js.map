{"version":3,"file":"pimath.js","sources":["../src/numeric.ts","../src/coefficients/fraction.ts","../src/coefficients/nthRoot.ts","../src/algebra/equationSolver.ts","../node_modules/piexpression/dist/piexpression.js","../src/algebra/monom.ts","../src/helpers.ts","../src/algebra/operations.ts","../src/algebra/polynom.ts","../src/algebra/equation.ts","../src/algebra/factor.ts","../src/algebra/linearSystem.ts","../src/algebra/logicalset.ts","../src/algebra/polyFactor.ts","../src/algebra/matrix.ts","../src/geometry/geomMath.ts","../src/geometry/vector.ts","../src/pimath.interface.ts","../src/randomization/rndHelpers.ts","../src/geometry/point.ts","../src/geometry/line.ts","../src/geometry/circle.ts","../src/geometry/line3.ts","../src/geometry/plane3.ts","../src/geometry/triangle.ts","../src/geometry/sphere3.ts","../src/randomization/coefficient/rndFraction.ts","../src/randomization/algebra/rndMonom.ts","../src/randomization/algebra/rndPolynom.ts","../src/randomization/algebra/rndEquation.ts","../src/randomization/geometry/rndVector.ts","../src/randomization/geometry/rndCircle.ts","../src/randomization/geometry/rndLine.ts","../src/randomization/geometry/rndLine3.ts","../src/randomization/random.ts","../src/index.ts"],"sourcesContent":["\r\nfunction decompose(value: number): number[][] {\r\n    const divs: number[] = dividers(value)\r\n    const arr: number[][] = []\r\n    let u, v\r\n\r\n    while (divs.length > 0) {\r\n        u = divs.shift() ?? 1\r\n        v = (divs.length > 0 ? divs.pop() : +u) ?? 1\r\n\r\n        arr.push([u, v])\r\n    }\r\n\r\n    return arr\r\n}\r\n\r\nfunction divideNumbersByGCD(...values: number[]): number[] {\r\n    const g = greatestCommonDivisor(...values)\r\n\r\n    return values.map(x => x / g)\r\n}\r\n\r\n/**\r\n * Get the list of all dividers of a number.\r\n * @param value\r\n */\r\nfunction dividers(value: number): number[] {\r\n    const absV = Math.abs(value)\r\n    const maxV = Math.sqrt(absV)\r\n\r\n    // Initialize the list of dividers.\r\n    const D: number[] = []\r\n\r\n    for (let i = 1; i <= maxV; i++) {\r\n        if (value % i === 0) {\r\n            D.push(i)\r\n            D.push(absV / i)\r\n        }\r\n    }\r\n\r\n    // Order numbers.\r\n    D.sort(function (a, b) {\r\n        return a - b\r\n    })\r\n\r\n    // Make sure the array of value is unique.\r\n    return [...new Set(D)]\r\n}\r\n\r\n/**\r\n * Great Common Divisor\r\n * @param values : number values\r\n */\r\nfunction greatestCommonDivisor(...values: number[]): number {\r\n    // Define the gcd for two number\r\n    const gcd2 = function (a: number, b: number): number {\r\n        if (b === 0) {\r\n            return a\r\n        }\r\n        return gcd2(b, a % b)\r\n    }\r\n\r\n    let g = 1,\r\n        i = 2\r\n\r\n    // Nothing is given\r\n    if (values.length === 0) {\r\n        return 1\r\n    }\r\n    // Only one number is given\r\n    if (values.length === 1) {\r\n        // The first number is zero\r\n        if (values[0] === 0) {\r\n            return 1\r\n        }\r\n        // Return the number\r\n        return values[0]\r\n    }\r\n\r\n    // We have at least 2 numbers.\r\n    g = gcd2(values[0], values[1])\r\n\r\n    // The gcd of the two first value is one ? It's already finished.\r\n    if (g === 1) {\r\n        return 1\r\n    }\r\n\r\n    // The current gcd isn't one. Continue with all next values.\r\n    for (i = 2; i < values.length; i++) {\r\n        g = gcd2(g, values[i])\r\n        // Escape if gcd is already one.\r\n        if (g === 1) {\r\n            break\r\n        }\r\n    }\r\n\r\n    return Math.abs(g)\r\n}\r\n\r\n/**\r\n * Least Common Multiple\r\n * @param values: list of numbers\r\n */\r\nfunction leastCommonMultiple(...values: number[]): number {\r\n    return values.reduce(function (a, b) {\r\n        return Math.abs(a * b / greatestCommonDivisor(a, b))\r\n    })\r\n}\r\n\r\nfunction numberCorrection(value: number, number_of_digits = 3) {\r\n    return +value.toFixed(number_of_digits)\r\n}\r\n\r\nfunction periodic(value: number): number {\r\n    if (Number.isSafeInteger(value)) {\r\n        return 0\r\n    }\r\n\r\n    // Assume it's with decimal.\r\n    const decimal = (value.toString()).split('.')[0]\r\n\r\n    // The decimal part is limited\r\n    if (decimal.length < 10) {\r\n        return 0\r\n    }\r\n\r\n    // Find the periodic if it exists.\r\n    throw new Error('Periodic value: Not implemented yet')\r\n}\r\n\r\n/**\r\n * Get the list of the nth first prime numbers.\r\n * @param nb : number of primes to choose from\r\n */\r\nfunction primes(nb?: number): number[] {\r\n    const primesValues: number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973]\r\n    if (nb === undefined) {\r\n        return primesValues\r\n    } else {\r\n        return primesValues.slice(0, Math.min(primesValues.length, nb))\r\n    }\r\n}\r\n\r\nfunction pythagoreanTripletsWithTarget(target: number, targetIsSquare?: boolean): number[][] {\r\n    // méthode inverse, à partir du triplet.\r\n    const triplets = [],\r\n        targetValue = targetIsSquare === true ? +target : target ** 2\r\n    for (let u = 0; u <= target; u++) {\r\n        for (let v = 0; v <= target; v++) {\r\n            if (u ** 2 + v ** 2 === targetValue) {\r\n                triplets.push([u, v, target])\r\n            }\r\n        }\r\n    }\r\n\r\n    return triplets\r\n}\r\n\r\nfunction round(value: number, decimals = 2): number {\r\n    const exp: number = Math.round(Number(`${value}e${decimals}`))\r\n\r\n    return Number(`${exp}e-${decimals}`)\r\n}\r\n\r\n\r\nexport const Numeric = {\r\n    decompose,\r\n    dividers,\r\n    divideNumbersByGCD,\r\n    gcd: greatestCommonDivisor,\r\n    lcm: leastCommonMultiple,\r\n    numberCorrection,\r\n    periodic,\r\n    primes,\r\n    pythagoreanTripletsWithTarget,\r\n    round\r\n}","import type {compareSign, IExpression, InputValue, IPiMathObject} from \"../pimath.interface\"\r\nimport {Numeric} from \"../numeric\"\r\n\r\nexport enum FRAC_TYPE {\r\n    frac = 'frac',\r\n    dfrac = 'dfrac',\r\n    tfrac = 'tfrac'\r\n}\r\n\r\n/**\r\n * The fraction class make possible to handle\r\n * \\\\(\\frac{a}{b}\\\\) or \\\\[\\frac{a}{b}\\\\]  values.\r\n */\r\n\r\nexport class Fraction implements IPiMathObject<Fraction>, IExpression<Fraction> {\r\n    #approximative = false\r\n    #denominator = 1\r\n    #numerator = 1\r\n    #type: FRAC_TYPE = FRAC_TYPE.frac\r\n\r\n    constructor()\r\n    constructor(value: InputValue<Fraction>)\r\n    constructor(numerator: number, denominator: number)\r\n    constructor(decimal: number, periodLength: number)\r\n    constructor(value?: InputValue<Fraction>, denominatorOrPeriodic?: number) {\r\n\r\n        if (value !== undefined) {\r\n            this.parse(value, denominatorOrPeriodic)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse the value to get the numerator and denominator\r\n     * @param value : number or string to parse to get the fraction\r\n     * @param denominatorOrPeriodic (optional|number) : length of the periodic part: 2.333333 => 1 or denominator value\r\n     */\r\n    public parse = (value: InputValue<Fraction>, denominatorOrPeriodic?: number): Fraction => {\r\n        let S: string[]\r\n\r\n        // A null value means a zero fraction.\r\n        if (value === \"\") {\r\n            this.#numerator = 0\r\n            this.#denominator = 1\r\n            return this\r\n        }\r\n\r\n        switch (typeof value) {\r\n            case \"string\":\r\n                // Split the string value in two parts: Numerator/Denominator\r\n                S = value.split('/')\r\n\r\n                // Security checks\r\n                if (S.length > 2) {\r\n                    this.#numerator = NaN\r\n                    // throw new Error(`The given value is not a valid fraction (${value})`)\r\n                }\r\n                if (S.map(x => x === '' || isNaN(Number(x))).includes(true)) {\r\n                    this.#numerator = NaN\r\n                    // throw new Error(`The given value is not a valid fraction (${value})`)\r\n                }\r\n\r\n                if (S.length === 1) {\r\n                    // No divide sign - it's a number\r\n                    return this.parse(+S[0])\r\n                } else if (S.length === 2) {\r\n                    // One divide signe\r\n                    // We check if the denominator is zero\r\n                    if (S[1] === '0') {\r\n                        this.#numerator = NaN\r\n                        this.#denominator = 1\r\n                    } else {\r\n                        this.#numerator = +S[0]\r\n                        this.#denominator = +S[1]\r\n                    }\r\n                } else {\r\n                    // More than one divide sign ?\r\n                    // This is not a fraction\r\n                    this.#numerator = NaN\r\n                    this.#denominator = 1\r\n                }\r\n                break\r\n            case \"number\":\r\n                if (Number.isSafeInteger(value)) {\r\n                    // The given value is an integer\r\n                    this.#numerator = +value\r\n\r\n                    if (denominatorOrPeriodic === undefined || !Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this.#denominator = 1\r\n                    } else {\r\n                        this.#denominator = +denominatorOrPeriodic\r\n                    }\r\n                } else {\r\n                    // The given value is a float number\r\n                    // Get the number of decimals after the float sign\r\n                    const [, decimal] = (value.toString()).split('.')\r\n                    const p: number = decimal ? decimal.length : 0\r\n                    const power = Math.pow(10, p)\r\n\r\n                    // Detect if the decimal part is periodic or not...\r\n\r\n                    if (denominatorOrPeriodic === undefined) {\r\n                        // Transform the float number in two integer\r\n                        // 0.123 = 0.123*10^3 / 10^3\r\n                        this.#numerator = value * power\r\n                        this.#denominator = power\r\n                    } else if (Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this.#numerator = value * power - Math.floor(value * Math.pow(10, p - denominatorOrPeriodic))\r\n                        this.denominator = power - Math.pow(10, p - denominatorOrPeriodic)\r\n                    }\r\n\r\n                    this.reduce()\r\n                }\r\n                break\r\n            case \"object\":\r\n                if (value instanceof Fraction) {\r\n                    this.#numerator = +value.numerator\r\n                    this.#denominator = +value.denominator\r\n                }\r\n                break\r\n        }\r\n        return this\r\n    }\r\n\r\n    public clone = (): Fraction => {\r\n        const F = new Fraction()\r\n        F.numerator = +this.#numerator\r\n        F.denominator = +this.#denominator\r\n        return F\r\n    }\r\n\r\n    // Display getter\r\n    public get tex(): string {\r\n        if (this.isInfinity()) {\r\n            return `${this.sign() === 1 ? '+' : '-'}\\\\infty`\r\n        }\r\n\r\n\r\n        if (this.isExact()) {\r\n            if (this.#denominator === 1) {\r\n                return `${this.#numerator}`\r\n            } else if (this.#numerator < 0) {\r\n                return `-\\\\${this.#type}{ ${-this.#numerator} }{ ${this.#denominator} }`\r\n            } else {\r\n                return `\\\\${this.#type}{ ${this.#numerator} }{ ${this.#denominator} }`\r\n            }\r\n        } else {\r\n            return this.value.toFixed(3)\r\n        }\r\n    }\r\n\r\n    public get display(): string {\r\n        if (this.isExact()) {\r\n            if (this.#denominator === 1) {\r\n                return `${this.#numerator}`\r\n            } else {\r\n                return `${this.#numerator}/${this.#denominator}`\r\n            }\r\n        } else {\r\n            return this.value.toFixed(3)\r\n        }\r\n    }\r\n\r\n    public static average = (...fractions: (InputValue<Fraction>)[]): Fraction => {\r\n        const M = new Fraction().zero()\r\n\r\n        for (const f of fractions) {\r\n            M.add(f)\r\n        }\r\n\r\n        M.divide(fractions.length)\r\n\r\n        return M\r\n    }\r\n\r\n    public static isFraction(value: InputValue<Fraction>) {\r\n        if (value instanceof Fraction ||\r\n            (typeof value === \"number\" && !isNaN(value))\r\n        ) {\r\n            return true\r\n        }\r\n\r\n        if(typeof value === \"string\"){\r\n            const [num, den] = value.split('/')\r\n\r\n            return !isNaN(+num) && (den===undefined || !isNaN(+den))\r\n        }\r\n\r\n        return false\r\n\r\n    }\r\n\r\n    public static max = (...fractions: InputValue<Fraction>[]): Fraction => {\r\n        let M = new Fraction(fractions[0])\r\n\r\n        for (const m of fractions) {\r\n            const compare = new Fraction(m)\r\n            if (compare.isGreater(M)) {\r\n                M = compare.clone()\r\n            }\r\n        }\r\n\r\n        return M\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n\r\n    public static min = (...fractions: (InputValue<Fraction>)[]): Fraction => {\r\n        let M = new Fraction(fractions[0])\r\n\r\n        for (const m of fractions) {\r\n            const compare = new Fraction(m)\r\n            if (compare.isLesser(M)) {\r\n                M = compare.clone()\r\n            }\r\n        }\r\n\r\n        return M\r\n    }\r\n\r\n    public static sort = (fractions: (InputValue<Fraction>)[], reverse?: boolean): Fraction[] => {\r\n        const fractionsObject: Fraction[] = fractions.map(f => f instanceof Fraction ? f : new Fraction(f))\r\n\r\n        const sorted = fractionsObject.sort((a, b) => a.value - b.value)\r\n\r\n        if (reverse) {\r\n            sorted.reverse()\r\n        }\r\n\r\n        return sorted\r\n    }\r\n\r\n    public static unique = (fractions: (InputValue<Fraction>)[]): Fraction[] => {\r\n        const unique: Record<string, boolean> = {},\r\n            distinct: Fraction[] = []\r\n\r\n        fractions.forEach(x => {\r\n            if (!(x instanceof Fraction)) {\r\n                x = new Fraction(x)\r\n            }\r\n\r\n            if (!unique[x.clone().reduce().tex]) {\r\n                distinct.push(x.clone())\r\n                unique[x.tex] = true\r\n            }\r\n        })\r\n\r\n        return distinct\r\n    }\r\n\r\n    public static xMultiply = (...values: (InputValue<Fraction>)[]): Fraction => {\r\n        const R = new Fraction()\r\n        // Parse the value.\r\n        // If it's a fraction, return a clone of it\r\n        // If it's an integer, return the fraction F/1\r\n        for (const value of values) {\r\n\r\n            const F = new Fraction(value)\r\n            R.numerator = R.numerator * F.numerator\r\n            R.denominator = R.denominator * F.denominator\r\n        }\r\n\r\n        return R\r\n    }\r\n\r\n    public abs = (): this => {\r\n        this.#numerator = Math.abs(this.#numerator)\r\n        this.#denominator = Math.abs(this.#denominator)\r\n        return this\r\n    }\r\n\r\n    public add = (F: InputValue<Fraction>): Fraction => {\r\n        if (F instanceof Fraction) {\r\n            const N: number = this.#numerator,\r\n                D: number = this.#denominator\r\n\r\n            this.#numerator = N * F.denominator + F.numerator * D\r\n            this.#denominator = D * F.denominator\r\n        } else {\r\n            return this.add(new Fraction(F))\r\n        }\r\n\r\n        return this.reduce()\r\n    }\r\n\r\n    public amplify = (k: number): this => {\r\n        if (Number.isSafeInteger(k)) {\r\n            this.#numerator *= k\r\n            this.#denominator *= k\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Simple function to determine if it's a fraction\r\n     */\r\n    public areEquals = (...F: Fraction[]): boolean => {\r\n        return F.every(f => f.isEqual(F[0]))\r\n    }\r\n\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param F (Coefficient) The coefficient to _compare\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    public compare = (F: InputValue<Fraction>, sign?: compareSign): boolean => {\r\n        sign ??= '='\r\n\r\n        let compareFraction: Fraction\r\n        if (F instanceof Fraction) {\r\n            compareFraction = F.clone()\r\n        } else {\r\n            compareFraction = new Fraction(F)\r\n        }\r\n\r\n        switch (sign) {\r\n            case '>':\r\n                return this.value > compareFraction.value\r\n            case \">=\":\r\n            case \"=>\":\r\n            case \"geq\":\r\n                return this.value >= compareFraction.value\r\n            case \"<\":\r\n                return this.value < compareFraction.value\r\n            case \"<=\":\r\n            case \"=<\":\r\n            case \"leq\":\r\n                return this.value <= compareFraction.value\r\n            case \"=\":\r\n                return this.value === compareFraction.value\r\n            case \"<>\":\r\n                return this.value !== compareFraction.value\r\n            default:\r\n                return false\r\n        }\r\n    }\r\n\r\n    public get denominator(): number {\r\n        return this.#denominator\r\n    }\r\n\r\n    public set denominator(value: number) {\r\n        this.#denominator = value\r\n    }\r\n\r\n    public get dfrac(): this {\r\n        this.#type = FRAC_TYPE.dfrac\r\n        return this\r\n    }\r\n\r\n    public divide = (F: Fraction | number): Fraction => {\r\n        const Q = new Fraction(F)\r\n\r\n        if (Q.numerator === 0) {\r\n            return new Fraction().infinite()\r\n        }\r\n\r\n        const N: number = this.#numerator,\r\n            D: number = this.#denominator\r\n\r\n        this.#numerator = N * Q.denominator\r\n        this.#denominator = D * Q.numerator\r\n        return this.reduce()\r\n    }\r\n\r\n    public get frac(): this {\r\n        this.#type = FRAC_TYPE.frac\r\n        return this\r\n    }\r\n\r\n    public infinite = (): this => {\r\n        this.#numerator = Infinity\r\n        this.#denominator = 1\r\n        return this\r\n    }\r\n\r\n    public invalid = (): this => {\r\n        this.#numerator = NaN\r\n        this.#denominator = 1\r\n        return this\r\n    }\r\n\r\n    public inverse = (): this => {\r\n        const n = +this.#numerator\r\n        this.#numerator = +this.#denominator\r\n        this.#denominator = n\r\n\r\n        return this\r\n    }\r\n\r\n    public isApproximative = (): boolean => {\r\n        return this.#approximative ||\r\n            this.#numerator.toString().length >= 15 && this.#denominator.toString().length >= 15\r\n    }\r\n\r\n    public isEqual = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '=')\r\n    }\r\n\r\n    public isEven = (): boolean => {\r\n        return this.isRelative() && this.value % 2 === 0\r\n    }\r\n\r\n    public isExact = (): boolean => {\r\n        return !this.isApproximative()\r\n    }\r\n\r\n    public isFinite = (): boolean => {\r\n        return !this.isInfinity() && !this.isNaN()\r\n    }\r\n\r\n    public isGeq = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '>=')\r\n    }\r\n\r\n    public isGreater = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '>')\r\n    }\r\n\r\n    public isInfinity = (): boolean => {\r\n        return Math.abs(this.#numerator) === Infinity\r\n    }\r\n\r\n    public isInverted = (p: Fraction): boolean => {\r\n        return this.isEqual(new Fraction().one().divide(p.clone()))\r\n    }\r\n\r\n    public isLeq = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '<=')\r\n    }\r\n\r\n    /* Compare shortcuts */\r\n    public isLesser = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '<')\r\n    }\r\n\r\n    public isNaN = (): boolean => {\r\n        return isNaN(this.#numerator)\r\n    }\r\n\r\n    public isNatural = (): boolean => {\r\n        return this.isRelative() && this.isPositive()\r\n    }\r\n\r\n    public isNegative = (): boolean => {\r\n        return this.sign() === -1\r\n    }\r\n\r\n    public isNegativeOne = (): boolean => {\r\n        return this.#numerator === -1 && this.#denominator === 1\r\n    }\r\n\r\n    // ------------------------------------------\r\n\r\n    public isNotEqual = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '<>')\r\n    }\r\n\r\n    public isNotZero = (): boolean => {\r\n        return this.#numerator !== 0\r\n    }\r\n\r\n    public isOdd = (): boolean => {\r\n        return this.isRelative() && this.value % 2 === 1\r\n    }\r\n\r\n    public isOne = (): boolean => {\r\n        return this.#numerator === 1 && this.#denominator === 1\r\n    }\r\n\r\n    public isOpposite = (p: Fraction): boolean => {\r\n        return this.isEqual(p.clone().opposite())\r\n    }\r\n\r\n    public isPositive = (): boolean => {\r\n        return this.sign() === 1\r\n    }\r\n\r\n    public isRational = (): boolean => {\r\n        return !this.isRelative()\r\n    }\r\n\r\n    public isReduced = (): boolean => {\r\n        return Math.abs(Numeric.gcd(this.#numerator, this.#denominator)) === 1\r\n    }\r\n\r\n    public isRelative = (): boolean => {\r\n        return this.clone().reduce().denominator === 1\r\n    }\r\n\r\n    public isSquare = (): boolean => {\r\n        return Math.sqrt(this.#numerator) % 1 === 0 && Math.sqrt(this.#denominator) % 1 === 0\r\n    }\r\n\r\n    public isStrictlyNegative = (): boolean => {\r\n        return this.value < 0\r\n    }\r\n\r\n    public isStrictlyPositive = (): boolean => {\r\n        return this.value > 0\r\n    }\r\n\r\n    // Mathematical operations specific to fractions\r\n    public isZero = (): boolean => {\r\n        return this.#numerator === 0\r\n    }\r\n\r\n    public multiply = (F: Fraction | number): this => {\r\n        // Parse the value.\r\n        // If it's a fraction, return a clone of it\r\n        // If it's an integer, return the fraction F/1\r\n        const Q = new Fraction(F)\r\n\r\n        this.#numerator = this.#numerator * Q.numerator\r\n        this.#denominator = this.#denominator * Q.denominator\r\n\r\n        return this.reduce()\r\n    }\r\n\r\n    // ------------------------------------------\r\n    public get numerator(): number {\r\n        return this.#numerator\r\n    }\r\n\r\n    public set numerator(value: number) {\r\n        this.#numerator = value\r\n    }\r\n\r\n    public one = (): this => {\r\n        this.#numerator = 1\r\n        this.#denominator = 1\r\n        return this\r\n    }\r\n\r\n    public opposite = (): this => {\r\n        this.#numerator = -this.#numerator\r\n        return this\r\n    }\r\n\r\n    public pow = (p: number | Fraction): Fraction => {\r\n        if (p instanceof Fraction) {\r\n            return this.pow(p.value)\r\n        }\r\n\r\n        this.reduce()\r\n        if (p < 0) {\r\n            this.inverse()\r\n        }\r\n\r\n        // Check if numerator and denominator are roots of...\r\n        // otherwise, convert to numeric.\r\n        const controlNumerator = Math.floor(Math.pow(this.#numerator, Math.abs(p))),\r\n            controlDenominator = Math.floor(Math.pow(this.#denominator, Math.abs(p)))\r\n\r\n        if (controlNumerator ** Math.abs(p) === this.#numerator\r\n            &&\r\n            controlDenominator ** Math.abs(p) === this.#denominator) {\r\n            this.#numerator = this.#numerator ** Math.abs(p)\r\n            this.#denominator = this.#denominator ** Math.abs(p)\r\n        } else {\r\n            this.#numerator = this.#numerator ** Math.abs(p)\r\n            this.#denominator = this.#denominator ** Math.abs(p)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    // ------------------------------------------\r\n    public reduce = (): this => {\r\n        const g = Numeric.gcd(this.#numerator, this.#denominator)\r\n        this.#numerator = this.#numerator / g\r\n        this.#denominator = this.#denominator / g\r\n\r\n        if (this.#denominator < 0) {\r\n            this.#denominator = -this.#denominator\r\n            this.#numerator = -this.#numerator\r\n        }\r\n        return this\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n\r\n    public root = (p: number): this => {\r\n\r\n        // Check if they are perfect roots..\r\n        if (p === 0) {\r\n            return this\r\n        }\r\n\r\n        // If negative, inverse the fraction\r\n        if (p < 0) {\r\n            this.inverse()\r\n        }\r\n\r\n        // if p is not a safe integer, throw error\r\n        if (!Number.isSafeInteger(p)) {\r\n            throw new Error(\"The root must be an integer.\")\r\n        }\r\n\r\n        // if the fraction is negative and the root is even, throw error\r\n        if (this.isNegative() && p % 2 === 0) {\r\n            throw new Error(\"The root of a negative number must be odd.\")\r\n        }\r\n\r\n        // get the sign of the fraction and make it positive\r\n        const sign = this.sign()\r\n        this.abs()\r\n\r\n        // Reduce the fraction\r\n        this.reduce()\r\n\r\n        // Check if numerator and denominator are roots of...\r\n        // otherwise, convert to numeric.\r\n        const controlNumerator = Math.floor(Math.pow(this.#numerator, Math.abs(1 / p))),\r\n            controlDenominator = Math.floor(Math.pow(this.#denominator, Math.abs(1 / p)))\r\n\r\n        this.#numerator = Math.pow(this.#numerator, Math.abs(1 / p))\r\n        this.#denominator = Math.pow(this.#denominator, Math.abs(1 / p))\r\n\r\n        if (controlNumerator !== this.#numerator\r\n            ||\r\n            controlDenominator !== this.#denominator) {\r\n            // The fraction is not a perfect root - make it approximative\r\n            this.#numerator = this.#numerator / this.#denominator\r\n            this.#denominator = 1\r\n            this.#approximative = true\r\n        }\r\n\r\n        // Restore the sign\r\n        this.multiply(sign)\r\n\r\n        return this\r\n    }\r\n\r\n    public sign = (): number => {\r\n        return (this.#numerator * this.#denominator >= 0) ? 1 : -1\r\n    }\r\n\r\n    public sqrt = (): this => {\r\n        return this.root(2)\r\n    }\r\n\r\n    public subtract = (F: Fraction | number): Fraction => {\r\n        if (F instanceof Fraction) {\r\n            return this.add(F.clone().opposite())\r\n        } else {\r\n            return this.add(-F)\r\n        }\r\n    }\r\n\r\n    public get texWithSign(): string {\r\n        return this.isPositive() ? `+${this.tex}` : this.tex\r\n    }\r\n\r\n    public get tfrac(): this {\r\n        this.#type = FRAC_TYPE.tfrac\r\n        return this\r\n    }\r\n\r\n    public get value(): number {\r\n        const result = this.#numerator / this.#denominator\r\n        return result === 0 ? 0 : result\r\n    }\r\n\r\n    public zero = (): this => {\r\n        this.#numerator = 0\r\n        this.#denominator = 1\r\n        return this\r\n    }\r\n}","// TODO: Remove NthRoot class\r\n/**\r\n * NthRoot is something like \"a+b\\sqrt{3}\r\n */\r\nexport class NthRoot {\r\n    #radical: number\r\n    #nth: number\r\n    #coefficient: number\r\n    #isValid: boolean\r\n\r\n    constructor(...values: number[]) {\r\n        this.#radical = 1\r\n        this.#coefficient = 1\r\n        this.#nth = 2\r\n        this.#isValid = true\r\n\r\n        if (values.length > 0) {\r\n            this.parse(values[0], values[1], values[2])\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get radical(): number {\r\n        return this.#radical\r\n    }\r\n\r\n    set radical(value: number) {\r\n        this.#radical = value\r\n    }\r\n\r\n    get nth(): number {\r\n        return this.#nth\r\n    }\r\n\r\n    set nth(value: number) {\r\n        if (Number.isSafeInteger(value) && value >= 2) {\r\n            this.#nth = value\r\n        } else {\r\n            // Error setting the nth root.\r\n            console.log('Error setting the nth root')\r\n            this.#nth = 2\r\n        }\r\n    }\r\n\r\n    get coefficient(): number {\r\n        return this.#coefficient\r\n    }\r\n\r\n    set coefficient(value: number) {\r\n        this.#coefficient = value\r\n    }\r\n\r\n    get tex(): string {\r\n        let C: string\r\n\r\n        if (this.#coefficient === 1) {\r\n            C = ''\r\n        } else if (this.#coefficient === -1) {\r\n            C = '-'\r\n        } else {\r\n            C = this.#coefficient.toString()\r\n        }\r\n\r\n        if (this.#radical === 1) {\r\n            return `${this.#coefficient}`\r\n        } else {\r\n            if (this.#nth === 2) {\r\n                return `${C}\\\\sqrt{${this.#radical}}`\r\n            } else {\r\n                return `${C}\\\\sqrt[${this.#nth}]{${this.#radical}}`\r\n            }\r\n        }\r\n    }\r\n\r\n    get display(): string {\r\n        let C: string\r\n\r\n        if (this.#coefficient === 1) {\r\n            C = ''\r\n        } else if (this.#coefficient === -1) {\r\n            C = '-'\r\n        } else {\r\n            C = this.#coefficient.toString()\r\n        }\r\n\r\n        if (this.#radical === 1) {\r\n            return `${this.#coefficient}`\r\n        } else {\r\n            if (this.#nth === 2) {\r\n                return `${C}sqrt{${this.#radical}}`\r\n            } else {\r\n                return `${C}root(${this.#nth}){${this.#radical}}`\r\n            }\r\n        }\r\n    }\r\n\r\n    get value(): number {\r\n        return this.#coefficient * Math.pow(this.#radical, 1 / this.#nth)\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (radical: number, nthroot?: number, coefficient?: number): this => {\r\n        this.#coefficient = coefficient ?? 1\r\n        this.#nth = nthroot ?? 2\r\n        this.#radical = radical\r\n\r\n        if (this.#nth % 2 === 0 && this.#radical < 0) {\r\n            this.#isValid = false\r\n        }\r\n        return this\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    reduce = (): this => {\r\n        // Max value to test.\r\n        let V = Math.floor(Math.pow(this.#radical, 1 / this.#nth))\r\n        while (V > 1) {\r\n            if (this.#radical % Math.pow(V, this.#nth) === 0) {\r\n                // It's dividable by V^n\r\n                this.#coefficient *= V\r\n                this.#radical = this.#radical / Math.pow(V, this.#nth)\r\n\r\n                // Redifine the new testing value (this is optimization)\r\n                V = Math.floor(Math.pow(this.#radical, 1 / this.#nth))\r\n                continue\r\n            }\r\n            V--\r\n        }\r\n        return this\r\n    }\r\n\r\n    multiply = (N: NthRoot): this => {\r\n        this.#radical *= N.radical\r\n        return this.reduce()\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Help functions\r\n    // ------------------------------------------\r\n    hasRadical = (): boolean => {\r\n        return !(this.#radical === 1 || this.#radical === 0 || !this.#isValid)\r\n    }\r\n}","import type {InputValue, ISolution} from \"../pimath.interface\"\r\nimport type {Polynom} from \"./polynom\"\r\nimport {Fraction} from \"../coefficients\"\r\nimport {Numeric} from \"../numeric\"\r\nimport type {Equation} from \"./equation\"\r\n\r\nexport class EquationSolver {\r\n    readonly #leftPolynom: Polynom\r\n    readonly #variable: string\r\n\r\n    constructor(left: Polynom | Equation, right?: Polynom, variable = \"x\") {\r\n        this.#variable = variable\r\n\r\n        if (Object.hasOwn(left, 'moveLeft')) {\r\n            const equ = left as Equation\r\n            this.#leftPolynom = equ.left.clone().subtract(equ.right)\r\n        } else {\r\n            this.#leftPolynom = (left as Polynom).clone().subtract(right ?? 0)\r\n        }\r\n    }\r\n\r\n    public solve(): ISolution[] {\r\n        const degree = this.#leftPolynom.degree().value\r\n\r\n        if (degree === 0) {\r\n            return []\r\n        }\r\n\r\n        if (degree === 1) {\r\n            return this.#solveLinear()\r\n        }\r\n\r\n        if (degree === 2) {\r\n            return this.#solveQuadratic()\r\n        }\r\n\r\n        // TODO: doit gérer le fait que si on a trouvé des solutions, on peut réduire avant de faire la bissection\r\n        // Try to solve by factorization -> exact solutions.\r\n        const {solutions, polynom} = this.#solveByFactorization()\r\n\r\n        // The remaining polynom is of degree zero. No more solutions available.\r\n        if (polynom.degree().isZero()) {\r\n            return solutions\r\n        }\r\n\r\n        // Use approximative solutions, using bissection algorithm.\r\n        return solutions.concat(\r\n            this.#solveByBissection(polynom)\r\n        ).sort((a, b) => a.value - b.value)\r\n    }\r\n\r\n    public solveAsCardan(): ISolution[] {\r\n        if (this.#leftPolynom.degree().value !== 3) {\r\n            throw new Error(\"The equation is not cubic.\")\r\n        }\r\n        return this.#solveCubic_CardanFormula()\r\n    }\r\n\r\n    #makeApproximativeSolution(value: number, output?: { tex: string, display: string }): ISolution {\r\n        return {\r\n            variable: this.#variable,\r\n            exact: false,\r\n            value: +value.toFixed(10),\r\n            tex: output?.tex ?? '',\r\n            display: output?.display ?? ''\r\n        }\r\n    }\r\n\r\n    #makeSolution(value: InputValue<Fraction>): ISolution {\r\n        if (value instanceof Fraction && value.isApproximative()) {\r\n            return this.#makeApproximativeSolution(value.value)\r\n        }\r\n\r\n        const fraction = new Fraction(value)\r\n        return {\r\n            variable: this.#variable,\r\n            exact: fraction,\r\n            value: fraction.value,\r\n            tex: fraction.tex,\r\n            display: fraction.display\r\n        }\r\n    }\r\n\r\n    #solveByBissection(polynom: Polynom): ISolution[] {\r\n        const solutions: ISolution[] = []\r\n        const degree = polynom.degree().value\r\n        const coeffs = polynom.getCoefficients().map(x => x.value)\r\n\r\n        // Calculate the Cauchy Bounds.\r\n        const [a, ...values] = polynom.getCoefficients()\r\n        const B = 2 + Math.max(...values.map(x => x.value / a.value))\r\n\r\n        // Cut the [-B;B] interval in *n* parts\r\n\r\n        // Calculate the value at each points\r\n        const evaluatedPoints = this.#solveByBissection_evaluatePoints(polynom, B, 100)\r\n\r\n        // Check if there is a least n opposite couples\r\n        const couples = this.#solveByBissection_getCouples(evaluatedPoints, degree)\r\n\r\n        // All solutions fund !\r\n        couples.forEach(couple => {\r\n            const [a, b] = couple\r\n\r\n            if (a === b) {\r\n                // Exact solution\r\n                solutions.push(this.#makeSolution(a))\r\n            } else {\r\n                const bissection = this.#solveByBissection_algorithm(polynom, coeffs, a, b)\r\n                if (bissection !== null) {\r\n                    solutions.push(this.#makeApproximativeSolution(bissection))\r\n                }\r\n            }\r\n        })\r\n\r\n        return solutions\r\n    }\r\n\r\n    #solveByBissection_algorithm(polynom: Polynom, coeffs: number[], a: number, b: number, tol = 1e-10): number | null {\r\n        let fa = polynom.evaluate(a, true) as number\r\n        let fb = polynom.evaluate(b, true) as number\r\n\r\n        if (fa * fb > 0) {\r\n            console.log(\"Pas de racine dans l'intervalle donné\")\r\n            return null\r\n        }\r\n\r\n        let mid: number\r\n        while ((b - a) / 2 > tol) {\r\n            mid = (a + b) / 2\r\n            const fmid = polynom.evaluate(mid, true) as number\r\n\r\n            if (fmid === 0) {\r\n                return mid // racine exacte trouvée\r\n            } else if (fa * fmid < 0) {\r\n                b = mid\r\n                fb = fmid\r\n            } else {\r\n                a = mid\r\n                fa = fmid\r\n            }\r\n        }\r\n        return (a + b) / 2 // retourner la racine approximative\r\n    }\r\n\r\n    #solveByBissection_evaluatePoints(polynom: Polynom, bounds: number, slice: number): { x: number, fx: number }[] {\r\n\r\n        const evaluatedPoints: { x: number, fx: number }[] = []\r\n\r\n        const dx = 2 * bounds / slice\r\n\r\n        for (let searchValue = -bounds; searchValue <= bounds; searchValue += dx) {\r\n\r\n            const x = Numeric.numberCorrection(searchValue)\r\n            evaluatedPoints.push(\r\n                {\r\n                    x,\r\n                    fx: polynom.evaluate(x, true) as number\r\n                }\r\n            )\r\n        }\r\n\r\n        return evaluatedPoints\r\n    }\r\n\r\n    #solveByBissection_getCouples(evaluatedPoints: { x: number, fx: number }[], degree: number): [number, number][] {\r\n        const couples: [number, number][] = []\r\n\r\n        for (let index = 1; index < evaluatedPoints.length; index++) {\r\n\r\n            const value = evaluatedPoints[index]\r\n            const previous = evaluatedPoints[index - 1]\r\n\r\n            if (value.fx === 0) {\r\n                // exact value\r\n                couples.push([value.x, value.x])\r\n            } else if (value.fx * previous.fx < 0) {\r\n                // both evaluated expression are of opposite sign.\r\n                couples.push([previous.x, value.x])\r\n            }\r\n\r\n            if (couples.length === degree) {\r\n                // All couples are found.\r\n                return couples\r\n            }\r\n        }\r\n\r\n        return couples\r\n    }\r\n\r\n    #solveByFactorization(): { solutions: ISolution[], polynom: Polynom } {\r\n        // Move everything to the left.\r\n\r\n        // Get the polynom on the left (on the right, it's zero)\r\n        const left = this.#leftPolynom.clone()\r\n\r\n        // The solutions of the equation\r\n        const solutions: ISolution[] = []\r\n\r\n        // multiply by the lcm of the denominators\r\n        // to get rid of the fractions\r\n        const lcm = left.lcmDenominator()\r\n        if (lcm !== 1) {\r\n            left.multiply(lcm)\r\n        }\r\n\r\n        // alternative method : if there is no monom of degree zero.\r\n        // - get the monom with the smallest degree.\r\n        // - if degree>0, divide by x^{degree}\r\n        const a = left.monomByDegree().coefficient\r\n        const b = left.monomByDegree(0).coefficient\r\n        if (b.isZero()) {\r\n            solutions.push(this.#makeSolution(0))\r\n\r\n            const m = left.monoms.reduce((min, curr) => curr.degree().value < min.degree().value ? curr : min)\r\n            const k = m.coefficient\r\n            m.clone().divide(k) // make the monom unit\r\n            left.divide(m)\r\n        }\r\n\r\n        // get all dividers of a and b\r\n        const dividersA = Numeric.dividers(a.value)\r\n        const dividersB = Numeric.dividers(b.value)\r\n\r\n        // gel all possible solutions\r\n        const testingSolutions: Fraction[] = []\r\n        for (const da of dividersA) {\r\n            for (const db of dividersB) {\r\n                const f = new Fraction(db, da)\r\n                if (!testingSolutions.find(s => s.value === f.value)) {\r\n                    testingSolutions.push(f.clone())\r\n                    testingSolutions.push(f.opposite().clone())\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        // Each value in testingSolutions are \"unique\" -> juste test them to see if it evaluates to zero.\r\n        testingSolutions.forEach(f => {\r\n            if ((left.evaluate(f) as Fraction).isZero()) {\r\n                solutions.push(this.#makeSolution(f))\r\n            }\r\n        })\r\n\r\n        // divide the left polynom by the solutions (as polynom)\r\n        // to get the reduced polynom\r\n        for (const s of solutions) {\r\n            // all solutions are exact solutions.\r\n            // skip the zero solutions if it exists.\r\n            if ((s.exact as Fraction).isZero()) {\r\n                continue\r\n            }\r\n\r\n            // // if the solution is exact and is zero, it's already divided: skip it !\r\n            // if (s.exact !== false && (s.exact as Fraction).isZero()) {\r\n            //     continue\r\n            // }\r\n\r\n            const p = left.clone().fromCoefficients(\r\n                (s.exact as Fraction).denominator,\r\n                -(s.exact as Fraction).numerator\r\n            )\r\n\r\n            // const p = this.#equation.clone().parse('x', (s.exact as Fraction).denominator, -(s.exact as Fraction).numerator)\r\n\r\n            while (left.isDividableBy(p)) {\r\n                left.divide(p)\r\n            }\r\n        }\r\n\r\n        // if the reduced polynom is of degree 0, we have found all the solutions\r\n        // if the reduced polynom is of degree greater than 3, we can't solve it\r\n        if (left.degree().isZero() || left.degree().value > 3) {\r\n            // Tri des réponses\r\n            solutions.sort((a, b) => a.value - b.value)\r\n            return {solutions, polynom: left}\r\n        }\r\n\r\n        // if the reduced polynom is of degree 1 or 2, we can solve it\r\n        const zeroPolynom = left.clone().zero()\r\n\r\n        const solver = new EquationSolver(left, zeroPolynom, this.#variable)\r\n        return {\r\n            solutions: solutions\r\n                .concat(solver.solve())\r\n                .sort((a, b) => a.value - b.value),\r\n            polynom: zeroPolynom\r\n        }\r\n    }\r\n\r\n    #solveCubic_CardanFormula(): ISolution[] {\r\n        // get the coefficients of the equation\r\n        const left = this.#leftPolynom\r\n\r\n        // left is a polynom ax^3+bx^2+cx+d => the solution is x = (-b±√(b^2-4ac))/2a\r\n        const a = left.monomByDegree(3).coefficient\r\n        const b = left.monomByDegree(2).coefficient\r\n        const c = left.monomByDegree(1).coefficient\r\n        const d = left.monomByDegree(0).coefficient\r\n\r\n        // normalize the coefficient by dividing by a\r\n        const an = b.clone().divide(a)\r\n        const bn = c.clone().divide(a)\r\n        const cn = d.clone().divide(a)\r\n\r\n        // Depressed cubic equation\r\n        // x^3+px+q=0\r\n        const p = bn.clone().subtract(an.clone().pow(2).divide(3))\r\n        const q = cn.clone()\r\n            .subtract(an.clone().multiply(bn).divide(3))\r\n            .add(an.clone().pow(3).multiply(2).divide(27))\r\n\r\n\r\n        // Cardan method\r\n        // X^2 + qX - p^3/27 = 0\r\n        // X^2 -SX + P = 0\r\n        // S = u^3 + v^3 = -q\r\n        // P = u^3v^3 = -p^3/27\r\n        // u^3 and v^3 are the roots of the equation\r\n        const S = q.clone().opposite()\r\n        const P = p.clone().opposite().pow(3).divide(27)\r\n\r\n        // Discriminant : delta = -(S^2 - 4P)\r\n        // delta < 0 : 1 real solution\r\n        // delta = 0 : 2 real solutions\r\n        // delta > 0 : 3 real solutions\r\n        const delta = S.clone().pow(2).subtract(P.clone().multiply(4)).opposite()\r\n        // console.log('an=', an.display, 'bn=', bn.display, 'cn=', cn.display)\r\n        // console.log('p=', p.display, 'q=', q.display)\r\n        // console.log('S=', S.display, 'P=', P.display)\r\n        // console.log('delta=', delta.display)\r\n\r\n        // if delta is negative, there is one real solution\r\n        if (delta.isNegative()) {\r\n            const u = q.clone().opposite().add(delta.clone().opposite().sqrt()).divide(2).root(3)\r\n            const v = q.clone().opposite().subtract(delta.clone().opposite().sqrt()).divide(2).root(3)\r\n\r\n            const x = u.clone().add(v).subtract(an.clone().divide(3))\r\n\r\n            return [this.#makeSolution(x)]\r\n        }\r\n\r\n        // if delta is zero, there are two real solutions\r\n        if (delta.isZero()) {\r\n            const u = q.clone().opposite().divide(2).root(3)\r\n\r\n            const x1 = u.clone().opposite().subtract(an.clone().divide(3))\r\n            const x2 = u.clone().multiply(2).subtract(an.clone().divide(3))\r\n\r\n            // There is only one unique solution\r\n            if (x1.isEqual(x2)) {\r\n                return [this.#makeSolution(x1)]\r\n            }\r\n\r\n            return [\r\n                this.#makeSolution(x2),\r\n                this.#makeSolution(x1)\r\n            ].sort((a, b) => a.value - b.value)\r\n        }\r\n\r\n        // if delta is positive, there are three real solutions\r\n        if (delta.isPositive()) {\r\n            const x: number[] = []\r\n            const pv = p.value,\r\n                qv = q.value,\r\n                anv = an.value\r\n\r\n            for (let i = 0; i < 3; i++) {\r\n                x.push(2 * Math.sqrt(-pv / 3) * Math.cos(Math.acos(3 * qv / (2 * pv) * Math.sqrt(-3 / pv)) / 3 + 2 * Math.PI * i / 3) - anv / 3)\r\n            }\r\n\r\n            return x\r\n                .map(v => this.#makeApproximativeSolution(v))\r\n                .sort((a, b) => a.value - b.value)\r\n\r\n        }\r\n\r\n        return []\r\n    }\r\n\r\n    #solveLinear(): ISolution[] {\r\n        // The equation is linear.\r\n        const [a, b] = this.#leftPolynom.getCoefficients()\r\n\r\n        // left is a polynom ax+b => the solution is x = -b/a\r\n        const f = b.opposite().divide(a)\r\n\r\n        return [\r\n            this.#makeSolution(f)\r\n        ]\r\n    }\r\n\r\n    #solveQuadratic(): ISolution[] {\r\n\r\n        // The equation is quadratic.\r\n        // We can solve it by isolating the variable.\r\n\r\n        // The monom with greatest degree must be positive.\r\n        const left = this.#leftPolynom\r\n        if(left.monomByDegree().coefficient.isNegative()){\r\n            left.opposite()\r\n        }\r\n\r\n        // left is a polynom ax^2+bx+c => the solution is x = (-b±√(b^2-4ac))/2a\r\n        const [a, b, c] = left.getCoefficients()\r\n\r\n        // delta2 = b^2-4ac\r\n        const delta2 = b.clone().pow(2).subtract(a.clone().multiply(c).multiply(4))\r\n\r\n        // if delta2 is negative, there is no solution\r\n        if (delta2.isNegative()) {\r\n            return []\r\n        }\r\n\r\n        // if delta2 is zero, there is one solution\r\n        // if delta2 is positive, there are two solutions\r\n        // if delta2 is a square, it will be an exact solution.\r\n\r\n        if (delta2.isSquare()) {\r\n            // delta is a fraction.\r\n            // the solutions are (-b±√(b^2-4ac))/2a\r\n            const delta = delta2.sqrt()\r\n            const f1 = b.clone().opposite().subtract(delta).divide(a.clone().multiply(2))\r\n            const f2 = b.clone().opposite().add(delta).divide(a.clone().multiply(2))\r\n\r\n            // Delta is zero, there is only one solution\r\n            if (delta.isZero()) {\r\n                return [this.#makeSolution(f1)]\r\n            }\r\n\r\n            // delta is positive, there are two solutions\r\n            return [\r\n                this.#makeSolution(f1),\r\n                this.#makeSolution(f2)\r\n            ].sort((a, b) => a.value - b.value)\r\n        }\r\n\r\n        // delta is not a square, there are one or two approximative solutions.\r\n        // We will use the approximate value of the square root.\r\n        // const delta = delta2.value ** 0.5\r\n        // const f1 = (-b.value + delta) / (2 * a.value)\r\n        // const f2 = (-b.value - delta) / (2 * a.value)\r\n\r\n        return this.#solveQuadratic_Output(a, b, delta2)\r\n    }\r\n\r\n    #solveQuadratic_Output(a: Fraction, b: Fraction, delta: Fraction): ISolution[] {\r\n        // -b +/- sqrt(delta) / 2a\r\n        // reduce the sqrt - extract pow.\r\n\r\n        // Get the greatest square factor\r\n        const deltaFactor: number = Numeric\r\n            .dividers(delta.value)\r\n            .filter(x => Math.sqrt(x) % 1 === 0)\r\n            .map(x => Math.sqrt(x)).pop() ?? 1\r\n\r\n        // Get the GCD of a, b, and the greatest delta factor.\r\n        const gcd = Numeric.gcd(2 * a.value, b.value, deltaFactor) * (a.isNegative() ? -1 : 1)\r\n\r\n        // Calculate the various values and transforming\r\n        const b2 = b.clone().divide(gcd).opposite()\r\n        const a2 = a.clone().divide(gcd).multiply(2)\r\n        const delta2 = delta.clone().divide(deltaFactor ** 2)\r\n        const deltaGcd = Math.abs(deltaFactor / gcd)\r\n        const deltaK1 = deltaFactor === 1 ? '-' : `-${deltaGcd} `\r\n        const deltaK2 = deltaFactor === 1 ? '+' : `+${deltaGcd} `\r\n\r\n        function texOutput(a: string, b: string, k: string, delta: string) {\r\n            return `\\\\frac{ ${b} ${k}\\\\sqrt{ ${delta} } }{ ${a} }`\r\n        }\r\n\r\n        function displayOutput(a: string, b: string, k: string, delta: string) {\r\n            return `(${b}${k}sqrt(${delta}))/${a}`\r\n        }\r\n\r\n        const d = delta.value ** 0.5\r\n        const f1 = (-b.value - d) / (2 * a.value)\r\n        const f2 = (-b.value + d) / (2 * a.value)\r\n\r\n        return [\r\n            this.#makeApproximativeSolution(f1,\r\n                {\r\n                    tex: texOutput(a2.tex, b2.tex, deltaK1, delta2.tex),\r\n                    display: displayOutput(a2.display, b2.display, deltaK1, delta2.display),\r\n                }\r\n            ),\r\n            this.#makeApproximativeSolution(f2,\r\n                {\r\n                    tex: texOutput(a2.tex, b2.tex, deltaK2, delta2.tex),\r\n                    display: displayOutput(a2.display, b2.display, deltaK2, delta2.display),\r\n                }\r\n            )\r\n        ].sort((a, b) => a.value - b.value)\r\n    }\r\n}\r\n","var _ = Object.defineProperty;\nvar C = (n) => {\n  throw TypeError(n);\n};\nvar b = (n, s, e) => s in n ? _(n, s, { enumerable: !0, configurable: !0, writable: !0, value: e }) : n[s] = e;\nvar A = (n, s, e) => b(n, typeof s != \"symbol\" ? s + \"\" : s, e), P = (n, s, e) => s.has(n) || C(\"Cannot \" + e);\nvar h = (n, s, e) => (P(n, s, \"read from private field\"), e ? e.call(n) : s.get(n)), d = (n, s, e) => s.has(n) ? C(\"Cannot add the same private member more than once\") : s instanceof WeakSet ? s.add(n) : s.set(n, e), N = (n, s, e, c) => (P(n, s, \"write to private field\"), c ? c.call(n, e) : s.set(n, e), e);\nconst v = {\n  pi: Math.PI,\n  e: Math.exp(1)\n};\nvar t = /* @__PURE__ */ ((n) => (n.VARIABLE = \"variable\", n.COEFFICIENT = \"coefficient\", n.OPERATION = \"operation\", n.CONSTANT = \"constant\", n.FUNCTION = \"function\", n.FUNCTION_ARGUMENT = \"function-argument\", n.MONOM = \"monom\", n.LEFT_PARENTHESIS = \"(\", n.RIGHT_PARENTHESIS = \")\", n))(t || {}), k = /* @__PURE__ */ ((n) => (n.EXPRESSION = \"expression\", n.POLYNOM = \"polynom\", n.SET = \"set\", n.NUMERIC = \"numeric\", n))(k || {});\nfunction F(n, s) {\n  if (n.length <= 1)\n    return n;\n  const e = Object.keys(s).filter((a) => s[a].type === t.FUNCTION).map((a) => a);\n  e.sort((a, O) => O.length - a.length);\n  const c = new RegExp(`^(${e.join(\"|\")})\\\\(`), i = Object.keys(v);\n  i.sort((a, O) => O.length - a.length);\n  const o = new RegExp(`^(${i.join(\"|\")})`), T = /^(\\d+(\\.\\d+)?)/;\n  let f = \"\", R, r, p;\n  for (; n.length > 0; ) {\n    if (R = r, p = void 0, e.length > 0 && c.exec(n)) {\n      const a = e.find((O) => n.startsWith(O));\n      a && (p = a + \"(\", n = n.slice(a.length + 1), r = t.FUNCTION);\n    } else if (i.length > 0 && o.exec(n)) {\n      const a = i.find((O) => n.startsWith(O));\n      a && (p = a, n = n.slice(a.length), r = t.CONSTANT);\n    } else if (T.exec(n)) {\n      const a = T.exec(n);\n      a && (p = a[0], n = n.slice(a[0].length), r = t.COEFFICIENT);\n    } else\n      switch (p = n[0], n = n.slice(1), p) {\n        case \"(\":\n          r = t.LEFT_PARENTHESIS;\n          break;\n        case \")\":\n          r = t.RIGHT_PARENTHESIS;\n          break;\n        case \",\":\n          r = t.FUNCTION_ARGUMENT;\n          break;\n        case \"+\":\n        case \"-\":\n        case \"*\":\n        case \"/\":\n        case \"^\":\n          r = t.OPERATION;\n          break;\n        default:\n          r = t.VARIABLE;\n      }\n    if (p === void 0 || r === void 0)\n      throw new Error(\"The token is undefined\");\n    f += w(R, r), f += p;\n  }\n  return f;\n}\nfunction w(n, s) {\n  return n === void 0 || n === t.OPERATION || s === t.OPERATION || n === t.LEFT_PARENTHESIS || n === t.FUNCTION || n === t.FUNCTION_ARGUMENT || s === t.RIGHT_PARENTHESIS || s === t.FUNCTION_ARGUMENT ? \"\" : \"*\";\n}\nconst U = {\n  \"^\": { precedence: 4, associative: \"right\", type: t.OPERATION },\n  \"*\": { precedence: 3, associative: \"left\", type: t.OPERATION },\n  \"/\": { precedence: 3, associative: \"left\", type: t.OPERATION },\n  \"+\": { precedence: 2, associative: \"left\", type: t.OPERATION },\n  \"-\": { precedence: 2, associative: \"left\", type: t.OPERATION }\n}, y = {\n  \"^\": { precedence: 4, associative: \"right\", type: t.OPERATION },\n  \"*\": { precedence: 3, associative: \"left\", type: t.OPERATION },\n  \"/\": { precedence: 3, associative: \"left\", type: t.OPERATION },\n  \"+\": { precedence: 2, associative: \"left\", type: t.OPERATION },\n  \"-\": { precedence: 2, associative: \"left\", type: t.OPERATION },\n  \"%\": { precedence: 3, associative: \"right\", type: t.OPERATION },\n  sin: { precedence: 4, associative: \"right\", type: t.FUNCTION },\n  cos: { precedence: 4, associative: \"right\", type: t.FUNCTION },\n  tan: { precedence: 4, associative: \"right\", type: t.FUNCTION },\n  sqrt: { precedence: 4, associative: \"right\", type: t.FUNCTION },\n  nthrt: { precedence: 4, associative: \"right\", type: t.FUNCTION },\n  \",\": { precedence: 2, associative: \"left\", type: t.FUNCTION_ARGUMENT }\n}, S = {\n  \"^\": { precedence: 4, associative: \"right\", type: t.OPERATION },\n  \"*\": { precedence: 3, associative: \"left\", type: t.OPERATION },\n  \"/\": { precedence: 3, associative: \"left\", type: t.OPERATION },\n  \"+\": { precedence: 2, associative: \"left\", type: t.OPERATION },\n  \"-\": { precedence: 2, associative: \"left\", type: t.OPERATION },\n  \"%\": { precedence: 3, associative: \"right\", type: t.OPERATION },\n  sin: { precedence: 4, associative: \"right\", type: t.FUNCTION },\n  cos: { precedence: 4, associative: \"right\", type: t.FUNCTION },\n  tan: { precedence: 4, associative: \"right\", type: t.FUNCTION },\n  sqrt: { precedence: 4, associative: \"right\", type: t.FUNCTION },\n  nthrt: { precedence: 4, associative: \"right\", type: t.FUNCTION },\n  ln: { precedence: 4, associative: \"right\", type: t.FUNCTION },\n  log: { precedence: 4, associative: \"right\", type: t.FUNCTION }\n}, M = {\n  \"&\": { precedence: 3, associative: \"left\", type: t.OPERATION },\n  \"|\": { precedence: 3, associative: \"left\", type: t.OPERATION },\n  \"!\": { precedence: 4, associative: \"right\", type: t.OPERATION },\n  \"-\": { precedence: 2, associative: \"left\", type: t.OPERATION }\n};\nvar I, u, l, g, E;\nclass V {\n  constructor(s) {\n    d(this, I);\n    d(this, u, []);\n    d(this, l, {});\n    d(this, g, []);\n    d(this, E);\n    N(this, I, typeof s > \"u\" ? k.POLYNOM : s), this.tokenConfigInitialization();\n  }\n  // Getter\n  get rpn() {\n    return h(this, u);\n  }\n  get rpnToken() {\n    return h(this, u).map((s) => s.token);\n  }\n  tokenConfigInitialization() {\n    return h(this, I) === k.SET ? (N(this, l, M), N(this, E, !1)) : h(this, I) === k.NUMERIC ? (N(this, l, S), N(this, E, !0)) : h(this, I) === k.EXPRESSION ? (N(this, l, y), N(this, E, !0)) : (N(this, l, U), N(this, E, !0)), N(this, g, Object.keys(h(this, l)).sort((s, e) => e.length - s.length)), h(this, l);\n  }\n  /**\n   * Get the next token to analyse.\n   * @param expr (string) Expression to analyse\n   * @param start (number) CUrrent position in the expr string.\n   */\n  NextToken(s, e) {\n    let c, i;\n    if (c = \"\", i = void 0, s[e] === \"(\")\n      c = \"(\", i = t.LEFT_PARENTHESIS;\n    else if (s[e] === \")\")\n      c = \")\", i = t.RIGHT_PARENTHESIS;\n    else if (s[e] === \",\")\n      c = \",\", i = t.FUNCTION_ARGUMENT;\n    else {\n      for (const o of h(this, g))\n        if (s.substring(e, e + o.length) === o) {\n          c += o, i = h(this, l)[o].type;\n          break;\n        }\n      for (const o in v)\n        if (s.substring(e, e + o.length) === o) {\n          c += o, i = t.CONSTANT;\n          break;\n        }\n      if (c === \"\")\n        if (/[0-9.]/.exec(s[e])) {\n          const o = /^([0-9.]+)/.exec(s.substring(e));\n          c = o ? o[0] : \"\", i = t.COEFFICIENT;\n        } else if (/[a-zA-Z]/.exec(s[e])) {\n          const o = /^([a-zA-Z])/.exec(s.substring(e));\n          c = o ? o[0] : \"\", i = t.VARIABLE;\n        } else\n          console.log(\"Unidentified token\", s[e], s, e), c = s[e], i = t.MONOM;\n    }\n    if (i === void 0)\n      throw new Error(`Token type is undefined for token ${c}`);\n    return [c, e + c.length, i];\n  }\n  /**\n   * Parse an expression using the shutting yard tree algorithms\n   * @param expr (string) Expression to analyse\n   * Returns a RPN list of items.\n   * @param uniformize\n   */\n  parse(s, e) {\n    const c = [], i = [];\n    let o = \"\", T = 0, f;\n    (e ?? h(this, E)) && (s = F(s, h(this, l)));\n    let R = 50, r;\n    for (; T < s.length; ) {\n      if (R--, R === 0) {\n        console.log(\"SECURITY LEVEL 1 EXIT\");\n        break;\n      }\n      switch ([o, T, f] = this.NextToken(s, T), f) {\n        case t.MONOM:\n        case t.COEFFICIENT:\n        case t.VARIABLE:\n        case t.CONSTANT:\n          c.push({\n            token: o,\n            tokenType: f\n          });\n          break;\n        case t.OPERATION:\n          if (i.length > 0) {\n            let p = i[i.length - 1];\n            for (r = 50; p.token in h(this, l) && //either o1 is left-associative and its precedence is less than or equal to that of o2,\n            (h(this, l)[o].associative === \"left\" && h(this, l)[o].precedence <= h(this, l)[p.token].precedence || //or o1 is right associative, and has precedence less than that of o2,\n            h(this, l)[o].associative === \"right\" && h(this, l)[o].precedence < h(this, l)[p.token].precedence); ) {\n              if (r--, r === 0) {\n                console.log(\"SECURITY LEVEL 2 OPERATION EXIT\");\n                break;\n              }\n              if (c.push(i.pop() ?? { token: \"\", tokenType: t.OPERATION }), i.length === 0)\n                break;\n              p = i[i.length - 1];\n            }\n          }\n          i.push({ token: o, tokenType: f });\n          break;\n        case t.FUNCTION_ARGUMENT:\n          for (r = 50; i[i.length - 1].token !== \"(\" && i.length > 0; ) {\n            if (r--, r === 0) {\n              console.log(\"SECURITY LEVEL 2 FUNCTION ARGUMENT EXIT\");\n              break;\n            }\n            c.push(i.pop() ?? { token: o, tokenType: f });\n          }\n          break;\n        case t.LEFT_PARENTHESIS:\n          i.push({ token: o, tokenType: f }), s[T] === \"-\" && c.push({ token: \"0\", tokenType: t.COEFFICIENT });\n          break;\n        case t.RIGHT_PARENTHESIS:\n          for (r = 50; i[i.length - 1].token !== \"(\" && i.length > 1; ) {\n            if (r--, r === 0) {\n              console.log(\"SECURITY LEVEL 2 CLOSING PARENTHESIS EXIT\");\n              break;\n            }\n            c.push(i.pop() ?? { token: o, tokenType: f });\n          }\n          i.pop();\n          break;\n        case t.FUNCTION:\n          i.push({ token: o, tokenType: f });\n          break;\n        default:\n          throw new Error(`Token type ${o} is not handled`);\n      }\n    }\n    return N(this, u, c.concat(i.reverse())), this;\n  }\n}\nI = new WeakMap(), u = new WeakMap(), l = new WeakMap(), g = new WeakMap(), E = new WeakMap();\nclass m {\n  constructor(s, e) {\n    A(this, \"_rpn\");\n    A(this, \"_expression\");\n    A(this, \"_isValid\");\n    this._expression = s;\n    try {\n      this._rpn = new V(k.NUMERIC).parse(s, e).rpn;\n    } catch {\n      throw this._rpn = null, this._isValid = !1, new Error(`There was a problem parsing: ${s}`);\n    }\n  }\n  get rpn() {\n    return this._rpn ?? [];\n  }\n  get isValid() {\n    if (this._isValid === void 0)\n      try {\n        this.evaluate({ x: 2 });\n      } catch {\n        this._isValid = !1;\n      }\n    return this._isValid ?? !1;\n  }\n  set isValid(s) {\n    this._isValid = s;\n  }\n  get expression() {\n    return this._expression;\n  }\n  evaluate(s) {\n    const e = [];\n    if (this._rpn === null)\n      return this._isValid = !1, 0;\n    this._isValid = !0;\n    for (const c of this._rpn)\n      if (c.tokenType === t.COEFFICIENT)\n        if (!isNaN(+c.token))\n          e.push(+c.token);\n        else {\n          const i = c.token.split(\"/\");\n          if (i.length !== 2)\n            throw this._isValid = !1, new Error(\"This coefficient is not a fraction\");\n          e.push(+i[0] / +i[1]);\n        }\n      else if (c.tokenType === t.VARIABLE && s !== void 0)\n        Object.hasOwn(s, c.token) && e.push(+s[c.token]);\n      else if (c.tokenType === t.CONSTANT)\n        e.push(v[c.token]);\n      else if (c.tokenType === t.OPERATION) {\n        if (c.token === \"*\") {\n          const i = e.pop(), o = e.pop();\n          if (o === void 0 || i === void 0)\n            throw this._isValid = !1, new Error(`The multiplication factors ${o ?? \"a\"} or ${i ?? \"b\"} are not defined`);\n          e.push(o * i);\n        } else if (c.token === \"/\") {\n          const i = e.pop(), o = e.pop();\n          if (o === void 0 || i === void 0)\n            throw this._isValid = !1, new Error(`The division values ${o ?? \"a\"} or ${i ?? \"b\"} are not defined`);\n          e.push(o / i);\n        } else if (c.token === \"+\") {\n          const i = e.pop(), o = e.pop();\n          if (o === void 0 || i === void 0)\n            throw this._isValid = !1, new Error(`The addition values ${o ?? \"a\"} or ${i ?? \"b\"} are not defined`);\n          e.push(+o + +i);\n        } else if (c.token === \"-\") {\n          const i = e.pop(), o = e.pop() ?? 0;\n          if (i === void 0)\n            throw this._isValid = !1, new Error(\"The subtraction value b is  not defined\");\n          e.push(o - i);\n        } else if (c.token === \"^\") {\n          const i = e.pop(), o = e.pop();\n          if (o === void 0 || i === void 0)\n            throw this._isValid = !1, new Error(`The base value ${o ?? \"a\"} or exponent ${i ?? \"b\"} are not defined`);\n          e.push(Math.pow(o, i));\n        }\n      } else if (c.tokenType === t.FUNCTION) {\n        const i = e.pop();\n        if (i === void 0)\n          throw this._isValid = !1, new Error(`The parameters for ${c.token} is not defined`);\n        if (c.token === \"sin\")\n          e.push(Math.sin(i));\n        else if (c.token === \"cos\")\n          e.push(Math.cos(i));\n        else if (c.token === \"tan\")\n          e.push(Math.tan(i));\n        else if (c.token === \"sqrt\")\n          e.push(Math.sqrt(i));\n        else if (c.token === \"nthrt\") {\n          const o = e.pop();\n          if (o === void 0)\n            throw this._isValid = !1, new Error(\"The nthrt function requires two parameters\");\n          i % 2 === 0 && o < 0 ? e.push(NaN) : e.push((o < 0 ? -1 : 1) * Math.pow(Math.abs(o), 1 / i));\n        } else c.token === \"ln\" ? e.push(Math.log(i)) : c.token === \"log\" && e.push(Math.log10(i));\n      }\n    if (e.length === 1)\n      return this._numberCorrection(e[0]);\n    throw new Error(`There was a problem parsing: ${this._expression}`);\n  }\n  _numberCorrection(s, e = 8) {\n    return +s.toFixed(e);\n  }\n}\nexport {\n  m as NumExp,\n  V as ShutingYard,\n  k as ShutingyardMode,\n  t as ShutingyardType,\n  v as tokenConstant\n};\n//# sourceMappingURL=piexpression.js.map\n","/***\r\n * Monom class\r\n */\r\nimport type {\r\n    IAlgebra,\r\n    IAnalyse,\r\n    IExpression,\r\n    InputAlgebra,\r\n    InputValue,\r\n    IPiMathObject,\r\n    literalType\r\n} from \"../pimath.interface\"\r\nimport { Fraction } from \"../coefficients/fraction\"\r\nimport { NthRoot } from \"../coefficients/nthRoot\"\r\nimport { Numeric } from \"../numeric\"\r\n\r\nimport { ShutingYard, ShutingyardType, type Token } from \"piexpression\"\r\n\r\nexport class Monom implements IPiMathObject<Monom>, IExpression<Monom>, IAnalyse<Monom>, IAlgebra<Monom> {\r\n    #coefficient: Fraction\r\n    #literal: literalType<Fraction>\r\n\r\n    constructor(value?: InputValue<Fraction>)\r\n    constructor(value?: Monom)\r\n    constructor(value?: InputAlgebra<Fraction>) {\r\n        this.#coefficient = new Fraction().zero()\r\n        this.#literal = {}\r\n\r\n        if (value !== undefined) {\r\n            // A string is given - try to parse the value.\r\n            this.parse(value)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    // -----------------------------------------\r\n    /**\r\n     * Parse a string to a monom. The string may include fraction.\r\n     * @param inputStr\r\n     */\r\n    public parse(inputStr: InputAlgebra<Monom>): this {\r\n        // Initialize the monom\r\n        this.#coefficient = new Fraction()\r\n        this.#literal = {}\r\n\r\n        if (typeof inputStr === 'string') {\r\n            this.#shutingYardToReducedMonom(inputStr)\r\n        } else if (typeof inputStr === 'number') {\r\n            this.#coefficient = new Fraction(inputStr)\r\n        } else if (inputStr instanceof Fraction) {\r\n            this.#coefficient = inputStr.clone()\r\n        } else if (inputStr instanceof Monom) {\r\n            this.#coefficient = inputStr.#coefficient.clone()\r\n\r\n            // Copy the literal parts\r\n            this.#cloneLiteral(inputStr)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Clone the current Monom.\r\n     */\r\n    public clone = (): Monom => {\r\n        const F: Monom = new Monom()\r\n\r\n        F.coefficient = this.#coefficient.clone()\r\n\r\n        // Copy the literal parts.\r\n        for (const k in this.#literal) {\r\n            F.setLetter(k, this.#literal[k].clone())\r\n        }\r\n        return F\r\n    }\r\n\r\n    public static gcd = (...monoms: Monom[]): Monom => {\r\n        // All the monoms must be with natural powers...\r\n        for (const m of monoms) {\r\n            if (m.containsRationalPower()) {\r\n                return new Monom().zero()\r\n            }\r\n        }\r\n\r\n        const M = new Monom(),\r\n            n: number = Numeric.gcd(...monoms.map(value => value.coefficient.numerator)),\r\n            d: number = Numeric.lcm(...monoms.map(value => value.coefficient.denominator))\r\n\r\n        // Get the coefficient.\r\n        M.coefficient = new Fraction(n, d).reduce()\r\n\r\n        // Set the literal parts - go through each monoms literal parts and get only the lowest degree of each letters.\r\n        for (const m of monoms) {\r\n            // Remove the inexistant letters from the resulting monom\r\n            for (const letter in M.literal) {\r\n                if (!(letter in m.literal)) {\r\n                    M.literal[letter].zero()\r\n                }\r\n            }\r\n            for (const letter in m.literal) {\r\n                if (!M.hasVariable(letter) && m.literal[letter].isStrictlyPositive()) {\r\n                    M.literal[letter] = m.literal[letter].clone()\r\n                } else {\r\n                    M.literal[letter] = new Fraction(Math.min(m.literal[letter].value, M.literal[letter].value))\r\n                }\r\n            }\r\n        }\r\n\r\n        return M\r\n    }\r\n\r\n    /**\r\n     * Multiply two monoms and return a NEW monom.\r\n     * @param monoms\r\n     */\r\n    public static xMultiply = (...monoms: Monom[]): Monom => {\r\n        const M = new Monom().one()\r\n\r\n        for (const m of monoms) {\r\n            M.multiply(m)\r\n        }\r\n\r\n        return M\r\n    }\r\n\r\n    /**\r\n     * Add all similar monoms. If they aren't similar, they are simply skipped.\r\n     * @param M (Monom[]) The monoms to add.\r\n     */\r\n    public add = (...M: InputAlgebra<Fraction>[]): this => {\r\n        for (const m of M) {\r\n            // If the value given is not a monom, create it.\r\n            const mAsMonom = (!(m instanceof Monom)) ? new Monom(m) : m\r\n\r\n            if (this.isSameAs(mAsMonom)) {\r\n                if (this.isZero()) {\r\n                    this.#cloneLiteral(mAsMonom)\r\n                }\r\n\r\n                this.#coefficient.add(mAsMonom.coefficient)\r\n            } else {\r\n                console.log('Add monom: ' + this.display + ' is not similar with ', mAsMonom.display)\r\n            }\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Get the coefficient \\\\(k\\\\) of the Monom \\\\(k\\\\cdot x^{n}\\\\)\r\n     * @returns {Fraction}\r\n     */\r\n    public get coefficient(): Fraction {\r\n        return this.#coefficient\r\n    }\r\n\r\n    /**\r\n     * Set the coefficient \\\\(k\\\\) value of the monom\r\n     * @param {Fraction | number | string} F\r\n     */\r\n    public set coefficient(F: InputValue<Fraction>) {\r\n        this.#coefficient = new Fraction(F)\r\n    }\r\n\r\n    public containsRationalPower = (): boolean => {\r\n        return Object.values(this.#literal).some((value) => value.isRational())\r\n    }\r\n\r\n    /**\r\n     * Get the degree of a monom. If no setLetter is given, the result will be the global degree.\r\n     * @param letter (string) Letter to get to degree (power)\r\n     */\r\n    public degree = (letter?: string): Fraction => {\r\n        if (this.variables.length === 0) {\r\n            return new Fraction().zero()\r\n        }\r\n        if (letter === undefined) {\r\n            // Not setLetter given -> we get the global monom degree (sum of all the letters).\r\n            return Object.values(this.#literal).reduce((t, n) => t.clone().add(n))\r\n        } else {\r\n            // A setLetter is given -> get the corresponding power.\r\n            return !this.hasVariable(letter) ? new Fraction().zero() : this.#literal[letter].clone()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Derivative the monom\r\n     * @param letter\r\n     */\r\n    public derivative = (letter?: string): Monom => {\r\n        // No setLetter given - assume it's the setLetter 'x'\r\n        if (letter === undefined) {\r\n            letter = 'x'\r\n        }\r\n\r\n        if (this.hasVariable(letter)) {\r\n            const d = this.#literal[letter].clone(),\r\n                dM = this.clone()\r\n\r\n            // Subtract one to the degree.\r\n            dM.#literal[letter].subtract(1)\r\n\r\n            // Multiply the coefficient by the previous degree\r\n            dM.#coefficient.multiply(new Fraction(d.clone()))\r\n            return dM\r\n        } else {\r\n            return new Monom().zero()\r\n        }\r\n    }\r\n\r\n    // Display getter\r\n    /**\r\n     * This display getter is to be used in the polynom display getter\r\n     */\r\n    public get display(): string {\r\n        let L = ''\r\n        const letters = Object.keys(this.#literal).sort()\r\n        for (const letter of letters) {\r\n            if (this.#literal[letter].isNotZero()) {\r\n                L += letter\r\n                if (this.#literal[letter].isNotEqual(1)) {\r\n                    L += `^(${this.#literal[letter].display})`\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this.#coefficient.value != 0) {\r\n                return this.#coefficient.display\r\n            } else {\r\n                return ''\r\n            }\r\n        } else {\r\n            if (this.#coefficient.value === 1) {\r\n                return L\r\n            } else if (this.#coefficient.value === -1) {\r\n                return `-${L}`\r\n            } else if (this.#coefficient.value === 0) {\r\n                return '0'\r\n            } else {\r\n                return `${this.#coefficient.display}${L}`\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Divide the current monoms by multiple monoms\r\n     * @param M (Monom[])\r\n     */\r\n    public divide = (...M: InputAlgebra<Fraction>[]): this => {\r\n        // Depending on the given value, choose the current item\r\n        for (const m of M) {\r\n            // If the value given is not a monom, create it.\r\n            const mAsMonom = (!(m instanceof Monom)) ? new Monom(m) : m\r\n\r\n            // Divide the coefficient\r\n            this.#coefficient.divide(mAsMonom.coefficient)\r\n\r\n            // Subtract the power values\r\n            for (const letter in mAsMonom.literal) {\r\n\r\n                this.#literal[letter] = this.hasVariable(letter) ?\r\n                    this.#literal[letter].subtract(mAsMonom.literal[letter]) :\r\n                    mAsMonom.literal[letter].clone().opposite()\r\n\r\n\r\n                // If the power of a particular setLetter is zero, delete it from the literal part..\r\n                if (this.#literal[letter].isZero()) {\r\n                    this.removeVariable(letter)\r\n                }\r\n            }\r\n        }\r\n        return this\r\n    }\r\n\r\n    public get dividers(): Monom[] {\r\n        // Decompose only if the coefficient is a natural number\r\n        if (!this.coefficient.isRelative()) {\r\n            return [this.clone()]\r\n        }\r\n\r\n        // Decompose only if the power values are natural numbers.\r\n        if (this.containsRationalPower()) {\r\n            return [this.clone()]\r\n        }\r\n\r\n        // Security : do not do this if greater than 10000\r\n        if (this.coefficient.numerator > 1000000) {\r\n            return [this.clone()]\r\n        }\r\n\r\n        const dividers = Numeric.dividers(Math.abs(this.coefficient.numerator))\r\n\r\n        // Decompose the literals parts.\r\n        let literals: literalType<Fraction>[] = []\r\n        for (const L in this.literal) {\r\n            // L is the letter.\r\n            literals = this._getLiteralDividers(literals, L)\r\n        }\r\n\r\n        const monomDividers: Monom[] = []\r\n        if (literals.length > 0 && dividers.length > 0) {\r\n            for (const N of dividers) {\r\n                for (const L of literals) {\r\n                    const M = new Monom()\r\n                    M.coefficient = new Fraction(N)\r\n                    M.literal = L\r\n                    monomDividers.push(M)\r\n                }\r\n            }\r\n        } else if (dividers.length === 0) {\r\n            for (const L of literals) {\r\n                const M = new Monom()\r\n                M.coefficient = new Fraction().one()\r\n                M.literal = L\r\n                monomDividers.push(M)\r\n            }\r\n        } else {\r\n            for (const N of dividers) {\r\n                const M = new Monom()\r\n                M.coefficient = new Fraction(N)\r\n                monomDividers.push(M)\r\n            }\r\n        }\r\n\r\n        return monomDividers.length === 0 ? [new Monom().one()] : monomDividers\r\n    }\r\n\r\n    /**\r\n     * Evaluate a monom. Each setLetter must be assigned to a Fraction.\r\n     * @param values    Dictionary of <setLetter: Fraction>\r\n     * @param asNumeric\r\n     */\r\n    public evaluate = (values: literalType<number | Fraction> | InputValue<Fraction>, asNumeric?: boolean): Fraction | number => {\r\n        // If as numeric return the numeric value\r\n        if (asNumeric === true) {\r\n            // Convert all values to numeric\r\n            // If the value is a Fraction, convert it to a number\r\n            if (values instanceof Fraction) {\r\n                return this.#evaluateAsNumeric(values.value)\r\n            }\r\n\r\n            // If the value is a NthRoot, return undefined\r\n            if (values instanceof NthRoot) {\r\n                return new Fraction().invalid()\r\n            }\r\n\r\n            // If the value is a number, return the numeric value\r\n            if (typeof values === 'number') {\r\n                return this.#evaluateAsNumeric(values)\r\n            }\r\n\r\n            // If the value is an object, return the numeric value\r\n            if (typeof values === 'object') {\r\n                // Convert {[key:string]:Fraction} to {[key:string]:number}\r\n                const tmpValues: literalType<number> = {}\r\n                for (const L in values) {\r\n                    tmpValues[L] = new Fraction(values[L]).value\r\n                }\r\n\r\n                return this.#evaluateAsNumeric(tmpValues)\r\n            }\r\n        }\r\n\r\n        // The answer must be a Fraction\r\n        const r = this.coefficient.clone()\r\n\r\n        if (typeof values === 'number' || values instanceof Fraction) {\r\n            const tmpValues: literalType<Fraction> = {}\r\n            tmpValues[this.variables[0]] = new Fraction(values)\r\n            return this.evaluate(tmpValues)\r\n        }\r\n\r\n        if (values instanceof NthRoot) {\r\n            return new Fraction().invalid()\r\n        }\r\n\r\n        if (typeof values === 'object') {\r\n            if (this.variables.length === 0) {\r\n                return this.coefficient\r\n            }\r\n\r\n            for (const L in this.#literal) {\r\n                const value = new Fraction(values[L])\r\n\r\n                r.multiply(value.pow(this.#literal[L]))\r\n            }\r\n        }\r\n\r\n        return r\r\n    }\r\n\r\n    // -------------------------------------\r\n    /**\r\n     * Determine if a monom contains a setLetter in it's literal part\r\n     * @param letter\r\n     */\r\n    public hasVariable = (letter?: string): boolean => {\r\n        // The letter was not found\r\n        return Object.hasOwn(this.#literal, letter ?? 'x')\r\n    }\r\n\r\n    public integrate(a: InputValue<Fraction>, b: InputValue<Fraction>, letter?: string  ): Fraction {\r\n        const primitive = this.primitive(letter)\r\n\r\n        return (primitive.evaluate(b) as Fraction)\r\n            .subtract(primitive.evaluate(a) as Fraction)\r\n    }\r\n\r\n    public inverse = (): this => {\r\n        this.#coefficient.opposite()\r\n        for (const letter in this.#literal) {\r\n            this.#literal[letter].opposite()\r\n        }\r\n        return this\r\n    }\r\n\r\n    public isDivisible = (div: Monom): boolean => {\r\n        // For all variables (letters), the current monom must have a degree higher than the divider\r\n        if (div.degree().isStrictlyPositive()) {\r\n            for (const letter of div.variables) {\r\n                if (!this.degree(letter).isGeq(div.degree(letter))) {\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n\r\n        // If the coefficient is rational, we suppose we don't need to check the division by the coefficient.\r\n        if (this.coefficient.isRational() || div.coefficient.isRational()) {\r\n            return true\r\n        }\r\n\r\n        return this.coefficient.clone().divide(div.coefficient).isRelative()\r\n    }\r\n\r\n    /**\r\n     * Determine if two monoms are equals\r\n     * @param M\r\n     */\r\n    public isEqual = (M: Monom): boolean => {\r\n        return this.isSameAs(M) && this.#coefficient.isEqual(M.coefficient)\r\n    }\r\n\r\n    public isLiteralSquare = (): boolean => {\r\n        for (const letter in this.literal) {\r\n            // A literal square must have a natural power\r\n            if (this.literal[letter].isRational()) {\r\n                return false\r\n            }\r\n\r\n            // The natural power must be be even\r\n            if (this.literal[letter].isEven()) {\r\n                return false\r\n            }\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is one\r\n     */\r\n    public isOne = (): boolean => {\r\n        return this.#coefficient.value === 1 && this.variables.length === 0\r\n    }\r\n\r\n    /**\r\n     * Determine if two monoms are similar\r\n     * @param M\r\n     */\r\n    public isSameAs = (M: Monom): boolean => {\r\n        // Get the list of all variables from both monoms.\r\n        const M1: string[] = this.variables\r\n        const M2: string[] = M.variables\r\n\r\n        // Get the list of all variables from both monoms.\r\n        const K: string[] = M1.concat(M2.filter((item) => !M1.includes(item)))\r\n\r\n        // If one of the monom is zero, it is the same than the other.\r\n        if (this.isZero() || M.isZero()) {\r\n            return true\r\n        }\r\n\r\n        // Both monoms has no literal part.\r\n        if (M1.length === 0 && M2.length === 0) {\r\n            return true\r\n        }\r\n\r\n        // Both monoms must have the same variables\r\n        if (M1.length !== M2.length) {\r\n            return false\r\n        }\r\n\r\n        // To _compare, both must be different from zero.\r\n        if (!this.isZero() && !M.isZero()) {\r\n            for (const key of K) {\r\n                // The variable is not available in one of the monom\r\n                if (!this.hasVariable(key) || !M.hasVariable(key)) {\r\n                    return false\r\n                }\r\n\r\n                // The variable does not have the same power in each monoms.\r\n                if (!this.#literal[key].isEqual(M.literal[key])) {\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n\r\n        // All are positive check - the monoms are the sames.\r\n        return true\r\n    }\r\n\r\n    public isSquare = (): boolean => {\r\n        if (!this.coefficient.isSquare()) {\r\n            return false\r\n        }\r\n        return this.isLiteralSquare()\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is null\r\n     */\r\n    public isZero = (): boolean => {\r\n        return this.#coefficient.value === 0\r\n    }\r\n\r\n    /**\r\n     * Get the literal part of \\\\(x^{n_1}y^{n_2}\\\\) as dictionary \\\\[\\\\begin{array}{ll}x&=n_1\\\\\\\\y&=n_2\\\\end{array}\\\\]\r\n     * @returns {literalType}\r\n     */\r\n    public get literal(): literalType<Fraction> {\r\n        return this.#literal\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom. Must be a dictionary {x: Fraction, y: Fraction, ...}\r\n     * @param {literalType<Fraction>} L\r\n     */\r\n    public set literal(L: literalType<Fraction>) {\r\n        this.#literal = L\r\n    }\r\n\r\n    /**\r\n     * Get the literal square roots of the Monom.\r\n     * @returns {literalType<Fraction>}\r\n     */\r\n    public get literalSqrt(): literalType<Fraction> {\r\n        // TODO: used in Polynom._factorize2ndDegree : remove it from here ?\r\n        if (this.isLiteralSquare()) {\r\n            const L: literalType<Fraction> = {}\r\n            for (const key in this.#literal) {\r\n                L[key] = this.#literal[key].clone().sqrt()\r\n            }\r\n            return L\r\n        } else {\r\n            return this.#literal\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom from a string\r\n     * @param inputStr  String like x^2y^3\r\n     */\r\n    public set literalStr(inputStr: string) {\r\n        // TODO : parse using ShutingYard tree !\r\n\r\n        // Match all x^n\r\n        for (const v of [...inputStr.matchAll(/([a-z])\\^([+-]?[0-9]+)/g)]) {\r\n            // Create the default letter entry if necessary.\r\n            if (!(v[1] in this.#literal)) {\r\n                this.#literal[v[1]] = new Fraction().zero()\r\n            }\r\n\r\n            // Add the new value.\r\n            // TODO: actually, it adds only numeric value\r\n            this.#literal[v[1]].add(+v[2])\r\n        }\r\n\r\n        // Match all x\r\n        for (const v of [...inputStr.matchAll(/([a-z](?!\\^))/g)]) {\r\n            // Match all single letters\r\n            if (!(v[1] in this.#literal)) {\r\n                this.#literal[v[1]] = new Fraction().zero()\r\n            }\r\n\r\n            // Add one to the value.\r\n            this.#literal[v[1]].add(1)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Multiple multiple monoms to the current monom\r\n     * @param M (Monom[]) The monoms to multiply to.\r\n     */\r\n    public multiply = (...M: InputAlgebra<Fraction>[]): this => {\r\n        for (const m of M) {\r\n            // If the value given is not a monom, create it.\r\n            const mAsMonom = (!(m instanceof Monom)) ? new Monom(m) : m\r\n\r\n            // Multiply the coefficient.\r\n            this.#coefficient.multiply(mAsMonom.coefficient)\r\n\r\n            // Multiply the literal parts.\r\n            for (const letter in mAsMonom.literal) {\r\n                if (!this.hasVariable(letter)) {\r\n                    this.#literal[letter] = mAsMonom.literal[letter].clone()\r\n                } else {\r\n                    this.#literal[letter].add(mAsMonom.literal[letter])\r\n                }\r\n            }\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Create a one value monom\r\n     */\r\n    public one = (): this => {\r\n        this.#coefficient = new Fraction().one()\r\n        this.#literal = {}\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Get the opposite\r\n     * Returns a monom.\r\n     */\r\n    public opposite = (): this => {\r\n        this.#coefficient.opposite()\r\n        return this\r\n    }\r\n\r\n    public get plotFunction(): string {\r\n        let L = ''\r\n        const letters = Object.keys(this.#literal).sort()\r\n\r\n        for (const letter of letters) {\r\n            if (this.#literal[letter].isNotZero()) {\r\n                L += (L === '' ? \"\" : \"*\") + letter\r\n                if (this.#literal[letter].isNotEqual(1)) {\r\n                    L += `^(${this.#literal[letter].display})`\r\n                }\r\n            }\r\n        }\r\n\r\n        // No literal part\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this.#coefficient.value != 0) {\r\n                return this.#coefficient.display\r\n            } else {\r\n                return ''\r\n            }\r\n        } else {\r\n            if (this.#coefficient.value === 1) {\r\n                return L\r\n            } else if (this.#coefficient.value === -1) {\r\n                return `-${L}`\r\n            } else if (this.#coefficient.value === 0) {\r\n                return '0'\r\n            } else {\r\n                return `${this.#coefficient.display}*${L}`\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the pow of a monom.\r\n     * @param nb (number) : Mathematical pow\r\n     */\r\n    public pow = (nb: number | Fraction): this => {\r\n        this.#coefficient.pow(nb)\r\n        for (const letter in this.#literal) {\r\n            this.#literal[letter].multiply(nb)\r\n        }\r\n        return this\r\n    }\r\n\r\n    public primitive = (letter?: string): Monom => {\r\n        // TODO: derivative including the ln value => implies creating different monom system ?\r\n        if (letter === undefined) {\r\n            letter = 'x'\r\n        }\r\n\r\n        // Zero monom\r\n        const M = this.clone()\r\n        let degree: Fraction\r\n\r\n        if (M.hasVariable(letter)) {\r\n            degree = M.degree(letter).clone().add(1)\r\n            M.coefficient = M.coefficient.clone().divide(degree)\r\n            M.setLetter(letter, degree)\r\n        } else {\r\n            // There is no letter.\r\n\r\n            // The coefficient might be zero (=> x) or a number a (=> ax)\r\n            if (M.coefficient.isZero()) {\r\n                M.coefficient = new Fraction().one()\r\n            }\r\n            M.setLetter(letter, 1)\r\n        }\r\n\r\n        return M\r\n    }\r\n\r\n    public reduce = (): this => {\r\n        // Reduce the coefficient\r\n        this.coefficient.reduce()\r\n\r\n        // Reduce the literal parts (removing null powers)\r\n        for (const letter in this.#literal) {\r\n            if (this.#literal[letter].isZero()) {\r\n                this.removeVariable(letter)\r\n            }\r\n        }\r\n        return this\r\n    }\r\n\r\n    public removeVariable(letter: string) {\r\n        /* eslint-disable */\r\n        delete this.#literal[letter]\r\n        /* eslint-enable */\r\n    }\r\n\r\n    /**\r\n     * Get the nth-root of the monom\r\n     */\r\n    public root = (): this => {\r\n        throw new Error('Method not implemented.')\r\n    }\r\n\r\n    /**\r\n     * Set the power of a particular setLetter\r\n     * @param letter (string) Letter to change\r\n     * @param pow (number) Power of the setLetter (must be positive integer.\r\n     */\r\n    public setLetter = (letter: string, pow: InputValue<Fraction>): this => {\r\n        if (!(pow instanceof Fraction)) {\r\n            return this.setLetter(letter, new Fraction(pow))\r\n        }\r\n\r\n        // Set the power of the letter to zero => remove it\r\n        if (this.hasVariable(letter) && pow.isZero()) {\r\n            this.removeVariable(letter)\r\n        }\r\n\r\n\r\n        this.#literal[letter] = pow.clone()\r\n\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Return the square root of a monom\r\n     */\r\n    public sqrt = (): this => {\r\n        if (this.isSquare()) {\r\n            this.#coefficient.sqrt()\r\n            for (const letter in this.#literal) {\r\n                this.#literal[letter].clone().divide(2)\r\n            }\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Subtract multiple monoms\r\n     * @param M (Monom[]) The monoms to subtract\r\n     */\r\n    public subtract = (...M: InputAlgebra<Fraction>[]): this => {\r\n        for (const m of M) {\r\n            // If the value given is not a monom, create it.\r\n            const mAsMonom = (!(m instanceof Monom)) ? new Monom(m) : m\r\n\r\n            if (this.isSameAs(mAsMonom)) {\r\n                if (this.isZero()) {\r\n                    this.#cloneLiteral(mAsMonom)\r\n                }\r\n\r\n                this.#coefficient.add(mAsMonom.clone().coefficient.opposite())\r\n            } else {\r\n                console.log('Subtract: Is not similar: ', mAsMonom.display)\r\n            }\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Get the tex output of the monom\r\n     */\r\n    public get tex(): string {\r\n        // TODO: display with square root !\r\n        // TODO: Refactor to make it more readable\r\n        let L = ''\r\n        const letters = Object.keys(this.#literal).sort()\r\n\r\n        for (const letter of letters) {\r\n            if (this.#literal[letter].isNotZero()) {\r\n                L += letter\r\n                if (this.#literal[letter].isNotEqual(1)) {\r\n                    L += `^{ ${this.#literal[letter].tfrac.tex } }`\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this.#coefficient.value != 0) {\r\n                return this.#coefficient.frac.tex\r\n            } else {\r\n                return '0'\r\n            }\r\n        } else {\r\n            if (this.#coefficient.value === 1) {\r\n                return L\r\n            } else if (this.#coefficient.value === -1) {\r\n                return `-${L}`\r\n            } else if (this.#coefficient.value === 0) {\r\n                return '0'\r\n            } else {\r\n                return `${this.#coefficient.frac.tex}${L}`\r\n            }\r\n        }\r\n    }\r\n\r\n    // Getter helpers.\r\n    /**\r\n     * Get the variables letters\r\n     */\r\n    public get variables(): string[] {\r\n        // const M = this.clone().clean()\r\n\r\n        const L: string[] = []\r\n        Object.entries(this.literal).forEach(\r\n            ([key, value]) => {\r\n                if (!value.isZero()) {\r\n                    L.push(key)\r\n                }\r\n            })\r\n        L.sort()\r\n        return L\r\n        // return Object.keys(M.literal)\r\n    }\r\n\r\n    /**\r\n     * Create a zero value monom\r\n     */\r\n    public zero = (): this => {\r\n        this.#coefficient = new Fraction().zero()\r\n        this.#literal = {}\r\n        return this\r\n    }\r\n\r\n    #cloneLiteral(inputStr: Monom) {\r\n        for (const k in inputStr.literal) {\r\n            this.#literal[k] = inputStr.literal[k].clone()\r\n        }\r\n    }\r\n\r\n    #evaluateAsNumeric = (values: literalType<number | Fraction> | InputValue<Fraction>): number => {\r\n        let r = this.coefficient.value\r\n\r\n        if (typeof values === \"number\") {\r\n            const tmpValues: literalType<number> = {}\r\n            const key = this.variables[0]\r\n            tmpValues[key] = values\r\n\r\n            return this.#evaluateAsNumeric(tmpValues)\r\n        }\r\n\r\n        if (values instanceof Fraction) {\r\n            const tmpValues: literalType<number> = {}\r\n            tmpValues[this.variables[0]] = new Fraction(values).value\r\n            return this.#evaluateAsNumeric(tmpValues)\r\n        }\r\n\r\n        if (values instanceof NthRoot) {\r\n            return NaN\r\n        }\r\n\r\n        if (typeof values === 'object') {\r\n            if (this.variables.length === 0) {\r\n                return this.coefficient.value\r\n            }\r\n\r\n            for (const L in this.#literal) {\r\n                const v = values[L]\r\n\r\n                if (v instanceof Fraction) {\r\n                    r *= v.value ** (this.#literal[L].value)\r\n                } else {\r\n                    r *= v ** (this.#literal[L].value)\r\n                }\r\n            }\r\n        }\r\n\r\n        return r\r\n    }\r\n\r\n    private _getLiteralDividers(arr: literalType<Fraction>[], letter: string): literalType<Fraction>[] {\r\n        const tmpList: Record<string, Fraction>[] = []\r\n\r\n        // Be default, this.literal[letter] should be a rational number.\r\n        for (let d = 0; d <= this.literal[letter].value; d++) {\r\n            if (arr.length === 0) {\r\n                const litt: literalType<Fraction> = {}\r\n                litt[letter] = new Fraction(d)\r\n                tmpList.push(litt)\r\n            } else {\r\n                for (const item of arr) {\r\n                    const litt: literalType<Fraction> = {}\r\n                    for (const currentLetter in item) {\r\n                        litt[currentLetter] = item[currentLetter]\r\n                    }\r\n                    litt[letter] = new Fraction(d)\r\n                    tmpList.push(litt)\r\n                }\r\n            }\r\n        }\r\n        return tmpList\r\n    }\r\n\r\n    #shutingYardToReducedMonom = (inputStr: string): this => {\r\n        // Get the RPN array of the current expression\r\n        const SY: ShutingYard = new ShutingYard().parse(inputStr)\r\n        const rpn: { token: string, tokenType: ShutingyardType }[] = SY.rpn\r\n\r\n        const stack: Monom[] = []\r\n\r\n        if (rpn.length === 0) {\r\n            this.zero()\r\n            return this\r\n        } else if (rpn.length === 1) {\r\n            const element = rpn[0]\r\n\r\n            this.one()\r\n            if (element.tokenType === ShutingyardType.COEFFICIENT) {\r\n                this.coefficient = new Fraction(element.token)\r\n            } else if (element.tokenType === ShutingyardType.VARIABLE) {\r\n                this.setLetter(element.token, 1)\r\n            }\r\n            return this\r\n        } else {\r\n            // Reset the monom\r\n            for (const element of rpn) {\r\n                this.#shutingYard_AddToken(stack, element)\r\n            }\r\n        }\r\n\r\n        this.one()\r\n        this.multiply(stack[0])\r\n        return this\r\n    }\r\n\r\n    #shutingYard_AddToken = (stack: Monom[], element: Token): void => {\r\n        let q1: Monom, q2: Monom, m: Monom, letter: string, pow: Fraction\r\n\r\n        if (element.tokenType === ShutingyardType.COEFFICIENT) {\r\n            stack.push(new Monom(new Fraction(element.token)))\r\n\r\n        } else if (element.tokenType === ShutingyardType.VARIABLE) {\r\n            const M = new Monom().one()\r\n            M.setLetter(element.token, 1)\r\n            stack.push(M.clone())\r\n\r\n        } else if (element.tokenType === ShutingyardType.OPERATION) {\r\n            switch (element.token) {\r\n                case '-':\r\n                    // this should only happen for negative powers or for negative coefficient.\r\n                    q2 = (stack.pop()) ?? new Monom().zero()\r\n                    q1 = (stack.pop()) ?? new Monom().zero()\r\n\r\n                    stack.push(q1.subtract(q2))\r\n\r\n                    break\r\n                case '*':\r\n                    // Get the last element in the stack\r\n                    q2 = (stack.pop()) ?? new Monom().one()\r\n                    q1 = (stack.pop()) ?? new Monom().one()\r\n\r\n                    stack.push(q1.multiply(q2))\r\n                    break\r\n                case '/':\r\n                    // Get the last element in the stack\r\n                    q2 = (stack.pop()) ?? new Monom().one()\r\n                    q1 = (stack.pop()) ?? new Monom().one()\r\n\r\n                    stack.push(q1.divide(q2))\r\n                    break\r\n                case '^': {\r\n                    // get the two last elements in the stack\r\n                    const poppedCoefficient = stack.pop()?.coefficient\r\n                    pow = poppedCoefficient ?? new Fraction().one()\r\n                    m = stack.pop() ?? new Monom().one()\r\n\r\n                    letter = m.variables[0]\r\n\r\n                    if (letter) {\r\n                        m.setLetter(letter, pow)\r\n                    }\r\n\r\n                    stack.push(m)\r\n                    // this.multiply(m.clone())\r\n                    break\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","export function wrapParenthesis(str: string, tex = true): string {\r\n    return tex ? `\\\\left( ${str} \\\\right)` : `(${str})`\r\n}\r\n\r\nexport function wrapVert(str: string, tex = true): string {\r\n    return tex ? `\\\\left\\\\vert ${str} \\\\right\\\\vert` : `|${str}|`\r\n}\r\n\r\nexport function wrapNorm(str: string, tex = true): string {\r\n    return tex ? `\\\\left\\\\Vect ${str} \\\\right\\\\Vect` : `||${str}||`\r\n}\r\n\r\nexport function replace_in_array<T>(haystack: string[], search: string, target: string, start?: number, end?: number): T {\r\n    return haystack.map((x, index) => {\r\n        if (start !== undefined && index < start) {\r\n            return x\r\n        }\r\n        if (end !== undefined && index > end) {\r\n            return x\r\n        }\r\n        return x === search ? target : x\r\n    }) as T\r\n}\r\n","import type {IExpressionMultiply, IPiMathObject} from \"../pimath.interface\"\r\n\r\n// TODO: create other operation_** to make things more generic !\r\nexport function operation_pow<T extends IPiMathObject<T> & IExpressionMultiply<T>>(item: T, value: number): T {\r\n    // TODO: Implement the operation_pow to other classes\r\n    if (!Number.isSafeInteger(value)) {\r\n        throw new Error('Can only raise item by an integer')\r\n    }\r\n\r\n    if (value < 0) {\r\n        throw new Error('Can only raise item by a positive integer')\r\n    }\r\n\r\n    if (value === 0) {\r\n        return item.one()\r\n    }\r\n\r\n    const P = item.clone()\r\n    for (let i = 1; i < value; i++) {\r\n        item.multiply(P)\r\n    }\r\n\r\n    return item\r\n}\r\n","/**\r\n * Polynom module contains everything necessary to handle polynoms.*\r\n */\r\nimport {ShutingYard, ShutingyardType, type Token} from \"piexpression\"\r\nimport type {\r\n    IAlgebra,\r\n    IAnalyse,\r\n    IExpression,\r\n    InputAlgebra,\r\n    InputValue,\r\n    IPiMathObject,\r\n    ISolution,\r\n    literalType,\r\n    TABLE_OF_SIGNS,\r\n    TABLE_OF_SIGNS_VALUES\r\n} from \"../pimath.interface\"\r\nimport {Fraction} from \"../coefficients\"\r\nimport {Numeric} from '../numeric'\r\nimport {EquationSolver} from './equationSolver'\r\nimport {Monom} from './monom'\r\nimport {replace_in_array} from \"../helpers\"\r\nimport {operation_pow} from \"./operations\"\r\n\r\n\r\nexport type PolynomParsingType = InputValue<Polynom> | Monom\r\n\r\nexport interface IEuclidean {\r\n    quotient: Polynom,\r\n    reminder: Polynom\r\n}\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n * ```\r\n * let P = new Polynom('3x-4')\r\n * ```\r\n */\r\nexport class Polynom implements IPiMathObject<Polynom>,\r\n    IExpression<Polynom>,\r\n    IAnalyse<Polynom>,\r\n    IAlgebra<Polynom> {\r\n\r\n    #defaultVariable = 'x'\r\n    #factors: Polynom[]\r\n    #monoms: Monom[]\r\n    #roots: ISolution[]\r\n    #rootsCache = false\r\n\r\n    constructor(value: InputValue<Fraction>)\r\n    constructor(value: string)\r\n    constructor(value: Monom)\r\n    constructor(value: Polynom)\r\n    constructor(...values: InputValue<Fraction>[])\r\n    constructor(...values: InputAlgebra<Polynom>[])\r\n    constructor(polynomString?: InputAlgebra<Polynom>, ...values: InputAlgebra<Fraction>[]) {\r\n        this.#monoms = []\r\n        this.#factors = []\r\n        this.#roots = []\r\n\r\n        if (polynomString !== undefined) {\r\n            this.parse(polynomString, ...values)\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Parse a string to a polynom.\r\n     * @param inputStr\r\n     * @param values\r\n     */\r\n    public parse = (inputStr: PolynomParsingType, ...values: InputAlgebra<Monom>[]): this => {\r\n        // Reset the main variables.\r\n        this.#monoms = []\r\n        this.#factors = []\r\n\r\n        if (typeof inputStr === 'string') {\r\n            return this.#parseString(inputStr, ...values)\r\n        } else if (\r\n            (typeof inputStr === 'number' || inputStr instanceof Fraction || inputStr instanceof Monom)\r\n            && (values.length === 0)\r\n        ) {\r\n            this.#monoms.push(new Monom(inputStr as Monom))\r\n        } else if (inputStr instanceof Monom && values.length > 0) {\r\n            this.#monoms.push(new Monom(inputStr))\r\n            values.forEach(m => {\r\n                this.#monoms.push(new Monom(m as Monom))\r\n            })\r\n        } else if (inputStr instanceof Polynom) {\r\n            for (const m of inputStr.monoms) {\r\n                this.#monoms.push(m.clone())\r\n            }\r\n        }\r\n\r\n\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Clone the polynom\r\n     */\r\n    public clone = (): Polynom => {\r\n        const P = new Polynom()\r\n        const M: Monom[] = []\r\n\r\n        for (const m of this.#monoms) {\r\n            M.push(m.clone())\r\n        }\r\n\r\n\r\n        P.monoms = M\r\n\r\n        return P\r\n    }\r\n\r\n    public get tex(): string {\r\n        return this.#genDisplay('tex')\r\n    }\r\n\r\n    public get display(): string {\r\n        return this.#genDisplay()\r\n    }\r\n\r\n    public add = (...values: InputAlgebra<Polynom>[]): Polynom => {\r\n\r\n        for (const value of values) {\r\n            if (value instanceof Polynom) {\r\n                this.#monoms = this.#monoms.concat(value.monoms)\r\n            } else if (value instanceof Monom) {\r\n                this.#monoms.push(value.clone())\r\n            } else if (typeof value === \"number\" && Number.isSafeInteger(value)) {\r\n                this.#monoms.push(new Monom(value.toString()))\r\n            } else {\r\n                this.#monoms.push(new Monom(value))\r\n            }\r\n        }\r\n\r\n\r\n        return this.reduce()\r\n    }\r\n\r\n    public commonMonom = (): Monom => {\r\n        const M = new Monom().one()\r\n        const numerator: number = this.gcdNumerator()\r\n        const denominator: number = this.gcdDenominator()\r\n        const degree = this.degree()\r\n\r\n        M.coefficient = new Fraction(numerator, denominator)\r\n        for (const L of this.variables) {\r\n            // Initialize the setLetter with the max degree\r\n            M.setLetter(L, degree)\r\n            for (const m of this.#monoms) {\r\n                M.setLetter(L, Fraction.min(m.degree(L), M.degree(L)))\r\n                if (M.degree(L).isZero()) {\r\n                    break\r\n                }\r\n\r\n            }\r\n        }\r\n        return M\r\n    }\r\n\r\n    public degree = (letter?: string): Fraction => {\r\n        let d: Fraction = new Fraction().zero()\r\n        for (const m of this.#monoms) {\r\n            d = Fraction.max(m.degree(letter).value, d)\r\n        }\r\n\r\n        return d\r\n    }\r\n\r\n    public derivative = (letter?: string): Polynom => {\r\n        const dP = new Polynom()\r\n\r\n        for (const m of this.#monoms) {\r\n            dP.add(m.derivative(letter))\r\n        }\r\n\r\n        return dP.reduce()\r\n    }\r\n\r\n    public divide = (value: InputAlgebra<Polynom>): Polynom => {\r\n\r\n        if (value instanceof Fraction) {\r\n            return this.#divideByFraction(value)\r\n        } else if (typeof value === 'number' && Number.isSafeInteger(value)) {\r\n            return this.#divideByInteger(value)\r\n        } else if (value instanceof Monom) {\r\n            return this.divide(new Polynom(value))\r\n        } else if (value instanceof Polynom) {\r\n            if (value.monoms.length === 1 && value.variables.length === 0) {\r\n                return this.#divideByFraction(value.monoms[0].coefficient)\r\n            } else {\r\n                const {quotient, reminder} = this.euclidean(value)\r\n                if (reminder.isZero()) {\r\n                    this.#monoms = quotient.monoms\r\n                    return this\r\n                }\r\n            }\r\n        } else if (typeof value === 'string') {\r\n            return this.divide(new Polynom(value))\r\n        }\r\n\r\n        throw new Error(`Cannot divide by ${value as unknown as string}`)\r\n    }\r\n\r\n    public empty = (): this => {\r\n        this.#monoms = []\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Divide the current polynom by another polynom.\r\n     * @param P\r\n     * returns {quotient: Polynom, reminder: Polynom}\r\n     */\r\n    public euclidean = (P: Polynom): IEuclidean => {\r\n        const letter: string = P.variables[0]\r\n        const quotient: Polynom = new Polynom().zero()\r\n        const reminder: Polynom = this.clone().reorder(letter)\r\n\r\n        // There is no variable - means it's a number\r\n        if (P.variables.length === 0) {\r\n            const q = this.clone().divide(P)\r\n\r\n            return {\r\n                quotient: q.reduce(),\r\n                reminder: new Polynom().zero()\r\n            }\r\n        }\r\n\r\n        // Get at least a letter\r\n        const maxMP: Monom = P.monomByDegree(undefined, letter)\r\n        const degreeP: Fraction = P.degree(letter)\r\n\r\n        let newM: Monom\r\n\r\n        // Make the Euclidean division of the two polynoms.\r\n        let MaxIteration = this.degree(letter).value * 2\r\n        while (reminder.degree(letter).isGeq(degreeP) && MaxIteration > 0) {\r\n            MaxIteration--\r\n\r\n            // Get the greatest monom divided by the max monom of the divider\r\n            newM = reminder.monomByDegree(undefined, letter).clone().divide(maxMP)\r\n\r\n            if (newM.isZero()) {\r\n                continue\r\n            }\r\n\r\n            // Get the new quotient and reminder.\r\n            quotient.add(newM)\r\n            reminder.subtract(P.clone().multiply(newM)).reduce()\r\n\r\n            // Check if the reminder is zero.\r\n            if (newM.degree(letter).isZero()) {\r\n                break\r\n            }\r\n        }\r\n\r\n        quotient.reduce()\r\n        reminder.reduce()\r\n        return {quotient, reminder}\r\n    }\r\n\r\n    public evaluate = (values: literalType<Fraction | number> | InputValue<Fraction>, asNumeric?: boolean): Fraction | number => {\r\n        // Return the numeric value, without using Fraction\r\n        if (asNumeric) {\r\n            return this.#evaluateAsNumeric(values)\r\n        }\r\n\r\n        // Build the evaluated fraction\r\n        const r = new Fraction().zero()\r\n        this.#monoms.forEach(monom => {\r\n            //console.log('Evaluate polynom: ', monom.display, values, monom.evaluate(values).display);\r\n            r.add(monom.evaluate(values, asNumeric))\r\n        })\r\n\r\n        return r\r\n    }\r\n\r\n    // -------------------------------------\r\n    /**\r\n     * Factorize a polynom and store the best results in factors.\r\n     * @param letter\r\n     */\r\n\r\n        // REFACTOR: duplicate code with equationSolver.\r\n    public factorize = (letter?: string): Polynom[] => {\r\n        let factors: Polynom[] = []\r\n        let P = this.clone().reorder()\r\n\r\n        // Extract the common monom\r\n        // 2x^3+6x^2 => 2x^2\r\n        const M = P.commonMonom()\r\n        // If the polynom starts with a negative monom, factorize it.\r\n        if (P.monomByDegree().coefficient.isStrictlyNegative() && M.coefficient.isStrictlyPositive() && !M.isOne()) {\r\n            M.opposite()\r\n        }\r\n\r\n\r\n        if (!M.isOne()) {\r\n            const tempPolynom: Polynom = new Polynom(M)\r\n            factors = [tempPolynom.clone()]\r\n            P = P.euclidean(tempPolynom).quotient\r\n        }\r\n\r\n        // Main loop\r\n        let securityLoop = P.degree().clone().multiply(2).value,\r\n            maxDegree = 1\r\n        while (securityLoop >= 0) {\r\n            securityLoop--\r\n            if (P.monoms.length < 2) {\r\n                // The polynom has only one monom => 7x^2\r\n                // No need to continue.\r\n                if (!P.isOne()) {\r\n                    factors.push(P.clone())\r\n                    P.one()\r\n                }\r\n                break\r\n            } else if (P.degree(letter).isOne()) {\r\n                // The polynom is a first degree polynom => 3x-5\r\n                // No need to continue\r\n                factors.push(P.clone())\r\n                P.one()\r\n                break\r\n            } else {\r\n                // Create the list of all \"potential\" polynom dividers.\r\n                let allDividers: Polynom[] = this.#getAllPotentialFactors(P, maxDegree, letter ?? 'x')\r\n                maxDegree = P.degree(letter).value\r\n\r\n                // Actually: 100ms\r\n                while (allDividers.length > 0) {\r\n                    const div = allDividers[0]\r\n\r\n                    if (!P.isDividableBy(div))\r\n                        // Not dividable. Remove it from the list\r\n                    {\r\n                        allDividers.shift()\r\n                    } else {\r\n                        // It's dividable - so make the division\r\n                        const result = P.euclidean(div)\r\n\r\n                        // Add the factor\r\n                        factors.push(div)\r\n\r\n                        // As it's dividable, get the quotient.\r\n                        P = result.quotient.clone()\r\n\r\n                        // filter all dividers that are no more suitable.\r\n                        allDividers = allDividers.filter(x => {\r\n                            const pX = P.monoms[0],\r\n                                pC = P.monoms[P.monoms.length - 1],\r\n                                dX = x.monoms[0],\r\n                                dC = x.monoms[x.monoms.length - 1]\r\n\r\n                            // Check last item (degree zero)\r\n                            if (!pC.isDivisible(dC)) {\r\n                                return false\r\n                            }\r\n\r\n                            // Check the first item (degree max)\r\n                            return pX.isDivisible(dX)\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Maybe there is still something in the Polynom (not everything was possible to factorize)\r\n        if (!P.isOne()) {\r\n            factors.push(P.clone())\r\n        }\r\n\r\n\r\n        // Save the factors\r\n        this.#factors = factors\r\n\r\n        return this.#factors\r\n    }\r\n\r\n    public fromCoefficients(...values: InputValue<Fraction>[]) {\r\n\r\n        this.#monoms = []\r\n        const letter = this.#defaultVariable ?? 'x'\r\n        values.reverse().forEach((coeff, index) => {\r\n            const monom = new Monom()\r\n            monom.coefficient = new Fraction(coeff)\r\n            monom.setLetter(letter, index)\r\n\r\n            this.#monoms.push(monom)\r\n        })\r\n\r\n        return this.reorder()\r\n    }\r\n\r\n    public gcdDenominator = (): number => {\r\n        return Numeric.gcd(...this.getDenominators())\r\n    }\r\n\r\n    public gcdNumerator = (): number => {\r\n        return Numeric.gcd(...this.getNumerators())\r\n    }\r\n\r\n    public getCoefficients(): Fraction[] {\r\n        // Assume there is only one letter.\r\n        const orderedPolynom = this.clone().reorder()\r\n\r\n        const length = this.degree().value + 1\r\n        const coeffs = new Array(length).fill(new Fraction(0)) as unknown as Fraction[]\r\n\r\n        orderedPolynom.monoms.forEach(monom => {\r\n            const index = length - monom.degree().value - 1\r\n            coeffs[index] = monom.coefficient.clone()\r\n        })\r\n\r\n        // return orderedPolynom.monoms.map(x=>x.coefficient)\r\n        return coeffs\r\n    }\r\n\r\n    // Next functions are used for for commonMonom, which is used in the factorize method.\r\n    public getDenominators = (): number[] => {\r\n        const denominators: number[] = []\r\n        for (const m of this.#monoms) {\r\n            denominators.push(m.coefficient.denominator)\r\n        }\r\n\r\n        return denominators\r\n    }\r\n\r\n    public getNumerators = (): number[] => {\r\n        const numerators: number[] = []\r\n        for (const m of this.#monoms) {\r\n            numerators.push(m.coefficient.numerator)\r\n        }\r\n\r\n        return numerators\r\n    }\r\n\r\n    public getZeroes = (): ISolution[] => {\r\n        if (this.degree().isZero()) {\r\n            return []\r\n        }\r\n\r\n        this.roots = new EquationSolver(this.clone()).solve()\r\n        return this.roots\r\n    }\r\n\r\n    public hasVariable(letter: string): boolean {\r\n        return this.variables.includes(letter)\r\n    }\r\n\r\n    public integrate = (a: InputValue<Fraction>, b: InputValue<Fraction>, letter = 'x'): Fraction => {\r\n        const primitive = this.primitive(letter)\r\n\r\n        const valuesA: literalType<Fraction> = {},\r\n            valuesB: literalType<Fraction> = {}\r\n\r\n        valuesA[letter] = new Fraction(a)\r\n        valuesB[letter] = new Fraction(b)\r\n\r\n        return (primitive.evaluate(valuesB) as Fraction).subtract(primitive.evaluate(valuesA))\r\n    }\r\n\r\n    public inverse(): Polynom | undefined {\r\n        return undefined\r\n    }\r\n\r\n    public isDeveloped = (polynomString: string): boolean => {\r\n        let P: Polynom\r\n\r\n        // Start by removing the parenthesis after a \"power\"\r\n        const pString = polynomString.replaceAll(/\\^\\(([-0-9/]+)\\)/g, '$1')\r\n\r\n        // There is at least one parenthesis - it is not developed.\r\n        if (pString.includes('(') || pString.includes(')')) {\r\n            return false\r\n        }\r\n\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            // Build the polynom\r\n            P = new Polynom(polynomString)\r\n        } catch {\r\n            return false\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false\r\n        }\r\n\r\n\r\n        // Check that everything is completely developed. Actually, there are no parentheses... so it is fully developed\r\n        return true\r\n    }\r\n\r\n    public isDividableBy = (div: Polynom): boolean => {\r\n        // Quick evaluation.\r\n        if (div.degree().isOne()) {\r\n            const zero = div.getZeroes()[0]\r\n\r\n            if (zero.exact instanceof Fraction) {\r\n                return (this.evaluate(zero.exact) as Fraction).isZero()\r\n            } else {\r\n                return false\r\n            }\r\n\r\n        } else {\r\n            const {reminder} = this.euclidean(div)\r\n            return reminder.isZero()\r\n        }\r\n    }\r\n\r\n    public isEqual = (P: Polynom): boolean => {\r\n        return this.#compare(P, '=')\r\n    }\r\n\r\n    public get isMultiVariable(): boolean {\r\n        // Determine if a monom has more than one variable.\r\n        return this.#monoms.some(m => m.variables.length > 1)\r\n    }\r\n\r\n    public isOne(): boolean {\r\n        return this.#monoms.length === 1 && this.#monoms[0].coefficient.isOne() && this.degree().isZero()\r\n    }\r\n\r\n    public isOppositeAt = (P: Polynom): boolean => {\r\n        return this.#compare(P.clone().opposite(), '=')\r\n    }\r\n\r\n    public isReduced = (polynomString: string): boolean => {\r\n        // The polynom must be developed to be reduced.\r\n        if (!this.isDeveloped(polynomString)) {\r\n            return false\r\n        }\r\n\r\n\r\n        const P = new Polynom(polynomString)\r\n        if (P.monoms.length > this.monoms.length) {\r\n            return false\r\n        }\r\n\r\n\r\n        // TODO: Not sure the reduced system checking is working properly !\r\n        for (const m of P.monoms) {\r\n            if (!m.coefficient.isReduced()) {\r\n                return false\r\n            }\r\n        }\r\n\r\n\r\n        return false\r\n    }\r\n\r\n    public isSameAs = (P: Polynom): boolean => {\r\n        return this.#compare(P, 'same')\r\n    }\r\n\r\n    public isZero(): boolean {\r\n        return (this.#monoms.length === 1 && this.#monoms[0].coefficient.isZero()) || this.#monoms.length === 0\r\n    }\r\n\r\n    public lcmDenominator = (): number => {\r\n        return Numeric.lcm(...this.getDenominators())\r\n    }\r\n\r\n    public lcmNumerator = (): number => {\r\n        return Numeric.lcm(...this.getNumerators())\r\n    }\r\n\r\n    public get length() {\r\n        return this.#monoms.length\r\n    }\r\n\r\n    public letters = (): string[] => {\r\n        let S = new Set<string>()\r\n\r\n        for (const m of this.#monoms) {\r\n            S = new Set([...S, ...m.variables])\r\n        }\r\n\r\n\r\n        return [...S]\r\n    }\r\n\r\n    public limitToInfinity = (letter?: string): Fraction => {\r\n        const M = this.monomByDegree(undefined, letter),\r\n            sign = M.coefficient.sign(),\r\n            degree = M.degree(letter)\r\n\r\n        if (degree.isStrictlyPositive()) {\r\n            return sign === 1 ? (new Fraction()).infinite() : (new Fraction()).infinite().opposite()\r\n        } else if (degree.isZero()) {\r\n            return M.coefficient\r\n        }\r\n\r\n\r\n        // Any other cases\r\n        return (new Fraction()).zero()\r\n    }\r\n\r\n    public limitToNegativeInfinity = (letter?: string): Fraction => {\r\n        const M = this.monomByDegree(undefined, letter),\r\n            sign = M.coefficient.sign(),\r\n            degree = M.degree(letter)\r\n\r\n        if (degree.isStrictlyPositive()) {\r\n            return sign === -1 ? (new Fraction()).infinite() : (new Fraction()).infinite().opposite()\r\n        } else if (degree.isZero()) {\r\n            return M.coefficient\r\n        }\r\n\r\n\r\n        // Any other cases\r\n        return (new Fraction()).zero()\r\n    }\r\n\r\n    public monomByDegree = (degree?: Fraction | number, letter?: string): Monom => {\r\n        if (degree === undefined)\r\n            // return the highest degree monom.\r\n        {\r\n            return this.monomByDegree(this.degree(letter), letter)\r\n        }\r\n\r\n\r\n        // Reduce the polynom.\r\n        const M = this.clone().reduce()\r\n        for (const m of M.#monoms) {\r\n            if (m.degree(letter).isEqual(degree)) {\r\n                return m.clone()\r\n            }\r\n        }\r\n\r\n\r\n        // Nothing was found - return the null monom.\r\n        return new Monom().zero()\r\n    }\r\n\r\n    // Used in LinearSystem.tex\r\n    public monomByLetter = (letter: string): Monom => {\r\n        const M = this.clone().reduce()\r\n        for (const m of M.#monoms) {\r\n            if (m.hasVariable(letter)) {\r\n                return m.clone()\r\n            }\r\n        }\r\n\r\n\r\n        return new Monom().zero()\r\n    }\r\n\r\n    // ------------------------------------------\r\n    public get monoms() {\r\n        return this.#monoms\r\n    }\r\n\r\n    public set monoms(M: Monom[]) {\r\n        this.#monoms = M\r\n    }\r\n\r\n    public monomsByDegree = (degree?: number | Fraction, letter?: string): Monom[] => {\r\n        if (degree === undefined)\r\n            // return the highest degree monom.\r\n        {\r\n            return this.monomsByDegree(this.degree(letter))\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        const Ms: Monom[] = []\r\n\r\n        const M = this.clone().reduce()\r\n        for (const m of M.#monoms) {\r\n            if (m.degree(letter).isEqual(degree)) {\r\n                Ms.push(m.clone())\r\n            }\r\n        }\r\n\r\n\r\n        return Ms\r\n        // Nothing was found - return\r\n    }\r\n\r\n    public multiply = (value: InputAlgebra<Polynom>): Polynom => {\r\n\r\n        if (value instanceof Polynom) {\r\n            return this.#multiplyByPolynom(value)\r\n        } else if (value instanceof Fraction) {\r\n            return this.#multiplyByFraction(value)\r\n        } else if (value instanceof Monom) {\r\n            return this.#multiplyByMonom(value)\r\n        } else if (Number.isSafeInteger(value) && typeof value === 'number') {\r\n            return this.#multiplyByInteger(value)\r\n        } else if (typeof value === 'string') {\r\n            try {\r\n                const k = new Fraction(value)\r\n                return this.#multiplyByFraction(k)\r\n            } catch {\r\n                throw new Error('Cannot multiply by this value.')\r\n            }\r\n\r\n\r\n        }\r\n\r\n\r\n        // Something went wrong...\r\n        throw new Error('Cannot multiply by this value.')\r\n    }\r\n\r\n    public get numberOfVars(): number {\r\n        return this.variables.length\r\n    }\r\n\r\n    public one = (): this => {\r\n        this.#monoms = []\r\n        this.#monoms.push(new Monom().one())\r\n        return this\r\n    }\r\n\r\n    // ------------------------------------------\r\n    public opposite = (): this => {\r\n        this.#monoms = this.#monoms.map(m => m.opposite())\r\n        return this\r\n    }\r\n\r\n    public get plotFunction(): string {\r\n        return this.#genDisplay('tex', false, false, true)\r\n    }\r\n\r\n    public pow = (nb: number): Polynom => {\r\n        return operation_pow(this as Polynom, nb).reduce()\r\n    }\r\n\r\n    public primitive = (letter?: string): Polynom => {\r\n        const dP = new Polynom()\r\n\r\n        for (const m of this.#monoms) {\r\n            dP.add(m.primitive(letter))\r\n        }\r\n\r\n        return dP\r\n    }\r\n\r\n    public reduce = (): Polynom => {\r\n        // Reduce the polynom\r\n\r\n        // Group the monoms by similarity\r\n        let i = 0\r\n        while (i < this.#monoms.length) {\r\n            for (let j = i + 1; j < this.#monoms.length; j++) {\r\n                if (this.#monoms[i].isSameAs(this.#monoms[j])) {\r\n                    this.#monoms[i].add(this.#monoms[j])\r\n                    this.#monoms.splice(j, 1)\r\n                    if (this.#monoms[i].isZero()) {\r\n                        this.#monoms[i] = new Monom().zero()\r\n                    }\r\n\r\n                    j--\r\n                }\r\n            }\r\n\r\n\r\n            i++\r\n        }\r\n\r\n        // Remove all null monoms\r\n        this.#monoms = this.#monoms.filter((m) => {\r\n            return !m.coefficient.isZero()\r\n        })\r\n\r\n        // Reduce all monoms coefficient.\r\n        for (const m of this.#monoms) {\r\n            m.coefficient.reduce()\r\n        }\r\n\r\n\r\n        if (this.length === 0) {\r\n            return new Polynom().zero()\r\n        }\r\n\r\n\r\n        return this.reorder()\r\n    }\r\n\r\n    public reorder = (letter = 'x', revert = false): this => {\r\n        const otherLetters = this.variables.filter(x => x !== letter)\r\n        this.#monoms.sort(function (a, b) {\r\n            const da = a.degree(letter).value,\r\n                db = b.degree(letter).value\r\n\r\n            // Values are different\r\n            if (da !== db) {\r\n                return revert ? da - db : db - da\r\n            }\r\n\r\n            // if values are equals, check other letters - it must be reverted in that case !\r\n            if (otherLetters.length > 0) {\r\n                for (const L of otherLetters) {\r\n                    const da = a.degree(L).value,\r\n                        db = b.degree(L).value\r\n\r\n                    // Values are different\r\n                    if (da !== db) {\r\n                        return revert ? da - db : db - da\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            return 0\r\n        })\r\n\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Replace a variable (letter) by a polynom.\r\n     * @param letter\r\n     * @param P\r\n     */\r\n    public replaceBy = (letter: string, P: Polynom): this => {\r\n        let pow: Fraction\r\n        const resultPolynom: Polynom = new Polynom().zero()\r\n\r\n        for (const m of this.monoms) {\r\n            if (!m.hasVariable(letter) || m.literal[letter].isZero()) {\r\n                resultPolynom.add(m.clone())\r\n            } else {\r\n                // We have found a variable to replace.\r\n\r\n                // Get the power.\r\n                pow = m.literal[letter].clone()\r\n\r\n                // Remove the variable from the monom\r\n                m.removeVariable(letter)\r\n\r\n                // Add the new monom to the result polynom\r\n                resultPolynom.add(P.clone().pow(Math.abs(pow.numerator)).multiply(m))\r\n            }\r\n        }\r\n\r\n\r\n        // Reduce the monoms\r\n        this.#monoms = resultPolynom.reduce().monoms\r\n        return this\r\n    }\r\n\r\n    // ------------------------------------------\r\n\r\n    public root(): Polynom {\r\n        throw new Error('Cannot take the root from a polynom')\r\n    }\r\n\r\n    get roots(): ISolution[] {\r\n        return this.#rootsCache ? this.#roots : this.getZeroes()\r\n    }\r\n\r\n    set roots(value: ISolution[]) {\r\n        this.#rootsCache = true\r\n        this.#roots = value\r\n    }\r\n\r\n    public setVariable(value: string): this {\r\n        this.#defaultVariable = value\r\n\r\n        return this\r\n    }\r\n\r\n    public sqrt(): Polynom {\r\n        throw new Error('Cannot take the square root from a polynom')\r\n    }\r\n\r\n    public subtract = (...values: InputAlgebra<Polynom>[]): Polynom => {\r\n        for (const value of values) {\r\n            if (value instanceof Polynom) {\r\n                this.add(value.clone().opposite())\r\n            } else if (value instanceof Monom) {\r\n                this.#monoms.push(value.clone().opposite())\r\n            } else {\r\n                this.#monoms.push(new Monom(value).opposite())\r\n            }\r\n        }\r\n\r\n\r\n        return this.reduce()\r\n    }\r\n\r\n    public tableOfSigns(): TABLE_OF_SIGNS {\r\n        // returns ['+-', 'd|t|z', '+-']...\r\n\r\n        // global roots from eventually Polyfactor. Allows to add \"extra column\".\r\n        const roots: ISolution[] = this.roots\r\n\r\n        // Build the table os sign length and default values\r\n        // The signs looks like: ['+', 't', '+', 't', '+', 't', '+']\r\n        let signs: TABLE_OF_SIGNS_VALUES[] = new Array(2 * roots.length + 1)\r\n            .fill('')\r\n            .map((_x, index) => {\r\n                return index % 2 === 0 ? '' : 'z'\r\n            })\r\n\r\n\r\n        if (signs.length === 1) {\r\n            // The polynom is a constant or has not roots\r\n            const [a] = this.getCoefficients().map(x => x.value)\r\n            signs = replace_in_array(signs, '', a > 0 ? '+' : '-')\r\n        } else if (this.degree().isOne()) {\r\n            // First degree: ax+b\r\n            const [a] = this.getCoefficients().map(x => x.value)\r\n\r\n            // Get the index of the zero.\r\n            signs[0] = a > 0 ? '-' : '+'\r\n            signs[1] = 'z'\r\n            signs[2] = a > 0 ? '+' : '-'\r\n        } else {\r\n            const testingRoots = [\r\n                roots[0].value - 1,\r\n                ...roots.map((_root, index) => {\r\n                    return index === roots.length - 1 ?\r\n                        roots[index].value + 1 :\r\n                        (roots[index].value + roots[index + 1].value) / 2\r\n                })\r\n            ]\r\n\r\n            testingRoots.forEach((test, index) => {\r\n                const sign = this.evaluate({x: test}, true) as number\r\n                signs[index * 2] = sign > 0 ? '+' : '-'\r\n            })\r\n        }\r\n\r\n        return {roots, signs}\r\n    }\r\n\r\n    public get value(): number | undefined {\r\n        if (this.degree().isZero()) {\r\n            return this.monoms[0]?.coefficient.value ?? 0\r\n        }\r\n\r\n        return undefined\r\n    }\r\n\r\n    public get variables(): string[] {\r\n        let V: string[] = []\r\n\r\n        for (const m of this.#monoms) {\r\n            V = V.concat(m.variables)\r\n        }\r\n\r\n\r\n        // Remove duplicates.\r\n        V = [...new Set(V)]\r\n        V.sort()\r\n        return V\r\n    }\r\n\r\n    /**\r\n     * Set the polynom to zero.\r\n     * @returns {this}\r\n     */\r\n    public zero = (): this => {\r\n        this.#monoms = []\r\n        this.#monoms.push(new Monom().zero())\r\n        return this\r\n    }\r\n\r\n    public get zeroes(): ISolution[] {\r\n        return this.getZeroes()\r\n    }\r\n\r\n    #compare = (P: Polynom, sign?: string): boolean => {\r\n        sign ??= '='\r\n\r\n        // Create clone version to reduce them without altering the original polynoms.\r\n        const cP1 = this.clone().reduce().reorder()\r\n        const cP2 = P.clone().reduce().reorder()\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || !cP1.degree().isEqual(cP2.degree())) {\r\n                    return false\r\n                }\r\n\r\n                // Check if the coefficients are the isSame.\r\n                return cP1.monoms\r\n                    .every((m1, index) => m1.isEqual(cP2.monoms[index]))\r\n\r\n            case 'same':\r\n                // They must have the same length and the same degree\r\n                if (cP1.length !== cP2.length || !cP1.degree().isEqual(cP2.degree())) {\r\n                    return false\r\n                }\r\n\r\n                return cP1.monoms\r\n                    .every((m1, index) => m1.isSameAs(cP2.monoms[index]))\r\n\r\n            default:\r\n                return false\r\n        }\r\n    }\r\n\r\n\r\n    #divideByFraction = (F: Fraction): this => {\r\n        for (const m of this.#monoms) {\r\n            m.coefficient.divide(F)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    #divideByInteger = (nb: number): this => {\r\n        const nbF = new Fraction(nb)\r\n        for (const m of this.#monoms) {\r\n            m.coefficient.divide(nbF)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    #evaluateAsNumeric = (values: literalType<number | Fraction> | InputValue<Fraction>): number => {\r\n        let r = 0\r\n        this.#monoms.forEach(monom => {\r\n            r += monom.evaluate(values, true) as number\r\n        })\r\n\r\n        return r\r\n    }\r\n\r\n    #factorize2ndDegree = (letter: string): Polynom[] => {\r\n        let P1: Polynom, P2: Polynom,\r\n            a, b, c, delta, x1, x2, factor\r\n\r\n        // One variable only\r\n        if (this.numberOfVars === 1) {\r\n            a = this.monomByDegree(2, letter).coefficient\r\n            b = this.monomByDegree(1, letter).coefficient\r\n            c = this.monomByDegree(0, letter).coefficient\r\n            delta = b.clone().pow(2).subtract(a.clone().multiply(c).multiply(4))\r\n\r\n            if (delta.isZero()) {\r\n                x1 = b.clone().opposite().divide(a.clone().multiply(2))\r\n                P1 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                P2 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                factor = a.divide(x1.denominator).divide(x1.denominator)\r\n\r\n                if (!factor.isOne()) {\r\n                    return [new Polynom(factor.display), P1, P2]\r\n                } else {\r\n                    return [P1, P2]\r\n                }\r\n\r\n            } else if (delta.isPositive() && delta.isSquare()) {\r\n                x1 = b.clone().opposite()\r\n                    .add(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n                x2 = b.clone().opposite()\r\n                    .subtract(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n\r\n                // (2x+5)(3x-2)\r\n                // 6x^2+11x-10\r\n                // a = 6, b = 11, c = -10\r\n                // delta = 121-4*6*(-10) = 361= 19^2\r\n                // x1 = (-11 + 19)  / 12 = 8/12 = 2/3\r\n                // x2 = (-11 - 19)  / 12 = -30/12 = -5/2\r\n                factor = a.divide(x1.denominator).divide(x2.denominator)\r\n                if (factor.isOne()) {\r\n                    return [\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n                } else {\r\n                    return [\r\n                        new Polynom(factor.display),\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n                }\r\n\r\n\r\n            } else\r\n                // No solution possible - return the complete value.\r\n            {\r\n                return [this.clone()]\r\n            }\r\n\r\n        } else {\r\n            // If multiple variables, only handle perfect squares...\r\n            a = this.monomByDegree(2, letter)\r\n            b = this.monomByDegree(1, letter)\r\n            c = this.monomByDegree(0, letter)\r\n\r\n            if (a.isLiteralSquare() && c.isLiteralSquare())\r\n                // Check the middle item is same as...\r\n\r\n\r\n            {\r\n                if (b.clone().pow(2).isSameAs(a.clone().multiply(c))) {\r\n                    // Determine if the coefficient values matches.\r\n\r\n                    // Search 4 values (r, s, t, u) that matches:\r\n                    // (r X + s Y)(t X + u Y) = rt X^2 + (ru + st) XY + su Y^2\r\n\r\n                    const xPolynom = new Polynom('x', a.coefficient, b.coefficient, c.coefficient)\r\n                    const xFactors = xPolynom.#factorize2ndDegree('x')\r\n\r\n                    const factors = []\r\n                    let xyzPolynom: Polynom\r\n\r\n                    if (xFactors.length >= 2) {\r\n                        for (const p of xFactors) {\r\n                            if (p.degree().isZero()) {\r\n                                factors.push(p.clone())\r\n                            } else {\r\n                                xyzPolynom = p.clone()\r\n                                xyzPolynom.monoms[0].literal = a.literalSqrt\r\n                                xyzPolynom.monoms[1].literal = c.literalSqrt\r\n                                factors.push(xyzPolynom.clone())\r\n                            }\r\n                        }\r\n\r\n\r\n                        return factors\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            return [this.clone()]\r\n        }\r\n    }\r\n\r\n    #genDisplay = (output?: string, forceSign?: boolean, wrapParentheses?: boolean, withAllMultiplicationSign?: boolean): string => {\r\n        let P = ''\r\n\r\n        for (const k of this.#monoms) {\r\n            if (k.coefficient.value === 0) {\r\n                continue\r\n            }\r\n\r\n\r\n            // The monom to be displayed\r\n            let m\r\n            if (withAllMultiplicationSign) {\r\n                m = k.plotFunction\r\n            } else {\r\n                m = (output === 'tex') ? k.tex : k.display\r\n            }\r\n\r\n            P += `${(k.coefficient.sign() === 1 && (P !== '' || forceSign === true)) ? '+' : ''}${m}`\r\n        }\r\n\r\n        if (wrapParentheses === true && this.length > 1) {\r\n            if (output === 'tex') {\r\n                P = `\\\\left( ${P} \\\\right)`\r\n            } else {\r\n                P = `(${P})`\r\n            }\r\n        }\r\n\r\n\r\n        if (P === '') {\r\n            P = '0'\r\n        }\r\n\r\n        return P\r\n    }\r\n\r\n    #getAllPotentialFactors = (P: Polynom, maxDegree: number, letter: string): Polynom[] => {\r\n        const m1 = P.monoms[0].dividers,\r\n            m2 = P.monoms[P.monoms.length - 1].dividers\r\n\r\n        const allDividers: Polynom[] = []\r\n        m1.forEach(m1d => {\r\n            // Get only polynom that has a degree less than a specific value\r\n            if (m1d.degree(letter).isLeq(maxDegree)) {\r\n                m2.forEach(m2d => {\r\n                    if (m1d.degree(letter).isNotEqual(m2d.degree(letter))) {\r\n                        allDividers.push(new Polynom(m1d, m2d))\r\n                        allDividers.push(new Polynom(m1d, m2d.clone().opposite()))\r\n                    }\r\n                })\r\n            }\r\n\r\n\r\n        })\r\n\r\n        return allDividers\r\n    }\r\n\r\n    #multiplyByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this.#monoms) {\r\n            m.coefficient.multiply(F)\r\n        }\r\n\r\n\r\n        return this.reduce()\r\n    }\r\n\r\n    #multiplyByInteger = (nb: number): Polynom => {\r\n        return this.#multiplyByFraction(new Fraction(nb))\r\n    }\r\n\r\n    #multiplyByMonom = (M: Monom): Polynom => {\r\n        for (const m of this.#monoms) {\r\n            m.multiply(M)\r\n        }\r\n\r\n        return this.reduce()\r\n    }\r\n\r\n    #multiplyByPolynom = (P: Polynom): Polynom => {\r\n        const M: Monom[] = []\r\n        for (const m1 of this.#monoms) {\r\n            for (const m2 of P.monoms) {\r\n                M.push(Monom.xMultiply(m1, m2))\r\n            }\r\n        }\r\n\r\n\r\n        this.#monoms = M\r\n        return this.reduce()\r\n    }\r\n\r\n    #parseString(inputStr: string, ...values: unknown[]): this {\r\n        if (values.length === 0) {\r\n\r\n            // Parse the polynom using the shutting yard algorithm\r\n            if (inputStr !== '' && !isNaN(Number(inputStr))) {\r\n                this.empty()\r\n                // It's a simple number.\r\n                const m = new Monom(inputStr)\r\n                // m.coefficient = new Fraction(inputStr);\r\n                // m.literalStr = '';\r\n                this.add(m)\r\n                return this\r\n            }\r\n\r\n            // Parse the string.\r\n            return this.#shutingYardToReducedPolynom(inputStr)\r\n        } else if (/^[a-z]+/.test(inputStr)) {\r\n            // We assume the inputStr contains only letters.\r\n            this.empty()\r\n\r\n            const fractions = values.map(x => new Fraction(x as InputValue<Fraction>))\r\n\r\n            // Multiple setLetter version\r\n            if (inputStr.length > 1) {\r\n                const letters = inputStr.split('')\r\n\r\n                if (letters.length < values.length - 2) {\r\n                    throw new Error('Too many factors for too few variables !')\r\n                }\r\n\r\n                let i = 0\r\n\r\n                for (const F of fractions) {\r\n                    const m = new Monom()\r\n                    m.coefficient = F.clone()\r\n                    m.literalStr = letters[i] || ''\r\n                    this.add(m)\r\n                    i++\r\n                }\r\n            }\r\n            // Single setLetter version\r\n            else {\r\n                let n = fractions.length - 1\r\n                for (const F of fractions) {\r\n                    const m = new Monom()\r\n                    m.coefficient = F.clone()\r\n                    m.literalStr = `${inputStr}^${n}`\r\n                    this.add(m)\r\n                    n--\r\n                }\r\n            }\r\n            return this\r\n        } else {\r\n            return this.zero()\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Main parse using a shutting yard class\r\n     * @param inputStr\r\n     */\r\n    #shutingYardToReducedPolynom = (inputStr: string): this => {\r\n        // Get the RPN array of the current expression\r\n        const SY: ShutingYard = new ShutingYard().parse(inputStr)\r\n        const rpn: { token: string, tokenType: ShutingyardType }[] = SY.rpn\r\n\r\n        // New version for reducing shuting yard.\r\n        this.zero()\r\n\r\n        const stack: Polynom[] = []\r\n\r\n        // Loop through the each element of the RPN\r\n        for (const element of rpn) {\r\n            this.#shutingYard_addToken(stack, element)\r\n        }\r\n\r\n\r\n        if (stack.length === 1) {\r\n            this.add(stack[0])\r\n        }\r\n\r\n\r\n        return this.reorder()\r\n    }\r\n\r\n    #shutingYard_addToken = (stack: Polynom[], element: Token): void => {\r\n        switch (element.tokenType) {\r\n            case ShutingyardType.COEFFICIENT:\r\n                stack.push(new Polynom(element.token))\r\n                break\r\n\r\n            case ShutingyardType.VARIABLE:\r\n                stack.push(new Polynom().add(new Monom(element.token)))\r\n                break\r\n\r\n            case ShutingyardType.CONSTANT:\r\n                // TODO: add constant support to Polynom parsing.\r\n                console.log('Actually, not supported - will be added later !')\r\n                break\r\n\r\n            case ShutingyardType.OPERATION:\r\n                if (stack.length >= 2) {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n\r\n                    // Check if the polynoms are not undefined.\r\n                    if (a === undefined || b === undefined) {\r\n                        break\r\n                    }\r\n\r\n                    if (element.token === '+') {\r\n                        stack.push(a.add(b))\r\n                    } else if (element.token === '-') {\r\n                        stack.push(a.subtract(b))\r\n                    } else if (element.token === '*') {\r\n                        stack.push(a.multiply(b))\r\n                    } else if (element.token === '/') {\r\n                        if (b.degree().isStrictlyPositive()) {\r\n                            console.log('divide by a polynom -> should create a rational polynom !')\r\n                        } else {\r\n                            // a.divide(b.monoms[0].coefficient)\r\n                            stack.push(a.divide(b.monoms[0].coefficient))\r\n                        }\r\n                    } else if (element.token === '^') {\r\n                        if (b.degree().isStrictlyPositive()) {\r\n                            throw new Error('Cannot elevate a polynom with another polynom !')\r\n                        } else if (b.monoms[0].coefficient.isRelative())\r\n                            // Integer power\r\n                        {\r\n                            stack.push(a.pow(b.monoms[0].coefficient.value))\r\n                        } else {\r\n                            // Only allow power if the previous polynom is only a monom, without coefficient.\r\n                            if (a.monoms.length === 1 && a.monoms[0].coefficient.isOne()) {\r\n                                for (const letter in a.monoms[0].literal) {\r\n                                    a.monoms[0].literal[letter].multiply(b.monoms[0].coefficient)\r\n                                }\r\n\r\n                                stack.push(a)\r\n                            } else {\r\n                                console.error('Cannot have power with fraction')\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else if (element.token === '-') {\r\n                    const a = stack.pop()\r\n                    if (a) {\r\n                        stack.push(a.opposite())\r\n                    }\r\n                } else {\r\n                    throw new Error(\"Error parsing the polynom\")\r\n                }\r\n\r\n\r\n                break\r\n\r\n            case ShutingyardType.MONOM:\r\n                // Should never appear.\r\n                console.error('The monom token should not appear here')\r\n                break\r\n\r\n            case ShutingyardType.FUNCTION:\r\n                // Should never appear.\r\n                console.error('The function token should not appear here - might be introduced later.')\r\n                break\r\n        }\r\n\r\n\r\n    }\r\n\r\n}\r\n","import type {\r\n    EQUATION_SIGN,\r\n    IAlgebra,\r\n    IEquation,\r\n    InputAlgebra,\r\n    InputValue,\r\n    IPiMathObject,\r\n    ISolution,\r\n    literalType\r\n} from \"../pimath.interface\"\r\nimport { Fraction } from \"../coefficients/fraction\"\r\nimport { Numeric } from \"../numeric\"\r\nimport { EquationSolver } from \"./equationSolver\"\r\nimport { Monom } from \"./monom\"\r\nimport { Polynom } from \"./polynom\"\r\n\r\nexport class Equation implements\r\n    IPiMathObject<Equation>,\r\n    IEquation<Equation>,\r\n    IAlgebra<Equation> {\r\n\r\n    // Left part of the equation\r\n    #left: Polynom\r\n    // Right part of the equation\r\n    #right: Polynom\r\n    // Signe of the equation\r\n    #sign: EQUATION_SIGN\r\n\r\n\r\n    constructor(equation: InputAlgebra<Polynom> | Equation)\r\n    constructor(left: InputAlgebra<Polynom>, right: InputAlgebra<Polynom>, sign?: EQUATION_SIGN)\r\n    constructor(left?: InputAlgebra<Polynom> | Equation, right?: InputAlgebra<Polynom>, sign?: EQUATION_SIGN) {\r\n        // Default equation\r\n        this.#left = new Polynom().zero()\r\n        this.#right = new Polynom().zero()\r\n        this.#sign = '='\r\n\r\n        // Only one value, it's an equation\r\n        if (left !== undefined && right === undefined) {\r\n            if (left instanceof Equation) {\r\n                return left.clone()\r\n            } else if (typeof left === 'string') {\r\n                // Parse the equation as a string.\r\n                this.parse(left)\r\n            }\r\n\r\n        } else if (left !== undefined && right !== undefined) {\r\n            // Two values, it's an equation with left and right polynoms.\r\n            this.left = new Polynom(left as InputAlgebra<Polynom>)\r\n            this.right = new Polynom(right)\r\n        }\r\n\r\n        if (sign !== undefined) {\r\n            this.sign = sign\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    // ------------------------------------------\r\n    public parse = (equationString: string): this => {\r\n        // Find the string separator\r\n        const strSign: string | false = this.#findSign(equationString)\r\n\r\n        if (strSign === false) {\r\n            throw new Error('The equation is not valid (no sign found)')\r\n        }\r\n\r\n        // The StrSign is found\r\n        const pStr: string[] = equationString.split(strSign)\r\n\r\n        return this.create(new Polynom(pStr[0]), new Polynom(pStr[1]), this.#formatSign(strSign))\r\n    }\r\n\r\n    public create = (left: Polynom, right: Polynom, sign?: string): this => {\r\n        this.#left = left\r\n        this.#right = right\r\n        this.#sign = this.#formatSign(sign ?? \"=\")\r\n        return this\r\n    }\r\n\r\n    public clone = (): Equation => {\r\n        return new Equation(this.#left.clone(), this.#right.clone(), this.#sign)\r\n    }\r\n\r\n    /**\r\n     * Add a value to the equation\r\n     * if value is an equation, add the left part to the left part of the equation\r\n     * and the right part to the right part of the equation\r\n     * if value is a string, try to create an equation\r\n     * if it fails, create a polynom and add it to the left and right part of the equation\r\n     * @param value | Polynom | Monom | Fraction | string | monom\r\n     */\r\n    public add(value: InputValue<Equation | Polynom>): this {\r\n        if (value instanceof Equation) {\r\n            // add the left part of the equation\r\n            this.#left.add(value.left)\r\n            // add the right part of the equation\r\n            this.#right.add(value.right)\r\n\r\n            return this\r\n        }\r\n\r\n        if (typeof value === 'string' &&\r\n            !Equation.isEquationString(value)) {\r\n\r\n            return this.add(new Equation(value))\r\n        }\r\n\r\n        const p = new Polynom(value)\r\n        this.#left.add(p)\r\n        this.#right.add(p)\r\n\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Get the degree of the equation\r\n     * @param letter\r\n     */\r\n    public degree = (letter?: string): Fraction => {\r\n        return Fraction.max(this.#left.degree(letter), this.#right.degree(letter))\r\n    }\r\n\r\n    /**\r\n     * divide an equation by a given value (transformed as a fraction)\r\n     *\r\n     * ```\r\n     * 8x+10=6x \\vert 2\r\n     * 4x+5=3x\r\n     * ```\r\n     *\r\n     * |>Alternatively with $3x-4$ maybe it's working ?\r\n     * $$\\frac{3x}{5}$$\r\n     *\r\n     * @param value\r\n     * @returns {Equation}\r\n     */\r\n    public divide = (value: InputValue<Fraction>): this => {\r\n        // Make sure we have a fraction.\r\n        const F: Fraction = new Fraction(value)\r\n\r\n        if (F.isZero()) {\r\n            return this\r\n        } else {\r\n            return this.multiply(F.inverse())\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create an Equation using two polynoms.\r\n     * Markdown *support* is cool\r\n     * @param values\r\n     * @param asNumeric\r\n     */\r\n    public evaluate(values: InputValue<Fraction> | literalType<number | Fraction>, asNumeric?: boolean  ): boolean {\r\n        // Evaluate the left and right part of the equation.\r\n        // compare the results.\r\n\r\n        // Evaluate the left and right part of the equation.\r\n        const left = this.#left.evaluate(values, asNumeric),\r\n            right = this.#right.evaluate(values, asNumeric)\r\n\r\n        // compare the results.\r\n        if (asNumeric) {\r\n            return left === right\r\n        }\r\n\r\n        return (left as Fraction).isEqual(right as Fraction)\r\n    }\r\n\r\n    /**\r\n     * Determine if the equation contains a variable.\r\n     * @param letter\r\n     */\r\n    public hasVariable = (letter: string): boolean => {\r\n        return this.variables.includes(letter)\r\n    }\r\n\r\n\r\n    public isEqual(value: InputValue<Equation>): boolean {\r\n        const equ = new Equation(value)\r\n        return equ.left.isEqual(this.#left) && equ.right.isEqual(this.#right)\r\n    }\r\n\r\n    public isLinearTo = (equ: Equation): boolean => {\r\n        // Move all left.\r\n        const p1 = equ.clone().moveLeft().simplify().left,\r\n            p2 = this.clone().moveLeft().simplify().left\r\n\r\n        // They are the same.\r\n        return p1.isEqual(p2) || p1.isOppositeAt(p2)\r\n    }\r\n\r\n    /**\r\n     * Determine if the equation contains more than one letter/variable.\r\n     */\r\n    public isMultiVariable = (): boolean => {\r\n        return this.#left.isMultiVariable || this.#right.isMultiVariable\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations helpers\r\n    public isEqualTo = (equ: Equation): boolean => {\r\n        const p1 = equ.clone().moveLeft().left,\r\n            p2 = this.clone().moveLeft().left\r\n\r\n        // They are the same.\r\n        return p1.isEqual(p2) || p1.isOppositeAt(p2)\r\n    }\r\n\r\n    /**\r\n     * Reorder the polynom to have only one letter on the left, the rest on the right.\r\n     * @param letter\r\n     */\r\n    public isolate = (letter?: string): this | false => {\r\n        // Determine if we can isolate the variables.\r\n\r\n        // Both part of the equations must be of the first degree.\r\n        if (!this.degree(letter).isOne()) {\r\n            return false\r\n        }\r\n\r\n        // Modify the equation to isolate the asked variable.\r\n        if (this.isMultiVariable()) {\r\n            return false\r\n        }\r\n\r\n        // Isolate the letter.\r\n        let mMove: Monom\r\n        // Start by moving everything to the left.\r\n        this.#left.subtract(this.#right)\r\n        this.#right.zero()\r\n        const values = [...this.#left.monoms]\r\n        for (const m of values) {\r\n            if (!m.hasVariable(letter)) {\r\n                mMove = m.clone()\r\n                this.#left.subtract(mMove)\r\n                this.#right.subtract(mMove)\r\n            }\r\n        }\r\n\r\n        // In theory, we should have only one item on the left.\r\n        if (this.#left.length !== 1) {\r\n            return false\r\n        }\r\n\r\n        const cMove: Fraction = this.#left.monoms[0].coefficient.clone()\r\n        this.#left.divide(cMove)\r\n        this.#right.divide(cMove)\r\n        return this\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations operations\r\n\r\n    // -----------------------------------------------\r\n    public letters = (): string[] => {\r\n        return [...new Set([...this.#left.letters(), ...this.#right.letters()])]\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    /**\r\n     * Reorder will move all monoms containing a letter on the left, all the other on the right.\r\n     */\r\n    public moveLeft = (): this => {\r\n        this.#left.subtract(this.#right)\r\n        this.#right.zero()\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Multiple an equation by a fraction value.\r\n     * @param value\r\n     */\r\n    public multiply = (value: InputValue<Fraction>): this => {\r\n        // Make sure we have a fraction.\r\n        const F: Fraction = new Fraction(value)\r\n\r\n        // Multiply each part of the equation by the fraction\r\n        this.#left.multiply(F)\r\n        this.#right.multiply(F)\r\n\r\n        // The sign of the inequality must be changed.\r\n        if (this.#sign !== '=' && F.sign() === -1) {\r\n            this.#reverseSign()\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    public pow(value: number): this {\r\n        this.#left.pow(value)\r\n        this.#right.pow(value)\r\n        return this\r\n    }\r\n    public opposite = (): this => {\r\n        this.#left = this.#left.opposite()\r\n        this.#right = this.#right.opposite()\r\n        return this\r\n    }\r\n\r\n    public reduce(): this {\r\n        // reduce means moving everything to the left\r\n        // remove the fractions\r\n        // simplify the equation\r\n        // reorder the equation\r\n        // start with a positive left part\r\n\r\n        // Move all left. The right part is now zero.\r\n        this.moveLeft()\r\n\r\n        // Reduce the equation: simplify and reorder.\r\n        this.#left.reduce()\r\n\r\n        // Simplify the equation.\r\n        this.simplify()\r\n\r\n        // Make sure the first part is positive.\r\n        if (this.#left.monoms[0].coefficient.isNegative()) {\r\n            this.multiply(-1)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    public reorder = (allLeft?: boolean): this => {\r\n        // Move all monoms of degree greater than 0 to the left.\r\n        // and all zero degree monoms to the right.\r\n        this.#left.subtract(this.#right)\r\n        this.#right.zero()\r\n        this.#left.reorder()\r\n\r\n        // we have all left (so equal zero) : it's done !\r\n        if (allLeft) {\r\n            return this\r\n        }\r\n\r\n        // Fetch all zero degree monoms.\r\n        this.#left.monoms\r\n            .filter(m => m.degree().isZero())\r\n            .forEach(m => {\r\n                const move = m.clone()\r\n                this.#left.subtract(move)\r\n                this.#right.subtract(move)\r\n            })\r\n\r\n        // Reorder the left and right polynoms\r\n        this.#left.reorder()\r\n        this.#right.reorder()\r\n        return this\r\n    }\r\n\r\n    // ------------------------------------------\r\n    public replaceBy = (letter: string, P: Polynom): this => {\r\n        this.#left.replaceBy(letter, P)\r\n        this.#right.replaceBy(letter, P)\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Multiply by the lcm denominator and divide by the gcm numerators.\r\n     */\r\n    public simplify = (): this => {\r\n        this.multiply(Numeric.lcm(...this.#left.getDenominators(), ...this.#right.getDenominators()))\r\n        this.divide(Numeric.gcd(...this.#left.getNumerators(), ...this.#right.getNumerators()))\r\n        return this\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    public solve = (): ISolution[] => {\r\n        const solver = new EquationSolver(this.clone())\r\n        return solver.solve()\r\n    }\r\n\r\n    public split(): [Polynom, Polynom] {\r\n        return [this.#left.clone(), this.#right.clone()]\r\n    }\r\n\r\n    public subtract(value: InputValue<Equation | Polynom>): this {\r\n        if (value instanceof Equation) {\r\n            this.#left.subtract(value.left)\r\n            this.#right.subtract(value.right)\r\n\r\n            return this\r\n        }\r\n\r\n        if (typeof value === 'string' &&\r\n            !Equation.isEquationString(value)) {\r\n            return this.subtract(new Equation(value))\r\n        }\r\n\r\n        const p = new Polynom(value)\r\n        this.#left.subtract(p)\r\n        this.#right.subtract(p)\r\n\r\n        return this\r\n    }\r\n\r\n    public test = (values: literalType<Fraction>): boolean => {\r\n        return (this.left.evaluate(values) as Fraction).isEqual(this.right.evaluate(values))\r\n    }\r\n\r\n    public static isEquationString(equationString: string): boolean {\r\n        // The equation sign can be one of the following:\r\n        // =, <, >, <=, >=\r\n\r\n        return equationString.includes('=') ||\r\n            equationString.includes('<') ||\r\n            equationString.includes('>') ||\r\n            equationString.includes('<=') ||\r\n            equationString.includes('>=')\r\n    }\r\n\r\n    public static makeSolutionsUnique(solutions: ISolution[], sorted?: boolean): ISolution[] {\r\n        const solutionAsTex: string[] = [],\r\n            uniqueSolutions = solutions.filter(sol => {\r\n                if (!solutionAsTex.includes(sol.tex)) {\r\n                    solutionAsTex.push(sol.tex)\r\n                    return true\r\n                } else {\r\n                    return false\r\n                }\r\n            })\r\n\r\n        if (sorted === true) {\r\n            uniqueSolutions.sort((a, b) => a.value - b.value)\r\n        }\r\n\r\n        return uniqueSolutions\r\n    }\r\n\r\n    public get display(): string {\r\n        return `${this.#left.display}${this.signAsTex}${this.#right.display}`\r\n    }\r\n\r\n    // Getter and setter\r\n    public get left(): Polynom {\r\n        return this.#left\r\n    }\r\n\r\n    public set left(value: Polynom) {\r\n        this.#left = value\r\n    }\r\n\r\n    public get numberOfVars(): number {\r\n        return this.variables.length\r\n    }\r\n\r\n    public get right(): Polynom {\r\n        return this.#right\r\n    }\r\n\r\n    public set right(value: Polynom) {\r\n        this.#right = value\r\n    }\r\n\r\n    // ------------------------------------------\r\n    public get sign(): string {\r\n        return this.#sign\r\n    }\r\n\r\n    public set sign(value: string) {\r\n        // Set the sign value as formatted.\r\n        this.#sign = this.#formatSign(value)\r\n    }\r\n\r\n    public get signAsTex(): string {\r\n        if (this.#sign === '>=') {\r\n            return '\\\\geq'\r\n        }\r\n\r\n        if (this.#sign === '<=') {\r\n            return '\\\\leq'\r\n        }\r\n\r\n        return this.#sign\r\n    }\r\n\r\n    public get tex(): string {\r\n        return `${this.#left.tex}${this.signAsTex}${this.#right.tex}`\r\n    }\r\n\r\n    public get variables(): string[] {\r\n        return [...new Set(this.#right.variables.concat(this.#left.variables))]\r\n    }\r\n\r\n    #findSign = (equationString: string): string | false => {\r\n        if (equationString.includes('geq')) {\r\n            return (equationString.includes('\\\\geq')) ? '\\\\geq' : 'geq'\r\n        } else if (equationString.includes('leq')) {\r\n            return (equationString.includes('\\\\leq')) ? '\\\\leq' : 'leq'\r\n        } else if (equationString.includes('>=')) {\r\n            return '>='\r\n        } else if (equationString.includes('=>')) {\r\n            return '=>'\r\n        } else if (equationString.includes('>')) {\r\n            return '>'\r\n        } else if (equationString.includes('<=')) {\r\n            return '<='\r\n        } else if (equationString.includes('=<')) {\r\n            return '=<'\r\n        } else if (equationString.includes('<')) {\r\n            return '<'\r\n        } else if (equationString.includes('=')) {\r\n            return '='\r\n        }\r\n\r\n        throw new Error('The equation is not valid (no sign found)')\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations solving algorithms\r\n    #formatSign = (signStr?: string): EQUATION_SIGN => {\r\n        if (signStr === undefined) {\r\n            return '='\r\n        }\r\n\r\n        if (signStr.includes('geq')) {\r\n            return '>='\r\n        } else if (signStr.includes('>=')) {\r\n            return '>='\r\n        } else if (signStr.includes('=>')) {\r\n            return '>='\r\n        } else if (signStr.includes('>')) {\r\n            return '>'\r\n        } else if (signStr.includes('leq')) {\r\n            return '<='\r\n        } else if (signStr.includes('<=')) {\r\n            return '<='\r\n        } else if (signStr.includes('=<')) {\r\n            return '<='\r\n        } else if (signStr.includes('<')) {\r\n            return '<'\r\n        } else {\r\n            return '='\r\n        }\r\n    }\r\n\r\n    #reverseSign = (): this => {\r\n        if (this.#sign === '=') {\r\n            return this\r\n        }\r\n\r\n        if (this.#sign.includes('<')) {\r\n            this.#sign.replace('<', '>')\r\n            return this\r\n        }\r\n        if (this.#sign.includes('>')) {\r\n            this.#sign.replace('>', '<')\r\n            return this\r\n        }\r\n\r\n        return this\r\n    }\r\n}\r\n","import type {\r\n    IAlgebra,\r\n    IExpression,\r\n    InputAlgebra,\r\n    InputValue,\r\n    IPiMathObject,\r\n    ISolution,\r\n    literalType,\r\n    TABLE_OF_SIGNS\r\n} from \"../pimath.interface\"\r\nimport {Fraction} from \"../coefficients/fraction\"\r\nimport {Polynom} from \"./polynom\"\r\nimport {replace_in_array, wrapParenthesis} from \"../helpers\"\r\n\r\nexport class Factor implements IPiMathObject<Factor>,\r\n    IExpression<Factor>,\r\n    IAlgebra<Factor> {\r\n    #displayMode: FACTOR_DISPLAY\r\n    #polynom: Polynom\r\n    #power: Fraction\r\n    #singleMode = false\r\n\r\n    constructor(value?: InputAlgebra<Polynom> | Factor, power?: InputValue<Fraction>) {\r\n\r\n\r\n        if (value instanceof Factor) {\r\n            this.#polynom = value.polynom.clone()\r\n            this.#power = value.power.clone()\r\n\r\n            if(power !== undefined){\r\n                this.#power.multiply(new Fraction(power))\r\n            }\r\n        } else if(value !== undefined) {\r\n            this.#polynom = new Polynom(value)\r\n            this.#power = new Fraction(power ?? 1)\r\n        }else{\r\n            this.#polynom = new Polynom()\r\n            this.#power = new Fraction(1)\r\n        }\r\n\r\n        this.#displayMode = FACTOR_DISPLAY.POWER\r\n\r\n        return this\r\n    }\r\n\r\n    public parse(/*value: InputValue<Factor>*/): Factor {\r\n        throw new Error(\"Method not implemented.\")\r\n    }\r\n\r\n    public clone(): Factor {\r\n        return new Factor(this)\r\n    }\r\n\r\n    public fromPolynom(polynom: InputValue<Polynom>): this {\r\n        this.#polynom = new Polynom(polynom)\r\n        this.#power = new Fraction(1)\r\n        return this\r\n    }\r\n    public get tex(): string {\r\n        const num = this.power.numerator\r\n        const den = this.power.denominator\r\n\r\n        let base: string\r\n        let power: string\r\n\r\n        if (this.#displayMode === FACTOR_DISPLAY.ROOT && den > 1) {\r\n            base = `\\\\sqrt${den === 2 ? '' : `[ ${den} ]`}{ ${this.polynom.tex} }`\r\n            power = num === 1 ? '' : `^{ ${num} }`\r\n        } else {\r\n            base = this.#singleMode && this.power.isOne() ? this.polynom.tex : wrapParenthesis(this.polynom.tex)\r\n            power = (den === 1 && num === 1) ? '' : `^{ ${this.power.tex} }`\r\n        }\r\n\r\n        // Add the power if it's not 1 or -1\r\n        base = `${base}${power}`\r\n\r\n        // If the power is negative, make it as a fraction.\r\n        if (this.#displayMode === FACTOR_DISPLAY.ROOT && num < 0) {\r\n            base = `\\\\frac{ 1 }{ ${base} }`\r\n        }\r\n\r\n\r\n        return base\r\n    }\r\n\r\n    public get display(): string {\r\n        const num = this.power.numerator\r\n        const den = this.power.denominator\r\n\r\n        let base: string\r\n        let power: string\r\n\r\n        if (this.#displayMode === FACTOR_DISPLAY.ROOT && den > 1) {\r\n            base = `${den === 2 ? 'sqrt' : `root(${den})`}(${this.polynom.display})`\r\n            power = num === 1 ? '' : `^(${num})`\r\n        } else {\r\n            base = this.#singleMode && this.power.isOne() ? this.polynom.display : wrapParenthesis(this.polynom.display, false)\r\n            power = (den === 1 && num === 1) ? '' : `^(${this.power.display})`\r\n        }\r\n\r\n        // Add the power if it's not 1 or -1\r\n        base = `${base}${power}`\r\n\r\n        // If the power is negative, make it as a fraction.\r\n        if (this.#displayMode === FACTOR_DISPLAY.ROOT && num < 0) {\r\n            base = `1/(${base})`\r\n        }\r\n\r\n\r\n        return base\r\n    }\r\n\r\n    public add(): Factor {\r\n        throw new Error(\"Adding two factors is not possible\")\r\n    }\r\n\r\n    public get asSingle(): this {\r\n        this.#singleMode = true\r\n        return this\r\n    }\r\n\r\n    public degree(letter?: string): Fraction {\r\n        return this.polynom.degree(letter).multiply(this.power)\r\n    }\r\n\r\n    public derivative(): Factor[] {\r\n        // The power is zero, the derivative is zero\r\n        if (this.power.isZero()) {\r\n            return [new Factor('0')]\r\n        }\r\n\r\n        // The power is one, the derivative is the derivative of the polynom\r\n        if (this.power.isOne()) {\r\n            return [new Factor(this.polynom.clone().derivative())]\r\n        }\r\n\r\n        // In any other case, the derivative consist of three Factors:\r\n        // the derivative of the polynom, the power and the polynom\r\n        return [\r\n            new Factor(this.power.clone()),\r\n            new Factor(this.polynom.clone().derivative()),\r\n            new Factor(this.polynom.clone(), this.power.clone().subtract(1))\r\n        ]\r\n    }\r\n\r\n    public develop(): Polynom {\r\n        if (this.power.isNatural()) {\r\n            return this.polynom.clone().pow(this.power.value)\r\n        }\r\n\r\n        throw new Error(\"The power must be a natural number\")\r\n    }\r\n\r\n    public divide(value: InputAlgebra<Factor | Polynom>): this {\r\n        if (value instanceof Factor) {\r\n            if (this.isSameAs(value)) {\r\n                this.power.subtract(value.power)\r\n                return this\r\n            }\r\n        }\r\n\r\n\r\n        const P = new Polynom(value as Polynom)\r\n        if (this.isSameAs(P)) {\r\n            this.power.subtract(1)\r\n            return this\r\n        }\r\n\r\n        throw new Error(\"The two factors must be the same\")\r\n    }\r\n\r\n    public evaluate(values: InputValue<Fraction> | literalType<number | Fraction>, asNumeric?: boolean): number | Fraction {\r\n        if (asNumeric) {\r\n            return (this.polynom.evaluate(values, true) as number) ** this.power.value\r\n        }\r\n\r\n\r\n        return (this.polynom.evaluate(values) as Fraction).pow(this.power)\r\n    }\r\n\r\n    public hasVariable(letter: string): boolean {\r\n        return this.polynom.hasVariable(letter)\r\n    }\r\n\r\n    public inverse(): this {\r\n        this.power.opposite()\r\n        return this\r\n    }\r\n\r\n    public isEqual(value: Factor): boolean {\r\n        // Must have the same polynom and the same reduce power\r\n\r\n        return this.isSameAs(value) &&\r\n            this.power.isEqual(value.power)\r\n    }\r\n\r\n    public isOne(): boolean {\r\n        return this.polynom.isOne() || this.power.isZero()\r\n    }\r\n\r\n    public isSameAs(value: InputAlgebra<Factor | Polynom>) {\r\n        let P: Polynom\r\n        if (value instanceof Factor) {\r\n            P = value.polynom\r\n        } else if (value instanceof Polynom) {\r\n            P = value\r\n        } else {\r\n            P = new Polynom(value)\r\n        }\r\n\r\n\r\n        return this.polynom.isEqual(P)\r\n    }\r\n\r\n    public isZero(): boolean {\r\n        return this.polynom.isZero()\r\n    }\r\n\r\n    public multiply(value: InputAlgebra<Factor | Polynom>): this {\r\n        if (value instanceof Factor) {\r\n            if (this.isSameAs(value)) {\r\n                this.power.add(value.power)\r\n                return this\r\n            }\r\n        }\r\n\r\n\r\n        const P = new Polynom(value as Polynom)\r\n        if (this.isSameAs(P)) {\r\n            this.power.add(1)\r\n            return this\r\n        }\r\n\r\n        throw new Error(\"The two factors must be the same\")\r\n    }\r\n\r\n    public one(): this {\r\n        this.#polynom.one()\r\n        this.#power.one()\r\n        return this\r\n    }\r\n\r\n    public opposite(): Factor {\r\n        throw new Error(\"Method not implemented.\")\r\n    }\r\n\r\n    public get polynom(): Polynom {\r\n        return this.#polynom\r\n    }\r\n\r\n    public set polynom(value: Polynom) {\r\n        this.#polynom = value\r\n    }\r\n\r\n    public pow(value: number | Fraction): this {\r\n        this.power.multiply(value)\r\n        return this\r\n    }\r\n\r\n    public get power(): Fraction {\r\n        return this.#power\r\n    }\r\n\r\n    public set power(value: InputValue<Fraction>) {\r\n        this.#power = new Fraction(value)\r\n    }\r\n\r\n    public primitive(): Factor {\r\n        throw new Error(\"Method not implemented.\")\r\n    }\r\n\r\n    public reduce(): Factor {\r\n        throw new Error(\"Method not implemented.\")\r\n    }\r\n\r\n    public root(value: number): this {\r\n        this.power.divide(value)\r\n        return this\r\n    }\r\n\r\n    public sqrt(): this {\r\n        return this.root(2)\r\n    }\r\n\r\n    public subtract(): Factor {\r\n        throw new Error(\"Subtracting two factors is not possible\")\r\n    }\r\n\r\n    public tableOfSigns(): TABLE_OF_SIGNS {\r\n        const pow = this.power.clone().reduce()\r\n        const tos = this.polynom.tableOfSigns()\r\n\r\n        // The zero roots becomes defence (d) if the power is negative\r\n        if (pow.isStrictlyNegative()) {\r\n            tos.signs = replace_in_array(tos.signs, 'z', 'd')\r\n        }\r\n\r\n        // The - sign becomes\r\n        // + (plus) if the power num is even and the power den is odd\r\n        // i (invalid) if the power denominator is even\r\n        if (pow.denominator % 2 === 0) {\r\n            // it's an even roots : no negative values!\r\n            tos.signs = replace_in_array(tos.signs, '-', 'h')\r\n        } else if (pow.numerator % 2 === 0) {\r\n            // it's an even power :  negative values becomes positive !\r\n            tos.signs = replace_in_array(tos.signs, '-', '+')\r\n        }\r\n\r\n\r\n        return {roots: tos.roots, signs: tos.signs}\r\n    }\r\n\r\n    public get variables(): string[] {\r\n        return this.polynom.variables\r\n    }\r\n\r\n    public get withPower(): this {\r\n        this.#displayMode = FACTOR_DISPLAY.POWER\r\n        return this\r\n    }\r\n\r\n    public get withRoot(): this {\r\n        this.#displayMode = FACTOR_DISPLAY.ROOT\r\n        return this\r\n    }\r\n\r\n    public zero(): this {\r\n        this.#polynom.zero()\r\n        this.#power.one()\r\n        return this\r\n    }\r\n\r\n}\r\n\r\nexport enum FACTOR_DISPLAY {\r\n    ROOT,\r\n    POWER\r\n}\r\n\r\n","import type {IAlgebra, IEquation, InputValue, IPiMathObject, ISolution, literalType} from \"../pimath.interface\"\r\nimport {Fraction} from \"../coefficients\"\r\nimport {Equation} from \"./equation\"\r\nimport {Monom} from \"./monom\"\r\nimport {Polynom} from \"./polynom\"\r\n\r\nexport class LinearSystem implements IPiMathObject<LinearSystem>,\r\n    IEquation<LinearSystem>,\r\n    IAlgebra<LinearSystem> {\r\n\r\n    #equations: Equation[]\r\n\r\n    // Determine the letters in the linear system, usually ['x', 'y']\r\n    #variables: string[]\r\n\r\n    constructor(...values: (string | Equation)[]) {\r\n        this.#equations = []\r\n        this.#variables = []\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    public parse = (...equations: (string | Equation)[]): this => {\r\n        // make the original equations\r\n        this.#equations = equations.map(value => new Equation(value))\r\n\r\n        // get the letters.\r\n        this.#findLetters()\r\n        return this\r\n    }\r\n\r\n    public clone = (): LinearSystem => {\r\n        return new LinearSystem()\r\n            .parse(...this.#equations.map(equ => equ.clone()))\r\n    }\r\n\r\n    public static fromMatrix(\r\n        matrix: InputValue<Fraction>[][],\r\n        letters = 'xyz'): LinearSystem {\r\n        // Check that each row has the same number of columns\r\n        const cols = matrix[0].length\r\n        if (matrix.some(row => row.length !== cols)) {\r\n            throw new Error(\"All rows must have the same number of columns\")\r\n        }\r\n\r\n        // Determine the default letters. The number of letters are cols-1\r\n        const vars = letters.split('')\r\n            .splice(0, cols - 1)\r\n\r\n        // Create a new LinearSystem\r\n        return new LinearSystem(\r\n            ...matrix.map(row => {\r\n                const P = new Polynom(vars.join(''), ...row)\r\n                return new Equation(P, 0)\r\n            })\r\n        )\r\n\r\n    }\r\n\r\n    public add(value: InputValue<LinearSystem | Equation | Polynom>, index?: number): this {\r\n        if (value instanceof LinearSystem) {\r\n            const length = value.equations.length\r\n            if (length !== this.#equations.length) {\r\n                throw new Error(\"The number of equations must be the same\")\r\n            }\r\n\r\n            for (let i = 0; i < length; i++) {\r\n                this.#equations[i].add(value.equations[i])\r\n            }\r\n        } else {\r\n            if (index === undefined || index < 0 || index >= this.#equations.length) {\r\n                throw new Error(\"Index out of range\")\r\n            }\r\n            const equ = new Equation(value)\r\n            this.#equations[index].add(equ)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    public buildTex = (equations: Equation[], operators?: (string[])[]): string => {\r\n        let equStr: string[]\r\n        let m: Monom\r\n        let letters: string[] = []\r\n        const equArray: string[] = []\r\n\r\n        // Get the letters from the linear system\r\n        for (const equ of equations) {\r\n            letters = letters.concat(equ.letters())\r\n        }\r\n\r\n        letters = [...new Set(letters)]\r\n        letters.sort()\r\n\r\n        for (let i = 0; i < equations.length; i++) {\r\n            const equ = equations[i]\r\n\r\n            equStr = []\r\n            for (const L of letters) {\r\n                m = equ.left.monomByLetter(L)\r\n\r\n                if (equStr.length === 0) {\r\n                    equStr.push(m.isZero() ? '' : m.tex)\r\n                } else {\r\n                    equStr.push(m.isZero() ? '' : ((m.coefficient.sign() === 1) ? '+' : '') + m.tex)\r\n                }\r\n            }\r\n\r\n            // Add the equal sign\r\n            equStr.push('=')\r\n\r\n            // Add the right hand part of the equation (should be only a number, because it has been reordered)\r\n            equStr.push(equ.right.tex)\r\n\r\n            // Add the operations if existing\r\n            if (operators?.[i] !== undefined) {\r\n                // add extra space at the end of the equation\r\n                equStr[equStr.length - 1] = equStr[equStr.length - 1] + ' \\\\phantom{\\\\quad}'\r\n                for (const o of operators[i]) {\r\n                    equStr.push(`\\\\ \\\\cdot\\\\ ${o.startsWith('-') ? \"\\\\left(\" + o + \"\\\\right)\" : o}`)\r\n                }\r\n            }\r\n\r\n            // Add to the list.\r\n            equArray.push(equStr.join('&'))\r\n        }\r\n\r\n        let operatorsColumns = 0\r\n        if (operators !== undefined && operators.length > 0) {\r\n            operatorsColumns = operators[0].length\r\n        }\r\n\r\n        return `\\\\left\\\\{\\\\begin{array}{${\"r\".repeat(letters.length)}cl ${\"|l\".repeat(operatorsColumns)}}${equArray.join('\\\\\\\\ ')}\\\\end{array}\\\\right.`\r\n    }\r\n\r\n    public degree(letter?: string): Fraction {\r\n        return Fraction.max(...this.#equations.map(equ => equ.degree(letter)))\r\n    }\r\n\r\n    get display() {\r\n        // TODO : LinearSystem - display: implement the display of the linear system\r\n        return this.tex + 'as display'\r\n    }\r\n\r\n    // ------------------------------------------\r\n    public get equations(): Equation[] {\r\n        return this.#equations\r\n    }\r\n\r\n    public set equations(value) {\r\n        this.#equations = value\r\n    }\r\n\r\n    public evaluate(values: InputValue<Fraction> | literalType<number | Fraction>, asNumeric?: boolean): number | Fraction {\r\n        throw new Error(\"Method not implemented.\")\r\n    }\r\n\r\n    public hasVariable(letter: string): boolean {\r\n        return this.#variables.includes(letter)\r\n    }\r\n\r\n    public isEqual(value: LinearSystem): boolean {\r\n        return this.equations.every((equ, index) => equ.isEqual(value.equations[index]))\r\n    }\r\n\r\n    public get isSolvable(): boolean {\r\n        const V = this.variables\r\n\r\n        // TODO: in some case, it is possible to resolve systems if there isn't the isSame number of vars and equations\r\n        if (V.length !== this.#equations.length) {\r\n            return false\r\n        }\r\n\r\n        //TODO: Must check if two equations isn't a linear combination of the others ?\r\n\r\n        return true\r\n    }\r\n\r\n    public get matrix(): [Fraction[][], Fraction[]] {\r\n        //TODO: use Matrix class\r\n        return this.#makeMatrix()\r\n    }\r\n\r\n    public mergeEquations = (eq1: Equation, eq2: Equation, factor1: Fraction, factor2: Fraction): Equation => {\r\n        // Set and clone the equations.\r\n\r\n        const eq1multiplied = eq1.clone().multiply(new Fraction(factor1)),\r\n            eq2multiplied = eq2.clone().multiply(new Fraction(factor2))\r\n\r\n        // Add both equations together.\r\n        eq1multiplied.left.add(eq2multiplied.left)\r\n        eq1multiplied.right.add(eq2multiplied.right)\r\n\r\n        return eq1multiplied\r\n    }\r\n\r\n    public multiply(value: InputValue<Fraction> | InputValue<Fraction>[], index?: number): this {\r\n        // Multiply the system by a number\r\n        // the value can be an array of numbers\r\n        // the value can be a number and the index of the equation to multiply\r\n        if (Array.isArray(value)) {\r\n            if (value.length !== this.#equations.length) {\r\n                throw new Error(\"The number of values must be the same as the number of equations\")\r\n            }\r\n\r\n            for (let i = 0; i < value.length; i++) {\r\n                this.#equations[i].multiply(value[i])\r\n            }\r\n            return this\r\n        }\r\n\r\n        if (index === undefined || index < 0 || index >= this.#equations.length) {\r\n            throw new Error(\"Index out of range\")\r\n        }\r\n\r\n        this.#equations[index].multiply(value)\r\n\r\n        return this\r\n    }\r\n\r\n    public reduce(): LinearSystem {\r\n        throw new Error(\"Method not implemented.\")\r\n    }\r\n\r\n    // ------------------------------------------\r\n    public reorder = (): this => {\r\n        for (const E of this.#equations) {\r\n            E.reorder()\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    solve(): ISolution[] {\r\n        return []\r\n    }\r\n\r\n    public solveMatrix = (): Fraction[] => {\r\n        const [matrix, vector] = this.matrix\r\n        // Solve the matrix\r\n\r\n        // console.log(matrix.map(row=>row.map(x=>x.display)))\r\n        // console.log(vector.map(x=>x.display))\r\n\r\n        // Make the augmented matrix (matrix + vector)\r\n        const augmentedMatrix: Fraction[][] = matrix.map((row, index) => [...row, vector[index]])\r\n\r\n        // Reduce the matrix\r\n        for (let i = 0; i < matrix.length; i++) {\r\n            // Find the pivot (the first non-zero element in the row)\r\n            let pivot = augmentedMatrix[i][i].clone()\r\n            if (pivot.isZero()) {\r\n                // throw new Error('Divide by zero !')\r\n                // Search a line below that would add it.\r\n                const row_to_add = augmentedMatrix\r\n                    .find((row, index) => {\r\n                        return index > i && !row[i].isZero()\r\n                    })\r\n\r\n                if (row_to_add) {\r\n                    augmentedMatrix[i].forEach((value, index) => value.add(row_to_add[index]))\r\n                    pivot = augmentedMatrix[i][i].clone()\r\n                } else {\r\n                    throw new Error('Unsolvable...')\r\n                }\r\n\r\n\r\n            }\r\n\r\n            // Normalize the row: divide all elements by the pivot\r\n            // the pivot is now 1\r\n            augmentedMatrix[i] = augmentedMatrix[i].map(x => x.divide(pivot))\r\n\r\n            // reduce the other rows using the pivot.\r\n            for (let j = 0; j < matrix.length; j++) {\r\n                if (j === i) {\r\n                    continue\r\n                }\r\n\r\n                const factor = augmentedMatrix[j][i].clone().opposite()\r\n                for (let k = 0; k < augmentedMatrix[j].length; k++) {\r\n                    augmentedMatrix[j][k].add(augmentedMatrix[i][k].clone().multiply(factor))\r\n                }\r\n\r\n                // Check if the system is undetermined (no solution or infinite solutions)\r\n                // the j line must not be all zeros\r\n                // the last element must be zero => the system is undetermined\r\n                // the last element must not be zero => the system is impossible\r\n                if (augmentedMatrix[j].slice(0, augmentedMatrix[j].length - 1).every(x => x.isZero())) {\r\n                    if (augmentedMatrix[j][augmentedMatrix[j].length - 1].isZero()) {\r\n                        return [new Fraction().infinite()]\r\n                    } else {\r\n                        return []\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return augmentedMatrix.map(x => x[x.length - 1])\r\n    }\r\n\r\n    public subtract(value: InputValue<LinearSystem | Equation | Polynom>, index?: number): this {\r\n        if (value instanceof LinearSystem) {\r\n            const length = value.equations.length\r\n            if (length !== this.#equations.length) {\r\n                throw new Error(\"The number of equations must be the same\")\r\n            }\r\n\r\n            for (let i = 0; i < length; i++) {\r\n                this.#equations[i].subtract(value.equations[i])\r\n            }\r\n        } else {\r\n            if (index === undefined || index < 0 || index >= this.#equations.length) {\r\n                throw new Error(\"Index out of range\")\r\n            }\r\n            const equ = new Equation(value)\r\n            this.#equations[index].subtract(equ)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    public get tex(): string {\r\n        // Build the array of values.\r\n        // Reorder\r\n        // This clone the system :!!!\r\n        //TODO: Avoid cloning this linear system\r\n        const LS = this.clone().reorder()\r\n\r\n        return this.buildTex(LS.equations)\r\n    }\r\n\r\n    public get variables(): string[] {\r\n        return this.#variables\r\n    }\r\n\r\n    public set variables(value: string | string[]) {\r\n        const vars = (typeof value === \"string\") ? value.split('') : [...value]\r\n        vars.sort()\r\n        this.#variables = vars\r\n    }\r\n\r\n    #findLetters = (): this => {\r\n        this.#variables = this.#equations.reduce((acc: string[], equ) => {\r\n            return [...new Set([...acc, ...equ.variables])]\r\n        }, [])\r\n        //\r\n        // // Find all letters used.\r\n        // let variables = new Set<string>()\r\n        //\r\n        // for (const equ of this.#equations) {\r\n        //     variables = new Set([...variables, ...equ.variables])\r\n        // }\r\n        //\r\n        // this.#variables = [...variables]\r\n        this.#variables.sort()\r\n        return this\r\n    }\r\n\r\n    #makeMatrix = (): [Fraction[][], Fraction[]] => {\r\n        // Make the matrix\r\n        const matrix: Fraction[][] = []\r\n        const vector: Fraction[] = []\r\n\r\n        for (const E of this.#equations) {\r\n            const row: Fraction[] = []\r\n\r\n            const equ = E.clone().reorder()\r\n            for (const L of this.variables) {\r\n                const m = equ.left.monomByLetter(L)\r\n                row.push(m.coefficient)\r\n            }\r\n\r\n            // Add the \"no letter part\"\r\n            vector.push(equ.right.monoms[0].coefficient)\r\n\r\n            // Add to the matrix\r\n            matrix.push(row)\r\n        }\r\n\r\n        return [matrix, vector]\r\n    }\r\n\r\n}\r\n","/**\r\n * Polynom module contains everything necessary to handle polynoms.\r\n * @module Logicalset\r\n */\r\nimport {ShutingYard, ShutingyardMode} from \"piexpression\"\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n */\r\nexport class LogicalSet {\r\n    #rpn: { token: string, tokenType: string }[]\r\n\r\n    /**\r\n     *\r\n     * @param {string} value (optional) Default polynom to parse on class creation\r\n     */\r\n    constructor(value?: string) {\r\n        this.#rpn = []\r\n\r\n        if (value !== undefined) {\r\n            this.parse(value)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    parse = (value: string): this => {\r\n        // Parse the updated value to the shutingyard algorithm\r\n        this.#rpn = new ShutingYard(ShutingyardMode.SET)\r\n            .parse(value)\r\n            .rpn\r\n\r\n        return this\r\n    }\r\n\r\n    evaluate(values: Record<string, boolean>): boolean {\r\n        // Add missing key(s) and set them as false by default.\r\n        this.variables.forEach(key => {\r\n            if (!Object.hasOwn(values, key)) {\r\n                values[key] = false\r\n            }\r\n        })\r\n\r\n        const stack: boolean[] = []\r\n        for (const token of this.#rpn) {\r\n            console.log(token)\r\n            if (token.tokenType === 'variable') {\r\n                stack.push(values[token.token])\r\n            } else if (token.tokenType === 'operation') {\r\n                if (token.token === '!') {\r\n                    // need only one item from stack\r\n                    if (stack.length >= 1) {\r\n                        const a = stack.pop()\r\n                        stack.push(!a)\r\n                    } else {\r\n                        return false\r\n                    }\r\n                } else {\r\n                    // All other operations needs two items from stack\r\n                    const a = stack.pop()\r\n                    const b = stack.pop()\r\n                    if (a !== undefined && b !== undefined) {\r\n                        switch (token.token) {\r\n                            case \"&\":\r\n                                stack.push(a && b)\r\n                                break\r\n                            case \"|\":\r\n                                stack.push(a || b)\r\n                                break\r\n                            case \"-\":\r\n                                return false\r\n                        }\r\n\r\n                    } else {\r\n                        return false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return stack.length === 1 && stack[0]\r\n    }\r\n\r\n    get rpn(): { token: string, tokenType: string }[] {\r\n        return this.#rpn\r\n    }\r\n\r\n    get tex(): string {\r\n        const varStack: { token: string, tokenType: string }[] = []\r\n\r\n        for (const token of this.#rpn) {\r\n            if (token.tokenType === 'variable') {\r\n                varStack.push(token)\r\n            } else {\r\n                switch (token.token) {\r\n                    case '&':\r\n                        if (varStack.length >= 2) {\r\n                            const second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if (second && first) {\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\cap ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                        }\r\n                        break\r\n                    case '|':\r\n                        if (varStack.length >= 2) {\r\n                            const second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if (second && first) {\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\cup ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                        }\r\n                        break\r\n                    case '-':\r\n                        if (varStack.length >= 2) {\r\n                            const second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if (second && first) {\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\setminus ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                        }\r\n                        break\r\n                    case '!':\r\n                        if (varStack.length >= 1) {\r\n                            const first = varStack.pop()\r\n\r\n                            if (first) {\r\n                                varStack.push({token: `\\\\overline{ ${first.token} }`, tokenType: 'variable'})\r\n                            }\r\n                        }\r\n                        break\r\n                }\r\n            }\r\n        }\r\n\r\n        return varStack[0].token\r\n    }\r\n\r\n    get variables(): string[] {\r\n        return this.#rpn\r\n            .filter(value => value.tokenType === 'variable')\r\n            .map(value => value.token)\r\n    }\r\n\r\n    vennAB(): string[] {\r\n        return this.#evaluateAsVenn({\r\n                A: ['A', 'AB'],\r\n                B: ['B', 'AB']\r\n            },\r\n            ['A', 'B', 'AB', 'E']\r\n        )\r\n    }\r\n\r\n    vennABC(): string[] {\r\n        return this.#evaluateAsVenn({\r\n                A: ['A', 'AB', 'AC', 'ABC'],\r\n                B: ['B', 'AB', 'BC', 'ABC'],\r\n                C: ['C', 'AC', 'BC', 'ABC']\r\n            },\r\n            ['A', 'B', 'C', 'AB', 'AC', 'BC', 'ABC', 'E']\r\n        )\r\n    }\r\n\r\n    #evaluateAsVenn(tokenSets: Record<string, string[] | undefined>, reference?: string[]): string[] {\r\n        const varStack: (Set<string>)[] = []\r\n\r\n        let referenceSet: Set<string>\r\n        if (reference === undefined) {\r\n            referenceSet = new Set()\r\n            for (const key in tokenSets) {\r\n                referenceSet = new Set([\r\n                    ...referenceSet,\r\n                    ...(tokenSets[key] ?? [])\r\n                ])\r\n            }\r\n        } else {\r\n            referenceSet = new Set(reference)\r\n        }\r\n\r\n        for (const token of this.#rpn) {\r\n            if (token.tokenType === 'variable') {\r\n                // The variable has no token - assume it's empty.\r\n                if (tokenSets[token.token] === undefined) {\r\n                    varStack.push(new Set())\r\n                } else {\r\n                    varStack.push(new Set(tokenSets[token.token]))\r\n                }\r\n\r\n            } else {\r\n                switch (token.token) {\r\n                    case '&':\r\n                        if (varStack.length >= 2) {\r\n                            const second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if (first && second) {\r\n                                varStack.push(new Set([...first].filter(x => second.has(x))))\r\n                            }\r\n                        }\r\n                        break\r\n                    case '|':\r\n                        if (varStack.length >= 2) {\r\n                            const second = varStack.pop(),\r\n                                first = varStack.pop()\r\n                            if (first && second) {\r\n                                varStack.push(new Set([...first, ...second]))\r\n                            }\r\n                        }\r\n                        break\r\n                    case '-':\r\n                        if (varStack.length >= 2) {\r\n                            const second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if (first && second) {\r\n                                varStack.push(new Set([...first].filter(x => !second.has(x))))\r\n                            }\r\n                        }\r\n                        break\r\n                    case '!':\r\n                        if (varStack.length >= 1) {\r\n                            const first = varStack.pop()\r\n\r\n                            if (first) {\r\n                                varStack.push(new Set([...referenceSet].filter(x => !first.has(x))))\r\n                            }\r\n                        }\r\n                        break\r\n                }\r\n            }\r\n        }\r\n\r\n        return [...varStack[0]].sort()\r\n    }\r\n}","import type {\r\n    FACTOR_TABLE_OF_SIGNS,\r\n    IAlgebra,\r\n    IExpression,\r\n    InputAlgebra,\r\n    InputValue,\r\n    IPiMathObject,\r\n    ISolution,\r\n    literalType,\r\n    POLYFACTOR_TABLE_OF_SIGNS,\r\n    TABLE_OF_SIGNS_VALUES\r\n} from \"../pimath.interface\"\r\nimport {Fraction} from \"../coefficients\"\r\nimport {Factor, FACTOR_DISPLAY} from \"./factor\"\r\nimport {Polynom} from \"./polynom\"\r\n\r\n\r\n// PolyFactor is a class that represents a polynomial in factored form.\r\nexport class PolyFactor implements IPiMathObject<PolyFactor>,\r\n    IExpression<PolyFactor>,\r\n    IAlgebra<PolyFactor> {\r\n\r\n    #displayMode: FACTOR_DISPLAY = FACTOR_DISPLAY.POWER\r\n    #factors: Factor[] = []\r\n\r\n    constructor(...values: (Factor | PolyFactor)[]) {\r\n        this.parse(...values)\r\n        return this\r\n    }\r\n\r\n    public parse(...values: (Factor | PolyFactor)[]): this {\r\n        // Init the factors list\r\n        this.#factors = []\r\n\r\n        // Nothing to create\r\n        if (values.length === 0) {\r\n            return this\r\n        }\r\n\r\n        values.forEach(value => {\r\n            if (value instanceof PolyFactor) {\r\n                this.#factors.push(...value.factors.map(f => f.clone()))\r\n            } else {\r\n                this.#factors.push(new Factor(value))\r\n            }\r\n        })\r\n\r\n        return this\r\n    }\r\n\r\n    public clone(): PolyFactor {\r\n        return new PolyFactor(...this.#factors.map(f => f.clone()))\r\n    }\r\n\r\n    public get tex(): string {\r\n        const {num, den} = this.#extractNumeratorAndDenominator()\r\n\r\n        if (den.length === 0) {\r\n            if (num.length === 1) {\r\n                return num[0].asSingle.tex\r\n            }\r\n\r\n            return num.map(f => f.tex).join(\"\")\r\n        }\r\n\r\n        // There is a numerator and a denominator\r\n        const numTeX = num.length === 1 ? num[0].asSingle.tex : num.map(f => f.tex).join(\"\")\r\n        const denTeX = den.length === 1 ? den[0].asSingle.tex : den.map(f => f.tex).join(\"\")\r\n\r\n        return `\\\\frac{ ${numTeX} }{ ${denTeX} }`\r\n\r\n    }\r\n\r\n    public get display(): string {\r\n        const {num, den} = this.#extractNumeratorAndDenominator()\r\n\r\n        if (den.length === 0) {\r\n            if (num.length === 1) {\r\n                return num[0].asSingle.display\r\n            }\r\n\r\n            return num.map((f, index) =>\r\n                index === 0 && f.polynom.monoms.length === 1 ? f.asSingle.display : f.display\r\n            ).join(\"\")\r\n        }\r\n\r\n        // There is a numerator and a denominator\r\n        const numTeX = num.length === 1 ? num[0].asSingle.display : num.map(f => f.display).join(\"\")\r\n        const denTeX = den.length === 1 ? den[0].asSingle.display : den.map(f => f.display).join(\"\")\r\n\r\n        return `(${numTeX})/(${denTeX})`\r\n\r\n    }\r\n\r\n    static #gcdWith(PF1: PolyFactor, PF2: PolyFactor): PolyFactor {\r\n        // Get all factors of the two polynomials\r\n        // Find the common factors\r\n        const factors1 = keyFactors(PF1)\r\n\r\n        const factors2 = keyFactors(PF2)\r\n\r\n        const common = Object.keys(factors1).filter(k => Object.hasOwn(factors2, k))\r\n\r\n        // Find the minimum power of the common factors\r\n        const factors = common.map(k => {\r\n            const power = factors1[k].reduce((acc, f) => acc.add(f.power), new Fraction('0'))\r\n            const power2 = factors2[k].reduce((acc, f) => acc.add(f.power), new Fraction('0'))\r\n            return new Factor(k, Fraction.min(power, power2))\r\n        })\r\n\r\n        return new PolyFactor(...factors)\r\n    }\r\n\r\n    static #lcmWith(PF1: PolyFactor, PF2: PolyFactor): PolyFactor {\r\n\r\n        const factors1 = keyFactors(PF1)\r\n\r\n        const factors2 = keyFactors(PF2)\r\n\r\n        const common = [...new Set([...Object.keys(factors1), ...Object.keys(factors2)])]\r\n\r\n        // Find the maximum power of the common factors\r\n        const factors = common.map(k => {\r\n            const power =\r\n                Object.hasOwn(factors1, k) ?\r\n                    factors1[k].reduce((acc, f) => acc.add(f.power), new Fraction('0')) :\r\n                    new Fraction(0)\r\n            const power2 = Object.hasOwn(factors2, k) ?\r\n                factors2[k].reduce((acc, f) => acc.add(f.power), new Fraction('0')) :\r\n                new Fraction(0)\r\n            return new Factor(k, Fraction.max(power, power2))\r\n        })\r\n\r\n        return new PolyFactor(...factors)\r\n    }\r\n\r\n    public static gcd(...values: PolyFactor[]): PolyFactor {\r\n        if (values.length === 0) {\r\n            return new PolyFactor().one()\r\n        }\r\n        if (values.length === 1) {\r\n            return values[0]\r\n        }\r\n        if (values.length === 2) {\r\n            return PolyFactor.#gcdWith(values[0], values[1])\r\n        }\r\n\r\n        // values is not undefined,\r\n        let PF = values[0]\r\n        values.shift()\r\n        values.forEach(value => PF = PolyFactor.#gcdWith(PF, value))\r\n\r\n        return PF\r\n    }\r\n\r\n    public static lcm(...values: PolyFactor[]): PolyFactor {\r\n        if (values.length === 0) {\r\n            return new PolyFactor().one()\r\n        }\r\n        if (values.length === 1) {\r\n            return values[0]\r\n        }\r\n\r\n        let PF = values[0]\r\n        values.shift()\r\n        values.forEach(value => PF = PolyFactor.#lcmWith(PF, value))\r\n        return PF\r\n    }\r\n\r\n    public add(...values: PolyFactor[]): this {\r\n        // Adding two (or more) polyfactors:\r\n        // if both are numerators only, use the common polynom\r\n        // if there are denominators, multiply every polyfactors to match the lcm polyfactor.\r\n\r\n        const numerators: PolyFactor[] = [this.numerator, ...values.map(x => x.numerator)]\r\n        const denominators: PolyFactor[] = [this.denominator, ...values.map(x => x.denominator)]\r\n\r\n        let denominator: PolyFactor | undefined\r\n        if (denominators.some(d => d.factors.length > 0)) {\r\n            // At least one of the denominators is not empty.\r\n            const lcm = PolyFactor.lcm(...denominators)\r\n\r\n            // Multiply each numerators by the complementary.\r\n            numerators.forEach((n, index) => {\r\n                n.multiply(lcm.clone().divide(denominators[index]))\r\n            })\r\n\r\n            // Set the common denominator to the lcm PolyFctor\r\n            denominator = lcm\r\n        }\r\n\r\n        // Now, every polyfactor should have a common denominator. Just add the numerators.\r\n        const gcd = PolyFactor.gcd(...numerators)\r\n        const remainingPolynom = new Polynom(0)\r\n            .add(...numerators.map(pf => {\r\n                    return pf\r\n                        .divide(gcd).reduce()\r\n                        .develop() // should be a polyfactor with one factor, with a power of 1\r\n                        .factors[0]\r\n                        .polynom\r\n                })\r\n            ).reduce()\r\n\r\n        this.#factors = [\r\n            ...gcd.factors,\r\n            new Factor(remainingPolynom)\r\n        ]\r\n\r\n        if (denominator) {\r\n            this.divide(denominator)\r\n        }\r\n\r\n        // Remove all factors with a power of zero\r\n        this.#factors = this.#factors.filter(x => !x.power.isZero())\r\n\r\n        return this\r\n    }\r\n\r\n    get asPower(): this {\r\n        this.#displayMode = FACTOR_DISPLAY.POWER\r\n        return this\r\n    }\r\n\r\n    get asRoot(): this {\r\n        this.#displayMode = FACTOR_DISPLAY.ROOT\r\n        return this\r\n    }\r\n\r\n    public degree(letter?: string): Fraction {\r\n        return this.#factors.reduce((acc, f) => acc.add(f.degree(letter)), new Fraction('0'))\r\n    }\r\n\r\n    get denominator(): PolyFactor {\r\n        return new PolyFactor(...this.#factors\r\n            .filter(f => f.power.isNegative())\r\n            .map(f => f.clone().inverse())\r\n        )\r\n    }\r\n\r\n    public derivative(): this {\r\n        // (fgh)' = f'gh+fg'h+fgh'\r\n        // dPF = [f'gh, fg'h, fgh']\r\n        const dPF: PolyFactor[] = []\r\n\r\n        const length = this.#factors.length\r\n\r\n        for (let i = 0; i < length; i++) {\r\n            // unchanged factors\r\n            const factors = this.#factors.slice()\r\n            // derivative factor\r\n            const derivativeFactor = factors.splice(i, 1)[0].derivative()\r\n            // Add the product of factors\r\n            dPF.push(\r\n                new PolyFactor(...factors, ...derivativeFactor))\r\n        }\r\n\r\n        // Reduce the polyFactors\r\n        dPF.forEach(pf => pf.reduce())\r\n\r\n        const first = dPF.shift()\r\n        if (first !== undefined) {\r\n            this.#factors = first.factors\r\n        }\r\n\r\n        // Add each factors together.\r\n        return this.add(...dPF)\r\n    }\r\n\r\n    public develop(): PolyFactor {\r\n        // Develop each factor and multiply them\r\n        const N = new Polynom('1')\r\n        const D = new Polynom('1')\r\n\r\n        this.numerator.factors.forEach(f => {\r\n            N.multiply(f.develop())\r\n        })\r\n        this.denominator.factors.forEach(f => {\r\n            D.multiply(f.develop())\r\n        })\r\n\r\n        return new PolyFactor().fromPolynom(N, D)\r\n    }\r\n\r\n    public divide(value: PolyFactor): this {\r\n        this.#factors = this.#factors.concat(value.clone().factors.map(f => f.inverse()))\r\n        return this\r\n    }\r\n\r\n    public evaluate(values: InputValue<Fraction> | literalType<number | Fraction>, asNumeric?: boolean): number | Fraction {\r\n        if (asNumeric) {\r\n            return this.#factors\r\n                .reduce((acc, f) => acc * (f.evaluate(values, asNumeric) as number), 1)\r\n        }\r\n\r\n        return this.#factors\r\n            .reduce((acc, f) => acc.multiply(f.evaluate(values)), new Fraction('1'))\r\n    }\r\n\r\n    public factorize(letter?: string): PolyFactor {\r\n        // Go through each factors.\r\n        // If it can be factorized, remove the factor (set its power to zero) and insert the new factors instead.\r\n        const newFactors: Factor[] = []\r\n\r\n        this.#factors.forEach(factor => {\r\n            const factors = factor.polynom.factorize(letter)\r\n            if (factors.length > 1) {\r\n                const pow = factor.power.clone()\r\n                newFactors.push(...factors.map(x => new Factor(x, pow)))\r\n            } else {\r\n                newFactors.push(factor.clone())\r\n            }\r\n        })\r\n\r\n        const result = new PolyFactor(...newFactors)\r\n        const numerator = result.numerator.reduce()\r\n        const denominator = result.denominator.reduce()\r\n\r\n        return numerator.divide(denominator)\r\n    }\r\n\r\n    public get factors(): Factor[] {\r\n        return this.#factors\r\n    }\r\n\r\n    public set factors(value: Factor[]) {\r\n        this.#factors = value\r\n    }\r\n\r\n    public fromPolynom(numerator: InputAlgebra<Polynom>, denominator?: InputAlgebra<Polynom>): this {\r\n        // fromPolynom loads the numerator and denominator as is, without factorizing !\r\n        this.#factors = [new Factor(new Polynom(numerator))]\r\n\r\n        if (denominator) {\r\n            const polynom = new Polynom(denominator)\r\n\r\n            if (polynom.isOne()) {\r\n                return this\r\n            }\r\n            if (polynom.isZero()) {\r\n                throw new Error(\"Cannot divide by zero\")\r\n            }\r\n            this.#factors.push(new Factor(polynom, -1))\r\n        }\r\n        // // Find all factors from a polynom\r\n        // this.#factors = new Polynom(numerator)\r\n        //     .factorize(letter)\r\n        //     .map(value => new Factor(value))\r\n        //\r\n        // if (denominator) {\r\n        //     new Polynom(denominator)\r\n        //         .factorize(letter)\r\n        //         .forEach(value => this.#factors.push(new Factor(value, -1)))\r\n        // }\r\n\r\n        return this\r\n    }\r\n\r\n    public getZeroes(): ISolution[] {\r\n        // Calculate the list of roots (ordered, unique)\r\n        const roots: ISolution[] = ([] as ISolution[])\r\n            .concat(...this.#factors.map(x => x.polynom.getZeroes()))\r\n        // .concat(...tos.map(x => x.roots))\r\n\r\n        // Sort the values.\r\n        roots.sort((a, b) => a.value - b.value)\r\n        // Remove duplicates.\r\n        return roots\r\n            .filter((value, index, self) =>\r\n                    index === self.findIndex((t) =>\r\n                        t.value === value.value\r\n                    )\r\n            )\r\n    }\r\n\r\n    public hasVariable(letter: string): boolean {\r\n        return this.#factors.some(f => f.hasVariable(letter))\r\n    }\r\n\r\n    public inverse(): this {\r\n        this.#factors = this.#factors.map(f => f.inverse())\r\n        return this\r\n    }\r\n\r\n    public isEqual(value: PolyFactor): boolean {\r\n        const gcd = PolyFactor.gcd(this, value)\r\n\r\n        const PF1 = this.clone().divide(gcd).reduce()\r\n        const PF2 = value.clone().divide(gcd).reduce()\r\n\r\n        return PF1.isOne() && PF2.isOne()\r\n    }\r\n\r\n    public isOne(): boolean {\r\n        return this.#factors.every(f => f.isOne())\r\n    }\r\n\r\n    public isZero(): boolean {\r\n        return this.#factors.every(f => f.isZero())\r\n    }\r\n\r\n    public multiply(...values: PolyFactor[]): this {\r\n        values.forEach(value => {\r\n            this.#factors = this.#factors.concat(value.clone().factors)\r\n        })\r\n\r\n        return this\r\n    }\r\n\r\n    get numerator(): PolyFactor {\r\n        return new PolyFactor(...this.#factors.filter(f => f.power.isPositive()))\r\n    }\r\n\r\n    public one(): this {\r\n        this.#factors = [new Factor('1', '1')]\r\n        return this\r\n    }\r\n\r\n    public opposite(): this {\r\n        // Add the -1 factor or remove if it exists\r\n        const index = this.#factors.findIndex(f => f.display === '(-1)')\r\n\r\n        if (index >= 0) {\r\n            this.#factors.splice(index, 1)\r\n        } else {\r\n            this.#factors.push(new Factor('-1', '1'))\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    public pow(value: number | Fraction): this {\r\n        this.#factors = this.#factors.map(f => f.pow(value))\r\n        return this\r\n    }\r\n\r\n    public primitive(): PolyFactor {\r\n        throw new Error(\"Method not implemented.\")\r\n    }\r\n\r\n    public reduce(): this {\r\n        // Regroup the factors by their base\r\n        const factors = keyFactors(this)\r\n\r\n        // Multiply the factors of the same base\r\n        this.#factors = Object.values(factors)\r\n            .map(f => {\r\n                const base = f[0].polynom\r\n                const power = f.reduce((acc, f) => acc.add(f.power), new Fraction('0'))\r\n                return new Factor(base, power.reduce())\r\n            })\r\n            .filter(f => !f.power.isZero())\r\n\r\n        return this\r\n    }\r\n\r\n    public root(value: number): this {\r\n        this.#factors = this.#factors.map(f => f.root(value))\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Reoarder the factors using :\r\n     * 1. number of monoms\r\n     * 2. degree of polynom\r\n     * 3. power of polyfactor\r\n     */\r\n    public sort(letter?: string): this {\r\n        this.#factors.sort((a, b) => {\r\n            // If the compare powers are opposite, the negative power goes to the end.\r\n            const aPower = a.power.value\r\n            const bPower = b.power.value\r\n            if (aPower * bPower < 0) {\r\n                return -aPower\r\n            }\r\n\r\n\r\n            // Monom length\r\n            const aLength = a.polynom.monoms.length\r\n            const bLength = b.polynom.monoms.length\r\n            if (aLength !== bLength) {\r\n                return aLength - bLength\r\n            }\r\n\r\n            // The monom length are the same, check the polynom degree.\r\n            const aDegree = a.polynom.degree(letter).value\r\n            const bDegree = b.polynom.degree(letter).value\r\n            if (aDegree !== bDegree) {\r\n                return aDegree - bDegree\r\n            }\r\n\r\n            // The power of the PolyFactor\r\n            if (aPower !== bPower) {\r\n                return aPower - bPower\r\n            }\r\n\r\n            return a.degree().isLeq(b.degree()) ? -1 : 1\r\n        })\r\n\r\n        return this\r\n    }\r\n\r\n    public sqrt(): this {\r\n        this.#factors = this.#factors.map(f => f.sqrt())\r\n        return this\r\n    }\r\n\r\n    public subtract(...values: PolyFactor[]): this {\r\n        return this.add(...values.map(f => f.opposite()))\r\n    }\r\n\r\n    public tableOfSigns(): POLYFACTOR_TABLE_OF_SIGNS {\r\n        // Calculate the table of signs for each factor\r\n        const roots = this.getZeroes()\r\n        const roots_key = roots.map(x => x.value)\r\n\r\n        // Get the table of signs of every factors\r\n\r\n\r\n        // These signs are NOT aligned\r\n        const factors: FACTOR_TABLE_OF_SIGNS[] = this.factorize().factors\r\n            .map(factor => {\r\n                return {factor: new Factor(factor), ...factor.tableOfSigns()}\r\n            })\r\n\r\n        // Build the table of signs with extra roots for each factors.\r\n        factors.forEach(item => {\r\n            // Create the new signs row\r\n            const empty_signs: TABLE_OF_SIGNS_VALUES[] = new Array(2 * roots.length + 1).fill('') as unknown as TABLE_OF_SIGNS_VALUES[]\r\n\r\n            let sign = item.signs.shift() as unknown as TABLE_OF_SIGNS_VALUES\r\n            let root = item.roots.shift()\r\n\r\n            const aligned_signs = empty_signs.map((_sign, index) => {\r\n                if (index % 2 === 0) {\r\n                    return sign\r\n                }\r\n\r\n                // The sign for this indexed root is a t(ab)\r\n                if (root === undefined || root.value !== roots_key[(index - 1) / 2]) {\r\n                    return 't'\r\n                }\r\n\r\n                // The indexed root is the new root\r\n                const rootSign = item.signs.shift() as unknown as TABLE_OF_SIGNS_VALUES\r\n\r\n                // Make the new signs.\r\n                sign = item.signs.shift() as unknown as TABLE_OF_SIGNS_VALUES\r\n                root = item.roots.shift()\r\n                return rootSign\r\n            })\r\n\r\n            // Set the roots for this item to all roots\r\n            item.roots = roots\r\n            item.signs = aligned_signs\r\n        })\r\n\r\n        // Build the table of signs with extra roots : reault line\r\n        const signs: TABLE_OF_SIGNS_VALUES[] = factors\r\n            .map((item) => [...item.signs])\r\n            .reduce<TABLE_OF_SIGNS_VALUES[]>((a, b) => {\r\n                if (a.length === 0) {\r\n                    return b\r\n                }\r\n\r\n                // a and b are \"not aligned\"\r\n                b.forEach((value, index) => {\r\n                    // Case of a zero, invalid or tab value\r\n                    // tab < zero < defence\r\n                    switch (value) {\r\n                        case \"d\":\r\n                            a[index] = \"d\"\r\n                            break\r\n                        case \"z\":\r\n                            a[index] = a[index] === \"d\" ? \"d\" : \"z\"\r\n                            break\r\n                        case \"h\":\r\n                            a[index] = \"h\"\r\n                            break\r\n                        case \"-\":\r\n                            a[index] = a[index] === \"h\" ? \"h\" : a[index] === \"-\" ? \"+\" : \"-\"\r\n                            break\r\n                    }\r\n                })\r\n\r\n                return a\r\n            }, [])\r\n\r\n        return {signs, roots, factors}\r\n    }\r\n\r\n    public get variables(): string[] {\r\n        return this.#factors\r\n            .reduce((acc: string[], f: Factor) => acc.concat(f.variables), [])\r\n    }\r\n\r\n    public zero(): this {\r\n        this.#factors = [new Factor('0', '1')]\r\n        return this\r\n    }\r\n\r\n    #extractNumeratorAndDenominator() {\r\n        let num: Factor[],\r\n            den: Factor[] = []\r\n\r\n        if (this.#displayMode === FACTOR_DISPLAY.ROOT) {\r\n            // the power are positive integers\r\n            num = this.numerator.factors\r\n            den = this.denominator.factors\r\n        } else {\r\n            num = this.#factors\r\n        }\r\n\r\n        // There is no factor\r\n        if (num.length === 0) {\r\n            num = [new Factor('1')]\r\n        }\r\n        return {num, den}\r\n    }\r\n\r\n}\r\n\r\nfunction keyFactors(value: PolyFactor): Record<string, Factor[]> {\r\n    const k_numerator = new Fraction().one()\r\n    const k_denominator = new Fraction().one()\r\n\r\n    const kF = value.factors\r\n        .reduce((acc: Record<string, Factor[]>, f) => {\r\n            // It's only a value\r\n            if (f.polynom.degree().isZero()) {\r\n                if (f.power.isPositive()) {\r\n                    k_numerator.multiply(f.polynom.monoms[0].coefficient)\r\n                } else {\r\n                    k_denominator.multiply(f.polynom.monoms[0].coefficient)\r\n                }\r\n\r\n                return acc\r\n            }\r\n\r\n            // It's a polynom\r\n            const base = f.polynom.display\r\n            if (Object.hasOwn(acc, base)) {\r\n                acc[base].push(f)\r\n            } else {\r\n                acc[base] = [f]\r\n            }\r\n\r\n            return acc\r\n        }, {})\r\n\r\n\r\n    const {numerator, denominator} = k_numerator.divide(k_denominator).reduce()\r\n    if(numerator!==1){\r\n        kF[numerator.toString()] = [new Factor(numerator, 1)]\r\n    }\r\n    if(denominator!==1){\r\n        kF[denominator.toString()] = [new Factor(denominator, -1)]\r\n    }\r\n\r\n    return kF\r\n}\r\n","import type {IExpressionMultiply, InputAlgebra, InputValue, IPiMathObject} from \"../pimath.interface\"\r\nimport {Polynom} from \"./polynom\"\r\nimport type {Vector} from \"../geometry\"\r\nimport {operation_pow} from \"./operations\"\r\n\r\nexport type IMatrixValues = InputAlgebra<Polynom>[][]\r\n\r\nexport class Matrix implements IPiMathObject<Matrix>,\r\n    IExpressionMultiply<Matrix> {\r\n    #digits: number | null = null\r\n    #matrix_parenthesis = true\r\n    #values: Polynom[][] = []\r\n\r\n    constructor(rowCount?: number, colCount?: number) {\r\n        if (rowCount) {\r\n            colCount = colCount ?? rowCount\r\n            this.fromDimensions(rowCount, colCount)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    public parse(values: IMatrixValues): this {\r\n        return this.fromValues(values)\r\n\r\n        return this\r\n    }\r\n\r\n    public clone(): Matrix {\r\n        // Copy the matrix.\r\n        const duplicates: IMatrixValues = []\r\n\r\n        this.#values.forEach(row => {\r\n            const dup_row: Polynom[] = []\r\n            row.forEach(value => {\r\n                dup_row.push(value.clone())\r\n            })\r\n\r\n            duplicates.push(dup_row)\r\n        })\r\n\r\n        return new Matrix().fromValues(duplicates)\r\n    }\r\n\r\n    get tex(): string {\r\n        if (this.#values.length === 0) {\r\n            return \"\"\r\n        }\r\n\r\n        const wrapper = this.#matrix_parenthesis ? 'pmatrix' : 'bmatrix'\r\n\r\n\r\n        const output = [\r\n            `\\\\begin{${wrapper}}`,\r\n            ...this.rows\r\n                .map(row => '\\t' + row\r\n                    .map(p => this.#digits !== null && p.value ? +p.value.toFixed(this.#digits):p.tex)\r\n                    .join(' & ') + '\\\\\\\\'\r\n                ),\r\n            `\\\\end{${wrapper}}`\r\n        ].join('\\n')\r\n\r\n        this.#digits = null\r\n\r\n        return output\r\n    }\r\n\r\n    get display(): string {\r\n        if (this.#values.length === 0) {\r\n            return \"\"\r\n        }\r\n\r\n        const wrapper = this.#matrix_parenthesis ? ['(', ')'] : ['[', ']']\r\n\r\n        const output = wrapper[0] +\r\n            this.map(aij => this.#digits !== null && aij.value ? +aij.value.toFixed(this.#digits): aij.display)\r\n                .map(row => `(${row.join(',')})`)\r\n                .join(',') +\r\n            wrapper[1]\r\n\r\n        this.#digits = null\r\n\r\n        return output\r\n    }\r\n\r\n    public add(value: Matrix): this {\r\n        if (!this.canBeAdded(value)) {\r\n            throw new Error(\"Cannot add a matrix with different dimensions.\")\r\n        }\r\n        this.forEach((aij, i, j) => {\r\n            aij.add(value.values[i][j])\r\n        })\r\n\r\n        return this\r\n    }\r\n\r\n    public aij(i: number, j: number) {\r\n        if (i < 0 || i > this.dimension.rows || j < 0 || j > this.dimension.cols) {\r\n            return null\r\n        }\r\n\r\n        return this.#values[i][j]\r\n    }\r\n\r\n    get bmatrix(): this {\r\n        this.#matrix_parenthesis = false\r\n        return this\r\n    }\r\n\r\n    public canBeAdded(matrix: Matrix): boolean {\r\n        const {rows, cols} = this.dimension\r\n        const {rows: rows2, cols: cols2} = matrix.dimension\r\n\r\n        return rows === rows2 && cols === cols2\r\n    }\r\n\r\n    public canBeInverted(): boolean {\r\n        if (!this.isSquare()) {\r\n            return false\r\n        }\r\n\r\n        const determinant = this.determinant()\r\n        if (determinant.isZero()) {\r\n            return false\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    public canBeMultiplied(matrix: Matrix): boolean {\r\n        return this.dimension.cols === matrix.dimension.rows\r\n    }\r\n\r\n    public characteristic_polynom(letter?: string): Polynom {\r\n        letter ??= 'k'\r\n\r\n        return this.clone().subtract(\r\n            new Matrix(this.dimension.rows).one().multiply(new Polynom(letter))\r\n        ).determinant()\r\n    }\r\n\r\n    public cofactor(row: number, column: number): Polynom {\r\n        // Remove a line.\r\n        const coMatrix = this.clone()\r\n\r\n        coMatrix.values.splice(row, 1)\r\n\r\n        // Remove a column\r\n        coMatrix.values.forEach(row => {\r\n            row.splice(column, 1)\r\n        })\r\n\r\n        return coMatrix.determinant().multiply((-1) ** (row + column))\r\n    }\r\n\r\n    get cols(): Polynom[][] {\r\n        // Return the rows of the transposed matrix !\r\n        const arr = Array.from({length: this.dimension.cols}, () => {\r\n            return Array.from({length: this.dimension.rows}, () => new Polynom())\r\n        })\r\n\r\n        this.forEach((aij, i, j) => {\r\n            arr[j][i] = aij\r\n        })\r\n\r\n        return arr\r\n    }\r\n\r\n    public determinant(): Polynom {\r\n        if (!this.isSquare()) {\r\n            throw new Error('Matrix is not square')\r\n        }\r\n\r\n        // Use the first line.\r\n        // For each value, create the cofactor matrix -> get the determinant\r\n        const det = new Polynom()\r\n\r\n        // It's a 1x1 matrix\r\n        if (this.#values.length === 1) {\r\n            return this.#values[0][0].clone()\r\n        }\r\n\r\n        // It's a matrix greater than 1x1\r\n        this.values[0].forEach((aij, column) => {\r\n            const C = this.cofactor(0, column)\r\n            det.add(aij.clone().multiply(C))\r\n        })\r\n\r\n        return det\r\n    }\r\n\r\n    get dimension(): { rows: number, cols: number } {\r\n        return {\r\n            rows: this.#values.length,\r\n            cols: this.#values[0].length,\r\n        }\r\n    }\r\n\r\n    public flat(): Polynom[] {\r\n        return this.#values.flat()\r\n    }\r\n\r\n    public forEach(callback: (aij: Polynom, row: number, column: number) => void): void {\r\n        this.#values.forEach((row, i) => {\r\n            row.forEach((aij, j) => {\r\n                callback(aij, i, j)\r\n            })\r\n        })\r\n    }\r\n\r\n    public fromDimensions(rows: number, cols: number): this {\r\n        this.#values = Array.from({length: rows}, () => {\r\n            return Array.from({length: cols}, () => new Polynom())\r\n        }) as unknown as Polynom[][]\r\n\r\n        return this\r\n    }\r\n\r\n    public fromString(value: string): this {\r\n        // value = ((a,b),(c,d),(e,f))\r\n        if (value.startsWith('((') && value.endsWith(\"))\")) {\r\n            return this.fromString(value.substring(1, value.length - 1))\r\n        }\r\n\r\n        // value = (a,b),(c,d),(e,f)\r\n        const arr = value.split('),(')\r\n\r\n        this.#values = arr\r\n            .map((row, index) => {\r\n                // (a,b or c,d or e,f)\r\n                if (index === 0) {\r\n                    return row.substring(1).split(',')\r\n                } else if (index === arr.length - 1) {\r\n                    return row.substring(0, row.length - 1).split(',')\r\n                }\r\n\r\n                return row.split(',')\r\n            })\r\n            .map(rowItems =>\r\n                rowItems.map(item => new Polynom(item))\r\n            )\r\n\r\n        return this\r\n    }\r\n\r\n    public fromValues(values: IMatrixValues): this {\r\n        this.#values = []\r\n\r\n        // Check dimensions of each rows.\r\n        const L = values[0].length\r\n        if (values.some(row => row.length !== L)) {\r\n            throw new Error(\"Each line must be the same length\")\r\n        }\r\n\r\n        values.forEach(row => {\r\n            const dup_row: Polynom[] = []\r\n            row.forEach(value => {\r\n                dup_row.push(new Polynom(value))\r\n            })\r\n\r\n            this.#values.push(dup_row)\r\n        })\r\n\r\n        return this\r\n    }\r\n\r\n    public fromVectors(...vectors: Vector[]): this {\r\n\r\n        this.#values = []\r\n\r\n        // Each vectors must be the same dimension\r\n        const L = vectors[0].dimension\r\n        if (vectors.some(v => v.dimension !== L)) {\r\n            throw new Error(\"Each vectors must be the same dimension\")\r\n        }\r\n\r\n        this.fromDimensions(vectors[0].dimension, vectors.length)\r\n\r\n        vectors.forEach((vector, column) => {\r\n            vector.array.forEach((value, row) => {\r\n                this.#values[row][column] = new Polynom(value)\r\n            })\r\n        })\r\n\r\n        return this\r\n    }\r\n\r\n    public inverse(): this {\r\n        if (!this.canBeInverted()) {\r\n            throw new Error('The matrix cannot be inverted.')\r\n        }\r\n\r\n        const cofactors_matrix = new Matrix().fromDimensions(this.dimension.rows, this.dimension.cols)\r\n        cofactors_matrix.forEach((_, row, column) => {\r\n            cofactors_matrix.setValue(row, column, this.cofactor(row, column))\r\n        })\r\n\r\n        cofactors_matrix.transpose()\r\n\r\n        // Copy the value to \"this\"\r\n        const determinant = this.determinant()\r\n        cofactors_matrix.forEach((aij, i, j) => this.setValue(i, j, aij.divide(determinant).reduce()))\r\n\r\n        return this\r\n    }\r\n\r\n    public isEqual(value: Matrix): boolean {\r\n        // Two matrix are equals if they are the same dimension and all aij are equals.\r\n        if (!this.canBeAdded(value)) {\r\n            return false\r\n        }\r\n\r\n        let aij_are_equals = true\r\n        this.forEach((aij, row, column) => {\r\n            aij_are_equals &&= aij.isEqual(value.values[row][column])\r\n        })\r\n\r\n        return aij_are_equals\r\n    }\r\n\r\n    public isOne(): boolean {\r\n        for (let row = 0; row < this.#values.length; row++) {\r\n            for (let col = 0; col < this.#values[row].length; col++) {\r\n                if (col === row && !this.#values[row][col].isOne()) {\r\n                    return false\r\n                }\r\n                if (col !== row && !this.#values[row][col].isZero()) {\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    public isSquare(): boolean {\r\n        return this.dimension.cols === this.dimension.rows\r\n    }\r\n\r\n    public isZero(): boolean {\r\n        return this.flat().every(v => v.isZero())\r\n    }\r\n\r\n    public map<T>(callback: (aij: Polynom, row: number, column: number) => T): T[][] {\r\n        const {rows, cols} = this.dimension\r\n\r\n        const arr = Array.from({length: rows}, () => {\r\n            return Array.from({length: cols}, () => undefined as T)\r\n        })\r\n\r\n        this.#values.forEach((row, i) => {\r\n            row.forEach((aij, j) => {\r\n                arr[i][j] = callback(aij, i, j)\r\n            })\r\n        })\r\n\r\n        return arr\r\n    }\r\n\r\n    public multiply(value: InputValue<Polynom> | Matrix): this {\r\n        if (value instanceof Matrix) {\r\n            if (!this.canBeMultiplied(value)) {\r\n                throw new Error(`Cannot multiply a matrix with incompatibles dimensions`)\r\n            }\r\n\r\n            // Multiply two matrix\r\n            const result = new Matrix(this.dimension.rows, value.dimension.cols)\r\n            result.forEach((_, i, j) => {\r\n                // Multiply this.rows[i] by this.cols[j]\r\n                const row = this.rows[i]\r\n                const col = value.cols[j]\r\n\r\n                const v = new Polynom()\r\n\r\n                row.forEach((left, k) => {\r\n                    v.add(left.clone().multiply(col[k]))\r\n                })\r\n\r\n                result.setValue(i, j, v)\r\n            })\r\n\r\n            this.#values = result.values\r\n            return this\r\n        }\r\n\r\n        // Scalar multiplication\r\n        this.forEach((aij, i, j) => {\r\n            this.setValue(i, j, aij.multiply(value))\r\n        })\r\n        return this\r\n    }\r\n\r\n    public one(): this {\r\n        this.forEach((aij, row, column) => {\r\n            if (row === column) {\r\n                aij.one()\r\n            } else {\r\n                aij.zero()\r\n            }\r\n        })\r\n        return this\r\n    }\r\n\r\n    public opposite(): this {\r\n        this.forEach((aij) => {\r\n            aij.opposite()\r\n        })\r\n        return this\r\n    }\r\n\r\n    get pmatrix(): this {\r\n        this.#matrix_parenthesis = true\r\n        return this\r\n    }\r\n\r\n    public pow(value: number): this {\r\n        return operation_pow(this as Matrix, value) as this\r\n    }\r\n\r\n    public reduce(): Matrix {\r\n        throw new Error('Not yet implemented')\r\n    }\r\n\r\n    get rows(): Polynom[][] {\r\n        return this.#values\r\n    }\r\n\r\n    public setValue(row: number, column: number, value: InputAlgebra<Polynom>): this {\r\n        const {rows, cols} = this.dimension\r\n        if ((row < 0 || row >= rows) ||\r\n            column < 0 || column >= cols) {\r\n            throw new Error(`${row}x${column} is out of range (${rows}x${cols})`)\r\n        }\r\n\r\n        this.#values[row][column] = new Polynom(value)\r\n        return this\r\n    }\r\n\r\n    public subtract(value: Matrix): this {\r\n        if (!this.canBeAdded(value)) {\r\n            throw new Error(\"Cannot subtract a matrix with different dimensions.\")\r\n        }\r\n\r\n        this.forEach((aij, i, j) => {\r\n            aij.subtract(value.values[i][j])\r\n        })\r\n\r\n        return this\r\n    }\r\n\r\n    toFixed(value: number): this {\r\n        this.#digits = value\r\n        return this\r\n    }\r\n\r\n    public transpose(): this {\r\n        const temp = this.clone()\r\n\r\n        temp.forEach((aij, i, j) => {\r\n            this.setValue(j, i, aij.clone())\r\n        })\r\n\r\n        return this\r\n    }\r\n\r\n    get values(): Polynom[][] {\r\n        return this.#values\r\n    }\r\n\r\n    public zero(): this {\r\n        this.forEach(aij => aij.zero())\r\n        return this\r\n    }\r\n}","import { Fraction } from \"../coefficients\"\r\nimport type { Vector } from \"./vector\"\r\n\r\ntype V = Vector\r\nexport function areVectorsEquals(v1: V, v2: V): boolean {\r\n    return v1.dimension === v2.dimension &&\r\n        v1.array.every(\r\n            (value, index) => {\r\n                return v2.array[index].isEqual(value)\r\n            })\r\n}\r\n\r\nexport function areVectorsColinears(v1: V, v2: V): boolean {\r\n    if (v1.dimension !== v2.dimension) { return false }\r\n\r\n    // Constant of proportionality\r\n    const k = v2.array[0].value / v1.array[0].value\r\n    return v1.array.every(\r\n        (value, index) => {\r\n            return v2.array[index].value === value.value * k\r\n        })\r\n}\r\n\r\n\r\nexport function dotProduct(v1: V, v2: V): Fraction {\r\n    if (v1.dimension !== v2.dimension) { return new Fraction().invalid() }\r\n\r\n    // Calculate the dot product\r\n    // Why does the reduce not add the last element?\r\n\r\n    return v1.array.reduce(\r\n        (acc, value, index) => {\r\n            return acc.add(value.clone().multiply(v2.array[index]))\r\n        }, new Fraction(0))\r\n}\r\n\r\nexport function determinantFromVectors(...values: V[]): Fraction {\r\n    // TODO: Make it work for vectors of dimension n\r\n    // Check if the vectors are in the same dimension\r\n    if (values.some((value) => value.dimension !== values[0].dimension)) {\r\n        throw new Error('All vectors must have the same dimension')\r\n    }\r\n\r\n    // Check if the vectors are in dimension 2 or 3 and that the number of values is correct\r\n    if (values[0].dimension !== values.length ) {\r\n        throw new Error(`The determinant of dimension ${values[0].dimension} must have the same number of vectors (${values.length} given)`)\r\n    }\r\n\r\n    // Calculate the determinant 2x2\r\n    if (values[0].dimension === 2) {\r\n        return values[0].array[0].clone().multiply(values[1].array[1])\r\n            .subtract(values[0].array[1].clone().multiply(values[1].array[0]))\r\n    }\r\n\r\n    // Calculate the determinant 3x3\r\n    return values[0].array[0].clone()\r\n        .multiply(\r\n            values[1].array[1].clone().multiply(values[2].array[2])\r\n                .subtract(values[1].array[2].clone().multiply(values[2].array[1]))\r\n        )\r\n        .subtract(values[0].array[1].clone()\r\n            .multiply(\r\n                values[1].array[0].clone().multiply(values[2].array[2])\r\n                    .subtract(values[1].array[2].clone().multiply(values[2].array[0]))\r\n            )\r\n        )\r\n        .add(values[0].array[2].clone()\r\n            .multiply(values[1].array[0].clone().multiply(values[2].array[1])\r\n                .subtract(values[1].array[1].clone().multiply(values[2].array[0]))))\r\n}\r\n","/**\r\n * Vector2D module contains everything necessary to handle 2d vectors.\r\n * @module Vector\r\n */\r\nimport type { InputValue, IPiMathObject } from \"../pimath.interface\"\r\nimport { Fraction } from \"../coefficients/fraction\"\r\nimport { Numeric } from \"../numeric\"\r\nimport { areVectorsColinears, areVectorsEquals, dotProduct } from \"./geomMath\"\r\n\r\nexport class Vector implements\r\n    IPiMathObject<Vector> {\r\n    #array: Fraction[] = []\r\n    #asPoint = false\r\n\r\n    constructor(...values: Vector[] | InputValue<Fraction>[]) {\r\n        if (values.length > 0) {\r\n            this.parse(...values)\r\n        }\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get array(): Fraction[] {\r\n        return this.#array\r\n    }\r\n\r\n    set array(value: Fraction[]) {\r\n        this.#array = value\r\n    }\r\n\r\n    get x(): Fraction {\r\n        return this.#array[0]\r\n    }\r\n\r\n    set x(value: Fraction | number | string) {\r\n        this.#array[0] = new Fraction(value)\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this.#array[1]\r\n    }\r\n\r\n    set y(value: Fraction | number | string) {\r\n        this.#array[1] = new Fraction(value)\r\n    }\r\n\r\n    get z(): Fraction {\r\n        if (this.dimension < 3) { throw new Error('Vector is not 3D') }\r\n        return this.#array[2]\r\n    }\r\n\r\n    set z(value: Fraction | number | string) {\r\n        if (this.dimension < 3) { throw new Error('Vector is not 3D') }\r\n        this.#array[2] = new Fraction(value)\r\n    }\r\n\r\n    get asPoint(): boolean {\r\n        return this.#asPoint\r\n    }\r\n\r\n    set asPoint(value: boolean) {\r\n        this.#asPoint = value\r\n    }\r\n\r\n\r\n    get normSquare(): Fraction {\r\n        // Get the norm square of the vector\r\n        return this.array.reduce((acc, x) => acc.add(x.clone().pow(2)), new Fraction(0))\r\n    }\r\n\r\n    get norm(): number {\r\n        return Math.sqrt(this.normSquare.value)\r\n    }\r\n\r\n    get tex(): string {\r\n        if (this.#asPoint) {\r\n            return `\\\\left(${this.array.map(x => x.tex).join(';')}\\\\right)`\r\n        }\r\n\r\n        return `\\\\begin{pmatrix} ${this.array.map(x => x.tex).join(' \\\\\\\\ ')} \\\\end{pmatrix}`\r\n    }\r\n\r\n    get display(): string {\r\n        if (this.#asPoint) {\r\n            return `(${this.array.map(x => x.display).join(';')})`\r\n        }\r\n\r\n        return `((${this.array.map(x => x.display).join(',')}))`\r\n    }\r\n\r\n    setDimension(value = 2): this{\r\n        if (value < 2) {\r\n            throw new Error('Dimension must be at least 2')\r\n        }\r\n\r\n        if (value < this.dimension) {\r\n            this.#array = this.#array.slice(0, value)\r\n        } else if(value > this.dimension) {\r\n            for(let i = this.dimension; i < value; i++) {\r\n                this.#array.push(new Fraction(0))\r\n            }\r\n        }\r\n\r\n        return this\r\n    }\r\n    get dimension(): number {\r\n        return this.array.length\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    get isNull(): boolean {\r\n        return this.array.every(x => x.isZero())\r\n    }\r\n\r\n    static asTex(...values: string[]): string {\r\n        return `\\\\begin{pmatrix} ${values.join(' \\\\\\\\ ')} \\\\end{pmatrix}`\r\n    }\r\n    static asDisplay(...values: string[]): string {\r\n        return `((${values.join(',')}))`\r\n    }\r\n\r\n    public defineAsPoint(value?: boolean): this {\r\n        this.#asPoint = value !== false\r\n        return this\r\n    }\r\n    public parse(...values: Vector[] | InputValue<Fraction>[]): this {\r\n        if (values.length === 0) {\r\n            throw new Error(`Invalid value`)\r\n        }\r\n\r\n        if (values.length === 1) {\r\n            if (values[0] instanceof Vector) {\r\n                return values[0].clone() as this\r\n            } else if (typeof values[0] === 'string') {\r\n                return this.fromString(values[0])\r\n            } else {\r\n                throw new Error(`Invalid value`)\r\n            }\r\n        }\r\n\r\n        // Two values are given\r\n        if (values.length === 2) {\r\n            const [A, B] = values\r\n\r\n            // The two values are vectors\r\n            if (A instanceof Vector && B instanceof Vector) {\r\n                if (A.dimension !== B.dimension) { throw new Error('Vectors must have the same dimension') }\r\n\r\n                this.#array = B.array.map((x, index) => x.clone().subtract(A.array[index]))\r\n                return this\r\n            }\r\n        }\r\n\r\n        // Two ore more values as number, string, fraction...\r\n        this.#array = values.map(x => new Fraction(x as InputValue<Fraction>))\r\n\r\n        return this\r\n    }\r\n\r\n    public clone(): Vector {\r\n        const V = new Vector()\r\n        V.array = this.copy()\r\n        V.asPoint = this.asPoint\r\n        return V\r\n    }\r\n\r\n    public copy(): Fraction[] {\r\n        return this.#array.map(x => x.clone())\r\n    }\r\n\r\n    zero = (): this => {\r\n        this.#array.forEach(x => x.zero())\r\n        return this\r\n    }\r\n\r\n    one = (): this => {\r\n        this.zero()\r\n        this.x.one()\r\n        return this\r\n    }\r\n\r\n    opposite = (): this => {\r\n        this.#array.forEach(x => x.opposite())\r\n        return this\r\n    }\r\n\r\n    add = (V: Vector): this => {\r\n        this.#array.forEach((x, index) => x.add(V.array[index]))\r\n        return this\r\n    }\r\n\r\n    subtract = (V: Vector): this => {\r\n        return this.add(V.clone().opposite())\r\n    }\r\n\r\n    unit = (): this => {\r\n        const norm = this.norm\r\n        if (norm === 0) {\r\n            return this\r\n        }\r\n\r\n        return this.divideByScalar(norm)\r\n    }\r\n\r\n    middleOf(V1: Vector, V2: Vector): this {\r\n        if (V1.dimension !== V2.dimension) { throw new Error('Vectors must be the same dimension') }\r\n\r\n        this.array = []\r\n        V1.array.forEach((x, index) => {\r\n            this.array.push(x.clone().add(V2.array[index]).divide(2))\r\n        })\r\n\r\n        return this\r\n    }\r\n\r\n    translate(...values: Fraction[]): this {\r\n        this.array.forEach((x, index) => x.add(values[index]))\r\n        return this\r\n    }\r\n\r\n\r\n    dot = (V: Vector): Fraction => {\r\n        return dotProduct(this, V)\r\n    }\r\n\r\n    cross(value: Vector): Vector {\r\n        if (this.dimension !== 3 || value.dimension !== 3) {\r\n            throw new Error('Cross product can only be determined in 3D')\r\n        }\r\n\r\n        return new Vector(\r\n            this.y.clone().multiply(value.z).subtract(this.z.clone().multiply(value.y)),\r\n            this.z.clone().multiply(value.x).subtract(this.x.clone().multiply(value.z)),\r\n            this.x.clone().multiply(value.y).subtract(this.y.clone().multiply(value.x))\r\n        )\r\n    }\r\n\r\n    normal = (): this => {\r\n        if (this.dimension >= 3) { throw new Error('Normal vector can only be determined in 2D') }\r\n\r\n        const x = this.x.clone().opposite(),\r\n            y = this.y.clone()\r\n        this.#array[0] = y\r\n        this.#array[1] = x\r\n        return this\r\n    }\r\n\r\n    isZero(): boolean {\r\n        return this.array.every(x => x.isZero())\r\n    }\r\n    isOne(): boolean {\r\n        return this.array.every((x, index) => index === 0 ? x.isOne() : x.isZero())\r\n    }\r\n\r\n    isEqual = (v: Vector): boolean => {\r\n        return areVectorsEquals(this, v)\r\n    }\r\n\r\n    isColinearTo = (v: Vector): boolean => {\r\n        return areVectorsColinears(this, v)\r\n    }\r\n\r\n    isNormalTo = (v: Vector): boolean => {\r\n        return this.dot(v).isZero()\r\n    }\r\n\r\n    multiplyByScalar = (k: InputValue<Fraction>): this => {\r\n        const scalar = new Fraction(k)\r\n        this.array.forEach(x => x.multiply(scalar))\r\n        return this\r\n    }\r\n\r\n    divideByScalar = (k: InputValue<Fraction>): this => {\r\n        return this.multiplyByScalar(new Fraction(k).inverse())\r\n    }\r\n\r\n    simplify = (): this => {\r\n        // Multiply by the lcm of denominators.\r\n        return this\r\n            .multiplyByScalar(\r\n                Numeric.lcm(...this.array.map(x => x.denominator))\r\n            )\r\n            .divideByScalar(\r\n                Numeric.gcd(...this.array.map(x => x.numerator))\r\n            ).\r\n            multiplyByScalar(\r\n                this.x.isNegative() ? -1 : 1\r\n            )\r\n    }\r\n\r\n    angle = (V: Vector, sharp?: boolean, radian?: boolean): number => {\r\n\r\n        let scalar = this.dot(V).value\r\n        if (sharp) {\r\n            scalar = Math.abs(scalar)\r\n        }\r\n\r\n        const toDegree = radian ? 1 : 180 / Math.PI\r\n\r\n        return toDegree * Math.acos(scalar / (this.norm * V.norm))\r\n    }\r\n\r\n\r\n    fromString = (value: string): this => {\r\n        // Remove the first letter if it's a parenthesis.\r\n        if (value.startsWith('(')) {\r\n            value = value.substring(1)\r\n        }\r\n\r\n        // Remove the last letter if it's a parenthesis.\r\n        if (value.endsWith(')')) {\r\n            value = value.substring(0, value.length - 1)\r\n        }\r\n\r\n        // Split comma, semi colon or single space.\r\n        const components = value.split(/[,;\\s]/g)\r\n            .filter((v) => v.trim() !== '')\r\n\r\n        // there must be at least two components.\r\n        if (components.length < 2) {\r\n            return this\r\n        }\r\n\r\n        // Validate the fraction values.\r\n        this.#array = components.map(x => new Fraction(x))\r\n        return this\r\n    }\r\n\r\n    distanceTo(item: Vector): { value: number, fraction: Fraction, tex: string } {\r\n        const V = new Vector(this, item)\r\n\r\n        return {\r\n            value: V.norm,\r\n            fraction: V.normSquare,\r\n            tex: V.tex\r\n        }\r\n    }\r\n}\r\n","import type { Fraction } from \"./coefficients\"\r\nimport type { NthRoot } from \"./coefficients\"\r\nimport type { Monom } from \"./algebra\"\r\nimport type {Factor} from \"./algebra\"\r\nimport type {Line, Point, Vector} from \"./geometry\"\r\nimport type {Equation} from \"./algebra\"\r\n\r\nexport type InputValue<T> = T | string | number | Fraction | NthRoot;\r\nexport type InputAlgebra<T> = InputValue<T> | Monom\r\nexport type literalType<T> = Record<string, T>;\r\n\r\nexport type compareSign =\r\n    '>' | \">=\" | \"=>\" | \"geq\" |\r\n    '<' | \"<=\" | \"=<\" | \"leq\" |\r\n    '=' | \"<>\" | \"neq\" | \"same\";\r\n\r\nexport type EQUATION_SIGN = \"=\" | \"<=\" | \">=\" | \"<\" | \">\"\r\n\r\nexport enum PARTICULAR_SOLUTION {\r\n    real = \"\\\\mathbb{R}\",\r\n    varnothing = \"\\\\varnothing\"\r\n}\r\n\r\nexport interface IPiMathObject<T> {\r\n    readonly tex: string\r\n    readonly display: string\r\n\r\n    clone(): T;\r\n\r\n    parse(...value: unknown[]): T;\r\n}\r\nexport interface IExpressionBase<T>{\r\n    isEqual(value: InputValue<T>): boolean;\r\n\r\n    zero(): T;\r\n\r\n    one(): T;\r\n\r\n    isZero(): boolean;\r\n\r\n    isOne(): boolean;\r\n\r\n    add(value: InputValue<T>): T;\r\n\r\n    subtract(value: InputValue<T>): T;\r\n\r\n    opposite(): T;\r\n\r\n    reduce(): T;\r\n}\r\n\r\nexport interface IExpressionMultiply<T> extends IExpressionBase<T>{\r\n    multiply(value: InputValue<T>): T;\r\n\r\n    pow(value: number): T;\r\n}\r\nexport interface IExpression<T> extends IExpressionMultiply<T>{\r\n    inverse(): T | undefined;\r\n\r\n    divide(value: InputValue<T>): T | null;\r\n\r\n    sqrt(): T | undefined;\r\n\r\n    root(value: number): T | undefined;\r\n}\r\n\r\nexport interface IEquation<T> {\r\n\r\n    reduce(): T;\r\n\r\n    solve(): ISolution[]\r\n}\r\n\r\nexport interface IAlgebra<T> {\r\n    readonly variables: string[];\r\n\r\n    hasVariable(letter: string): boolean;\r\n\r\n    degree(letter?: string): Fraction;\r\n\r\n    evaluate(values: literalType<Fraction | number> | InputValue<Fraction>, asNumeric?: boolean): Fraction | number | boolean;\r\n}\r\n\r\nexport interface IAnalyse<T> {\r\n    derivative(): T | T[];\r\n\r\n    primitive(): T;\r\n\r\n    integrate(a: InputValue<Fraction>, b: InputValue<T>, letter?: string): Fraction;\r\n}\r\n\r\nexport interface ISolution {\r\n    variable: string,\r\n    display: string,\r\n    exact: Fraction | boolean\r\n    tex: string,\r\n    value: number,\r\n}\r\n\r\nexport type TABLE_OF_SIGNS_VALUES = '-'|'+'|'h'|'z'|'t'|'d'|'u'|'n'|''\r\n\r\nexport interface TABLE_OF_SIGNS {roots: ISolution[], signs: TABLE_OF_SIGNS_VALUES[]}\r\nexport interface FACTOR_TABLE_OF_SIGNS extends TABLE_OF_SIGNS {factor: Factor}\r\nexport interface POLYFACTOR_TABLE_OF_SIGNS extends TABLE_OF_SIGNS {\r\n    factors: FACTOR_TABLE_OF_SIGNS[]\r\n}\r\n\r\nexport enum LinePropriety {\r\n    None = 'none',\r\n    Parallel = 'parallel',\r\n    Perpendicular = 'perpendicular',\r\n    Tangent = 'tangent'\r\n}\r\n\r\nexport enum Line3Propriety {\r\n    None = 'none',\r\n    Parallel = 'parallel',\r\n    Perpendicular = 'perpendicular',\r\n    Tangent = 'tangent'\r\n}\r\n\r\nexport interface Plane3Config {\r\n    point?: Point,\r\n    normal?: Vector,\r\n    directions?: Vector[],\r\n    equation?: Equation,\r\n    points?: Point[],\r\n    coefficients?: number[]\r\n}\r\n\r\n\r\nexport interface remarquableLines {\r\n    'medians': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Vector | null\r\n    },\r\n    'mediators': {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line,\r\n        'intersection': Vector | null\r\n    },\r\n    'heights': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Vector | null\r\n    },\r\n    'bisectors': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Vector | null\r\n    },\r\n    externalBisectors: {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Vector | null\r\n    }\r\n}\r\n","/**\r\n * Random helpers\r\n */\r\nimport { Numeric } from \"../numeric\"\r\n\r\n\r\n/**\r\n * Random boolean with a percent ratio\r\n * @param percent\r\n */\r\nexport function randomBool(percent = 0.5): boolean {\r\n    return Math.random() < percent\r\n}\r\n\r\n/**\r\n * Random integer between two values.\r\n * @param a (number) : From this value to the second value. If the second is ommited, this value is the max value.\r\n * @param b (number) : To this value. If this is ommited.\r\n */\r\nexport function randomInt(a: number, b?: number, exclude?: number[]): number {\r\n    if (b === undefined) {\r\n        if (a >= 0) {\r\n            return randomInt(0, a)\r\n        } else {\r\n            return randomInt(a, 0)\r\n        }\r\n    }\r\n\r\n    // Same start and end values\r\n    if (a === b) {\r\n        return a\r\n    }\r\n\r\n    // No exclusion\r\n    if (exclude === undefined) {\r\n        return Math.floor(Math.random() * (b - a + 1) + a)\r\n    }\r\n\r\n    // With exclusion\r\n    if (Math.abs(b - a) <= exclude.length) {\r\n        throw new Error('The number of excluded values is too high.')\r\n    }\r\n\r\n    let r = randomInt(a, b)\r\n    while (exclude.includes(r)) {\r\n        r = randomInt(a, b)\r\n    }\r\n    return r\r\n}\r\n\r\n/**\r\n * Random integer between -max and max value.\r\n * @param max (number) : determine the limits.\r\n * @param zero (bool) : determine if zero is allowed or not.\r\n */\r\nexport function randomIntSym(max: number, zero?: boolean): number {\r\n    if (zero === false) {\r\n        return randomBool() ? randomInt(1, max) : -randomInt(1, max)\r\n    } else {\r\n        return randomInt(-max, max)\r\n    }\r\n}\r\n\r\nexport function randomPrime(max?: number): number {\r\n    let primes = Numeric.primes()\r\n    if (max !== undefined) {\r\n        primes = primes.filter(x => x < max)\r\n    }\r\n    return randomItem(primes)\r\n}\r\n\r\nexport function randomArray<T>(arr: T[], number?: number): T[] {\r\n    if (number === undefined) {\r\n        number = 1\r\n    }\r\n\r\n    // Return a clone array\r\n    if (arr.length <= 0) {\r\n        return Object.values(arr)\r\n    }\r\n\r\n    // Randomize the array and return the n first elements.\r\n    return shuffleArray(arr).slice(0, number)\r\n}\r\n\r\nexport function randomItem<T>(arr: T[]): T {\r\n    if (arr.length === 0) { return null as T }\r\n    return arr[randomInt(0, arr.length - 1)]\r\n}\r\n\r\nexport function shuffleArray<T>(arr: T[]): T[] {\r\n    // The Fisher-Yates algorithm\r\n    const shuffleArray = Object.values(arr)\r\n    for (let i = shuffleArray.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1))\r\n        const temp = shuffleArray[i]\r\n        shuffleArray[i] = shuffleArray[j]\r\n        shuffleArray[j] = temp\r\n    }\r\n\r\n    return shuffleArray\r\n}\r\n","/**\r\n * Vector2D module contains everything necessary to handle 2d vectors.\r\n * @module Point\r\n */\r\n\r\nimport { Fraction } from \"../coefficients/fraction\"\r\nimport type { InputValue } from \"../pimath.interface\"\r\nimport { Vector } from \"./vector\"\r\n\r\nexport class Point extends Vector {\r\n\r\n    constructor()\r\n    constructor(value: Vector)\r\n    constructor(start: Vector, end: Vector)\r\n    constructor(...values: InputValue<Fraction>[])\r\n    constructor(...values: Vector[] | InputValue<Fraction>[]) {\r\n        super()\r\n\r\n        // Initialize the vector\r\n        if (values.length > 0) {\r\n            this.parse(...values)\r\n        }\r\n    };\r\n\r\n    public override parse(...values: Vector[] | InputValue<Fraction>[]): this {\r\n        this.asPoint = true\r\n\r\n        if (values.length === 1) {\r\n            if (values[0] instanceof Vector) {\r\n                this.array = values[0].copy()\r\n                return this\r\n            }\r\n\r\n            if (typeof values[0] === 'string') {\r\n                this.fromString(values[0])\r\n                return this\r\n            }\r\n        }\r\n\r\n\r\n        if (values.length > 1) {\r\n            if (values.some(x => x instanceof Vector)) {\r\n                throw new Error('Creating a point with  multiple argument requires an input fraction')\r\n            }\r\n\r\n            const nbs: Fraction[] = values.map(x => new Fraction(x as InputValue<Fraction>))\r\n\r\n            if (nbs.some(x => x.isNaN())) {\r\n                throw new Error('The value is not a valid point sting (a,b): ' + values.join(','))\r\n            }\r\n\r\n            this.array = nbs\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n\r\n    public override clone(): Point {\r\n        const V = new Point()\r\n        V.array = this.copy()\r\n        V.asPoint = true\r\n        return V\r\n    }\r\n\r\n}\r\n","/**\r\n * This class works for 2d line in a plane.\r\n */\r\n\r\nimport {Numeric} from \"../numeric\"\r\nimport {Fraction} from \"../coefficients/fraction\"\r\nimport {Equation} from \"../algebra/equation\"\r\nimport {Polynom} from \"../algebra/polynom\"\r\nimport {Monom} from \"../algebra/monom\"\r\nimport {Vector} from \"./vector\"\r\nimport {type InputValue, type IPiMathObject, LinePropriety} from \"../pimath.interface\"\r\nimport {randomIntSym} from \"../randomization/rndHelpers\"\r\nimport {Point} from \"./point\"\r\n\r\nexport interface LineConfig {\r\n    direction?: Vector,\r\n    normal?: Vector\r\n    point?: Point,\r\n    points?: Point[],\r\n}\r\n\r\nexport class Line implements IPiMathObject<Line> {\r\n    static PARALLEL = LinePropriety.Parallel\r\n    // A line is defined as the canonical form\r\n    static PERPENDICULAR = LinePropriety.Perpendicular\r\n    #OA: Vector\r\n    // ax + by + c = 0\r\n    #a: Fraction\r\n    #b: Fraction\r\n    #c: Fraction\r\n    #d: Vector\r\n    #n: Vector\r\n    #outputMode: 'canonical' | 'equation' | 'mxh' | 'parametric' | 'system' = \"canonical\"\r\n    #reduceBeforeDisplay: boolean\r\n\r\n    /**\r\n     * Value can be a mix of:\r\n     *\r\n     * @param values\r\n     */\r\n    constructor(...values: unknown[]) {\r\n        this.#a = new Fraction().zero()\r\n        this.#b = new Fraction().zero()\r\n        this.#c = new Fraction().zero()\r\n        this.#OA = new Vector()\r\n        this.#d = new Vector()\r\n        this.#n = new Vector()\r\n\r\n        this.#reduceBeforeDisplay = true\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse data to a line\r\n     * @param {any} values\r\n     * @returns {Line}\r\n     */\r\n    parse = (...values: unknown[]): this => {\r\n        // Nothing is given...\r\n        if (values.length === 0) {\r\n            return this\r\n        }\r\n\r\n        // One value only: already a line (clone it), an Equation, a string (as Equation)\r\n        if (values.length === 1) {\r\n            if (values[0] instanceof Line) {\r\n                // Already a Line\r\n                return this.fromCoefficient(values[0].a, values[0].b, values[0].c)\r\n            } else if (values[0] instanceof Equation) {\r\n                // It's an Equation\r\n                return this.fromEquation(values[0])\r\n            } else if (typeof values[0] === \"string\") {\r\n                // It's a string - create an Equation from it.\r\n                try {\r\n                    const E = new Equation(values[0])\r\n                    return this.parse(E)\r\n                } catch (e) {\r\n                    return this\r\n                }\r\n            }\r\n        }\r\n\r\n        // Two values are given: two vectors\r\n        if (values.length === 2 && values.every(x=>x instanceof Vector)) {\r\n            const formattedValues: Vector[] = values\r\n\r\n            if (formattedValues[0].asPoint && formattedValues[1].asPoint) {\r\n                // Two points\r\n                return this.fromPointAndDirection(formattedValues[0], new Vector(formattedValues[0], formattedValues[1]))\r\n            }\r\n\r\n            if (formattedValues[0].asPoint && !formattedValues[1].asPoint) {\r\n                // One point and one vector director\r\n                return this.fromPointAndDirection(formattedValues[0], formattedValues[1])\r\n            }\r\n\r\n        }\r\n\r\n        if (values.length === 3) {\r\n            if (values[0] instanceof Vector && values[1] instanceof Vector) {\r\n                if (values[2] === LinePropriety.Perpendicular) {\r\n                    return this.fromPointAndNormal(values[0], values[1])\r\n                } else if (values[2] === LinePropriety.Parallel) {\r\n                    return this.fromPointAndDirection(values[0], values[1])\r\n                }\r\n            }\r\n\r\n            if (values[0] instanceof Vector && values[1] instanceof Line) {\r\n                if (values[2] === LinePropriety.Parallel || values[2] === null) {\r\n                    return this.fromPointAndLine(values[0], values[1], LinePropriety.Parallel)\r\n                } else {\r\n                    return this.fromPointAndLine(values[0], values[1], LinePropriety.Perpendicular)\r\n                }\r\n            }\r\n\r\n            return this.fromCoefficient(\r\n                values[0] as InputValue<Fraction>,\r\n                values[1] as InputValue<Fraction>,\r\n                values[2] as InputValue<Fraction>\r\n            )\r\n        }\r\n\r\n        console.log('Something wrong happened while creating the line')\r\n        console.log(values)\r\n        return this\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n\r\n    clone = (): this => {\r\n        this.#a = this.#a.clone()\r\n        this.#b = this.#b.clone()\r\n        this.#c = this.#c.clone()\r\n\r\n        this.#d = this.#d.clone()\r\n        this.#OA = this.#OA.clone()\r\n        this.#n = this.#n.clone()\r\n\r\n        return this\r\n    }\r\n\r\n    get tex(): string {\r\n        // canonical    =>  ax + by + c = 0\r\n        // mxh          =>  y = -a/b x - c/b\r\n        // parametric   =>  (xy) = OA + k*d\r\n        // equation     => ax + by = -c\r\n        const output = this.#outputMode\r\n        this.#outputMode = 'canonical'\r\n        switch (output) {\r\n            case 'equation':\r\n                return this.getEquation().reorder().tex\r\n            case 'mxh':\r\n                return this.slope.isInfinity() ?\r\n                    'x=' + this.OA.x.tex :\r\n                    'y=' + new Polynom().parse('x', this.slope, this.height).tex\r\n            case 'parametric':\r\n            case 'system': {\r\n                const d = this.#d.clone()\r\n                if (this.#reduceBeforeDisplay) {\r\n                    d.simplify()\r\n                }\r\n\r\n                if (output === 'parametric') {\r\n                    return `${Vector.asTex('x', 'y')} = ${Vector.asTex(this.#OA.x.tex, this.#OA.y.tex)} + k\\\\cdot ${Vector.asTex(d.x.tex, d.y.tex)}`\r\n                } else {\r\n                    return `\\\\left\\\\{\\\\begin{aligned}\r\n            x &= ${(new Polynom(this.#OA.x)\r\n                            .add(new Monom(this.#d.x).multiply(new Monom('k'))))\r\n                            .reorder('k', true)\r\n                            .tex}\\\\\\\\ \r\n            y &= ${(new Polynom(this.#OA.y)\r\n                            .add(new Monom(this.#d.y).multiply(new Monom('k'))))\r\n                            .reorder('k', true)\r\n                            .tex}\r\n            \\\\end{aligned}\\\\right.`\r\n                }\r\n            }\r\n            default:\r\n                {\r\n                    const canonical = this.getEquation()\r\n                    if (this.#a.isNegative()) {\r\n                        canonical.multiply(-1)\r\n                    }\r\n                    return canonical.tex\r\n                }\r\n        }\r\n\r\n    }\r\n\r\n    get display(): string {\r\n        // canonical    =>  ax + by + c = 0\r\n        // mxh          =>  y = -a/b x - c/b\r\n        // parametric   =>  (xy) = OA + k*d // not relevant in display mode.\r\n        const output = this.#outputMode\r\n        this.#outputMode = 'canonical'\r\n\r\n        switch (output) {\r\n            case 'equation':\r\n                return this.getEquation().reorder().display\r\n            case 'mxh':\r\n                return this.slope.isInfinity() ?\r\n                    'x=' + this.OA.x.display :\r\n                    'y=' + new Polynom().parse('x', this.slope, this.height).display\r\n            case 'parametric': {\r\n                const d = this.#d.clone()\r\n                if (this.#reduceBeforeDisplay) {\r\n                    d.simplify()\r\n                }\r\n\r\n                return `((x,y))=((${this.#OA.x.display},${this.#OA.y.display}))+k((${d.x.display},${d.y.display}))`\r\n            }\r\n            default: {\r\n                const canonical = this.getEquation()\r\n                // Make sur the first item is positive.\r\n                if (this.#a.isNegative()) {\r\n                    canonical.multiply(-1)\r\n                }\r\n                return canonical.display\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    get OA(): Vector {\r\n        return this.#OA\r\n    }\r\n\r\n    set OA(value: Vector) {\r\n        this.#OA = value\r\n    }\r\n\r\n    get a(): Fraction {\r\n        return this.#a\r\n    }\r\n\r\n    set a(value: Fraction) {\r\n        this.#a = value\r\n    }\r\n\r\n    get b(): Fraction {\r\n        return this.#b\r\n    }\r\n\r\n    set b(value: Fraction) {\r\n        this.#b = value\r\n    }\r\n\r\n    get c(): Fraction {\r\n        return this.#c\r\n    }\r\n\r\n    set c(value: Fraction) {\r\n        this.#c = value\r\n    }\r\n\r\n    // get system(): { x: Equation, y: Equation } {\r\n    //     const e1 = new Equation(\r\n    //         new Polynom('x'),\r\n    //         new Polynom(this.#OA.x)\r\n    //             .add(new Monom('k').multiply(this.#d.x))\r\n    //     ),\r\n    //         e2 = new Equation(\r\n    //             new Polynom('y'),\r\n    //             new Polynom(this.#OA.y)\r\n    //                 .add(new Monom('k').multiply(this.#d.y))\r\n    //         )\r\n\r\n    //     return { x: e1, y: e2 }\r\n    // }\r\n\r\n    get canonical(): this {\r\n        this.#outputMode = 'canonical'\r\n        return this\r\n    }\r\n\r\n    // ------------------------------------------\r\n    canonicalAsFloatCoefficient(decimals?: number): string {\r\n        if (decimals === undefined) {\r\n            decimals = 2\r\n        }\r\n\r\n        let canonical = ''\r\n\r\n        if (!this.#a.isZero()) {\r\n            if (this.#a.isOne()) {\r\n                canonical = 'x'\r\n            } else if (this.#a.clone().opposite().isOne()) {\r\n                canonical = '-x'\r\n            } else {\r\n                canonical = this.#a.value.toFixed(decimals) + 'x'\r\n            }\r\n        }\r\n\r\n        if (!this.#b.isZero()) {\r\n            if (this.#b.isPositive()) {\r\n                canonical += '+'\r\n            }\r\n            canonical += this.#b.value.toFixed(decimals) + 'y'\r\n        }\r\n\r\n        if (!this.#c.isZero()) {\r\n            if (this.#c.isPositive()) {\r\n                canonical += '+'\r\n            }\r\n            canonical += this.#c.value.toFixed(decimals)\r\n        }\r\n\r\n\r\n        return canonical + '=0'\r\n    }\r\n\r\n    get d(): Vector {\r\n        return this.#d\r\n    }\r\n\r\n    set d(value: Vector) {\r\n        this.#d = value\r\n    }\r\n\r\n    get director(): Vector {\r\n        return this.#d.clone()\r\n    }\r\n\r\n    distanceTo(pt: Point): { value: number, fraction: Fraction, tex: string } {\r\n        const numerator = pt.x.clone().multiply(this.#a)\r\n            .add(pt.y.clone().multiply(this.#b))\r\n            .add(this.#c).abs(),\r\n            d2 = this.normal.normSquare\r\n\r\n        // The denominator is null - shouldn't be possible\r\n        if (d2.isZero()) {\r\n            return {\r\n                value: NaN,\r\n                tex: 'Not a line',\r\n                fraction: new Fraction().infinite()\r\n            }\r\n        }\r\n        // The denominator is a perfect square - simplify the tex result\r\n        const value = numerator.value / Math.sqrt(d2.value),\r\n            F = numerator.clone().divide(d2.clone().sqrt())\r\n\r\n        // The denominator is a perfect square.\r\n        if (d2.isSquare()) {\r\n            return {\r\n                value,\r\n                tex: F.tex,\r\n                fraction: F\r\n            }\r\n        }\r\n        // Complete answer...\r\n        return {\r\n            value,\r\n            tex: `\\\\frac{${numerator.tex}}{\\\\sqrt{${d2.tex}}}`,\r\n            fraction: F\r\n        }\r\n    }\r\n\r\n    get equation(): this {\r\n        this.#outputMode = 'equation'\r\n        return this\r\n    }\r\n\r\n    fromCoefficient = (a: InputValue<Fraction>, b: InputValue<Fraction>, c: InputValue<Fraction>): this => {\r\n        this.#a = new Fraction(a)\r\n        this.#b = new Fraction(b)\r\n        this.#c = new Fraction(c)\r\n\r\n        this.#d = new Vector(this.#b.clone(), this.#a.clone().opposite())\r\n        this.#OA = new Vector(new Fraction().zero(), this.#c.clone())\r\n        this.#n = this.#d.clone().normal()\r\n\r\n        return this\r\n    }\r\n\r\n    fromEquation = (equ: Equation): this => {\r\n        // Reorder the equation\r\n        equ.reorder(true)\r\n\r\n        // It must contain either x, y or both.\r\n        const letters = new Set(equ.letters())\r\n\r\n        // No 'x', no 'y' in the equations\r\n        if (!(letters.has('x') || letters.has('y'))) {\r\n            return this\r\n        }\r\n\r\n        // Another letter in the equation ?\r\n        for (const elem of ['x', 'y']) {\r\n            if (letters.has(elem)) {\r\n                letters.delete(elem)\r\n            }\r\n        }\r\n\r\n        if (letters.size > 0) {\r\n            return this\r\n        }\r\n\r\n        // Everything should be ok now...\r\n        return this.fromCoefficient(\r\n            equ.left.monomByLetter('x').coefficient,\r\n            equ.left.monomByLetter('y').coefficient,\r\n            equ.left.monomByDegree(0).coefficient\r\n        )\r\n    }\r\n\r\n    fromPointAndDirection = (P: Point, d: Vector): this => {\r\n        // OX = OP + k*d\r\n        // x = px + kdx     * dy\r\n        // y = py + kdy     * dx\r\n        // ------------------\r\n        // dy * x = px * dy + kdxdy\r\n        // dx * y = py * dx + kdxdy\r\n        // ------------------\r\n        // dy * x - dx * y = px * dy - py * dx\r\n        // dy * x - dx * y - (px * dy - py * dx) = 0\r\n        this.fromCoefficient(\r\n            d.y,\r\n            d.x.clone().opposite(),\r\n            P.x.clone().multiply(d.y).subtract(P.y.clone().multiply(d.x)).opposite()\r\n        )\r\n\r\n        // Choose the current values as point and direction vector instead of the automatic version.\r\n        this.#OA = P.clone()\r\n        this.#d = d.clone()\r\n        this.#n = this.#d.clone().normal()\r\n\r\n        return this\r\n    }\r\n\r\n    fromPointAndLine = (P: Vector, L: Line, orientation?: LinePropriety): this => {\r\n\r\n        if (orientation === undefined) {\r\n            orientation = LinePropriety.Parallel\r\n        }\r\n\r\n        if (orientation === LinePropriety.Parallel) {\r\n            return this.fromPointAndNormal(P, L.normal)\r\n        } else if (orientation === LinePropriety.Perpendicular) {\r\n            return this.fromPointAndNormal(P, L.director)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    fromPointAndNormal = (P: Point, n: Vector): this => {\r\n        return this.fromCoefficient(\r\n            n.x,\r\n            n.y,\r\n            P.x.clone().multiply(n.x)\r\n                .add(P.y.clone().multiply(n.y)).opposite()\r\n        )\r\n    }\r\n\r\n    fromPoints(pt1: Point, pt2: Point){\r\n        return this.fromPointAndDirection(pt1, new Vector(pt1, pt2))\r\n    }\r\n\r\n    // ------------------------------------------\r\n    getEquation(): Equation {\r\n        const equ = new Equation(new Polynom().parse('xy', this.#a, this.#b, this.#c), new Polynom('0'))\r\n        if (this.#reduceBeforeDisplay) {\r\n            return equ.simplify()\r\n        } else {\r\n            return equ\r\n        }\r\n    }\r\n\r\n    getValueAtX = (value: Fraction | number): Fraction => {\r\n        const equ = this.getEquation().isolate('y'),\r\n            F = new Fraction(value)\r\n\r\n        if (equ instanceof Equation) {\r\n            return equ.right.evaluate({ x: F }) as Fraction\r\n        }\r\n        return new Fraction().invalid()\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n\r\n    getValueAtY = (value: Fraction | number): Fraction => {\r\n        const equ = this.getEquation().isolate('x'),\r\n            F = new Fraction(value)\r\n\r\n        if (equ instanceof Equation) {\r\n            return equ.right.evaluate({ y: F }) as Fraction\r\n        }\r\n\r\n        return new Fraction().invalid()\r\n    }\r\n\r\n    get height(): Fraction {\r\n        return this.#c.clone().opposite().divide(this.#b)\r\n    }\r\n\r\n    hitSegment(A: Point, B: Point): boolean {\r\n        const iPt = this.intersection(\r\n            new Line().fromPoints(A, B)\r\n        )\r\n\r\n        // There is an intersection point\r\n        if (iPt.hasIntersection) {\r\n            return iPt.point.x.value >= Math.min(A.x.value, B.x.value)\r\n                && iPt.point.x.value <= Math.max(A.x.value, B.x.value)\r\n                && iPt.point.y.value >= Math.min(A.y.value, B.y.value)\r\n                && iPt.point.y.value <= Math.max(A.y.value, B.y.value)\r\n        }\r\n        return false\r\n    }\r\n\r\n    intersection = (line: Line): { point: Point, hasIntersection: boolean, isParallel: boolean, isSame: boolean } => {\r\n        const Pt = new Point()\r\n        let isParallel = false, isSame = false\r\n\r\n        // this         => ax+by+c = 0\r\n        // line         => dx+ey+f = 0\r\n        //\r\n        //  aex + bey + ce = 0\r\n        //  dbx + bey + bf = 0\r\n        // (ae-db)x + ce-bf = 0\r\n        //\r\n        //  adx + bdy + cd = 0\r\n        //  adx + aey + af = 0\r\n        // (bd-ae)y + (cd-af)\r\n        //\r\n        // x = (bf-ce)/(ae-db)\r\n        // y = (af-cd)/(bd-ae)\r\n\r\n\r\n        // Theres is no 'y'\r\n        if (this.#b.isZero() || line.b.isZero()) {\r\n            // TODO : handle no y in the line canonical form\r\n        }\r\n\r\n        if (this.isParallelTo(line)) {\r\n            Pt.x = new Fraction().invalid()\r\n            Pt.y = new Fraction().invalid()\r\n            isParallel = true\r\n        } else if (this.isSameAs(line)) {\r\n            Pt.x = new Fraction().invalid()\r\n            Pt.y = new Fraction().invalid()\r\n            isSame = true\r\n        } else {\r\n            Pt.x = this.#b.clone().multiply(line.c).subtract(this.#c.clone().multiply(line.b))\r\n                .divide(this.#a.clone().multiply(line.b).subtract(this.#b.clone().multiply(line.a)))\r\n            Pt.y = this.#a.clone().multiply(line.c).subtract(this.#c.clone().multiply(line.a))\r\n                .divide(this.#b.clone().multiply(line.a).subtract(this.#a.clone().multiply(line.b)))\r\n        }\r\n\r\n        return {\r\n            point: Pt,\r\n            hasIntersection: !(isParallel || isSame),\r\n            isParallel,\r\n            isSame\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    isOnLine = (pt: Vector): boolean => {\r\n        return this.#a.clone()\r\n            .multiply(pt.x)\r\n            .add(\r\n                this.#b.clone()\r\n                    .multiply(pt.y)\r\n            )\r\n            .add(this.#c)\r\n            .isZero()\r\n    }\r\n\r\n    isParallelTo = (line: Line): boolean => {\r\n        // Do they have the isSame direction ?\r\n        return this.slope.isEqual(line.slope) && this.height.isNotEqual(line.height)\r\n    }\r\n\r\n    isPerpendicularTo = (line: Line): boolean => {\r\n        return this.d.isNormalTo(line.d)\r\n    }\r\n\r\n    isSameAs = (line: Line): boolean => {\r\n        return this.slope.isEqual(line.slope) && this.height.isEqual(line.height)\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n\r\n    isVertical = (): boolean => {\r\n        return this.slope.isInfinity()\r\n    }\r\n\r\n    get mxh(): this {\r\n        this.#outputMode = 'mxh'\r\n        return this\r\n    }\r\n\r\n    get n(): Vector {\r\n        return this.#n\r\n    }\r\n\r\n    get normal(): Vector {\r\n        return new Vector(this.#a, this.#b)\r\n    }\r\n\r\n    get parametric(): this {\r\n        this.#outputMode = 'parametric'\r\n        return this\r\n    }\r\n\r\n    randomNearPoint = (k?: number): Point => {\r\n        const pt = this.randomPoint(k)\r\n\r\n        let maxIterationTest = 10\r\n        while (this.isOnLine(pt) && maxIterationTest > 0) {\r\n            pt.x.add(randomIntSym(1, false))\r\n            pt.y.add(randomIntSym(1, false))\r\n            maxIterationTest--\r\n\r\n        }\r\n\r\n        return pt\r\n    }\r\n\r\n    randomPoint = (k?: number): Point => {\r\n        // Return a random point on the line.\r\n        const pt = this.#d\r\n            .clone()\r\n            .multiplyByScalar(randomIntSym((k === undefined || k <= 1) ? 3 : k, false))\r\n            .add(this.#OA)\r\n\r\n        pt.asPoint = true\r\n\r\n        return pt\r\n    }\r\n\r\n    get reduceBeforeDisplay(): boolean {\r\n        return this.#reduceBeforeDisplay\r\n    }\r\n\r\n    set reduceBeforeDisplay(value: boolean) {\r\n        this.#reduceBeforeDisplay = value\r\n    }\r\n\r\n    simplify = (): this => {\r\n        const lcm = Numeric.lcm(this.#a.denominator, this.#b.denominator, this.#c.denominator),\r\n            gcd = Numeric.gcd(this.#a.numerator, this.#b.numerator, this.#c.numerator)\r\n\r\n        this.fromCoefficient(\r\n            this.#a.clone().multiply(lcm).divide(gcd),\r\n            this.#b.clone().multiply(lcm).divide(gcd),\r\n            this.#c.clone().multiply(lcm).divide(gcd),\r\n        )\r\n\r\n        return this\r\n    }\r\n\r\n    simplifyDirection = (): this => {\r\n        this.#d.simplify()\r\n        return this\r\n    }\r\n\r\n    get slope(): Fraction {\r\n        return this.#a.clone().opposite().divide(this.#b)\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Special functions\r\n\r\n    get system(): this {\r\n        this.#outputMode = 'system'\r\n        return this\r\n    }\r\n}","import { Line } from \"./line\"\r\nimport { Vector } from \"./vector\"\r\nimport { Numeric } from \"../numeric\"\r\nimport { Fraction } from \"../coefficients\"\r\nimport { Equation } from \"../algebra\"\r\nimport { Polynom } from \"../algebra\"\r\nimport { Monom } from \"../algebra\"\r\nimport {type IPiMathObject, LinePropriety} from \"../pimath.interface\"\r\nimport { Point } from \"./point\"\r\n\r\nexport class Circle\r\n    implements\r\n    IPiMathObject<Circle> {\r\n    #center: Point | undefined = undefined\r\n    #squareRadius: Fraction | undefined = undefined\r\n    #cartesian: Equation | undefined = undefined\r\n\r\n    constructor()\r\n    constructor(equation: string | Equation)\r\n    constructor(circle: Circle)\r\n    constructor(center: Point, radius: Fraction | number, square?: boolean)\r\n    constructor(center: Point, pointThrough: Point)\r\n    constructor(A: Point, B: Point, C: Point)\r\n    constructor(...values: unknown[]) {\r\n        if (values.length > 0) {\r\n            this.parse(...values)\r\n        }\r\n    }\r\n\r\n    get center(): Point {\r\n        return this.#center ?? new Point()\r\n    }\r\n\r\n    get squareRadius(): Fraction {\r\n        return this.#squareRadius ?? new Fraction(0)\r\n    }\r\n\r\n    get cartesian(): Equation {\r\n        if (this.#cartesian === undefined) { throw new Error('Cartesian equation not defined') }\r\n\r\n        return this.#cartesian\r\n    }\r\n\r\n    get radius(): { tex: string, display: string, value: number } {\r\n        if (this.#squareRadius === undefined) { return { tex: '', display: '', value: 0 } }\r\n        if (this.#squareRadius.isSquare()) {\r\n            return {\r\n                tex: this.#squareRadius.clone().sqrt().tex,\r\n                display: this.#squareRadius.clone().sqrt().display,\r\n                value: this.#squareRadius.clone().sqrt().value\r\n            }\r\n        } else {\r\n            return {\r\n                tex: `\\\\sqrt{${this.#squareRadius.tex}}`,\r\n                display: `sqrt(${this.#squareRadius.display})`,\r\n                value: this.#squareRadius.clone().sqrt().value\r\n            }\r\n        }\r\n    }\r\n\r\n    get tex(): string {\r\n\r\n        let cx, cy\r\n        if (this.center.x.isZero()) {\r\n            cx = 'x^2'\r\n        } else {\r\n            cx = `\\\\left(x${this.center.x.isNegative() ? '+' : '-'}${this.center.x.clone().abs().tex}\\\\right)^2`\r\n        }\r\n        if (this.center.y.isZero()) {\r\n            cy = 'y^2'\r\n        } else {\r\n            cy = `\\\\left(y${this.center.y.isNegative() ? '+' : '-'}${this.center.y.clone().abs().tex}\\\\right)^2`\r\n        }\r\n        return `${cx}+${cy}=${this.squareRadius.tex}`\r\n    }\r\n\r\n    get developed(): string {\r\n        return this.cartesian.tex\r\n    }\r\n\r\n    get display(): string {\r\n        let cx, cy\r\n        if (this.center.x.isZero()) {\r\n            cx = 'x^2'\r\n        } else {\r\n            cx = `(x${this.center.x.isNegative() ? '+' : '-'}${this.center.x.clone().abs().tex})^2`\r\n        }\r\n        if (this.center.y.isZero()) {\r\n            cy = 'y^2'\r\n        } else {\r\n            cy = `(y${this.center.y.isNegative() ? '+' : '-'}${this.center.y.clone().abs().tex})^2`\r\n        }\r\n        return `${cx}+${cy}=${this.squareRadius.display}`\r\n    }\r\n\r\n    /**\r\n     * Get the relative position between circle and line. It corresponds to the number of intersection.\r\n     * @param {Line} L\r\n     * @returns {number}\r\n     */\r\n    relativePosition = (L: Line): number => {\r\n        if (this.#center === undefined || this.#squareRadius === undefined) { throw new Error('Circle not defined') }\r\n\r\n        const distance = L.distanceTo(this.#center), radius = Math.sqrt(this.#squareRadius.value)\r\n\r\n        if (distance.value - radius > 0.0000000001) {\r\n            return 0 // external\r\n        } else if (Math.abs(distance.value - radius) < 0.0000000001) {\r\n            return 1 // tangent\r\n        } else {\r\n            return 2 // secant\r\n        }\r\n    }\r\n\r\n    lineIntersection = (L: Line): Point[] => {\r\n        const intersectionPoints: Point[] = []\r\n        // let solX: Fraction\r\n\r\n        if (this.#cartesian === undefined) { return [] }\r\n        const equX = this.#cartesian.clone(), lineX = L.getEquation().clone().isolate('x'),\r\n            lineY = L.getEquation().clone().isolate('y')\r\n\r\n        if (lineX instanceof Equation && lineY instanceof Equation) {\r\n            equX.replaceBy('y', lineY.right).simplify()\r\n            equX.solve()\r\n\r\n            // TODO: rework the solutions of an equation.\r\n            // for (const x of equX.solutions) {\r\n            //     if (x.exact === false && isNaN(x.value)) {\r\n            //         continue\r\n            //     }\r\n\r\n            //     solX = new Fraction(x.exact === false ? x.value : x.exact)\r\n            //     intersectionPoints.push(new Point(solX.clone(), lineY.right.evaluate(solX)))\r\n            // }\r\n        }\r\n\r\n        return intersectionPoints\r\n    }\r\n\r\n    tangents = (P: Point | Fraction): Line[] => {\r\n        if (P instanceof Fraction) {\r\n            return this.#tangentsWithSlope(P)\r\n        } else if (this.isPointOnCircle(P)) {\r\n            return this.#tangentsThroughOnePointOnTheCircle(P)\r\n        } else if (this.#center !== undefined && this.#center.distanceTo(P).value > this.radius.value) {\r\n            //TODO:  Must check it's outside the circle\r\n            return this.#tangentsThroughOnePointOutsideTheCircle(P)\r\n        } else {\r\n            console.log('No tangents as the point is inside !')\r\n        }\r\n        return []\r\n    }\r\n\r\n    isPointOnCircle = (P: Point): boolean => {\r\n        return this.#cartesian?.test({ x: P.x, y: P.y }) ?? false\r\n    }\r\n\r\n    getPointsOnCircle = (numberIsInteger?: boolean): Point[] => {\r\n        if (numberIsInteger === undefined) {\r\n            numberIsInteger = false\r\n        }\r\n\r\n        // It means searching for pythagorician triples that make a perfect square.\r\n        // (x-4)^2 + (y+3)^2 = 15\r\n\r\n        const triplets = Numeric.pythagoreanTripletsWithTarget(this.squareRadius.value, true)\r\n\r\n        const points: Point[] = []\r\n\r\n        triplets.forEach(triplet => {\r\n            // Allow positive / negative values\r\n            // x-a = t  => x = a + t\r\n            // x-a = -t => x = a - t\r\n\r\n            for (const k of [[1, 1], [-1, 1], [-1, -1], [1, -1]]) {\r\n                points.push(new Point(\r\n                    this.center.x.clone().add(k[0] * triplet[0]),\r\n                    this.center.y.clone().add(k[1] * triplet[1])\r\n                )\r\n                )\r\n                // Check if the point is not already in points.\r\n                // TODO: isInListOfPoints not implemented\r\n                // if (!pt.isInListOfPoints(points)) {\r\n                //     points.push(pt)\r\n                // }\r\n            }\r\n        })\r\n        return points\r\n    }\r\n\r\n    clone(): Circle {\r\n        return new Circle(\r\n            this.center.clone(),\r\n            this.squareRadius.clone(),\r\n            true\r\n        )\r\n        // this.#center = this.center.clone()\r\n        // this.#squareRadius = this.squareRadius.clone()\r\n        // this._calculateCartesian()\r\n        // return this\r\n    }\r\n\r\n    setRadius(radius: Fraction | number, square?: boolean): this {\r\n        if (square) {\r\n            this.#squareRadius = new Fraction(radius)\r\n        } else {\r\n            this.#squareRadius = new Fraction(radius).pow(2)\r\n        }\r\n        this.#calculateCartesian()\r\n        return this\r\n    }\r\n\r\n    #tangentsThroughOnePointOnTheCircle = (P: Point): Line[] => {\r\n        const CT = new Vector(this.center, P)\r\n        return [new Line(P, CT, LinePropriety.Perpendicular)]\r\n    }\r\n\r\n    #tangentsThroughOnePointOutsideTheCircle = (P: Point): Line[] => {\r\n        // y = mx + h\r\n        // px, py => h = -m px + py => mx - y -m.px + py = 0 =>\r\n        // Centre: cx, cy, radius: r\r\n        // (m.cx - cy -m.px + py)^2 = r^2  * (m^2  + 1)\r\n        // (m(cx-py) - (cy - py))^2 = r^2  * (m^2  + 1)\r\n\r\n        const cx_px = this.center.x.clone().subtract(P.x), cy_py = this.center.y.clone().subtract(P.y),\r\n            polyLeft = new Polynom('x'), polyRight = new Polynom('x^2+1')\r\n\r\n        polyLeft.multiply(cx_px).subtract(cy_py).pow(2)\r\n        polyRight.multiply(this.squareRadius)\r\n\r\n        const equ = new Equation(polyLeft, polyRight)\r\n        const solutions = equ.solve()\r\n\r\n        return solutions.map(sol => {\r\n            //  h = -m px + py\r\n            let h: Fraction\r\n            const equ = new Equation('y', 'x')\r\n\r\n            if (sol.exact instanceof Fraction) {\r\n                h = P.x.clone().opposite().multiply(sol.exact).add(P.y)\r\n                equ.right.multiply(sol.exact).add(h)\r\n            } else {\r\n                h = P.x.clone().opposite().multiply(sol.value).add(P.y)\r\n                equ.right.multiply(sol.value).add(h)\r\n            }\r\n\r\n            return new Line(equ)\r\n        })\r\n\r\n    }\r\n\r\n    #tangentsWithSlope = (slope: Fraction): Line[] => {\r\n        // d(C;t)=r => ac1+bc2 + x = +- sqrt(a^2 + b^2)*r\r\n        // x = -ac1-bc2  +-  sqrt(a^2 + b^2)*r\r\n        // y = a/bx + h => ax-by + H = 0\r\n\r\n        const a = slope.numerator, b = -slope.denominator, c1 = this.center.x.clone(), c2 = this.center.y.clone()\r\n\r\n        const sq = this.squareRadius.clone().multiply(slope.numerator ** 2 + slope.denominator ** 2),\r\n            x1 = c1.clone().multiply(a).opposite().subtract(c2.clone().multiply(b)).add(sq.clone().sqrt()),\r\n            x2 = c1.clone().multiply(a).opposite().subtract(c2.clone().multiply(b)).subtract(sq.clone().sqrt())\r\n\r\n        return [new Line(a, b, x1), new Line(a, b, x2)]\r\n    }\r\n\r\n    #reset(): this {\r\n        this.#center = undefined\r\n        this.#squareRadius = undefined\r\n        this.#cartesian = undefined\r\n\r\n        return this\r\n    }\r\n\r\n    parse(...values: unknown[]): this {\r\n        // Data can be given in these formats:\r\n        // one value, a string -> make it an Equation\r\n        // one value, an Equation\r\n        // one value, a circle -> clone it\r\n        // two values: two points (center and pointThrough)\r\n        // two values: point and Fraction (center and radius)\r\n        // three values: Vector2D, Fraction, Boolean (center, square radius, true)\r\n\r\n        this.#reset()\r\n\r\n        if (typeof values[0] === 'string') {\r\n            this.#parseEquation(new Equation(values[0]))\r\n        } else if (values[0] instanceof Equation) {\r\n            this.#parseEquation(values[0])\r\n        } else if (values[0] instanceof Circle) {\r\n            this.#parseCopyCircle(values[0])\r\n        } else if (values[0] instanceof Point && values.length > 1) {\r\n            if (values[1] instanceof Point) {\r\n                if (values[2] instanceof Point) {\r\n                    // TODO: Add the method to parse through three points\r\n                    // this._parseThroughtThreePoints(values[0], values[1], values[2])\r\n                } else {\r\n                    this.#parseCenterAndPointThrough(values[0], values[1])\r\n                }\r\n            } else if (values[1] instanceof Fraction || typeof values[1] === 'number') {\r\n                this.#parseCenterAndRadius(values[0], values[1], (typeof values[2] === \"boolean\") ? values[2] : false)\r\n            }\r\n        }\r\n\r\n        // Calculate once the different values.\r\n        this.#calculateCartesian()\r\n\r\n\r\n        return this\r\n    }\r\n\r\n    #calculateCartesian() {\r\n        this.#cartesian = (\r\n            new Equation(\r\n                new Polynom(`(x-(${this.center.x.display}))^2+(y-(${this.center.y.display}))^2`),\r\n                new Polynom(this.squareRadius.display))\r\n        ).moveLeft()\r\n    }\r\n\r\n    #parseCopyCircle(circle: Circle): this {\r\n        this.#center = circle.center.clone()\r\n        this.#squareRadius = circle.squareRadius.clone()\r\n        this.#calculateCartesian()\r\n        return this\r\n    }\r\n\r\n    #parseCenterAndRadius(center: Point, radius: Fraction | number, square?: boolean): this {\r\n        this.#center = center.clone()\r\n        if (square) {\r\n            this.#squareRadius = (new Fraction(radius))\r\n        } else {\r\n            this.#squareRadius = new Fraction(radius).pow(2)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    #parseCenterAndPointThrough(center: Point, pointThrough: Point): this {\r\n        this.#center = center.clone()\r\n        this.#squareRadius = new Vector(this.#center, pointThrough).normSquare\r\n        return this\r\n    }\r\n\r\n    #parseEquation(equ: Equation): this {\r\n\r\n        // Move everything to the left.\r\n        equ.moveLeft()\r\n\r\n        if (equ.degree('x').value === 2 && equ.degree('y').value === 2) {\r\n            // Both must be of degree 2.\r\n            const x2 = equ.left.monomByDegree(2, 'x'), y2 = equ.left.monomByDegree(2, 'y')\r\n            let x1: Monom, y1: Monom, c: Monom\r\n\r\n            // Both square monoms must have the same coefficient.\r\n            if (x2.coefficient.isEqual(y2.coefficient)) {\r\n                equ.divide(x2.coefficient)\r\n\r\n                x1 = equ.left.monomByDegree(1, 'x')\r\n                y1 = equ.left.monomByDegree(1, 'y')\r\n\r\n                c = equ.left.monomByDegree(0)\r\n\r\n                this.#center = new Point(x1.coefficient.clone().divide(2).opposite(), y1.coefficient.clone().divide(2).opposite())\r\n\r\n                this.#squareRadius = c.coefficient.clone().opposite()\r\n                    .add(this.#center.x.clone().pow(2))\r\n                    .add(this.#center.y.clone().pow(2))\r\n\r\n            } else {\r\n                // The circle is not a valid circle\r\n                this.#center = undefined\r\n                this.#squareRadius = undefined\r\n            }\r\n        }\r\n        return this\r\n    }\r\n\r\n    // private _parseThroughtThreePoints(A: Point, B: Point, C: Point): this {\r\n    //     const T = new Triangle(A, B, C), mAB = T.remarquables.mediators.AB.clone(),\r\n    //         mAC = T.remarquables.mediators.AC.clone()\r\n    //     this.parse(mAB.intersection(mAC).point, A)\r\n\r\n    //     return this\r\n    // }\r\n\r\n}","/**\r\n * This class works for 2d line in a plane.\r\n */\r\n\r\nimport { Fraction } from \"../coefficients/fraction\"\r\nimport { Polynom } from \"../algebra/polynom\"\r\nimport { Monom } from \"../algebra/monom\"\r\nimport { randomIntSym } from \"../randomization/rndHelpers\"\r\nimport { Vector } from \"./vector\"\r\nimport { Point } from \"./point\"\r\nimport {Line3Propriety} from \"../pimath.interface\"\r\n\r\n\r\nexport class Line3 {\r\n    // A line is defined as the canonical form\r\n    static PERPENDICULAR = Line3Propriety.Perpendicular\r\n    static PARALLEL = Line3Propriety.Parallel\r\n    // ax + by + c = 0\r\n    #OA: Point = new Point()\r\n    #d: Vector = new Vector()\r\n\r\n    /**\r\n     * Value can be a mix of:\r\n     *\r\n     * @param values\r\n     */\r\n    constructor(A: Point, B: Point)\r\n    constructor(A: Point, d: Vector)\r\n    constructor(A: Point, d: Vector | Point) {\r\n        this.#OA = A.clone()\r\n        this.#d = d.asPoint ? new Vector(A, d) : d.clone()\r\n        return this\r\n    }\r\n\r\n    get OA(): Point {\r\n        return this.#OA\r\n    }\r\n\r\n    set OA(value: Point) {\r\n        this.#OA = value\r\n    }\r\n    get point(): Point {\r\n        return this.#OA.clone()\r\n    }\r\n\r\n    get d(): Vector {\r\n        return this.#d\r\n    }\r\n\r\n    set d(value: Vector) {\r\n        this.#d = value\r\n    }\r\n\r\n    get tex(): { parametric: string, system: string, cartesian: string } {\r\n        return {\r\n            parametric: `${Vector.asTex('x', 'y', 'z')} = ${Vector.asTex(this.#OA.x.tex, this.#OA.y.tex, this.#OA.z.tex)} + k\\\\cdot ${Vector.asTex(this.#d.x.tex, this.#d.y.tex, this.#d.z.tex)}`,\r\n            system: `\\\\left\\\\{\\\\begin{aligned}\r\n    x &= ${(new Polynom(this.#OA.x)\r\n                    .add(new Monom(this.#d.x).multiply(new Monom('k'))))\r\n                    .reorder('k', true)\r\n                    .tex}\\\\\\\\ \r\n    y &= ${(new Polynom(this.#OA.y)\r\n                    .add(new Monom(this.#d.y).multiply(new Monom('k'))))\r\n                    .reorder('k', true)\r\n                    .tex}\\\\\\\\\r\n    z &= ${(new Polynom(this.#OA.z)\r\n                    .add(new Monom(this.#d.z).multiply(new Monom('k'))))\r\n                    .reorder('k', true)\r\n                    .tex}\r\n\\\\end{aligned}\\\\right.`,\r\n            cartesian: `\\\\frac{ ${new Polynom('x', 1, this.#OA.x.clone().opposite()).tex} }{ ${this.direction.x.tex} } = \\\\frac{ ${new Polynom('y', 1, this.#OA.y.clone().opposite()).tex} }{ ${this.direction.y.tex} } = \\\\frac{ ${new Polynom('z', 1, this.#OA.z.clone().opposite()).tex} }{ ${this.direction.z.tex} }`\r\n        }\r\n    }\r\n\r\n    get display(): { parametric: string, system: string, cartesian: string } {\r\n        const OAx = this.#OA.x.display\r\n        const OAy = this.#OA.y.display\r\n        const OAz = this.#OA.z.display\r\n        const n = this.direction.simplify()\r\n        const nx = n.x.display\r\n        const ny = n.y.display\r\n        const nz = n.z.display\r\n\r\n        return {\r\n            parametric: `${Vector.asDisplay('x', 'y', 'z')} = ${Vector.asDisplay(this.#OA.x.display, this.#OA.y.display, this.#OA.z.display)} + k\\\\cdot ${Vector.asDisplay(this.#d.x.display, this.#d.y.display, this.#d.z.display)}`,\r\n            system: '',\r\n            cartesian: `(x-${OAx})/${nx} = (y-${OAy})/${ny} = (z-${OAz})/${nz}`\r\n        }\r\n    }\r\n\r\n    get direction(): Vector {\r\n        return this.#d.clone()\r\n    }\r\n\r\n    clone = (): this => {\r\n        this.#d = this.#d.clone()\r\n        this.#OA = this.#OA.clone()\r\n\r\n        return this\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    isOnLine = (pt: Point): boolean => {\r\n        return false\r\n    }\r\n\r\n    isParallelTo = (line: Line3): boolean => {\r\n        // Do they have the isSame direction ?\r\n        throw new Error('Method not implemented.')\r\n    }\r\n    isSameAs = (line: Line3): boolean => {\r\n        throw new Error('Method not implemented.')\r\n    }\r\n    isPerpendicularTo = (line: Line3): boolean => {\r\n        throw new Error('Method not implemented.')\r\n    }\r\n    isVertical = (): boolean => {\r\n        throw new Error('Method not implemented.')\r\n    }\r\n    simplify = (): this => {\r\n        throw new Error('Method not implemented.')\r\n        // const lcm = Numeric.lcm(this.#a.denominator, this.#b.denominator, this.#c.denominator),\r\n        //     gcd = Numeric.gcd(this.#a.numerator, this.#b.numerator, this.#c.numerator)\r\n\r\n        // this.fromCoefficient(\r\n        //     this.#a.clone().multiply(lcm).divide(gcd),\r\n        //     this.#b.clone().multiply(lcm).divide(gcd),\r\n        //     this.#c.clone().multiply(lcm).divide(gcd),\r\n        // )\r\n\r\n        // return this\r\n    }\r\n\r\n    intersection = (line: Line3): { point: Vector, hasIntersection: boolean, isParallel: boolean, isSame: boolean } => {\r\n\r\n        throw new Error('Method not implemented.')\r\n    }\r\n\r\n    distanceTo(pt: Point): { value: number, fraction: Fraction, tex: string } {\r\n        // Distance is:\r\n        // |(x - x0) x d| / |d|\r\n        const AP = new Vector(this.#OA, pt),\r\n            d = this.direction,\r\n            d2 = this.direction.normSquare,\r\n            num2 = AP.cross(d).normSquare,\r\n            num2d2 = num2.clone().divide(d2),\r\n            dnum = num2d2.clone().sqrt()\r\n\r\n        console.log('CROSS', AP.cross(d).display)\r\n        return {\r\n            value: Math.sqrt(num2d2.value),\r\n            fraction: num2d2.clone().sqrt(),\r\n            tex: dnum.isExact() ? dnum.tex : `\\\\sqrt{${num2d2.tex}}`\r\n        }\r\n    }\r\n\r\n    hitSegment(A: Point, B: Point): boolean {\r\n        const iPt = this.intersection(\r\n            new Line3(A, B)\r\n        )\r\n\r\n        // There is an intersection point\r\n        if (iPt.hasIntersection) {\r\n            return iPt.point.x.value >= Math.min(A.x.value, B.x.value)\r\n                && iPt.point.x.value <= Math.max(A.x.value, B.x.value)\r\n                && iPt.point.y.value >= Math.min(A.y.value, B.y.value)\r\n                && iPt.point.y.value <= Math.max(A.y.value, B.y.value)\r\n                && iPt.point.z.value >= Math.min(A.z.value, B.z.value)\r\n                && iPt.point.z.value <= Math.max(A.z.value, B.z.value)\r\n        }\r\n        return false\r\n    }\r\n\r\n    // getValueAtX = (value: Fraction | number): Fraction => {\r\n    //     const equ = this.equation.clone().isolate('y'),\r\n    //         F = new Fraction(value)\r\n\r\n    //     if (equ instanceof Equation) {\r\n    //         return equ.right.evaluate({ x: F }) as Fraction\r\n    //     }\r\n    //     return new Fraction().invalid()\r\n    // }\r\n\r\n    // getValueAtY = (value: Fraction | number): Fraction => {\r\n    //     const equ = this.equation.clone().isolate('x'),\r\n    //         F = new Fraction(value)\r\n\r\n    //     if (equ instanceof Equation) {\r\n    //         return equ.right.evaluate({ y: F }) as Fraction\r\n    //     }\r\n\r\n    //     return new Fraction().invalid()\r\n    // }\r\n\r\n    randomPoint = (max = 5): Point => {\r\n        const A = this.#OA.clone(),\r\n            k = new Fraction(randomIntSym(max, false))\r\n\r\n        return new Point(\r\n            A.x.clone().add(this.#d.x.clone().multiply(k)),\r\n            A.y.clone().add(this.#d.y.clone().multiply(k)),\r\n            A.z.clone().add(this.#d.z.clone().multiply(k))\r\n        )\r\n    }\r\n}","import { Equation } from \"../algebra/equation\"\r\nimport { Polynom } from \"../algebra/polynom\"\r\nimport { Fraction } from \"../coefficients/fraction\"\r\nimport { Line3 } from \"./line3\"\r\nimport { Point } from \"./point\"\r\nimport { Vector } from \"./vector\"\r\nimport type {Plane3Config} from \"../pimath.interface\"\r\n\r\n\r\n\r\nexport class Plane3 {\r\n    #normal: Vector = new Vector(0, 0, 1)\r\n    #point: Point = new Point(0, 0, 0)\r\n\r\n    constructor(config?: Plane3Config) {\r\n        if (config) {\r\n            this.parse(config)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    get normal(): Vector {\r\n        return this.#normal\r\n    }\r\n    set normal(value: Vector) {\r\n        this.#normal = value\r\n        this.#normal.asPoint = false\r\n    }\r\n    get point(): Point {\r\n        return this.#point\r\n    }\r\n    set point(value: Point) {\r\n        this.#point = value\r\n        this.#point.asPoint = true\r\n    }\r\n\r\n    get a(): Fraction {\r\n        return this.#normal.x\r\n    }\r\n    get b(): Fraction {\r\n        return this.#normal.y\r\n    }\r\n    get c(): Fraction {\r\n        return this.#normal.z\r\n    }\r\n    get d(): Fraction {\r\n        return this.#normal.dot(this.#point).opposite()\r\n    }\r\n\r\n    get tex(): string {\r\n        // return the cartesian equation of the plane\r\n        return new Equation(\r\n            new Polynom('xyz', this.a, this.b, this.c, this.d),\r\n            new Polynom(0)\r\n        ).reduce().tex\r\n    }\r\n\r\n    get display(): string {\r\n        // return the cartesian equation of the plane\r\n        return new Equation(\r\n            new Polynom('xyz', this.a, this.b, this.c, this.d),\r\n            new Polynom(0)\r\n        ).reduce().display\r\n    }\r\n\r\n    parse(config: Plane3Config) {\r\n        if (config.point && config.normal) {\r\n            this.point = config.point\r\n            this.normal = config.normal\r\n            return\r\n        }\r\n\r\n        if (config.point && config.directions?.length === 2) {\r\n            this.point = config.point\r\n            const [v1, v2] = config.directions\r\n            this.normal = v1.cross(v2)\r\n            return\r\n        }\r\n\r\n        if (config.equation) {\r\n            const cartesian = config.equation.moveLeft().reduce().left\r\n\r\n            const a = cartesian.monomByLetter('x').coefficient\r\n            const b = cartesian.monomByLetter('y').coefficient\r\n            const c = cartesian.monomByLetter('z').coefficient\r\n            const d = cartesian.monomByDegree(0).coefficient\r\n\r\n            // Get the normal vector\r\n            this.normal = new Vector(a, b, c)\r\n\r\n            // Get a point on the plane\r\n            if (a.isNotZero()) {\r\n                this.point = new Point(d.clone().divide(a).opposite(), 0, 0)\r\n            } else if (b.isNotZero()) {\r\n                this.point = new Point(0, d.clone().divide(b).opposite(), 0)\r\n            } else {\r\n                this.point = new Point(0, 0, d.clone().divide(c).opposite())\r\n            }\r\n            // Make sure it's considered as point\r\n            return\r\n        }\r\n\r\n        if (config.points?.length === 3 && config.points.every(p => p instanceof Vector)) {\r\n            const A = config.points[0]\r\n            const B = config.points[1]\r\n            const C = config.points[2]\r\n\r\n            const AB = new Vector(A, B)\r\n            const AC = new Vector(A, C)\r\n            this.normal = AB.cross(AC)\r\n            this.point = A\r\n            return\r\n        }\r\n\r\n        if (config.coefficients?.length === 4) {\r\n            const [a, b, c, d] = config.coefficients\r\n            this.normal = new Vector(a, b, c)\r\n            this.point = new Point(0, 0, -d)\r\n            return\r\n        }\r\n    }\r\n\r\n    angle(vector: Vector, sharp?: boolean, radian?: boolean): number\r\n    angle(line: Line3, sharp?: boolean, radian?: boolean): number\r\n    angle(plane: Plane3, sharp?: boolean, radian?: boolean): number\r\n    angle(value: Plane3 | Line3 | Vector, sharp?: boolean, radian?: boolean): number {\r\n        if (value instanceof Plane3) {\r\n            return this.normal.angle(value.normal, sharp, radian)\r\n        }\r\n\r\n        let direction: Vector\r\n        if (value instanceof Vector) {\r\n            if (value.dimension !== 3) {\r\n                throw new Error('Vector is not 3D')\r\n            }\r\n\r\n            direction = value\r\n        } else {\r\n            direction = value.direction\r\n        }\r\n\r\n        const a90 = radian ? Math.PI / 2 : 90\r\n        return a90 - this.normal.angle(direction, true, radian)\r\n    }\r\n\r\n    distanceTo(point: Vector): number {\r\n        return this.normal.dot(point).add(this.d).abs().value / this.normal.norm\r\n    }\r\n\r\n    intersectWithLine(line: Line3): Point {\r\n        const { point, direction } = line\r\n        const t = this.normal.dot(point).add(this.d).divide(this.normal.dot(direction).opposite())\r\n        return point.clone().add(direction.clone().multiplyByScalar(t))\r\n    }\r\n\r\n    intersectWithPlane(plane: Plane3): Line3 {\r\n        const direction = this.normal.cross(plane.normal)\r\n\r\n        // Solve the system:\r\n        // p1 // p2 // z=0\r\n        const pt = new Point(0, 0, 0)\r\n        throw new Error('Intersection with plane  not yet implemented !')\r\n        return new Line3(pt, direction)\r\n    }\r\n\r\n    isPointOnPlane(pt: Point): boolean {\r\n        return this.normal.dot(pt).add(this.d).isZero()\r\n    }\r\n}","import { Fraction } from \"../coefficients/fraction\"\r\nimport { Line } from \"./line\"\r\nimport { Vector } from \"./vector\"\r\nimport { Point } from \"./point\"\r\nimport type {remarquableLines} from \"../pimath.interface\"\r\n\r\nexport class Triangle {\r\n    #A: Point = new Point()\r\n    #B: Point = new Point()\r\n    #C: Point = new Point()\r\n    #lines: { 'AB': Line, 'AC': Line, 'BC': Line } = {\r\n        'AB': new Line(),\r\n        'AC': new Line(),\r\n        'BC': new Line()\r\n    }\r\n    #middles: { 'AB': Point, 'AC': Point, 'BC': Point } = {\r\n        'AB': new Point(),\r\n        'AC': new Point(),\r\n        'BC': new Point()\r\n    }\r\n    #remarquables: remarquableLines | null = null\r\n\r\n    constructor(...values: unknown[]) {\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setters\r\n    // ------------------------------------------\r\n\r\n    get A(): Point {\r\n        return this.#A\r\n    }\r\n\r\n    get B(): Point {\r\n        return this.#B\r\n    }\r\n\r\n    get C(): Point {\r\n        return this.#C\r\n    }\r\n\r\n    get AB(): Vector {\r\n        return this.#getSegment('A', 'B')\r\n    }\r\n\r\n    get BA(): Vector {\r\n        return this.#getSegment('B', 'A')\r\n    }\r\n\r\n    get BC(): Vector {\r\n        return this.#getSegment('B', 'C')\r\n    }\r\n\r\n    get CB(): Vector {\r\n        return this.#getSegment('C', 'B')\r\n    }\r\n\r\n    get AC(): Vector {\r\n        return this.#getSegment('A', 'C')\r\n    }\r\n\r\n    get CA(): Vector {\r\n        return this.#getSegment('C', 'A')\r\n    }\r\n\r\n    get isRectangle(): boolean {\r\n        if (this.AB.isNormalTo(this.BC)) {\r\n            return true\r\n        }\r\n        if (this.AB.isNormalTo(this.AC)) {\r\n            return true\r\n        }\r\n        if (this.BC.isNormalTo(this.AC)) {\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    get isEquilateral(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) &&\r\n            this.AB.normSquare.isEqual(this.AC.normSquare)\r\n    }\r\n\r\n    get isIsocele(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) ||\r\n            this.AB.normSquare.isEqual(this.AC.normSquare) ||\r\n            this.BC.normSquare.isEqual(this.AC.normSquare)\r\n    }\r\n\r\n    get lines(): { 'AB': Line, 'BC': Line, 'AC': Line } {\r\n        return this.#lines\r\n    }\r\n\r\n    get remarquables(): remarquableLines | null {\r\n        return this.#remarquables\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Parse values to a triangle. Supported formats:\r\n     * Vector2D, Vector2D, Vector2D\r\n     * x1, y1, x2, y2, x3, y3\r\n     * @param values\r\n     */\r\n    parse = (...values: unknown[]): Triangle => {\r\n        if (values.length === 6) {\r\n            // Check if all values are number or fractions.\r\n            const v: Fraction[] = values.map((x: unknown) => new Fraction(x as string))\r\n\r\n            if (v.some(x => x.isNaN())) {\r\n                throw new Error('One of the values is not a valid number')\r\n            }\r\n\r\n            return this.parse(\r\n                new Vector(v[0], v[1]),\r\n                new Vector(v[2], v[3]),\r\n                new Vector(v[4], v[5]),\r\n            )\r\n        } else if (values.length === 3) {\r\n            // Possibilities:\r\n            // - Three points (or part of points, only dict for example, or array\r\n            // - Three lines\r\n            // - Three lines as text.\r\n            if (values.every((x: unknown) => typeof x === 'string')) {\r\n                // Three lines as text.\r\n                return this.parse(\r\n                    ...values.map((x) => {\r\n                        return new Line(x)\r\n                    })\r\n                )\r\n            } else if (values.every((x: unknown) => x instanceof Line)) {\r\n                // We have three lines\r\n                const AB: Line = (values[0]).clone()\r\n                const BC: Line = (values[1]).clone()\r\n                const AC: Line = (values[2]).clone()\r\n                this.#lines = { AB, BC, AC }\r\n\r\n                // Get the intersection points -> build the triangle using these intersection points.\r\n                let intersect = AB.intersection(BC)\r\n                if (intersect.hasIntersection) {\r\n                    this.#B = intersect.point.clone()\r\n                } else {\r\n                    throw new Error('Lines do not intersect !')\r\n                }\r\n\r\n                intersect = BC.intersection(AC)\r\n                if (intersect.hasIntersection) {\r\n                    this.#C = intersect.point.clone()\r\n                } else {\r\n                    throw new Error('Lines do not intersect !')\r\n                }\r\n\r\n                intersect = AC.intersection(AB)\r\n                if (intersect.hasIntersection) {\r\n                    this.#A = intersect.point.clone()\r\n                } else {\r\n                    throw new Error('Lines do not intersect !')\r\n                }\r\n\r\n            } else if (values.every((x: unknown) => (x instanceof Point))) {\r\n                // We have three points.\r\n                this.#A = (values[0]).clone()\r\n                this.#B = (values[1]).clone()\r\n                this.#C = (values[2]).clone()\r\n                this.#lines = {\r\n                    'AB': new Line(this.#A, this.#B),\r\n                    'BC': new Line(this.#B, this.#C),\r\n                    'AC': new Line(this.#A, this.#C)\r\n                }\r\n            }\r\n        } else if (values.length === 1) {\r\n            if (values[0] instanceof Triangle) {\r\n                return values[0].clone()\r\n            }\r\n        }\r\n\r\n        this.#updateTriangle()\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Clone the Triangle class\r\n     */\r\n    clone = (): Triangle => {\r\n        return new Triangle(\r\n            this.#A.clone(),\r\n            this.#B.clone(),\r\n            this.#C.clone()\r\n        )\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Triangle operations and properties\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Generate the Line object for the three segments of the triangle\r\n     */\r\n    #updateTriangle = () => {\r\n        this.#A.asPoint = true\r\n        this.#B.asPoint = true\r\n        this.#C.asPoint = true\r\n\r\n        this.#middles = {\r\n            'AB': new Point().middleOf(this.#A, this.#B),\r\n            'AC': new Point().middleOf(this.#A, this.#C),\r\n            'BC': new Point().middleOf(this.#B, this.#C)\r\n        }\r\n\r\n        this.#remarquables = this.#calculateRemarquableLines()\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the Vector2D class for the given name\r\n     * @param ptName\r\n     */\r\n    #getPointByName = (ptName: string): Point => {\r\n        switch (ptName.toUpperCase()) {\r\n            case 'A':\r\n                return this.#A\r\n            case 'B':\r\n                return this.#B\r\n            case 'C':\r\n                return this.#C\r\n        }\r\n\r\n        // Something went wrong ! Return the first point\r\n        return this.#A\r\n    }\r\n    /**\r\n     * Get the vector for the segment given by name.\r\n     * @param ptName1\r\n     * @param ptName2\r\n     */\r\n    #getSegment = (ptName1: string, ptName2: string): Vector => {\r\n        return new Vector(\r\n            this.#getPointByName(ptName1),\r\n            this.#getPointByName(ptName2)\r\n        )\r\n    }\r\n\r\n    #calculateRemarquableLines = (): remarquableLines => {\r\n\r\n        const medians = {\r\n            'A': new Line().fromPoints(this.#A, this.#middles.BC),\r\n            'B': new Line().fromPoints(this.#B, this.#middles.AC),\r\n            'C': new Line().fromPoints(this.#C, this.#middles.AB),\r\n            'intersection': null\r\n        }\r\n\r\n        const mediators = {\r\n            'AB': new Line().fromPointAndNormal(this.#middles.AB, new Vector(this.#A, this.#B).normal()),\r\n            'AC': new Line().fromPointAndNormal(this.#middles.AC, new Vector(this.#A, this.#C).normal()),\r\n            'BC': new Line().fromPointAndNormal(this.#middles.BC, new Vector(this.#B, this.#C).normal()),\r\n            'intersection': null\r\n        }\r\n\r\n        const heights = {\r\n            'A': new Line().fromPointAndNormal(this.#A, new Vector(this.#B, this.#C).normal()),\r\n            'B': new Line().fromPointAndNormal(this.#B, new Vector(this.#A, this.#C).normal()),\r\n            'C': new Line().fromPointAndNormal(this.#C, new Vector(this.#A, this.#B).normal()),\r\n            'intersection': null\r\n        }\r\n\r\n        const bA = this.#calculateBisectors('A'),\r\n            bB = this.#calculateBisectors('B'),\r\n            bC = this.#calculateBisectors('C')\r\n\r\n        const bisectors = {\r\n            'A': bA.internal,\r\n            'B': bB.internal,\r\n            'C': bB.internal,\r\n            'intersection': null\r\n        }\r\n\r\n        const externalBisectors = {\r\n            'A': bA.external,\r\n            'B': bB.external,\r\n            'C': bC.external,\r\n            'intersection': null\r\n        }\r\n\r\n        const remarquables: remarquableLines = {\r\n            medians,\r\n            mediators,\r\n            heights,\r\n            bisectors,\r\n            externalBisectors\r\n        }\r\n\r\n        // As it's a triangle, we assume the lines are intersecting and aren't parallel or superposed.\r\n        remarquables.medians.intersection = remarquables.medians.A.intersection(remarquables.medians.B).point\r\n        remarquables.mediators.intersection = remarquables.mediators.AB.intersection(remarquables.mediators.BC).point\r\n        remarquables.heights.intersection = remarquables.heights.A.intersection(remarquables.heights.B).point\r\n        remarquables.bisectors.intersection = remarquables.bisectors.A.intersection(remarquables.bisectors.B).point\r\n\r\n        // Everything was calculated for the remarquable lines.\r\n        return remarquables\r\n    }\r\n\r\n    #calculateBisectors = (pt: string): { internal: Line, external: Line } => {\r\n        const tlines = this.lines\r\n        let d1, d2\r\n\r\n        if (pt === 'A') {\r\n            d1 = tlines.AB\r\n            d2 = tlines.AC\r\n        } else if (pt === 'B') {\r\n            d1 = tlines.AB\r\n            d2 = tlines.BC\r\n        } else if (pt === 'C') {\r\n            d1 = tlines.BC\r\n            d2 = tlines.AC\r\n        }\r\n\r\n        if (d1 === undefined || d2 === undefined) {\r\n            throw new Error(`The point ${pt} does not exist`)\r\n        }\r\n\r\n        const d1n = d1.n.simplify().norm\r\n        const d2n = d2.n.simplify().norm\r\n        const d1Equ = d1.getEquation().multiply(d2n)\r\n        const d2Equ = d2.getEquation().multiply(d1n)\r\n\r\n        const b1: Line = new Line(d1Equ.clone().subtract(d2Equ).simplify())\r\n        const b2: Line = new Line(d2Equ.clone().subtract(d1Equ).simplify())\r\n\r\n        // Must determine which bisectors is in the triangle\r\n        if (pt === 'A') {\r\n            return b1.hitSegment(this.B, this.C) ? { internal: b1, external: b2 } : { internal: b2, external: b1 }\r\n        }\r\n        if (pt === 'B') {\r\n            return b1.hitSegment(this.A, this.C) ? { internal: b1, external: b2 } : { internal: b2, external: b1 }\r\n        }\r\n        if (pt === 'C') {\r\n            return b1.hitSegment(this.B, this.A) ? { internal: b1, external: b2 } : { internal: b2, external: b1 }\r\n        }\r\n\r\n        // Default returns the first bisector\r\n        return { internal: b1, external: b2 }\r\n    }\r\n}","import {Point} from \"./point\"\r\nimport {Fraction} from \"../coefficients\"\r\nimport {Equation, Polynom} from \"../algebra\"\r\nimport type {InputValue} from \"../pimath.interface\"\r\n\r\nenum SPHERE3_FORMAT {\r\n    DEVELOPPED,\r\n    CENTER_RADIUS\r\n}\r\n\r\nexport enum SPHERE3_RELATIVE_POSITION {\r\n    INTERIOR,\r\n    EXTERIOR,\r\n    SECANT,\r\n    TANGENT_INSIDE,\r\n    TANGENT_OUTSIDE,\r\n    SUPERPOSED,\r\n    CONCENTRIC\r\n}\r\n\r\nexport class Sphere3 {\r\n    #center: Point | undefined = undefined\r\n    #squareRadius: Fraction | undefined = undefined\r\n    #equation: Equation | undefined = undefined\r\n    #format: SPHERE3_FORMAT = SPHERE3_FORMAT.CENTER_RADIUS\r\n\r\n    constructor(center?: Point, radius?: InputValue<Fraction>) {\r\n        if (center && radius) {\r\n            this.#center = center\r\n            this.#squareRadius = new Fraction(radius).clone().pow(2)\r\n            this.#computeEquation()\r\n        }\r\n        return this\r\n    }\r\n\r\n    fromEquation(equation: Equation | string): this {\r\n        const equ = new Equation(equation).moveLeft().reduce()\r\n\r\n        // Check that x, y, z has the same power and same coefficient.\r\n        const letters = ['x', 'y', 'z']\r\n\r\n        if (letters.some((letter) => equ.degree(letter).value !== 2)){\r\n            return this.makeUndefined()\r\n        }\r\n\r\n        const coefficient = equ.left.monomByDegree(2, 'x').coefficient\r\n        if (letters.some((letter) => equ.left.monomByDegree(2, letter).coefficient.isNotEqual(coefficient))) {\r\n            return this.makeUndefined()\r\n        }\r\n\r\n        this.#center = new Point(\r\n            equ.left.monomByDegree(1, 'x').coefficient.clone().opposite().divide(2),\r\n            equ.left.monomByDegree(1, 'y').coefficient.clone().opposite().divide(2),\r\n            equ.left.monomByDegree(1, 'z').coefficient.clone().opposite().divide(2)\r\n        )\r\n\r\n        this.#squareRadius = equ.left.monomByDegree(0)\r\n            .coefficient.clone().opposite()\r\n            .add(this.#center.x.clone().pow(2))\r\n            .add(this.#center.y.clone().pow(2))\r\n            .add(this.#center.z.clone().pow(2))\r\n\r\n        this.#computeEquation()\r\n        return this\r\n    }\r\n\r\n    get center(): Point {\r\n        if (this.#center === undefined) {\r\n            throw new Error('Sphere3 is undefined')\r\n        }\r\n        return this.#center\r\n    }\r\n\r\n    get squareRadius(): Fraction {\r\n        if (this.#squareRadius === undefined) {\r\n            throw new Error('Sphere3 is undefined')\r\n        }\r\n        return this.#squareRadius\r\n    }\r\n\r\n    get radius(): { tex: string, display: string, value: number } {\r\n        if (this.#squareRadius === undefined) {\r\n            throw new Error('Sphere3 is undefined')\r\n        }\r\n\r\n        if (this.#squareRadius.isSquare()) {\r\n            return {\r\n                tex: this.#squareRadius.clone().sqrt().tex,\r\n                display: this.#squareRadius.clone().sqrt().display,\r\n                value: this.#squareRadius.clone().sqrt().value\r\n            }\r\n        } else {\r\n            return {\r\n                tex: `\\\\sqrt{${this.#squareRadius.tex}}`,\r\n                display: `sqrt(${this.#squareRadius.display})`,\r\n                value: this.#squareRadius.clone().sqrt().value\r\n            }\r\n        }\r\n    }\r\n\r\n    get equation(): Equation {\r\n        if (this.#equation === undefined) {\r\n            throw new Error('Sphere3 is undefined')\r\n        }\r\n        return this.#equation\r\n    }\r\n\r\n    makeUndefined(): this {\r\n        this.#center = undefined\r\n        this.#squareRadius = undefined\r\n        this.#equation = undefined\r\n        return this\r\n    }\r\n\r\n    get centerRadius(): this {\r\n        this.#format = SPHERE3_FORMAT.CENTER_RADIUS\r\n        return this\r\n    }\r\n\r\n    get developped(): this {\r\n        this.#format = SPHERE3_FORMAT.DEVELOPPED\r\n        return this\r\n    }\r\n\r\n\r\n    get tex(): string {\r\n        return this.#output(true)\r\n    }\r\n\r\n    get display(): string {\r\n        return this.#output(false)\r\n    }\r\n\r\n    #output = (asTex: boolean): string => {\r\n        if (this.#equation === undefined) {\r\n            throw new Error('Sphere3 is undefined')\r\n        }\r\n\r\n        if (this.#format === SPHERE3_FORMAT.DEVELOPPED) {\r\n            return asTex ? this.#equation.tex : this.#equation.display\r\n        }\r\n\r\n        const output: string[] = []\r\n        const letters: ('x' | 'y' | 'z')[] = ['x', 'y', 'z']\r\n\r\n        letters.forEach((letter: 'x' | 'y' | 'z') => {\r\n            if (this.center[letter].isZero()) {\r\n                output.push(`${letter}^2`)\r\n            } else {\r\n                const P = new Polynom(letter).subtract(this.center[letter])\r\n                output.push(\r\n                    asTex ?\r\n                        `\\\\(${P.tex}\\\\)^2` :\r\n                        `(${P.display})^2`\r\n                )\r\n            }\r\n        })\r\n\r\n        return output.join('+') + '=' + (asTex ? this.squareRadius.tex : this.squareRadius.display)\r\n\r\n    }\r\n\r\n    #computeEquation(): void {\r\n        this.#equation = new Equation(\r\n            new Polynom('x').subtract(this.center.x).pow(2)\r\n                .add(\r\n                    new Polynom('y').subtract(this.center.y).pow(2)\r\n                )\r\n                .add(\r\n                    new Polynom('z').subtract(this.center.z).pow(2)\r\n                ),\r\n            new Polynom(this.squareRadius)\r\n        ).reduce()\r\n    }\r\n\r\n    static RELATIVE_POSITION = SPHERE3_RELATIVE_POSITION\r\n    relativePosition = (S: Sphere3): SPHERE3_RELATIVE_POSITION => {\r\n        const distance = this.center.distanceTo(S.center).value\r\n        const r1 = this.radius.value\r\n        const r2 = S.radius.value\r\n\r\n        if (distance > r1 + r2) {\r\n            return SPHERE3_RELATIVE_POSITION.EXTERIOR\r\n        }\r\n\r\n        if (distance === r1 + r2) {\r\n            return SPHERE3_RELATIVE_POSITION.TANGENT_OUTSIDE\r\n        }\r\n\r\n        if(distance===0) {\r\n            return r1===r2 ? SPHERE3_RELATIVE_POSITION.SUPERPOSED : SPHERE3_RELATIVE_POSITION.CONCENTRIC\r\n        }\r\n\r\n        if (distance === Math.abs(r1 - r2)) {\r\n            return SPHERE3_RELATIVE_POSITION.TANGENT_INSIDE\r\n        }\r\n\r\n\r\n        if (distance < Math.abs(r1 - r2)) {\r\n            return SPHERE3_RELATIVE_POSITION.INTERIOR\r\n        }\r\n\r\n        return SPHERE3_RELATIVE_POSITION.SECANT\r\n\r\n    }\r\n\r\n    isPointOnSphere = (P: Point): boolean => {\r\n        return this.#equation?.test({\r\n            x: P.x,\r\n            y: P.y,\r\n            z: P.z\r\n        }) ?? false\r\n    }\r\n}","import type { randomCoefficientConfig } from \"../rndTypes\"\r\nimport { Fraction } from \"../../coefficients/fraction\"\r\nimport { randomInt, randomIntSym } from \"../rndHelpers\"\r\n\r\nexport function rndFraction(userConfig?: randomCoefficientConfig): Fraction {\r\n    const config = Object.assign(\r\n        {\r\n            negative: true,\r\n            max: 10,\r\n            reduced: true,\r\n            zero: true,\r\n            natural: false\r\n        }, userConfig)\r\n\r\n    // Create a null fraction\r\n    const Q = new Fraction()\r\n\r\n\r\n    if (config.negative) {\r\n        // Allow negative numbers\r\n        Q.numerator = randomIntSym(config.max, config.zero)\r\n    } else {\r\n        // Only positive numbers\r\n        Q.numerator = randomInt(config.zero ? 0 : 1, config.max)\r\n    }\r\n\r\n    if (config.natural) {\r\n        Q.denominator = 1\r\n    } else {\r\n        let securityCount = 0\r\n        while (Q.isRelative() && securityCount < 10) {\r\n            Q.denominator = randomInt(1, config.max)\r\n            securityCount++\r\n        }\r\n    }\r\n\r\n    return config.reduced ? Q.reduce() : Q\r\n}\r\n","import type { randomMonomConfig } from \"../rndTypes\"\r\nimport { Monom } from \"../../algebra/monom\"\r\nimport { rndFraction } from \"../coefficient/rndFraction\"\r\nimport { randomItem } from \"../rndHelpers\"\r\n\r\nexport function rndMonom(userConfig?: randomMonomConfig): Monom {\r\n    const config = Object.assign(\r\n        {\r\n            letters: 'x',\r\n            degree: 2,\r\n            fraction: true,\r\n            zero: false\r\n        }, userConfig)\r\n\r\n    // Create a monom instance\r\n    const M = new Monom()\r\n\r\n    // Generate the coefficient\r\n    M.coefficient = rndFraction({\r\n        zero: config.zero,\r\n        reduced: true,\r\n        natural: !config.fraction\r\n    })\r\n\r\n    if (config.letters.length > 1) {\r\n        // Initialise each items...\r\n        for (const L of config.letters.split('')) {\r\n            M.setLetter(L, 0)\r\n        }\r\n        for (let i = 0; i < config.degree; i++) {\r\n            const L = randomItem(config.letters.split(\"\"))\r\n            M.setLetter(L, M.degree(L).clone().add(1))\r\n        }\r\n    } else {\r\n        M.setLetter(config.letters, config.degree)\r\n    }\r\n\r\n    return M\r\n}","import type { randomPolynomConfig } from \"../rndTypes\"\r\nimport { rndMonom } from \"./rndMonom\"\r\nimport { Polynom, Monom } from \"../../algebra\"\r\nimport { randomInt } from \"../rndHelpers\"\r\n\r\nconst factorableConfig = {\r\n    letters: 'x',\r\n    degree: 2,\r\n    fraction: false,\r\n    zero: false,\r\n    unit: false,\r\n    factorable: false,\r\n    allowNullMonom: true,\r\n    numberOfMonoms: 0,\r\n    positive: true\r\n}\r\n\r\nexport function rndPolynom(userConfig?: randomPolynomConfig): Polynom {\r\n    const config = Object.assign(\r\n        factorableConfig,\r\n        userConfig\r\n    )\r\n\r\n    // TODO: Create a factorable polynom does not work !!!!!\r\n\r\n    // Create the polynom\r\n    const P = new Polynom().empty()\r\n\r\n    let M: Monom\r\n\r\n    for (let i = config.degree; i >= 0; i--) {\r\n        // Create monom of corresponding degree.\r\n        M = rndMonom({\r\n            letters: config.letters,\r\n            degree: i,\r\n            fraction: config.fraction,\r\n            zero: (i === config.degree) ? false : config.allowNullMonom\r\n        })\r\n\r\n        // If degree is the greatest and unit is true, set the monom value to one.\r\n        if (config.unit && config.degree === i) {\r\n            M.coefficient.one()\r\n        }\r\n\r\n        // Add to the polynom\r\n        P.add(M)\r\n    }\r\n\r\n    // Make sure the first monom is positive.\r\n    if (config.positive && P.monomByDegree().coefficient.isNegative()) {\r\n        P.monomByDegree().coefficient.opposite()\r\n    }\r\n\r\n    // If the number of monoms is greater than the allowed value, remove some of them... except the first one !\r\n    if (config.numberOfMonoms\r\n        && config.numberOfMonoms > 0\r\n        && config.numberOfMonoms < P.length) {\r\n        while (P.length > config.numberOfMonoms) {\r\n            // Remove a random monom, except the first one\r\n            const index = randomInt(1, P.length - 1)\r\n\r\n            P.monoms.splice(index, 1)\r\n        }\r\n    }\r\n\r\n    return P.reduce()\r\n}\r\n\r\nexport function rndFactorablePolynom(userConfig?: randomPolynomConfig): Polynom {\r\n    const config = Object.assign(\r\n        factorableConfig,\r\n        userConfig\r\n    )\r\n\r\n    const P = new Polynom().one()\r\n\r\n    const _factorableConfig = { ...config }\r\n    _factorableConfig.degree = 1\r\n    _factorableConfig.factorable = false\r\n\r\n    for (let i = 0; i < config.degree; i++) {\r\n        P.multiply(rndPolynom(_factorableConfig))\r\n    }\r\n\r\n    return P.reduce()\r\n}","import type { randomEquationConfig } from \"../rndTypes\"\r\nimport { Polynom } from \"../../algebra/polynom\"\r\nimport { Equation } from \"../../algebra/equation\"\r\nimport { rndPolynom } from \"./rndPolynom\"\r\n\r\nexport function rndEquation(userConfig?: randomEquationConfig): Equation {\r\n    const config = Object.assign(\r\n        {\r\n            letters: 'x',\r\n            degree: 1,\r\n            fraction: false,\r\n            zero: false,\r\n            unit: false,\r\n            factorable: false,\r\n            allowNullMonom: true,\r\n            numberOfMonoms: 0,\r\n            positive: true,\r\n            solution: {\r\n                allowZero: true,\r\n                fraction: false,\r\n                nothing: false,\r\n                everything: false\r\n            }\r\n        }, userConfig)\r\n\r\n    // Create a polynom\r\n    const P = new Polynom().one()\r\n\r\n    for (let i = 0; i < config.degree; i++) {\r\n        const factor = rndPolynom({\r\n            degree: 1,\r\n            unit: config.unit,\r\n            fraction: config.fraction,\r\n            letters: config.letters,\r\n            zero: config.zero\r\n        })\r\n        P.multiply(factor)\r\n    }\r\n\r\n    return new Equation(P, 0)\r\n}\r\n","import { Fraction } from \"../../coefficients/fraction\"\r\nimport type { randomGeometryPointConfig } from \"../rndTypes\"\r\nimport { rndFraction } from \"../coefficient/rndFraction\"\r\nimport { randomIntSym } from \"../rndHelpers\"\r\nimport { Point } from \"../../geometry/point\"\r\n\r\nexport function rndVector(userConfig?: randomGeometryPointConfig): Point {\r\n    const config: {\r\n        axis: 'x' | 'y' | 'z' | null,\r\n        fraction: boolean,\r\n        max: number,\r\n        quadrant: number | null\r\n    } = Object.assign(\r\n        {\r\n            axis: true,\r\n            fraction: false,\r\n            max: 10,\r\n            quadrant: null\r\n        }, userConfig)\r\n\r\n    const zeroX = config.axis === 'x',\r\n        zeroY = config.axis === 'y'\r\n\r\n\r\n    const x = config.fraction ?\r\n        rndFraction({ max: config.max, zero: zeroX }) :\r\n        new Fraction(randomIntSym(config.max, zeroX))\r\n\r\n    const y = config.fraction ?\r\n        rndFraction({ max: config.max, zero: zeroY }) :\r\n        new Fraction(randomIntSym(config.max, zeroY))\r\n\r\n    if (Number(config.quadrant) === 1) {\r\n        x.abs()\r\n        y.abs()\r\n    }\r\n    if (Number(config.quadrant) === 2) {\r\n        if (x.isPositive()) {\r\n            x.opposite()\r\n        }\r\n        if (y.isNegative()) {\r\n            y.opposite()\r\n        }\r\n    }\r\n    if (Number(config.quadrant) === 3) {\r\n        if (x.isPositive()) {\r\n            x.opposite()\r\n        }\r\n        if (y.isPositive()) {\r\n            y.opposite()\r\n        }\r\n    }\r\n    if (Number(config.quadrant) === 4) {\r\n        if (x.isNegative()) {\r\n            x.opposite()\r\n        }\r\n        if (y.isPositive()) {\r\n            y.opposite()\r\n        }\r\n    }\r\n\r\n    return new Point(x, y)\r\n}\r\n","import { Circle } from \"../../geometry/circle\"\r\nimport { randomInt } from \"../rndHelpers\"\r\nimport type { randomGeometryCircleConfig } from \"../rndTypes\"\r\nimport { rndVector } from \"./rndVector\"\r\n\r\nexport function rndCircle(userConfig?: randomGeometryCircleConfig): Circle {\r\n    const config = Object.assign(\r\n        {\r\n            center: {\r\n                x: { min: -10, max: 10 },\r\n                y: { min: -10, max: 10 }\r\n            },\r\n            pointsOnCircle: 8\r\n        }, userConfig)\r\n\r\n    const center = rndVector(config.center)\r\n\r\n    let rv, r\r\n    if (config.pointsOnCircle === 8) {\r\n        rv = randomInt(1, 3),\r\n            r = rv ** 2 + (rv + 1) ** 2\r\n    } else {\r\n        r = randomInt(1, 20)\r\n    }\r\n\r\n    return new Circle(center, r, true)\r\n}","import { Line } from \"../../geometry/line\"\r\nimport { Vector } from \"../../geometry/vector\"\r\nimport { randomIntSym } from \"../rndHelpers\"\r\nimport type { randomGeometryLineConfig } from \"../rndTypes\"\r\n\r\nexport function rndLine(userConfig?: randomGeometryLineConfig): Line {\r\n    const config = Object.assign(\r\n        {\r\n            A: {\r\n                x: randomIntSym(10),\r\n                y: randomIntSym(10)\r\n            },\r\n        }, userConfig)\r\n\r\n    // The A point exists.\r\n    const d = new Vector(\r\n        randomIntSym(10),\r\n        randomIntSym(10)\r\n    )\r\n\r\n    while (d.isNull) {\r\n        d.x = randomIntSym(10)\r\n        d.y = randomIntSym(10)\r\n    }\r\n\r\n    if (config.slope === 1) {\r\n        if (d.x.sign() !== d.y.sign()) {\r\n            d.y.opposite()\r\n        }\r\n    } else if (config.slope === -1) {\r\n        if (d.x.sign() !== d.y.sign()) {\r\n            d.y.opposite()\r\n        }\r\n    }\r\n\r\n    return new Line().fromPointAndDirection(new Vector(config.A.x, config.A.y), d)\r\n}","import { Line3 } from \"../../geometry/line3\"\r\nimport { Point } from \"../../geometry/point\"\r\nimport { Vector } from \"../../geometry/vector\"\r\nimport { randomIntSym } from \"../rndHelpers\"\r\nimport type { randomGeometryLine3Config } from \"../rndTypes\"\r\n\r\nexport function rndLine3(userConfig?: randomGeometryLine3Config): Line3 {\r\n    const config = Object.assign(\r\n        {\r\n            A: {\r\n                x: randomIntSym(10),\r\n                y: randomIntSym(10),\r\n                z: randomIntSym(10)\r\n            },\r\n            direction: {\r\n                x: randomIntSym(10),\r\n                y: randomIntSym(10),\r\n                z: randomIntSym(10)\r\n            }\r\n        }, userConfig)\r\n\r\n    // The direction vector exists.\r\n    const A = new Point(config.A.x, config.A.y, config.A.z)\r\n    const d = new Vector(config.direction.x, config.direction.y, config.direction.z)\r\n\r\n    return new Line3(A, d)\r\n}","import type {\r\n    randomCoefficientConfig,\r\n    randomEquationConfig,\r\n    randomGeometryCircleConfig,\r\n    randomGeometryLine3Config,\r\n    randomGeometryLineConfig,\r\n    randomGeometryPointConfig,\r\n    randomMonomConfig,\r\n    randomPolynomConfig\r\n} from \"./rndTypes\"\r\n\r\nimport { randomArray, randomBool, randomInt, randomIntSym, randomItem, randomPrime, shuffleArray } from \"./rndHelpers\"\r\nimport { rndFraction } from \"./coefficient/rndFraction\"\r\nimport { rndMonom } from \"./algebra/rndMonom\"\r\nimport { rndPolynom } from \"./algebra/rndPolynom\"\r\nimport { rndEquation } from \"./algebra/rndEquation\"\r\nimport { rndCircle } from \"./geometry/rndCircle\"\r\nimport { rndLine } from \"./geometry/rndLine\"\r\nimport { rndLine3 } from \"./geometry/rndLine3\"\r\nimport { rndVector } from \"./geometry/rndVector\"\r\n\r\nexport type * from \"./rndTypes\"\r\n\r\nexport const Random = {\r\n    equation: (config?: randomEquationConfig) => {\r\n        return rndEquation(config)\r\n    },\r\n\r\n    polynom: (config?: randomPolynomConfig) => {\r\n        return rndPolynom(config)\r\n    },\r\n\r\n    monom: (config?: randomMonomConfig) => {\r\n        return rndMonom(config)\r\n    },\r\n\r\n    fraction: (config?: randomCoefficientConfig) => {\r\n        return rndFraction(config)\r\n    },\r\n\r\n    number: (from: number, to: number, exclude?: number[]): number => {\r\n        return randomInt(from, to, exclude)\r\n    },\r\n\r\n    numberSym: (max: number, allowZero?: boolean): number => {\r\n        return randomIntSym(max, allowZero)\r\n    },\r\n\r\n    prime: (max: number): number => {\r\n        return randomPrime(max)\r\n    },\r\n\r\n    bool: (percent?: number): boolean => {\r\n        return randomBool(percent)\r\n    },\r\n\r\n    array: <T>(arr: T[], number?: number): T[] => {\r\n        return randomArray(arr, number)\r\n    },\r\n\r\n    item: <T>(arr: T[]): T => {\r\n        return randomItem(arr)\r\n    },\r\n\r\n    shuffle: <T>(arr: T[]): T[] => {\r\n        return shuffleArray(arr)\r\n    },\r\n\r\n    line: (config?: randomGeometryLineConfig) => {\r\n        return rndLine(config)\r\n    },\r\n\r\n    line3: (config?: randomGeometryLine3Config) => {\r\n        return rndLine3(config)\r\n    },\r\n\r\n    vector: (config?: randomGeometryPointConfig) => {\r\n        return rndVector(config)\r\n    },\r\n\r\n    point: (config?: randomGeometryPointConfig) => {\r\n        const vector = rndVector(config)\r\n        vector.asPoint = true\r\n\r\n        return vector\r\n    },\r\n\r\n    circle: (config?: randomGeometryCircleConfig) => {\r\n        return rndCircle(config)\r\n    }\r\n}","// Expose as global\r\nexport * from \"./coefficients\"\r\nexport * from \"./algebra\"\r\nexport * from \"./geometry\"\r\n\r\n// Import items individually to make a global object\r\n\r\n// Coefficients\r\nimport {Fraction, NthRoot} from \"./coefficients\"\r\n\r\n// Algebra\r\nimport {Equation, Factor, LinearSystem, LogicalSet, Monom, PolyFactor, Polynom, Matrix} from \"./algebra\"\r\n\r\n// Geometry\r\nimport {Circle, Line, Line3, Plane3, Point, Triangle, Vector, Sphere3} from \"./geometry\"\r\n\r\n// Numeric\r\nimport {Numeric} from \"./numeric\"\r\nexport {Numeric}\r\n\r\n// NumExp\r\nimport {NumExp} from \"piexpression\"\r\nexport {NumExp}\r\n\r\n// randomization\r\nimport {Random} from \"./randomization/random\"\r\nexport {Random}\r\n\r\n// Typesetting\r\nexport type * from \"./pimath.interface\"\r\n\r\n// Make a global object\r\nconst PiMath = {\r\n    Numeric,\r\n    Fraction,\r\n    Root: NthRoot,\r\n    Monom,\r\n    Polynom,\r\n    Equation,\r\n    Matrix,\r\n    LinearSystem,\r\n    Factor,\r\n    PolyFactor,\r\n    LogicalSet,\r\n    Random,\r\n    Geometry: {\r\n        Vector,\r\n        Point,\r\n        Line,\r\n        Triangle,\r\n        Circle,\r\n        Line3,\r\n        Plane3,\r\n        Sphere3\r\n    },\r\n    NumExp\r\n}\r\n\r\n// Export as default value\r\nexport default PiMath\r\n"],"names":["decompose","value","divs","dividers","arr","u","v","divideNumbersByGCD","values","g","greatestCommonDivisor","x","absV","maxV","D","i","a","b","gcd2","leastCommonMultiple","numberCorrection","number_of_digits","periodic","primes","nb","primesValues","pythagoreanTripletsWithTarget","target","targetIsSquare","triplets","targetValue","round","decimals","Numeric","FRAC_TYPE","Fraction","#approximative","#denominator","#numerator","#type","denominatorOrPeriodic","S","decimal","p","power","F","fractions","M","f","num","den","m","compare","reverse","sorted","unique","distinct","R","N","k","sign","compareFraction","Q","n","than","controlNumerator","controlDenominator","result","NthRoot","#radical","#nth","#coefficient","#isValid","C","radical","nthroot","coefficient","V","EquationSolver","#leftPolynom","#variable","left","right","variable","equ","degree","#solveLinear","#solveQuadratic","solutions","polynom","#solveByFactorization","#solveByBissection","#solveCubic_CardanFormula","#makeApproximativeSolution","output","#makeSolution","fraction","coeffs","B","evaluatedPoints","#solveByBissection_evaluatePoints","#solveByBissection_getCouples","couple","bissection","#solveByBissection_algorithm","tol","fa","fb","mid","fmid","bounds","slice","dx","searchValue","couples","index","previous","lcm","min","curr","dividersA","dividersB","testingSolutions","da","db","s","zeroPolynom","solver","c","d","an","bn","cn","q","P","delta","x1","x2","pv","qv","anv","delta2","f1","f2","#solveQuadratic_Output","deltaFactor","gcd","b2","a2","deltaGcd","deltaK1","deltaK2","texOutput","displayOutput","_","e","A","h","t","O","o","T","r","w","U","y","I","l","E","Monom","#literal","inputStr","#shutingYardToReducedMonom","#cloneLiteral","monoms","letter","mAsMonom","dM","L","letters","literals","monomDividers","asNumeric","#evaluateAsNumeric","tmpValues","primitive","div","M1","M2","K","item","key","pow","tmpList","litt","currentLetter","rpn","ShutingYard","stack","element","ShutingyardType","#shutingYard_AddToken","q1","q2","wrapParenthesis","str","tex","replace_in_array","haystack","search","start","end","operation_pow","Polynom","#defaultVariable","#factors","#monoms","#roots","#rootsCache","polynomString","#parseString","#genDisplay","numerator","denominator","dP","#divideByFraction","#divideByInteger","quotient","reminder","maxMP","degreeP","newM","MaxIteration","monom","factors","tempPolynom","securityLoop","maxDegree","allDividers","#getAllPotentialFactors","pX","pC","dX","dC","coeff","orderedPolynom","length","denominators","numerators","valuesA","valuesB","pString","zero","#compare","Ms","#multiplyByPolynom","#multiplyByFraction","#multiplyByMonom","#multiplyByInteger","j","revert","otherLetters","resultPolynom","roots","signs","_x","_root","test","cP1","cP2","m1","nbF","#factorize2ndDegree","P1","P2","factor","xFactors","xyzPolynom","forceSign","wrapParentheses","withAllMultiplicationSign","m2","m1d","m2d","#shutingYardToReducedPolynom","#shutingYard_addToken","Equation","#left","#right","#sign","equationString","strSign","#findSign","pStr","#formatSign","p1","p2","mMove","cMove","#reverseSign","allLeft","move","solutionAsTex","uniqueSolutions","sol","signStr","Factor","#displayMode","#polynom","#power","#singleMode","base","tos","FACTOR_DISPLAY","LinearSystem","#equations","#variables","equations","#findLetters","matrix","cols","row","vars","operators","equStr","equArray","operatorsColumns","#makeMatrix","eq1","eq2","factor1","factor2","eq1multiplied","eq2multiplied","vector","augmentedMatrix","pivot","row_to_add","LS","acc","LogicalSet","#rpn","ShutingyardMode","token","varStack","second","first","#evaluateAsVenn","tokenSets","reference","referenceSet","PolyFactor","#extractNumeratorAndDenominator","numTeX","denTeX","#gcdWith","PF1","PF2","factors1","keyFactors","factors2","power2","#lcmWith","PF","remainingPolynom","pf","dPF","derivativeFactor","newFactors","self","aPower","bPower","aLength","bLength","aDegree","bDegree","roots_key","empty_signs","root","aligned_signs","_sign","rootSign","k_numerator","k_denominator","kF","Matrix","#digits","#matrix_parenthesis","#values","rowCount","colCount","duplicates","dup_row","wrapper","aij","rows","rows2","cols2","column","coMatrix","det","callback","rowItems","vectors","cofactors_matrix","determinant","aij_are_equals","col","areVectorsEquals","v1","v2","areVectorsColinears","dotProduct","determinantFromVectors","Vector","#array","#asPoint","norm","V1","V2","scalar","sharp","radian","components","LinePropriety","Line3Propriety","randomBool","percent","randomInt","exclude","randomIntSym","max","randomPrime","randomItem","randomArray","number","shuffleArray","temp","Point","nbs","Line","#OA","#a","#b","#c","#d","#outputMode","#reduceBeforeDisplay","formattedValues","canonical","pt","d2","elem","orientation","pt1","pt2","iPt","line","Pt","isParallel","isSame","maxIterationTest","Circle","#center","#squareRadius","#cartesian","cx","cy","distance","radius","intersectionPoints","equX","lineX","lineY","#tangentsWithSlope","#tangentsThroughOnePointOnTheCircle","#tangentsThroughOnePointOutsideTheCircle","numberIsInteger","points","triplet","square","#calculateCartesian","CT","cx_px","cy_py","polyLeft","polyRight","slope","c1","c2","sq","#reset","#parseEquation","#parseCopyCircle","#parseCenterAndPointThrough","#parseCenterAndRadius","circle","center","pointThrough","y2","y1","Line3","OAx","OAy","OAz","nx","ny","nz","AP","num2","num2d2","dnum","Plane3","#normal","#point","config","cartesian","AB","AC","direction","point","plane","Triangle","#A","#B","#C","#lines","#middles","#remarquables","#getSegment","BC","intersect","#updateTriangle","#calculateRemarquableLines","#getPointByName","ptName","ptName1","ptName2","medians","mediators","heights","bA","#calculateBisectors","bB","bC","bisectors","externalBisectors","remarquables","tlines","d1","d1n","d2n","d1Equ","d2Equ","b1","SPHERE3_RELATIVE_POSITION","Sphere3","#equation","#format","#computeEquation","equation","#output","asTex","r1","r2","rndFraction","userConfig","securityCount","rndMonom","factorableConfig","rndPolynom","rndEquation","rndVector","zeroX","zeroY","rndCircle","rv","rndLine","rndLine3","Random","from","to","allowZero","PiMath","NumExp"],"mappings":"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","x_google_ignoreList":[4]}