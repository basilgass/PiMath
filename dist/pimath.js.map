{"version":3,"file":"pimath.js","sources":["../src/numeric.ts","../src/coefficients/fraction.ts","../src/coefficients/nthRoot.ts","../src/algebra/equationSolver.ts","../node_modules/piexpression/dist/piexpression.js","../src/algebra/monom.ts","../src/helpers.ts","../src/algebra/operations.ts","../src/algebra/polynom.ts","../src/algebra/equation.ts","../src/algebra/factor.ts","../src/algebra/linearSystem.ts","../src/algebra/logicalset.ts","../src/algebra/polyFactor.ts","../src/algebra/matrix.ts","../src/geometry/geomMath.ts","../src/geometry/vector.ts","../src/pimath.interface.ts","../src/randomization/rndHelpers.ts","../src/geometry/point.ts","../src/geometry/line.ts","../src/geometry/circle.ts","../src/geometry/line3.ts","../src/geometry/plane3.ts","../src/geometry/triangle.ts","../src/geometry/sphere3.ts","../src/randomization/coefficient/rndFraction.ts","../src/randomization/algebra/rndMonom.ts","../src/randomization/algebra/rndPolynom.ts","../src/randomization/algebra/rndEquation.ts","../src/randomization/geometry/rndVector.ts","../src/randomization/geometry/rndCircle.ts","../src/randomization/geometry/rndLine.ts","../src/randomization/geometry/rndLine3.ts","../src/randomization/random.ts","../src/index.ts"],"sourcesContent":["\r\nfunction decompose(value: number): number[][] {\r\n    const divs: number[] = dividers(value)\r\n    const arr: number[][] = []\r\n    let u, v\r\n\r\n    while (divs.length > 0) {\r\n        u = divs.shift() ?? 1\r\n        v = (divs.length > 0 ? divs.pop() : +u) ?? 1\r\n\r\n        arr.push([u, v])\r\n    }\r\n\r\n    return arr\r\n}\r\n\r\nfunction divideNumbersByGCD(...values: number[]): number[] {\r\n    const g = greatestCommonDivisor(...values)\r\n\r\n    return values.map(x => x / g)\r\n}\r\n\r\n/**\r\n * Get the list of all dividers of a number.\r\n * @param value\r\n */\r\nfunction dividers(value: number): number[] {\r\n    const absV = Math.abs(value)\r\n    const maxV = Math.sqrt(absV)\r\n\r\n    // Initialize the list of dividers.\r\n    const D: number[] = []\r\n\r\n    for (let i = 1; i <= maxV; i++) {\r\n        if (value % i === 0) {\r\n            D.push(i)\r\n            D.push(absV / i)\r\n        }\r\n    }\r\n\r\n    // Order numbers.\r\n    D.sort(function (a, b) {\r\n        return a - b\r\n    })\r\n\r\n    // Make sure the array of value is unique.\r\n    return [...new Set(D)]\r\n}\r\n\r\n/**\r\n * Great Common Divisor\r\n * @param values : number values\r\n */\r\nfunction greatestCommonDivisor(...values: number[]): number {\r\n    // Define the gcd for two number\r\n    const gcd2 = function (a: number, b: number): number {\r\n        if (b === 0) {\r\n            return a\r\n        }\r\n        return gcd2(b, a % b)\r\n    }\r\n\r\n    let g = 1,\r\n        i = 2\r\n\r\n    // Nothing is given\r\n    if (values.length === 0) {\r\n        return 1\r\n    }\r\n    // Only one number is given\r\n    if (values.length === 1) {\r\n        // The first number is zero\r\n        if (values[0] === 0) {\r\n            return 1\r\n        }\r\n        // Return the number\r\n        return values[0]\r\n    }\r\n\r\n    // We have at least 2 numbers.\r\n    g = gcd2(values[0], values[1])\r\n\r\n    // The gcd of the two first value is one ? It's already finished.\r\n    if (g === 1) {\r\n        return 1\r\n    }\r\n\r\n    // The current gcd isn't one. Continue with all next values.\r\n    for (i = 2; i < values.length; i++) {\r\n        g = gcd2(g, values[i])\r\n        // Escape if gcd is already one.\r\n        if (g === 1) {\r\n            break\r\n        }\r\n    }\r\n\r\n    return Math.abs(g)\r\n}\r\n\r\n/**\r\n * Least Common Multiple\r\n * @param values: list of numbers\r\n */\r\nfunction leastCommonMultiple(...values: number[]): number {\r\n    return values.reduce(function (a, b) {\r\n        return Math.abs(a * b / greatestCommonDivisor(a, b))\r\n    })\r\n}\r\n\r\nfunction numberCorrection(value: number, number_of_digits = 3) {\r\n    return +value.toFixed(number_of_digits)\r\n}\r\n\r\nfunction periodic(value: number): number {\r\n    if (Number.isSafeInteger(value)) {\r\n        return 0\r\n    }\r\n\r\n    // Assume it's with decimal.\r\n    const decimal = (value.toString()).split('.')[0]\r\n\r\n    // The decimal part is limited\r\n    if (decimal.length < 10) {\r\n        return 0\r\n    }\r\n\r\n    // Find the periodic if it exists.\r\n    throw new Error('Periodic value: Not implemented yet')\r\n}\r\n\r\n/**\r\n * Get the list of the nth first prime numbers.\r\n * @param nb : number of primes to choose from\r\n */\r\nfunction primes(nb?: number): number[] {\r\n    const primesValues: number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973]\r\n    if (nb === undefined) {\r\n        return primesValues\r\n    } else {\r\n        return primesValues.slice(0, Math.min(primesValues.length, nb))\r\n    }\r\n}\r\n\r\nfunction pythagoreanTripletsWithTarget(target: number, targetIsSquare?: boolean): number[][] {\r\n    // méthode inverse, à partir du triplet.\r\n    const triplets = [],\r\n        targetValue = targetIsSquare === true ? +target : target ** 2\r\n    for (let u = 0; u <= target; u++) {\r\n        for (let v = 0; v <= target; v++) {\r\n            if (u ** 2 + v ** 2 === targetValue) {\r\n                triplets.push([u, v, target])\r\n            }\r\n        }\r\n    }\r\n\r\n    return triplets\r\n}\r\n\r\nfunction round(value: number, decimals = 2): number {\r\n    const exp: number = Math.round(Number(`${value}e${decimals}`))\r\n\r\n    return Number(`${exp}e-${decimals}`)\r\n}\r\n\r\n\r\nexport const Numeric = {\r\n    decompose,\r\n    dividers,\r\n    divideNumbersByGCD,\r\n    gcd: greatestCommonDivisor,\r\n    lcm: leastCommonMultiple,\r\n    numberCorrection,\r\n    periodic,\r\n    primes,\r\n    pythagoreanTripletsWithTarget,\r\n    round\r\n}","import type {compareSign, IExpression, InputValue, IPiMathObject} from \"../pimath.interface\"\r\nimport {Numeric} from \"../numeric\"\r\n\r\nenum FRAC_TYPE {\r\n    frac = 'frac',\r\n    dfrac = 'dfrac',\r\n    tfrac = 'tfrac'\r\n}\r\n\r\n/**\r\n * The fraction class make possible to handle\r\n * \\\\(\\frac{a}{b}\\\\) or \\\\[\\frac{a}{b}\\\\]  values.\r\n */\r\nexport class Fraction implements IPiMathObject<Fraction>, IExpression<Fraction> {\r\n    #approximative = false\r\n    #denominator = 1\r\n    #numerator = 1\r\n    #type: FRAC_TYPE = FRAC_TYPE.frac\r\n\r\n    constructor()\r\n    constructor(value: InputValue<Fraction>)\r\n    constructor(numerator: number, denominator: number)\r\n    constructor(decimal: number, periodLength: number)\r\n    constructor(value?: InputValue<Fraction>, denominatorOrPeriodic?: number) {\r\n\r\n        if (value !== undefined) {\r\n            this.parse(value, denominatorOrPeriodic)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse the value to get the numerator and denominator\r\n     * @param value : number or string to parse to get the fraction\r\n     * @param denominatorOrPeriodic (optional|number) : length of the periodic part: 2.333333 => 1 or denominator value\r\n     */\r\n    public parse = (value: InputValue<Fraction>, denominatorOrPeriodic?: number): Fraction => {\r\n        let S: string[]\r\n\r\n        // A null value means a zero fraction.\r\n        if (value === \"\") {\r\n            this.#numerator = 0\r\n            this.#denominator = 1\r\n            return this\r\n        }\r\n\r\n        switch (typeof value) {\r\n            case \"string\":\r\n                // Split the string value in two parts: Numerator/Denominator\r\n                S = value.split('/')\r\n\r\n                // Security checks\r\n                if (S.length > 2) {\r\n                    throw new Error(`The given value is not a valid fraction (${value})`)\r\n                }\r\n                if (S.map(x => x === '' || isNaN(Number(x))).includes(true)) {\r\n                    throw new Error(`The given value is not a valid fraction (${value})`)\r\n                }\r\n\r\n                if (S.length === 1) {\r\n                    // No divide sign - it's a number\r\n                    return this.parse(+S[0])\r\n                } else if (S.length === 2) {\r\n                    // One divide signe\r\n                    // We check if the denominator is zero\r\n                    if (S[1] === '0') {\r\n                        this.#numerator = NaN\r\n                        this.#denominator = 1\r\n                    } else {\r\n                        this.#numerator = +S[0]\r\n                        this.#denominator = +S[1]\r\n                    }\r\n                } else {\r\n                    // More than one divide sign ?\r\n                    // This is impossible\r\n                    this.#numerator = NaN\r\n                    this.#denominator = 1\r\n                }\r\n                break\r\n            case \"number\":\r\n                if (Number.isSafeInteger(value)) {\r\n                    // The given value is an integer\r\n                    this.#numerator = +value\r\n\r\n                    if (denominatorOrPeriodic === undefined || !Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this.#denominator = 1\r\n                    } else {\r\n                        this.#denominator = +denominatorOrPeriodic\r\n                    }\r\n                } else {\r\n                    // The given value is a float number\r\n                    // Get the number of decimals after the float sign\r\n                    const [, decimal] = (value.toString()).split('.')\r\n                    const p: number = decimal ? decimal.length : 0\r\n\r\n                    // Detect if the decimal part is periodic or not...\r\n\r\n                    // Transform the float number in two integer\r\n                    if (denominatorOrPeriodic === undefined) {\r\n                        this.#numerator = value * Math.pow(10, p)\r\n                        this.#denominator = Math.pow(10, p)\r\n                    } else if (Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this.#numerator = value * Math.pow(10, p) - Math.floor(value * Math.pow(10, p - denominatorOrPeriodic))\r\n                        this.denominator = Math.pow(10, p) - Math.pow(10, p - denominatorOrPeriodic)\r\n                    }\r\n\r\n                    this.reduce()\r\n                }\r\n                break\r\n            case \"object\":\r\n                if (value instanceof Fraction) {\r\n                    this.#numerator = +value.numerator\r\n                    this.#denominator = +value.denominator\r\n                }\r\n                break\r\n        }\r\n        return this\r\n    }\r\n\r\n    public clone = (): Fraction => {\r\n        const F = new Fraction()\r\n        F.numerator = +this.#numerator\r\n        F.denominator = +this.#denominator\r\n        return F\r\n    }\r\n\r\n    public static average = (...fractions: (InputValue<Fraction>)[]): Fraction => {\r\n        const M = new Fraction().zero()\r\n\r\n        for (const f of fractions) {\r\n            M.add(f)\r\n        }\r\n\r\n        M.divide(fractions.length)\r\n\r\n        return M\r\n    }\r\n\r\n    public static max = (...fractions: InputValue<Fraction>[]): Fraction => {\r\n        let M = new Fraction(fractions[0])\r\n\r\n        for (const m of fractions) {\r\n            const compare = new Fraction(m)\r\n            if (compare.isGreater(M)) {\r\n                M = compare.clone()\r\n            }\r\n        }\r\n\r\n        return M\r\n    }\r\n\r\n    public static min = (...fractions: (InputValue<Fraction>)[]): Fraction => {\r\n        let M = new Fraction(fractions[0])\r\n\r\n        for (const m of fractions) {\r\n            const compare = new Fraction(m)\r\n            if (compare.isLesser(M)) {\r\n                M = compare.clone()\r\n            }\r\n        }\r\n\r\n        return M\r\n    }\r\n\r\n    public static sort = (fractions: (InputValue<Fraction>)[], reverse?: boolean): Fraction[] => {\r\n        const fractionsObject: Fraction[] = fractions.map(f => f instanceof Fraction ? f : new Fraction(f))\r\n\r\n        const sorted = fractionsObject.sort((a, b) => a.value - b.value)\r\n\r\n        if (reverse) {\r\n            sorted.reverse()\r\n        }\r\n\r\n        return sorted\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n\r\n    public static unique = (fractions: (InputValue<Fraction>)[]): Fraction[] => {\r\n        const unique: Record<string, boolean> = {},\r\n            distinct: Fraction[] = []\r\n\r\n        fractions.forEach(x => {\r\n            if (!(x instanceof Fraction)) {\r\n                x = new Fraction(x)\r\n            }\r\n\r\n            if (!unique[x.clone().reduce().tex]) {\r\n                distinct.push(x.clone())\r\n                unique[x.tex] = true\r\n            }\r\n        })\r\n\r\n        return distinct\r\n    }\r\n\r\n    public static xMultiply = (...values: (InputValue<Fraction>)[]): Fraction => {\r\n        const R = new Fraction()\r\n        // Parse the value.\r\n        // If it's a fraction, return a clone of it\r\n        // If it's an integer, return the fraction F/1\r\n        for (const value of values) {\r\n\r\n            const F = new Fraction(value)\r\n            R.numerator = R.numerator * F.numerator\r\n            R.denominator = R.denominator * F.denominator\r\n        }\r\n\r\n        return R\r\n    }\r\n\r\n    public abs = (): this => {\r\n        this.#numerator = Math.abs(this.#numerator)\r\n        this.#denominator = Math.abs(this.#denominator)\r\n        return this\r\n    }\r\n\r\n    public add = (F: InputValue<Fraction>): Fraction => {\r\n        if (F instanceof Fraction) {\r\n            const N: number = this.#numerator,\r\n                D: number = this.#denominator\r\n\r\n            this.#numerator = N * F.denominator + F.numerator * D\r\n            this.#denominator = D * F.denominator\r\n        } else {\r\n            return this.add(new Fraction(F))\r\n        }\r\n\r\n        return this.reduce()\r\n    }\r\n\r\n    public amplify = (k: number): this => {\r\n        if (Number.isSafeInteger(k)) {\r\n            this.#numerator *= k\r\n            this.#denominator *= k\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Simple function to determine if it's a fraction\r\n     */\r\n    public areEquals = (...F: Fraction[]): boolean => {\r\n        return F.every(f => f.isEqual(F[0]))\r\n    }\r\n\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param F (Coefficient) The coefficient to _compare\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    public compare = (F: InputValue<Fraction>, sign?: compareSign): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '='\r\n        }\r\n\r\n        let compareFraction: Fraction\r\n        if (F instanceof Fraction) {\r\n            compareFraction = F.clone()\r\n        } else {\r\n            compareFraction = new Fraction(F)\r\n        }\r\n\r\n        switch (sign) {\r\n            case '>':\r\n                return this.value > compareFraction.value\r\n            case \">=\":\r\n            case \"=>\":\r\n            case \"geq\":\r\n                return this.value >= compareFraction.value\r\n            case \"<\":\r\n                return this.value < compareFraction.value\r\n            case \"<=\":\r\n            case \"=<\":\r\n            case \"leq\":\r\n                return this.value <= compareFraction.value\r\n            case \"=\":\r\n                // let F2: Fraction = compareFraction.clone().reduce(),\r\n                //     F1: Fraction = this.clone().reduce();\r\n                // return (F1.numerator === F2.numerator && F1.denominator === F2.denominator);\r\n                return this.value === compareFraction.value\r\n            case \"<>\":\r\n                return this.value !== compareFraction.value\r\n            default:\r\n                return false\r\n        }\r\n    }\r\n\r\n    public get denominator(): number {\r\n        return this.#denominator\r\n    }\r\n\r\n    public set denominator(value: number) {\r\n        this.#denominator = value\r\n    }\r\n\r\n    public get dfrac(): this {\r\n        this.#type = FRAC_TYPE.dfrac\r\n        return this\r\n    }\r\n\r\n    public get display(): string {\r\n        if (this.isExact()) {\r\n            if (this.#denominator === 1) {\r\n                return `${this.#numerator}`\r\n            } else {\r\n                return `${this.#numerator}/${this.#denominator}`\r\n            }\r\n        } else {\r\n            return this.value.toFixed(3)\r\n        }\r\n    }\r\n\r\n    public divide = (F: Fraction | number): Fraction => {\r\n        const Q = new Fraction(F)\r\n\r\n        if (Q.numerator === 0) {\r\n            return new Fraction().infinite()\r\n        }\r\n\r\n        const N: number = +this.#numerator,\r\n            D: number = +this.#denominator\r\n\r\n        this.#numerator = N * Q.denominator\r\n        this.#denominator = D * Q.numerator\r\n        return this.reduce()\r\n    }\r\n\r\n    public get frac(): this {\r\n        this.#type = FRAC_TYPE.frac\r\n        return this\r\n    }\r\n\r\n    public infinite = (): this => {\r\n        this.#numerator = Infinity\r\n        this.#denominator = 1\r\n        return this\r\n    }\r\n\r\n    public invalid = (): this => {\r\n        this.#numerator = NaN\r\n        this.#denominator = 1\r\n        return this\r\n    }\r\n\r\n    public inverse = (): this => {\r\n        const n = +this.#numerator\r\n        this.#numerator = +this.#denominator\r\n        this.#denominator = n\r\n\r\n        return this\r\n    }\r\n\r\n    public isApproximative = (): boolean => {\r\n        return this.#approximative ||\r\n            this.#numerator.toString().length >= 15 && this.#denominator.toString().length >= 15\r\n    }\r\n\r\n    public isEqual = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '=')\r\n    }\r\n\r\n    public isEven = (): boolean => {\r\n        return this.isRelative() && this.value % 2 === 0\r\n    }\r\n\r\n    public isExact = (): boolean => {\r\n        return !this.isApproximative()\r\n    }\r\n\r\n    public isFinite = (): boolean => {\r\n        return !this.isInfinity() && !this.isNaN()\r\n    }\r\n\r\n    public isGeq = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '>=')\r\n    }\r\n\r\n    public isGreater = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '>')\r\n    }\r\n\r\n    public isInfinity = (): boolean => {\r\n        return Math.abs(this.#numerator) === Infinity\r\n    }\r\n\r\n    public isInverted = (p: Fraction): boolean => {\r\n        return this.isEqual(new Fraction().one().divide(p.clone()))\r\n    }\r\n\r\n    public isLeq = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '<=')\r\n    }\r\n\r\n    /* Compare shortcuts */\r\n    public isLesser = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '<')\r\n    }\r\n\r\n    public isNaN = (): boolean => {\r\n        return isNaN(this.#numerator)\r\n    }\r\n\r\n    public isNatural = (): boolean => {\r\n        return this.isRelative() && this.isPositive()\r\n    }\r\n\r\n    public isNegative = (): boolean => {\r\n        return this.sign() === -1\r\n    }\r\n\r\n    public isNegativeOne = (): boolean => {\r\n        return this.#numerator === -1 && this.#denominator === 1\r\n    }\r\n\r\n    public isNotEqual = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '<>')\r\n    }\r\n\r\n    // ------------------------------------------\r\n\r\n    public isNotZero = (): boolean => {\r\n        return this.#numerator !== 0\r\n    }\r\n\r\n    public isOdd = (): boolean => {\r\n        return this.isRelative() && this.value % 2 === 1\r\n    }\r\n\r\n    public isOne = (): boolean => {\r\n        return this.#numerator === 1 && this.#denominator === 1\r\n    }\r\n\r\n    public isOpposite = (p: Fraction): boolean => {\r\n        return this.isEqual(p.clone().opposite())\r\n    }\r\n\r\n    public isPositive = (): boolean => {\r\n        return this.sign() === 1\r\n    }\r\n\r\n    public isRational = (): boolean => {\r\n        return !this.isRelative()\r\n    }\r\n\r\n    public isReduced = (): boolean => {\r\n        return Math.abs(Numeric.gcd(this.#numerator, this.#denominator)) === 1\r\n    }\r\n\r\n    public isRelative = (): boolean => {\r\n        return this.clone().reduce().denominator === 1\r\n    }\r\n\r\n    public isSquare = (): boolean => {\r\n        return Math.sqrt(this.#numerator) % 1 === 0 && Math.sqrt(this.#denominator) % 1 === 0\r\n    }\r\n\r\n    public isStrictlyNegative = (): boolean => {\r\n        return this.value < 0\r\n    }\r\n\r\n    public isStrictlyPositive = (): boolean => {\r\n        return this.value > 0\r\n    }\r\n\r\n    // Mathematical operations specific to fractions\r\n    public isZero = (): boolean => {\r\n        return this.#numerator === 0\r\n    }\r\n\r\n    public multiply = (F: Fraction | number): this => {\r\n        // Parse the value.\r\n        // If it's a fraction, return a clone of it\r\n        // If it's an integer, return the fraction F/1\r\n        const Q = new Fraction(F)\r\n\r\n        this.#numerator = this.#numerator * Q.numerator\r\n        this.#denominator = this.#denominator * Q.denominator\r\n\r\n        return this.reduce()\r\n    }\r\n\r\n    // ------------------------------------------\r\n    public get numerator(): number {\r\n        return this.#numerator\r\n    }\r\n\r\n    public set numerator(value: number) {\r\n        this.#numerator = value\r\n    }\r\n\r\n    public one = (): this => {\r\n        this.#numerator = 1\r\n        this.#denominator = 1\r\n        return this\r\n    }\r\n\r\n    public opposite = (): this => {\r\n        this.#numerator = -this.#numerator\r\n        return this\r\n    }\r\n\r\n    public pow = (p: number | Fraction): Fraction => {\r\n        if (p instanceof Fraction) {\r\n            return this.pow(p.value)\r\n        }\r\n\r\n        this.reduce()\r\n        if (p < 0) {\r\n            this.inverse()\r\n        }\r\n\r\n        // Check if numerator and denominator are roots of...\r\n        // otherwise, convert to numeric.\r\n        const controlNumerator = Math.floor(Math.pow(this.#numerator, Math.abs(p))),\r\n            controlDenominator = Math.floor(Math.pow(this.#denominator, Math.abs(p)))\r\n\r\n        if (controlNumerator ** Math.abs(p) === this.#numerator\r\n            &&\r\n            controlDenominator ** Math.abs(p) === this.#denominator) {\r\n            this.#numerator = this.#numerator ** Math.abs(p)\r\n            this.#denominator = this.#denominator ** Math.abs(p)\r\n        } else {\r\n            this.#numerator = this.#numerator ** Math.abs(p)\r\n            this.#denominator = this.#denominator ** Math.abs(p)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    // ------------------------------------------\r\n    public reduce = (): this => {\r\n        const g = Numeric.gcd(this.#numerator, this.#denominator)\r\n        this.#numerator = this.#numerator / g\r\n        this.#denominator = this.#denominator / g\r\n\r\n        if (this.#denominator < 0) {\r\n            this.#denominator = -this.#denominator\r\n            this.#numerator = -this.#numerator\r\n        }\r\n        return this\r\n    }\r\n\r\n    public root = (p: number): this => {\r\n\r\n        // Check if they are perfect roots..\r\n        if (p === 0) {\r\n            return this\r\n        }\r\n\r\n        // If negative, inverse the fraction\r\n        if (p < 0) {\r\n            this.inverse()\r\n        }\r\n\r\n        // if p is not a safe integer, throw error\r\n        if (!Number.isSafeInteger(p)) {\r\n            throw new Error(\"The root must be an integer.\")\r\n        }\r\n\r\n        // if the fraction is negative and the root is even, throw error\r\n        if (this.isNegative() && p % 2 === 0) {\r\n            throw new Error(\"The root of a negative number must be odd.\")\r\n        }\r\n\r\n        // get the sign of the fraction and make it positive\r\n        const sign = this.sign()\r\n        this.abs()\r\n\r\n        // Reduce the fraction\r\n        this.reduce()\r\n\r\n        // Check if numerator and denominator are roots of...\r\n        // otherwise, convert to numeric.\r\n        const controlNumerator = Math.floor(Math.pow(this.#numerator, Math.abs(1 / p))),\r\n            controlDenominator = Math.floor(Math.pow(this.#denominator, Math.abs(1 / p)))\r\n\r\n        this.#numerator = Math.pow(this.#numerator, Math.abs(1 / p))\r\n        this.#denominator = Math.pow(this.#denominator, Math.abs(1 / p))\r\n\r\n        if (controlNumerator !== this.#numerator\r\n            ||\r\n            controlDenominator !== this.#denominator) {\r\n            // The fraction is not a perfect root - make it approximative\r\n            this.#numerator = this.#numerator / this.#denominator\r\n            this.#denominator = 1\r\n            this.#approximative = true\r\n        }\r\n\r\n        // Restore the sign\r\n        this.multiply(sign)\r\n\r\n        return this\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n\r\n    public sign = (): number => {\r\n        return (this.#numerator * this.#denominator >= 0) ? 1 : -1\r\n    }\r\n\r\n    public sqrt = (): this => {\r\n        return this.root(2)\r\n    }\r\n\r\n    public subtract = (F: Fraction | number): Fraction => {\r\n        if (F instanceof Fraction) {\r\n            return this.add(F.clone().opposite())\r\n        } else {\r\n            return this.add(-F)\r\n        }\r\n    }\r\n\r\n    // Display getter\r\n    public get tex(): string {\r\n        if (this.isInfinity()) {\r\n            return `${this.sign() === 1 ? '+' : '-'}\\\\infty`\r\n        }\r\n\r\n\r\n        if (this.isExact()) {\r\n            if (this.#denominator === 1) {\r\n                return `${this.#numerator}`\r\n            } else if (this.#numerator < 0) {\r\n                return `-\\\\${this.#type}{ ${-this.#numerator} }{ ${this.#denominator} }`\r\n            } else {\r\n                return `\\\\${this.#type}{ ${this.#numerator} }{ ${this.#denominator} }`\r\n            }\r\n        } else {\r\n            return this.value.toFixed(3)\r\n        }\r\n    }\r\n\r\n    public get texWithSign(): string {\r\n        return this.isPositive() ? `+${this.tex}` : this.tex\r\n    }\r\n\r\n    public get tfrac(): this {\r\n        this.#type = FRAC_TYPE.tfrac\r\n        return this\r\n    }\r\n\r\n    public get value(): number {\r\n        const result = this.#numerator / this.#denominator\r\n        return result === 0 ? 0 : result\r\n    }\r\n\r\n    public zero = (): this => {\r\n        this.#numerator = 0\r\n        this.#denominator = 1\r\n        return this\r\n    }\r\n}","// TODO: Remove NthRoot class\r\n/**\r\n * NthRoot is something like \"a+b\\sqrt{3}\r\n */\r\nexport class NthRoot {\r\n    #radical: number\r\n    #nth: number\r\n    #coefficient: number\r\n    #isValid: boolean\r\n\r\n    constructor(...values: number[]) {\r\n        this.#radical = 1\r\n        this.#coefficient = 1\r\n        this.#nth = 2\r\n        this.#isValid = true\r\n\r\n        if (values.length > 0) {\r\n            this.parse(values[0], values[1], values[2])\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get radical(): number {\r\n        return this.#radical\r\n    }\r\n\r\n    set radical(value: number) {\r\n        this.#radical = value\r\n    }\r\n\r\n    get nth(): number {\r\n        return this.#nth\r\n    }\r\n\r\n    set nth(value: number) {\r\n        if (Number.isSafeInteger(value) && value >= 2) {\r\n            this.#nth = value\r\n        } else {\r\n            // Error setting the nth root.\r\n            console.log('Error setting the nth root')\r\n            this.#nth = 2\r\n        }\r\n    }\r\n\r\n    get coefficient(): number {\r\n        return this.#coefficient\r\n    }\r\n\r\n    set coefficient(value: number) {\r\n        this.#coefficient = value\r\n    }\r\n\r\n    get tex(): string {\r\n        let C: string\r\n\r\n        if (this.#coefficient === 1) {\r\n            C = ''\r\n        } else if (this.#coefficient === -1) {\r\n            C = '-'\r\n        } else {\r\n            C = this.#coefficient.toString()\r\n        }\r\n\r\n        if (this.#radical === 1) {\r\n            return `${this.#coefficient}`\r\n        } else {\r\n            if (this.#nth === 2) {\r\n                return `${C}\\\\sqrt{${this.#radical}}`\r\n            } else {\r\n                return `${C}\\\\sqrt[${this.#nth}]{${this.#radical}}`\r\n            }\r\n        }\r\n    }\r\n\r\n    get display(): string {\r\n        let C: string\r\n\r\n        if (this.#coefficient === 1) {\r\n            C = ''\r\n        } else if (this.#coefficient === -1) {\r\n            C = '-'\r\n        } else {\r\n            C = this.#coefficient.toString()\r\n        }\r\n\r\n        if (this.#radical === 1) {\r\n            return `${this.#coefficient}`\r\n        } else {\r\n            if (this.#nth === 2) {\r\n                return `${C}sqrt{${this.#radical}}`\r\n            } else {\r\n                return `${C}root(${this.#nth}){${this.#radical}}`\r\n            }\r\n        }\r\n    }\r\n\r\n    get value(): number {\r\n        return this.#coefficient * Math.pow(this.#radical, 1 / this.#nth)\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (radical: number, nthroot?: number, coefficient?: number): this => {\r\n        this.#coefficient = coefficient ?? 1\r\n        this.#nth = nthroot ?? 2\r\n        this.#radical = radical\r\n\r\n        if (this.#nth % 2 === 0 && this.#radical < 0) {\r\n            this.#isValid = false\r\n        }\r\n        return this\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    reduce = (): this => {\r\n        // Max value to test.\r\n        let V = Math.floor(Math.pow(this.#radical, 1 / this.#nth))\r\n        while (V > 1) {\r\n            if (this.#radical % Math.pow(V, this.#nth) === 0) {\r\n                // It's dividable by V^n\r\n                this.#coefficient *= V\r\n                this.#radical = this.#radical / Math.pow(V, this.#nth)\r\n\r\n                // Redifine the new testing value (this is optimization)\r\n                V = Math.floor(Math.pow(this.#radical, 1 / this.#nth))\r\n                continue\r\n            }\r\n            V--\r\n        }\r\n        return this\r\n    }\r\n\r\n    multiply = (N: NthRoot): this => {\r\n        this.#radical *= N.radical\r\n        return this.reduce()\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Help functions\r\n    // ------------------------------------------\r\n    hasRadical = (): boolean => {\r\n        return !(this.#radical === 1 || this.#radical === 0 || !this.#isValid)\r\n    }\r\n}","import type {InputValue, ISolution} from \"../pimath.interface\"\r\nimport type {Polynom} from \"./polynom\"\r\nimport {Fraction} from \"../coefficients\"\r\nimport {Numeric} from \"../numeric\"\r\nimport type {Equation} from \"./equation\"\r\n\r\nexport class EquationSolver {\r\n    readonly #equation: Polynom\r\n    readonly #variable: string\r\n\r\n    constructor(left: Polynom | Equation, right?: Polynom, variable = \"x\") {\r\n        this.#variable = variable\r\n\r\n        if (Object.hasOwn(left, 'moveLeft')) {\r\n            const equ = left as Equation\r\n            this.#equation = equ.left.clone().subtract(equ.right)\r\n        } else {\r\n            this.#equation = (left as Polynom).clone().subtract(right ?? 0)\r\n        }\r\n    }\r\n\r\n    public solve(): ISolution[] {\r\n        const degree = this.#equation.degree().value\r\n        if (degree === 0) {\r\n            return []\r\n        }\r\n\r\n        if (degree === 1) {\r\n            return this.#solveLinear()\r\n        }\r\n\r\n        if (degree === 2) {\r\n            return this.#solveQuadratic()\r\n        }\r\n\r\n        // Try to solve by factorization -> exact solutions.\r\n        const result = this.#solveByFactorization()\r\n        if (result.length > 0) {\r\n            return result\r\n        }\r\n\r\n        // Use approximative solutions, using bissection algorithm.\r\n        return this.#solveByBissection()\r\n    }\r\n\r\n    public solveAsCardan(): ISolution[] {\r\n        if (this.#equation.degree().value !== 3) {\r\n            throw new Error(\"The equation is not cubic.\")\r\n        }\r\n        return this.#solveCubic_CardanFormula()\r\n    }\r\n\r\n    #makeApproximativeSolution(value: number, output?: { tex: string, display: string }): ISolution {\r\n        return {\r\n            variable: this.#variable,\r\n            exact: false,\r\n            value: +value.toFixed(10),\r\n            tex: output?.tex ?? '',\r\n            display: output?.display ?? ''\r\n        }\r\n    }\r\n\r\n    #makeSolution(value: InputValue<Fraction>): ISolution {\r\n        if (value instanceof Fraction && value.isApproximative()) {\r\n            return this.#makeApproximativeSolution(value.value)\r\n        }\r\n\r\n        const fraction = new Fraction(value)\r\n        return {\r\n            variable: this.#variable,\r\n            exact: fraction,\r\n            value: fraction.value,\r\n            tex: fraction.tex,\r\n            display: fraction.display\r\n        }\r\n    }\r\n\r\n    #solveByBissection(): ISolution[] {\r\n        const solutions: ISolution[] = []\r\n        const degree = this.#equation.degree().value\r\n        const coeffs = this.#equation.getCoefficients().map(x=>x.value)\r\n\r\n        // Calculate the Cauchy Bounds.\r\n        const [a, ...values] = this.#equation.getCoefficients()\r\n        const B = 1 + Math.max(...values.map(x => x.value / a.value))\r\n\r\n        // Cut the [-B;B] interval in *n* parts\r\n\r\n        // Calculate the value at each points\r\n        const n = 100\r\n        const dx = 2 * B / n\r\n        const evaluatedPoints: { x: number, fx: number }[] = []\r\n        for (let searchValue = -B; searchValue <= B; searchValue += dx) {\r\n            const x = Numeric.numberCorrection(searchValue)\r\n            evaluatedPoints.push(\r\n                {\r\n                    x,\r\n                    fx: this.#equation.evaluate(x, true) as number\r\n                }\r\n            )\r\n        }\r\n\r\n        // Sort every points\r\n        evaluatedPoints.sort((a, b) => a.x - b.x)\r\n\r\n        // Check if there is a least n opposite couples\r\n        const couples: [number, number][] = []\r\n        evaluatedPoints.forEach((value, index) => {\r\n            if (index > 0) {\r\n                if (value.fx === 0) {\r\n                    couples.push([value.x, value.x])\r\n                } else if (evaluatedPoints[index - 1].fx * value.fx < 0) {\r\n                    couples.push([\r\n                        evaluatedPoints[index - 1].x,\r\n                        value.x\r\n                    ])\r\n\r\n                }\r\n            }\r\n        })\r\n\r\n        // All solutions fund !\r\n        couples.forEach(couple => {\r\n            const [a, b] = couple\r\n\r\n            if (a === b) {\r\n                // Exact solution\r\n                solutions.push(this.#makeSolution(a))\r\n            }else{\r\n                const bissection = this.#solveByBissection_algorithm(coeffs, a, b)\r\n                if(bissection!==null) {\r\n                    solutions.push(this.#makeApproximativeSolution(bissection))\r\n                }\r\n            }\r\n        })\r\n\r\n        return solutions\r\n    }\r\n\r\n    #solveByBissection_algorithm(coeffs: number[], a: number, b: number, tol = 1e-10): number | null {\r\n        let fa = this.#equation.evaluate(a, true) as number\r\n        let fb = this.#equation.evaluate(b, true) as number\r\n\r\n        if (fa * fb > 0) {\r\n            console.log(\"Pas de racine dans l'intervalle donné\")\r\n            return null\r\n        }\r\n\r\n        let mid: number\r\n        while ((b - a) / 2 > tol) {\r\n            mid = (a + b) / 2\r\n            const fmid = this.#equation.evaluate( mid, true) as number\r\n\r\n            if (fmid === 0) {\r\n                return mid // racine exacte trouvée\r\n            } else if (fa * fmid < 0) {\r\n                b = mid\r\n                fb = fmid\r\n            } else {\r\n                a = mid\r\n                fa = fmid\r\n            }\r\n        }\r\n        return (a + b) / 2 // retourner la racine approximative\r\n    }\r\n\r\n    #solveByFactorization(): ISolution[] {\r\n        // Move everything to the left.\r\n\r\n        // Get the polynom on the left (on the right, it's zero)\r\n        let left = this.#equation.clone()\r\n\r\n        // The solutions of the equation\r\n        let solutions: ISolution[] = []\r\n\r\n        // multiply by the lcm of the denominators\r\n        // to get rid of the fractions\r\n        const lcm = left.lcmDenominator()\r\n        if (lcm !== 1) {\r\n            left.multiply(lcm)\r\n        }\r\n\r\n        // left is a polynom ax^n+...+b\r\n        const a = left.monomByDegree().coefficient // Greatest coefficient\r\n        let b = left.monomByDegree(0).coefficient // Constant term\r\n\r\n        // if the constant term is null, the polynom can be divided by x\r\n        while (b.isZero()) {\r\n            if (solutions.length === 0) {\r\n                solutions.push(this.#makeSolution(0))\r\n            }\r\n\r\n            left = (left.divide('x'))\r\n            b = left.monomByDegree(0).coefficient\r\n        }\r\n\r\n        // get all dividers of a and b\r\n        const dividersA = Numeric.dividers(a.value)\r\n        const dividersB = Numeric.dividers(b.value)\r\n\r\n        // test all possible solutions\r\n        for (const da of dividersA) {\r\n            for (const db of dividersB) {\r\n                const f = new Fraction(db, da)\r\n\r\n                // Test with the fraction\r\n                if ((left.evaluate(f) as Fraction).isZero() && !solutions.find(s => s.value === f.value)) {\r\n                    solutions.push(this.#makeSolution(f))\r\n                }\r\n\r\n                // Test with the opposite fraction\r\n                f.opposite()\r\n                if ((left.evaluate(f) as Fraction).isZero() && !solutions.find(s => s.value === f.value)) {\r\n                    solutions.push(this.#makeSolution(f))\r\n                }\r\n            }\r\n        }\r\n\r\n        // divide the left polynom by the solutions (as polynom)\r\n        // to get the reduced polynom\r\n        for (const s of solutions) {\r\n            // if the solution is exact and is zero, it's already divided: skip it !\r\n            if (s.exact !== false && (s.exact as Fraction).isZero()) {\r\n                continue\r\n            }\r\n\r\n            const p = this.#equation.clone().parse('x', (s.exact as Fraction).denominator, -(s.exact as Fraction).numerator)\r\n\r\n            while (left.isDividableBy(p)) {\r\n                left = left.divide(p)\r\n            }\r\n        }\r\n\r\n        // if the reduced polynom is of degree 0, we have found all the solutions\r\n        if (left.degree().isZero()) {\r\n            return solutions.sort((a, b) => a.value - b.value)\r\n        }\r\n\r\n        // if the reduced polynom is of degree greater than 3, we can't solve it\r\n        if (left.degree().value > 3) {\r\n            return []\r\n        }\r\n\r\n        // if the reduced polynom is of degree 1 or 2, we can solve it\r\n        const solver = new EquationSolver(left, left.clone().parse('0'), this.#variable)\r\n        solutions = solutions.concat(solver.solve())\r\n\r\n        return solutions.sort((a, b) => a.value - b.value)\r\n    }\r\n\r\n    #solveCubic_CardanFormula(): ISolution[] {\r\n        // get the coefficients of the equation\r\n        const left = this.#equation\r\n\r\n        // left is a polynom ax^3+bx^2+cx+d => the solution is x = (-b±√(b^2-4ac))/2a\r\n        const a = left.monomByDegree(3).coefficient\r\n        const b = left.monomByDegree(2).coefficient\r\n        const c = left.monomByDegree(1).coefficient\r\n        const d = left.monomByDegree(0).coefficient\r\n\r\n        // normalize the coefficient by dividing by a\r\n        const an = b.clone().divide(a)\r\n        const bn = c.clone().divide(a)\r\n        const cn = d.clone().divide(a)\r\n\r\n        // Depressed cubic equation\r\n        // x^3+px+q=0\r\n        const p = bn.clone().subtract(an.clone().pow(2).divide(3))\r\n        const q = cn.clone()\r\n            .subtract(an.clone().multiply(bn).divide(3))\r\n            .add(an.clone().pow(3).multiply(2).divide(27))\r\n\r\n\r\n        // Cardan method\r\n        // X^2 + qX - p^3/27 = 0\r\n        // X^2 -SX + P = 0\r\n        // S = u^3 + v^3 = -q\r\n        // P = u^3v^3 = -p^3/27\r\n        // u^3 and v^3 are the roots of the equation\r\n        const S = q.clone().opposite()\r\n        const P = p.clone().opposite().pow(3).divide(27)\r\n\r\n        // Discriminant : delta = -(S^2 - 4P)\r\n        // delta < 0 : 1 real solution\r\n        // delta = 0 : 2 real solutions\r\n        // delta > 0 : 3 real solutions\r\n        const delta = S.clone().pow(2).subtract(P.clone().multiply(4)).opposite()\r\n        // console.log('an=', an.display, 'bn=', bn.display, 'cn=', cn.display)\r\n        // console.log('p=', p.display, 'q=', q.display)\r\n        // console.log('S=', S.display, 'P=', P.display)\r\n        // console.log('delta=', delta.display)\r\n\r\n        // if delta is negative, there is one real solution\r\n        if (delta.isNegative()) {\r\n            const u = q.clone().opposite().add(delta.clone().opposite().sqrt()).divide(2).root(3)\r\n            const v = q.clone().opposite().subtract(delta.clone().opposite().sqrt()).divide(2).root(3)\r\n\r\n            const x = u.clone().add(v).subtract(an.clone().divide(3))\r\n\r\n            return [this.#makeSolution(x)]\r\n        }\r\n\r\n        // if delta is zero, there are two real solutions\r\n        if (delta.isZero()) {\r\n            const u = q.clone().opposite().divide(2).root(3)\r\n\r\n            const x1 = u.clone().opposite().subtract(an.clone().divide(3))\r\n            const x2 = u.clone().multiply(2).subtract(an.clone().divide(3))\r\n\r\n            // There is only one unique solution\r\n            if (x1.isEqual(x2)) {\r\n                return [this.#makeSolution(x1)]\r\n            }\r\n\r\n            return [\r\n                this.#makeSolution(x2),\r\n                this.#makeSolution(x1)\r\n            ].sort((a, b) => a.value - b.value)\r\n        }\r\n\r\n        // if delta is positive, there are three real solutions\r\n        if (delta.isPositive()) {\r\n            const x: number[] = []\r\n            const pv = p.value,\r\n                qv = q.value,\r\n                anv = an.value\r\n\r\n            for (let i = 0; i < 3; i++) {\r\n                x.push(2 * Math.sqrt(-pv / 3) * Math.cos(Math.acos(3 * qv / (2 * pv) * Math.sqrt(-3 / pv)) / 3 + 2 * Math.PI * i / 3) - anv / 3)\r\n            }\r\n\r\n            return x\r\n                .map(v => this.#makeApproximativeSolution(v))\r\n                .sort((a, b) => a.value - b.value)\r\n\r\n        }\r\n\r\n        return []\r\n    }\r\n\r\n    #solveLinear(): ISolution[] {\r\n        // The equation is linear.\r\n        const [a, b] = this.#equation.getCoefficients()\r\n\r\n        // left is a polynom ax+b => the solution is x = -b/a\r\n        const f = b.opposite().divide(a)\r\n\r\n        return [\r\n            this.#makeSolution(f)\r\n        ]\r\n    }\r\n\r\n    #solveQuadratic(): ISolution[] {\r\n\r\n        // The equation is quadratic.\r\n        // We can solve it by isolating the variable.\r\n        const left = this.#equation\r\n\r\n        // left is a polynom ax^2+bx+c => the solution is x = (-b±√(b^2-4ac))/2a\r\n        const [a, b, c] = left.getCoefficients()\r\n\r\n        // delta2 = b^2-4ac\r\n        const delta2 = b.clone().pow(2).subtract(a.clone().multiply(c).multiply(4))\r\n\r\n        // if delta2 is negative, there is no solution\r\n        if (delta2.isNegative()) {\r\n            return []\r\n        }\r\n\r\n        // if delta2 is zero, there is one solution\r\n        // if delta2 is positive, there are two solutions\r\n        // if delta2 is a square, it will be an exact solution.\r\n\r\n        if (delta2.isSquare()) {\r\n            // delta is a fraction.\r\n            // the solutions are (-b±√(b^2-4ac))/2a\r\n            const delta = delta2.sqrt()\r\n            const f1 = b.clone().opposite().add(delta).divide(a.clone().multiply(2))\r\n            const f2 = b.clone().opposite().subtract(delta).divide(a.clone().multiply(2))\r\n\r\n            // Delta is zero, there is only one solution\r\n            if (delta.isZero()) {\r\n                return [this.#makeSolution(f1)]\r\n            }\r\n\r\n            // delta is positive, there are two solutions\r\n            return [\r\n                this.#makeSolution(f1),\r\n                this.#makeSolution(f2)\r\n            ].sort((a, b) => a.value - b.value)\r\n        }\r\n\r\n        // delta is not a square, there are one or two approximative solutions.\r\n        // We will use the approximate value of the square root.\r\n        // const delta = delta2.value ** 0.5\r\n        // const f1 = (-b.value + delta) / (2 * a.value)\r\n        // const f2 = (-b.value - delta) / (2 * a.value)\r\n\r\n        return this.#solveQuadratic_Output(a, b, delta2)\r\n    }\r\n\r\n    #solveQuadratic_Output(a: Fraction, b: Fraction, delta: Fraction): ISolution[] {\r\n        // -b +/- sqrt(delta) / 2a\r\n        // reduce the sqrt - extract pow.\r\n\r\n        // Get the greatest square factor\r\n        const deltaFactor: number = Numeric\r\n            .dividers(delta.value)\r\n            .filter(x => Math.sqrt(x) % 1 === 0)\r\n            .map(x => Math.sqrt(x)).pop() ?? 1\r\n\r\n        // Get the GCD of a, b, and the greatest delta factor.\r\n        const gcd = Numeric.gcd(2 * a.value, b.value, deltaFactor) * (a.isNegative() ? -1 : 1)\r\n\r\n        // Calculate the various values and transforming\r\n        const b2 = b.clone().divide(gcd).opposite()\r\n        const a2 = a.clone().divide(gcd).multiply(2)\r\n        const delta2 = delta.clone().divide(deltaFactor ** 2)\r\n        const deltaGcd = Math.abs(deltaFactor / gcd)\r\n        const deltaK1 = deltaFactor === 1 ? '-' : `-${deltaGcd} `\r\n        const deltaK2 = deltaFactor === 1 ? '+' : `+${deltaGcd} `\r\n\r\n        function texOutput(a: string, b: string, k: string, delta: string) {\r\n            return `\\\\frac{ ${b} ${k}\\\\sqrt{ ${delta} } }{ ${a} }`\r\n        }\r\n\r\n        function displayOutput(a: string, b: string, k: string, delta: string) {\r\n            return `(${b}${k}sqrt(${delta}))/${a}`\r\n        }\r\n\r\n        const d = delta.value ** 0.5\r\n        const f1 = (-b.value - d) / (2 * a.value)\r\n        const f2 = (-b.value + d) / (2 * a.value)\r\n\r\n        return [\r\n            this.#makeApproximativeSolution(f1,\r\n                {\r\n                    tex: texOutput(a2.tex, b2.tex, deltaK1.toString(), delta2.tex),\r\n                    display: displayOutput(a2.display, b2.display, deltaK1.toString(), delta2.display),\r\n                }\r\n            ),\r\n            this.#makeApproximativeSolution(f2,\r\n                {\r\n                    tex: texOutput(a2.tex, b2.tex, deltaK2.toString(), delta2.tex),\r\n                    display: displayOutput(a2.display, b2.display, deltaK2.toString(), delta2.display),\r\n                }\r\n            )\r\n        ].sort((a, b) => a.value - b.value)\r\n    }\r\n}\r\n","var _ = Object.defineProperty;\nvar C = (n) => {\n  throw TypeError(n);\n};\nvar b = (n, s, e) => s in n ? _(n, s, { enumerable: !0, configurable: !0, writable: !0, value: e }) : n[s] = e;\nvar A = (n, s, e) => b(n, typeof s != \"symbol\" ? s + \"\" : s, e), P = (n, s, e) => s.has(n) || C(\"Cannot \" + e);\nvar h = (n, s, e) => (P(n, s, \"read from private field\"), e ? e.call(n) : s.get(n)), d = (n, s, e) => s.has(n) ? C(\"Cannot add the same private member more than once\") : s instanceof WeakSet ? s.add(n) : s.set(n, e), N = (n, s, e, c) => (P(n, s, \"write to private field\"), c ? c.call(n, e) : s.set(n, e), e);\nconst v = {\n  pi: Math.PI,\n  e: Math.exp(1)\n};\nvar t = /* @__PURE__ */ ((n) => (n.VARIABLE = \"variable\", n.COEFFICIENT = \"coefficient\", n.OPERATION = \"operation\", n.CONSTANT = \"constant\", n.FUNCTION = \"function\", n.FUNCTION_ARGUMENT = \"function-argument\", n.MONOM = \"monom\", n.LEFT_PARENTHESIS = \"(\", n.RIGHT_PARENTHESIS = \")\", n))(t || {}), k = /* @__PURE__ */ ((n) => (n.EXPRESSION = \"expression\", n.POLYNOM = \"polynom\", n.SET = \"set\", n.NUMERIC = \"numeric\", n))(k || {});\nfunction F(n, s) {\n  if (n.length <= 1)\n    return n;\n  const e = Object.keys(s).filter((a) => s[a].type === t.FUNCTION).map((a) => a);\n  e.sort((a, O) => O.length - a.length);\n  const c = new RegExp(`^(${e.join(\"|\")})\\\\(`), i = Object.keys(v);\n  i.sort((a, O) => O.length - a.length);\n  const o = new RegExp(`^(${i.join(\"|\")})`), T = /^(\\d+(\\.\\d+)?)/;\n  let f = \"\", R, r, p;\n  for (; n.length > 0; ) {\n    if (R = r, p = void 0, e.length > 0 && c.exec(n)) {\n      const a = e.find((O) => n.startsWith(O));\n      a && (p = a + \"(\", n = n.slice(a.length + 1), r = t.FUNCTION);\n    } else if (i.length > 0 && o.exec(n)) {\n      const a = i.find((O) => n.startsWith(O));\n      a && (p = a, n = n.slice(a.length), r = t.CONSTANT);\n    } else if (T.exec(n)) {\n      const a = T.exec(n);\n      a && (p = a[0], n = n.slice(a[0].length), r = t.COEFFICIENT);\n    } else\n      switch (p = n[0], n = n.slice(1), p) {\n        case \"(\":\n          r = t.LEFT_PARENTHESIS;\n          break;\n        case \")\":\n          r = t.RIGHT_PARENTHESIS;\n          break;\n        case \",\":\n          r = t.FUNCTION_ARGUMENT;\n          break;\n        case \"+\":\n        case \"-\":\n        case \"*\":\n        case \"/\":\n        case \"^\":\n          r = t.OPERATION;\n          break;\n        default:\n          r = t.VARIABLE;\n      }\n    if (p === void 0 || r === void 0)\n      throw new Error(\"The token is undefined\");\n    f += w(R, r), f += p;\n  }\n  return f;\n}\nfunction w(n, s) {\n  return n === void 0 || n === t.OPERATION || s === t.OPERATION || n === t.LEFT_PARENTHESIS || n === t.FUNCTION || n === t.FUNCTION_ARGUMENT || s === t.RIGHT_PARENTHESIS || s === t.FUNCTION_ARGUMENT ? \"\" : \"*\";\n}\nconst U = {\n  \"^\": { precedence: 4, associative: \"right\", type: t.OPERATION },\n  \"*\": { precedence: 3, associative: \"left\", type: t.OPERATION },\n  \"/\": { precedence: 3, associative: \"left\", type: t.OPERATION },\n  \"+\": { precedence: 2, associative: \"left\", type: t.OPERATION },\n  \"-\": { precedence: 2, associative: \"left\", type: t.OPERATION }\n}, y = {\n  \"^\": { precedence: 4, associative: \"right\", type: t.OPERATION },\n  \"*\": { precedence: 3, associative: \"left\", type: t.OPERATION },\n  \"/\": { precedence: 3, associative: \"left\", type: t.OPERATION },\n  \"+\": { precedence: 2, associative: \"left\", type: t.OPERATION },\n  \"-\": { precedence: 2, associative: \"left\", type: t.OPERATION },\n  \"%\": { precedence: 3, associative: \"right\", type: t.OPERATION },\n  sin: { precedence: 4, associative: \"right\", type: t.FUNCTION },\n  cos: { precedence: 4, associative: \"right\", type: t.FUNCTION },\n  tan: { precedence: 4, associative: \"right\", type: t.FUNCTION },\n  sqrt: { precedence: 4, associative: \"right\", type: t.FUNCTION },\n  nthrt: { precedence: 4, associative: \"right\", type: t.FUNCTION },\n  \",\": { precedence: 2, associative: \"left\", type: t.FUNCTION_ARGUMENT }\n}, S = {\n  \"^\": { precedence: 4, associative: \"right\", type: t.OPERATION },\n  \"*\": { precedence: 3, associative: \"left\", type: t.OPERATION },\n  \"/\": { precedence: 3, associative: \"left\", type: t.OPERATION },\n  \"+\": { precedence: 2, associative: \"left\", type: t.OPERATION },\n  \"-\": { precedence: 2, associative: \"left\", type: t.OPERATION },\n  \"%\": { precedence: 3, associative: \"right\", type: t.OPERATION },\n  sin: { precedence: 4, associative: \"right\", type: t.FUNCTION },\n  cos: { precedence: 4, associative: \"right\", type: t.FUNCTION },\n  tan: { precedence: 4, associative: \"right\", type: t.FUNCTION },\n  sqrt: { precedence: 4, associative: \"right\", type: t.FUNCTION },\n  nthrt: { precedence: 4, associative: \"right\", type: t.FUNCTION },\n  ln: { precedence: 4, associative: \"right\", type: t.FUNCTION },\n  log: { precedence: 4, associative: \"right\", type: t.FUNCTION }\n}, M = {\n  \"&\": { precedence: 3, associative: \"left\", type: t.OPERATION },\n  \"|\": { precedence: 3, associative: \"left\", type: t.OPERATION },\n  \"!\": { precedence: 4, associative: \"right\", type: t.OPERATION },\n  \"-\": { precedence: 2, associative: \"left\", type: t.OPERATION }\n};\nvar I, u, l, g, E;\nclass V {\n  constructor(s) {\n    d(this, I);\n    d(this, u, []);\n    d(this, l, {});\n    d(this, g, []);\n    d(this, E);\n    N(this, I, typeof s > \"u\" ? k.POLYNOM : s), this.tokenConfigInitialization();\n  }\n  // Getter\n  get rpn() {\n    return h(this, u);\n  }\n  get rpnToken() {\n    return h(this, u).map((s) => s.token);\n  }\n  tokenConfigInitialization() {\n    return h(this, I) === k.SET ? (N(this, l, M), N(this, E, !1)) : h(this, I) === k.NUMERIC ? (N(this, l, S), N(this, E, !0)) : h(this, I) === k.EXPRESSION ? (N(this, l, y), N(this, E, !0)) : (N(this, l, U), N(this, E, !0)), N(this, g, Object.keys(h(this, l)).sort((s, e) => e.length - s.length)), h(this, l);\n  }\n  /**\n   * Get the next token to analyse.\n   * @param expr (string) Expression to analyse\n   * @param start (number) CUrrent position in the expr string.\n   */\n  NextToken(s, e) {\n    let c, i;\n    if (c = \"\", i = void 0, s[e] === \"(\")\n      c = \"(\", i = t.LEFT_PARENTHESIS;\n    else if (s[e] === \")\")\n      c = \")\", i = t.RIGHT_PARENTHESIS;\n    else if (s[e] === \",\")\n      c = \",\", i = t.FUNCTION_ARGUMENT;\n    else {\n      for (const o of h(this, g))\n        if (s.substring(e, e + o.length) === o) {\n          c += o, i = h(this, l)[o].type;\n          break;\n        }\n      for (const o in v)\n        if (s.substring(e, e + o.length) === o) {\n          c += o, i = t.CONSTANT;\n          break;\n        }\n      if (c === \"\")\n        if (/[0-9.]/.exec(s[e])) {\n          const o = /^([0-9.]+)/.exec(s.substring(e));\n          c = o ? o[0] : \"\", i = t.COEFFICIENT;\n        } else if (/[a-zA-Z]/.exec(s[e])) {\n          const o = /^([a-zA-Z])/.exec(s.substring(e));\n          c = o ? o[0] : \"\", i = t.VARIABLE;\n        } else\n          console.log(\"Unidentified token\", s[e], s, e), c = s[e], i = t.MONOM;\n    }\n    if (i === void 0)\n      throw new Error(`Token type is undefined for token ${c}`);\n    return [c, e + c.length, i];\n  }\n  /**\n   * Parse an expression using the shutting yard tree algorithms\n   * @param expr (string) Expression to analyse\n   * Returns a RPN list of items.\n   * @param uniformize\n   */\n  parse(s, e) {\n    const c = [], i = [];\n    let o = \"\", T = 0, f;\n    (e ?? h(this, E)) && (s = F(s, h(this, l)));\n    let R = 50, r;\n    for (; T < s.length; ) {\n      if (R--, R === 0) {\n        console.log(\"SECURITY LEVEL 1 EXIT\");\n        break;\n      }\n      switch ([o, T, f] = this.NextToken(s, T), f) {\n        case t.MONOM:\n        case t.COEFFICIENT:\n        case t.VARIABLE:\n        case t.CONSTANT:\n          c.push({\n            token: o,\n            tokenType: f\n          });\n          break;\n        case t.OPERATION:\n          if (i.length > 0) {\n            let p = i[i.length - 1];\n            for (r = 50; p.token in h(this, l) && //either o1 is left-associative and its precedence is less than or equal to that of o2,\n            (h(this, l)[o].associative === \"left\" && h(this, l)[o].precedence <= h(this, l)[p.token].precedence || //or o1 is right associative, and has precedence less than that of o2,\n            h(this, l)[o].associative === \"right\" && h(this, l)[o].precedence < h(this, l)[p.token].precedence); ) {\n              if (r--, r === 0) {\n                console.log(\"SECURITY LEVEL 2 OPERATION EXIT\");\n                break;\n              }\n              if (c.push(i.pop() ?? { token: \"\", tokenType: t.OPERATION }), i.length === 0)\n                break;\n              p = i[i.length - 1];\n            }\n          }\n          i.push({ token: o, tokenType: f });\n          break;\n        case t.FUNCTION_ARGUMENT:\n          for (r = 50; i[i.length - 1].token !== \"(\" && i.length > 0; ) {\n            if (r--, r === 0) {\n              console.log(\"SECURITY LEVEL 2 FUNCTION ARGUMENT EXIT\");\n              break;\n            }\n            c.push(i.pop() ?? { token: o, tokenType: f });\n          }\n          break;\n        case t.LEFT_PARENTHESIS:\n          i.push({ token: o, tokenType: f }), s[T] === \"-\" && c.push({ token: \"0\", tokenType: t.COEFFICIENT });\n          break;\n        case t.RIGHT_PARENTHESIS:\n          for (r = 50; i[i.length - 1].token !== \"(\" && i.length > 1; ) {\n            if (r--, r === 0) {\n              console.log(\"SECURITY LEVEL 2 CLOSING PARENTHESIS EXIT\");\n              break;\n            }\n            c.push(i.pop() ?? { token: o, tokenType: f });\n          }\n          i.pop();\n          break;\n        case t.FUNCTION:\n          i.push({ token: o, tokenType: f });\n          break;\n        default:\n          throw new Error(`Token type ${o} is not handled`);\n      }\n    }\n    return N(this, u, c.concat(i.reverse())), this;\n  }\n}\nI = new WeakMap(), u = new WeakMap(), l = new WeakMap(), g = new WeakMap(), E = new WeakMap();\nclass m {\n  constructor(s, e) {\n    A(this, \"_rpn\");\n    A(this, \"_expression\");\n    A(this, \"_isValid\");\n    this._expression = s;\n    try {\n      this._rpn = new V(k.NUMERIC).parse(s, e).rpn;\n    } catch {\n      throw this._rpn = null, this._isValid = !1, new Error(`There was a problem parsing: ${s}`);\n    }\n  }\n  get rpn() {\n    return this._rpn ?? [];\n  }\n  get isValid() {\n    if (this._isValid === void 0)\n      try {\n        this.evaluate({ x: 2 });\n      } catch {\n        this._isValid = !1;\n      }\n    return this._isValid ?? !1;\n  }\n  set isValid(s) {\n    this._isValid = s;\n  }\n  get expression() {\n    return this._expression;\n  }\n  evaluate(s) {\n    const e = [];\n    if (this._rpn === null)\n      return this._isValid = !1, 0;\n    this._isValid = !0;\n    for (const c of this._rpn)\n      if (c.tokenType === t.COEFFICIENT)\n        if (!isNaN(+c.token))\n          e.push(+c.token);\n        else {\n          const i = c.token.split(\"/\");\n          if (i.length !== 2)\n            throw this._isValid = !1, new Error(\"This coefficient is not a fraction\");\n          e.push(+i[0] / +i[1]);\n        }\n      else if (c.tokenType === t.VARIABLE && s !== void 0)\n        Object.hasOwn(s, c.token) && e.push(+s[c.token]);\n      else if (c.tokenType === t.CONSTANT)\n        e.push(v[c.token]);\n      else if (c.tokenType === t.OPERATION) {\n        if (c.token === \"*\") {\n          const i = e.pop(), o = e.pop();\n          if (o === void 0 || i === void 0)\n            throw this._isValid = !1, new Error(`The multiplication factors ${o ?? \"a\"} or ${i ?? \"b\"} are not defined`);\n          e.push(o * i);\n        } else if (c.token === \"/\") {\n          const i = e.pop(), o = e.pop();\n          if (o === void 0 || i === void 0)\n            throw this._isValid = !1, new Error(`The division values ${o ?? \"a\"} or ${i ?? \"b\"} are not defined`);\n          e.push(o / i);\n        } else if (c.token === \"+\") {\n          const i = e.pop(), o = e.pop();\n          if (o === void 0 || i === void 0)\n            throw this._isValid = !1, new Error(`The addition values ${o ?? \"a\"} or ${i ?? \"b\"} are not defined`);\n          e.push(+o + +i);\n        } else if (c.token === \"-\") {\n          const i = e.pop(), o = e.pop() ?? 0;\n          if (i === void 0)\n            throw this._isValid = !1, new Error(\"The subtraction value b is  not defined\");\n          e.push(o - i);\n        } else if (c.token === \"^\") {\n          const i = e.pop(), o = e.pop();\n          if (o === void 0 || i === void 0)\n            throw this._isValid = !1, new Error(`The base value ${o ?? \"a\"} or exponent ${i ?? \"b\"} are not defined`);\n          e.push(Math.pow(o, i));\n        }\n      } else if (c.tokenType === t.FUNCTION) {\n        const i = e.pop();\n        if (i === void 0)\n          throw this._isValid = !1, new Error(`The parameters for ${c.token} is not defined`);\n        if (c.token === \"sin\")\n          e.push(Math.sin(i));\n        else if (c.token === \"cos\")\n          e.push(Math.cos(i));\n        else if (c.token === \"tan\")\n          e.push(Math.tan(i));\n        else if (c.token === \"sqrt\")\n          e.push(Math.sqrt(i));\n        else if (c.token === \"nthrt\") {\n          const o = e.pop();\n          if (o === void 0)\n            throw this._isValid = !1, new Error(\"The nthrt function requires two parameters\");\n          i % 2 === 0 && o < 0 ? e.push(NaN) : e.push((o < 0 ? -1 : 1) * Math.pow(Math.abs(o), 1 / i));\n        } else c.token === \"ln\" ? e.push(Math.log(i)) : c.token === \"log\" && e.push(Math.log10(i));\n      }\n    if (e.length === 1)\n      return this._numberCorrection(e[0]);\n    throw new Error(`There was a problem parsing: ${this._expression}`);\n  }\n  _numberCorrection(s, e = 8) {\n    return +s.toFixed(e);\n  }\n}\nexport {\n  m as NumExp,\n  V as ShutingYard,\n  k as ShutingyardMode,\n  t as ShutingyardType,\n  v as tokenConstant\n};\n//# sourceMappingURL=piexpression.js.map\n","/***\r\n * Monom class\r\n */\r\nimport type {\r\n    IAlgebra,\r\n    IAnalyse,\r\n    IExpression,\r\n    InputAlgebra,\r\n    InputValue,\r\n    IPiMathObject,\r\n    literalType\r\n} from \"../pimath.interface\"\r\nimport { Fraction } from \"../coefficients/fraction\"\r\nimport { NthRoot } from \"../coefficients/nthRoot\"\r\nimport { Numeric } from \"../numeric\"\r\n\r\nimport { ShutingYard, ShutingyardType, type Token } from \"piexpression\"\r\n\r\nexport class Monom implements IPiMathObject<Monom>, IExpression<Monom>, IAnalyse<Monom>, IAlgebra<Monom> {\r\n    #coefficient: Fraction\r\n    #literal: literalType<Fraction>\r\n\r\n    constructor(value?: InputValue<Fraction>)\r\n    constructor(value?: Monom)\r\n    constructor(value?: InputAlgebra<Fraction>) {\r\n        this.#coefficient = new Fraction().zero()\r\n        this.#literal = {}\r\n\r\n        if (value !== undefined) {\r\n            // A string is given - try to parse the value.\r\n            this.parse(value)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    // -----------------------------------------\r\n    /**\r\n     * Parse a string to a monom. The string may include fraction.\r\n     * @param inputStr\r\n     */\r\n    public parse(inputStr: InputAlgebra<Monom>): this {\r\n        // Initialize the monom\r\n        this.#coefficient = new Fraction()\r\n        this.#literal = {}\r\n\r\n        if (typeof inputStr === 'string') {\r\n            this.#shutingYardToReducedMonom(inputStr)\r\n        } else if (typeof inputStr === 'number') {\r\n            this.#coefficient = new Fraction(inputStr)\r\n        } else if (inputStr instanceof Fraction) {\r\n            this.#coefficient = inputStr.clone()\r\n        } else if (inputStr instanceof Monom) {\r\n            this.#coefficient = inputStr.#coefficient.clone()\r\n\r\n            // Copy the literal parts\r\n            this.#cloneLiteral(inputStr)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Clone the current Monom.\r\n     */\r\n    public clone = (): Monom => {\r\n        const F: Monom = new Monom()\r\n\r\n        F.coefficient = this.#coefficient.clone()\r\n\r\n        // Copy the literal parts.\r\n        for (const k in this.#literal) {\r\n            F.setLetter(k, this.#literal[k].clone())\r\n        }\r\n        return F\r\n    }\r\n\r\n    public static gcd = (...monoms: Monom[]): Monom => {\r\n        // All the monoms must be with natural powers...\r\n        for (const m of monoms) {\r\n            if (m.containsRationalPower()) {\r\n                return new Monom().zero()\r\n            }\r\n        }\r\n\r\n        const M = new Monom(),\r\n            n: number = Numeric.gcd(...monoms.map(value => value.coefficient.numerator)),\r\n            d: number = Numeric.lcm(...monoms.map(value => value.coefficient.denominator))\r\n\r\n        // Get the coefficient.\r\n        M.coefficient = new Fraction(n, d).reduce()\r\n\r\n        // Set the literal parts - go through each monoms literal parts and get only the lowest degree of each letters.\r\n        for (const m of monoms) {\r\n            // Remove the inexistant letters from the resulting monom\r\n            for (const letter in M.literal) {\r\n                if (!(letter in m.literal)) {\r\n                    M.literal[letter].zero()\r\n                }\r\n            }\r\n            for (const letter in m.literal) {\r\n                if (!M.hasVariable(letter) && m.literal[letter].isStrictlyPositive()) {\r\n                    M.literal[letter] = m.literal[letter].clone()\r\n                } else {\r\n                    M.literal[letter] = new Fraction(Math.min(m.literal[letter].value, M.literal[letter].value))\r\n                }\r\n            }\r\n        }\r\n\r\n        return M\r\n    }\r\n\r\n    /**\r\n     * Multiply two monoms and return a NEW monom.\r\n     * @param monoms\r\n     */\r\n    public static xMultiply = (...monoms: Monom[]): Monom => {\r\n        const M = new Monom().one()\r\n\r\n        for (const m of monoms) {\r\n            M.multiply(m)\r\n        }\r\n\r\n        return M\r\n    }\r\n\r\n    /**\r\n     * Add all similar monoms. If they aren't similar, they are simply skipped.\r\n     * @param M (Monom[]) The monoms to add.\r\n     */\r\n    public add = (...M: InputAlgebra<Fraction>[]): this => {\r\n        for (const m of M) {\r\n            // If the value given is not a monom, create it.\r\n            const mAsMonom = (!(m instanceof Monom)) ? new Monom(m) : m\r\n\r\n            if (this.isSameAs(mAsMonom)) {\r\n                if (this.isZero()) {\r\n                    this.#cloneLiteral(mAsMonom)\r\n                }\r\n\r\n                this.#coefficient.add(mAsMonom.coefficient)\r\n            } else {\r\n                console.log('Add monom: ' + this.display + ' is not similar with ', mAsMonom.display)\r\n            }\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Get the coefficient \\\\(k\\\\) of the Monom \\\\(k\\\\cdot x^{n}\\\\)\r\n     * @returns {Fraction}\r\n     */\r\n    public get coefficient(): Fraction {\r\n        return this.#coefficient\r\n    }\r\n\r\n    /**\r\n     * Set the coefficient \\\\(k\\\\) value of the monom\r\n     * @param {Fraction | number | string} F\r\n     */\r\n    public set coefficient(F: InputValue<Fraction>) {\r\n        this.#coefficient = new Fraction(F)\r\n    }\r\n\r\n    public containsRationalPower = (): boolean => {\r\n        return Object.values(this.#literal).some((value) => value.isRational())\r\n    }\r\n\r\n    /**\r\n     * Get the degree of a monom. If no setLetter is given, the result will be the global degree.\r\n     * @param letter (string) Letter to get to degree (power)\r\n     */\r\n    public degree = (letter?: string): Fraction => {\r\n        if (this.variables.length === 0) {\r\n            return new Fraction().zero()\r\n        }\r\n        if (letter === undefined) {\r\n            // Not setLetter given -> we get the global monom degree (sum of all the letters).\r\n            return Object.values(this.#literal).reduce((t, n) => t.clone().add(n))\r\n        } else {\r\n            // A setLetter is given -> get the corresponding power.\r\n            return !this.hasVariable(letter) ? new Fraction().zero() : this.#literal[letter].clone()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Derivative the monom\r\n     * @param letter\r\n     */\r\n    public derivative = (letter?: string): Monom => {\r\n        // No setLetter given - assume it's the setLetter 'x'\r\n        if (letter === undefined) {\r\n            letter = 'x'\r\n        }\r\n\r\n        if (this.hasVariable(letter)) {\r\n            const d = this.#literal[letter].clone(),\r\n                dM = this.clone()\r\n\r\n            // Subtract one to the degree.\r\n            dM.#literal[letter].subtract(1)\r\n\r\n            // Multiply the coefficient by the previous degree\r\n            dM.#coefficient.multiply(new Fraction(d.clone()))\r\n            return dM\r\n        } else {\r\n            return new Monom().zero()\r\n        }\r\n    }\r\n\r\n    // Display getter\r\n    /**\r\n     * This display getter is to be used in the polynom display getter\r\n     */\r\n    public get display(): string {\r\n        let L = ''\r\n        const letters = Object.keys(this.#literal).sort()\r\n        for (const letter of letters) {\r\n            if (this.#literal[letter].isNotZero()) {\r\n                L += letter\r\n                if (this.#literal[letter].isNotEqual(1)) {\r\n                    L += `^(${this.#literal[letter].display})`\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this.#coefficient.value != 0) {\r\n                return this.#coefficient.display\r\n            } else {\r\n                return ''\r\n            }\r\n        } else {\r\n            if (this.#coefficient.value === 1) {\r\n                return L\r\n            } else if (this.#coefficient.value === -1) {\r\n                return `-${L}`\r\n            } else if (this.#coefficient.value === 0) {\r\n                return '0'\r\n            } else {\r\n                return `${this.#coefficient.display}${L}`\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Divide the current monoms by multiple monoms\r\n     * @param M (Monom[])\r\n     */\r\n    public divide = (...M: InputAlgebra<Fraction>[]): this => {\r\n        // Depending on the given value, choose the current item\r\n        for (const m of M) {\r\n            // If the value given is not a monom, create it.\r\n            const mAsMonom = (!(m instanceof Monom)) ? new Monom(m) : m\r\n\r\n            // Divide the coefficient\r\n            this.#coefficient.divide(mAsMonom.coefficient)\r\n\r\n            // Subtract the power values\r\n            for (const letter in mAsMonom.literal) {\r\n\r\n                this.#literal[letter] = this.hasVariable(letter) ?\r\n                    this.#literal[letter].subtract(mAsMonom.literal[letter]) :\r\n                    mAsMonom.literal[letter].clone().opposite()\r\n\r\n\r\n                // If the power of a particular setLetter is zero, delete it from the literal part..\r\n                if (this.#literal[letter].isZero()) {\r\n                    this.removeVariable(letter)\r\n                }\r\n            }\r\n        }\r\n        return this\r\n    }\r\n\r\n    public get dividers(): Monom[] {\r\n        // Decompose only if the coefficient is a natural number\r\n        if (!this.coefficient.isRelative()) {\r\n            return [this.clone()]\r\n        }\r\n\r\n        // Decompose only if the power values are natural numbers.\r\n        if (this.containsRationalPower()) {\r\n            return [this.clone()]\r\n        }\r\n\r\n        // Security : do not do this if greater than 10000\r\n        if (this.coefficient.numerator > 1000000) {\r\n            return [this.clone()]\r\n        }\r\n\r\n        const dividers = Numeric.dividers(Math.abs(this.coefficient.numerator))\r\n\r\n        // Decompose the literals parts.\r\n        let literals: literalType<Fraction>[] = []\r\n        for (const L in this.literal) {\r\n            // L is the letter.\r\n            literals = this._getLiteralDividers(literals, L)\r\n        }\r\n\r\n        const monomDividers: Monom[] = []\r\n        if (literals.length > 0 && dividers.length > 0) {\r\n            for (const N of dividers) {\r\n                for (const L of literals) {\r\n                    const M = new Monom()\r\n                    M.coefficient = new Fraction(N)\r\n                    M.literal = L\r\n                    monomDividers.push(M)\r\n                }\r\n            }\r\n        } else if (dividers.length === 0) {\r\n            for (const L of literals) {\r\n                const M = new Monom()\r\n                M.coefficient = new Fraction().one()\r\n                M.literal = L\r\n                monomDividers.push(M)\r\n            }\r\n        } else {\r\n            for (const N of dividers) {\r\n                const M = new Monom()\r\n                M.coefficient = new Fraction(N)\r\n                monomDividers.push(M)\r\n            }\r\n        }\r\n\r\n        return monomDividers.length === 0 ? [new Monom().one()] : monomDividers\r\n    }\r\n\r\n    /**\r\n     * Evaluate a monom. Each setLetter must be assigned to a Fraction.\r\n     * @param values    Dictionary of <setLetter: Fraction>\r\n     * @param asNumeric\r\n     */\r\n    public evaluate = (values: literalType<number | Fraction> | InputValue<Fraction>, asNumeric?: boolean): Fraction | number => {\r\n        // If as numeric return the numeric value\r\n        if (asNumeric === true) {\r\n            // Convert all values to numeric\r\n            // If the value is a Fraction, convert it to a number\r\n            if (values instanceof Fraction) {\r\n                return this.#evaluateAsNumeric(values.value)\r\n            }\r\n\r\n            // If the value is a NthRoot, return undefined\r\n            if (values instanceof NthRoot) {\r\n                return new Fraction().invalid()\r\n            }\r\n\r\n            // If the value is a number, return the numeric value\r\n            if (typeof values === 'number') {\r\n                return this.#evaluateAsNumeric(values)\r\n            }\r\n\r\n            // If the value is an object, return the numeric value\r\n            if (typeof values === 'object') {\r\n                // Convert {[key:string]:Fraction} to {[key:string]:number}\r\n                const tmpValues: literalType<number> = {}\r\n                for (const L in values) {\r\n                    tmpValues[L] = new Fraction(values[L]).value\r\n                }\r\n\r\n                return this.#evaluateAsNumeric(tmpValues)\r\n            }\r\n        }\r\n\r\n        // The answer must be a Fraction\r\n        const r = this.coefficient.clone()\r\n\r\n        if (typeof values === 'number' || values instanceof Fraction) {\r\n            const tmpValues: literalType<Fraction> = {}\r\n            tmpValues[this.variables[0]] = new Fraction(values)\r\n            return this.evaluate(tmpValues)\r\n        }\r\n\r\n        if (values instanceof NthRoot) {\r\n            return new Fraction().invalid()\r\n        }\r\n\r\n        if (typeof values === 'object') {\r\n            if (this.variables.length === 0) {\r\n                return this.coefficient\r\n            }\r\n\r\n            for (const L in this.#literal) {\r\n                const value = new Fraction(values[L])\r\n\r\n                r.multiply(value.pow(this.#literal[L]))\r\n            }\r\n        }\r\n\r\n        return r\r\n    }\r\n\r\n    // -------------------------------------\r\n    /**\r\n     * Determine if a monom contains a setLetter in it's literal part\r\n     * @param letter\r\n     */\r\n    public hasVariable = (letter?: string): boolean => {\r\n        // The letter was not found\r\n        return Object.hasOwn(this.#literal, letter ?? 'x')\r\n    }\r\n\r\n    public integrate(a: InputValue<Fraction>, b: InputValue<Fraction>, letter?: string  ): Fraction {\r\n        const primitive = this.primitive(letter)\r\n\r\n        return (primitive.evaluate(b) as Fraction)\r\n            .subtract(primitive.evaluate(a) as Fraction)\r\n    }\r\n\r\n    public inverse = (): this => {\r\n        this.#coefficient.opposite()\r\n        for (const letter in this.#literal) {\r\n            this.#literal[letter].opposite()\r\n        }\r\n        return this\r\n    }\r\n\r\n    public isDivisible = (div: Monom): boolean => {\r\n        // For all variables (letters), the current monom must have a degree higher than the divider\r\n        if (div.degree().isStrictlyPositive()) {\r\n            for (const letter of div.variables) {\r\n                if (!this.degree(letter).isGeq(div.degree(letter))) {\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n\r\n        // If the coefficient is rational, we suppose we don't need to check the division by the coefficient.\r\n        if (this.coefficient.isRational() || div.coefficient.isRational()) {\r\n            return true\r\n        }\r\n\r\n        return this.coefficient.clone().divide(div.coefficient).isRelative()\r\n    }\r\n\r\n    /**\r\n     * Determine if two monoms are equals\r\n     * @param M\r\n     */\r\n    public isEqual = (M: Monom): boolean => {\r\n        return this.isSameAs(M) && this.#coefficient.isEqual(M.coefficient)\r\n    }\r\n\r\n    public isLiteralSquare = (): boolean => {\r\n        for (const letter in this.literal) {\r\n            // A literal square must have a natural power\r\n            if (this.literal[letter].isRational()) {\r\n                return false\r\n            }\r\n\r\n            // The natural power must be be even\r\n            if (this.literal[letter].isEven()) {\r\n                return false\r\n            }\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is one\r\n     */\r\n    public isOne = (): boolean => {\r\n        return this.#coefficient.value === 1 && this.variables.length === 0\r\n    }\r\n\r\n    /**\r\n     * Determine if two monoms are similar\r\n     * @param M\r\n     */\r\n    public isSameAs = (M: Monom): boolean => {\r\n        // Get the list of all variables from both monoms.\r\n        const M1: string[] = this.variables\r\n        const M2: string[] = M.variables\r\n\r\n        // Get the list of all variables from both monoms.\r\n        const K: string[] = M1.concat(M2.filter((item) => !M1.includes(item)))\r\n\r\n        // If one of the monom is zero, it is the same than the other.\r\n        if (this.isZero() || M.isZero()) {\r\n            return true\r\n        }\r\n\r\n        // Both monoms has no literal part.\r\n        if (M1.length === 0 && M2.length === 0) {\r\n            return true\r\n        }\r\n\r\n        // Both monoms must have the same variables\r\n        if (M1.length !== M2.length) {\r\n            return false\r\n        }\r\n\r\n        // To _compare, both must be different from zero.\r\n        if (!this.isZero() && !M.isZero()) {\r\n            for (const key of K) {\r\n                // The variable is not available in one of the monom\r\n                if (!this.hasVariable(key) || !M.hasVariable(key)) {\r\n                    return false\r\n                }\r\n\r\n                // The variable does not have the same power in each monoms.\r\n                if (!this.#literal[key].isEqual(M.literal[key])) {\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n\r\n        // All are positive check - the monoms are the sames.\r\n        return true\r\n    }\r\n\r\n    public isSquare = (): boolean => {\r\n        if (!this.coefficient.isSquare()) {\r\n            return false\r\n        }\r\n        return this.isLiteralSquare()\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is null\r\n     */\r\n    public isZero = (): boolean => {\r\n        return this.#coefficient.value === 0\r\n    }\r\n\r\n    /**\r\n     * Get the literal part of \\\\(x^{n_1}y^{n_2}\\\\) as dictionary \\\\[\\\\begin{array}{ll}x&=n_1\\\\\\\\y&=n_2\\\\end{array}\\\\]\r\n     * @returns {literalType}\r\n     */\r\n    public get literal(): literalType<Fraction> {\r\n        return this.#literal\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom. Must be a dictionary {x: Fraction, y: Fraction, ...}\r\n     * @param {literalType<Fraction>} L\r\n     */\r\n    public set literal(L: literalType<Fraction>) {\r\n        this.#literal = L\r\n    }\r\n\r\n    /**\r\n     * Get the literal square roots of the Monom.\r\n     * @returns {literalType<Fraction>}\r\n     */\r\n    public get literalSqrt(): literalType<Fraction> {\r\n        // TODO: used in Polynom._factorize2ndDegree : remove it from here ?\r\n        if (this.isLiteralSquare()) {\r\n            const L: literalType<Fraction> = {}\r\n            for (const key in this.#literal) {\r\n                L[key] = this.#literal[key].clone().sqrt()\r\n            }\r\n            return L\r\n        } else {\r\n            return this.#literal\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom from a string\r\n     * @param inputStr  String like x^2y^3\r\n     */\r\n    public set literalStr(inputStr: string) {\r\n        // TODO : parse using ShutingYard tree !\r\n\r\n        // Match all x^n\r\n        for (const v of [...inputStr.matchAll(/([a-z])\\^([+-]?[0-9]+)/g)]) {\r\n            // Create the default letter entry if necessary.\r\n            if (!(v[1] in this.#literal)) {\r\n                this.#literal[v[1]] = new Fraction().zero()\r\n            }\r\n\r\n            // Add the new value.\r\n            // TODO: actually, it adds only numeric value\r\n            this.#literal[v[1]].add(+v[2])\r\n        }\r\n\r\n        // Match all x\r\n        for (const v of [...inputStr.matchAll(/([a-z](?!\\^))/g)]) {\r\n            // Match all single letters\r\n            if (!(v[1] in this.#literal)) {\r\n                this.#literal[v[1]] = new Fraction().zero()\r\n            }\r\n\r\n            // Add one to the value.\r\n            this.#literal[v[1]].add(1)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Multiple multiple monoms to the current monom\r\n     * @param M (Monom[]) The monoms to multiply to.\r\n     */\r\n    public multiply = (...M: InputAlgebra<Fraction>[]): this => {\r\n        for (const m of M) {\r\n            // If the value given is not a monom, create it.\r\n            const mAsMonom = (!(m instanceof Monom)) ? new Monom(m) : m\r\n\r\n            // Multiply the coefficient.\r\n            this.#coefficient.multiply(mAsMonom.coefficient)\r\n\r\n            // Multiply the literal parts.\r\n            for (const letter in mAsMonom.literal) {\r\n                if (!this.hasVariable(letter)) {\r\n                    this.#literal[letter] = mAsMonom.literal[letter].clone()\r\n                } else {\r\n                    this.#literal[letter].add(mAsMonom.literal[letter])\r\n                }\r\n            }\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Create a one value monom\r\n     */\r\n    public one = (): this => {\r\n        this.#coefficient = new Fraction().one()\r\n        this.#literal = {}\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Get the opposite\r\n     * Returns a monom.\r\n     */\r\n    public opposite = (): this => {\r\n        this.#coefficient.opposite()\r\n        return this\r\n    }\r\n\r\n    public get plotFunction(): string {\r\n        let L = ''\r\n        const letters = Object.keys(this.#literal).sort()\r\n\r\n        for (const letter of letters) {\r\n            if (this.#literal[letter].isNotZero()) {\r\n                L += (L === '' ? \"\" : \"*\") + letter\r\n                if (this.#literal[letter].isNotEqual(1)) {\r\n                    L += `^(${this.#literal[letter].display})`\r\n                }\r\n            }\r\n        }\r\n\r\n        // No literal part\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this.#coefficient.value != 0) {\r\n                return this.#coefficient.display\r\n            } else {\r\n                return ''\r\n            }\r\n        } else {\r\n            if (this.#coefficient.value === 1) {\r\n                return L\r\n            } else if (this.#coefficient.value === -1) {\r\n                return `-${L}`\r\n            } else if (this.#coefficient.value === 0) {\r\n                return '0'\r\n            } else {\r\n                return `${this.#coefficient.display}*${L}`\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the pow of a monom.\r\n     * @param nb (number) : Mathematical pow\r\n     */\r\n    public pow = (nb: number | Fraction): this => {\r\n        this.#coefficient.pow(nb)\r\n        for (const letter in this.#literal) {\r\n            this.#literal[letter].multiply(nb)\r\n        }\r\n        return this\r\n    }\r\n\r\n    public primitive = (letter?: string): Monom => {\r\n        // TODO: derivative including the ln value => implies creating different monom system ?\r\n        if (letter === undefined) {\r\n            letter = 'x'\r\n        }\r\n\r\n        // Zero monom\r\n        const M = this.clone()\r\n        let degree: Fraction\r\n\r\n        if (M.hasVariable(letter)) {\r\n            degree = M.degree(letter).clone().add(1)\r\n            M.coefficient = M.coefficient.clone().divide(degree)\r\n            M.setLetter(letter, degree)\r\n        } else {\r\n            // There is no letter.\r\n\r\n            // The coefficient might be zero (=> x) or a number a (=> ax)\r\n            if (M.coefficient.isZero()) {\r\n                M.coefficient = new Fraction().one()\r\n            }\r\n            M.setLetter(letter, 1)\r\n        }\r\n\r\n        return M\r\n    }\r\n\r\n    public reduce = (): this => {\r\n        // Reduce the coefficient\r\n        this.coefficient.reduce()\r\n\r\n        // Reduce the literal parts (removing null powers)\r\n        for (const letter in this.#literal) {\r\n            if (this.#literal[letter].isZero()) {\r\n                this.removeVariable(letter)\r\n            }\r\n        }\r\n        return this\r\n    }\r\n\r\n    public removeVariable(letter: string) {\r\n        /* eslint-disable */\r\n        delete this.#literal[letter]\r\n        /* eslint-enable */\r\n    }\r\n\r\n    /**\r\n     * Get the nth-root of the monom\r\n     */\r\n    public root = (): this => {\r\n        throw new Error('Method not implemented.')\r\n    }\r\n\r\n    /**\r\n     * Set the power of a particular setLetter\r\n     * @param letter (string) Letter to change\r\n     * @param pow (number) Power of the setLetter (must be positive integer.\r\n     */\r\n    public setLetter = (letter: string, pow: InputValue<Fraction>): this => {\r\n        if (!(pow instanceof Fraction)) {\r\n            return this.setLetter(letter, new Fraction(pow))\r\n        }\r\n\r\n        // Set the power of the letter to zero => remove it\r\n        if (this.hasVariable(letter) && pow.isZero()) {\r\n            this.removeVariable(letter)\r\n        }\r\n\r\n\r\n        this.#literal[letter] = pow.clone()\r\n\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Return the square root of a monom\r\n     */\r\n    public sqrt = (): this => {\r\n        if (this.isSquare()) {\r\n            this.#coefficient.sqrt()\r\n            for (const letter in this.#literal) {\r\n                this.#literal[letter].clone().divide(2)\r\n            }\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Subtract multiple monoms\r\n     * @param M (Monom[]) The monoms to subtract\r\n     */\r\n    public subtract = (...M: InputAlgebra<Fraction>[]): this => {\r\n        for (const m of M) {\r\n            // If the value given is not a monom, create it.\r\n            const mAsMonom = (!(m instanceof Monom)) ? new Monom(m) : m\r\n\r\n            if (this.isSameAs(mAsMonom)) {\r\n                if (this.isZero()) {\r\n                    this.#cloneLiteral(mAsMonom)\r\n                }\r\n\r\n                this.#coefficient.add(mAsMonom.clone().coefficient.opposite())\r\n            } else {\r\n                console.log('Subtract: Is not similar: ', mAsMonom.display)\r\n            }\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Get the tex output of the monom\r\n     */\r\n    public get tex(): string {\r\n        // TODO: display with square root !\r\n        // TODO: Refactor to make it more readable\r\n        let L = ''\r\n        const letters = Object.keys(this.#literal).sort()\r\n\r\n        for (const letter of letters) {\r\n            if (this.#literal[letter].isNotZero()) {\r\n                L += letter\r\n                if (this.#literal[letter].isNotEqual(1)) {\r\n                    L += `^{ ${this.#literal[letter].tfrac.tex } }`\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this.#coefficient.value != 0) {\r\n                return this.#coefficient.frac.tex\r\n            } else {\r\n                return '0'\r\n            }\r\n        } else {\r\n            if (this.#coefficient.value === 1) {\r\n                return L\r\n            } else if (this.#coefficient.value === -1) {\r\n                return `-${L}`\r\n            } else if (this.#coefficient.value === 0) {\r\n                return '0'\r\n            } else {\r\n                return `${this.#coefficient.frac.tex}${L}`\r\n            }\r\n        }\r\n    }\r\n\r\n    // Getter helpers.\r\n    /**\r\n     * Get the variables letters\r\n     */\r\n    public get variables(): string[] {\r\n        // const M = this.clone().clean()\r\n\r\n        const L: string[] = []\r\n        Object.entries(this.literal).forEach(\r\n            ([key, value]) => {\r\n                if (!value.isZero()) {\r\n                    L.push(key)\r\n                }\r\n            })\r\n        L.sort()\r\n        return L\r\n        // return Object.keys(M.literal)\r\n    }\r\n\r\n    /**\r\n     * Create a zero value monom\r\n     */\r\n    public zero = (): this => {\r\n        this.#coefficient = new Fraction().zero()\r\n        this.#literal = {}\r\n        return this\r\n    }\r\n\r\n    #cloneLiteral(inputStr: Monom) {\r\n        for (const k in inputStr.literal) {\r\n            this.#literal[k] = inputStr.literal[k].clone()\r\n        }\r\n    }\r\n\r\n    #evaluateAsNumeric = (values: literalType<number | Fraction> | InputValue<Fraction>): number => {\r\n        let r = this.coefficient.value\r\n\r\n        if (typeof values === \"number\") {\r\n            const tmpValues: literalType<number> = {}\r\n            const key = this.variables[0]\r\n            tmpValues[key] = values\r\n\r\n            return this.#evaluateAsNumeric(tmpValues)\r\n        }\r\n\r\n        if (values instanceof Fraction) {\r\n            const tmpValues: literalType<number> = {}\r\n            tmpValues[this.variables[0]] = new Fraction(values).value\r\n            return this.#evaluateAsNumeric(tmpValues)\r\n        }\r\n\r\n        if (values instanceof NthRoot) {\r\n            return NaN\r\n        }\r\n\r\n        if (typeof values === 'object') {\r\n            if (this.variables.length === 0) {\r\n                return this.coefficient.value\r\n            }\r\n\r\n            for (const L in this.#literal) {\r\n                const v = values[L]\r\n\r\n                if (v instanceof Fraction) {\r\n                    r *= v.value ** (this.#literal[L].value)\r\n                } else {\r\n                    r *= v ** (this.#literal[L].value)\r\n                }\r\n            }\r\n        }\r\n\r\n        return r\r\n    }\r\n\r\n    private _getLiteralDividers(arr: literalType<Fraction>[], letter: string): literalType<Fraction>[] {\r\n        const tmpList: Record<string, Fraction>[] = []\r\n\r\n        // Be default, this.literal[letter] should be a rational number.\r\n        for (let d = 0; d <= this.literal[letter].value; d++) {\r\n            if (arr.length === 0) {\r\n                const litt: literalType<Fraction> = {}\r\n                litt[letter] = new Fraction(d)\r\n                tmpList.push(litt)\r\n            } else {\r\n                for (const item of arr) {\r\n                    const litt: literalType<Fraction> = {}\r\n                    for (const currentLetter in item) {\r\n                        litt[currentLetter] = item[currentLetter]\r\n                    }\r\n                    litt[letter] = new Fraction(d)\r\n                    tmpList.push(litt)\r\n                }\r\n            }\r\n        }\r\n        return tmpList\r\n    }\r\n\r\n    #shutingYardToReducedMonom = (inputStr: string): this => {\r\n        // Get the RPN array of the current expression\r\n        const SY: ShutingYard = new ShutingYard().parse(inputStr)\r\n        const rpn: { token: string, tokenType: ShutingyardType }[] = SY.rpn\r\n\r\n        const stack: Monom[] = []\r\n\r\n        if (rpn.length === 0) {\r\n            this.zero()\r\n            return this\r\n        } else if (rpn.length === 1) {\r\n            const element = rpn[0]\r\n\r\n            this.one()\r\n            if (element.tokenType === ShutingyardType.COEFFICIENT) {\r\n                this.coefficient = new Fraction(element.token)\r\n            } else if (element.tokenType === ShutingyardType.VARIABLE) {\r\n                this.setLetter(element.token, 1)\r\n            }\r\n            return this\r\n        } else {\r\n            // Reset the monom\r\n            for (const element of rpn) {\r\n                this.#shutingYard_AddToken(stack, element)\r\n            }\r\n        }\r\n\r\n        this.one()\r\n        this.multiply(stack[0])\r\n        return this\r\n    }\r\n\r\n    #shutingYard_AddToken = (stack: Monom[], element: Token): void => {\r\n        let q1: Monom, q2: Monom, m: Monom, letter: string, pow: Fraction\r\n\r\n        if (element.tokenType === ShutingyardType.COEFFICIENT) {\r\n            stack.push(new Monom(new Fraction(element.token)))\r\n\r\n        } else if (element.tokenType === ShutingyardType.VARIABLE) {\r\n            const M = new Monom().one()\r\n            M.setLetter(element.token, 1)\r\n            stack.push(M.clone())\r\n\r\n        } else if (element.tokenType === ShutingyardType.OPERATION) {\r\n            switch (element.token) {\r\n                case '-':\r\n                    // this should only happen for negative powers or for negative coefficient.\r\n                    q2 = (stack.pop()) ?? new Monom().zero()\r\n                    q1 = (stack.pop()) ?? new Monom().zero()\r\n\r\n                    stack.push(q1.subtract(q2))\r\n\r\n                    break\r\n                case '*':\r\n                    // Get the last element in the stack\r\n                    q2 = (stack.pop()) ?? new Monom().one()\r\n                    q1 = (stack.pop()) ?? new Monom().one()\r\n\r\n                    stack.push(q1.multiply(q2))\r\n                    break\r\n                case '/':\r\n                    // Get the last element in the stack\r\n                    q2 = (stack.pop()) ?? new Monom().one()\r\n                    q1 = (stack.pop()) ?? new Monom().one()\r\n\r\n                    stack.push(q1.divide(q2))\r\n                    break\r\n                case '^': {\r\n                    // get the two last elements in the stack\r\n                    const poppedCoefficient = stack.pop()?.coefficient\r\n                    pow = poppedCoefficient ?? new Fraction().one()\r\n                    m = stack.pop() ?? new Monom().one()\r\n\r\n                    letter = m.variables[0]\r\n\r\n                    if (letter) {\r\n                        m.setLetter(letter, pow)\r\n                    }\r\n\r\n                    stack.push(m)\r\n                    // this.multiply(m.clone())\r\n                    break\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","export function wrapParenthesis(str: string, tex = true): string {\r\n    return tex ? `\\\\left( ${str} \\\\right)` : `(${str})`\r\n}\r\n\r\nexport function wrapVert(str: string, tex = true): string {\r\n    return tex ? `\\\\left\\\\vert ${str} \\\\right\\\\vert` : `|${str}|`\r\n}\r\n\r\nexport function wrapNorm(str: string, tex = true): string {\r\n    return tex ? `\\\\left\\\\Vect ${str} \\\\right\\\\Vect` : `||${str}||`\r\n}\r\n\r\nexport function replace_in_array<T>(haystack: string[], search: string, target: string, start?: number, end?: number): T {\r\n    return haystack.map((x, index) => {\r\n        if (start !== undefined && index < start) {\r\n            return x\r\n        }\r\n        if (end !== undefined && index > end) {\r\n            return x\r\n        }\r\n        return x === search ? target : x\r\n    }) as T\r\n}\r\n","import type {IExpressionMultiply, IPiMathObject} from \"../pimath.interface\"\r\n\r\n// TODO: create other operation_** to make things more generic !\r\nexport function operation_pow<T extends IPiMathObject<T> & IExpressionMultiply<T>>(item: T, value: number): T {\r\n    // TODO: Implement the operation_pow to other classes\r\n    if (!Number.isSafeInteger(value)) {\r\n        throw new Error('Can only raise item by an integer')\r\n    }\r\n\r\n    if (value < 0) {\r\n        throw new Error('Can only raise item by a positive integer')\r\n    }\r\n\r\n    if (value === 0) {\r\n        return item.one()\r\n    }\r\n\r\n    const P = item.clone()\r\n    for (let i = 1; i < value; i++) {\r\n        item.multiply(P)\r\n    }\r\n\r\n    return item\r\n}\r\n","/**\r\n * Polynom module contains everything necessary to handle polynoms.*\r\n */\r\nimport {ShutingYard, ShutingyardType, type Token} from \"piexpression\"\r\nimport type {\r\n    IAlgebra,\r\n    IAnalyse,\r\n    IExpression,\r\n    InputAlgebra,\r\n    InputValue,\r\n    IPiMathObject,\r\n    ISolution,\r\n    literalType,\r\n    TABLE_OF_SIGNS,\r\n    TABLE_OF_SIGNS_VALUES\r\n} from \"../pimath.interface\"\r\nimport {Fraction} from \"../coefficients\"\r\nimport {Numeric} from '../numeric'\r\nimport {EquationSolver} from './equationSolver'\r\nimport {Monom} from './monom'\r\nimport {replace_in_array} from \"../helpers\"\r\nimport {operation_pow} from \"./operations\"\r\n\r\n\r\nexport type PolynomParsingType = InputValue<Polynom> | Monom\r\n\r\nexport interface IEuclidean {\r\n    quotient: Polynom,\r\n    reminder: Polynom\r\n}\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n * ```\r\n * let P = new Polynom('3x-4')\r\n * ```\r\n */\r\nexport class Polynom implements IPiMathObject<Polynom>,\r\n    IExpression<Polynom>,\r\n    IAnalyse<Polynom>,\r\n    IAlgebra<Polynom> {\r\n\r\n    #factors: Polynom[]\r\n    #monoms: Monom[]\r\n    #roots: ISolution[]\r\n    #rootsCache = false\r\n\r\n    constructor(value: InputValue<Fraction>)\r\n    constructor(value: string)\r\n    constructor(value: Monom)\r\n    constructor(value: Polynom)\r\n    constructor(...values: InputValue<Fraction>[])\r\n    constructor(...values: InputAlgebra<Polynom>[])\r\n    constructor(polynomString?: InputAlgebra<Polynom>, ...values: InputAlgebra<Fraction>[]) {\r\n        this.#monoms = []\r\n        this.#factors = []\r\n        this.#roots = []\r\n\r\n        if (polynomString !== undefined) {\r\n            this.parse(polynomString, ...values)\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Parse a string to a polynom.\r\n     * @param inputStr\r\n     * @param values\r\n     */\r\n    public parse = (inputStr: PolynomParsingType, ...values: InputAlgebra<Monom>[]): this => {\r\n        // Reset the main variables.\r\n        this.#monoms = []\r\n        this.#factors = []\r\n\r\n        if (typeof inputStr === 'string') {\r\n            return this.#parseString(inputStr, ...values)\r\n        } else if (\r\n            (typeof inputStr === 'number' || inputStr instanceof Fraction || inputStr instanceof Monom)\r\n            && (values.length === 0)\r\n        ) {\r\n            this.#monoms.push(new Monom(inputStr as Monom))\r\n        } else if (inputStr instanceof Monom && values.length > 0) {\r\n            this.#monoms.push(new Monom(inputStr))\r\n            values.forEach(m => {\r\n                this.#monoms.push(new Monom(m as Monom))\r\n            })\r\n        } else if (inputStr instanceof Polynom) {\r\n            for (const m of inputStr.monoms) {\r\n                this.#monoms.push(m.clone())\r\n            }\r\n        }\r\n\r\n\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Clone the polynom\r\n     */\r\n    public clone = (): Polynom => {\r\n        const P = new Polynom()\r\n        const M: Monom[] = []\r\n\r\n        for (const m of this.#monoms) {\r\n            M.push(m.clone())\r\n        }\r\n\r\n\r\n        P.monoms = M\r\n\r\n        return P\r\n    }\r\n\r\n    public get tex(): string {\r\n        return this.#genDisplay('tex')\r\n    }\r\n\r\n    public get display(): string {\r\n        return this.#genDisplay()\r\n    }\r\n\r\n    public get value(): number | undefined {\r\n        if(this.degree().isZero()){\r\n            return this.monoms[0]?.coefficient.value ?? 0\r\n        }\r\n\r\n        return undefined\r\n    }\r\n\r\n    public add = (...values: InputAlgebra<Polynom>[]): Polynom => {\r\n\r\n        for (const value of values) {\r\n            if (value instanceof Polynom) {\r\n                this.#monoms = this.#monoms.concat(value.monoms)\r\n            } else if (value instanceof Monom) {\r\n                this.#monoms.push(value.clone())\r\n            } else if (typeof value === \"number\" && Number.isSafeInteger(value)) {\r\n                this.#monoms.push(new Monom(value.toString()))\r\n            } else {\r\n                this.#monoms.push(new Monom(value))\r\n            }\r\n        }\r\n\r\n\r\n        return this.reduce()\r\n    }\r\n\r\n    public commonMonom = (): Monom => {\r\n        const M = new Monom().one()\r\n        const numerator: number = this.gcdNumerator()\r\n        const denominator: number = this.gcdDenominator()\r\n        const degree = this.degree()\r\n\r\n        M.coefficient = new Fraction(numerator, denominator)\r\n        for (const L of this.variables) {\r\n            // Initialize the setLetter with the max degree\r\n            M.setLetter(L, degree)\r\n            for (const m of this.#monoms) {\r\n                M.setLetter(L, Fraction.min(m.degree(L), M.degree(L)))\r\n                if (M.degree(L).isZero()) {\r\n                    break\r\n                }\r\n\r\n            }\r\n        }\r\n        return M\r\n    }\r\n\r\n    public degree = (letter?: string): Fraction => {\r\n        let d: Fraction = new Fraction().zero()\r\n        for (const m of this.#monoms) {\r\n            d = Fraction.max(m.degree(letter).value, d)\r\n        }\r\n\r\n        return d\r\n    }\r\n\r\n    public derivative = (letter?: string): Polynom => {\r\n        const dP = new Polynom()\r\n\r\n        for (const m of this.#monoms) {\r\n            dP.add(m.derivative(letter))\r\n        }\r\n\r\n        return dP.reduce()\r\n    }\r\n\r\n    public divide = (value: InputAlgebra<Polynom>): Polynom => {\r\n\r\n        if (value instanceof Fraction) {\r\n            return this.#divideByFraction(value)\r\n        } else if (typeof value === 'number' && Number.isSafeInteger(value)) {\r\n            return this.#divideByInteger(value)\r\n        } else if (value instanceof Monom) {\r\n            return this.divide(new Polynom(value))\r\n        } else if (value instanceof Polynom) {\r\n            if (value.monoms.length === 1 && value.variables.length === 0) {\r\n                return this.#divideByFraction(value.monoms[0].coefficient)\r\n            } else {\r\n                const {quotient, reminder} = this.euclidean(value)\r\n                if (reminder.isZero()) {\r\n                    this.#monoms = quotient.monoms\r\n                    return this\r\n                }\r\n            }\r\n        } else if (typeof value === 'string') {\r\n            return this.divide(new Polynom(value))\r\n        }\r\n\r\n        throw new Error(`Cannot divide by ${value as unknown as string}`)\r\n    }\r\n\r\n    public empty = (): this => {\r\n        this.#monoms = []\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Divide the current polynom by another polynom.\r\n     * @param P\r\n     * returns {quotient: Polynom, reminder: Polynom}\r\n     */\r\n    public euclidean = (P: Polynom): IEuclidean => {\r\n        const letter: string = P.variables[0]\r\n        const quotient: Polynom = new Polynom().zero()\r\n        const reminder: Polynom = this.clone().reorder(letter)\r\n\r\n        // There is no variable - means it's a number\r\n        if (P.variables.length === 0) {\r\n            const q = this.clone().divide(P)\r\n\r\n            return {\r\n                quotient: q.reduce(),\r\n                reminder: new Polynom().zero()\r\n            }\r\n        }\r\n\r\n        // Get at least a letter\r\n        const maxMP: Monom = P.monomByDegree(undefined, letter)\r\n        const degreeP: Fraction = P.degree(letter)\r\n\r\n        let newM: Monom\r\n\r\n        // Make the Euclidean division of the two polynoms.\r\n        let MaxIteration = this.degree(letter).value * 2\r\n        while (reminder.degree(letter).isGeq(degreeP) && MaxIteration > 0) {\r\n            MaxIteration--\r\n\r\n            // Get the greatest monom divided by the max monom of the divider\r\n            newM = reminder.monomByDegree(undefined, letter).clone().divide(maxMP)\r\n\r\n            if (newM.isZero()) {\r\n                continue\r\n            }\r\n\r\n            // Get the new quotient and reminder.\r\n            quotient.add(newM)\r\n            reminder.subtract(P.clone().multiply(newM)).reduce()\r\n\r\n            // Check if the reminder is zero.\r\n            if (newM.degree(letter).isZero()) {\r\n                break\r\n            }\r\n        }\r\n\r\n        quotient.reduce()\r\n        reminder.reduce()\r\n        return {quotient, reminder}\r\n    }\r\n\r\n    public evaluate = (values: literalType<Fraction | number> | InputValue<Fraction>, asNumeric?: boolean): Fraction | number => {\r\n        // Return the numeric value, without using Fraction\r\n        if (asNumeric) {\r\n            return this.#evaluateAsNumeric(values)\r\n        }\r\n\r\n        // Build the evaluated fraction\r\n        const r = new Fraction().zero()\r\n        this.#monoms.forEach(monom => {\r\n            //console.log('Evaluate polynom: ', monom.display, values, monom.evaluate(values).display);\r\n            r.add(monom.evaluate(values, asNumeric))\r\n        })\r\n\r\n        return r\r\n    }\r\n\r\n    // -------------------------------------\r\n    /**\r\n     * Factorize a polynom and store the best results in factors.\r\n     * @param letter\r\n     */\r\n    public factorize = (letter?: string): Polynom[] => {\r\n        let factors: Polynom[] = []\r\n        let P = this.clone().reorder()\r\n\r\n        // Extract the common monom\r\n        // 2x^3+6x^2 => 2x^2\r\n        const M = P.commonMonom()\r\n        // If the polynom starts with a negative monom, factorize it.\r\n        if (P.monomByDegree().coefficient.isStrictlyNegative() && M.coefficient.isStrictlyPositive() && !M.isOne()) {\r\n            M.opposite()\r\n        }\r\n\r\n\r\n        if (!M.isOne()) {\r\n            const tempPolynom: Polynom = new Polynom(M)\r\n            factors = [tempPolynom.clone()]\r\n            P = P.euclidean(tempPolynom).quotient\r\n        }\r\n\r\n        // Main loop\r\n        let securityLoop = P.degree().clone().multiply(2).value,\r\n            maxDegree = 1\r\n        while (securityLoop >= 0) {\r\n            securityLoop--\r\n            if (P.monoms.length < 2) {\r\n                // The polynom has only one monom => 7x^2\r\n                // No need to continue.\r\n                if (!P.isOne()) {\r\n                    factors.push(P.clone())\r\n                    P.one()\r\n                }\r\n                break\r\n            } else if (P.degree(letter).isOne()) {\r\n                // The polynom is a first degree polynom => 3x-5\r\n                // No need to continue\r\n                factors.push(P.clone())\r\n                P.one()\r\n                break\r\n            } else {\r\n                // Create the list of all \"potential\" polynom dividers.\r\n                let allDividers: Polynom[] = this.#getAllPotentialFactors(P, maxDegree, letter ?? 'x')\r\n                maxDegree = P.degree(letter).value\r\n\r\n                // Actually: 100ms\r\n                while (allDividers.length > 0) {\r\n                    const div = allDividers[0]\r\n\r\n                    if (!P.isDividableBy(div))\r\n                        // Not dividable. Remove it from the list\r\n                    {\r\n                        allDividers.shift()\r\n                    } else {\r\n                        // It's dividable - so make the division\r\n                        const result = P.euclidean(div)\r\n\r\n                        // Add the factor\r\n                        factors.push(div)\r\n\r\n                        // As it's dividable, get the quotient.\r\n                        P = result.quotient.clone()\r\n\r\n                        // filter all dividers that are no more suitable.\r\n                        allDividers = allDividers.filter(x => {\r\n                            const pX = P.monoms[0],\r\n                                pC = P.monoms[P.monoms.length - 1],\r\n                                dX = x.monoms[0],\r\n                                dC = x.monoms[x.monoms.length - 1]\r\n\r\n                            // Check last item (degree zero)\r\n                            if (!pC.isDivisible(dC)) {\r\n                                return false\r\n                            }\r\n\r\n                            // Check the first item (degree max)\r\n                            return pX.isDivisible(dX)\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Maybe there is still something in the Polynom (not everything was possible to factorize)\r\n        if (!P.isOne()) {\r\n            factors.push(P.clone())\r\n        }\r\n\r\n\r\n        // Save the factors\r\n        this.#factors = factors\r\n\r\n        return this.#factors\r\n    }\r\n\r\n    public fromCoefficients(...values: InputValue<Fraction>[]) {\r\n        this.#monoms = []\r\n        const letter = 'x'\r\n        values.reverse().forEach((coeff, index) => {\r\n            const monom = new Monom()\r\n            monom.coefficient = new Fraction(coeff)\r\n            monom.setLetter(letter, index)\r\n\r\n            this.#monoms.push(monom)\r\n        })\r\n\r\n        return this\r\n    }\r\n\r\n    public gcdDenominator = (): number => {\r\n        return Numeric.gcd(...this.getDenominators())\r\n    }\r\n\r\n    public gcdNumerator = (): number => {\r\n        return Numeric.gcd(...this.getNumerators())\r\n    }\r\n\r\n    public getCoefficients(): Fraction[] {\r\n        // Assume there is only one letter.\r\n        const orderedPolynom = this.clone().reorder()\r\n\r\n        const length = this.degree().value + 1\r\n        const coeffs = new Array(length).fill(new Fraction(0))\r\n\r\n        orderedPolynom.monoms.forEach(monom => {\r\n            const index = length - monom.degree().value - 1\r\n            coeffs[index] = monom.coefficient.clone()\r\n        })\r\n\r\n        // return orderedPolynom.monoms.map(x=>x.coefficient)\r\n        return coeffs\r\n    }\r\n\r\n    // Next functions are used for for commonMonom, which is used in the factorize method.\r\n    public getDenominators = (): number[] => {\r\n        const denominators: number[] = []\r\n        for (const m of this.#monoms) {\r\n            denominators.push(m.coefficient.denominator)\r\n        }\r\n\r\n        return denominators\r\n    }\r\n\r\n    public getNumerators = (): number[] => {\r\n        const numerators: number[] = []\r\n        for (const m of this.#monoms) {\r\n            numerators.push(m.coefficient.numerator)\r\n        }\r\n\r\n        return numerators\r\n    }\r\n\r\n    public getZeroes = (): ISolution[] => {\r\n        if (this.degree().isZero()) {\r\n            return []\r\n        }\r\n\r\n        this.roots = new EquationSolver(this.clone()).solve()\r\n        return this.roots\r\n    }\r\n\r\n    public hasVariable(letter: string): boolean {\r\n        return this.variables.includes(letter)\r\n    }\r\n\r\n    public integrate = (a: InputValue<Fraction>, b: InputValue<Fraction>, letter = 'x'): Fraction => {\r\n        const primitive = this.primitive(letter)\r\n\r\n        const valuesA: literalType<Fraction> = {},\r\n            valuesB: literalType<Fraction> = {}\r\n\r\n        valuesA[letter] = new Fraction(a)\r\n        valuesB[letter] = new Fraction(b)\r\n\r\n        return (primitive.evaluate(valuesB) as Fraction).subtract(primitive.evaluate(valuesA))\r\n    }\r\n\r\n    public inverse(): Polynom | undefined {\r\n        return undefined\r\n    }\r\n\r\n    public isDeveloped = (polynomString: string): boolean => {\r\n        let P: Polynom\r\n\r\n        // Start by removing the parenthesis after a \"power\"\r\n        const pString = polynomString.replaceAll(/\\^\\(([-0-9/]+)\\)/g, '$1')\r\n\r\n        // There is at least one parenthesis - it is not developed.\r\n        if (pString.includes('(') || pString.includes(')')) {\r\n            return false\r\n        }\r\n\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            // Build the polynom\r\n            P = new Polynom(polynomString)\r\n        } catch (e) {\r\n            return false\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false\r\n        }\r\n\r\n\r\n        // Check that everything is completely developed. Actually, there are no parentheses... so it is fully developed\r\n        return true\r\n    }\r\n\r\n    public isDividableBy = (div: Polynom): boolean => {\r\n        // Quick evaluation.\r\n        if (div.degree().isOne()) {\r\n            const zero = div.getZeroes()[0]\r\n\r\n            if (zero.exact instanceof Fraction) {\r\n                return (this.evaluate(zero.exact) as Fraction).isZero()\r\n            } else {\r\n                return false\r\n            }\r\n\r\n        } else {\r\n            const {reminder} = this.euclidean(div)\r\n            return reminder.isZero()\r\n        }\r\n    }\r\n\r\n    public isEqual = (P: Polynom): boolean => {\r\n        return this.#compare(P, '=')\r\n    }\r\n\r\n    public get isMultiVariable(): boolean {\r\n        // Determine if a monom has more than one variable.\r\n        return this.#monoms.some(m => m.variables.length > 1)\r\n    }\r\n\r\n    public isOne(): boolean {\r\n        return this.#monoms.length === 1 && this.#monoms[0].coefficient.isOne() && this.degree().isZero()\r\n    }\r\n\r\n    public isOppositeAt = (P: Polynom): boolean => {\r\n        return this.#compare(P.clone().opposite(), '=')\r\n    }\r\n\r\n    public isReduced = (polynomString: string): boolean => {\r\n        // The polynom must be developed to be reduced.\r\n        if (!this.isDeveloped(polynomString)) {\r\n            return false\r\n        }\r\n\r\n\r\n        const P = new Polynom(polynomString)\r\n        if (P.monoms.length > this.monoms.length) {\r\n            return false\r\n        }\r\n\r\n\r\n        // TODO: Not sure the reduced system checking is working properly !\r\n        for (const m of P.monoms) {\r\n            if (!m.coefficient.isReduced()) {\r\n                return false\r\n            }\r\n        }\r\n\r\n\r\n        return false\r\n    }\r\n\r\n    public isSameAs = (P: Polynom): boolean => {\r\n        return this.#compare(P, 'same')\r\n    }\r\n\r\n    public isZero(): boolean {\r\n        return (this.#monoms.length === 1 && this.#monoms[0].coefficient.isZero()) || this.#monoms.length === 0\r\n    }\r\n\r\n    public lcmDenominator = (): number => {\r\n        return Numeric.lcm(...this.getDenominators())\r\n    }\r\n\r\n    public lcmNumerator = (): number => {\r\n        return Numeric.lcm(...this.getNumerators())\r\n    }\r\n\r\n    public get length() {\r\n        return this.#monoms.length\r\n    }\r\n\r\n    public letters = (): string[] => {\r\n        let S = new Set<string>()\r\n\r\n        for (const m of this.#monoms) {\r\n            S = new Set([...S, ...m.variables])\r\n        }\r\n\r\n\r\n        return [...S]\r\n    }\r\n\r\n    public limitToInfinity = (letter?: string): Fraction => {\r\n        const M = this.monomByDegree(undefined, letter),\r\n            sign = M.coefficient.sign(),\r\n            degree = M.degree(letter)\r\n\r\n        if (degree.isStrictlyPositive()) {\r\n            return sign === 1 ? (new Fraction()).infinite() : (new Fraction()).infinite().opposite()\r\n        } else if (degree.isZero()) {\r\n            return M.coefficient\r\n        }\r\n\r\n\r\n        // Any other cases\r\n        return (new Fraction()).zero()\r\n    }\r\n\r\n    public limitToNegativeInfinity = (letter?: string): Fraction => {\r\n        const M = this.monomByDegree(undefined, letter),\r\n            sign = M.coefficient.sign(),\r\n            degree = M.degree(letter)\r\n\r\n        if (degree.isStrictlyPositive()) {\r\n            return sign === -1 ? (new Fraction()).infinite() : (new Fraction()).infinite().opposite()\r\n        } else if (degree.isZero()) {\r\n            return M.coefficient\r\n        }\r\n\r\n\r\n        // Any other cases\r\n        return (new Fraction()).zero()\r\n    }\r\n\r\n    public monomByDegree = (degree?: Fraction | number, letter?: string): Monom => {\r\n        if (degree === undefined)\r\n            // return the highest degree monom.\r\n        {\r\n            return this.monomByDegree(this.degree(letter), letter)\r\n        }\r\n\r\n\r\n        // Reduce the polynom.\r\n        const M = this.clone().reduce()\r\n        for (const m of M.#monoms) {\r\n            if (m.degree(letter).isEqual(degree)) {\r\n                return m.clone()\r\n            }\r\n        }\r\n\r\n\r\n        // Nothing was found - return the null monom.\r\n        return new Monom().zero()\r\n    }\r\n\r\n    // Used in LinearSystem.tex\r\n    public monomByLetter = (letter: string): Monom => {\r\n        const M = this.clone().reduce()\r\n        for (const m of M.#monoms) {\r\n            if (m.hasVariable(letter)) {\r\n                return m.clone()\r\n            }\r\n        }\r\n\r\n\r\n        return new Monom().zero()\r\n    }\r\n\r\n    // ------------------------------------------\r\n    public get monoms() {\r\n        return this.#monoms\r\n    }\r\n\r\n    public set monoms(M: Monom[]) {\r\n        this.#monoms = M\r\n    }\r\n\r\n    public monomsByDegree = (degree?: number | Fraction, letter?: string): Monom[] => {\r\n        if (degree === undefined)\r\n            // return the highest degree monom.\r\n        {\r\n            return this.monomsByDegree(this.degree(letter))\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        const Ms: Monom[] = []\r\n\r\n        const M = this.clone().reduce()\r\n        for (const m of M.#monoms) {\r\n            if (m.degree(letter).isEqual(degree)) {\r\n                Ms.push(m.clone())\r\n            }\r\n        }\r\n\r\n\r\n        return Ms\r\n        // Nothing was found - return\r\n    }\r\n\r\n    public multiply = (value: unknown): Polynom => {\r\n\r\n        if (value instanceof Polynom) {\r\n            return this.#multiplyByPolynom(value)\r\n        } else if (value instanceof Fraction) {\r\n            return this.#multiplyByFraction(value)\r\n        } else if (value instanceof Monom) {\r\n            return this.#multiplyByMonom(value)\r\n        } else if (Number.isSafeInteger(value) && typeof value === 'number') {\r\n            return this.#multiplyByInteger(value)\r\n        }\r\n\r\n\r\n        // Something went wrong...\r\n        return this\r\n    }\r\n\r\n    public get numberOfVars(): number {\r\n        return this.variables.length\r\n    }\r\n\r\n    public one = (): this => {\r\n        this.#monoms = []\r\n        this.#monoms.push(new Monom().one())\r\n        return this\r\n    }\r\n\r\n    // ------------------------------------------\r\n    public opposite = (): this => {\r\n        this.#monoms = this.#monoms.map(m => m.opposite())\r\n        return this\r\n    }\r\n\r\n    public get plotFunction(): string {\r\n        return this.#genDisplay('tex', false, false, true)\r\n    }\r\n\r\n    public pow = (nb: number): Polynom => {\r\n        return operation_pow(this as Polynom, nb).reduce()\r\n    }\r\n\r\n    public primitive = (letter?: string): Polynom => {\r\n        const dP = new Polynom()\r\n\r\n        for (const m of this.#monoms) {\r\n            dP.add(m.primitive(letter))\r\n        }\r\n\r\n        return dP\r\n    }\r\n\r\n    public reduce = (): Polynom => {\r\n        // Reduce the polynom\r\n\r\n        // Group the monoms by similarity\r\n        let i = 0\r\n        while (i < this.#monoms.length) {\r\n            for (let j = i + 1; j < this.#monoms.length; j++) {\r\n                if (this.#monoms[i].isSameAs(this.#monoms[j])) {\r\n                    this.#monoms[i].add(this.#monoms[j])\r\n                    this.#monoms.splice(j, 1)\r\n                    if (this.#monoms[i].isZero()) {\r\n                        this.#monoms[i] = new Monom().zero()\r\n                    }\r\n\r\n                    j--\r\n                }\r\n            }\r\n\r\n\r\n            i++\r\n        }\r\n\r\n        // Remove all null monoms\r\n        this.#monoms = this.#monoms.filter((m) => {\r\n            return !m.coefficient.isZero()\r\n        })\r\n\r\n        // Reduce all monoms coefficient.\r\n        for (const m of this.#monoms) {\r\n            m.coefficient.reduce()\r\n        }\r\n\r\n\r\n        if (this.length === 0) {\r\n            return new Polynom().zero()\r\n        }\r\n\r\n\r\n        return this.reorder()\r\n    }\r\n\r\n    // ------------------------------------------\r\n\r\n    public reorder = (letter = 'x', revert?: boolean): this => {\r\n        if (revert === undefined) {\r\n            revert = false\r\n        }\r\n\r\n        const otherLetters = this.variables.filter(x => x !== letter)\r\n        this.#monoms.sort(function (a, b) {\r\n            const da = a.degree(letter).value,\r\n                db = b.degree(letter).value\r\n\r\n            // Values are different\r\n            if (da !== db) {\r\n                return revert ? da - db : db - da\r\n            }\r\n\r\n            // if values are equals, check other letters - it must be reverted in that case !\r\n            if (otherLetters.length > 0) {\r\n                for (const L of otherLetters) {\r\n                    const da = a.degree(L).value,\r\n                        db = b.degree(L).value\r\n\r\n                    // Values are different\r\n                    if (da !== db) {\r\n                        return revert ? da - db : db - da\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            return 0\r\n        })\r\n\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Replace a variable (letter) by a polynom.\r\n     * @param letter\r\n     * @param P\r\n     */\r\n    public replaceBy = (letter: string, P: Polynom): this => {\r\n        let pow: Fraction\r\n        const resultPolynom: Polynom = new Polynom().zero()\r\n\r\n        for (const m of this.monoms) {\r\n            if (!m.hasVariable(letter) || m.literal[letter].isZero()) {\r\n                resultPolynom.add(m.clone())\r\n            } else {\r\n                // We have found a variable to replace.\r\n\r\n                // Get the power.\r\n                pow = m.literal[letter].clone()\r\n\r\n                // Remove the variable from the monom\r\n                m.removeVariable(letter)\r\n\r\n                // Add the new monom to the result polynom\r\n                resultPolynom.add(P.clone().pow(Math.abs(pow.numerator)).multiply(m))\r\n            }\r\n        }\r\n\r\n\r\n        // Reduce the monoms\r\n        this.#monoms = resultPolynom.reduce().monoms\r\n        return this\r\n    }\r\n\r\n    public root(): Polynom {\r\n        throw new Error('Cannot take the root from a polynom')\r\n    }\r\n\r\n    get roots(): ISolution[] {\r\n        return this.#rootsCache ? this.#roots : this.getZeroes()\r\n    }\r\n\r\n    set roots(value: ISolution[]) {\r\n        this.#rootsCache = true\r\n        this.#roots = value\r\n    }\r\n\r\n    public sqrt(): Polynom {\r\n        throw new Error('Cannot take the square root from a polynom')\r\n    }\r\n\r\n    public subtract = (...values: InputAlgebra<Polynom>[]): Polynom => {\r\n        for (const value of values) {\r\n            if (value instanceof Polynom) {\r\n                this.add(value.clone().opposite())\r\n            } else if (value instanceof Monom) {\r\n                this.#monoms.push(value.clone().opposite())\r\n            } else {\r\n                this.#monoms.push(new Monom(value).opposite())\r\n            }\r\n        }\r\n\r\n\r\n        return this.reduce()\r\n    }\r\n\r\n    public tableOfSigns(): TABLE_OF_SIGNS {\r\n        // returns ['+-', 'd|t|z', '+-']...\r\n\r\n        // global roots from eventually Polyfactor. Allows to add \"extra column\".\r\n        const roots: ISolution[] = this.roots\r\n\r\n        // Build the table os sign length and default values\r\n        // The signs looks like: ['+', 't', '+', 't', '+', 't', '+']\r\n        let signs: TABLE_OF_SIGNS_VALUES[] = new Array(2 * roots.length + 1)\r\n            .fill('')\r\n            .map((_x, index) => {\r\n                return index % 2 === 0 ? '' : 'z'\r\n            })\r\n\r\n\r\n        if (signs.length === 1) {\r\n            // The polynom is a constant or has not roots\r\n            const [a] = this.getCoefficients().map(x => x.value)\r\n            signs = replace_in_array(signs, '', a > 0 ? '+' : '-')\r\n        } else if (this.degree().isOne()) {\r\n            // First degree: ax+b\r\n            const [a] = this.getCoefficients().map(x => x.value)\r\n\r\n            // Get the index of the zero.\r\n            signs[0] = a > 0 ? '-' : '+'\r\n            signs[1] = 'z'\r\n            signs[2] = a > 0 ? '+' : '-'\r\n        } else {\r\n            const testingRoots = [\r\n                roots[0].value - 1,\r\n                ...roots.map((_root, index) => {\r\n                    return index === roots.length - 1 ?\r\n                        roots[index].value + 1 :\r\n                        (roots[index].value + roots[index + 1].value) / 2\r\n                })\r\n            ]\r\n\r\n            testingRoots.forEach((test, index) => {\r\n                const sign = this.evaluate({x: test}, true) as number\r\n                signs[index * 2] = sign > 0 ? '+' : '-'\r\n            })\r\n        }\r\n\r\n        return {roots, signs}\r\n    }\r\n\r\n    public get variables(): string[] {\r\n        let V: string[] = []\r\n\r\n        for (const m of this.#monoms) {\r\n            V = V.concat(m.variables)\r\n        }\r\n\r\n\r\n        // Remove duplicates.\r\n        V = [...new Set(V)]\r\n        V.sort()\r\n        return V\r\n    }\r\n\r\n    /**\r\n     * Set the polynom to zero.\r\n     * @returns {this}\r\n     */\r\n    public zero = (): this => {\r\n        this.#monoms = []\r\n        this.#monoms.push(new Monom().zero())\r\n        return this\r\n    }\r\n\r\n    public get zeroes(): ISolution[] {\r\n        return this.getZeroes()\r\n    }\r\n\r\n    #compare = (P: Polynom, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '='\r\n        }\r\n\r\n        // Create clone version to reduce them without altering the original polynoms.\r\n        const cP1 = this.clone().reduce().reorder()\r\n        const cP2 = P.clone().reduce().reorder()\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || !cP1.degree().isEqual(cP2.degree())) {\r\n                    return false\r\n                }\r\n\r\n                // Check if the coefficients are the isSame.\r\n                return cP1.monoms\r\n                    .every((m1, index) => m1.isEqual(cP2.monoms[index]))\r\n\r\n            case 'same':\r\n                // They must have the same length and the same degree\r\n                if (cP1.length !== cP2.length || !cP1.degree().isEqual(cP2.degree())) {\r\n                    return false\r\n                }\r\n\r\n                return cP1.monoms\r\n                    .every((m1, index) => m1.isSameAs(cP2.monoms[index]))\r\n\r\n            default:\r\n                return false\r\n        }\r\n    }\r\n\r\n\r\n    #divideByFraction = (F: Fraction): this => {\r\n        for (const m of this.#monoms) {\r\n            m.coefficient.divide(F)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    #divideByInteger = (nb: number): this => {\r\n        const nbF = new Fraction(nb)\r\n        for (const m of this.#monoms) {\r\n            m.coefficient.divide(nbF)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    #evaluateAsNumeric = (values: literalType<number | Fraction> | InputValue<Fraction>): number => {\r\n        let r = 0\r\n        this.#monoms.forEach(monom => {\r\n            r += monom.evaluate(values, true) as number\r\n        })\r\n\r\n        return r\r\n    }\r\n\r\n    #factorize2ndDegree = (letter: string): Polynom[] => {\r\n        let P1: Polynom, P2: Polynom,\r\n            a, b, c, delta, x1, x2, factor\r\n\r\n        // One variable only\r\n        if (this.numberOfVars === 1) {\r\n            a = this.monomByDegree(2, letter).coefficient\r\n            b = this.monomByDegree(1, letter).coefficient\r\n            c = this.monomByDegree(0, letter).coefficient\r\n            delta = b.clone().pow(2).subtract(a.clone().multiply(c).multiply(4))\r\n\r\n            if (delta.isZero()) {\r\n                x1 = b.clone().opposite().divide(a.clone().multiply(2))\r\n                P1 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                P2 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                factor = a.divide(x1.denominator).divide(x1.denominator)\r\n\r\n                if (!factor.isOne()) {\r\n                    return [new Polynom(factor.display), P1, P2]\r\n                } else {\r\n                    return [P1, P2]\r\n                }\r\n\r\n            } else if (delta.isPositive() && delta.isSquare()) {\r\n                x1 = b.clone().opposite()\r\n                    .add(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n                x2 = b.clone().opposite()\r\n                    .subtract(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n\r\n                // (2x+5)(3x-2)\r\n                // 6x^2+11x-10\r\n                // a = 6, b = 11, c = -10\r\n                // delta = 121-4*6*(-10) = 361= 19^2\r\n                // x1 = (-11 + 19)  / 12 = 8/12 = 2/3\r\n                // x2 = (-11 - 19)  / 12 = -30/12 = -5/2\r\n                factor = a.divide(x1.denominator).divide(x2.denominator)\r\n                if (factor.isOne()) {\r\n                    return [\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n                } else {\r\n                    return [\r\n                        new Polynom(factor.display),\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n                }\r\n\r\n\r\n            } else\r\n                // No solution possible - return the complete value.\r\n            {\r\n                return [this.clone()]\r\n            }\r\n\r\n        } else {\r\n            // If multiple variables, only handle perfect squares...\r\n            a = this.monomByDegree(2, letter)\r\n            b = this.monomByDegree(1, letter)\r\n            c = this.monomByDegree(0, letter)\r\n\r\n            if (a.isLiteralSquare() && c.isLiteralSquare())\r\n                // Check the middle item is same as...\r\n\r\n\r\n            {\r\n                if (b.clone().pow(2).isSameAs(a.clone().multiply(c))) {\r\n                    // Determine if the coefficient values matches.\r\n\r\n                    // Search 4 values (r, s, t, u) that matches:\r\n                    // (r X + s Y)(t X + u Y) = rt X^2 + (ru + st) XY + su Y^2\r\n\r\n                    const xPolynom = new Polynom('x', a.coefficient, b.coefficient, c.coefficient)\r\n                    const xFactors = xPolynom.#factorize2ndDegree('x')\r\n\r\n                    const factors = []\r\n                    let xyzPolynom: Polynom\r\n\r\n                    if (xFactors.length >= 2) {\r\n                        for (const p of xFactors) {\r\n                            if (p.degree().isZero()) {\r\n                                factors.push(p.clone())\r\n                            } else {\r\n                                xyzPolynom = p.clone()\r\n                                xyzPolynom.monoms[0].literal = a.literalSqrt\r\n                                xyzPolynom.monoms[1].literal = c.literalSqrt\r\n                                factors.push(xyzPolynom.clone())\r\n                            }\r\n                        }\r\n\r\n\r\n                        return factors\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            return [this.clone()]\r\n        }\r\n    }\r\n\r\n    #genDisplay = (output?: string, forceSign?: boolean, wrapParentheses?: boolean, withAllMultiplicationSign?: boolean): string => {\r\n        let P = ''\r\n\r\n        for (const k of this.#monoms) {\r\n            if (k.coefficient.value === 0) {\r\n                continue\r\n            }\r\n\r\n\r\n            // The monom to be displayed\r\n            let m\r\n            if (withAllMultiplicationSign) {\r\n                m = k.plotFunction\r\n            } else {\r\n                m = (output === 'tex') ? k.tex : k.display\r\n            }\r\n\r\n            P += `${(k.coefficient.sign() === 1 && (P !== '' || forceSign === true)) ? '+' : ''}${m}`\r\n        }\r\n\r\n        if (wrapParentheses === true && this.length > 1) {\r\n            if (output === 'tex') {\r\n                P = `\\\\left( ${P} \\\\right)`\r\n            } else {\r\n                P = `(${P})`\r\n            }\r\n        }\r\n\r\n\r\n        if (P === '') {\r\n            P = '0'\r\n        }\r\n\r\n        return P\r\n    }\r\n\r\n    #getAllPotentialFactors = (P: Polynom, maxDegree: number, letter: string): Polynom[] => {\r\n        const m1 = P.monoms[0].dividers,\r\n            m2 = P.monoms[P.monoms.length - 1].dividers\r\n\r\n        const allDividers: Polynom[] = []\r\n        m1.forEach(m1d => {\r\n            // Get only polynom that has a degree less than a specific value\r\n            if (m1d.degree(letter).isLeq(maxDegree)) {\r\n                m2.forEach(m2d => {\r\n                    if (m1d.degree(letter).isNotEqual(m2d.degree(letter))) {\r\n                        allDividers.push(new Polynom(m1d, m2d))\r\n                        allDividers.push(new Polynom(m1d, m2d.clone().opposite()))\r\n                    }\r\n                })\r\n            }\r\n\r\n\r\n        })\r\n\r\n        return allDividers\r\n    }\r\n\r\n    #multiplyByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this.#monoms) {\r\n            m.coefficient.multiply(F)\r\n        }\r\n\r\n\r\n        return this.reduce()\r\n    }\r\n\r\n    #multiplyByInteger = (nb: number): Polynom => {\r\n        return this.#multiplyByFraction(new Fraction(nb))\r\n    }\r\n\r\n    #multiplyByMonom = (M: Monom): Polynom => {\r\n        for (const m of this.#monoms) {\r\n            m.multiply(M)\r\n        }\r\n\r\n        return this.reduce()\r\n    }\r\n\r\n    #multiplyByPolynom = (P: Polynom): Polynom => {\r\n        const M: Monom[] = []\r\n        for (const m1 of this.#monoms) {\r\n            for (const m2 of P.monoms) {\r\n                M.push(Monom.xMultiply(m1, m2))\r\n            }\r\n        }\r\n\r\n\r\n        this.#monoms = M\r\n        return this.reduce()\r\n    }\r\n\r\n    #parseString(inputStr: string, ...values: unknown[]): this {\r\n        if (values.length === 0) {\r\n            inputStr = '' + inputStr\r\n\r\n            // Parse the polynom using the shutting yard algorithm\r\n            if (inputStr !== '' && !isNaN(Number(inputStr))) {\r\n                this.empty()\r\n                // It's a simple number.\r\n                const m = new Monom(inputStr)\r\n                // m.coefficient = new Fraction(inputStr);\r\n                // m.literalStr = '';\r\n                this.add(m)\r\n                return this\r\n            }\r\n\r\n            // Parse the string.\r\n            return this.#shutingYardToReducedPolynom(inputStr)\r\n        } else if (/^[a-z]+/.test(inputStr)) {\r\n            // We assume the inputStr contains only letters.\r\n            this.empty()\r\n\r\n            const fractions = values.map(x => new Fraction(x as InputValue<Fraction>))\r\n\r\n            // Multiple setLetter version\r\n            if (inputStr.length > 1) {\r\n                const letters = inputStr.split('')\r\n\r\n                if (letters.length < values.length - 2) {\r\n                    throw new Error('Too many factors for too few variables !')\r\n                }\r\n\r\n                let i = 0\r\n\r\n                for (const F of fractions) {\r\n                    const m = new Monom()\r\n                    m.coefficient = F.clone()\r\n                    m.literalStr = letters[i] || ''\r\n                    this.add(m)\r\n                    i++\r\n                }\r\n            }\r\n            // Single setLetter version\r\n            else {\r\n                let n = fractions.length - 1\r\n                for (const F of fractions) {\r\n                    const m = new Monom()\r\n                    m.coefficient = F.clone()\r\n                    m.literalStr = `${inputStr}^${n}`\r\n                    this.add(m)\r\n                    n--\r\n                }\r\n            }\r\n            return this\r\n        } else {\r\n            return this.zero()\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Main parse using a shutting yard class\r\n     * @param inputStr\r\n     */\r\n    #shutingYardToReducedPolynom = (inputStr: string): this => {\r\n        // Get the RPN array of the current expression\r\n        const SY: ShutingYard = new ShutingYard().parse(inputStr)\r\n        const rpn: { token: string, tokenType: ShutingyardType }[] = SY.rpn\r\n\r\n        // New version for reducing shuting yard.\r\n        this.zero()\r\n\r\n        const stack: Polynom[] = []\r\n\r\n        // Loop through the each element of the RPN\r\n        for (const element of rpn) {\r\n            this.#shutingYard_addToken(stack, element)\r\n        }\r\n\r\n\r\n        if (stack.length === 1) {\r\n            this.add(stack[0])\r\n        }\r\n\r\n\r\n        return this.reorder()\r\n    }\r\n\r\n    #shutingYard_addToken = (stack: Polynom[], element: Token): void => {\r\n        switch (element.tokenType) {\r\n            case ShutingyardType.COEFFICIENT:\r\n                stack.push(new Polynom(element.token))\r\n                break\r\n\r\n            case ShutingyardType.VARIABLE:\r\n                stack.push(new Polynom().add(new Monom(element.token)))\r\n                break\r\n\r\n            case ShutingyardType.CONSTANT:\r\n                // TODO: add constant support to Polynom parsing.\r\n                console.log('Actually, not supported - will be added later !')\r\n                break\r\n\r\n            case ShutingyardType.OPERATION:\r\n                if (stack.length >= 2) {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n\r\n                    // Check if the polynoms are not undefined.\r\n                    if (a === undefined || b === undefined) {\r\n                        break\r\n                    }\r\n\r\n                    if (element.token === '+') {\r\n                        stack.push(a.add(b))\r\n                    } else if (element.token === '-') {\r\n                        stack.push(a.subtract(b))\r\n                    } else if (element.token === '*') {\r\n                        stack.push(a.multiply(b))\r\n                    } else if (element.token === '/') {\r\n                        if (b.degree().isStrictlyPositive()) {\r\n                            console.log('divide by a polynom -> should create a rational polynom !')\r\n                        } else {\r\n                            // a.divide(b.monoms[0].coefficient)\r\n                            stack.push(a.divide(b.monoms[0].coefficient))\r\n                        }\r\n                    } else if (element.token === '^') {\r\n                        if (b.degree().isStrictlyPositive()) {\r\n                            throw new Error('Cannot elevate a polynom with another polynom !')\r\n                        } else if (b.monoms[0].coefficient.isRelative())\r\n                            // Integer power\r\n                        {\r\n                            stack.push(a.pow(b.monoms[0].coefficient.value))\r\n                        } else {\r\n                            // Only allow power if the previous polynom is only a monom, without coefficient.\r\n                            if (a.monoms.length === 1 && a.monoms[0].coefficient.isOne()) {\r\n                                for (const letter in a.monoms[0].literal) {\r\n                                    a.monoms[0].literal[letter].multiply(b.monoms[0].coefficient)\r\n                                }\r\n\r\n                                stack.push(a)\r\n                            } else {\r\n                                console.error('Cannot have power with fraction')\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else if (element.token === '-') {\r\n                    const a = stack.pop()\r\n                    if (a) {\r\n                        stack.push(a.opposite())\r\n                    }\r\n                } else {\r\n                    throw new Error(\"Error parsing the polynom\")\r\n                }\r\n\r\n\r\n                break\r\n\r\n            case ShutingyardType.MONOM:\r\n                // Should never appear.\r\n                console.error('The monom token should not appear here')\r\n                break\r\n\r\n            case ShutingyardType.FUNCTION:\r\n                // Should never appear.\r\n                console.error('The function token should not appear here - might be introduced later.')\r\n                break\r\n        }\r\n\r\n\r\n    }\r\n\r\n}\r\n","import type {\r\n    EQUATION_SIGN,\r\n    IAlgebra,\r\n    IEquation,\r\n    InputAlgebra,\r\n    InputValue,\r\n    IPiMathObject,\r\n    ISolution,\r\n    literalType\r\n} from \"../pimath.interface\"\r\nimport { Fraction } from \"../coefficients/fraction\"\r\nimport { Numeric } from \"../numeric\"\r\nimport { EquationSolver } from \"./equationSolver\"\r\nimport { Monom } from \"./monom\"\r\nimport { Polynom } from \"./polynom\"\r\n\r\nexport class Equation implements\r\n    IPiMathObject<Equation>,\r\n    IEquation<Equation>,\r\n    IAlgebra<Equation> {\r\n\r\n    // Left part of the equation\r\n    #left: Polynom\r\n    // Right part of the equation\r\n    #right: Polynom\r\n    // Signe of the equation\r\n    #sign: EQUATION_SIGN\r\n\r\n\r\n    constructor(equation: InputAlgebra<Polynom> | Equation)\r\n    constructor(left: InputAlgebra<Polynom>, right: InputAlgebra<Polynom>, sign?: EQUATION_SIGN)\r\n    constructor(left?: InputAlgebra<Polynom> | Equation, right?: InputAlgebra<Polynom>, sign?: EQUATION_SIGN) {\r\n        // Default equation\r\n        this.#left = new Polynom().zero()\r\n        this.#right = new Polynom().zero()\r\n        this.#sign = '='\r\n\r\n        // Only one value, it's an equation\r\n        if (left !== undefined && right === undefined) {\r\n            if (left instanceof Equation) {\r\n                return left.clone()\r\n            } else if (typeof left === 'string') {\r\n                // Parse the equation as a string.\r\n                this.parse(left)\r\n            }\r\n\r\n        } else if (left !== undefined && right !== undefined) {\r\n            // Two values, it's an equation with left and right polynoms.\r\n            this.left = new Polynom(left as InputAlgebra<Polynom>)\r\n            this.right = new Polynom(right)\r\n        }\r\n\r\n        if (sign !== undefined) {\r\n            this.sign = sign\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    // ------------------------------------------\r\n    public parse = (equationString: string): this => {\r\n        // Find the string separator\r\n        const strSign: string | false = this.#findSign(equationString)\r\n\r\n        if (strSign === false) {\r\n            throw new Error('The equation is not valid (no sign found)')\r\n        }\r\n\r\n        // The StrSign is found\r\n        const pStr: string[] = equationString.split(strSign)\r\n\r\n        return this.create(new Polynom(pStr[0]), new Polynom(pStr[1]), this.#formatSign(strSign))\r\n    }\r\n\r\n    public create = (left: Polynom, right: Polynom, sign?: string): this => {\r\n        this.#left = left\r\n        this.#right = right\r\n        this.#sign = this.#formatSign(sign ?? \"=\")\r\n        return this\r\n    }\r\n\r\n    public clone = (): Equation => {\r\n        return new Equation(this.#left.clone(), this.#right.clone(), this.#sign)\r\n    }\r\n\r\n    /**\r\n     * Add a value to the equation\r\n     * if value is an equation, add the left part to the left part of the equation\r\n     * and the right part to the right part of the equation\r\n     * if value is a string, try to create an equation\r\n     * if it fails, create a polynom and add it to the left and right part of the equation\r\n     * @param value | Polynom | Monom | Fraction | string | monom\r\n     */\r\n    public add(value: InputValue<Equation | Polynom>): this {\r\n        if (value instanceof Equation) {\r\n            // add the left part of the equation\r\n            this.#left.add(value.left)\r\n            // add the right part of the equation\r\n            this.#right.add(value.right)\r\n\r\n            return this\r\n        }\r\n\r\n        if (typeof value === 'string' &&\r\n            !Equation.isEquationString(value)) {\r\n\r\n            return this.add(new Equation(value))\r\n        }\r\n\r\n        const p = new Polynom(value)\r\n        this.#left.add(p)\r\n        this.#right.add(p)\r\n\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Get the degree of the equation\r\n     * @param letter\r\n     */\r\n    public degree = (letter?: string): Fraction => {\r\n        return Fraction.max(this.#left.degree(letter), this.#right.degree(letter))\r\n    }\r\n\r\n    /**\r\n     * divide an equation by a given value (transformed as a fraction)\r\n     *\r\n     * ```\r\n     * 8x+10=6x \\vert 2\r\n     * 4x+5=3x\r\n     * ```\r\n     *\r\n     * |>Alternatively with $3x-4$ maybe it's working ?\r\n     * $$\\frac{3x}{5}$$\r\n     *\r\n     * @param value\r\n     * @returns {Equation}\r\n     */\r\n    public divide = (value: InputValue<Fraction>): this => {\r\n        // Make sure we have a fraction.\r\n        const F: Fraction = new Fraction(value)\r\n\r\n        if (F.isZero()) {\r\n            return this\r\n        } else {\r\n            return this.multiply(F.inverse())\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create an Equation using two polynoms.\r\n     * Markdown *support* is cool\r\n     * @param values\r\n     * @param asNumeric\r\n     */\r\n    public evaluate(values: InputValue<Fraction> | literalType<number | Fraction>, asNumeric?: boolean  ): boolean {\r\n        // Evaluate the left and right part of the equation.\r\n        // compare the results.\r\n\r\n        // Evaluate the left and right part of the equation.\r\n        const left = this.#left.evaluate(values, asNumeric),\r\n            right = this.#right.evaluate(values, asNumeric)\r\n\r\n        // compare the results.\r\n        if (asNumeric) {\r\n            return left === right\r\n        }\r\n\r\n        return (left as Fraction).isEqual(right as Fraction)\r\n    }\r\n\r\n    /**\r\n     * Determine if the equation contains a variable.\r\n     * @param letter\r\n     */\r\n    public hasVariable = (letter: string): boolean => {\r\n        return this.variables.includes(letter)\r\n    }\r\n\r\n\r\n    public isEqual(value: InputValue<Equation>): boolean {\r\n        const equ = new Equation(value)\r\n        return equ.left.isEqual(this.#left) && equ.right.isEqual(this.#right)\r\n    }\r\n\r\n    public isLinearTo = (equ: Equation): boolean => {\r\n        // Move all left.\r\n        const p1 = equ.clone().moveLeft().simplify().left,\r\n            p2 = this.clone().moveLeft().simplify().left\r\n\r\n        // They are the same.\r\n        return p1.isEqual(p2) || p1.isOppositeAt(p2)\r\n    }\r\n\r\n    /**\r\n     * Determine if the equation contains more than one letter/variable.\r\n     */\r\n    public isMultiVariable = (): boolean => {\r\n        return this.#left.isMultiVariable || this.#right.isMultiVariable\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations helpers\r\n    public isEqualTo = (equ: Equation): boolean => {\r\n        const p1 = equ.clone().moveLeft().left,\r\n            p2 = this.clone().moveLeft().left\r\n\r\n        // They are the same.\r\n        return p1.isEqual(p2) || p1.isOppositeAt(p2)\r\n    }\r\n\r\n    /**\r\n     * Reorder the polynom to have only one letter on the left, the rest on the right.\r\n     * @param letter\r\n     */\r\n    public isolate = (letter?: string): this | false => {\r\n        // Determine if we can isolate the variables.\r\n\r\n        // Both part of the equations must be of the first degree.\r\n        if (!this.degree(letter).isOne()) {\r\n            return false\r\n        }\r\n\r\n        // Modify the equation to isolate the asked variable.\r\n        if (this.isMultiVariable()) {\r\n            return false\r\n        }\r\n\r\n        // Isolate the letter.\r\n        let mMove: Monom\r\n        // Start by moving everything to the left.\r\n        this.#left.subtract(this.#right)\r\n        this.#right.zero()\r\n        const values = [...this.#left.monoms]\r\n        for (const m of values) {\r\n            if (!m.hasVariable(letter)) {\r\n                mMove = m.clone()\r\n                this.#left.subtract(mMove)\r\n                this.#right.subtract(mMove)\r\n            }\r\n        }\r\n\r\n        // In theory, we should have only one item on the left.\r\n        if (this.#left.length !== 1) {\r\n            return false\r\n        }\r\n\r\n        const cMove: Fraction = this.#left.monoms[0].coefficient.clone()\r\n        this.#left.divide(cMove)\r\n        this.#right.divide(cMove)\r\n        return this\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations operations\r\n\r\n    // -----------------------------------------------\r\n    public letters = (): string[] => {\r\n        return [...new Set([...this.#left.letters(), ...this.#right.letters()])]\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    /**\r\n     * Reorder will move all monoms containing a letter on the left, all the other on the right.\r\n     */\r\n    public moveLeft = (): this => {\r\n        this.#left.subtract(this.#right)\r\n        this.#right.zero()\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Multiple an equation by a fraction value.\r\n     * @param value\r\n     */\r\n    public multiply = (value: InputValue<Fraction>): this => {\r\n        // Make sure we have a fraction.\r\n        const F: Fraction = new Fraction(value)\r\n\r\n        // Multiply each part of the equation by the fraction\r\n        this.#left.multiply(F)\r\n        this.#right.multiply(F)\r\n\r\n        // The sign of the inequality must be changed.\r\n        if (this.#sign !== '=' && F.sign() === -1) {\r\n            this.#reverseSign()\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    public pow(value: number): this {\r\n        this.#left.pow(value)\r\n        this.#right.pow(value)\r\n        return this\r\n    }\r\n    public opposite = (): this => {\r\n        this.#left = this.#left.opposite()\r\n        this.#right = this.#right.opposite()\r\n        return this\r\n    }\r\n\r\n    public reduce(): this {\r\n        // reduce means moving everything to the left\r\n        // remove the fractions\r\n        // simplify the equation\r\n        // reorder the equation\r\n        // start with a positive left part\r\n\r\n        // Move all left. The right part is now zero.\r\n        this.moveLeft()\r\n\r\n        // Reduce the equation: simplify and reorder.\r\n        this.#left.reduce()\r\n\r\n        // Simplify the equation.\r\n        this.simplify()\r\n\r\n        // Make sure the first part is positive.\r\n        if (this.#left.monoms[0].coefficient.isNegative()) {\r\n            this.multiply(-1)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    public reorder = (allLeft?: boolean): this => {\r\n        // Move all monoms of degree greater than 0 to the left.\r\n        // and all zero degree monoms to the right.\r\n        this.#left.subtract(this.#right)\r\n        this.#right.zero()\r\n        this.#left.reorder()\r\n\r\n        // we have all left (so equal zero) : it's done !\r\n        if (allLeft) {\r\n            return this\r\n        }\r\n\r\n        // Fetch all zero degree monoms.\r\n        this.#left.monoms\r\n            .filter(m => m.degree().isZero())\r\n            .forEach(m => {\r\n                const move = m.clone()\r\n                this.#left.subtract(move)\r\n                this.#right.subtract(move)\r\n            })\r\n\r\n        // Reorder the left and right polynoms\r\n        this.#left.reorder()\r\n        this.#right.reorder()\r\n        return this\r\n    }\r\n\r\n    // ------------------------------------------\r\n    public replaceBy = (letter: string, P: Polynom): this => {\r\n        this.#left.replaceBy(letter, P)\r\n        this.#right.replaceBy(letter, P)\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Multiply by the lcm denominator and divide by the gcm numerators.\r\n     */\r\n    public simplify = (): this => {\r\n        this.multiply(Numeric.lcm(...this.#left.getDenominators(), ...this.#right.getDenominators()))\r\n        this.divide(Numeric.gcd(...this.#left.getNumerators(), ...this.#right.getNumerators()))\r\n        return this\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    public solve = (): ISolution[] => {\r\n        const solver = new EquationSolver(this.clone())\r\n        return solver.solve()\r\n    }\r\n\r\n    public split(): [Polynom, Polynom] {\r\n        return [this.#left.clone(), this.#right.clone()]\r\n    }\r\n\r\n    public subtract(value: InputValue<Equation | Polynom>): this {\r\n        if (value instanceof Equation) {\r\n            this.#left.subtract(value.left)\r\n            this.#right.subtract(value.right)\r\n\r\n            return this\r\n        }\r\n\r\n        if (typeof value === 'string' &&\r\n            !Equation.isEquationString(value)) {\r\n            return this.subtract(new Equation(value))\r\n        }\r\n\r\n        const p = new Polynom(value)\r\n        this.#left.subtract(p)\r\n        this.#right.subtract(p)\r\n\r\n        return this\r\n    }\r\n\r\n    public test = (values: literalType<Fraction>): boolean => {\r\n        return (this.left.evaluate(values) as Fraction).isEqual(this.right.evaluate(values))\r\n    }\r\n\r\n    public static isEquationString(equationString: string): boolean {\r\n        // The equation sign can be one of the following:\r\n        // =, <, >, <=, >=\r\n\r\n        return equationString.includes('=') ||\r\n            equationString.includes('<') ||\r\n            equationString.includes('>') ||\r\n            equationString.includes('<=') ||\r\n            equationString.includes('>=')\r\n    }\r\n\r\n    public static makeSolutionsUnique(solutions: ISolution[], sorted?: boolean): ISolution[] {\r\n        const solutionAsTex: string[] = [],\r\n            uniqueSolutions = solutions.filter(sol => {\r\n                if (!solutionAsTex.includes(sol.tex)) {\r\n                    solutionAsTex.push(sol.tex)\r\n                    return true\r\n                } else {\r\n                    return false\r\n                }\r\n            })\r\n\r\n        if (sorted === true) {\r\n            uniqueSolutions.sort((a, b) => a.value - b.value)\r\n        }\r\n\r\n        return uniqueSolutions\r\n    }\r\n\r\n    public get display(): string {\r\n        return `${this.#left.display}${this.signAsTex}${this.#right.display}`\r\n    }\r\n\r\n    // Getter and setter\r\n    public get left(): Polynom {\r\n        return this.#left\r\n    }\r\n\r\n    public set left(value: Polynom) {\r\n        this.#left = value\r\n    }\r\n\r\n    public get numberOfVars(): number {\r\n        return this.variables.length\r\n    }\r\n\r\n    public get right(): Polynom {\r\n        return this.#right\r\n    }\r\n\r\n    public set right(value: Polynom) {\r\n        this.#right = value\r\n    }\r\n\r\n    // ------------------------------------------\r\n    public get sign(): string {\r\n        return this.#sign\r\n    }\r\n\r\n    public set sign(value: string) {\r\n        // Set the sign value as formatted.\r\n        this.#sign = this.#formatSign(value)\r\n    }\r\n\r\n    public get signAsTex(): string {\r\n        if (this.#sign === '>=') {\r\n            return '\\\\geq'\r\n        }\r\n\r\n        if (this.#sign === '<=') {\r\n            return '\\\\leq'\r\n        }\r\n\r\n        return this.#sign\r\n    }\r\n\r\n    public get tex(): string {\r\n        return `${this.#left.tex}${this.signAsTex}${this.#right.tex}`\r\n    }\r\n\r\n    public get variables(): string[] {\r\n        return [...new Set(this.#right.variables.concat(this.#left.variables))]\r\n    }\r\n\r\n    #findSign = (equationString: string): string | false => {\r\n        if (equationString.includes('geq')) {\r\n            return (equationString.includes('\\\\geq')) ? '\\\\geq' : 'geq'\r\n        } else if (equationString.includes('leq')) {\r\n            return (equationString.includes('\\\\leq')) ? '\\\\leq' : 'leq'\r\n        } else if (equationString.includes('>=')) {\r\n            return '>='\r\n        } else if (equationString.includes('=>')) {\r\n            return '=>'\r\n        } else if (equationString.includes('>')) {\r\n            return '>'\r\n        } else if (equationString.includes('<=')) {\r\n            return '<='\r\n        } else if (equationString.includes('=<')) {\r\n            return '=<'\r\n        } else if (equationString.includes('<')) {\r\n            return '<'\r\n        } else if (equationString.includes('=')) {\r\n            return '='\r\n        }\r\n\r\n        throw new Error('The equation is not valid (no sign found)')\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations solving algorithms\r\n    #formatSign = (signStr?: string): EQUATION_SIGN => {\r\n        if (signStr === undefined) {\r\n            return '='\r\n        }\r\n\r\n        if (signStr.includes('geq')) {\r\n            return '>='\r\n        } else if (signStr.includes('>=')) {\r\n            return '>='\r\n        } else if (signStr.includes('=>')) {\r\n            return '>='\r\n        } else if (signStr.includes('>')) {\r\n            return '>'\r\n        } else if (signStr.includes('leq')) {\r\n            return '<='\r\n        } else if (signStr.includes('<=')) {\r\n            return '<='\r\n        } else if (signStr.includes('=<')) {\r\n            return '<='\r\n        } else if (signStr.includes('<')) {\r\n            return '<'\r\n        } else {\r\n            return '='\r\n        }\r\n    }\r\n\r\n    #reverseSign = (): this => {\r\n        if (this.#sign === '=') {\r\n            return this\r\n        }\r\n\r\n        if (this.#sign.includes('<')) {\r\n            this.#sign.replace('<', '>')\r\n            return this\r\n        }\r\n        if (this.#sign.includes('>')) {\r\n            this.#sign.replace('>', '<')\r\n            return this\r\n        }\r\n\r\n        return this\r\n    }\r\n}\r\n","import type {\r\n    IAlgebra,\r\n    IExpression,\r\n    InputAlgebra,\r\n    InputValue,\r\n    IPiMathObject,\r\n    ISolution,\r\n    literalType,\r\n    TABLE_OF_SIGNS\r\n} from \"../pimath.interface\"\r\nimport {Fraction} from \"../coefficients/fraction\"\r\nimport {Polynom} from \"./polynom\"\r\nimport {replace_in_array, wrapParenthesis} from \"../helpers\"\r\n\r\nexport class Factor implements IPiMathObject<Factor>,\r\n    IExpression<Factor>,\r\n    IAlgebra<Factor> {\r\n    #displayMode: FACTOR_DISPLAY\r\n    #polynom: Polynom\r\n    #power: Fraction\r\n    #singleMode = false\r\n\r\n    constructor(value?: InputAlgebra<Polynom> | Factor, power?: InputValue<Fraction>) {\r\n\r\n\r\n        if (value instanceof Factor) {\r\n            this.#polynom = value.polynom.clone()\r\n            this.#power = value.power.clone()\r\n\r\n            if(power !== undefined){\r\n                this.#power.multiply(new Fraction(power))\r\n            }\r\n        } else if(value !== undefined) {\r\n            this.#polynom = new Polynom(value)\r\n            this.#power = new Fraction(power ?? 1)\r\n        }else{\r\n            this.#polynom = new Polynom()\r\n            this.#power = new Fraction(1)\r\n        }\r\n\r\n        this.#displayMode = FACTOR_DISPLAY.POWER\r\n\r\n        return this\r\n    }\r\n\r\n    public parse(/*value: InputValue<Factor>*/): Factor {\r\n        throw new Error(\"Method not implemented.\")\r\n    }\r\n\r\n    public clone(): Factor {\r\n        return new Factor(this)\r\n    }\r\n\r\n    public fromPolynom(polynom: InputValue<Polynom>): this {\r\n        this.#polynom = new Polynom(polynom)\r\n        this.#power = new Fraction(1)\r\n        return this\r\n    }\r\n    public get tex(): string {\r\n        const num = this.power.numerator\r\n        const den = this.power.denominator\r\n\r\n        let base: string\r\n        let power: string\r\n\r\n        if (this.#displayMode === FACTOR_DISPLAY.ROOT && den > 1) {\r\n            base = `\\\\sqrt${den === 2 ? '' : `[ ${den} ]`}{ ${this.polynom.tex} }`\r\n            power = num === 1 ? '' : `^{ ${num} }`\r\n        } else {\r\n            base = this.#singleMode && this.power.isOne() ? this.polynom.tex : wrapParenthesis(this.polynom.tex)\r\n            power = (den === 1 && num === 1) ? '' : `^{ ${this.power.tex} }`\r\n        }\r\n\r\n        // Add the power if it's not 1 or -1\r\n        base = `${base}${power}`\r\n\r\n        // If the power is negative, make it as a fraction.\r\n        if (this.#displayMode === FACTOR_DISPLAY.ROOT && num < 0) {\r\n            base = `\\\\frac{ 1 }{ ${base} }`\r\n        }\r\n\r\n\r\n        return base\r\n    }\r\n\r\n    public get display(): string {\r\n        const num = this.power.numerator\r\n        const den = this.power.denominator\r\n\r\n        let base: string\r\n        let power: string\r\n\r\n        if (this.#displayMode === FACTOR_DISPLAY.ROOT && den > 1) {\r\n            base = `${den === 2 ? 'sqrt' : `root(${den})`}(${this.polynom.display})`\r\n            power = num === 1 ? '' : `^(${num})`\r\n        } else {\r\n            base = this.#singleMode && this.power.isOne() ? this.polynom.display : wrapParenthesis(this.polynom.display, false)\r\n            power = (den === 1 && num === 1) ? '' : `^(${this.power.display})`\r\n        }\r\n\r\n        // Add the power if it's not 1 or -1\r\n        base = `${base}${power}`\r\n\r\n        // If the power is negative, make it as a fraction.\r\n        if (this.#displayMode === FACTOR_DISPLAY.ROOT && num < 0) {\r\n            base = `1/(${base})`\r\n        }\r\n\r\n\r\n        return base\r\n    }\r\n\r\n    public add(): Factor {\r\n        throw new Error(\"Adding two factors is not possible\")\r\n    }\r\n\r\n    public get asSingle(): this {\r\n        this.#singleMode = true\r\n        return this\r\n    }\r\n\r\n    public degree(letter?: string): Fraction {\r\n        return this.polynom.degree(letter).multiply(this.power)\r\n    }\r\n\r\n    public derivative(): Factor[] {\r\n        // The power is zero, the derivative is zero\r\n        if (this.power.isZero()) {\r\n            return [new Factor('0')]\r\n        }\r\n\r\n        // The power is one, the derivative is the derivative of the polynom\r\n        if (this.power.isOne()) {\r\n            return [new Factor(this.polynom.clone().derivative())]\r\n        }\r\n\r\n        // In any other case, the derivative consist of three Factors:\r\n        // the derivative of the polynom, the power and the polynom\r\n        return [\r\n            new Factor(this.power.clone()),\r\n            new Factor(this.polynom.clone().derivative()),\r\n            new Factor(this.polynom.clone(), this.power.clone().subtract(1))\r\n        ]\r\n    }\r\n\r\n    public develop(): Polynom {\r\n        if (this.power.isNatural()) {\r\n            return this.polynom.clone().pow(this.power.value)\r\n        }\r\n\r\n        throw new Error(\"The power must be a natural number\")\r\n    }\r\n\r\n    public divide(value: InputAlgebra<Factor | Polynom>): this {\r\n        if (value instanceof Factor) {\r\n            if (this.isSameAs(value)) {\r\n                this.power.subtract(value.power)\r\n                return this\r\n            }\r\n        }\r\n\r\n\r\n        const P = new Polynom(value as Polynom)\r\n        if (this.isSameAs(P)) {\r\n            this.power.subtract(1)\r\n            return this\r\n        }\r\n\r\n        throw new Error(\"The two factors must be the same\")\r\n    }\r\n\r\n    public evaluate(values: InputValue<Fraction> | literalType<number | Fraction>, asNumeric?: boolean): number | Fraction {\r\n        if (asNumeric) {\r\n            return (this.polynom.evaluate(values, true) as number) ** this.power.value\r\n        }\r\n\r\n\r\n        return (this.polynom.evaluate(values) as Fraction).pow(this.power)\r\n    }\r\n\r\n    public hasVariable(letter: string): boolean {\r\n        return this.polynom.hasVariable(letter)\r\n    }\r\n\r\n    public inverse(): this {\r\n        this.power.opposite()\r\n        return this\r\n    }\r\n\r\n    public isEqual(value: Factor): boolean {\r\n        // Must have the same polynom and the same reduce power\r\n\r\n        return this.isSameAs(value) &&\r\n            this.power.isEqual(value.power)\r\n    }\r\n\r\n    public isOne(): boolean {\r\n        return this.polynom.isOne() || this.power.isZero()\r\n    }\r\n\r\n    public isSameAs(value: InputAlgebra<Factor | Polynom>) {\r\n        let P: Polynom\r\n        if (value instanceof Factor) {\r\n            P = value.polynom\r\n        } else if (value instanceof Polynom) {\r\n            P = value\r\n        } else {\r\n            P = new Polynom(value)\r\n        }\r\n\r\n\r\n        return this.polynom.isEqual(P)\r\n    }\r\n\r\n    public isZero(): boolean {\r\n        return this.polynom.isZero()\r\n    }\r\n\r\n    public multiply(value: InputAlgebra<Factor | Polynom>): this {\r\n        if (value instanceof Factor) {\r\n            if (this.isSameAs(value)) {\r\n                this.power.add(value.power)\r\n                return this\r\n            }\r\n        }\r\n\r\n\r\n        const P = new Polynom(value as Polynom)\r\n        if (this.isSameAs(P)) {\r\n            this.power.add(1)\r\n            return this\r\n        }\r\n\r\n        throw new Error(\"The two factors must be the same\")\r\n    }\r\n\r\n    public one(): this {\r\n        this.#polynom.one()\r\n        this.#power.one()\r\n        return this\r\n    }\r\n\r\n    public opposite(): Factor {\r\n        throw new Error(\"Method not implemented.\")\r\n    }\r\n\r\n    public get polynom(): Polynom {\r\n        return this.#polynom\r\n    }\r\n\r\n    public set polynom(value: Polynom) {\r\n        this.#polynom = value\r\n    }\r\n\r\n    public pow(value: number | Fraction): this {\r\n        this.power.multiply(value)\r\n        return this\r\n    }\r\n\r\n    public get power(): Fraction {\r\n        return this.#power\r\n    }\r\n\r\n    public set power(value: InputValue<Fraction>) {\r\n        this.#power = new Fraction(value)\r\n    }\r\n\r\n    public primitive(): Factor {\r\n        throw new Error(\"Method not implemented.\")\r\n    }\r\n\r\n    public reduce(): Factor {\r\n        throw new Error(\"Method not implemented.\")\r\n    }\r\n\r\n    public root(value: number): this {\r\n        this.power.divide(value)\r\n        return this\r\n    }\r\n\r\n    public sqrt(): this {\r\n        return this.root(2)\r\n    }\r\n\r\n    public subtract(): Factor {\r\n        throw new Error(\"Subtracting two factors is not possible\")\r\n    }\r\n\r\n    public tableOfSigns(): TABLE_OF_SIGNS {\r\n        const pow = this.power.clone().reduce()\r\n        const tos = this.polynom.tableOfSigns()\r\n\r\n        // The zero roots becomes defence (d) if the power is negative\r\n        if (pow.isStrictlyNegative()) {\r\n            tos.signs = replace_in_array(tos.signs, 'z', 'd')\r\n        }\r\n\r\n        // The - sign becomes\r\n        // + (plus) if the power num is even and the power den is odd\r\n        // i (invalid) if the power denominator is even\r\n        if (pow.denominator % 2 === 0) {\r\n            // it's an even roots : no negative values!\r\n            tos.signs = replace_in_array(tos.signs, '-', 'h')\r\n        } else if (pow.numerator % 2 === 0) {\r\n            // it's an even power :  negative values becomes positive !\r\n            tos.signs = replace_in_array(tos.signs, '-', '+')\r\n        }\r\n\r\n\r\n        return {roots: tos.roots, signs: tos.signs}\r\n    }\r\n\r\n    public get variables(): string[] {\r\n        return this.polynom.variables\r\n    }\r\n\r\n    public get withPower(): this {\r\n        this.#displayMode = FACTOR_DISPLAY.POWER\r\n        return this\r\n    }\r\n\r\n    public get withRoot(): this {\r\n        this.#displayMode = FACTOR_DISPLAY.ROOT\r\n        return this\r\n    }\r\n\r\n    public zero(): this {\r\n        this.#polynom.zero()\r\n        this.#power.one()\r\n        return this\r\n    }\r\n\r\n}\r\n\r\nexport enum FACTOR_DISPLAY {\r\n    ROOT,\r\n    POWER\r\n}\r\n\r\n","import type {IAlgebra, IEquation, InputValue, IPiMathObject, ISolution, literalType} from \"../pimath.interface\"\r\nimport {Fraction} from \"../coefficients\"\r\nimport {Equation} from \"./equation\"\r\nimport {Monom} from \"./monom\"\r\nimport {Polynom} from \"./polynom\"\r\n\r\nexport class LinearSystem implements IPiMathObject<LinearSystem>,\r\n    IEquation<LinearSystem>,\r\n    IAlgebra<LinearSystem> {\r\n\r\n    #equations: Equation[]\r\n\r\n    // Determine the letters in the linear system, usually ['x', 'y']\r\n    #variables: string[]\r\n\r\n    constructor(...values: (string | Equation)[]) {\r\n        this.#equations = []\r\n        this.#variables = []\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    public parse = (...equations: (string | Equation)[]): this => {\r\n        // make the original equations\r\n        this.#equations = equations.map(value => new Equation(value))\r\n\r\n        // get the letters.\r\n        this.#findLetters()\r\n        return this\r\n    }\r\n\r\n    public clone = (): LinearSystem => {\r\n        return new LinearSystem()\r\n            .parse(...this.#equations.map(equ => equ.clone()))\r\n    }\r\n\r\n    public static fromMatrix(\r\n        matrix: InputValue<Fraction>[][],\r\n        letters = 'xyz'): LinearSystem {\r\n        // Check that each row has the same number of columns\r\n        const cols = matrix[0].length\r\n        if (matrix.some(row => row.length !== cols)) {\r\n            throw new Error(\"All rows must have the same number of columns\")\r\n        }\r\n\r\n        // Determine the default letters. The number of letters are cols-1\r\n        const vars = letters.split('')\r\n            .splice(0, cols - 1)\r\n\r\n        // Create a new LinearSystem\r\n        return new LinearSystem(\r\n            ...matrix.map(row => {\r\n                const P = new Polynom(vars.join(''), ...row)\r\n                return new Equation(P, 0)\r\n            })\r\n        )\r\n\r\n    }\r\n\r\n    public add(value: InputValue<LinearSystem | Equation | Polynom>, index?: number): this {\r\n        if (value instanceof LinearSystem) {\r\n            const length = value.equations.length\r\n            if (length !== this.#equations.length) {\r\n                throw new Error(\"The number of equations must be the same\")\r\n            }\r\n\r\n            for (let i = 0; i < length; i++) {\r\n                this.#equations[i].add(value.equations[i])\r\n            }\r\n        } else {\r\n            if (index === undefined || index < 0 || index >= this.#equations.length) {\r\n                throw new Error(\"Index out of range\")\r\n            }\r\n            const equ = new Equation(value)\r\n            this.#equations[index].add(equ)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    public buildTex = (equations: Equation[], operators?: (string[])[]): string => {\r\n        let equStr: string[]\r\n        let m: Monom\r\n        let letters: string[] = []\r\n        const equArray: string[] = []\r\n\r\n        // Get the letters from the linear system\r\n        for (const equ of equations) {\r\n            letters = letters.concat(equ.letters())\r\n        }\r\n\r\n        letters = [...new Set(letters)]\r\n        letters.sort()\r\n\r\n        for (let i = 0; i < equations.length; i++) {\r\n            const equ = equations[i]\r\n\r\n            equStr = []\r\n            for (const L of letters) {\r\n                m = equ.left.monomByLetter(L)\r\n\r\n                if (equStr.length === 0) {\r\n                    equStr.push(m.isZero() ? '' : m.tex)\r\n                } else {\r\n                    equStr.push(m.isZero() ? '' : ((m.coefficient.sign() === 1) ? '+' : '') + m.tex)\r\n                }\r\n            }\r\n\r\n            // Add the equal sign\r\n            equStr.push('=')\r\n\r\n            // Add the right hand part of the equation (should be only a number, because it has been reordered)\r\n            equStr.push(equ.right.tex)\r\n\r\n            // Add the operations if existing\r\n            if (operators?.[i] !== undefined) {\r\n                // add extra space at the end of the equation\r\n                equStr[equStr.length - 1] = equStr[equStr.length - 1] + ' \\\\phantom{\\\\quad}'\r\n                for (const o of operators[i]) {\r\n                    equStr.push(`\\\\ \\\\cdot\\\\ ${o.startsWith('-') ? \"\\\\left(\" + o + \"\\\\right)\" : o}`)\r\n                }\r\n            }\r\n\r\n            // Add to the list.\r\n            equArray.push(equStr.join('&'))\r\n        }\r\n\r\n        let operatorsColumns = 0\r\n        if (operators !== undefined && operators.length > 0) {\r\n            operatorsColumns = operators[0].length\r\n        }\r\n\r\n        return `\\\\left\\\\{\\\\begin{array}{${\"r\".repeat(letters.length)}cl ${\"|l\".repeat(operatorsColumns)}}${equArray.join('\\\\\\\\ ')}\\\\end{array}\\\\right.`\r\n    }\r\n\r\n    public degree(letter?: string): Fraction {\r\n        return Fraction.max(...this.#equations.map(equ => equ.degree(letter)))\r\n    }\r\n\r\n    get display() {\r\n        // TODO : LinearSystem - display: implement the display of the linear system\r\n        return this.tex + 'as display'\r\n    }\r\n\r\n    // ------------------------------------------\r\n    public get equations(): Equation[] {\r\n        return this.#equations\r\n    }\r\n\r\n    public set equations(value) {\r\n        this.#equations = value\r\n    }\r\n\r\n    public evaluate(values: InputValue<Fraction> | literalType<number | Fraction>, asNumeric?: boolean): number | Fraction {\r\n        throw new Error(\"Method not implemented.\")\r\n    }\r\n\r\n    public hasVariable(letter: string): boolean {\r\n        return this.#variables.includes(letter)\r\n    }\r\n\r\n    public isEqual(value: LinearSystem): boolean {\r\n        return this.equations.every((equ, index) => equ.isEqual(value.equations[index]))\r\n    }\r\n\r\n    public get isSolvable(): boolean {\r\n        const V = this.variables\r\n\r\n        // TODO: in some case, it is possible to resolve systems if there isn't the isSame number of vars and equations\r\n        if (V.length !== this.#equations.length) {\r\n            return false\r\n        }\r\n\r\n        //TODO: Must check if two equations isn't a linear combination of the others ?\r\n\r\n        return true\r\n    }\r\n\r\n    public get matrix(): [Fraction[][], Fraction[]] {\r\n        //TODO: use Matrix class\r\n        return this.#makeMatrix()\r\n    }\r\n\r\n    public mergeEquations = (eq1: Equation, eq2: Equation, factor1: Fraction, factor2: Fraction): Equation => {\r\n        // Set and clone the equations.\r\n\r\n        const eq1multiplied = eq1.clone().multiply(new Fraction(factor1)),\r\n            eq2multiplied = eq2.clone().multiply(new Fraction(factor2))\r\n\r\n        // Add both equations together.\r\n        eq1multiplied.left.add(eq2multiplied.left)\r\n        eq1multiplied.right.add(eq2multiplied.right)\r\n\r\n        return eq1multiplied\r\n    }\r\n\r\n    public multiply(value: InputValue<Fraction> | InputValue<Fraction>[], index?: number): this {\r\n        // Multiply the system by a number\r\n        // the value can be an array of numbers\r\n        // the value can be a number and the index of the equation to multiply\r\n        if (Array.isArray(value)) {\r\n            if (value.length !== this.#equations.length) {\r\n                throw new Error(\"The number of values must be the same as the number of equations\")\r\n            }\r\n\r\n            for (let i = 0; i < value.length; i++) {\r\n                this.#equations[i].multiply(value[i])\r\n            }\r\n            return this\r\n        }\r\n\r\n        if (index === undefined || index < 0 || index >= this.#equations.length) {\r\n            throw new Error(\"Index out of range\")\r\n        }\r\n\r\n        this.#equations[index].multiply(value)\r\n\r\n        return this\r\n    }\r\n\r\n    public reduce(): LinearSystem {\r\n        throw new Error(\"Method not implemented.\")\r\n    }\r\n\r\n    // ------------------------------------------\r\n    public reorder = (): this => {\r\n        for (const E of this.#equations) {\r\n            E.reorder()\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    solve(): ISolution[] {\r\n        return []\r\n    }\r\n\r\n    public solveMatrix = (): Fraction[] => {\r\n        const [matrix, vector] = this.matrix\r\n        // Solve the matrix\r\n\r\n        // console.log(matrix.map(row=>row.map(x=>x.display)))\r\n        // console.log(vector.map(x=>x.display))\r\n\r\n        // Make the augmented matrix (matrix + vector)\r\n        const augmentedMatrix: Fraction[][] = matrix.map((row, index) => [...row, vector[index]])\r\n\r\n        // Reduce the matrix\r\n        for (let i = 0; i < matrix.length; i++) {\r\n            // Find the pivot (the first non-zero element in the row)\r\n            let pivot = augmentedMatrix[i][i].clone()\r\n            if (pivot.isZero()) {\r\n                // throw new Error('Divide by zero !')\r\n                // Search a line below that would add it.\r\n                const row_to_add = augmentedMatrix\r\n                    .find((row, index) => {\r\n                        return index > i && !row[i].isZero()\r\n                    })\r\n\r\n                if (row_to_add) {\r\n                    augmentedMatrix[i].forEach((value, index) => value.add(row_to_add[index]))\r\n                    pivot = augmentedMatrix[i][i].clone()\r\n                } else {\r\n                    throw new Error('Unsolvable...')\r\n                }\r\n\r\n\r\n            }\r\n\r\n            // Normalize the row: divide all elements by the pivot\r\n            // the pivot is now 1\r\n            augmentedMatrix[i] = augmentedMatrix[i].map(x => x.divide(pivot))\r\n\r\n            // reduce the other rows using the pivot.\r\n            for (let j = 0; j < matrix.length; j++) {\r\n                if (j === i) {\r\n                    continue\r\n                }\r\n\r\n                const factor = augmentedMatrix[j][i].clone().opposite()\r\n                for (let k = 0; k < augmentedMatrix[j].length; k++) {\r\n                    augmentedMatrix[j][k].add(augmentedMatrix[i][k].clone().multiply(factor))\r\n                }\r\n\r\n                // Check if the system is undetermined (no solution or infinite solutions)\r\n                // the j line must not be all zeros\r\n                // the last element must be zero => the system is undetermined\r\n                // the last element must not be zero => the system is impossible\r\n                if (augmentedMatrix[j].slice(0, augmentedMatrix[j].length - 1).every(x => x.isZero())) {\r\n                    if (augmentedMatrix[j][augmentedMatrix[j].length - 1].isZero()) {\r\n                        return [new Fraction().infinite()]\r\n                    } else {\r\n                        return []\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return augmentedMatrix.map(x => x[x.length - 1])\r\n    }\r\n\r\n    public subtract(value: InputValue<LinearSystem | Equation | Polynom>, index?: number): this {\r\n        if (value instanceof LinearSystem) {\r\n            const length = value.equations.length\r\n            if (length !== this.#equations.length) {\r\n                throw new Error(\"The number of equations must be the same\")\r\n            }\r\n\r\n            for (let i = 0; i < length; i++) {\r\n                this.#equations[i].subtract(value.equations[i])\r\n            }\r\n        } else {\r\n            if (index === undefined || index < 0 || index >= this.#equations.length) {\r\n                throw new Error(\"Index out of range\")\r\n            }\r\n            const equ = new Equation(value)\r\n            this.#equations[index].subtract(equ)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    public get tex(): string {\r\n        // Build the array of values.\r\n        // Reorder\r\n        // This clone the system :!!!\r\n        //TODO: Avoid cloning this linear system\r\n        const LS = this.clone().reorder()\r\n\r\n        return this.buildTex(LS.equations)\r\n    }\r\n\r\n    public get variables(): string[] {\r\n        return this.#variables\r\n    }\r\n\r\n    public set variables(value: string | string[]) {\r\n        const vars = (typeof value === \"string\") ? value.split('') : [...value]\r\n        vars.sort()\r\n        this.#variables = vars\r\n    }\r\n\r\n    #findLetters = (): this => {\r\n        this.#variables = this.#equations.reduce((acc: string[], equ) => {\r\n            return [...new Set([...acc, ...equ.variables])]\r\n        }, [])\r\n        //\r\n        // // Find all letters used.\r\n        // let variables = new Set<string>()\r\n        //\r\n        // for (const equ of this.#equations) {\r\n        //     variables = new Set([...variables, ...equ.variables])\r\n        // }\r\n        //\r\n        // this.#variables = [...variables]\r\n        this.#variables.sort()\r\n        return this\r\n    }\r\n\r\n    #makeMatrix = (): [Fraction[][], Fraction[]] => {\r\n        // Make the matrix\r\n        const matrix: Fraction[][] = []\r\n        const vector: Fraction[] = []\r\n\r\n        for (const E of this.#equations) {\r\n            const row: Fraction[] = []\r\n\r\n            const equ = E.clone().reorder()\r\n            for (const L of this.variables) {\r\n                const m = equ.left.monomByLetter(L)\r\n                row.push(m.coefficient)\r\n            }\r\n\r\n            // Add the \"no letter part\"\r\n            vector.push(equ.right.monoms[0].coefficient)\r\n\r\n            // Add to the matrix\r\n            matrix.push(row)\r\n        }\r\n\r\n        return [matrix, vector]\r\n    }\r\n\r\n}\r\n","/**\r\n * Polynom module contains everything necessary to handle polynoms.\r\n * @module Logicalset\r\n */\r\nimport {ShutingYard, ShutingyardMode} from \"piexpression\"\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n */\r\nexport class LogicalSet {\r\n    #rpn: { token: string, tokenType: string }[]\r\n\r\n    /**\r\n     *\r\n     * @param {string} value (optional) Default polynom to parse on class creation\r\n     */\r\n    constructor(value?: string) {\r\n        this.#rpn = []\r\n\r\n        if (value !== undefined) {\r\n            this.parse(value)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    parse = (value: string): this => {\r\n        // Parse the updated value to the shutingyard algorithm\r\n        this.#rpn = new ShutingYard(ShutingyardMode.SET)\r\n            .parse(value)\r\n            .rpn\r\n\r\n        return this\r\n    }\r\n\r\n    evaluate(values: Record<string, boolean>): boolean {\r\n        // Add missing key(s) and set them as false by default.\r\n        this.variables.forEach(key => {\r\n            if (!Object.hasOwn(values, key)) {\r\n                values[key] = false\r\n            }\r\n        })\r\n\r\n        const stack: boolean[] = []\r\n        for (const token of this.#rpn) {\r\n            console.log(token)\r\n            if (token.tokenType === 'variable') {\r\n                stack.push(values[token.token])\r\n            } else if (token.tokenType === 'operation') {\r\n                if (token.token === '!') {\r\n                    // need only one item from stack\r\n                    if (stack.length >= 1) {\r\n                        const a = stack.pop()\r\n                        stack.push(!a)\r\n                    } else {\r\n                        return false\r\n                    }\r\n                } else {\r\n                    // All other operations needs two items from stack\r\n                    const a = stack.pop()\r\n                    const b = stack.pop()\r\n                    if (a !== undefined && b !== undefined) {\r\n                        switch (token.token) {\r\n                            case \"&\":\r\n                                stack.push(a && b)\r\n                                break\r\n                            case \"|\":\r\n                                stack.push(a || b)\r\n                                break\r\n                            case \"-\":\r\n                                return false\r\n                        }\r\n\r\n                    } else {\r\n                        return false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return stack.length === 1 && stack[0]\r\n    }\r\n\r\n    get rpn(): { token: string, tokenType: string }[] {\r\n        return this.#rpn\r\n    }\r\n\r\n    get tex(): string {\r\n        const varStack: { token: string, tokenType: string }[] = []\r\n\r\n        for (const token of this.#rpn) {\r\n            if (token.tokenType === 'variable') {\r\n                varStack.push(token)\r\n            } else {\r\n                switch (token.token) {\r\n                    case '&':\r\n                        if (varStack.length >= 2) {\r\n                            const second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if (second && first) {\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\cap ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                        }\r\n                        break\r\n                    case '|':\r\n                        if (varStack.length >= 2) {\r\n                            const second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if (second && first) {\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\cup ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                        }\r\n                        break\r\n                    case '-':\r\n                        if (varStack.length >= 2) {\r\n                            const second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if (second && first) {\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\setminus ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                        }\r\n                        break\r\n                    case '!':\r\n                        if (varStack.length >= 1) {\r\n                            const first = varStack.pop()\r\n\r\n                            if (first) {\r\n                                varStack.push({token: `\\\\overline{ ${first.token} }`, tokenType: 'variable'})\r\n                            }\r\n                        }\r\n                        break\r\n                }\r\n            }\r\n        }\r\n\r\n        return varStack[0].token\r\n    }\r\n\r\n    get variables(): string[] {\r\n        return this.#rpn\r\n            .filter(value => value.tokenType === 'variable')\r\n            .map(value => value.token)\r\n    }\r\n\r\n    vennAB(): string[] {\r\n        return this.#evaluateAsVenn({\r\n                A: ['A', 'AB'],\r\n                B: ['B', 'AB']\r\n            },\r\n            ['A', 'B', 'AB', 'E']\r\n        )\r\n    }\r\n\r\n    vennABC(): string[] {\r\n        return this.#evaluateAsVenn({\r\n                A: ['A', 'AB', 'AC', 'ABC'],\r\n                B: ['B', 'AB', 'BC', 'ABC'],\r\n                C: ['C', 'AC', 'BC', 'ABC']\r\n            },\r\n            ['A', 'B', 'C', 'AB', 'AC', 'BC', 'ABC', 'E']\r\n        )\r\n    }\r\n\r\n    #evaluateAsVenn(tokenSets: Record<string, string[] | undefined>, reference?: string[]): string[] {\r\n        const varStack: (Set<string>)[] = []\r\n\r\n        let referenceSet: Set<string>\r\n        if (reference === undefined) {\r\n            referenceSet = new Set()\r\n            for (const key in tokenSets) {\r\n                referenceSet = new Set([\r\n                    ...referenceSet,\r\n                    ...(tokenSets[key] ?? [])\r\n                ])\r\n            }\r\n        } else {\r\n            referenceSet = new Set(reference)\r\n        }\r\n\r\n        for (const token of this.#rpn) {\r\n            if (token.tokenType === 'variable') {\r\n                // The variable has no token - assume it's empty.\r\n                if (tokenSets[token.token] === undefined) {\r\n                    varStack.push(new Set())\r\n                } else {\r\n                    varStack.push(new Set(tokenSets[token.token]))\r\n                }\r\n\r\n            } else {\r\n                switch (token.token) {\r\n                    case '&':\r\n                        if (varStack.length >= 2) {\r\n                            const second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if (first && second) {\r\n                                varStack.push(new Set([...first].filter(x => second.has(x))))\r\n                            }\r\n                        }\r\n                        break\r\n                    case '|':\r\n                        if (varStack.length >= 2) {\r\n                            const second = varStack.pop(),\r\n                                first = varStack.pop()\r\n                            if (first && second) {\r\n                                varStack.push(new Set([...first, ...second]))\r\n                            }\r\n                        }\r\n                        break\r\n                    case '-':\r\n                        if (varStack.length >= 2) {\r\n                            const second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if (first && second) {\r\n                                varStack.push(new Set([...first].filter(x => !second.has(x))))\r\n                            }\r\n                        }\r\n                        break\r\n                    case '!':\r\n                        if (varStack.length >= 1) {\r\n                            const first = varStack.pop()\r\n\r\n                            if (first) {\r\n                                varStack.push(new Set([...referenceSet].filter(x => !first.has(x))))\r\n                            }\r\n                        }\r\n                        break\r\n                }\r\n            }\r\n        }\r\n\r\n        return [...varStack[0]].sort()\r\n    }\r\n}","import type {\r\n    FACTOR_TABLE_OF_SIGNS,\r\n    IAlgebra,\r\n    IExpression,\r\n    InputAlgebra,\r\n    InputValue,\r\n    IPiMathObject,\r\n    ISolution,\r\n    literalType,\r\n    POLYFACTOR_TABLE_OF_SIGNS,\r\n    TABLE_OF_SIGNS_VALUES\r\n} from \"../pimath.interface\"\r\nimport {Fraction} from \"../coefficients\"\r\nimport {Factor, FACTOR_DISPLAY} from \"./factor\"\r\nimport {Polynom} from \"./polynom\"\r\n\r\n\r\n// PolyFactor is a class that represents a polynomial in factored form.\r\nexport class PolyFactor implements IPiMathObject<PolyFactor>,\r\n    IExpression<PolyFactor>,\r\n    IAlgebra<PolyFactor> {\r\n\r\n    #displayMode: FACTOR_DISPLAY = FACTOR_DISPLAY.POWER\r\n    #factors: Factor[] = []\r\n\r\n    constructor(...values: (Factor | PolyFactor)[]) {\r\n        this.parse(...values)\r\n        return this\r\n    }\r\n\r\n    public parse(...values: (Factor | PolyFactor)[]): this {\r\n        // Init the factors list\r\n        this.#factors = []\r\n\r\n        // Nothing to create\r\n        if (values.length === 0) {\r\n            return this\r\n        }\r\n\r\n        values.forEach(value => {\r\n            if (value instanceof PolyFactor) {\r\n                this.#factors.push(...value.factors.map(f => f.clone()))\r\n            } else {\r\n                this.#factors.push(new Factor(value))\r\n            }\r\n        })\r\n\r\n        return this\r\n    }\r\n\r\n    public clone(): PolyFactor {\r\n        return new PolyFactor(...this.#factors.map(f => f.clone()))\r\n    }\r\n\r\n    public get tex(): string {\r\n        const {num, den} = this.#extractNumeratorAndDenominator()\r\n\r\n        if (den.length === 0) {\r\n            if (num.length === 1) {\r\n                return num[0].asSingle.tex\r\n            }\r\n\r\n            return num.map(f => f.tex).join(\"\")\r\n        }\r\n\r\n        // There is a numerator and a denominator\r\n        const numTeX = num.length === 1 ? num[0].asSingle.tex : num.map(f => f.tex).join(\"\")\r\n        const denTeX = den.length === 1 ? den[0].asSingle.tex : den.map(f => f.tex).join(\"\")\r\n\r\n        return `\\\\frac{ ${numTeX} }{ ${denTeX} }`\r\n\r\n    }\r\n\r\n    public get display(): string {\r\n        const {num, den} = this.#extractNumeratorAndDenominator()\r\n\r\n        if (den.length === 0) {\r\n            if (num.length === 1) {\r\n                return num[0].asSingle.display\r\n            }\r\n\r\n            return num.map((f, index) =>\r\n                index === 0 && f.polynom.monoms.length === 1 ? f.asSingle.display : f.display\r\n            ).join(\"\")\r\n        }\r\n\r\n        // There is a numerator and a denominator\r\n        const numTeX = num.length === 1 ? num[0].asSingle.display : num.map(f => f.display).join(\"\")\r\n        const denTeX = den.length === 1 ? den[0].asSingle.display : den.map(f => f.display).join(\"\")\r\n\r\n        return `(${numTeX})/(${denTeX})`\r\n\r\n    }\r\n\r\n    static #gcdWith(PF1: PolyFactor, PF2: PolyFactor): PolyFactor {\r\n        // Get all factors of the two polynomials\r\n        // Find the common factors\r\n        const factors1 = keyFactors(PF1)\r\n\r\n        const factors2 = keyFactors(PF2)\r\n\r\n        const common = Object.keys(factors1).filter(k => Object.hasOwn(factors2, k))\r\n\r\n        // Find the minimum power of the common factors\r\n        const factors = common.map(k => {\r\n            const power = factors1[k].reduce((acc, f) => acc.add(f.power), new Fraction('0'))\r\n            const power2 = factors2[k].reduce((acc, f) => acc.add(f.power), new Fraction('0'))\r\n            return new Factor(k, Fraction.min(power, power2))\r\n        })\r\n\r\n        return new PolyFactor(...factors)\r\n    }\r\n\r\n    static #lcmWith(PF1: PolyFactor, PF2: PolyFactor): PolyFactor {\r\n\r\n        const factors1 = keyFactors(PF1)\r\n\r\n        const factors2 = keyFactors(PF2)\r\n\r\n        const common = [...new Set([...Object.keys(factors1), ...Object.keys(factors2)])]\r\n\r\n        // Find the maximum power of the common factors\r\n        const factors = common.map(k => {\r\n            const power =\r\n                Object.hasOwn(factors1, k) ?\r\n                    factors1[k].reduce((acc, f) => acc.add(f.power), new Fraction('0')) :\r\n                    new Fraction(0)\r\n            const power2 = Object.hasOwn(factors2, k) ?\r\n                factors2[k].reduce((acc, f) => acc.add(f.power), new Fraction('0')) :\r\n                new Fraction(0)\r\n            return new Factor(k, Fraction.max(power, power2))\r\n        })\r\n\r\n        return new PolyFactor(...factors)\r\n    }\r\n\r\n    public static gcd(...values: PolyFactor[]): PolyFactor {\r\n        if (values.length === 0) {\r\n            return new PolyFactor().one()\r\n        }\r\n        if (values.length === 1) {\r\n            return values[0]\r\n        }\r\n        if (values.length === 2) {\r\n            return PolyFactor.#gcdWith(values[0], values[1])\r\n        }\r\n\r\n        // values is not undefined,\r\n        let PF = values[0]\r\n        values.shift()\r\n        values.forEach(value => PF = PolyFactor.#gcdWith(PF, value))\r\n\r\n        return PF\r\n    }\r\n\r\n    public static lcm(...values: PolyFactor[]): PolyFactor {\r\n        if (values.length === 0) {\r\n            return new PolyFactor().one()\r\n        }\r\n        if (values.length === 1) {\r\n            return values[0]\r\n        }\r\n\r\n        let PF = values[0]\r\n        values.shift()\r\n        values.forEach(value => PF = PolyFactor.#lcmWith(PF, value))\r\n        return PF\r\n    }\r\n\r\n    public add(...values: PolyFactor[]): this {\r\n        // Adding two (or more) polyfactors:\r\n        // if both are numerators only, use the common polynom\r\n        // if there are denominators, multiply every polyfactors to match the lcm polyfactor.\r\n\r\n        const numerators: PolyFactor[] = [this.numerator, ...values.map(x => x.numerator)]\r\n        const denominators: PolyFactor[] = [this.denominator, ...values.map(x => x.denominator)]\r\n\r\n        let denominator: PolyFactor | undefined\r\n        if (denominators.some(d => d.factors.length > 0)) {\r\n            // At least one of the denominators is not empty.\r\n            const lcm = PolyFactor.lcm(...denominators)\r\n\r\n            // Multiply each numerators by the complementary.\r\n            numerators.forEach((n, index) => {\r\n                n.multiply(lcm.clone().divide(denominators[index]))\r\n            })\r\n\r\n            // Set the common denominator to the lcm PolyFctor\r\n            denominator = lcm\r\n        }\r\n\r\n        // Now, every polyfactor should have a common denominator. Just add the numerators.\r\n        const gcd = PolyFactor.gcd(...numerators)\r\n        const remainingPolynom = new Polynom(0)\r\n            .add(...numerators.map(pf => {\r\n                    return pf\r\n                        .divide(gcd).reduce()\r\n                        .develop() // should be a polyfactor with one factor, with a power of 1\r\n                        .factors[0]\r\n                        .polynom\r\n                })\r\n            ).reduce()\r\n\r\n        this.#factors = [\r\n            ...gcd.factors,\r\n            new Factor(remainingPolynom)\r\n        ]\r\n\r\n        if (denominator) {\r\n            this.divide(denominator)\r\n        }\r\n\r\n        // Remove all factors with a power of zero\r\n        this.#factors = this.#factors.filter(x => !x.power.isZero())\r\n\r\n        return this\r\n    }\r\n\r\n    get asPower(): this {\r\n        this.#displayMode = FACTOR_DISPLAY.POWER\r\n        return this\r\n    }\r\n\r\n    get asRoot(): this {\r\n        this.#displayMode = FACTOR_DISPLAY.ROOT\r\n        return this\r\n    }\r\n\r\n    public degree(letter?: string): Fraction {\r\n        return this.#factors.reduce((acc, f) => acc.add(f.degree(letter)), new Fraction('0'))\r\n    }\r\n\r\n    get denominator(): PolyFactor {\r\n        return new PolyFactor(...this.#factors\r\n            .filter(f => f.power.isNegative())\r\n            .map(f => f.clone().inverse())\r\n        )\r\n    }\r\n\r\n    public derivative(): this {\r\n        // (fgh)' = f'gh+fg'h+fgh'\r\n        // dPF = [f'gh, fg'h, fgh']\r\n        const dPF: PolyFactor[] = []\r\n\r\n        const length = this.#factors.length\r\n\r\n        for (let i = 0; i < length; i++) {\r\n            // unchanged factors\r\n            const factors = this.#factors.slice()\r\n            // derivative factor\r\n            const derivativeFactor = factors.splice(i, 1)[0].derivative()\r\n            // Add the product of factors\r\n            dPF.push(\r\n                new PolyFactor(...factors, ...derivativeFactor))\r\n        }\r\n\r\n        // Reduce the polyFactors\r\n        dPF.forEach(pf => pf.reduce())\r\n\r\n        const first = dPF.shift()\r\n        if (first !== undefined) {\r\n            this.#factors = first.factors\r\n        }\r\n\r\n        // Add each factors together.\r\n        return this.add(...dPF)\r\n    }\r\n\r\n    public develop(): PolyFactor {\r\n        // Develop each factor and multiply them\r\n        const N = new Polynom('1')\r\n        const D = new Polynom('1')\r\n\r\n        this.numerator.factors.forEach(f => {\r\n            N.multiply(f.develop())\r\n        })\r\n        this.denominator.factors.forEach(f => {\r\n            D.multiply(f.develop())\r\n        })\r\n\r\n        return new PolyFactor().fromPolynom(N, D)\r\n    }\r\n\r\n    public divide(value: PolyFactor): this {\r\n        this.#factors = this.#factors.concat(value.clone().factors.map(f => f.inverse()))\r\n        return this\r\n    }\r\n\r\n    public evaluate(values: InputValue<Fraction> | literalType<number | Fraction>, asNumeric?: boolean): number | Fraction {\r\n        if (asNumeric) {\r\n            return this.#factors\r\n                .reduce((acc, f) => acc * (f.evaluate(values, asNumeric) as number), 1)\r\n        }\r\n\r\n        return this.#factors\r\n            .reduce((acc, f) => acc.multiply(f.evaluate(values)), new Fraction('1'))\r\n    }\r\n\r\n    public factorize(letter?: string): PolyFactor {\r\n        // Go through each factors.\r\n        // If it can be factorized, remove the factor (set its power to zero) and insert the new factors instead.\r\n        const newFactors: Factor[] = []\r\n\r\n        this.#factors.forEach(factor => {\r\n            const factors = factor.polynom.factorize(letter)\r\n            if (factors.length > 1) {\r\n                const pow = factor.power.clone()\r\n                newFactors.push(...factors.map(x => new Factor(x, pow)))\r\n            } else {\r\n                newFactors.push(factor.clone())\r\n            }\r\n        })\r\n\r\n        const result = new PolyFactor(...newFactors)\r\n        const numerator = result.numerator.reduce()\r\n        const denominator = result.denominator.reduce()\r\n\r\n        return numerator.divide(denominator)\r\n    }\r\n\r\n    public get factors(): Factor[] {\r\n        return this.#factors\r\n    }\r\n\r\n    public set factors(value: Factor[]) {\r\n        this.#factors = value\r\n    }\r\n\r\n    public fromPolynom(numerator: InputAlgebra<Polynom>, denominator?: InputAlgebra<Polynom>): this {\r\n        // fromPolynom loads the numerator and denominator as is, without factorizing !\r\n        this.#factors = [new Factor(new Polynom(numerator))]\r\n\r\n        if (denominator) {\r\n            const polynom = new Polynom(denominator)\r\n\r\n            if (polynom.isOne()) {\r\n                return this\r\n            }\r\n            if (polynom.isZero()) {\r\n                throw new Error(\"Cannot divide by zero\")\r\n            }\r\n            this.#factors.push(new Factor(polynom, -1))\r\n        }\r\n        // // Find all factors from a polynom\r\n        // this.#factors = new Polynom(numerator)\r\n        //     .factorize(letter)\r\n        //     .map(value => new Factor(value))\r\n        //\r\n        // if (denominator) {\r\n        //     new Polynom(denominator)\r\n        //         .factorize(letter)\r\n        //         .forEach(value => this.#factors.push(new Factor(value, -1)))\r\n        // }\r\n\r\n        return this\r\n    }\r\n\r\n    public getZeroes(): ISolution[] {\r\n        // Calculate the list of roots (ordered, unique)\r\n        const roots: ISolution[] = ([] as ISolution[])\r\n            .concat(...this.#factors.map(x => x.polynom.getZeroes()))\r\n        // .concat(...tos.map(x => x.roots))\r\n\r\n        // Sort the values.\r\n        roots.sort((a, b) => a.value - b.value)\r\n        // Remove duplicates.\r\n        return roots\r\n            .filter((value, index, self) =>\r\n                    index === self.findIndex((t) =>\r\n                        t.value === value.value\r\n                    )\r\n            )\r\n    }\r\n\r\n    public hasVariable(letter: string): boolean {\r\n        return this.#factors.some(f => f.hasVariable(letter))\r\n    }\r\n\r\n    public inverse(): this {\r\n        this.#factors = this.#factors.map(f => f.inverse())\r\n        return this\r\n    }\r\n\r\n    public isEqual(value: PolyFactor): boolean {\r\n        const gcd = PolyFactor.gcd(this, value)\r\n\r\n        const PF1 = this.clone().divide(gcd).reduce()\r\n        const PF2 = value.clone().divide(gcd).reduce()\r\n\r\n        return PF1.isOne() && PF2.isOne()\r\n    }\r\n\r\n    public isOne(): boolean {\r\n        return this.#factors.every(f => f.isOne())\r\n    }\r\n\r\n    public isZero(): boolean {\r\n        return this.#factors.every(f => f.isZero())\r\n    }\r\n\r\n    public multiply(...values: PolyFactor[]): this {\r\n        values.forEach(value => {\r\n            this.#factors = this.#factors.concat(value.clone().factors)\r\n        })\r\n\r\n        return this\r\n    }\r\n\r\n    get numerator(): PolyFactor {\r\n        return new PolyFactor(...this.#factors.filter(f => f.power.isPositive()))\r\n    }\r\n\r\n    public one(): this {\r\n        this.#factors = [new Factor('1', '1')]\r\n        return this\r\n    }\r\n\r\n    public opposite(): this {\r\n        // Add the -1 factor or remove if it exists\r\n        const index = this.#factors.findIndex(f => f.display === '(-1)')\r\n\r\n        if (index >= 0) {\r\n            this.#factors.splice(index, 1)\r\n        } else {\r\n            this.#factors.push(new Factor('-1', '1'))\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    public pow(value: number | Fraction): this {\r\n        this.#factors = this.#factors.map(f => f.pow(value))\r\n        return this\r\n    }\r\n\r\n    public primitive(): PolyFactor {\r\n        throw new Error(\"Method not implemented.\")\r\n    }\r\n\r\n    public reduce(): this {\r\n        // Regroup the factors by their base\r\n        const factors = keyFactors(this)\r\n\r\n        // Multiply the factors of the same base\r\n        this.#factors = Object.values(factors)\r\n            .map(f => {\r\n                const base = f[0].polynom\r\n                const power = f.reduce((acc, f) => acc.add(f.power), new Fraction('0'))\r\n                return new Factor(base, power.reduce())\r\n            })\r\n            .filter(f => !f.power.isZero())\r\n\r\n        return this\r\n    }\r\n\r\n    public root(value: number): this {\r\n        this.#factors = this.#factors.map(f => f.root(value))\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Reoarder the factors using :\r\n     * 1. number of monoms\r\n     * 2. degree of polynom\r\n     * 3. power of polyfactor\r\n     */\r\n    public sort(letter?: string): this {\r\n        this.#factors.sort((a, b) => {\r\n            // If the compare powers are opposite, the negative power goes to the end.\r\n            const aPower = a.power.value\r\n            const bPower = b.power.value\r\n            if (aPower * bPower < 0) {\r\n                return -aPower\r\n            }\r\n\r\n\r\n            // Monom length\r\n            const aLength = a.polynom.monoms.length\r\n            const bLength = b.polynom.monoms.length\r\n            if (aLength !== bLength) {\r\n                return aLength - bLength\r\n            }\r\n\r\n            // The monom length are the same, check the polynom degree.\r\n            const aDegree = a.polynom.degree(letter).value\r\n            const bDegree = b.polynom.degree(letter).value\r\n            if (aDegree !== bDegree) {\r\n                return aDegree - bDegree\r\n            }\r\n\r\n            // The power of the PolyFactor\r\n            if (aPower !== bPower) {\r\n                return aPower - bPower\r\n            }\r\n\r\n            return a.degree().isLeq(b.degree()) ? -1 : 1\r\n        })\r\n\r\n        return this\r\n    }\r\n\r\n    public sqrt(): this {\r\n        this.#factors = this.#factors.map(f => f.sqrt())\r\n        return this\r\n    }\r\n\r\n    public subtract(...values: PolyFactor[]): this {\r\n        return this.add(...values.map(f => f.opposite()))\r\n    }\r\n\r\n    public tableOfSigns(): POLYFACTOR_TABLE_OF_SIGNS {\r\n        // Calculate the table of signs for each factor\r\n        const roots = this.getZeroes()\r\n        const roots_key = roots.map(x => x.value)\r\n\r\n        // Get the table of signs of every factors\r\n\r\n\r\n        // These signs are NOT aligned\r\n        const factors: FACTOR_TABLE_OF_SIGNS[] = this.factorize().factors\r\n            .map(factor => {\r\n                return {factor: new Factor(factor), ...factor.tableOfSigns()}\r\n            })\r\n\r\n        // Build the table of signs with extra roots for each factors.\r\n        factors.forEach(item => {\r\n            // Create the new signs row\r\n            const empty_signs: TABLE_OF_SIGNS_VALUES[] = new Array(2 * roots.length + 1).fill('') as unknown as TABLE_OF_SIGNS_VALUES[]\r\n\r\n            let sign = item.signs.shift() as unknown as TABLE_OF_SIGNS_VALUES\r\n            let root = item.roots.shift()\r\n\r\n            const aligned_signs = empty_signs.map((_sign, index) => {\r\n                if (index % 2 === 0) {\r\n                    return sign\r\n                }\r\n\r\n                // The sign for this indexed root is a t(ab)\r\n                if (root === undefined || root.value !== roots_key[(index - 1) / 2]) {\r\n                    return 't'\r\n                }\r\n\r\n                // The indexed root is the new root\r\n                const rootSign = item.signs.shift() as unknown as TABLE_OF_SIGNS_VALUES\r\n\r\n                // Make the new signs.\r\n                sign = item.signs.shift() as unknown as TABLE_OF_SIGNS_VALUES\r\n                root = item.roots.shift()\r\n                return rootSign\r\n            })\r\n\r\n            // Set the roots for this item to all roots\r\n            item.roots = roots\r\n            item.signs = aligned_signs\r\n        })\r\n\r\n        // Build the table of signs with extra roots : reault line\r\n        const signs: TABLE_OF_SIGNS_VALUES[] = factors\r\n            .map((item) => [...item.signs])\r\n            .reduce<TABLE_OF_SIGNS_VALUES[]>((a, b) => {\r\n                if (a.length === 0) {\r\n                    return b\r\n                }\r\n\r\n                // a and b are \"not aligned\"\r\n                b.forEach((value, index) => {\r\n                    // Case of a zero, invalid or tab value\r\n                    // tab < zero < defence\r\n                    switch (value) {\r\n                        case \"d\":\r\n                            a[index] = \"d\"\r\n                            break\r\n                        case \"z\":\r\n                            a[index] = a[index] === \"d\" ? \"d\" : \"z\"\r\n                            break\r\n                        case \"h\":\r\n                            a[index] = \"h\"\r\n                            break\r\n                        case \"-\":\r\n                            a[index] = a[index] === \"h\" ? \"h\" : a[index] === \"-\" ? \"+\" : \"-\"\r\n                            break\r\n                    }\r\n                })\r\n\r\n                return a\r\n            }, [])\r\n\r\n        return {signs, roots, factors}\r\n    }\r\n\r\n    public get variables(): string[] {\r\n        return this.#factors\r\n            .reduce((acc: string[], f: Factor) => acc.concat(f.variables), [])\r\n    }\r\n\r\n    public zero(): this {\r\n        this.#factors = [new Factor('0', '1')]\r\n        return this\r\n    }\r\n\r\n    #extractNumeratorAndDenominator() {\r\n        let num: Factor[],\r\n            den: Factor[] = []\r\n\r\n        if (this.#displayMode === FACTOR_DISPLAY.ROOT) {\r\n            // the power are positive integers\r\n            num = this.numerator.factors\r\n            den = this.denominator.factors\r\n        } else {\r\n            num = this.#factors\r\n        }\r\n\r\n        // There is no factor\r\n        if (num.length === 0) {\r\n            num = [new Factor('1')]\r\n        }\r\n        return {num, den}\r\n    }\r\n\r\n}\r\n\r\nfunction keyFactors(value: PolyFactor): Record<string, Factor[]> {\r\n    const k_numerator = new Fraction().one()\r\n    const k_denominator = new Fraction().one()\r\n\r\n    const kF = value.factors\r\n        .reduce((acc: Record<string, Factor[]>, f) => {\r\n            // It's only a value\r\n            if (f.polynom.degree().isZero()) {\r\n                if (f.power.isPositive()) {\r\n                    k_numerator.multiply(f.polynom.monoms[0].coefficient)\r\n                } else {\r\n                    k_denominator.multiply(f.polynom.monoms[0].coefficient)\r\n                }\r\n\r\n                return acc\r\n            }\r\n\r\n            // It's a polynom\r\n            const base = f.polynom.display\r\n            if (Object.hasOwn(acc, base)) {\r\n                acc[base].push(f)\r\n            } else {\r\n                acc[base] = [f]\r\n            }\r\n\r\n            return acc\r\n        }, {})\r\n\r\n\r\n    const {numerator, denominator} = k_numerator.divide(k_denominator).reduce()\r\n    if(numerator!==1){\r\n        kF[numerator.toString()] = [new Factor(numerator, 1)]\r\n    }\r\n    if(denominator!==1){\r\n        kF[denominator.toString()] = [new Factor(denominator, -1)]\r\n    }\r\n\r\n    return kF\r\n}\r\n","import type {IExpressionMultiply, InputAlgebra, InputValue, IPiMathObject} from \"../pimath.interface\"\r\nimport {Polynom} from \"./polynom\"\r\nimport type {Vector} from \"../geometry\"\r\nimport {operation_pow} from \"./operations\"\r\n\r\nexport type IMatrixValues = InputAlgebra<Polynom>[][]\r\n\r\nexport class Matrix implements IPiMathObject<Matrix>,\r\n    IExpressionMultiply<Matrix> {\r\n    #matrix_parenthesis = true\r\n    #values: Polynom[][] = []\r\n\r\n    constructor(rowCount?: number, colCount?: number) {\r\n        if (rowCount) {\r\n            colCount = colCount ?? rowCount\r\n            this.fromDimensions(rowCount, colCount)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    public parse(values: IMatrixValues): this {\r\n        return this.fromValues(values)\r\n\r\n        return this\r\n    }\r\n\r\n    public clone(): Matrix {\r\n        // Copy the matrix.\r\n        const duplicates: IMatrixValues = []\r\n\r\n        this.#values.forEach(row => {\r\n            const dup_row: Polynom[] = []\r\n            row.forEach(value => {\r\n                dup_row.push(value.clone())\r\n            })\r\n\r\n            duplicates.push(dup_row)\r\n        })\r\n\r\n        return new Matrix().fromValues(duplicates)\r\n    }\r\n\r\n    get tex(): string {\r\n        if (this.#values.length === 0) {\r\n            return \"\"\r\n        }\r\n\r\n        const wrapper = this.#matrix_parenthesis ? 'pmatrix' : 'bmatrix'\r\n\r\n\r\n        return [\r\n            `\\\\begin{${wrapper}}`,\r\n            ...this.rows.map(row => '\\t' + row.map(p => p.display).join(' & ') + '\\\\\\\\'),\r\n            `\\\\end{${wrapper}}`\r\n        ].join('\\n')\r\n    }\r\n\r\n    get display(): string {\r\n        if (this.#values.length === 0) {\r\n            return \"\"\r\n        }\r\n\r\n        const wrapper = this.#matrix_parenthesis ? ['(', ')'] : ['[', ']']\r\n\r\n        return wrapper[0] +\r\n            this.map(aij => aij.display)\r\n                .map(row => `(${row.join(',')})`)\r\n                .join(',') +\r\n            wrapper[1]\r\n    }\r\n\r\n    public add(value: Matrix): this {\r\n        if (!this.canBeAdded(value)) {\r\n            throw new Error(\"Cannot add a matrix with different dimensions.\")\r\n        }\r\n        this.forEach((aij, i, j) => {\r\n            aij.add(value.values[i][j])\r\n        })\r\n\r\n        return this\r\n    }\r\n\r\n    get bmatrix(): this {\r\n        this.#matrix_parenthesis = false\r\n        return this\r\n    }\r\n\r\n    public canBeAdded(matrix: Matrix): boolean {\r\n        const {rows, cols} = this.dimension\r\n        const {rows: rows2, cols: cols2} = matrix.dimension\r\n\r\n        return rows === rows2 && cols === cols2\r\n    }\r\n\r\n    public canBeMultiplied(matrix: Matrix): boolean {\r\n        return this.dimension.cols === matrix.dimension.rows\r\n    }\r\n\r\n    public characteristic_polynom(letter?: string): Polynom {\r\n        letter ??= 'k'\r\n\r\n        return this.clone().subtract(\r\n            new Matrix(this.dimension.rows).one().multiply(new Polynom(letter))\r\n        ).determinant()\r\n    }\r\n\r\n    public cofactor(row: number, column: number): Polynom {\r\n        // Remove a line.\r\n        const coMatrix = this.clone()\r\n\r\n        coMatrix.values.splice(row, 1)\r\n\r\n        // Remove a column\r\n        coMatrix.values.forEach(row => {\r\n            row.splice(column, 1)\r\n        })\r\n\r\n        return coMatrix.determinant().multiply((-1) ** (row + column))\r\n    }\r\n\r\n    get cols(): Polynom[][] {\r\n        // Return the rows of the transposed matrix !\r\n        const arr = Array.from({length: this.dimension.cols}, () => {\r\n            return Array.from({length: this.dimension.rows}, () => new Polynom())\r\n        })\r\n\r\n        this.forEach((aij, i, j) => {\r\n            arr[j][i] = aij\r\n        })\r\n\r\n        return arr\r\n    }\r\n\r\n    public determinant(): Polynom {\r\n        if (!this.isSquare()) {\r\n            throw new Error('Matrix is not square')\r\n        }\r\n\r\n        // Use the first line.\r\n        // For each value, create the cofactor matrix -> get the determinant\r\n        const det = new Polynom()\r\n\r\n        // It's a 1x1 matrix\r\n        if (this.#values.length === 1) {\r\n            return this.#values[0][0].clone()\r\n        }\r\n\r\n        // It's a matrix greater than 1x1\r\n        this.values[0].forEach((aij, column) => {\r\n            const C = this.cofactor(0, column)\r\n            det.add(aij.clone().multiply(C))\r\n        })\r\n\r\n        return det\r\n    }\r\n\r\n    get dimension(): { rows: number, cols: number } {\r\n        return {\r\n            rows: this.#values.length,\r\n            cols: this.#values[0].length,\r\n        }\r\n    }\r\n\r\n    public flat(): Polynom[] {\r\n        return this.#values.flat()\r\n    }\r\n\r\n    public forEach(callback: (aij: Polynom, row: number, column: number) => void): void {\r\n        this.#values.forEach((row, i) => {\r\n            row.forEach((aij, j) => {\r\n                callback(aij, i, j)\r\n            })\r\n        })\r\n    }\r\n\r\n    public fromDimensions(rows: number, cols: number): this {\r\n        this.#values = Array.from({length: rows}, () => {\r\n            return Array.from({length: cols}, () => new Polynom())\r\n        }) as unknown as Polynom[][]\r\n\r\n        return this\r\n    }\r\n\r\n    public fromString(value: string): this {\r\n        // value = ((a,b),(c,d),(e,f))\r\n        if (value.startsWith('((') && value.endsWith(\"))\")) {\r\n            return this.fromString(value.substring(1, value.length - 1))\r\n        }\r\n\r\n        // value = (a,b),(c,d),(e,f)\r\n        const arr = value.split('),(')\r\n\r\n        this.#values = arr\r\n            .map((row, index) => {\r\n                // (a,b or c,d or e,f)\r\n                if (index === 0) {\r\n                    return row.substring(1).split(',')\r\n                } else if (index === arr.length - 1) {\r\n                    return row.substring(0, row.length - 1).split(',')\r\n                }\r\n\r\n                return row.split(',')\r\n            })\r\n            .map(rowItems =>\r\n                rowItems.map(item => new Polynom(item))\r\n            )\r\n\r\n        return this\r\n    }\r\n\r\n    public fromValues(values: IMatrixValues): this {\r\n        this.#values = []\r\n\r\n        // Check dimensions of each rows.\r\n        const L = values[0].length\r\n        if (values.some(row => row.length !== L)) {\r\n            throw new Error(\"Each line must be the same length\")\r\n        }\r\n\r\n        values.forEach(row => {\r\n            const dup_row: Polynom[] = []\r\n            row.forEach(value => {\r\n                dup_row.push(new Polynom(value))\r\n            })\r\n\r\n            this.#values.push(dup_row)\r\n        })\r\n\r\n        return this\r\n    }\r\n\r\n    public fromVectors(...vectors: Vector[]): this {\r\n\r\n        this.#values = []\r\n\r\n        // Each vectors must be the same dimension\r\n        const L = vectors[0].dimension\r\n        if (vectors.some(v => v.dimension !== L)) {\r\n            throw new Error(\"Each vectors must be the same dimension\")\r\n        }\r\n\r\n        this.fromDimensions(vectors[0].dimension, vectors.length)\r\n\r\n        vectors.forEach((vector, column) => {\r\n            vector.array.forEach((value, row) => {\r\n                this.#values[row][column] = new Polynom(value)\r\n            })\r\n        })\r\n\r\n        return this\r\n    }\r\n\r\n    public isEqual(value: Matrix): boolean {\r\n        // Two matrix are equals if they are the same dimension and all aij are equals.\r\n        if (!this.canBeAdded(value)) {\r\n            return false\r\n        }\r\n\r\n        let aij_are_equals = true\r\n        this.forEach((aij, row, column) => {\r\n            aij_are_equals &&= aij.isEqual(value.values[row][column])\r\n        })\r\n\r\n        return aij_are_equals\r\n    }\r\n\r\n    public isOne(): boolean {\r\n        for (let row = 0; row < this.#values.length; row++) {\r\n            for (let col = 0; col < this.#values[row].length; col++) {\r\n                if (col === row && !this.#values[row][col].isOne()) {\r\n                    return false\r\n                }\r\n                if (col !== row && !this.#values[row][col].isZero()) {\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    public isSquare(): boolean {\r\n        return this.dimension.cols === this.dimension.rows\r\n    }\r\n\r\n    public isZero(): boolean {\r\n        return this.flat().every(v => v.isZero())\r\n    }\r\n\r\n    public map<T>(callback: (aij: Polynom, row: number, column: number) => T): T[][] {\r\n        const {rows, cols} = this.dimension\r\n\r\n        const arr = Array.from({length: rows}, () => {\r\n            return Array.from({length: cols}, () => undefined as T)\r\n        })\r\n\r\n        this.#values.forEach((row, i) => {\r\n            row.forEach((aij, j) => {\r\n                arr[i][j] = callback(aij, i, j)\r\n            })\r\n        })\r\n\r\n        return arr\r\n    }\r\n\r\n    public multiply(value: InputValue<Polynom> | Matrix): this {\r\n        if (value instanceof Matrix) {\r\n            if (!this.canBeMultiplied(value)) {\r\n                throw new Error(`Cannot multiply a matrix with incompatibles dimensions: ${this.cols.length} -> ${value.rows.length} `)\r\n            }\r\n\r\n            // Multiply two matrix\r\n            const result = new Matrix(this.dimension.rows, value.dimension.cols)\r\n            result.forEach((_, i, j) => {\r\n                // Multiply this.rows[i] by this.cols[j]\r\n                const row = this.rows[i]\r\n                const col = value.cols[j]\r\n\r\n                const v = new Polynom()\r\n\r\n                row.forEach((left, k) => {\r\n                    v.add(left.clone().multiply(col[k]))\r\n                })\r\n\r\n                result.setValue(i, j, v)\r\n            })\r\n\r\n            this.#values = result.values\r\n            return this\r\n        }\r\n\r\n        // Scalar multiplication\r\n        this.forEach((aij) => {\r\n            aij.multiply(value)\r\n        })\r\n\r\n        return this\r\n    }\r\n\r\n    public one(): this {\r\n        this.forEach((aij, row, column) => {\r\n            if (row === column) {\r\n                aij.one()\r\n            } else {\r\n                aij.zero()\r\n            }\r\n        })\r\n        return this\r\n    }\r\n\r\n    public opposite(): this {\r\n        this.forEach((aij) => {\r\n            aij.opposite()\r\n        })\r\n        return this\r\n    }\r\n\r\n    get pmatrix(): this {\r\n        this.#matrix_parenthesis = true\r\n        return this\r\n    }\r\n\r\n    public pow(value: number): this {\r\n        return operation_pow(this as Matrix, value) as this\r\n    }\r\n\r\n    public reduce(): Matrix {\r\n        throw new Error('Not yet implemented')\r\n    }\r\n\r\n    get rows(): Polynom[][] {\r\n        return this.#values\r\n    }\r\n\r\n    public setValue(row: number, column: number, value: InputAlgebra<Polynom>): this {\r\n        const {rows, cols} = this.dimension\r\n        if ((row < 0 || row >= rows) ||\r\n            column < 0 || column >= cols) {\r\n            throw new Error(`${row}x${column} is out of range (${rows}x${cols})`)\r\n        }\r\n\r\n        this.#values[row][column] = new Polynom(value)\r\n        return this\r\n    }\r\n\r\n    public subtract(value: Matrix): this {\r\n        if (!this.canBeAdded(value)) {\r\n            throw new Error(\"Cannot subtract a matrix with different dimensions.\")\r\n        }\r\n\r\n        this.forEach((aij, i, j) => {\r\n            aij.subtract(value.values[i][j])\r\n        })\r\n\r\n        return this\r\n    }\r\n\r\n    get values(): Polynom[][] {\r\n        return this.#values\r\n    }\r\n\r\n    public zero(): this {\r\n        this.forEach(aij => aij.zero())\r\n        return this\r\n    }\r\n}","import { Fraction } from \"../coefficients\"\r\nimport type { Vector } from \"./vector\"\r\n\r\ntype V = Vector\r\nexport function areVectorsEquals(v1: V, v2: V): boolean {\r\n    return v1.dimension === v2.dimension &&\r\n        v1.array.every(\r\n            (value, index) => {\r\n                return v2.array[index].isEqual(value)\r\n            })\r\n}\r\n\r\nexport function areVectorsColinears(v1: V, v2: V): boolean {\r\n    if (v1.dimension !== v2.dimension) { return false }\r\n\r\n    // Constant of proportionality\r\n    const k = v2.array[0].value / v1.array[0].value\r\n    return v1.array.every(\r\n        (value, index) => {\r\n            return v2.array[index].value === value.value * k\r\n        })\r\n}\r\n\r\n\r\nexport function dotProduct(v1: V, v2: V): Fraction {\r\n    if (v1.dimension !== v2.dimension) { return new Fraction().invalid() }\r\n\r\n    // Calculate the dot product\r\n    // Why does the reduce not add the last element?\r\n\r\n    return v1.array.reduce(\r\n        (acc, value, index) => {\r\n            return acc.add(value.clone().multiply(v2.array[index]))\r\n        }, new Fraction(0))\r\n}\r\n\r\nexport function determinantFromVectors(...values: V[]): Fraction {\r\n    // TODO: Make it work for vectors of dimension n\r\n    // Check if the vectors are in the same dimension\r\n    if (values.some((value) => value.dimension !== values[0].dimension)) {\r\n        throw new Error('All vectors must have the same dimension')\r\n    }\r\n\r\n    // Check if the vectors are in dimension 2 or 3 and that the number of values is correct\r\n    if (values[0].dimension !== values.length ) {\r\n        throw new Error(`The determinant of dimension ${values[0].dimension} must have the same number of vectors (${values.length} given)`)\r\n    }\r\n\r\n    // Calculate the determinant 2x2\r\n    if (values[0].dimension === 2) {\r\n        return values[0].array[0].clone().multiply(values[1].array[1])\r\n            .subtract(values[0].array[1].clone().multiply(values[1].array[0]))\r\n    }\r\n\r\n    // Calculate the determinant 3x3\r\n    return values[0].array[0].clone()\r\n        .multiply(\r\n            values[1].array[1].clone().multiply(values[2].array[2])\r\n                .subtract(values[1].array[2].clone().multiply(values[2].array[1]))\r\n        )\r\n        .subtract(values[0].array[1].clone()\r\n            .multiply(\r\n                values[1].array[0].clone().multiply(values[2].array[2])\r\n                    .subtract(values[1].array[2].clone().multiply(values[2].array[0]))\r\n            )\r\n        )\r\n        .add(values[0].array[2].clone()\r\n            .multiply(values[1].array[0].clone().multiply(values[2].array[1])\r\n                .subtract(values[1].array[1].clone().multiply(values[2].array[0]))))\r\n}\r\n","/**\r\n * Vector2D module contains everything necessary to handle 2d vectors.\r\n * @module Vector\r\n */\r\nimport type { InputValue, IPiMathObject } from \"../pimath.interface\"\r\nimport { Fraction } from \"../coefficients/fraction\"\r\nimport { Numeric } from \"../numeric\"\r\nimport { areVectorsColinears, areVectorsEquals, dotProduct } from \"./geomMath\"\r\n\r\nexport class Vector implements\r\n    IPiMathObject<Vector> {\r\n    #array: Fraction[] = []\r\n    #asPoint = false\r\n\r\n    constructor(...values: Vector[] | InputValue<Fraction>[]) {\r\n        if (values.length > 0) {\r\n            this.parse(...values)\r\n        }\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get array(): Fraction[] {\r\n        return this.#array\r\n    }\r\n\r\n    set array(value: Fraction[]) {\r\n        this.#array = value\r\n    }\r\n\r\n    get x(): Fraction {\r\n        return this.#array[0]\r\n    }\r\n\r\n    set x(value: Fraction | number | string) {\r\n        this.#array[0] = new Fraction(value)\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this.#array[1]\r\n    }\r\n\r\n    set y(value: Fraction | number | string) {\r\n        this.#array[1] = new Fraction(value)\r\n    }\r\n\r\n    get z(): Fraction {\r\n        if (this.dimension < 3) { throw new Error('Vector is not 3D') }\r\n        return this.#array[2]\r\n    }\r\n\r\n    set z(value: Fraction | number | string) {\r\n        if (this.dimension < 3) { throw new Error('Vector is not 3D') }\r\n        this.#array[2] = new Fraction(value)\r\n    }\r\n\r\n    get asPoint(): boolean {\r\n        return this.#asPoint\r\n    }\r\n\r\n    set asPoint(value: boolean) {\r\n        this.#asPoint = value\r\n    }\r\n\r\n\r\n    get normSquare(): Fraction {\r\n        // Get the norm square of the vector\r\n        return this.array.reduce((acc, x) => acc.add(x.clone().pow(2)), new Fraction(0))\r\n    }\r\n\r\n    get norm(): number {\r\n        return Math.sqrt(this.normSquare.value)\r\n    }\r\n\r\n    get tex(): string {\r\n        if (this.#asPoint) {\r\n            return `\\\\left(${this.array.map(x => x.tex).join(';')}\\\\right)`\r\n        }\r\n\r\n        return `\\\\begin{pmatrix} ${this.array.map(x => x.tex).join(' \\\\\\\\ ')} \\\\end{pmatrix}`\r\n    }\r\n\r\n    get display(): string {\r\n        if (this.#asPoint) {\r\n            return `(${this.array.map(x => x.display).join(';')})`\r\n        }\r\n\r\n        return `((${this.array.map(x => x.display).join(',')}))`\r\n    }\r\n\r\n    setDimension(value = 2): this{\r\n        if (value < 2) {\r\n            throw new Error('Dimension must be at least 2')\r\n        }\r\n\r\n        if (value < this.dimension) {\r\n            this.#array = this.#array.slice(0, value)\r\n        } else if(value > this.dimension) {\r\n            for(let i = this.dimension; i < value; i++) {\r\n                this.#array.push(new Fraction(0))\r\n            }\r\n        }\r\n\r\n        return this\r\n    }\r\n    get dimension(): number {\r\n        return this.array.length\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    get isNull(): boolean {\r\n        return this.array.every(x => x.isZero())\r\n    }\r\n\r\n    static asTex(...values: string[]): string {\r\n        return `\\\\begin{pmatrix} ${values.join(' \\\\\\\\ ')} \\\\end{pmatrix}`\r\n    }\r\n    static asDisplay(...values: string[]): string {\r\n        return `((${values.join(',')}))`\r\n    }\r\n\r\n    public defineAsPoint(value?: boolean): this {\r\n        this.#asPoint = value !== false\r\n        return this\r\n    }\r\n    public parse(...values: Vector[] | InputValue<Fraction>[]): this {\r\n        if (values.length === 0) {\r\n            throw new Error(`Invalid value`)\r\n        }\r\n\r\n        if (values.length === 1) {\r\n            if (values[0] instanceof Vector) {\r\n                return values[0].clone() as this\r\n            } else if (typeof values[0] === 'string') {\r\n                return this.fromString(values[0])\r\n            } else {\r\n                throw new Error(`Invalid value`)\r\n            }\r\n        }\r\n\r\n        // Two values are given\r\n        if (values.length === 2) {\r\n            const [A, B] = values\r\n\r\n            // The two values are vectors\r\n            if (A instanceof Vector && B instanceof Vector) {\r\n                if (A.dimension !== B.dimension) { throw new Error('Vectors must have the same dimension') }\r\n\r\n                this.#array = B.array.map((x, index) => x.clone().subtract(A.array[index]))\r\n                return this\r\n            }\r\n        }\r\n\r\n        // Two ore more values as number, string, fraction...\r\n        this.#array = values.map(x => new Fraction(x as InputValue<Fraction>))\r\n\r\n        return this\r\n    }\r\n\r\n    public clone(): Vector {\r\n        const V = new Vector()\r\n        V.array = this.copy()\r\n        V.asPoint = this.asPoint\r\n        return V\r\n    }\r\n\r\n    public copy(): Fraction[] {\r\n        return this.#array.map(x => x.clone())\r\n    }\r\n\r\n    zero = (): this => {\r\n        this.#array.forEach(x => x.zero())\r\n        return this\r\n    }\r\n\r\n    one = (): this => {\r\n        this.zero()\r\n        this.x.one()\r\n        return this\r\n    }\r\n\r\n    opposite = (): this => {\r\n        this.#array.forEach(x => x.opposite())\r\n        return this\r\n    }\r\n\r\n    add = (V: Vector): this => {\r\n        this.#array.forEach((x, index) => x.add(V.array[index]))\r\n        return this\r\n    }\r\n\r\n    subtract = (V: Vector): this => {\r\n        return this.add(V.clone().opposite())\r\n    }\r\n\r\n    unit = (): this => {\r\n        const norm = this.norm\r\n        if (norm === 0) {\r\n            return this\r\n        }\r\n\r\n        return this.divideByScalar(norm)\r\n    }\r\n\r\n    middleOf(V1: Vector, V2: Vector): this {\r\n        if (V1.dimension !== V2.dimension) { throw new Error('Vectors must be the same dimension') }\r\n\r\n        this.array = []\r\n        V1.array.forEach((x, index) => {\r\n            this.array.push(x.clone().add(V2.array[index]).divide(2))\r\n        })\r\n\r\n        return this\r\n    }\r\n\r\n    translate(...values: Fraction[]): this {\r\n        this.array.forEach((x, index) => x.add(values[index]))\r\n        return this\r\n    }\r\n\r\n\r\n    dot = (V: Vector): Fraction => {\r\n        return dotProduct(this, V)\r\n    }\r\n\r\n    cross(value: Vector): Vector {\r\n        if (this.dimension !== 3 || value.dimension !== 3) {\r\n            throw new Error('Cross product can only be determined in 3D')\r\n        }\r\n\r\n        return new Vector(\r\n            this.y.clone().multiply(value.z).subtract(this.z.clone().multiply(value.y)),\r\n            this.z.clone().multiply(value.x).subtract(this.x.clone().multiply(value.z)),\r\n            this.x.clone().multiply(value.y).subtract(this.y.clone().multiply(value.x))\r\n        )\r\n    }\r\n\r\n    normal = (): this => {\r\n        if (this.dimension >= 3) { throw new Error('Normal vector can only be determined in 2D') }\r\n\r\n        const x = this.x.clone().opposite(),\r\n            y = this.y.clone()\r\n        this.#array[0] = y\r\n        this.#array[1] = x\r\n        return this\r\n    }\r\n\r\n    isZero(): boolean {\r\n        return this.array.every(x => x.isZero())\r\n    }\r\n    isOne(): boolean {\r\n        return this.array.every((x, index) => index === 0 ? x.isOne() : x.isZero())\r\n    }\r\n\r\n    isEqual = (v: Vector): boolean => {\r\n        return areVectorsEquals(this, v)\r\n    }\r\n\r\n    isColinearTo = (v: Vector): boolean => {\r\n        return areVectorsColinears(this, v)\r\n    }\r\n\r\n    isNormalTo = (v: Vector): boolean => {\r\n        return this.dot(v).isZero()\r\n    }\r\n\r\n    multiplyByScalar = (k: InputValue<Fraction>): this => {\r\n        const scalar = new Fraction(k)\r\n        this.array.forEach(x => x.multiply(scalar))\r\n        return this\r\n    }\r\n\r\n    divideByScalar = (k: InputValue<Fraction>): this => {\r\n        return this.multiplyByScalar(new Fraction(k).inverse())\r\n    }\r\n\r\n    simplify = (): this => {\r\n        // Multiply by the lcm of denominators.\r\n        return this\r\n            .multiplyByScalar(\r\n                Numeric.lcm(...this.array.map(x => x.denominator))\r\n            )\r\n            .divideByScalar(\r\n                Numeric.gcd(...this.array.map(x => x.numerator))\r\n            ).\r\n            multiplyByScalar(\r\n                this.x.isNegative() ? -1 : 1\r\n            )\r\n    }\r\n\r\n    angle = (V: Vector, sharp?: boolean, radian?: boolean): number => {\r\n\r\n        let scalar = this.dot(V).value\r\n        if (sharp) {\r\n            scalar = Math.abs(scalar)\r\n        }\r\n\r\n        const toDegree = radian ? 1 : 180 / Math.PI\r\n\r\n        return toDegree * Math.acos(scalar / (this.norm * V.norm))\r\n    }\r\n\r\n\r\n    fromString = (value: string): this => {\r\n        // Remove the first letter if it's a parenthesis.\r\n        if (value.startsWith('(')) {\r\n            value = value.substring(1)\r\n        }\r\n\r\n        // Remove the last letter if it's a parenthesis.\r\n        if (value.endsWith(')')) {\r\n            value = value.substring(0, value.length - 1)\r\n        }\r\n\r\n        // Split comma, semi colon or single space.\r\n        const components = value.split(/[,;\\s]/g)\r\n            .filter((v) => v.trim() !== '')\r\n\r\n        // there must be at least two components.\r\n        if (components.length < 2) {\r\n            return this\r\n        }\r\n\r\n        // Validate the fraction values.\r\n        this.#array = components.map(x => new Fraction(x))\r\n        return this\r\n    }\r\n\r\n    distanceTo(item: Vector): { value: number, fraction: Fraction, tex: string } {\r\n        const V = new Vector(this, item)\r\n\r\n        return {\r\n            value: V.norm,\r\n            fraction: V.normSquare,\r\n            tex: V.tex\r\n        }\r\n    }\r\n}\r\n","import type { Fraction } from \"./coefficients\"\r\nimport type { NthRoot } from \"./coefficients\"\r\nimport type { Monom } from \"./algebra\"\r\nimport type {Factor} from \"./algebra\"\r\nimport type {Line, Point, Vector} from \"./geometry\"\r\nimport type {Equation} from \"./algebra\"\r\n\r\nexport type InputValue<T> = T | string | number | Fraction | NthRoot;\r\nexport type InputAlgebra<T> = InputValue<T> | Monom\r\nexport type literalType<T> = Record<string, T>;\r\n\r\nexport type compareSign =\r\n    '>' | \">=\" | \"=>\" | \"geq\" |\r\n    '<' | \"<=\" | \"=<\" | \"leq\" |\r\n    '=' | \"<>\" | \"neq\" | \"same\";\r\n\r\nexport type EQUATION_SIGN = \"=\" | \"<=\" | \">=\" | \"<\" | \">\"\r\n\r\nexport enum PARTICULAR_SOLUTION {\r\n    real = \"\\\\mathbb{R}\",\r\n    varnothing = \"\\\\varnothing\"\r\n}\r\n\r\nexport interface IPiMathObject<T> {\r\n    readonly tex: string\r\n    readonly display: string\r\n\r\n    clone(): T;\r\n\r\n    parse(...value: unknown[]): T;\r\n}\r\nexport interface IExpressionBase<T>{\r\n    isEqual(value: InputValue<T>): boolean;\r\n\r\n    zero(): T;\r\n\r\n    one(): T;\r\n\r\n    isZero(): boolean;\r\n\r\n    isOne(): boolean;\r\n\r\n    add(value: InputValue<T>): T;\r\n\r\n    subtract(value: InputValue<T>): T;\r\n\r\n    opposite(): T;\r\n\r\n    reduce(): T;\r\n}\r\n\r\nexport interface IExpressionMultiply<T> extends IExpressionBase<T>{\r\n    multiply(value: InputValue<T>): T;\r\n\r\n    pow(value: number): T;\r\n}\r\nexport interface IExpression<T> extends IExpressionMultiply<T>{\r\n    inverse(): T | undefined;\r\n\r\n    divide(value: InputValue<T>): T | null;\r\n\r\n    sqrt(): T | undefined;\r\n\r\n    root(value: number): T | undefined;\r\n}\r\n\r\nexport interface IEquation<T> {\r\n\r\n    reduce(): T;\r\n\r\n    solve(): ISolution[]\r\n}\r\n\r\nexport interface IAlgebra<T> {\r\n    readonly variables: string[];\r\n\r\n    hasVariable(letter: string): boolean;\r\n\r\n    degree(letter?: string): Fraction;\r\n\r\n    evaluate(values: literalType<Fraction | number> | InputValue<Fraction>, asNumeric?: boolean): Fraction | number | boolean;\r\n}\r\n\r\nexport interface IAnalyse<T> {\r\n    derivative(): T | T[];\r\n\r\n    primitive(): T;\r\n\r\n    integrate(a: InputValue<Fraction>, b: InputValue<T>, letter?: string): Fraction;\r\n}\r\n\r\nexport interface ISolution {\r\n    variable: string,\r\n    display: string,\r\n    exact: Fraction | boolean\r\n    tex: string,\r\n    value: number,\r\n}\r\n\r\nexport type TABLE_OF_SIGNS_VALUES = '-'|'+'|'h'|'z'|'t'|'d'|'u'|'n'|''\r\n\r\nexport interface TABLE_OF_SIGNS {roots: ISolution[], signs: TABLE_OF_SIGNS_VALUES[]}\r\nexport interface FACTOR_TABLE_OF_SIGNS extends TABLE_OF_SIGNS {factor: Factor}\r\nexport interface POLYFACTOR_TABLE_OF_SIGNS extends TABLE_OF_SIGNS {\r\n    factors: FACTOR_TABLE_OF_SIGNS[]\r\n}\r\n\r\nexport enum LinePropriety {\r\n    None = 'none',\r\n    Parallel = 'parallel',\r\n    Perpendicular = 'perpendicular',\r\n    Tangent = 'tangent'\r\n}\r\n\r\nexport enum Line3Propriety {\r\n    None = 'none',\r\n    Parallel = 'parallel',\r\n    Perpendicular = 'perpendicular',\r\n    Tangent = 'tangent'\r\n}\r\n\r\nexport interface Plane3Config {\r\n    point?: Point,\r\n    normal?: Vector,\r\n    directions?: Vector[],\r\n    equation?: Equation,\r\n    points?: Point[],\r\n    coefficients?: number[]\r\n}\r\n\r\n\r\nexport interface remarquableLines {\r\n    'medians': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Vector | null\r\n    },\r\n    'mediators': {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line,\r\n        'intersection': Vector | null\r\n    },\r\n    'heights': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Vector | null\r\n    },\r\n    'bisectors': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Vector | null\r\n    },\r\n    externalBisectors: {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Vector | null\r\n    }\r\n}\r\n","/**\r\n * Random helpers\r\n */\r\nimport { Numeric } from \"../numeric\"\r\n\r\n\r\n/**\r\n * Random boolean with a percent ratio\r\n * @param percent\r\n */\r\nexport function randomBool(percent = 0.5): boolean {\r\n    return Math.random() < percent\r\n}\r\n\r\n/**\r\n * Random integer between two values.\r\n * @param a (number) : From this value to the second value. If the second is ommited, this value is the max value.\r\n * @param b (number) : To this value. If this is ommited.\r\n */\r\nexport function randomInt(a: number, b?: number, exclude?: number[]): number {\r\n    if (b === undefined) {\r\n        if (a >= 0) {\r\n            return randomInt(0, a)\r\n        } else {\r\n            return randomInt(a, 0)\r\n        }\r\n    }\r\n\r\n    // Same start and end values\r\n    if (a === b) {\r\n        return a\r\n    }\r\n\r\n    // No exclusion\r\n    if (exclude === undefined) {\r\n        return Math.floor(Math.random() * (b - a + 1) + a)\r\n    }\r\n\r\n    // With exclusion\r\n    if (Math.abs(b - a) <= exclude.length) {\r\n        throw new Error('The number of excluded values is too high.')\r\n    }\r\n\r\n    let r = randomInt(a, b)\r\n    while (exclude.includes(r)) {\r\n        r = randomInt(a, b)\r\n    }\r\n    return r\r\n}\r\n\r\n/**\r\n * Random integer between -max and max value.\r\n * @param max (number) : determine the limits.\r\n * @param zero (bool) : determine if zero is allowed or not.\r\n */\r\nexport function randomIntSym(max: number, zero?: boolean): number {\r\n    if (zero === false) {\r\n        return randomBool() ? randomInt(1, max) : -randomInt(1, max)\r\n    } else {\r\n        return randomInt(-max, max)\r\n    }\r\n}\r\n\r\nexport function randomPrime(max?: number): number {\r\n    let primes = Numeric.primes()\r\n    if (max !== undefined) {\r\n        primes = primes.filter(x => x < max)\r\n    }\r\n    return randomItem(primes)\r\n}\r\n\r\nexport function randomArray<T>(arr: T[], number?: number): T[] {\r\n    if (number === undefined) {\r\n        number = 1\r\n    }\r\n\r\n    // Return a clone array\r\n    if (arr.length <= 0) {\r\n        return Object.values(arr)\r\n    }\r\n\r\n    // Randomize the array and return the n first elements.\r\n    return shuffleArray(arr).slice(0, number)\r\n}\r\n\r\nexport function randomItem<T>(arr: T[]): T {\r\n    if (arr.length === 0) { return null as T }\r\n    return arr[randomInt(0, arr.length - 1)]\r\n}\r\n\r\nexport function shuffleArray<T>(arr: T[]): T[] {\r\n    // The Fisher-Yates algorithm\r\n    const shuffleArray = Object.values(arr)\r\n    for (let i = shuffleArray.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1))\r\n        const temp = shuffleArray[i]\r\n        shuffleArray[i] = shuffleArray[j]\r\n        shuffleArray[j] = temp\r\n    }\r\n\r\n    return shuffleArray\r\n}\r\n","/**\r\n * Vector2D module contains everything necessary to handle 2d vectors.\r\n * @module Point\r\n */\r\n\r\nimport { Fraction } from \"../coefficients/fraction\"\r\nimport type { InputValue } from \"../pimath.interface\"\r\nimport { Vector } from \"./vector\"\r\n\r\nexport class Point extends Vector {\r\n\r\n    constructor()\r\n    constructor(value: Vector)\r\n    constructor(start: Vector, end: Vector)\r\n    constructor(...values: InputValue<Fraction>[])\r\n    constructor(...values: Vector[] | InputValue<Fraction>[]) {\r\n        super()\r\n\r\n        // Initialize the vector\r\n        if (values.length > 0) {\r\n            this.parse(...values)\r\n        }\r\n    };\r\n\r\n    public override parse(...values: Vector[] | InputValue<Fraction>[]): this {\r\n        this.asPoint = true\r\n\r\n        if (values.length === 1) {\r\n            if (values[0] instanceof Vector) {\r\n                this.array = values[0].copy()\r\n                return this\r\n            }\r\n\r\n            if (typeof values[0] === 'string') {\r\n                this.fromString(values[0])\r\n                return this\r\n            }\r\n        }\r\n\r\n\r\n        if (values.length > 1) {\r\n            if (values.some(x => x instanceof Vector)) {\r\n                throw new Error('Creating a point with  multiple argument requires an input fraction')\r\n            }\r\n\r\n            const nbs: Fraction[] = values.map(x => new Fraction(x as InputValue<Fraction>))\r\n\r\n            if (nbs.some(x => x.isNaN())) {\r\n                throw new Error('The value is not a valid point sting (a,b): ' + values.join(','))\r\n            }\r\n\r\n            this.array = nbs\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n\r\n    public override clone(): Point {\r\n        const V = new Point()\r\n        V.array = this.copy()\r\n        V.asPoint = true\r\n        return V\r\n    }\r\n\r\n}\r\n","/**\r\n * This class works for 2d line in a plane.\r\n */\r\n\r\nimport { Numeric } from \"../numeric\"\r\nimport { Fraction } from \"../coefficients/fraction\"\r\nimport { Equation } from \"../algebra/equation\"\r\nimport { Polynom } from \"../algebra/polynom\"\r\nimport { Monom } from \"../algebra/monom\"\r\nimport { Vector } from \"./vector\"\r\nimport {type InputValue, type IPiMathObject, LinePropriety} from \"../pimath.interface\"\r\nimport { randomIntSym } from \"../randomization/rndHelpers\"\r\nimport { Point } from \"./point\"\r\n\r\nexport interface LineConfig {\r\n    points?: Point[],\r\n    point?: Point,\r\n    direction?: Vector,\r\n    normal?: Vector\r\n}\r\n\r\nexport class Line implements IPiMathObject<Line> {\r\n    // A line is defined as the canonical form\r\n    static PERPENDICULAR = LinePropriety.Perpendicular\r\n    static PARALLEL = LinePropriety.Parallel\r\n    #reduceBeforeDisplay: boolean\r\n    // ax + by + c = 0\r\n    #a: Fraction\r\n    #b: Fraction\r\n    #c: Fraction\r\n    #OA: Vector\r\n    #d: Vector\r\n    #n: Vector\r\n\r\n    #outputMode: 'canonical' | 'equation' | 'mxh' | 'parametric' | 'system' = \"canonical\"\r\n\r\n    /**\r\n     * Value can be a mix of:\r\n     *\r\n     * @param values\r\n     */\r\n    constructor(...values: unknown[]) {\r\n        this.#a = new Fraction().zero()\r\n        this.#b = new Fraction().zero()\r\n        this.#c = new Fraction().zero()\r\n        this.#OA = new Vector()\r\n        this.#d = new Vector()\r\n        this.#n = new Vector()\r\n\r\n        this.#reduceBeforeDisplay = true\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    get a(): Fraction {\r\n        return this.#a\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n\r\n    set a(value: Fraction) {\r\n        this.#a = value\r\n    }\r\n\r\n    get b(): Fraction {\r\n        return this.#b\r\n    }\r\n\r\n    set b(value: Fraction) {\r\n        this.#b = value\r\n    }\r\n\r\n    get c(): Fraction {\r\n        return this.#c\r\n    }\r\n\r\n    set c(value: Fraction) {\r\n        this.#c = value\r\n    }\r\n\r\n    get OA(): Vector {\r\n        return this.#OA\r\n    }\r\n\r\n    set OA(value: Vector) {\r\n        this.#OA = value\r\n    }\r\n\r\n    get d(): Vector {\r\n        return this.#d\r\n    }\r\n\r\n    set d(value: Vector) {\r\n        this.#d = value\r\n    }\r\n\r\n    get n(): Vector {\r\n        return this.#n\r\n    }\r\n\r\n    // ------------------------------------------\r\n    getEquation(): Equation {\r\n        const equ = new Equation(new Polynom().parse('xy', this.#a, this.#b, this.#c), new Polynom('0'))\r\n        if (this.#reduceBeforeDisplay) {\r\n            return equ.simplify()\r\n        } else {\r\n            return equ\r\n        }\r\n    }\r\n\r\n    // get system(): { x: Equation, y: Equation } {\r\n    //     const e1 = new Equation(\r\n    //         new Polynom('x'),\r\n    //         new Polynom(this.#OA.x)\r\n    //             .add(new Monom('k').multiply(this.#d.x))\r\n    //     ),\r\n    //         e2 = new Equation(\r\n    //             new Polynom('y'),\r\n    //             new Polynom(this.#OA.y)\r\n    //                 .add(new Monom('k').multiply(this.#d.y))\r\n    //         )\r\n\r\n    //     return { x: e1, y: e2 }\r\n    // }\r\n\r\n    get canonical(): this {\r\n        this.#outputMode = 'canonical'\r\n        return this\r\n    }\r\n    get equation(): this {\r\n        this.#outputMode = 'equation'\r\n        return this\r\n    }\r\n    get mxh(): this {\r\n        this.#outputMode = 'mxh'\r\n        return this\r\n    }\r\n    get parametric(): this {\r\n        this.#outputMode = 'parametric'\r\n        return this\r\n    }\r\n    get system(): this {\r\n        this.#outputMode = 'system'\r\n        return this\r\n    }\r\n\r\n    get tex(): string {\r\n        // canonical    =>  ax + by + c = 0\r\n        // mxh          =>  y = -a/b x - c/b\r\n        // parametric   =>  (xy) = OA + k*d\r\n        // equation     => ax + by = -c\r\n        const output = this.#outputMode\r\n        this.#outputMode = 'canonical'\r\n        switch (output) {\r\n            case 'equation':\r\n                return this.getEquation().reorder().tex\r\n            case 'mxh':\r\n                return this.slope.isInfinity() ?\r\n                    'x=' + this.OA.x.tex :\r\n                    'y=' + new Polynom().parse('x', this.slope, this.height).tex\r\n            case 'parametric':\r\n            case 'system': {\r\n                const d = this.#d.clone()\r\n                if (this.#reduceBeforeDisplay) {\r\n                    d.simplify()\r\n                }\r\n\r\n                if (output === 'parametric') {\r\n                    return `${Vector.asTex('x', 'y')} = ${Vector.asTex(this.#OA.x.tex, this.#OA.y.tex)} + k\\\\cdot ${Vector.asTex(d.x.tex, d.y.tex)}`\r\n                } else {\r\n                    return `\\\\left\\\\{\\\\begin{aligned}\r\n            x &= ${(new Polynom(this.#OA.x)\r\n                            .add(new Monom(this.#d.x).multiply(new Monom('k'))))\r\n                            .reorder('k', true)\r\n                            .tex}\\\\\\\\ \r\n            y &= ${(new Polynom(this.#OA.y)\r\n                            .add(new Monom(this.#d.y).multiply(new Monom('k'))))\r\n                            .reorder('k', true)\r\n                            .tex}\r\n            \\\\end{aligned}\\\\right.`\r\n                }\r\n            }\r\n            default:\r\n                {\r\n                    const canonical = this.getEquation()\r\n                    if (this.#a.isNegative()) {\r\n                        canonical.multiply(-1)\r\n                    }\r\n                    return canonical.tex\r\n                }\r\n        }\r\n\r\n    }\r\n\r\n    get reduceBeforeDisplay(): boolean {\r\n        return this.#reduceBeforeDisplay\r\n    }\r\n\r\n    set reduceBeforeDisplay(value: boolean) {\r\n        this.#reduceBeforeDisplay = value\r\n    }\r\n\r\n    get display(): string {\r\n        // canonical    =>  ax + by + c = 0\r\n        // mxh          =>  y = -a/b x - c/b\r\n        // parametric   =>  (xy) = OA + k*d // not relevant in display mode.\r\n        const output = this.#outputMode\r\n        this.#outputMode = 'canonical'\r\n\r\n        switch (output) {\r\n            case 'equation':\r\n                return this.getEquation().reorder().display\r\n            case 'mxh':\r\n                return this.slope.isInfinity() ?\r\n                    'x=' + this.OA.x.display :\r\n                    'y=' + new Polynom().parse('x', this.slope, this.height).display\r\n            case 'parametric': {\r\n                const d = this.#d.clone()\r\n                if (this.#reduceBeforeDisplay) {\r\n                    d.simplify()\r\n                }\r\n\r\n                return `((x,y))=((${this.#OA.x.display},${this.#OA.y.display}))+k((${d.x.display},${d.y.display}))`\r\n            }\r\n            default: {\r\n                const canonical = this.getEquation()\r\n                // Make sur the first item is positive.\r\n                if (this.#a.isNegative()) {\r\n                    canonical.multiply(-1)\r\n                }\r\n                return canonical.display\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    get normal(): Vector {\r\n        return new Vector(this.#a, this.#b)\r\n    }\r\n\r\n    get director(): Vector {\r\n        return this.#d.clone()\r\n    }\r\n\r\n    get slope(): Fraction {\r\n        return this.#a.clone().opposite().divide(this.#b)\r\n    }\r\n\r\n    get height(): Fraction {\r\n        return this.#c.clone().opposite().divide(this.#b)\r\n    }\r\n\r\n    randomPoint = (k?: number): Point => {\r\n        // Return a random point on the line.\r\n        const pt = this.#d\r\n            .clone()\r\n            .multiplyByScalar(randomIntSym((k === undefined || k <= 1) ? 3 : k, false))\r\n            .add(this.#OA)\r\n\r\n        pt.asPoint = true\r\n\r\n        return pt\r\n    }\r\n\r\n    randomNearPoint = (k?: number): Point => {\r\n        const pt = this.randomPoint(k)\r\n\r\n        let maxIterationTest = 10\r\n        while (this.isOnLine(pt) && maxIterationTest > 0) {\r\n            pt.x.add(randomIntSym(1, false))\r\n            pt.y.add(randomIntSym(1, false))\r\n            maxIterationTest--\r\n\r\n        }\r\n\r\n        return pt\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse data to a line\r\n     * @param {any} values\r\n     * @returns {Line}\r\n     */\r\n    parse = (...values: unknown[]): this => {\r\n        // Nothing is given...\r\n        if (values.length === 0) {\r\n            return this\r\n        }\r\n\r\n        // One value only: already a line (clone it), an Equation, a string (as Equation)\r\n        if (values.length === 1) {\r\n            if (values[0] instanceof Line) {\r\n                // Already a Line\r\n                return this.fromCoefficient(values[0].a, values[0].b, values[0].c)\r\n            } else if (values[0] instanceof Equation) {\r\n                // It's an Equation\r\n                return this.fromEquation(values[0])\r\n            } else if (typeof values[0] === \"string\") {\r\n                // It's a string - create an Equation from it.\r\n                try {\r\n                    const E = new Equation(values[0])\r\n                    return this.parse(E)\r\n                } catch (e) {\r\n                    return this\r\n                }\r\n            }\r\n        }\r\n\r\n        // Two values are given: two vectors\r\n        if (values.length === 2 && values.every(x=>x instanceof Vector)) {\r\n            const formattedValues: Vector[] = values\r\n\r\n            if (formattedValues[0].asPoint && formattedValues[1].asPoint) {\r\n                // Two points\r\n                return this.fromPointAndDirection(formattedValues[0], new Vector(formattedValues[0], formattedValues[1]))\r\n            }\r\n\r\n            if (formattedValues[0].asPoint && !formattedValues[1].asPoint) {\r\n                // One point and one vector director\r\n                return this.fromPointAndDirection(formattedValues[0], formattedValues[1])\r\n            }\r\n\r\n        }\r\n\r\n        if (values.length === 3) {\r\n            if (values[0] instanceof Vector && values[1] instanceof Vector) {\r\n                if (values[2] === LinePropriety.Perpendicular) {\r\n                    return this.fromPointAndNormal(values[0], values[1])\r\n                } else if (values[2] === LinePropriety.Parallel) {\r\n                    return this.fromPointAndDirection(values[0], values[1])\r\n                }\r\n            }\r\n\r\n            if (values[0] instanceof Vector && values[1] instanceof Line) {\r\n                if (values[2] === LinePropriety.Parallel || values[2] === null) {\r\n                    return this.fromPointAndLine(values[0], values[1], LinePropriety.Parallel)\r\n                } else {\r\n                    return this.fromPointAndLine(values[0], values[1], LinePropriety.Perpendicular)\r\n                }\r\n            }\r\n\r\n            return this.fromCoefficient(\r\n                values[0] as InputValue<Fraction>,\r\n                values[1] as InputValue<Fraction>,\r\n                values[2] as InputValue<Fraction>\r\n            )\r\n        }\r\n\r\n        console.log('Something wrong happened while creating the line')\r\n        console.log(values)\r\n        return this\r\n    }\r\n\r\n    fromPoints(pt1: Point, pt2: Point){\r\n        return this.fromPointAndDirection(pt1, new Vector(pt1, pt2))\r\n    }\r\n    fromEquation = (equ: Equation): this => {\r\n        // Reorder the eequation\r\n        equ.reorder(true)\r\n\r\n        // It must contain either x, y or both.\r\n        const letters = new Set(equ.letters())\r\n\r\n        // No 'x', no 'y' in the equations\r\n        if (!(letters.has('x') || letters.has('y'))) {\r\n            return this\r\n        }\r\n\r\n        // Another letter in the equation ?\r\n        for (const elem of ['x', 'y']) {\r\n            if (letters.has(elem)) {\r\n                letters.delete(elem)\r\n            }\r\n        }\r\n\r\n        if (letters.size > 0) {\r\n            return this\r\n        }\r\n\r\n        // Everything should be ok now...\r\n        return this.fromCoefficient(\r\n            equ.left.monomByLetter('x').coefficient,\r\n            equ.left.monomByLetter('y').coefficient,\r\n            equ.left.monomByDegree(0).coefficient\r\n        )\r\n    }\r\n    fromCoefficient = (a: InputValue<Fraction>, b: InputValue<Fraction>, c: InputValue<Fraction>): this => {\r\n        this.#a = new Fraction(a)\r\n        this.#b = new Fraction(b)\r\n        this.#c = new Fraction(c)\r\n\r\n        this.#d = new Vector(this.#b.clone(), this.#a.clone().opposite())\r\n        this.#OA = new Vector(new Fraction().zero(), this.#c.clone())\r\n        this.#n = this.#d.clone().normal()\r\n\r\n        return this\r\n    }\r\n\r\n    fromPointAndDirection = (P: Point, d: Vector): this => {\r\n        // OX = OP + k*d\r\n        // x = px + kdx     * dy\r\n        // y = py + kdy     * dx\r\n        // ------------------\r\n        // dy * x = px * dy + kdxdy\r\n        // dx * y = py * dx + kdxdy\r\n        // ------------------\r\n        // dy * x - dx * y = px * dy - py * dx\r\n        // dy * x - dx * y - (px * dy - py * dx) = 0\r\n        this.fromCoefficient(\r\n            d.y,\r\n            d.x.clone().opposite(),\r\n            P.x.clone().multiply(d.y).subtract(P.y.clone().multiply(d.x)).opposite()\r\n        )\r\n\r\n        // Choose the current values as point and direction vector instead of the automatic version.\r\n        this.#OA = P.clone()\r\n        this.#d = d.clone()\r\n        this.#n = this.#d.clone().normal()\r\n\r\n        return this\r\n    }\r\n\r\n    fromPointAndNormal = (P: Point, n: Vector): this => {\r\n        return this.fromCoefficient(\r\n            n.x,\r\n            n.y,\r\n            P.x.clone().multiply(n.x)\r\n                .add(P.y.clone().multiply(n.y)).opposite()\r\n        )\r\n    }\r\n\r\n    fromPointAndLine = (P: Vector, L: Line, orientation?: LinePropriety): this => {\r\n\r\n        if (orientation === undefined) {\r\n            orientation = LinePropriety.Parallel\r\n        }\r\n\r\n        if (orientation === LinePropriety.Parallel) {\r\n            return this.fromPointAndNormal(P, L.normal)\r\n        } else if (orientation === LinePropriety.Perpendicular) {\r\n            return this.fromPointAndNormal(P, L.director)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    clone = (): this => {\r\n        this.#a = this.#a.clone()\r\n        this.#b = this.#b.clone()\r\n        this.#c = this.#c.clone()\r\n\r\n        this.#d = this.#d.clone()\r\n        this.#OA = this.#OA.clone()\r\n        this.#n = this.#n.clone()\r\n\r\n        return this\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    isOnLine = (pt: Vector): boolean => {\r\n        return this.#a.clone()\r\n            .multiply(pt.x)\r\n            .add(\r\n                this.#b.clone()\r\n                    .multiply(pt.y)\r\n            )\r\n            .add(this.#c)\r\n            .isZero()\r\n    }\r\n\r\n    isParallelTo = (line: Line): boolean => {\r\n        // Do they have the isSame direction ?\r\n        return this.slope.isEqual(line.slope) && this.height.isNotEqual(line.height)\r\n    }\r\n    isSameAs = (line: Line): boolean => {\r\n        return this.slope.isEqual(line.slope) && this.height.isEqual(line.height)\r\n    }\r\n    isPerpendicularTo = (line: Line): boolean => {\r\n        return this.d.isNormalTo(line.d)\r\n    }\r\n    isVertical = (): boolean => {\r\n        return this.slope.isInfinity()\r\n    }\r\n    simplify = (): this => {\r\n        const lcm = Numeric.lcm(this.#a.denominator, this.#b.denominator, this.#c.denominator),\r\n            gcd = Numeric.gcd(this.#a.numerator, this.#b.numerator, this.#c.numerator)\r\n\r\n        this.fromCoefficient(\r\n            this.#a.clone().multiply(lcm).divide(gcd),\r\n            this.#b.clone().multiply(lcm).divide(gcd),\r\n            this.#c.clone().multiply(lcm).divide(gcd),\r\n        )\r\n\r\n        return this\r\n    }\r\n\r\n    simplifyDirection = (): this => {\r\n        this.#d.simplify()\r\n        return this\r\n    }\r\n    intersection = (line: Line): { point: Point, hasIntersection: boolean, isParallel: boolean, isSame: boolean } => {\r\n        const Pt = new Point()\r\n        let isParallel = false, isSame = false\r\n\r\n        // this         => ax+by+c = 0\r\n        // line         => dx+ey+f = 0\r\n        //\r\n        //  aex + bey + ce = 0\r\n        //  dbx + bey + bf = 0\r\n        // (ae-db)x + ce-bf = 0\r\n        //\r\n        //  adx + bdy + cd = 0\r\n        //  adx + aey + af = 0\r\n        // (bd-ae)y + (cd-af)\r\n        //\r\n        // x = (bf-ce)/(ae-db)\r\n        // y = (af-cd)/(bd-ae)\r\n\r\n\r\n        // Theres is no 'y'\r\n        if (this.#b.isZero() || line.b.isZero()) {\r\n            // TODO : handle no y in the line canonical form\r\n        }\r\n\r\n        if (this.isParallelTo(line)) {\r\n            Pt.x = new Fraction().invalid()\r\n            Pt.y = new Fraction().invalid()\r\n            isParallel = true\r\n        } else if (this.isSameAs(line)) {\r\n            Pt.x = new Fraction().invalid()\r\n            Pt.y = new Fraction().invalid()\r\n            isSame = true\r\n        } else {\r\n            Pt.x = this.#b.clone().multiply(line.c).subtract(this.#c.clone().multiply(line.b))\r\n                .divide(this.#a.clone().multiply(line.b).subtract(this.#b.clone().multiply(line.a)))\r\n            Pt.y = this.#a.clone().multiply(line.c).subtract(this.#c.clone().multiply(line.a))\r\n                .divide(this.#b.clone().multiply(line.a).subtract(this.#a.clone().multiply(line.b)))\r\n        }\r\n\r\n        return {\r\n            point: Pt,\r\n            hasIntersection: !(isParallel || isSame),\r\n            isParallel,\r\n            isSame\r\n        }\r\n    }\r\n\r\n    distanceTo(pt: Point): { value: number, fraction: Fraction, tex: string } {\r\n        const numerator = pt.x.clone().multiply(this.#a)\r\n            .add(pt.y.clone().multiply(this.#b))\r\n            .add(this.#c).abs(),\r\n            d2 = this.normal.normSquare\r\n\r\n        // The denominator is null - shouldn't be possible\r\n        if (d2.isZero()) {\r\n            return {\r\n                value: NaN,\r\n                tex: 'Not a line',\r\n                fraction: new Fraction().infinite()\r\n            }\r\n        }\r\n        // The denominator is a perfect square - simplify the tex result\r\n        const value = numerator.value / Math.sqrt(d2.value),\r\n            F = numerator.clone().divide(d2.clone().sqrt())\r\n\r\n        // The denominator is a perfect square.\r\n        if (d2.isSquare()) {\r\n            return {\r\n                value,\r\n                tex: F.tex,\r\n                fraction: F\r\n            }\r\n        }\r\n        // Complete answer...\r\n        return {\r\n            value,\r\n            tex: `\\\\frac{${numerator.tex}}{\\\\sqrt{${d2.tex}}}`,\r\n            fraction: F\r\n        }\r\n    }\r\n\r\n    hitSegment(A: Point, B: Point): boolean {\r\n        const iPt = this.intersection(\r\n            new Line().fromPoints(A, B)\r\n        )\r\n\r\n        // There is an intersection point\r\n        if (iPt.hasIntersection) {\r\n            return iPt.point.x.value >= Math.min(A.x.value, B.x.value)\r\n                && iPt.point.x.value <= Math.max(A.x.value, B.x.value)\r\n                && iPt.point.y.value >= Math.min(A.y.value, B.y.value)\r\n                && iPt.point.y.value <= Math.max(A.y.value, B.y.value)\r\n        }\r\n        return false\r\n    }\r\n\r\n    getValueAtX = (value: Fraction | number): Fraction => {\r\n        const equ = this.getEquation().isolate('y'),\r\n            F = new Fraction(value)\r\n\r\n        if (equ instanceof Equation) {\r\n            return equ.right.evaluate({ x: F }) as Fraction\r\n        }\r\n        return new Fraction().invalid()\r\n    }\r\n\r\n    getValueAtY = (value: Fraction | number): Fraction => {\r\n        const equ = this.getEquation().isolate('x'),\r\n            F = new Fraction(value)\r\n\r\n        if (equ instanceof Equation) {\r\n            return equ.right.evaluate({ y: F }) as Fraction\r\n        }\r\n\r\n        return new Fraction().invalid()\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Special functions\r\n    // ------------------------------------------\r\n    canonicalAsFloatCoefficient(decimals?: number): string {\r\n        if (decimals === undefined) {\r\n            decimals = 2\r\n        }\r\n\r\n        let canonical = ''\r\n\r\n        if (!this.#a.isZero()) {\r\n            if (this.#a.isOne()) {\r\n                canonical = 'x'\r\n            } else if (this.#a.clone().opposite().isOne()) {\r\n                canonical = '-x'\r\n            } else {\r\n                canonical = this.#a.value.toFixed(decimals) + 'x'\r\n            }\r\n        }\r\n\r\n        if (!this.#b.isZero()) {\r\n            if (this.#b.isPositive()) {\r\n                canonical += '+'\r\n            }\r\n            canonical += this.#b.value.toFixed(decimals) + 'y'\r\n        }\r\n\r\n        if (!this.#c.isZero()) {\r\n            if (this.#c.isPositive()) {\r\n                canonical += '+'\r\n            }\r\n            canonical += this.#c.value.toFixed(decimals)\r\n        }\r\n\r\n\r\n        return canonical + '=0'\r\n    }\r\n}","import { Line } from \"./line\"\r\nimport { Vector } from \"./vector\"\r\nimport { Numeric } from \"../numeric\"\r\nimport { Fraction } from \"../coefficients\"\r\nimport { Equation } from \"../algebra\"\r\nimport { Polynom } from \"../algebra\"\r\nimport { Monom } from \"../algebra\"\r\nimport {type IPiMathObject, LinePropriety} from \"../pimath.interface\"\r\nimport { Point } from \"./point\"\r\n\r\nexport class Circle\r\n    implements\r\n    IPiMathObject<Circle> {\r\n    #center: Point | undefined = undefined\r\n    #squareRadius: Fraction | undefined = undefined\r\n    #cartesian: Equation | undefined = undefined\r\n\r\n    constructor()\r\n    constructor(equation: string | Equation)\r\n    constructor(circle: Circle)\r\n    constructor(center: Point, radius: Fraction | number, square?: boolean)\r\n    constructor(center: Point, pointThrough: Point)\r\n    constructor(A: Point, B: Point, C: Point)\r\n    constructor(...values: unknown[]) {\r\n        if (values.length > 0) {\r\n            this.parse(...values)\r\n        }\r\n    }\r\n\r\n    get center(): Point {\r\n        return this.#center ?? new Point()\r\n    }\r\n\r\n    get squareRadius(): Fraction {\r\n        return this.#squareRadius ?? new Fraction(0)\r\n    }\r\n\r\n    get cartesian(): Equation {\r\n        if (this.#cartesian === undefined) { throw new Error('Cartesian equation not defined') }\r\n\r\n        return this.#cartesian\r\n    }\r\n\r\n    get radius(): { tex: string, display: string, value: number } {\r\n        if (this.#squareRadius === undefined) { return { tex: '', display: '', value: 0 } }\r\n        if (this.#squareRadius.isSquare()) {\r\n            return {\r\n                tex: this.#squareRadius.clone().sqrt().tex,\r\n                display: this.#squareRadius.clone().sqrt().display,\r\n                value: this.#squareRadius.clone().sqrt().value\r\n            }\r\n        } else {\r\n            return {\r\n                tex: `\\\\sqrt{${this.#squareRadius.tex}}`,\r\n                display: `sqrt(${this.#squareRadius.display})`,\r\n                value: this.#squareRadius.clone().sqrt().value\r\n            }\r\n        }\r\n    }\r\n\r\n    get tex(): string {\r\n\r\n        let cx, cy\r\n        if (this.center.x.isZero()) {\r\n            cx = 'x^2'\r\n        } else {\r\n            cx = `\\\\left(x${this.center.x.isNegative() ? '+' : '-'}${this.center.x.clone().abs().tex}\\\\right)^2`\r\n        }\r\n        if (this.center.y.isZero()) {\r\n            cy = 'y^2'\r\n        } else {\r\n            cy = `\\\\left(y${this.center.y.isNegative() ? '+' : '-'}${this.center.y.clone().abs().tex}\\\\right)^2`\r\n        }\r\n        return `${cx}+${cy}=${this.squareRadius.tex}`\r\n    }\r\n\r\n    get developed(): string {\r\n        return this.cartesian.tex\r\n    }\r\n\r\n    get display(): string {\r\n        let cx, cy\r\n        if (this.center.x.isZero()) {\r\n            cx = 'x^2'\r\n        } else {\r\n            cx = `(x${this.center.x.isNegative() ? '+' : '-'}${this.center.x.clone().abs().tex})^2`\r\n        }\r\n        if (this.center.y.isZero()) {\r\n            cy = 'y^2'\r\n        } else {\r\n            cy = `(y${this.center.y.isNegative() ? '+' : '-'}${this.center.y.clone().abs().tex})^2`\r\n        }\r\n        return `${cx}+${cy}=${this.squareRadius.display}`\r\n    }\r\n\r\n    /**\r\n     * Get the relative position between circle and line. It corresponds to the number of intersection.\r\n     * @param {Line} L\r\n     * @returns {number}\r\n     */\r\n    relativePosition = (L: Line): number => {\r\n        if (this.#center === undefined || this.#squareRadius === undefined) { throw new Error('Circle not defined') }\r\n\r\n        const distance = L.distanceTo(this.#center), radius = Math.sqrt(this.#squareRadius.value)\r\n\r\n        if (distance.value - radius > 0.0000000001) {\r\n            return 0 // external\r\n        } else if (Math.abs(distance.value - radius) < 0.0000000001) {\r\n            return 1 // tangent\r\n        } else {\r\n            return 2 // secant\r\n        }\r\n    }\r\n\r\n    lineIntersection = (L: Line): Point[] => {\r\n        const intersectionPoints: Point[] = []\r\n        // let solX: Fraction\r\n\r\n        if (this.#cartesian === undefined) { return [] }\r\n        const equX = this.#cartesian.clone(), lineX = L.getEquation().clone().isolate('x'),\r\n            lineY = L.getEquation().clone().isolate('y')\r\n\r\n        if (lineX instanceof Equation && lineY instanceof Equation) {\r\n            equX.replaceBy('y', lineY.right).simplify()\r\n            equX.solve()\r\n\r\n            // TODO: rework the solutions of an equation.\r\n            // for (const x of equX.solutions) {\r\n            //     if (x.exact === false && isNaN(x.value)) {\r\n            //         continue\r\n            //     }\r\n\r\n            //     solX = new Fraction(x.exact === false ? x.value : x.exact)\r\n            //     intersectionPoints.push(new Point(solX.clone(), lineY.right.evaluate(solX)))\r\n            // }\r\n        }\r\n\r\n        return intersectionPoints\r\n    }\r\n\r\n    tangents = (P: Point | Fraction): Line[] => {\r\n        if (P instanceof Fraction) {\r\n            return this.#tangentsWithSlope(P)\r\n        } else if (this.isPointOnCircle(P)) {\r\n            return this.#tangentsThroughOnePointOnTheCircle(P)\r\n        } else if (this.#center !== undefined && this.#center.distanceTo(P).value > this.radius.value) {\r\n            //TODO:  Must check it's outside the circle\r\n            return this.#tangentsThroughOnePointOutsideTheCircle(P)\r\n        } else {\r\n            console.log('No tangents as the point is inside !')\r\n        }\r\n        return []\r\n    }\r\n\r\n    isPointOnCircle = (P: Point): boolean => {\r\n        return this.#cartesian?.test({ x: P.x, y: P.y }) ?? false\r\n    }\r\n\r\n    getPointsOnCircle = (numberIsInteger?: boolean): Point[] => {\r\n        if (numberIsInteger === undefined) {\r\n            numberIsInteger = false\r\n        }\r\n\r\n        // It means searching for pythagorician triples that make a perfect square.\r\n        // (x-4)^2 + (y+3)^2 = 15\r\n\r\n        const triplets = Numeric.pythagoreanTripletsWithTarget(this.squareRadius.value, true)\r\n\r\n        const points: Point[] = []\r\n\r\n        triplets.forEach(triplet => {\r\n            // Allow positive / negative values\r\n            // x-a = t  => x = a + t\r\n            // x-a = -t => x = a - t\r\n\r\n            for (const k of [[1, 1], [-1, 1], [-1, -1], [1, -1]]) {\r\n                points.push(new Point(\r\n                    this.center.x.clone().add(k[0] * triplet[0]),\r\n                    this.center.y.clone().add(k[1] * triplet[1])\r\n                )\r\n                )\r\n                // Check if the point is not already in points.\r\n                // TODO: isInListOfPoints not implemented\r\n                // if (!pt.isInListOfPoints(points)) {\r\n                //     points.push(pt)\r\n                // }\r\n            }\r\n        })\r\n        return points\r\n    }\r\n\r\n    clone(): Circle {\r\n        return new Circle(\r\n            this.center.clone(),\r\n            this.squareRadius.clone(),\r\n            true\r\n        )\r\n        // this.#center = this.center.clone()\r\n        // this.#squareRadius = this.squareRadius.clone()\r\n        // this._calculateCartesian()\r\n        // return this\r\n    }\r\n\r\n    setRadius(radius: Fraction | number, square?: boolean): this {\r\n        if (square) {\r\n            this.#squareRadius = new Fraction(radius)\r\n        } else {\r\n            this.#squareRadius = new Fraction(radius).pow(2)\r\n        }\r\n        this.#calculateCartesian()\r\n        return this\r\n    }\r\n\r\n    #tangentsThroughOnePointOnTheCircle = (P: Point): Line[] => {\r\n        const CT = new Vector(this.center, P)\r\n        return [new Line(P, CT, LinePropriety.Perpendicular)]\r\n    }\r\n\r\n    #tangentsThroughOnePointOutsideTheCircle = (P: Point): Line[] => {\r\n        // y = mx + h\r\n        // px, py => h = -m px + py => mx - y -m.px + py = 0 =>\r\n        // Centre: cx, cy, radius: r\r\n        // (m.cx - cy -m.px + py)^2 = r^2  * (m^2  + 1)\r\n        // (m(cx-py) - (cy - py))^2 = r^2  * (m^2  + 1)\r\n\r\n        const cx_px = this.center.x.clone().subtract(P.x), cy_py = this.center.y.clone().subtract(P.y),\r\n            polyLeft = new Polynom('x'), polyRight = new Polynom('x^2+1')\r\n\r\n        polyLeft.multiply(cx_px).subtract(cy_py).pow(2)\r\n        polyRight.multiply(this.squareRadius)\r\n\r\n        const equ = new Equation(polyLeft, polyRight)\r\n        const solutions = equ.solve()\r\n\r\n        return solutions.map(sol => {\r\n            //  h = -m px + py\r\n            let h: Fraction\r\n            const equ = new Equation('y', 'x')\r\n\r\n            if (sol.exact instanceof Fraction) {\r\n                h = P.x.clone().opposite().multiply(sol.exact).add(P.y)\r\n                equ.right.multiply(sol.exact).add(h)\r\n            } else {\r\n                h = P.x.clone().opposite().multiply(sol.value).add(P.y)\r\n                equ.right.multiply(sol.value).add(h)\r\n            }\r\n\r\n            return new Line(equ)\r\n        })\r\n\r\n    }\r\n\r\n    #tangentsWithSlope = (slope: Fraction): Line[] => {\r\n        // d(C;t)=r => ac1+bc2 + x = +- sqrt(a^2 + b^2)*r\r\n        // x = -ac1-bc2  +-  sqrt(a^2 + b^2)*r\r\n        // y = a/bx + h => ax-by + H = 0\r\n\r\n        const a = slope.numerator, b = -slope.denominator, c1 = this.center.x.clone(), c2 = this.center.y.clone()\r\n\r\n        const sq = this.squareRadius.clone().multiply(slope.numerator ** 2 + slope.denominator ** 2),\r\n            x1 = c1.clone().multiply(a).opposite().subtract(c2.clone().multiply(b)).add(sq.clone().sqrt()),\r\n            x2 = c1.clone().multiply(a).opposite().subtract(c2.clone().multiply(b)).subtract(sq.clone().sqrt())\r\n\r\n        return [new Line(a, b, x1), new Line(a, b, x2)]\r\n    }\r\n\r\n    #reset(): this {\r\n        this.#center = undefined\r\n        this.#squareRadius = undefined\r\n        this.#cartesian = undefined\r\n\r\n        return this\r\n    }\r\n\r\n    parse(...values: unknown[]): this {\r\n        // Data can be given in these formats:\r\n        // one value, a string -> make it an Equation\r\n        // one value, an Equation\r\n        // one value, a circle -> clone it\r\n        // two values: two points (center and pointThrough)\r\n        // two values: point and Fraction (center and radius)\r\n        // three values: Vector2D, Fraction, Boolean (center, square radius, true)\r\n\r\n        this.#reset()\r\n\r\n        if (typeof values[0] === 'string') {\r\n            this.#parseEquation(new Equation(values[0]))\r\n        } else if (values[0] instanceof Equation) {\r\n            this.#parseEquation(values[0])\r\n        } else if (values[0] instanceof Circle) {\r\n            this.#parseCopyCircle(values[0])\r\n        } else if (values[0] instanceof Point && values.length > 1) {\r\n            if (values[1] instanceof Point) {\r\n                if (values[2] instanceof Point) {\r\n                    // TODO: Add the method to parse through three points\r\n                    // this._parseThroughtThreePoints(values[0], values[1], values[2])\r\n                } else {\r\n                    this.#parseCenterAndPointThrough(values[0], values[1])\r\n                }\r\n            } else if (values[1] instanceof Fraction || typeof values[1] === 'number') {\r\n                this.#parseCenterAndRadius(values[0], values[1], (typeof values[2] === \"boolean\") ? values[2] : false)\r\n            }\r\n        }\r\n\r\n        // Calculate once the different values.\r\n        this.#calculateCartesian()\r\n\r\n\r\n        return this\r\n    }\r\n\r\n    #calculateCartesian() {\r\n        this.#cartesian = (\r\n            new Equation(\r\n                new Polynom(`(x-(${this.center.x.display}))^2+(y-(${this.center.y.display}))^2`),\r\n                new Polynom(this.squareRadius.display))\r\n        ).moveLeft()\r\n    }\r\n\r\n    #parseCopyCircle(circle: Circle): this {\r\n        this.#center = circle.center.clone()\r\n        this.#squareRadius = circle.squareRadius.clone()\r\n        this.#calculateCartesian()\r\n        return this\r\n    }\r\n\r\n    #parseCenterAndRadius(center: Point, radius: Fraction | number, square?: boolean): this {\r\n        this.#center = center.clone()\r\n        if (square) {\r\n            this.#squareRadius = (new Fraction(radius))\r\n        } else {\r\n            this.#squareRadius = new Fraction(radius).pow(2)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    #parseCenterAndPointThrough(center: Point, pointThrough: Point): this {\r\n        this.#center = center.clone()\r\n        this.#squareRadius = new Vector(this.#center, pointThrough).normSquare\r\n        return this\r\n    }\r\n\r\n    #parseEquation(equ: Equation): this {\r\n\r\n        // Move everything to the left.\r\n        equ.moveLeft()\r\n\r\n        if (equ.degree('x').value === 2 && equ.degree('y').value === 2) {\r\n            // Both must be of degree 2.\r\n            const x2 = equ.left.monomByDegree(2, 'x'), y2 = equ.left.monomByDegree(2, 'y')\r\n            let x1: Monom, y1: Monom, c: Monom\r\n\r\n            // Both square monoms must have the same coefficient.\r\n            if (x2.coefficient.isEqual(y2.coefficient)) {\r\n                equ.divide(x2.coefficient)\r\n\r\n                x1 = equ.left.monomByDegree(1, 'x')\r\n                y1 = equ.left.monomByDegree(1, 'y')\r\n\r\n                c = equ.left.monomByDegree(0)\r\n\r\n                this.#center = new Point(x1.coefficient.clone().divide(2).opposite(), y1.coefficient.clone().divide(2).opposite())\r\n\r\n                this.#squareRadius = c.coefficient.clone().opposite()\r\n                    .add(this.#center.x.clone().pow(2))\r\n                    .add(this.#center.y.clone().pow(2))\r\n\r\n            } else {\r\n                // The circle is not a valid circle\r\n                this.#center = undefined\r\n                this.#squareRadius = undefined\r\n            }\r\n        }\r\n        return this\r\n    }\r\n\r\n    // private _parseThroughtThreePoints(A: Point, B: Point, C: Point): this {\r\n    //     const T = new Triangle(A, B, C), mAB = T.remarquables.mediators.AB.clone(),\r\n    //         mAC = T.remarquables.mediators.AC.clone()\r\n    //     this.parse(mAB.intersection(mAC).point, A)\r\n\r\n    //     return this\r\n    // }\r\n\r\n}","/**\r\n * This class works for 2d line in a plane.\r\n */\r\n\r\nimport { Fraction } from \"../coefficients/fraction\"\r\nimport { Polynom } from \"../algebra/polynom\"\r\nimport { Monom } from \"../algebra/monom\"\r\nimport { randomIntSym } from \"../randomization/rndHelpers\"\r\nimport { Vector } from \"./vector\"\r\nimport { Point } from \"./point\"\r\nimport {Line3Propriety} from \"../pimath.interface\"\r\n\r\n\r\nexport class Line3 {\r\n    // A line is defined as the canonical form\r\n    static PERPENDICULAR = Line3Propriety.Perpendicular\r\n    static PARALLEL = Line3Propriety.Parallel\r\n    // ax + by + c = 0\r\n    #OA: Point = new Point()\r\n    #d: Vector = new Vector()\r\n\r\n    /**\r\n     * Value can be a mix of:\r\n     *\r\n     * @param values\r\n     */\r\n    constructor(A: Point, B: Point)\r\n    constructor(A: Point, d: Vector)\r\n    constructor(A: Point, d: Vector | Point) {\r\n        this.#OA = A.clone()\r\n        this.#d = d.asPoint ? new Vector(A, d) : d.clone()\r\n        return this\r\n    }\r\n\r\n    get OA(): Point {\r\n        return this.#OA\r\n    }\r\n\r\n    set OA(value: Point) {\r\n        this.#OA = value\r\n    }\r\n    get point(): Point {\r\n        return this.#OA.clone()\r\n    }\r\n\r\n    get d(): Vector {\r\n        return this.#d\r\n    }\r\n\r\n    set d(value: Vector) {\r\n        this.#d = value\r\n    }\r\n\r\n    get tex(): { parametric: string, system: string, cartesian: string } {\r\n        return {\r\n            parametric: `${Vector.asTex('x', 'y', 'z')} = ${Vector.asTex(this.#OA.x.tex, this.#OA.y.tex, this.#OA.z.tex)} + k\\\\cdot ${Vector.asTex(this.#d.x.tex, this.#d.y.tex, this.#d.z.tex)}`,\r\n            system: `\\\\left\\\\{\\\\begin{aligned}\r\n    x &= ${(new Polynom(this.#OA.x)\r\n                    .add(new Monom(this.#d.x).multiply(new Monom('k'))))\r\n                    .reorder('k', true)\r\n                    .tex}\\\\\\\\ \r\n    y &= ${(new Polynom(this.#OA.y)\r\n                    .add(new Monom(this.#d.y).multiply(new Monom('k'))))\r\n                    .reorder('k', true)\r\n                    .tex}\\\\\\\\\r\n    z &= ${(new Polynom(this.#OA.z)\r\n                    .add(new Monom(this.#d.z).multiply(new Monom('k'))))\r\n                    .reorder('k', true)\r\n                    .tex}\r\n\\\\end{aligned}\\\\right.`,\r\n            cartesian: `\\\\frac{ ${new Polynom('x', 1, this.#OA.x.clone().opposite()).tex} }{ ${this.direction.x.tex} } = \\\\frac{ ${new Polynom('y', 1, this.#OA.y.clone().opposite()).tex} }{ ${this.direction.y.tex} } = \\\\frac{ ${new Polynom('z', 1, this.#OA.z.clone().opposite()).tex} }{ ${this.direction.z.tex} }`\r\n        }\r\n    }\r\n\r\n    get display(): { parametric: string, system: string, cartesian: string } {\r\n        const OAx = this.#OA.x.display\r\n        const OAy = this.#OA.y.display\r\n        const OAz = this.#OA.z.display\r\n        const n = this.direction.simplify()\r\n        const nx = n.x.display\r\n        const ny = n.y.display\r\n        const nz = n.z.display\r\n\r\n        return {\r\n            parametric: `${Vector.asDisplay('x', 'y', 'z')} = ${Vector.asDisplay(this.#OA.x.display, this.#OA.y.display, this.#OA.z.display)} + k\\\\cdot ${Vector.asDisplay(this.#d.x.display, this.#d.y.display, this.#d.z.display)}`,\r\n            system: '',\r\n            cartesian: `(x-${OAx})/${nx} = (y-${OAy})/${ny} = (z-${OAz})/${nz}`\r\n        }\r\n    }\r\n\r\n    get direction(): Vector {\r\n        return this.#d.clone()\r\n    }\r\n\r\n    clone = (): this => {\r\n        this.#d = this.#d.clone()\r\n        this.#OA = this.#OA.clone()\r\n\r\n        return this\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    isOnLine = (pt: Point): boolean => {\r\n        return false\r\n    }\r\n\r\n    isParallelTo = (line: Line3): boolean => {\r\n        // Do they have the isSame direction ?\r\n        throw new Error('Method not implemented.')\r\n    }\r\n    isSameAs = (line: Line3): boolean => {\r\n        throw new Error('Method not implemented.')\r\n    }\r\n    isPerpendicularTo = (line: Line3): boolean => {\r\n        throw new Error('Method not implemented.')\r\n    }\r\n    isVertical = (): boolean => {\r\n        throw new Error('Method not implemented.')\r\n    }\r\n    simplify = (): this => {\r\n        throw new Error('Method not implemented.')\r\n        // const lcm = Numeric.lcm(this.#a.denominator, this.#b.denominator, this.#c.denominator),\r\n        //     gcd = Numeric.gcd(this.#a.numerator, this.#b.numerator, this.#c.numerator)\r\n\r\n        // this.fromCoefficient(\r\n        //     this.#a.clone().multiply(lcm).divide(gcd),\r\n        //     this.#b.clone().multiply(lcm).divide(gcd),\r\n        //     this.#c.clone().multiply(lcm).divide(gcd),\r\n        // )\r\n\r\n        // return this\r\n    }\r\n\r\n    intersection = (line: Line3): { point: Vector, hasIntersection: boolean, isParallel: boolean, isSame: boolean } => {\r\n\r\n        throw new Error('Method not implemented.')\r\n    }\r\n\r\n    distanceTo(pt: Point): { value: number, fraction: Fraction, tex: string } {\r\n        // Distance is:\r\n        // |(x - x0) x d| / |d|\r\n        const AP = new Vector(this.#OA, pt),\r\n            d = this.direction,\r\n            d2 = this.direction.normSquare,\r\n            num2 = AP.cross(d).normSquare,\r\n            num2d2 = num2.clone().divide(d2),\r\n            dnum = num2d2.clone().sqrt()\r\n\r\n        console.log('CROSS', AP.cross(d).display)\r\n        return {\r\n            value: Math.sqrt(num2d2.value),\r\n            fraction: num2d2.clone().sqrt(),\r\n            tex: dnum.isExact() ? dnum.tex : `\\\\sqrt{${num2d2.tex}}`\r\n        }\r\n    }\r\n\r\n    hitSegment(A: Point, B: Point): boolean {\r\n        const iPt = this.intersection(\r\n            new Line3(A, B)\r\n        )\r\n\r\n        // There is an intersection point\r\n        if (iPt.hasIntersection) {\r\n            return iPt.point.x.value >= Math.min(A.x.value, B.x.value)\r\n                && iPt.point.x.value <= Math.max(A.x.value, B.x.value)\r\n                && iPt.point.y.value >= Math.min(A.y.value, B.y.value)\r\n                && iPt.point.y.value <= Math.max(A.y.value, B.y.value)\r\n                && iPt.point.z.value >= Math.min(A.z.value, B.z.value)\r\n                && iPt.point.z.value <= Math.max(A.z.value, B.z.value)\r\n        }\r\n        return false\r\n    }\r\n\r\n    // getValueAtX = (value: Fraction | number): Fraction => {\r\n    //     const equ = this.equation.clone().isolate('y'),\r\n    //         F = new Fraction(value)\r\n\r\n    //     if (equ instanceof Equation) {\r\n    //         return equ.right.evaluate({ x: F }) as Fraction\r\n    //     }\r\n    //     return new Fraction().invalid()\r\n    // }\r\n\r\n    // getValueAtY = (value: Fraction | number): Fraction => {\r\n    //     const equ = this.equation.clone().isolate('x'),\r\n    //         F = new Fraction(value)\r\n\r\n    //     if (equ instanceof Equation) {\r\n    //         return equ.right.evaluate({ y: F }) as Fraction\r\n    //     }\r\n\r\n    //     return new Fraction().invalid()\r\n    // }\r\n\r\n    randomPoint = (max = 5): Point => {\r\n        const A = this.#OA.clone(),\r\n            k = new Fraction(randomIntSym(max, false))\r\n\r\n        return new Point(\r\n            A.x.clone().add(this.#d.x.clone().multiply(k)),\r\n            A.y.clone().add(this.#d.y.clone().multiply(k)),\r\n            A.z.clone().add(this.#d.z.clone().multiply(k))\r\n        )\r\n    }\r\n}","import { Equation } from \"../algebra/equation\"\r\nimport { Polynom } from \"../algebra/polynom\"\r\nimport { Fraction } from \"../coefficients/fraction\"\r\nimport { Line3 } from \"./line3\"\r\nimport { Point } from \"./point\"\r\nimport { Vector } from \"./vector\"\r\nimport type {Plane3Config} from \"../pimath.interface\"\r\n\r\n\r\n\r\nexport class Plane3 {\r\n    #normal: Vector = new Vector(0, 0, 1)\r\n    #point: Point = new Point(0, 0, 0)\r\n\r\n    constructor(config?: Plane3Config) {\r\n        if (config) {\r\n            this.parse(config)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    get normal(): Vector {\r\n        return this.#normal\r\n    }\r\n    set normal(value: Vector) {\r\n        this.#normal = value\r\n        this.#normal.asPoint = false\r\n    }\r\n    get point(): Point {\r\n        return this.#point\r\n    }\r\n    set point(value: Point) {\r\n        this.#point = value\r\n        this.#point.asPoint = true\r\n    }\r\n\r\n    get a(): Fraction {\r\n        return this.#normal.x\r\n    }\r\n    get b(): Fraction {\r\n        return this.#normal.y\r\n    }\r\n    get c(): Fraction {\r\n        return this.#normal.z\r\n    }\r\n    get d(): Fraction {\r\n        return this.#normal.dot(this.#point).opposite()\r\n    }\r\n\r\n    get tex(): string {\r\n        // return the cartesian equation of the plane\r\n        return new Equation(\r\n            new Polynom('xyz', this.a, this.b, this.c, this.d),\r\n            new Polynom(0)\r\n        ).reduce().tex\r\n    }\r\n\r\n    get display(): string {\r\n        // return the cartesian equation of the plane\r\n        return new Equation(\r\n            new Polynom('xyz', this.a, this.b, this.c, this.d),\r\n            new Polynom(0)\r\n        ).reduce().display\r\n    }\r\n\r\n    parse(config: Plane3Config) {\r\n        if (config.point && config.normal) {\r\n            this.point = config.point\r\n            this.normal = config.normal\r\n            return\r\n        }\r\n\r\n        if (config.point && config.directions?.length === 2) {\r\n            this.point = config.point\r\n            const [v1, v2] = config.directions\r\n            this.normal = v1.cross(v2)\r\n            return\r\n        }\r\n\r\n        if (config.equation) {\r\n            const cartesian = config.equation.moveLeft().reduce().left\r\n\r\n            const a = cartesian.monomByLetter('x').coefficient\r\n            const b = cartesian.monomByLetter('y').coefficient\r\n            const c = cartesian.monomByLetter('z').coefficient\r\n            const d = cartesian.monomByDegree(0).coefficient\r\n\r\n            // Get the normal vector\r\n            this.normal = new Vector(a, b, c)\r\n\r\n            // Get a point on the plane\r\n            if (a.isNotZero()) {\r\n                this.point = new Point(d.clone().divide(a).opposite(), 0, 0)\r\n            } else if (b.isNotZero()) {\r\n                this.point = new Point(0, d.clone().divide(b).opposite(), 0)\r\n            } else {\r\n                this.point = new Point(0, 0, d.clone().divide(c).opposite())\r\n            }\r\n            // Make sure it's considered as point\r\n            return\r\n        }\r\n\r\n        if (config.points?.length === 3 && config.points.every(p => p instanceof Vector)) {\r\n            const A = config.points[0]\r\n            const B = config.points[1]\r\n            const C = config.points[2]\r\n\r\n            const AB = new Vector(A, B)\r\n            const AC = new Vector(A, C)\r\n            this.normal = AB.cross(AC)\r\n            this.point = A\r\n            return\r\n        }\r\n\r\n        if (config.coefficients?.length === 4) {\r\n            const [a, b, c, d] = config.coefficients\r\n            this.normal = new Vector(a, b, c)\r\n            this.point = new Point(0, 0, -d)\r\n            return\r\n        }\r\n    }\r\n\r\n    angle(vector: Vector, sharp?: boolean, radian?: boolean): number\r\n    angle(line: Line3, sharp?: boolean, radian?: boolean): number\r\n    angle(plane: Plane3, sharp?: boolean, radian?: boolean): number\r\n    angle(value: Plane3 | Line3 | Vector, sharp?: boolean, radian?: boolean): number {\r\n        if (value instanceof Plane3) {\r\n            return this.normal.angle(value.normal, sharp, radian)\r\n        }\r\n\r\n        let direction: Vector\r\n        if (value instanceof Vector) {\r\n            if (value.dimension !== 3) {\r\n                throw new Error('Vector is not 3D')\r\n            }\r\n\r\n            direction = value\r\n        } else {\r\n            direction = value.direction\r\n        }\r\n\r\n        const a90 = radian ? Math.PI / 2 : 90\r\n        return a90 - this.normal.angle(direction, true, radian)\r\n    }\r\n\r\n    distanceTo(point: Vector): number {\r\n        return this.normal.dot(point).add(this.d).abs().value / this.normal.norm\r\n    }\r\n\r\n    intersectWithLine(line: Line3): Point {\r\n        const { point, direction } = line\r\n        const t = this.normal.dot(point).add(this.d).divide(this.normal.dot(direction).opposite())\r\n        return point.clone().add(direction.clone().multiplyByScalar(t))\r\n    }\r\n\r\n    intersectWithPlane(plane: Plane3): Line3 {\r\n        const direction = this.normal.cross(plane.normal)\r\n\r\n        // Solve the system:\r\n        // p1 // p2 // z=0\r\n        const pt = new Point(0, 0, 0)\r\n        throw new Error('Intersection with plane  not yet implemented !')\r\n        return new Line3(pt, direction)\r\n    }\r\n\r\n    isPointOnPlane(pt: Point): boolean {\r\n        return this.normal.dot(pt).add(this.d).isZero()\r\n    }\r\n}","import { Fraction } from \"../coefficients/fraction\"\r\nimport { Line } from \"./line\"\r\nimport { Vector } from \"./vector\"\r\nimport { Point } from \"./point\"\r\nimport type {remarquableLines} from \"../pimath.interface\"\r\n\r\nexport class Triangle {\r\n    #A: Point = new Point()\r\n    #B: Point = new Point()\r\n    #C: Point = new Point()\r\n    #lines: { 'AB': Line, 'AC': Line, 'BC': Line } = {\r\n        'AB': new Line(),\r\n        'AC': new Line(),\r\n        'BC': new Line()\r\n    }\r\n    #middles: { 'AB': Point, 'AC': Point, 'BC': Point } = {\r\n        'AB': new Point(),\r\n        'AC': new Point(),\r\n        'BC': new Point()\r\n    }\r\n    #remarquables: remarquableLines | null = null\r\n\r\n    constructor(...values: unknown[]) {\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setters\r\n    // ------------------------------------------\r\n\r\n    get A(): Point {\r\n        return this.#A\r\n    }\r\n\r\n    get B(): Point {\r\n        return this.#B\r\n    }\r\n\r\n    get C(): Point {\r\n        return this.#C\r\n    }\r\n\r\n    get AB(): Vector {\r\n        return this.#getSegment('A', 'B')\r\n    }\r\n\r\n    get BA(): Vector {\r\n        return this.#getSegment('B', 'A')\r\n    }\r\n\r\n    get BC(): Vector {\r\n        return this.#getSegment('B', 'C')\r\n    }\r\n\r\n    get CB(): Vector {\r\n        return this.#getSegment('C', 'B')\r\n    }\r\n\r\n    get AC(): Vector {\r\n        return this.#getSegment('A', 'C')\r\n    }\r\n\r\n    get CA(): Vector {\r\n        return this.#getSegment('C', 'A')\r\n    }\r\n\r\n    get isRectangle(): boolean {\r\n        if (this.AB.isNormalTo(this.BC)) {\r\n            return true\r\n        }\r\n        if (this.AB.isNormalTo(this.AC)) {\r\n            return true\r\n        }\r\n        if (this.BC.isNormalTo(this.AC)) {\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    get isEquilateral(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) &&\r\n            this.AB.normSquare.isEqual(this.AC.normSquare)\r\n    }\r\n\r\n    get isIsocele(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) ||\r\n            this.AB.normSquare.isEqual(this.AC.normSquare) ||\r\n            this.BC.normSquare.isEqual(this.AC.normSquare)\r\n    }\r\n\r\n    get lines(): { 'AB': Line, 'BC': Line, 'AC': Line } {\r\n        return this.#lines\r\n    }\r\n\r\n    get remarquables(): remarquableLines | null {\r\n        return this.#remarquables\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Parse values to a triangle. Supported formats:\r\n     * Vector2D, Vector2D, Vector2D\r\n     * x1, y1, x2, y2, x3, y3\r\n     * @param values\r\n     */\r\n    parse = (...values: unknown[]): Triangle => {\r\n        if (values.length === 6) {\r\n            // Check if all values are number or fractions.\r\n            const v: Fraction[] = values.map((x: unknown) => new Fraction(x as string))\r\n\r\n            if (v.some(x => x.isNaN())) {\r\n                throw new Error('One of the values is not a valid number')\r\n            }\r\n\r\n            return this.parse(\r\n                new Vector(v[0], v[1]),\r\n                new Vector(v[2], v[3]),\r\n                new Vector(v[4], v[5]),\r\n            )\r\n        } else if (values.length === 3) {\r\n            // Possibilities:\r\n            // - Three points (or part of points, only dict for example, or array\r\n            // - Three lines\r\n            // - Three lines as text.\r\n            if (values.every((x: unknown) => typeof x === 'string')) {\r\n                // Three lines as text.\r\n                return this.parse(\r\n                    ...values.map((x) => {\r\n                        return new Line(x)\r\n                    })\r\n                )\r\n            } else if (values.every((x: unknown) => x instanceof Line)) {\r\n                // We have three lines\r\n                const AB: Line = (values[0]).clone()\r\n                const BC: Line = (values[1]).clone()\r\n                const AC: Line = (values[2]).clone()\r\n                this.#lines = { AB, BC, AC }\r\n\r\n                // Get the intersection points -> build the triangle using these intersection points.\r\n                let intersect = AB.intersection(BC)\r\n                if (intersect.hasIntersection) {\r\n                    this.#B = intersect.point.clone()\r\n                } else {\r\n                    throw new Error('Lines do not intersect !')\r\n                }\r\n\r\n                intersect = BC.intersection(AC)\r\n                if (intersect.hasIntersection) {\r\n                    this.#C = intersect.point.clone()\r\n                } else {\r\n                    throw new Error('Lines do not intersect !')\r\n                }\r\n\r\n                intersect = AC.intersection(AB)\r\n                if (intersect.hasIntersection) {\r\n                    this.#A = intersect.point.clone()\r\n                } else {\r\n                    throw new Error('Lines do not intersect !')\r\n                }\r\n\r\n            } else if (values.every((x: unknown) => (x instanceof Point))) {\r\n                // We have three points.\r\n                this.#A = (values[0]).clone()\r\n                this.#B = (values[1]).clone()\r\n                this.#C = (values[2]).clone()\r\n                this.#lines = {\r\n                    'AB': new Line(this.#A, this.#B),\r\n                    'BC': new Line(this.#B, this.#C),\r\n                    'AC': new Line(this.#A, this.#C)\r\n                }\r\n            }\r\n        } else if (values.length === 1) {\r\n            if (values[0] instanceof Triangle) {\r\n                return values[0].clone()\r\n            }\r\n        }\r\n\r\n        this.#updateTriangle()\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Clone the Triangle class\r\n     */\r\n    clone = (): Triangle => {\r\n        return new Triangle(\r\n            this.#A.clone(),\r\n            this.#B.clone(),\r\n            this.#C.clone()\r\n        )\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Triangle operations and properties\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Generate the Line object for the three segments of the triangle\r\n     */\r\n    #updateTriangle = () => {\r\n        this.#A.asPoint = true\r\n        this.#B.asPoint = true\r\n        this.#C.asPoint = true\r\n\r\n        this.#middles = {\r\n            'AB': new Point().middleOf(this.#A, this.#B),\r\n            'AC': new Point().middleOf(this.#A, this.#C),\r\n            'BC': new Point().middleOf(this.#B, this.#C)\r\n        }\r\n\r\n        this.#remarquables = this.#calculateRemarquableLines()\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the Vector2D class for the given name\r\n     * @param ptName\r\n     */\r\n    #getPointByName = (ptName: string): Point => {\r\n        switch (ptName.toUpperCase()) {\r\n            case 'A':\r\n                return this.#A\r\n            case 'B':\r\n                return this.#B\r\n            case 'C':\r\n                return this.#C\r\n        }\r\n\r\n        // Something went wrong ! Return the first point\r\n        return this.#A\r\n    }\r\n    /**\r\n     * Get the vector for the segment given by name.\r\n     * @param ptName1\r\n     * @param ptName2\r\n     */\r\n    #getSegment = (ptName1: string, ptName2: string): Vector => {\r\n        return new Vector(\r\n            this.#getPointByName(ptName1),\r\n            this.#getPointByName(ptName2)\r\n        )\r\n    }\r\n\r\n    #calculateRemarquableLines = (): remarquableLines => {\r\n\r\n        const medians = {\r\n            'A': new Line().fromPoints(this.#A, this.#middles.BC),\r\n            'B': new Line().fromPoints(this.#B, this.#middles.AC),\r\n            'C': new Line().fromPoints(this.#C, this.#middles.AB),\r\n            'intersection': null\r\n        }\r\n\r\n        const mediators = {\r\n            'AB': new Line().fromPointAndNormal(this.#middles.AB, new Vector(this.#A, this.#B).normal()),\r\n            'AC': new Line().fromPointAndNormal(this.#middles.AC, new Vector(this.#A, this.#C).normal()),\r\n            'BC': new Line().fromPointAndNormal(this.#middles.BC, new Vector(this.#B, this.#C).normal()),\r\n            'intersection': null\r\n        }\r\n\r\n        const heights = {\r\n            'A': new Line().fromPointAndNormal(this.#A, new Vector(this.#B, this.#C).normal()),\r\n            'B': new Line().fromPointAndNormal(this.#B, new Vector(this.#A, this.#C).normal()),\r\n            'C': new Line().fromPointAndNormal(this.#C, new Vector(this.#A, this.#B).normal()),\r\n            'intersection': null\r\n        }\r\n\r\n        const bA = this.#calculateBisectors('A'),\r\n            bB = this.#calculateBisectors('B'),\r\n            bC = this.#calculateBisectors('C')\r\n\r\n        const bisectors = {\r\n            'A': bA.internal,\r\n            'B': bB.internal,\r\n            'C': bB.internal,\r\n            'intersection': null\r\n        }\r\n\r\n        const externalBisectors = {\r\n            'A': bA.external,\r\n            'B': bB.external,\r\n            'C': bC.external,\r\n            'intersection': null\r\n        }\r\n\r\n        const remarquables: remarquableLines = {\r\n            medians,\r\n            mediators,\r\n            heights,\r\n            bisectors,\r\n            externalBisectors\r\n        }\r\n\r\n        // As it's a triangle, we assume the lines are intersecting and aren't parallel or superposed.\r\n        remarquables.medians.intersection = remarquables.medians.A.intersection(remarquables.medians.B).point\r\n        remarquables.mediators.intersection = remarquables.mediators.AB.intersection(remarquables.mediators.BC).point\r\n        remarquables.heights.intersection = remarquables.heights.A.intersection(remarquables.heights.B).point\r\n        remarquables.bisectors.intersection = remarquables.bisectors.A.intersection(remarquables.bisectors.B).point\r\n\r\n        // Everything was calculated for the remarquable lines.\r\n        return remarquables\r\n    }\r\n\r\n    #calculateBisectors = (pt: string): { internal: Line, external: Line } => {\r\n        const tlines = this.lines\r\n        let d1, d2\r\n\r\n        if (pt === 'A') {\r\n            d1 = tlines.AB\r\n            d2 = tlines.AC\r\n        } else if (pt === 'B') {\r\n            d1 = tlines.AB\r\n            d2 = tlines.BC\r\n        } else if (pt === 'C') {\r\n            d1 = tlines.BC\r\n            d2 = tlines.AC\r\n        }\r\n\r\n        if (d1 === undefined || d2 === undefined) {\r\n            throw new Error(`The point ${pt} does not exist`)\r\n        }\r\n\r\n        const d1n = d1.n.simplify().norm\r\n        const d2n = d2.n.simplify().norm\r\n        const d1Equ = d1.getEquation().multiply(d2n)\r\n        const d2Equ = d2.getEquation().multiply(d1n)\r\n\r\n        const b1: Line = new Line(d1Equ.clone().subtract(d2Equ).simplify())\r\n        const b2: Line = new Line(d2Equ.clone().subtract(d1Equ).simplify())\r\n\r\n        // Must determine which bisectors is in the triangle\r\n        if (pt === 'A') {\r\n            return b1.hitSegment(this.B, this.C) ? { internal: b1, external: b2 } : { internal: b2, external: b1 }\r\n        }\r\n        if (pt === 'B') {\r\n            return b1.hitSegment(this.A, this.C) ? { internal: b1, external: b2 } : { internal: b2, external: b1 }\r\n        }\r\n        if (pt === 'C') {\r\n            return b1.hitSegment(this.B, this.A) ? { internal: b1, external: b2 } : { internal: b2, external: b1 }\r\n        }\r\n\r\n        // Default returns the first bisector\r\n        return { internal: b1, external: b2 }\r\n    }\r\n}","import {Point} from \"./point\"\r\nimport {Fraction} from \"../coefficients\"\r\nimport {Equation, Polynom} from \"../algebra\"\r\nimport type {InputValue} from \"../pimath.interface\"\r\n\r\nenum SPHERE3_FORMAT {\r\n    DEVELOPPED,\r\n    CENTER_RADIUS\r\n}\r\n\r\nexport enum SPHERE3_RELATIVE_POSITION {\r\n    INTERIOR,\r\n    EXTERIOR,\r\n    SECANT,\r\n    TANGENT_INSIDE,\r\n    TANGENT_OUTSIDE,\r\n    SUPERPOSED,\r\n    CONCENTRIC\r\n}\r\n\r\nexport class Sphere3 {\r\n    #center: Point | undefined = undefined\r\n    #squareRadius: Fraction | undefined = undefined\r\n    #equation: Equation | undefined = undefined\r\n    #format: SPHERE3_FORMAT = SPHERE3_FORMAT.CENTER_RADIUS\r\n\r\n    constructor(center?: Point, radius?: InputValue<Fraction>) {\r\n        if (center && radius) {\r\n            this.#center = center\r\n            this.#squareRadius = new Fraction(radius).clone().pow(2)\r\n            this.#computeEquation()\r\n        }\r\n        return this\r\n    }\r\n\r\n    fromEquation(equation: Equation | string): this {\r\n        const equ = new Equation(equation).moveLeft().reduce()\r\n\r\n        // Check that x, y, z has the same power and same coefficient.\r\n        const letters = ['x', 'y', 'z']\r\n\r\n        if (letters.some((letter) => equ.degree(letter).value !== 2)){\r\n            return this.makeUndefined()\r\n        }\r\n\r\n        const coefficient = equ.left.monomByDegree(2, 'x').coefficient\r\n        if (letters.some((letter) => equ.left.monomByDegree(2, letter).coefficient.isNotEqual(coefficient))) {\r\n            return this.makeUndefined()\r\n        }\r\n\r\n        this.#center = new Point(\r\n            equ.left.monomByDegree(1, 'x').coefficient.clone().opposite().divide(2),\r\n            equ.left.monomByDegree(1, 'y').coefficient.clone().opposite().divide(2),\r\n            equ.left.monomByDegree(1, 'z').coefficient.clone().opposite().divide(2)\r\n        )\r\n\r\n        this.#squareRadius = equ.left.monomByDegree(0)\r\n            .coefficient.clone().opposite()\r\n            .add(this.#center.x.clone().pow(2))\r\n            .add(this.#center.y.clone().pow(2))\r\n            .add(this.#center.z.clone().pow(2))\r\n\r\n        this.#computeEquation()\r\n        return this\r\n    }\r\n\r\n    get center(): Point {\r\n        if (this.#center === undefined) {\r\n            throw new Error('Sphere3 is undefined')\r\n        }\r\n        return this.#center\r\n    }\r\n\r\n    get squareRadius(): Fraction {\r\n        if (this.#squareRadius === undefined) {\r\n            throw new Error('Sphere3 is undefined')\r\n        }\r\n        return this.#squareRadius\r\n    }\r\n\r\n    get radius(): { tex: string, display: string, value: number } {\r\n        if (this.#squareRadius === undefined) {\r\n            throw new Error('Sphere3 is undefined')\r\n        }\r\n\r\n        if (this.#squareRadius.isSquare()) {\r\n            return {\r\n                tex: this.#squareRadius.clone().sqrt().tex,\r\n                display: this.#squareRadius.clone().sqrt().display,\r\n                value: this.#squareRadius.clone().sqrt().value\r\n            }\r\n        } else {\r\n            return {\r\n                tex: `\\\\sqrt{${this.#squareRadius.tex}}`,\r\n                display: `sqrt(${this.#squareRadius.display})`,\r\n                value: this.#squareRadius.clone().sqrt().value\r\n            }\r\n        }\r\n    }\r\n\r\n    get equation(): Equation {\r\n        if (this.#equation === undefined) {\r\n            throw new Error('Sphere3 is undefined')\r\n        }\r\n        return this.#equation\r\n    }\r\n\r\n    makeUndefined(): this {\r\n        this.#center = undefined\r\n        this.#squareRadius = undefined\r\n        this.#equation = undefined\r\n        return this\r\n    }\r\n\r\n    get centerRadius(): this {\r\n        this.#format = SPHERE3_FORMAT.CENTER_RADIUS\r\n        return this\r\n    }\r\n\r\n    get developped(): this {\r\n        this.#format = SPHERE3_FORMAT.DEVELOPPED\r\n        return this\r\n    }\r\n\r\n\r\n    get tex(): string {\r\n        return this.#output(true)\r\n    }\r\n\r\n    get display(): string {\r\n        return this.#output(false)\r\n    }\r\n\r\n    #output = (asTex: boolean): string => {\r\n        if (this.#equation === undefined) {\r\n            throw new Error('Sphere3 is undefined')\r\n        }\r\n\r\n        if (this.#format === SPHERE3_FORMAT.DEVELOPPED) {\r\n            return asTex ? this.#equation.tex : this.#equation.display\r\n        }\r\n\r\n        const output: string[] = []\r\n        const letters: ('x' | 'y' | 'z')[] = ['x', 'y', 'z']\r\n\r\n        letters.forEach((letter: 'x' | 'y' | 'z') => {\r\n            if (this.center[letter].isZero()) {\r\n                output.push(`${letter}^2`)\r\n            } else {\r\n                const P = new Polynom(letter).subtract(this.center[letter])\r\n                output.push(\r\n                    asTex ?\r\n                        `\\\\(${P.tex}\\\\)^2` :\r\n                        `(${P.display})^2`\r\n                )\r\n            }\r\n        })\r\n\r\n        return output.join('+') + '=' + (asTex ? this.squareRadius.tex : this.squareRadius.display)\r\n\r\n    }\r\n\r\n    #computeEquation(): void {\r\n        this.#equation = new Equation(\r\n            new Polynom('x').subtract(this.center.x).pow(2)\r\n                .add(\r\n                    new Polynom('y').subtract(this.center.y).pow(2)\r\n                )\r\n                .add(\r\n                    new Polynom('z').subtract(this.center.z).pow(2)\r\n                ),\r\n            new Polynom(this.squareRadius)\r\n        ).reduce()\r\n    }\r\n\r\n    static RELATIVE_POSITION = SPHERE3_RELATIVE_POSITION\r\n    relativePosition = (S: Sphere3): SPHERE3_RELATIVE_POSITION => {\r\n        const distance = this.center.distanceTo(S.center).value\r\n        const r1 = this.radius.value\r\n        const r2 = S.radius.value\r\n\r\n        if (distance > r1 + r2) {\r\n            return SPHERE3_RELATIVE_POSITION.EXTERIOR\r\n        }\r\n\r\n        if (distance === r1 + r2) {\r\n            return SPHERE3_RELATIVE_POSITION.TANGENT_OUTSIDE\r\n        }\r\n\r\n        if(distance===0) {\r\n            return r1===r2 ? SPHERE3_RELATIVE_POSITION.SUPERPOSED : SPHERE3_RELATIVE_POSITION.CONCENTRIC\r\n        }\r\n\r\n        if (distance === Math.abs(r1 - r2)) {\r\n            return SPHERE3_RELATIVE_POSITION.TANGENT_INSIDE\r\n        }\r\n\r\n\r\n        if (distance < Math.abs(r1 - r2)) {\r\n            return SPHERE3_RELATIVE_POSITION.INTERIOR\r\n        }\r\n\r\n        return SPHERE3_RELATIVE_POSITION.SECANT\r\n\r\n    }\r\n\r\n    isPointOnSphere = (P: Point): boolean => {\r\n        return this.#equation?.test({\r\n            x: P.x,\r\n            y: P.y,\r\n            z: P.z\r\n        }) ?? false\r\n    }\r\n}","import type { randomCoefficientConfig } from \"../rndTypes\"\r\nimport { Fraction } from \"../../coefficients/fraction\"\r\nimport { randomInt, randomIntSym } from \"../rndHelpers\"\r\n\r\nexport function rndFraction(userConfig?: randomCoefficientConfig): Fraction {\r\n    const config = Object.assign(\r\n        {\r\n            negative: true,\r\n            max: 10,\r\n            reduced: true,\r\n            zero: true,\r\n            natural: false\r\n        }, userConfig)\r\n\r\n    // Create a null fraction\r\n    const Q = new Fraction()\r\n\r\n\r\n    if (config.negative) {\r\n        // Allow negative numbers\r\n        Q.numerator = randomIntSym(config.max, config.zero)\r\n    } else {\r\n        // Only positive numbers\r\n        Q.numerator = randomInt(config.zero ? 0 : 1, config.max)\r\n    }\r\n\r\n    if (config.natural) {\r\n        Q.denominator = 1\r\n    } else {\r\n        let securityCount = 0\r\n        while (Q.isRelative() && securityCount < 10) {\r\n            Q.denominator = randomInt(1, config.max)\r\n            securityCount++\r\n        }\r\n    }\r\n\r\n    return config.reduced ? Q.reduce() : Q\r\n}\r\n","import type { randomMonomConfig } from \"../rndTypes\"\r\nimport { Monom } from \"../../algebra/monom\"\r\nimport { rndFraction } from \"../coefficient/rndFraction\"\r\nimport { randomItem } from \"../rndHelpers\"\r\n\r\nexport function rndMonom(userConfig?: randomMonomConfig): Monom {\r\n    const config = Object.assign(\r\n        {\r\n            letters: 'x',\r\n            degree: 2,\r\n            fraction: true,\r\n            zero: false\r\n        }, userConfig)\r\n\r\n    // Create a monom instance\r\n    const M = new Monom()\r\n\r\n    // Generate the coefficient\r\n    M.coefficient = rndFraction({\r\n        zero: config.zero,\r\n        reduced: true,\r\n        natural: !config.fraction\r\n    })\r\n\r\n    if (config.letters.length > 1) {\r\n        // Initialise each items...\r\n        for (const L of config.letters.split('')) {\r\n            M.setLetter(L, 0)\r\n        }\r\n        for (let i = 0; i < config.degree; i++) {\r\n            const L = randomItem(config.letters.split(\"\"))\r\n            M.setLetter(L, M.degree(L).clone().add(1))\r\n        }\r\n    } else {\r\n        M.setLetter(config.letters, config.degree)\r\n    }\r\n\r\n    return M\r\n}","import type { randomPolynomConfig } from \"../rndTypes\"\r\nimport { rndMonom } from \"./rndMonom\"\r\nimport { Polynom, Monom } from \"../../algebra\"\r\nimport { randomInt } from \"../rndHelpers\"\r\n\r\nconst factorableConfig = {\r\n    letters: 'x',\r\n    degree: 2,\r\n    fraction: false,\r\n    zero: false,\r\n    unit: false,\r\n    factorable: false,\r\n    allowNullMonom: true,\r\n    numberOfMonoms: 0,\r\n    positive: true\r\n}\r\n\r\nexport function rndPolynom(userConfig?: randomPolynomConfig): Polynom {\r\n    const config = Object.assign(\r\n        factorableConfig,\r\n        userConfig\r\n    )\r\n\r\n    // TODO: Create a factorable polynom does not work !!!!!\r\n\r\n    // Create the polynom\r\n    const P = new Polynom().empty()\r\n\r\n    let M: Monom\r\n\r\n    for (let i = config.degree; i >= 0; i--) {\r\n        // Create monom of corresponding degree.\r\n        M = rndMonom({\r\n            letters: config.letters,\r\n            degree: i,\r\n            fraction: config.fraction,\r\n            zero: (i === config.degree) ? false : config.allowNullMonom\r\n        })\r\n\r\n        // If degree is the greatest and unit is true, set the monom value to one.\r\n        if (config.unit && config.degree === i) {\r\n            M.coefficient.one()\r\n        }\r\n\r\n        // Add to the polynom\r\n        P.add(M)\r\n    }\r\n\r\n    // Make sure the first monom is positive.\r\n    if (config.positive && P.monomByDegree().coefficient.isNegative()) {\r\n        P.monomByDegree().coefficient.opposite()\r\n    }\r\n\r\n    // If the number of monoms is greater than the allowed value, remove some of them... except the first one !\r\n    if (config.numberOfMonoms\r\n        && config.numberOfMonoms > 0\r\n        && config.numberOfMonoms < P.length) {\r\n        while (P.length > config.numberOfMonoms) {\r\n            // Remove a random monom, except the first one\r\n            const index = randomInt(1, P.length - 1)\r\n\r\n            P.monoms.splice(index, 1)\r\n        }\r\n    }\r\n\r\n    return P.reduce()\r\n}\r\n\r\nexport function rndFactorablePolynom(userConfig?: randomPolynomConfig): Polynom {\r\n    const config = Object.assign(\r\n        factorableConfig,\r\n        userConfig\r\n    )\r\n\r\n    const P = new Polynom().one()\r\n\r\n    const _factorableConfig = { ...config }\r\n    _factorableConfig.degree = 1\r\n    _factorableConfig.factorable = false\r\n\r\n    for (let i = 0; i < config.degree; i++) {\r\n        P.multiply(rndPolynom(_factorableConfig))\r\n    }\r\n\r\n    return P.reduce()\r\n}","import type { randomEquationConfig } from \"../rndTypes\"\r\nimport { Polynom } from \"../../algebra/polynom\"\r\nimport { Equation } from \"../../algebra/equation\"\r\nimport { rndPolynom } from \"./rndPolynom\"\r\n\r\nexport function rndEquation(userConfig?: randomEquationConfig): Equation {\r\n    const config = Object.assign(\r\n        {\r\n            letters: 'x',\r\n            degree: 1,\r\n            fraction: false,\r\n            zero: false,\r\n            unit: false,\r\n            factorable: false,\r\n            allowNullMonom: true,\r\n            numberOfMonoms: 0,\r\n            positive: true,\r\n            solution: {\r\n                allowZero: true,\r\n                fraction: false,\r\n                nothing: false,\r\n                everything: false\r\n            }\r\n        }, userConfig)\r\n\r\n    // Create a polynom\r\n    const P = new Polynom().one()\r\n\r\n    for (let i = 0; i < config.degree; i++) {\r\n        const factor = rndPolynom({\r\n            degree: 1,\r\n            unit: config.unit,\r\n            fraction: config.fraction,\r\n            letters: config.letters,\r\n            zero: config.zero\r\n        })\r\n        P.multiply(factor)\r\n    }\r\n\r\n    return new Equation(P, 0)\r\n}\r\n","import { Fraction } from \"../../coefficients/fraction\"\r\nimport type { randomGeometryPointConfig } from \"../rndTypes\"\r\nimport { rndFraction } from \"../coefficient/rndFraction\"\r\nimport { randomIntSym } from \"../rndHelpers\"\r\nimport { Point } from \"../../geometry/point\"\r\n\r\nexport function rndVector(userConfig?: randomGeometryPointConfig): Point {\r\n    const config: {\r\n        axis: 'x' | 'y' | 'z' | null,\r\n        fraction: boolean,\r\n        max: number,\r\n        quadrant: number | null\r\n    } = Object.assign(\r\n        {\r\n            axis: true,\r\n            fraction: false,\r\n            max: 10,\r\n            quadrant: null\r\n        }, userConfig)\r\n\r\n    const zeroX = config.axis === 'x',\r\n        zeroY = config.axis === 'y'\r\n\r\n\r\n    const x = config.fraction ?\r\n        rndFraction({ max: config.max, zero: zeroX }) :\r\n        new Fraction(randomIntSym(config.max, zeroX))\r\n\r\n    const y = config.fraction ?\r\n        rndFraction({ max: config.max, zero: zeroY }) :\r\n        new Fraction(randomIntSym(config.max, zeroY))\r\n\r\n    if (Number(config.quadrant) === 1) {\r\n        x.abs()\r\n        y.abs()\r\n    }\r\n    if (Number(config.quadrant) === 2) {\r\n        if (x.isPositive()) {\r\n            x.opposite()\r\n        }\r\n        if (y.isNegative()) {\r\n            y.opposite()\r\n        }\r\n    }\r\n    if (Number(config.quadrant) === 3) {\r\n        if (x.isPositive()) {\r\n            x.opposite()\r\n        }\r\n        if (y.isPositive()) {\r\n            y.opposite()\r\n        }\r\n    }\r\n    if (Number(config.quadrant) === 4) {\r\n        if (x.isNegative()) {\r\n            x.opposite()\r\n        }\r\n        if (y.isPositive()) {\r\n            y.opposite()\r\n        }\r\n    }\r\n\r\n    return new Point(x, y)\r\n}\r\n","import { Circle } from \"../../geometry/circle\"\r\nimport { randomInt } from \"../rndHelpers\"\r\nimport type { randomGeometryCircleConfig } from \"../rndTypes\"\r\nimport { rndVector } from \"./rndVector\"\r\n\r\nexport function rndCircle(userConfig?: randomGeometryCircleConfig): Circle {\r\n    const config = Object.assign(\r\n        {\r\n            center: {\r\n                x: { min: -10, max: 10 },\r\n                y: { min: -10, max: 10 }\r\n            },\r\n            pointsOnCircle: 8\r\n        }, userConfig)\r\n\r\n    const center = rndVector(config.center)\r\n\r\n    let rv, r\r\n    if (config.pointsOnCircle === 8) {\r\n        rv = randomInt(1, 3),\r\n            r = rv ** 2 + (rv + 1) ** 2\r\n    } else {\r\n        r = randomInt(1, 20)\r\n    }\r\n\r\n    return new Circle(center, r, true)\r\n}","import { Line } from \"../../geometry/line\"\r\nimport { Vector } from \"../../geometry/vector\"\r\nimport { randomIntSym } from \"../rndHelpers\"\r\nimport type { randomGeometryLineConfig } from \"../rndTypes\"\r\n\r\nexport function rndLine(userConfig?: randomGeometryLineConfig): Line {\r\n    const config = Object.assign(\r\n        {\r\n            A: {\r\n                x: randomIntSym(10),\r\n                y: randomIntSym(10)\r\n            },\r\n        }, userConfig)\r\n\r\n    // The A point exists.\r\n    const d = new Vector(\r\n        randomIntSym(10),\r\n        randomIntSym(10)\r\n    )\r\n\r\n    while (d.isNull) {\r\n        d.x = randomIntSym(10)\r\n        d.y = randomIntSym(10)\r\n    }\r\n\r\n    if (config.slope === 1) {\r\n        if (d.x.sign() !== d.y.sign()) {\r\n            d.y.opposite()\r\n        }\r\n    } else if (config.slope === -1) {\r\n        if (d.x.sign() !== d.y.sign()) {\r\n            d.y.opposite()\r\n        }\r\n    }\r\n\r\n    return new Line().fromPointAndDirection(new Vector(config.A.x, config.A.y), d)\r\n}","import { Line3 } from \"../../geometry/line3\"\r\nimport { Point } from \"../../geometry/point\"\r\nimport { Vector } from \"../../geometry/vector\"\r\nimport { randomIntSym } from \"../rndHelpers\"\r\nimport type { randomGeometryLine3Config } from \"../rndTypes\"\r\n\r\nexport function rndLine3(userConfig?: randomGeometryLine3Config): Line3 {\r\n    const config = Object.assign(\r\n        {\r\n            A: {\r\n                x: randomIntSym(10),\r\n                y: randomIntSym(10),\r\n                z: randomIntSym(10)\r\n            },\r\n            direction: {\r\n                x: randomIntSym(10),\r\n                y: randomIntSym(10),\r\n                z: randomIntSym(10)\r\n            }\r\n        }, userConfig)\r\n\r\n    // The direction vector exists.\r\n    const A = new Point(config.A.x, config.A.y, config.A.z)\r\n    const d = new Vector(config.direction.x, config.direction.y, config.direction.z)\r\n\r\n    return new Line3(A, d)\r\n}","import type {\r\n    randomCoefficientConfig,\r\n    randomEquationConfig,\r\n    randomGeometryCircleConfig,\r\n    randomGeometryLine3Config,\r\n    randomGeometryLineConfig,\r\n    randomGeometryPointConfig,\r\n    randomMonomConfig,\r\n    randomPolynomConfig\r\n} from \"./rndTypes\"\r\n\r\nimport { randomArray, randomBool, randomInt, randomIntSym, randomItem, randomPrime, shuffleArray } from \"./rndHelpers\"\r\nimport { rndFraction } from \"./coefficient/rndFraction\"\r\nimport { rndMonom } from \"./algebra/rndMonom\"\r\nimport { rndPolynom } from \"./algebra/rndPolynom\"\r\nimport { rndEquation } from \"./algebra/rndEquation\"\r\nimport { rndCircle } from \"./geometry/rndCircle\"\r\nimport { rndLine } from \"./geometry/rndLine\"\r\nimport { rndLine3 } from \"./geometry/rndLine3\"\r\nimport { rndVector } from \"./geometry/rndVector\"\r\n\r\nexport type * from \"./rndTypes\"\r\n\r\nexport const Random = {\r\n    equation: (config?: randomEquationConfig) => {\r\n        return rndEquation(config)\r\n    },\r\n\r\n    polynom: (config?: randomPolynomConfig) => {\r\n        return rndPolynom(config)\r\n    },\r\n\r\n    monom: (config?: randomMonomConfig) => {\r\n        return rndMonom(config)\r\n    },\r\n\r\n    fraction: (config?: randomCoefficientConfig) => {\r\n        return rndFraction(config)\r\n    },\r\n\r\n    number: (from: number, to: number, exclude?: number[]): number => {\r\n        return randomInt(from, to, exclude)\r\n    },\r\n\r\n    numberSym: (max: number, allowZero?: boolean): number => {\r\n        return randomIntSym(max, allowZero)\r\n    },\r\n\r\n    prime: (max: number): number => {\r\n        return randomPrime(max)\r\n    },\r\n\r\n    bool: (percent?: number): boolean => {\r\n        return randomBool(percent)\r\n    },\r\n\r\n    array: <T>(arr: T[], number?: number): T[] => {\r\n        return randomArray(arr, number)\r\n    },\r\n\r\n    item: <T>(arr: T[]): T => {\r\n        return randomItem(arr)\r\n    },\r\n\r\n    shuffle: <T>(arr: T[]): T[] => {\r\n        return shuffleArray(arr)\r\n    },\r\n\r\n    line: (config?: randomGeometryLineConfig) => {\r\n        return rndLine(config)\r\n    },\r\n\r\n    line3: (config?: randomGeometryLine3Config) => {\r\n        return rndLine3(config)\r\n    },\r\n\r\n    vector: (config?: randomGeometryPointConfig) => {\r\n        return rndVector(config)\r\n    },\r\n\r\n    point: (config?: randomGeometryPointConfig) => {\r\n        const vector = rndVector(config)\r\n        vector.asPoint = true\r\n\r\n        return vector\r\n    },\r\n\r\n    circle: (config?: randomGeometryCircleConfig) => {\r\n        return rndCircle(config)\r\n    }\r\n}","// Expose as global\r\nexport * from \"./coefficients\"\r\nexport * from \"./algebra\"\r\nexport * from \"./geometry\"\r\n\r\n// Import items individually to make a global object\r\n\r\n// Coefficients\r\nimport {Fraction, NthRoot} from \"./coefficients\"\r\n\r\n// Algebra\r\nimport {Equation, Factor, LinearSystem, LogicalSet, Monom, PolyFactor, Polynom, Matrix} from \"./algebra\"\r\n\r\n// Geometry\r\nimport {Circle, Line, Line3, Plane3, Point, Triangle, Vector, Sphere3} from \"./geometry\"\r\n\r\n// Numeric\r\nimport {Numeric} from \"./numeric\"\r\nexport {Numeric}\r\n\r\n// NumExp\r\nimport {NumExp} from \"piexpression\"\r\nexport {NumExp}\r\n\r\n// randomization\r\nimport {Random} from \"./randomization/random\"\r\nexport {Random}\r\n\r\n// Typesetting\r\nexport type * from \"./pimath.interface\"\r\n\r\n// Make a global object\r\nconst PiMath = {\r\n    Numeric,\r\n    Fraction,\r\n    Root: NthRoot,\r\n    Monom,\r\n    Polynom,\r\n    Equation,\r\n    Matrix,\r\n    LinearSystem,\r\n    Factor,\r\n    PolyFactor,\r\n    LogicalSet,\r\n    Random,\r\n    Geometry: {\r\n        Vector,\r\n        Point,\r\n        Line,\r\n        Triangle,\r\n        Circle,\r\n        Line3,\r\n        Plane3,\r\n        Sphere3\r\n    },\r\n    NumExp\r\n}\r\n\r\n// Export as default value\r\nexport default PiMath\r\n"],"names":["decompose","value","divs","dividers","arr","u","v","divideNumbersByGCD","values","g","greatestCommonDivisor","x","absV","maxV","D","i","a","b","gcd2","leastCommonMultiple","numberCorrection","number_of_digits","periodic","primes","nb","primesValues","pythagoreanTripletsWithTarget","target","targetIsSquare","triplets","targetValue","round","decimals","Numeric","_approximative","_denominator","_numerator","_type","_Fraction","denominatorOrPeriodic","__privateAdd","__publicField","S","__privateSet","decimal","p","F","__privateGet","N","k","f","sign","compareFraction","Q","n","than","controlNumerator","controlDenominator","result","fractions","M","m","compare","reverse","sorted","unique","distinct","R","Fraction","_radical","_nth","_coefficient","_isValid","NthRoot","radical","nthroot","coefficient","V","C","_equation","_variable","_EquationSolver_instances","makeApproximativeSolution_fn","makeSolution_fn","solveByBissection_fn","solveByBissection_algorithm_fn","solveByFactorization_fn","solveCubic_CardanFormula_fn","solveLinear_fn","solveQuadratic_fn","solveQuadratic_Output_fn","_EquationSolver","left","right","variable","equ","degree","__privateMethod","output","fraction","solutions","coeffs","B","dx","evaluatedPoints","searchValue","couples","index","couple","bissection","tol","fa","fb","mid","fmid","lcm","dividersA","dividersB","da","db","s","solver","c","d","an","bn","cn","q","P","delta","x1","x2","pv","qv","anv","delta2","f1","f2","deltaFactor","gcd","b2","a2","deltaGcd","deltaK1","deltaK2","texOutput","displayOutput","EquationSolver","_","e","A","h","t","O","o","T","r","w","U","y","I","l","E","_literal","_Monom_instances","cloneLiteral_fn","_evaluateAsNumeric","_shutingYardToReducedMonom","_shutingYard_AddToken","_Monom","mAsMonom","letter","dM","asNumeric","tmpValues","L","div","M1","M2","K","item","key","pow","inputStr","rpn","ShutingYard","stack","element","ShutingyardType","_a","q1","q2","letters","literals","monomDividers","primitive","tmpList","litt","currentLetter","monoms","Monom","wrapParenthesis","str","tex","replace_in_array","haystack","search","start","end","operation_pow","_factors","_monoms","_roots","_rootsCache","_compare","_divideByFraction","_divideByInteger","_factorize2ndDegree","_genDisplay","_getAllPotentialFactors","_multiplyByFraction","_multiplyByInteger","_multiplyByMonom","_multiplyByPolynom","_Polynom_instances","parseString_fn","_shutingYardToReducedPolynom","_shutingYard_addToken","_Polynom","polynomString","numerator","denominator","dP","quotient","reminder","maxMP","degreeP","newM","MaxIteration","monom","factors","tempPolynom","securityLoop","maxDegree","allDividers","pX","pC","dX","dC","denominators","numerators","valuesA","valuesB","pString","zero","Ms","j","revert","otherLetters","resultPolynom","cP1","cP2","m1","nbF","P1","P2","factor","xPolynom","xFactors","xyzPolynom","forceSign","wrapParentheses","withAllMultiplicationSign","m2","m1d","m2d","coeff","orderedPolynom","length","roots","signs","_x","_root","test","Polynom","_left","_right","_sign","_findSign","_formatSign","_reverseSign","_Equation","equationString","strSign","pStr","p1","p2","mMove","cMove","allLeft","move","signStr","solutionAsTex","uniqueSolutions","sol","Equation","_displayMode","_polynom","_power","_singleMode","_Factor","power","polynom","num","den","base","tos","Factor","FACTOR_DISPLAY","FACTOR_DISPLAY2","_equations","_variables","_findLetters","_makeMatrix","_LinearSystem","equations","operators","equStr","equArray","operatorsColumns","eq1","eq2","factor1","factor2","eq1multiplied","eq2multiplied","matrix","vector","augmentedMatrix","row","pivot","row_to_add","acc","cols","vars","LS","LinearSystem","_rpn","_LogicalSet_instances","evaluateAsVenn_fn","LogicalSet","ShutingyardMode","token","varStack","second","first","tokenSets","reference","referenceSet","_PolyFactor_static","gcdWith_fn","lcmWith_fn","_PolyFactor_instances","extractNumeratorAndDenominator_fn","_PolyFactor","numTeX","denTeX","PF","remainingPolynom","pf","dPF","derivativeFactor","newFactors","self","PF1","PF2","keyFactors","aPower","bPower","aLength","bLength","aDegree","bDegree","roots_key","empty_signs","root","aligned_signs","rootSign","factors1","factors2","power2","PolyFactor","k_numerator","k_denominator","kF","_matrix_parenthesis","_values","_Matrix","rowCount","colCount","duplicates","dup_row","wrapper","aij","rows","rows2","cols2","column","coMatrix","det","callback","rowItems","vectors","aij_are_equals","col","Matrix","areVectorsEquals","v1","v2","areVectorsColinears","dotProduct","determinantFromVectors","_array","_asPoint","_Vector","norm","scalar","sharp","radian","components","V1","V2","Vector","LinePropriety","Line3Propriety","randomBool","percent","randomInt","exclude","randomIntSym","max","randomPrime","randomItem","randomArray","number","shuffleArray","temp","Point","nbs","_reduceBeforeDisplay","_b","_c","_OA","_d","_n","_outputMode","_Line","pt","maxIterationTest","formattedValues","elem","orientation","line","Pt","isParallel","isSame","canonical","pt1","pt2","d2","iPt","Line","_center","_squareRadius","_cartesian","_tangentsThroughOnePointOnTheCircle","_tangentsThroughOnePointOutsideTheCircle","_tangentsWithSlope","_Circle_instances","reset_fn","calculateCartesian_fn","parseCopyCircle_fn","parseCenterAndRadius_fn","parseCenterAndPointThrough_fn","parseEquation_fn","_Circle","distance","radius","intersectionPoints","equX","lineX","lineY","numberIsInteger","points","triplet","CT","cx_px","cy_py","polyLeft","polyRight","slope","c1","c2","sq","cx","cy","square","circle","center","pointThrough","y2","y1","Circle","_Line3","OAx","OAy","OAz","nx","ny","nz","AP","num2","num2d2","dnum","Line3","_normal","_point","_Plane3","config","cartesian","AB","AC","direction","point","plane","Plane3","_A","_B","_C","_lines","_middles","_remarquables","_updateTriangle","_getPointByName","_getSegment","_calculateRemarquableLines","_calculateBisectors","_Triangle","BC","intersect","ptName","ptName1","ptName2","medians","mediators","heights","bA","bB","bC","bisectors","externalBisectors","remarquables","tlines","d1","d1n","d2n","d1Equ","d2Equ","b1","Triangle","SPHERE3_RELATIVE_POSITION","SPHERE3_RELATIVE_POSITION2","_format","_output","_Sphere3_instances","computeEquation_fn","Sphere3","asTex","r1","r2","equation","rndFraction","userConfig","securityCount","rndMonom","factorableConfig","rndPolynom","rndEquation","rndVector","zeroX","zeroY","rndCircle","rv","rndLine","rndLine3","Random","from","to","allowZero","PiMath","NumExp"],"mappings":"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,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM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","x_google_ignoreList":[4]}