import { Fraction, NthRoot } from './coefficients';
import { Equation, Factor, LinearSystem, LogicalSet, Monom, PolyFactor, Polynom } from './algebra';
import { Circle, Line, Line3, Matrix, Plane3, Point, Triangle, Vector } from './geometry';
import { NumExp } from 'piexpression';
export * from './coefficients';
export * from './algebra';
export * from './geometry';
export type * from './pimath.interface';
declare const PiMath: {
    Numeric: {
        decompose: (value: number) => number[][];
        dividers: (value: number) => number[];
        divideNumbersByGCD: (...values: number[]) => number[];
        gcd: (...values: number[]) => number;
        lcm: (...values: number[]) => number;
        numberCorrection: (value: number, number_of_digits?: number) => number;
        periodic: (value: number) => number;
        primes: (nb?: number) => number[];
        pythagoreanTripletsWithTarget: (target: number, targetIsSquare?: boolean) => number[][];
        round: (value: number, decimals?: number) => number;
    };
    Fraction: typeof Fraction;
    Root: typeof NthRoot;
    Monom: typeof Monom;
    Polynom: typeof Polynom;
    Equation: typeof Equation;
    Matrix: typeof Matrix;
    LinearSystem: typeof LinearSystem;
    Factor: typeof Factor;
    PolyFactor: typeof PolyFactor;
    LogicalSet: typeof LogicalSet;
    Random: {
        equation: (config?: import('./randomization/rndTypes').randomEquationConfig) => Equation;
        polynom: (config?: import('./randomization/rndTypes').randomPolynomConfig) => Polynom;
        monom: (config?: import('./randomization/rndTypes').randomMonomConfig) => Monom;
        fraction: (config?: import('./randomization/rndTypes').randomCoefficientConfig) => Fraction;
        number: (from: number, to: number, exclude?: number[]) => number;
        numberSym: (max: number, allowZero?: boolean) => number;
        prime: (max: number) => number;
        bool: (percent?: number) => boolean;
        array: <T>(arr: T[], number?: number) => T[];
        item: <T>(arr: T[]) => T;
        shuffle: <T>(arr: T[]) => T[];
        line: (config?: import('./randomization/rndTypes').randomGeometryLineConfig) => Line;
        line3: (config?: import('./randomization/rndTypes').randomGeometryLine3Config) => Line3;
        vector: (config?: import('./randomization/rndTypes').randomGeometryPointConfig) => Point;
        point: (config?: import('./randomization/rndTypes').randomGeometryPointConfig) => Point;
        circle: (config?: import('./randomization/rndTypes').randomGeometryCircleConfig) => Circle;
    };
    Geometry: {
        Vector: typeof Vector;
        Point: typeof Point;
        Line: typeof Line;
        Triangle: typeof Triangle;
        Circle: typeof Circle;
        Line3: typeof Line3;
        Plane3: typeof Plane3;
    };
    NumExp: typeof NumExp;
};
export default PiMath;
