{"version":3,"file":"pi.min.js","mappings":"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","sources":["webpack://pimath/./src/index.ts","webpack://pimath/./src/maths/algebra/equation.ts","webpack://pimath/./src/maths/algebra/linearSystem.ts","webpack://pimath/./src/maths/algebra/logicalset.ts","webpack://pimath/./src/maths/algebra/monom.ts","webpack://pimath/./src/maths/algebra/polynom.ts","webpack://pimath/./src/maths/algebra/rational.ts","webpack://pimath/./src/maths/algebra/study.ts","webpack://pimath/./src/maths/algebra/study/rationalStudy.ts","webpack://pimath/./src/maths/coefficients/fraction.ts","webpack://pimath/./src/maths/coefficients/nthRoot.ts","webpack://pimath/./src/maths/expressions/numexp.ts","webpack://pimath/./src/maths/expressions/polynomexp.ts","webpack://pimath/./src/maths/geometry/circle.ts","webpack://pimath/./src/maths/geometry/line.ts","webpack://pimath/./src/maths/geometry/point.ts","webpack://pimath/./src/maths/geometry/triangle.ts","webpack://pimath/./src/maths/geometry/vector.ts","webpack://pimath/./src/maths/numeric.ts","webpack://pimath/./src/maths/randomization/random.ts","webpack://pimath/./src/maths/randomization/randomCore.ts","webpack://pimath/./src/maths/randomization/rndFraction.ts","webpack://pimath/./src/maths/randomization/rndGeometryLine.ts","webpack://pimath/./src/maths/randomization/rndHelpers.ts","webpack://pimath/./src/maths/randomization/rndMonom.ts","webpack://pimath/./src/maths/randomization/rndPolynom.ts","webpack://pimath/./src/maths/shutingyard.ts","webpack://pimath/webpack/bootstrap","webpack://pimath/webpack/startup"],"sourcesContent":["import {Numeric} from \"./maths/numeric\";\r\nimport {NumExp} from \"./maths/expressions/numexp\";\r\nimport {Shutingyard} from \"./maths/shutingyard\";\r\nimport {Random} from \"./maths/randomization/random\";\r\nimport {Fraction} from \"./maths/coefficients/fraction\";\r\nimport {NthRoot} from \"./maths/coefficients/nthRoot\";\r\nimport {Monom} from \"./maths/algebra/monom\";\r\nimport {Polynom} from \"./maths/algebra/polynom\";\r\nimport {Equation} from \"./maths/algebra/equation\";\r\nimport {LinearSystem} from \"./maths/algebra/linearSystem\";\r\nimport {Rational} from \"./maths/algebra/rational\";\r\nimport {Logicalset} from \"./maths/algebra/logicalset\";\r\nimport {PolynomExpFactor, PolynomExpProduct} from \"./maths/expressions/polynomexp\";\r\nimport {Vector} from \"./maths/geometry/vector\";\r\nimport {Line} from \"./maths/geometry/line\";\r\nimport {Triangle} from \"./maths/geometry/triangle\";\r\nimport {Circle} from \"./maths/geometry/circle\";\r\nimport {Point} from \"./maths/geometry/point\";\r\n\r\n// Expose as global\r\nexport const PiMath = {\r\n    ShutingYard: Shutingyard,\r\n    Numeric: Numeric,\r\n    NumExp: NumExp,\r\n    Fraction: Fraction,\r\n    Root: NthRoot,\r\n    Monom: Monom,\r\n    Polynom: Polynom,\r\n    Equation: Equation,\r\n    LinearSystem: LinearSystem,\r\n    Rational: Rational,\r\n    Logicalset: Logicalset,\r\n    Random: Random,\r\n    PolynomExpFactor: PolynomExpFactor,\r\n    PolynomExpProduct: PolynomExpProduct,\r\n    Geometry: {\r\n        Vector: Vector,\r\n        Point: Point,\r\n        Line: Line,\r\n        Triangle: Triangle,\r\n        Circle: Circle\r\n    }\r\n};\r\n(<any>window).Pi = PiMath\r\n","import {Polynom} from \"./polynom\";\r\nimport {literalType, Monom} from \"./monom\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {NthRoot} from \"../coefficients/nthRoot\";\r\n\r\n/**\r\n * Equation is a class to manage equations...\r\n */\r\nexport interface ISolution {\r\n    tex: string,\r\n    display: string,\r\n    value: number,\r\n    exact: unknown\r\n}\r\n\r\nexport enum PARTICULAR_SOLUTION {\r\n    real=\"\\\\mathbb{R}\",\r\n    varnothing=\"\\\\varnothing\"\r\n}\r\n\r\nexport class Equation {\r\n    private _polynom: Polynom;  // Used to solve the equation // TODO: remove the private value ?\r\n\r\n    // Undetermined texSolutions.\r\n    private _varnothing: string = PARTICULAR_SOLUTION.varnothing;\r\n    private _real: string = PARTICULAR_SOLUTION.real;\r\n\r\n    /**\r\n     * Create an Equation using two polynoms.\r\n     * Markdown *support* is cool\r\n     * @param equations\r\n     */\r\n    constructor(...equations: unknown[]) {\r\n        // Default equation\r\n        this._left = new Polynom().zero();\r\n        this._right = new Polynom().zero();\r\n        this._sign = '=';\r\n\r\n        if (equations.length === 1) {\r\n            if (equations[0] instanceof Equation) {\r\n                return equations[0].clone();\r\n            } else if (typeof equations[0] === 'string') {\r\n                this.parse(equations[0]);\r\n            }\r\n        } else if (equations.length === 2) {\r\n            if (equations[0] instanceof Polynom) {\r\n                this.left = equations[0].clone()\r\n            } else if (typeof equations[0] === 'string') {\r\n                this.left = new Polynom(equations[0])\r\n            }\r\n\r\n            if (equations[1] instanceof Polynom) {\r\n                this.right = equations[1].clone()\r\n            } else if (typeof equations[1] === 'string') {\r\n                this.right = new Polynom(equations[1])\r\n            }\r\n        } else {\r\n            // Return default empty equation\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private _left: Polynom;  // Left part of the equation\r\n\r\n    get left(): Polynom {\r\n        return this._left;\r\n    }\r\n\r\n    set left(value: Polynom) {\r\n        this._left = value;\r\n    }\r\n\r\n    private _right: Polynom; // Right part of the equation\r\n\r\n    get right(): Polynom {\r\n        return this._right;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n\r\n    set right(value: Polynom) {\r\n        this._right = value;\r\n    }\r\n\r\n    private _sign: string;   // Signe of the equation, by default =\r\n\r\n    get sign(): string {\r\n        return this._sign;\r\n    }\r\n\r\n    set sign(value: string) {\r\n        // Set the sign value as formatted.\r\n        this._sign = this._formatSign(value);\r\n    }\r\n\r\n    private _solutions: ISolution[]\r\n\r\n    // ------------------------------------------\r\n    get solutions(): ISolution[] {\r\n        return this._solutions\r\n    }\r\n\r\n    get isEquation() {\r\n        return true;\r\n    }\r\n\r\n    get solution(): string {\r\n        if (this._solutions.length === 1\r\n            &&\r\n            (\r\n                this._solutions[0].tex === this._real\r\n                || this._solutions[0].tex === this._varnothing\r\n                || this._solutions[0].tex.includes('\\\\left')\r\n            )\r\n        ) {\r\n            return `S = ${this._solutions[0]}`;\r\n        }\r\n        return `S = \\\\left{ ${this._solutions.map(x => x.tex).join(';')} \\\\right}`;\r\n    }\r\n\r\n    get isReal(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0].tex === this._real;\r\n    }\r\n\r\n    get isVarnothing(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0].tex === this._varnothing;\r\n    }\r\n\r\n    get signAsTex(): string {\r\n        if (this._sign === '>=' || this._sign === '=>' || this._sign === 'geq') {\r\n            return '\\\\geq';\r\n        }\r\n        if (this._sign === '<=' || this._sign === '=<' || this._sign === 'leq') {\r\n            return '\\\\leq';\r\n        }\r\n        return this._sign;\r\n    }\r\n\r\n    get tex(): string {\r\n        return `${this._left.tex}${this.signAsTex}${this._right.tex}`;\r\n    }\r\n\r\n    get display(): string {\r\n        return `${this._left.display}${this.signAsTex}${this._right.display}`;\r\n    }\r\n\r\n    get raw(): string {\r\n        return `${this._left.raw}${this.signAsTex}${this._right.raw}`;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        return [...new Set(this._right.variables.concat(this._left.variables))];\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    hasVariable = (letter: string): boolean => {\r\n        return this.variables.includes(letter)\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n\r\n    // -----------------------------------------------\r\n    private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n        degree: 2\r\n    };\r\n\r\n    get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n        return this._randomizeDefaults;\r\n    }\r\n\r\n    set randomizeDefaults(value) {\r\n        this._randomizeDefaults = value;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    parse = (equationString: string): Equation => {\r\n        let pStr: string[], strSign: string | false;\r\n        // Find the string separator\r\n        strSign = this._findSign(equationString);\r\n\r\n        if (strSign === false) {\r\n            console.error('The equation is not valid (no sign found)');\r\n            return;\r\n        }\r\n\r\n        // The StrSign is found\r\n        pStr = equationString.split(strSign);\r\n\r\n        return this.create(new Polynom(pStr[0]), new Polynom(pStr[1]), this._formatSign(strSign));\r\n    };\r\n\r\n    create = (left: Polynom, right: Polynom, sign?: string): Equation => {\r\n        this._left = left;\r\n        this._right = right;\r\n        this._sign = this._formatSign(sign);\r\n        return this;\r\n    };\r\n\r\n    clone = (): Equation => {\r\n        return new Equation().create(this._left.clone(), this._right.clone(), this._sign + '');\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n\r\n    randomize = (opts?: {}, sign?: string): Equation => {\r\n        // TODO: Generate equations randomly, using config.\r\n        return new Equation().create(new Polynom(), new Polynom(), sign);\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    /**\r\n     * Reorder will move all monoms containing a letter on the left, all the other on the right.\r\n     */\r\n    moveLeft = (): Equation => {\r\n        this._left = this._left.clone().subtract(this._right)\r\n        this._right.zero()\r\n        return this;\r\n    }\r\n\r\n    reorder = (allLeft?: boolean): Equation => {\r\n        // Move all monoms of degree greater than 0 to the left.\r\n        // and all zero degree monoms to the right.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n        this._left.reorder()\r\n\r\n        // we eant all left (so equal zero) : it's done !\r\n        if (allLeft) return this\r\n\r\n        // Fetch all zero degree monoms.\r\n        this._left.monoms\r\n            .filter(m=>m.degree().isZero())\r\n            .forEach(m=> {\r\n                const move = m.clone()\r\n                this._left.subtract(move)\r\n                this._right.subtract(move)\r\n            })\r\n\r\n\r\n        // Reorder the left and right polynoms\r\n        this._left.reorder();\r\n        this._right.reorder();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiply by the lcm denominator and divide by the gcm numerators.\r\n     */\r\n    simplify = (): Equation => {\r\n        this.multiply(Numeric.lcm(...this._left.getDenominators(), ...this._right.getDenominators()));\r\n        this.divide(Numeric.gcd(...this._left.getNumerators(), ...this._right.getNumerators()));\r\n        return this;\r\n    }\r\n\r\n\r\n    // -----------------------------------------------\r\n    // Equations operations\r\n\r\n    /**\r\n     * Reorder the polynom to have only one letter on the left, the rest on the right.\r\n     * @param letter\r\n     */\r\n    isolate = (letter?: string): Equation | false => {\r\n        // Determine if we can isolate the variables.\r\n\r\n        // Both part of the equations must be of the first degree.\r\n        //TODO: handle equations of degree two or more ?\r\n        if (!this.degree(letter).isOne()) {\r\n            return false;\r\n        }\r\n\r\n        // Modify the equation to isolate the asked variable.\r\n        // TODO: must handle equations like 3xy+5y=4 => y = 4/(3x-5)\r\n        if (this.isMultiVariable()) {\r\n            return false;\r\n        }\r\n\r\n        // Isolate the letter.\r\n        let mMove: Monom, cMove: Fraction;\r\n        // Start by moving everything to the left.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n        let values = [...this._left.monoms]\r\n        for (let m of values) {\r\n            if (!m.hasLetter(letter)) {\r\n                mMove = m.clone();\r\n                this._left.subtract(mMove);\r\n                this._right.subtract(mMove);\r\n            }\r\n        }\r\n\r\n        // In theory, we should have only one item on the left.\r\n        if (this._left.length !== 1) {\r\n            return false;\r\n        }\r\n        cMove = this._left.monoms[0].coefficient.clone();\r\n        this._left.divide(cMove);\r\n        this._right.divide(cMove);\r\n        return this;\r\n    };\r\n\r\n    replaceBy = (letter: string, P: Polynom): Equation => {\r\n        this._left.replaceBy(letter, P)\r\n        this._right.replaceBy(letter, P)\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiple an equation by a fraction value.\r\n     * @param value\r\n     */\r\n    multiply = (value: unknown): Equation => {\r\n\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        // Multiply each part of the equation by the fraction\r\n        this._left.multiply(F);\r\n        this._right.multiply(F);\r\n\r\n        // The sign of the inequation must be changed.\r\n        if (this._sign !== '=' && F.sign() === -1) {\r\n            this._reverseSign();\r\n        }\r\n\r\n        return this.reorder();\r\n    };\r\n\r\n    /**\r\n     * divide an equation by a given value (transformed as a fraction)\r\n     *\r\n     * ```\r\n     * 8x+10=6x \\vert 2\r\n     * 4x+5=3x\r\n     * ```\r\n     *\r\n     * |>Alternatively with $3x-4$ maybe it's working ?\r\n     * $$\\frac{3x}{5}$$\r\n     *\r\n     * @param value\r\n     * @returns {Equation}\r\n     */\r\n    divide = (value: unknown): Equation => {\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        if (F.isZero()) {\r\n            return this;\r\n        } else {\r\n            return this.multiply(F.invert());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the degree of the equation\r\n     * @param letter\r\n     */\r\n    degree = (letter?: string): Fraction => {\r\n        return Fraction.max(this._left.degree(letter), this._right.degree(letter));\r\n    };\r\n\r\n    /**\r\n     * Determine if the equation contains more than one letter/variable.\r\n     */\r\n    isMultiVariable = (): boolean => {\r\n        return this._left.isMultiVariable || this._right.isMultiVariable;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        // @ts-ignore\r\n        return [...new Set([...this._left.letters(), ...this._right.letters()])];\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations helpers\r\n    // -----------------------------------------------\r\n\r\n    // -----------------------------------------------\r\n    solve = (): Equation => {\r\n        // Initialise the variables:\r\n        this._solutions = [];\r\n\r\n        // TODO: consolidate solving equations (inequations vs equations)\r\n        // TODO: work with not natural degrees ?\r\n        this._polynom = this._left.clone().subtract(this._right);\r\n\r\n        switch (this._polynom.degree().value) {\r\n            case 0:\r\n            case 1:\r\n                this._solveDegree1();\r\n                break;\r\n            case 2:\r\n                this._solveDegree2();\r\n                break;\r\n            default:\r\n                this._solveDegree3plus();\r\n        }\r\n\r\n        // cleanup the solutions.\r\n        this._solutions = Equation.makeSolutionsUnique(this._solutions)\r\n        return this;\r\n    };\r\n\r\n    static makeSolutionsUnique(solutions: ISolution[], sorted?: boolean):ISolution[] {\r\n        let solutionAsTex:string[] = [],\r\n            uniqueSolutions = solutions.filter(sol=>{\r\n                if(!solutionAsTex.includes(sol.tex)){\r\n                    solutionAsTex.push(sol.tex)\r\n                    return true\r\n                }else{\r\n                    return false\r\n                }\r\n            })\r\n\r\n        if(sorted===true){\r\n            uniqueSolutions.sort((a, b)=>a.value-b.value)\r\n        }\r\n        return uniqueSolutions\r\n    }\r\n\r\n    test = (values: literalType): Boolean => {\r\n        return this.left.evaluate(values).isEqual(this.right.evaluate(values))\r\n    }\r\n\r\n    private _findSign = (equationString: string): string | false => {\r\n        let strSign: string = '';\r\n\r\n        if (equationString.includes('geq')) {\r\n            return (equationString.includes('\\\\geq')) ? '\\\\geq' : 'geq';\r\n        } else if (equationString.includes('leq')) {\r\n            return (equationString.includes('\\\\leq')) ? '\\\\leq' : 'leq';\r\n        } else if (equationString.includes('>=')) {\r\n            return '>=';\r\n        } else if (equationString.includes('=>')) {\r\n            return '=>';\r\n        } else if (equationString.includes('>')) {\r\n            return '>';\r\n        } else if (equationString.includes('<=')) {\r\n            return '<=';\r\n        } else if (equationString.includes('=<')) {\r\n            return '=<';\r\n        } else if (equationString.includes('<')) {\r\n            return '<';\r\n        } else if (equationString.includes('=')) {\r\n            return '='\r\n        }\r\n        if (strSign === '') {\r\n            console.log('Equation: parse string : sign not found');\r\n            return false;\r\n        }\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Equations solving algorithms\r\n\r\n    private _formatSign = (signStr: string): string => {\r\n        if (signStr === undefined) {\r\n            return '=';\r\n        }\r\n\r\n        if (signStr.includes('geq')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>=')) {\r\n            return '>=';\r\n        } else if (signStr.includes('=>')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>')) {\r\n            return '>';\r\n        } else if (signStr.includes('leq')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<=')) {\r\n            return '<=';\r\n        } else if (signStr.includes('=<')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<')) {\r\n            return '<';\r\n        } else {\r\n            return '='\r\n        }\r\n    };\r\n\r\n    private _reverseSign = (): Equation => {\r\n        if (this._sign === '=') {\r\n            return this;\r\n        }\r\n\r\n        if (this._sign.includes('<')) {\r\n            this._sign.replace('<', '>');\r\n            return this;\r\n        }\r\n        if (this._sign.includes('>')) {\r\n            this._sign.replace('>', '<');\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    private isGreater = (): boolean => {\r\n        if (this._sign.indexOf('>') !== -1) {\r\n            return true;\r\n        }\r\n        return this._sign.indexOf('geq') !== -1;\r\n\r\n    };\r\n\r\n    private isStrictEqual = (): boolean => {\r\n        return this._sign === '=';\r\n    };\r\n\r\n    private isAlsoEqual = (): boolean => {\r\n        if (this._sign.indexOf('=') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('geq') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('leq') !== -1) {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    private _solveDegree1 = (letter?: string): ISolution[] => {\r\n        const m1 = this._polynom.monomByDegree(1, letter).coefficient,\r\n            m0 = this._polynom.monomByDegree(0, letter).coefficient,\r\n            v = m0.clone().opposed().divide(m1);\r\n        let s: string, d: string;\r\n\r\n        if (this.isStrictEqual()) {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0) {\r\n                    this._solutions = [{\r\n                        tex: this._real,\r\n                        display: \"RR\",\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                } else {\r\n                    this._solutions = [{\r\n                        tex: this._varnothing,\r\n                        display: \"O/\",\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                }\r\n            } else {\r\n                this._solutions = [{\r\n                    tex: v.tex,\r\n                    display: v.display,\r\n                    value: v.value,\r\n                    exact: v\r\n                }]\r\n            }\r\n        }\r\n        else {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0 && this.isAlsoEqual()) {\r\n                    s = '\\\\mathbb{R}';\r\n                    d = \"RR\"\r\n                } else {\r\n                    if (m0.value > 0) {\r\n                        s = this.isGreater() ? this._real : this._varnothing;\r\n                        s = this.isGreater() ? \"RR\" : \"O/\";\r\n                    } else {\r\n                        s = !this.isGreater() ? this._real : this._varnothing;\r\n                        s = !this.isGreater() ? \"RR\" : \"O/\";\r\n                    }\r\n                }\r\n            } else {\r\n                // Must handle the case if the m1 monom is negative.\r\n                if ((this.isGreater() && m1.sign() === 1) || (!this.isGreater() && m1.sign() === -1)) {\r\n                    s = `\\\\left${this.isAlsoEqual() ? '[' : ']'}${v.tex};+\\\\infty\\\\right[`;\r\n                    d = `${this.isAlsoEqual() ? '[' : ']'}${v.tex};+oo[`;\r\n                } else {\r\n                    s = `\\\\left]-\\\\infty;${v.tex} \\\\right${this.isAlsoEqual() ? ']' : '['}`;\r\n                    d = `]-oo;${v.tex}${this.isAlsoEqual() ? ']' : '['}`;\r\n                }\r\n            }\r\n            this._solutions = [{\r\n                tex: s,\r\n                display: d,\r\n                value: NaN,\r\n                exact: false\r\n            }];\r\n        }\r\n\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree2 = (letter?: string): ISolution[] => {\r\n        let aF = this._polynom.monomByDegree(2, letter).coefficient,\r\n            bF = this._polynom.monomByDegree(1, letter).coefficient,\r\n            cF = this._polynom.monomByDegree(0, letter).coefficient,\r\n            delta: number, nthDelta: NthRoot,\r\n            lcm = Numeric.lcm(aF.denominator, bF.denominator, cF.denominator),\r\n            a = aF.multiply(lcm).value,\r\n            b = bF.multiply(lcm).value,\r\n            c = cF.multiply(lcm).value,\r\n            realX1: number, realX2: number,\r\n            sX1: string, sX2: string;\r\n\r\n        delta = b * b - 4 * a * c;\r\n\r\n        if (delta > 0) {\r\n            realX1 = (-b - Math.sqrt(delta)) / (2 * a);\r\n            realX2 = (-b + Math.sqrt(delta)) / (2 * a);\r\n\r\n            if (delta > 1.0e5) {\r\n                // The delta is too big to be parsed !\r\n                let v1 = ((-b - Math.sqrt(delta)) / (2 * a)).toFixed(5),\r\n                    v2 = ((-b + Math.sqrt(delta)) / (2 * a)).toFixed(5)\r\n\r\n                this._solutions = [\r\n                    {\r\n                        tex: v1,\r\n                        display: v1,\r\n                        value: realX1,\r\n                        exact: false\r\n                    },\r\n                    {\r\n                        tex: v2,\r\n                        display: v2,\r\n                        value: realX2,\r\n                        exact: false\r\n                    }\r\n                ]\r\n            } else {\r\n                nthDelta = new NthRoot(delta).reduce();\r\n                if (nthDelta.hasRadical()) {\r\n                    // -b +- coeff\\sqrt{radical}\r\n                    // -------------------------\r\n                    //           2a\r\n                    let gcd = Numeric.gcd(b, 2 * a, nthDelta.coefficient),\r\n                        am = a/gcd, bm = b/gcd\r\n                    nthDelta.coefficient = nthDelta.coefficient / gcd;\r\n\r\n                    if (a < 0) {\r\n                        am = -am\r\n                        bm = -bm\r\n                    }\r\n\r\n                    let tex1 = \"\", tex2 = \"\", display1 = \"\", display2 = \"\"\r\n\r\n                    tex1 = `${bm !== 0 ? ((-bm) + ' - ') : ''}${nthDelta.tex}`\r\n                    tex2 = `${bm !== 0 ? ((-bm) + ' + ') : ''}${nthDelta.tex}`\r\n                    display1 = `${bm !== 0 ? ((-bm) + ' - ') : ''}${nthDelta.display}`\r\n                    display2 = `${bm !== 0 ? ((-bm) + ' + ') : ''}${nthDelta.display}`\r\n\r\n                    if (am !== 1) {\r\n                        tex1 = `\\\\frac{ ${tex1} }{ ${2 * am} }`\r\n                        tex2 = `\\\\frac{ ${tex2} }{ ${2 * am} }`\r\n                    }\r\n\r\n                    this._solutions = [\r\n                        {\r\n                            tex: tex1,\r\n                            display: tex1,\r\n                            value: realX1,\r\n                            exact: false\r\n                        },\r\n                        {\r\n                            tex: tex2,\r\n                            display: tex2,\r\n                            value: realX2,\r\n                            exact: false\r\n                        },\r\n                    ]\r\n\r\n\r\n                    // if (b !== 0) {\r\n                    //     if (2 * a / gcd === 1) {\r\n                    //         this._solutions = [\r\n                    //             {\r\n                    //                 tex: `${-b / gcd} - ${nthDelta.tex}`,\r\n                    //                 value: realX1,\r\n                    //                 exact: false // TODO: implement exact value with nthroot\r\n                    //             },\r\n                    //             {\r\n                    //                 tex: `${-b / gcd} + ${nthDelta.tex}`,\r\n                    //                 value: realX2,\r\n                    //                 exact: false\r\n                    //             },\r\n                    //\r\n                    //         ]\r\n                    //     } else {\r\n                    //         this._solutions = [\r\n                    //             {\r\n                    //                 tex: `\\\\frac{${-b / gcd} - ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                    //                 value: realX1,\r\n                    //                 exact: false\r\n                    //             },\r\n                    //             {\r\n                    //                 tex: `\\\\frac{${-b / gcd} + ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                    //                 value: realX2,\r\n                    //                 exact: false\r\n                    //             },\r\n                    //         ]\r\n                    //     }\r\n                    // } else {\r\n                    //     if (2 * a / gcd === 1) {\r\n                    //         this._solutions = [\r\n                    //             {\r\n                    //                 tex: `- ${nthDelta.tex}`,\r\n                    //                 value: realX1,\r\n                    //                 exact: false\r\n                    //             },\r\n                    //             {\r\n                    //                 tex: `${nthDelta.tex}`,\r\n                    //                 value: realX2,\r\n                    //                 exact: false\r\n                    //             },\r\n                    //         ]\r\n                    //     } else {\r\n                    //         this._solutions = [\r\n                    //             {\r\n                    //                 tex: `\\\\frac{- ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                    //                 value: realX1,\r\n                    //                 exact: false\r\n                    //             },\r\n                    //             {\r\n                    //                 tex: `\\\\frac{${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                    //                 value: realX2,\r\n                    //                 exact: false\r\n                    //             },\r\n                    //         ]\r\n                    //     }\r\n                    // }\r\n                } else {\r\n                    // -b +- d / 2a\r\n                    const S1 = new Fraction(-b - nthDelta.coefficient, 2 * a).reduce(),\r\n                        S2 = new Fraction(-b + nthDelta.coefficient, 2 * a).reduce()\r\n                    this._solutions = [\r\n                        {\r\n                            tex: S1.frac,\r\n                            display: S1.display,\r\n                            value: realX1,\r\n                            exact: S1\r\n                        },\r\n                        {\r\n                            tex: S2.frac,\r\n                            display: S2.display,\r\n                            value: realX2,\r\n                            exact: S2\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n\r\n        } else if (delta === 0) {\r\n            const sol = new Fraction(-b, 2 * a).reduce()\r\n            this._solutions = [{\r\n                tex: sol.frac,\r\n                display: sol.display,\r\n                value: sol.value,\r\n                exact: sol\r\n            }];\r\n        } else {\r\n            this._solutions = [{\r\n                tex: this._varnothing,\r\n                display: \"O/\",\r\n                value: NaN,\r\n                exact: false\r\n            }];\r\n        }\r\n\r\n        // Handle now the inequations.\r\n        if (!this.isStrictEqual()) {\r\n            if (this._solutions.length === 2) {\r\n                sX1 = (realX1 < realX2) ? this._solutions[0].tex : this._solutions[1].tex;\r\n                sX2 = (realX1 < realX2) ? this._solutions[1].tex : this._solutions[0].tex;\r\n\r\n                if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                    this._solutions = [{\r\n                        tex: `\\\\left]-\\\\infty ; ${sX1}\\\\right${this.isAlsoEqual() ? ']' : '['} \\\\cup \\\\left${this.isAlsoEqual() ? '[' : ']'}${sX2};+\\\\infty\\\\right[`,\r\n                        display: `]-oo;${sX1}${this.isAlsoEqual() ? ']' : '['}uu${this.isAlsoEqual() ? '[' : ']'}${sX2};+oo[`,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }\r\n                    ];\r\n                } else {\r\n                    this._solutions = [{\r\n                        tex: `\\\\left${this.isAlsoEqual() ? '[' : ']'}${sX1} ; ${sX2}\\\\right${this.isAlsoEqual() ? ']' : '['}`,\r\n                        display: `${this.isAlsoEqual() ? '[' : ']'}${sX1};${sX2}${this.isAlsoEqual() ? ']' : '['}`,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }]\r\n                }\r\n            } else if (this._solutions.length === 1 && this._solutions[0].tex !== this._varnothing) {\r\n                if (!this.isAlsoEqual()) {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [{\r\n                            tex: `\\\\left]-\\\\infty ; ${this._solutions[0].tex}\\\\right[ \\\\cup \\\\left]${this._solutions[0].tex};+\\\\infty\\\\right[`,\r\n                            display: `]-oo;${this._solutions[0].tex}[uu]${this._solutions[0].tex};+oo[`,\r\n                            value: NaN,\r\n                            exact: false\r\n                        }\r\n                        ];\r\n                    } else {\r\n                        this._solutions = [{\r\n                            tex: this._varnothing,\r\n                            display: \"O/\",\r\n                            value: NaN,\r\n                            exact: false\r\n                        }];\r\n                    }\r\n                } else {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [{\r\n                            tex: this._real,\r\n                            display: \"RR\",\r\n                            value: NaN,\r\n                            exact: false\r\n                        }];\r\n                    } else {\r\n                        // this._texSolutions = [ this._texSolutions[0] ];\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.isGreater()) {\r\n                    this._solutions = [{\r\n                        tex: aF.sign() === 1 ? this._real : this._varnothing,\r\n                        display: aF.sign() === 1 ? \"RR\" : \"O/\",\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                } else {\r\n                    this._solutions = [{\r\n                        tex: aF.sign() === -1 ? this._real : this._varnothing,\r\n                        display: aF.sign() === -1 ? \"RR\" : \"O/\",\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                }\r\n            }\r\n        }\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree3plus = (letter?: string): ISolution[] => {\r\n        // Push everything to the left\r\n        // factorize\r\n        // solve each factors.\r\n        let equ = this.clone().moveLeft()\r\n        equ.left.factorize()\r\n\r\n        this._solutions = []\r\n\r\n        equ.left.factors.forEach(factor=>{\r\n            if(factor.degree(letter).leq(2)) {\r\n                let factorAsEquation = new Equation(factor, 0)\r\n                factorAsEquation.solve()\r\n                factorAsEquation.solutions.forEach(solution => {\r\n                    this._solutions.push(solution)\r\n                })\r\n            }else{\r\n                console.log(factor.tex, ': cannot actually get the solution of this equation')\r\n            }\r\n        })\r\n\r\n        // TODO: check equation resolution for more than degree 2\r\n        // this._solutions = [{tex: 'solve x - not yet handled', value: NaN, exact: false}];  // ESLint remove system :(\r\n        return this._solutions;\r\n    };\r\n}","import {Equation, ISolution} from \"./equation\";\r\nimport {Monom} from \"./monom\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Polynom} from \"./polynom\";\r\nimport {Numeric} from \"../numeric\";\r\n\r\n// TODO: Must check and rework\r\nexport class LinearSystem {\r\n    // Stores the original equations\r\n    private _equations: Equation[];\r\n    // Determine the letters in the linear system, usually ['x', 'y']\r\n    private _letters: string[];\r\n    // Resolution steps contains each steps\r\n    // letter : target letter\r\n    // steps: {system: current LinearSystem, operations: [*3,/5] or [[*3,*2], [,*5], [*2,]]}\r\n    private _resolutionSteps: {\r\n        [key: string]: {\r\n            equations: Equation[],\r\n            operations: (string[])[]\r\n        }[]\r\n    };\r\n    // Get the solution of the equation\r\n    private _solutions: { [letter: string]: ISolution };\r\n\r\n    constructor(...equationStrings: (string | Equation)[]) {\r\n        // TODO: allow construction to accept an array of values (like a matrix) to build the equations\r\n        this._equations = [];\r\n        this._letters = 'xyz'.split('');\r\n\r\n        if (equationStrings !== undefined && equationStrings.length > 0) {\r\n            this.parse(...equationStrings);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equations(): Equation[] {\r\n        return this._equations;\r\n    }\r\n\r\n    set equations(value) {\r\n        this._equations = value;\r\n    }\r\n\r\n    get letters(): string {\r\n        return this._letters.join('')\r\n    }\r\n\r\n    set letters(value: string) {\r\n        this._letters = value.split('');\r\n    }\r\n\r\n    get isSolvable(): boolean {\r\n        let V = this.variables;\r\n\r\n        // TODO: in some case, it is possible to resolve systems if there isn't the isSame number of vars and equations\r\n        if (V.length !== this._equations.length) {\r\n            return false;\r\n        }\r\n\r\n        //TODO: Must check if two equations isn't a linear combination of the others ?\r\n\r\n        return true;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        return this._letters\r\n    }\r\n\r\n    get tex(): string {\r\n        // Build the array of values.\r\n        // Reorder\r\n        // This clone the system :!!!\r\n        //TODO: Avoid cloning this linear system\r\n        let LS = this.clone().reorder(),\r\n            letters = LS.variables\r\n\r\n        return this.buildTex(LS.equations)\r\n    }\r\n\r\n    get solution(): string {\r\n        let tex: string[] = [];\r\n\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n\r\n        for (let letter in this._solutions) {\r\n            if (this._solutions[letter].display === \"RR\") {\r\n                return `\\\\left\\\\{ \\\\left(${this._letters.join(';')}\\\\right) \\\\big\\\\vert ${this.equations[0].tex} \\\\right\\\\}`;\r\n            }\r\n            if (this._solutions[letter].display === \"O/\") {\r\n                return `\\\\varnothing`\r\n            }\r\n\r\n            tex.push(this._solutions[letter].tex);\r\n        }\r\n        return `\\\\left(${tex.join(';')}\\\\right)`;\r\n    }\r\n\r\n    buildTex = (equations: Equation[], operators?: (string[])[]): string => {\r\n        let equStr: string[],\r\n            equArray: string[] = [],\r\n            m: Monom,\r\n            letters: string[] = []\r\n\r\n        // Get the letters from the linear system\r\n        for (let equ of equations) {\r\n            letters = letters.concat(equ.letters())\r\n        }\r\n        letters = [...new Set(letters)]\r\n        letters.sort()\r\n\r\n        for (let i = 0; i < equations.length; i++) {\r\n            let equ = equations[i]\r\n\r\n            equStr = [];\r\n            for (let L of letters) {\r\n                m = equ.left.monomByLetter(L);\r\n\r\n                if (equStr.length === 0) {\r\n                    equStr.push(m.isZero() ? '' : m.tex);\r\n                } else {\r\n                    equStr.push(m.isZero() ? '' : ((m.coefficient.sign() === 1) ? '+' : '') + m.tex);\r\n                }\r\n            }\r\n\r\n            // Add the equal sign\r\n            equStr.push('=');\r\n\r\n            // Add the right hand part of the equation (should be only a number, because it has been reordered)\r\n            equStr.push(equ.right.tex);\r\n\r\n            // Add the operations if existing\r\n            if (operators !== undefined && operators[i] !== undefined) {\r\n                // add extra space at the end of the equation\r\n                equStr[equStr.length - 1] = equStr[equStr.length - 1] + ' \\\\phantom{\\\\quad}'\r\n                for (let o of operators[i]) {\r\n                    equStr.push(`\\\\ \\\\cdot\\\\ ${o.startsWith('-') ? \"\\\\left(\" + o + \"\\\\right)\" : o}`)\r\n                }\r\n            }\r\n\r\n            // Add to the list.\r\n            equArray.push(equStr.join('&'));\r\n        }\r\n\r\n        let operatorsColumns = 0\r\n        if (operators !== undefined && operators.length > 0) {\r\n            operatorsColumns = operators[0].length\r\n        }\r\n        return `\\\\left\\\\{\\\\begin{array}{${\"r\".repeat(letters.length)}cl ${\"|l\".repeat(operatorsColumns)}}${equArray.join('\\\\\\\\\\ ')}\\\\end{array}\\\\right.`;\r\n    }\r\n\r\n    stepTex = (letter: string): string => {\r\n        const steps = this._resolutionSteps[letter]\r\n\r\n        if (steps === undefined) {\r\n            return ''\r\n        }\r\n\r\n        // steps = { equations[], operations: [[],[]]\r\n        let tex: string[] = []\r\n        for (let i = 0; i < steps.length; i++) {\r\n            tex.push(this.buildTex(steps[i].equations, steps[i].operations))\r\n        }\r\n\r\n        return `\\\\begin{aligned}&${tex.join('\\\\\\\\&')}\\\\end{aligned}`\r\n\r\n    }\r\n\r\n\r\n    get resolutionSteps(): { [p: string]: { equations: Equation[]; operations: string[][] }[] } {\r\n        return this._resolutionSteps;\r\n    }\r\n\r\n// ------------------------------------------\r\n    // Creation / parsing functions\r\n\r\n    // ------------------------------------------\r\n    parse = (...equations: (string | Equation)[]): LinearSystem => {\r\n        // make the original equations\r\n        this._equations = equations.map(value => new Equation(value));\r\n        // get the letters.\r\n        this._findLetters();\r\n        return this;\r\n    };\r\n\r\n    clone = (): LinearSystem => {\r\n        return new LinearSystem().parse(...this._equations.map(equ => equ.clone()));\r\n    };\r\n\r\n    // ------------------------------------------\r\n    reorder = (): LinearSystem => {\r\n        for (let E of this._equations) {\r\n            E.reorder();\r\n        }\r\n        return this;\r\n    };\r\n\r\n\r\n    // -----------------------------------------------\r\n    // Equations solving algorithms\r\n\r\n    solve = (withResolution?: boolean): LinearSystem => {\r\n        // Solve it by linear\r\n        this._solutions = {};\r\n        this._resolutionSteps = {};\r\n\r\n        // Reorder all equations.\r\n        this.reorder();\r\n\r\n        if (withResolution === undefined) {\r\n            withResolution = false\r\n        }\r\n\r\n        for (let letter of this.variables) {\r\n            this._solutions[letter] = this._solveOneLetter(letter, withResolution)\r\n        }\r\n\r\n        // TODO: LinearSystem - solve: optimization and handle undetermined and undefined systems.\r\n        return this;\r\n    };\r\n\r\n    mergeEquations = (eq1: Equation, eq2: Equation, factor1: Fraction, factor2: Fraction): Equation => {\r\n        // Set and clone the equations.\r\n\r\n        let eq1multiplied = eq1.clone().multiply(new Fraction(factor1)),\r\n            eq2multiplied = eq2.clone().multiply(new Fraction(factor2));\r\n\r\n        // Add both equations together.\r\n        eq1multiplied.left.add(eq2multiplied.left);\r\n        eq1multiplied.right.add(eq2multiplied.right);\r\n\r\n        return eq1multiplied;\r\n    }\r\n\r\n    private _findLetters = (): LinearSystem => {\r\n        // Find all letters used.\r\n        let variables: Set<string> = new Set();\r\n\r\n        for (let equ of this._equations) {\r\n            variables = new Set([...variables, ...equ.variables]);\r\n        }\r\n\r\n        this._letters = [...variables];\r\n        this._letters.sort()\r\n        return this;\r\n    }\r\n\r\n    private _linearReduction(eq1: Equation, eq2: Equation, letter: string): { merged: Equation, factors: Fraction[] } {\r\n        // Get the monom for the particular letter.\r\n        let c1 = eq1.left.monomByDegree(1, letter).coefficient.clone(),\r\n            c2 = eq2.left.monomByDegree(1, letter).coefficient.clone().opposed();\r\n\r\n        // Reduce c1 and c2 by the gcd\r\n        const gcdN = Numeric.gcd(c1.numerator, c2.numerator),\r\n            gcdD = Numeric.gcd(c1.denominator, c2.denominator)\r\n        c1.divide(gcdN).multiply(gcdD)\r\n        c2.divide(gcdN).multiply(gcdD)\r\n\r\n        // if one value is -1, use 1 and make the other one opposed\r\n        if (c2.isNegativeOne()) {\r\n            c1.opposed()\r\n            c2.opposed()\r\n        } else if (c1.isNegativeOne()) {\r\n            c1.opposed()\r\n            c2.opposed()\r\n        }\r\n\r\n        return {\r\n            merged: this.mergeEquations(eq1, eq2, c2, c1),\r\n            factors: [c2, c1]\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Linear reduction of the equations to have only one letter\r\n     * @param letter    letter to isolate\r\n     * @private\r\n     */\r\n    private _solveOneLetter(letter: string, withResolution: boolean): ISolution {\r\n        // list of equations.\r\n        let LE: Equation[] = this.clone().equations,\r\n            reducedEquations: Equation[] = [],\r\n            lastIndex\r\n\r\n        this._resolutionSteps[letter] = []\r\n\r\n        // Reduce the equations.\r\n        // Do it as long as there is more than one step, but no more than the number of equations.\r\n        for (let L of this.variables) {\r\n            // Reset the stack\r\n            reducedEquations = [];\r\n\r\n            // remove the setLetter from all equations using linear combinations\r\n            if (L === letter) continue;\r\n\r\n            if (withResolution) {\r\n                this._resolutionSteps[letter].push({\r\n                    equations: LE.map(x => x.clone()),\r\n                    operations: [...new Array(LE.length)].map(x => [...new Array(LE.length - 1)].map(x => \"\"))\r\n                })\r\n                lastIndex = this._resolutionSteps[letter].length - 1\r\n            }\r\n\r\n            // Linear reduction.\r\n            for (let i = 0; i < LE.length - 1; i++) {\r\n                const result = this._linearReduction(LE[i], LE[i + 1], L)\r\n                reducedEquations.push(result.merged)\r\n\r\n                if (withResolution) {\r\n                    this._resolutionSteps[letter][lastIndex].operations[i][i] = result.factors[0].tex\r\n                    this._resolutionSteps[letter][lastIndex].operations[i + 1][i] = result.factors[1].tex\r\n                }\r\n            }\r\n\r\n            LE = [...reducedEquations]\r\n        }\r\n\r\n        // Solve the equations\r\n        // let E = this._resolutionSteps[this._resolutionSteps.length - 1].equations[0];\r\n        let E = LE[0];\r\n        E.solve()\r\n        const solution = E.solutions[0]\r\n\r\n        if (withResolution) {\r\n            this._resolutionSteps[letter].push({\r\n                equations: [LE[0]],\r\n                operations: [[LE[0].left.monoms[0].coefficient.tex]]\r\n            })\r\n\r\n            let P: Polynom\r\n            if (solution.exact instanceof Fraction || typeof solution.exact === \"string\") {\r\n                P = new Polynom(solution.exact)\r\n            } else {\r\n                P = new Polynom(solution.value)\r\n            }\r\n            this._resolutionSteps[letter].push({\r\n                equations: [new Equation(new Polynom(letter), P)],\r\n                operations: []\r\n            })\r\n\r\n        }\r\n        return E.solutions[0]\r\n    }\r\n\r\n}\r\n","/**\r\n * Polynom module contains everything necessary to handle polynoms.\r\n * @module Logicalset\r\n */\r\n\r\nimport {Shutingyard, ShutingyardMode} from '../shutingyard';\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n */\r\n    export class Logicalset {\r\n        private _rawString: string;\r\n        private _rpn: { token: string, tokenType: string }[]\r\n\r\n        /**\r\n         *\r\n         * @param {string} value (optional) Default polynom to parse on class creation\r\n         */\r\n        constructor(value: string) {\r\n            this._rawString = value\r\n            this.parse(value)\r\n            return this;\r\n        }\r\n\r\n        get isLogicalset() {\r\n            return true;\r\n        };\r\n\r\n        private parse = (value: string): Logicalset => {\r\n            // TODO: Must format the value string to convert some items...\r\n\r\n            // Parse the updated value to the shutingyard algorithm\r\n            this._rpn = new Shutingyard(ShutingyardMode.SET).parse(value).rpn;\r\n\r\n            return this;\r\n        }\r\n\r\n        evaluate(tokenSets: { [key: string]: unknown[] }, reference?: unknown[]): unknown[] {\r\n            let varStack: (Set<unknown>)[] = []\r\n\r\n            let referenceSet: Set<unknown>\r\n            if (reference === undefined) {\r\n                referenceSet = new Set()\r\n                for (let key in tokenSets) {\r\n                    referenceSet = new Set([...referenceSet, ...tokenSets[key]])\r\n                }\r\n            } else {\r\n                referenceSet = new Set(reference)\r\n            }\r\n\r\n            for (let token of this._rpn) {\r\n                if (token.tokenType === 'variable') {\r\n                    // The variable has no token - assume it's empty.\r\n                    if (tokenSets[token.token] === undefined) {\r\n                        varStack.push(new Set())\r\n                    } else {\r\n                        varStack.push(new Set(tokenSets[token.token]));\r\n                    }\r\n\r\n                } else {\r\n                    switch (token.token) {\r\n                        case '&':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                varStack.push(new Set([...first].filter(x => second.has(x))))\r\n                            }\r\n                            break\r\n                        case '|':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n                                varStack.push(new Set([...first, ...second]))\r\n                            }\r\n                            break\r\n                        case '-':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n                                varStack.push(new Set([...first].filter(x => !second.has(x))))\r\n                            }\r\n                            break\r\n                        case '!':\r\n                            if (varStack.length >= 1) {\r\n                                let first = varStack.pop()\r\n\r\n                                varStack.push(new Set([...referenceSet].filter(x => !first.has(x))))\r\n                            }\r\n                            break\r\n                    }\r\n                }\r\n            }\r\n\r\n            return [...varStack[0]].sort();\r\n        }\r\n\r\n        vennAB(): any[] {\r\n            return this.evaluate({\r\n                    A: ['A', 'AB'],\r\n                    B: ['B', 'AB']\r\n                },\r\n                ['A', 'B', 'AB', 'E']\r\n            )\r\n        }\r\n\r\n        vennABC(): any[] {\r\n            return this.evaluate({\r\n                    A: ['A', 'AB', 'AC', 'ABC'],\r\n                    B: ['B', 'AB', 'BC', 'ABC'],\r\n                    C: ['C', 'AC', 'BC', 'ABC']\r\n                },\r\n                ['A', 'B', 'C', 'AB', 'AC', 'BC', 'E']\r\n            )\r\n        }\r\n\r\n        get rpn(): { token: string, tokenType: string }[] {\r\n            return this._rpn\r\n        }\r\n\r\n        get tex(): string {\r\n            let varStack: { token: string, tokenType: string } [] = []\r\n\r\n            for (let token of this._rpn) {\r\n                if (token.tokenType === 'variable') {\r\n                    varStack.push(token);\r\n                } else {\r\n                    switch (token.token) {\r\n                        case '&':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\cap ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '|':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\cup ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '-':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\setminus ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '!':\r\n                            if (varStack.length >= 1) {\r\n                                let first = varStack.pop()\r\n                                varStack.push({token: `\\\\overline{ ${first.token} }`, tokenType: 'variable'})\r\n                            }\r\n                            break\r\n                    }\r\n                }\r\n            }\r\n\r\n            return varStack[0].token\r\n        }\r\n    }","/***\r\n * Monom class\r\n */\r\nimport {Numeric} from \"../numeric\";\r\nimport {Shutingyard, ShutingyardType, Token} from \"../shutingyard\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\nexport type literalType = {\r\n    [Key: string]: Fraction\r\n}\r\n\r\nexport class Monom {\r\n    private _coefficient: Fraction;\r\n    private _literal: literalType;\r\n\r\n    /**\r\n     * Create a Monom\r\n     * Defined as \\\\(k \\\\cdot x^{n}\\\\), where \\\\( k,n \\in \\\\mathbb{Q}\\\\).\r\n     * Examples: \\\\(3x^2\\\\) or \\\\(3/5x^2\\\\)\r\n     * @param value (optional) string The value that should be parse. Can be a Monom, a Fraction, a string or a number. If nothing is provided, it will return the trivial monom (0).\r\n     */\r\n    constructor(value?: unknown) {\r\n        this.zero();\r\n\r\n        if (value !== undefined) {\r\n            // A string is given - try to parse the value.\r\n            this.parse(value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    /**\r\n     * Get the coefficient \\\\(k\\\\) of the Monom \\\\(k\\\\cdot x^{n}\\\\)\r\n     * @returns {Fraction}\r\n     */\r\n    get coefficient(): Fraction {\r\n        return this._coefficient;\r\n    }\r\n\r\n    /**\r\n     * Set the coefficient \\\\(k\\\\) value of the monom\r\n     * @param {Fraction | number | string} F\r\n     */\r\n    set coefficient(F: Fraction | number | string) {\r\n        this._coefficient = new Fraction(F);\r\n    }\r\n\r\n    /**\r\n     * Get the literal part of \\\\(x^{n_1}y^{n_2}\\\\) as dictionary \\\\[\\\\begin{array}{ll}x&=n_1\\\\\\\\y&=n_2\\\\end{array}\\\\]\r\n     * @returns {literalType}\r\n     */\r\n    get literal(): literalType {\r\n        return this._literal;\r\n    }\r\n\r\n    /**\r\n     * Get the literal square roots of the Monom.\r\n     * TODO: remove this getter ? Is it used and is it correct ?\r\n     * @returns {literalType}\r\n     */\r\n    get literalSqrt(): literalType {\r\n        if (this.isLiteralSquare()) {\r\n            let L: literalType = {}\r\n            for (let key in this._literal) {\r\n                L[key] = this._literal[key].clone().sqrt()\r\n            }\r\n            return L;\r\n        } else {\r\n            return this._literal;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom. Must be a dictionary {x: Fraction, y: Fraction, ...}\r\n     * @param {literalType} L\r\n     */\r\n    set literal(L: literalType) {\r\n        this._literal = L;\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom from a string\r\n     * @param inputStr  String like x^2y^3\r\n     */\r\n    set literalStr(inputStr: string) {\r\n        // TODO : parse using shutingyard tree !\r\n\r\n        // Match all x^n\r\n        for (const v of [...inputStr.matchAll(/([a-z])\\^([+-]?[0-9]+)/g)]) {\r\n            // Create the default letter entry if necessary.\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = new Fraction().zero();\r\n            }\r\n\r\n            // Add the new value.\r\n            // TODO: actually, it adds only numeric value\r\n            this._literal[v[1]].add(+v[2]);\r\n        }\r\n\r\n        // Match all x\r\n        for (const v of [...inputStr.matchAll(/([a-z](?!\\^))/g)]) {\r\n            // Match all single letters\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = new Fraction().zero();\r\n            }\r\n\r\n            // Add one to the value.\r\n            this._literal[v[1]].add(1)\r\n        }\r\n    }\r\n\r\n    // Getter helpers.\r\n    /**\r\n     * Get the variables letters\r\n     */\r\n    get variables(): string[] {\r\n        let M = this.clone().clean();\r\n        return Object.keys(M.literal)\r\n    }\r\n\r\n    // Display getter\r\n    /**\r\n     * This display getter is to be used in the polynom display getter\r\n     */\r\n    get display(): string {\r\n        let L: string = '',\r\n            letters = Object.keys(this._literal).sort()\r\n        for (let letter of letters) {\r\n            if (this._literal[letter].isNotZero()) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter].isNotEqual(1)) {\r\n                    L += `^(${this._literal[letter].display})`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.display}`;\r\n            } else {\r\n                return '';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.display}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    get dividers(): Monom[] {\r\n        // Decompose only if the coefficient is a natural number\r\n        if (!this.coefficient.isRelative()) {\r\n            return [this.clone()]\r\n        }\r\n\r\n\r\n        // Decompose only if the power values are natural numbers.\r\n        if (this.hasFractionCoefficient()) {\r\n            return [this.clone()]\r\n        }\r\n\r\n        // Security : do not do this if greater than 10000\r\n        if (this.coefficient.numerator > 1000000) {\r\n            return [this.clone()]\r\n        }\r\n\r\n        const dividers = Numeric.dividers(Math.abs(this.coefficient.numerator))\r\n\r\n        // Decompose the literals parts.\r\n        let literals: literalType[] = [];\r\n        for (let L in this.literal) {\r\n            // L is the letter.\r\n            literals = this._getLiteralDividers(literals, L)\r\n        }\r\n\r\n        const monomDividers: Monom[] = [];\r\n        if (literals.length > 0 && dividers.length > 0) {\r\n            for (let N of dividers) {\r\n                for (let L of literals) {\r\n                    let M = new Monom();\r\n                    M.coefficient = new Fraction(N)\r\n                    M.literal = L\r\n                    monomDividers.push(M)\r\n                }\r\n            }\r\n        } else if (dividers.length === 0) {\r\n            for (let L of literals) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction().one()\r\n                M.literal = L\r\n                monomDividers.push(M)\r\n            }\r\n        } else {\r\n            for (let N of dividers) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction(N)\r\n                monomDividers.push(M)\r\n            }\r\n        }\r\n\r\n        return monomDividers.length === 0 ? [new Monom().one()] : monomDividers;\r\n    }\r\n\r\n    private _getLiteralDividers(arr: literalType[], letter: string): literalType[] {\r\n        let tmpList: { [key: string]: Fraction }[] = [];\r\n\r\n        // Be default, this.literal[letter] should be a rational number.\r\n        for (let d = 0; d <= this.literal[letter].value; d++) {\r\n            if (arr.length === 0) {\r\n                let litt: literalType = {}\r\n                litt[letter] = new Fraction(d)\r\n                tmpList.push(litt)\r\n            } else {\r\n                for (let item of arr) {\r\n                    let litt: literalType = {}\r\n                    for (let currentLetter in item) {\r\n                        litt[currentLetter] = item[currentLetter]\r\n                    }\r\n                    litt[letter] = new Fraction(d)\r\n                    tmpList.push(litt)\r\n                }\r\n            }\r\n        }\r\n        return tmpList;\r\n    }\r\n\r\n    /**\r\n     * Display the monom, forcing the '+' sign to appear\r\n     */\r\n    get displayWithSign(): string {\r\n        let d: String = this.display;\r\n        return (d[0] !== '-' ? '+' : '') + d;\r\n    }\r\n\r\n    get texWithSign(): string {\r\n        if (this.coefficient.isStrictlyPositive()) {\r\n            return '+' + this.tex\r\n        }\r\n\r\n        return this.tex\r\n    }\r\n\r\n    get plotFunction(): string {\r\n\r\n        let L: string = '',\r\n            letters = Object.keys(this._literal).sort()\r\n\r\n        for (let letter of letters) {\r\n            if (this._literal[letter].isNotZero()) {\r\n                L += (L===''?\"\":\"*\") + `${letter}`\r\n                if (this._literal[letter].isNotEqual(1)) {\r\n                    L += `^(${this._literal[letter].display})`;\r\n                }\r\n            }\r\n        }\r\n\r\n        // No literal part\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.display}`;\r\n            } else {\r\n                return '';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.display}*${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the tex output of the monom\r\n     */\r\n    get tex(): string {\r\n        // TODO: display with square root !\r\n        let L: string = '',\r\n            letters = Object.keys(this._literal).sort()\r\n\r\n        for (let letter of letters) {\r\n            if (this._literal[letter].isNotZero()) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter].isNotEqual(1)) {\r\n                    L += `^{${this._literal[letter].tfrac}}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.frac}`;\r\n            } else {\r\n                return '0';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.frac}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // -----------------------------------------\r\n    /**\r\n     * Parse a string to a monom. The string may include fraction.\r\n     * @param inputStr\r\n     */\r\n    parse = (inputStr: unknown): Monom => {\r\n\r\n        if (typeof inputStr === 'string') {\r\n            this._shutingYardToReducedMonom(inputStr)\r\n        } else if (typeof inputStr === 'number') {\r\n            this._coefficient = new Fraction(inputStr)\r\n            this._literal = {}\r\n        } else if (inputStr instanceof Fraction) {\r\n            this._coefficient = inputStr.clone()\r\n            this._literal = {}\r\n        } else if (inputStr instanceof Monom) {\r\n            this._coefficient = inputStr._coefficient.clone()\r\n            this._literal = this.copyLiterals(inputStr.literal)\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    addToken = (stack: Monom[], element: Token): void => {\r\n\r\n        let q1: Monom, q2: Monom, m: Monom, letter: string, pow: Fraction\r\n\r\n        if (element.tokenType === ShutingyardType.COEFFICIENT) {\r\n            stack.push(new Monom(new Fraction(element.token)))\r\n\r\n        } else if (element.tokenType === ShutingyardType.VARIABLE) {\r\n            let M = new Monom().one()\r\n            M.setLetter(element.token, 1)\r\n            stack.push(M.clone())\r\n\r\n        } else if (element.tokenType === ShutingyardType.OPERATION) {\r\n            switch (element.token) {\r\n                case '-':\r\n                    // this should only happen for negative powers or for negative coefficient.\r\n                    q2 = (stack.pop()) || new Monom().zero()\r\n                    q1 = (stack.pop()) || new Monom().zero()\r\n\r\n                    stack.push(q1.subtract(q2))\r\n\r\n                    break;\r\n                case '*':\r\n                    // Get the last element in the stack\r\n                    q2 = (stack.pop()) || new Monom().one()\r\n                    q1 = (stack.pop()) || new Monom().one()\r\n\r\n                    stack.push(q1.multiply(q2))\r\n                    break\r\n                case '/':\r\n                    // Get the last element in the stack\r\n                    q2 = (stack.pop()) || new Monom().one()\r\n                    q1 = (stack.pop()) || new Monom().one()\r\n\r\n                    stack.push(q1.divide(q2))\r\n                    break\r\n                case '^':\r\n                    // get the two last elements in the stack\r\n                    pow = (stack.pop().coefficient) || new Fraction().one()\r\n                    m = (stack.pop()) || new Monom().one()\r\n\r\n                    letter = m.variables[0]\r\n\r\n                    if (letter !== undefined) {\r\n                        m.setLetter(letter, pow)\r\n                    }\r\n\r\n                    stack.push(m)\r\n                    // this.multiply(m.clone())\r\n                    break\r\n            }\r\n        }\r\n    }\r\n    private _shutingYardToReducedMonom = (inputStr: string): Monom => {\r\n        // Get the RPN array of the current expression\r\n        const SY: Shutingyard = new Shutingyard().parse(inputStr);\r\n        const rpn: { token: string, tokenType: string }[] = SY.rpn;\r\n\r\n        let stack: Monom[] = [], m, pow, letter, q1, q2\r\n\r\n        if (rpn.length === 0) {\r\n            this.zero()\r\n            return this\r\n        } else if (rpn.length === 1) {\r\n            const element = rpn[0]\r\n\r\n            this.one()\r\n            if (element.tokenType === 'coefficient') {\r\n                this.coefficient = new Fraction(element.token)\r\n            } else if (element.tokenType === 'variable') {\r\n                this.setLetter(element.token, 1)\r\n            }\r\n            return this\r\n        } else {\r\n            // Reset the monom\r\n            for (const element of rpn) {\r\n                this.addToken(stack, element)\r\n            }\r\n        }\r\n\r\n        this.one()\r\n        this.multiply(stack[0])\r\n        return this\r\n    }\r\n    /**\r\n     * Clone the current Monom.\r\n     */\r\n    clone = (): Monom => {\r\n        let F: Monom = new Monom();\r\n\r\n        F.coefficient = this._coefficient.clone();\r\n\r\n        // Copy the literal parts.\r\n        for (let k in this._literal) {\r\n            F.setLetter(k, this._literal[k].clone());\r\n        }\r\n        return F;\r\n    };\r\n\r\n    copyLiterals = (literal: literalType): literalType => {\r\n        let L: literalType = {}\r\n\r\n        for (let k in literal) {\r\n            L[k] = literal[k].clone()\r\n        }\r\n        return L\r\n    }\r\n\r\n    makeSame = (M: Monom): Monom => {\r\n        // Copy the literal parts.\r\n        for (let k in M._literal) {\r\n            this.setLetter(k, M._literal[k].clone());\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Create a zero value monom\r\n     */\r\n    zero = (): Monom => {\r\n        this._coefficient = new Fraction().zero();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Create a one value monom\r\n     */\r\n    one = (): Monom => {\r\n        this._coefficient = new Fraction().one();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Clean the monom by removing each letters with a power of zero.\r\n     */\r\n    clean = (): Monom => {\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter].isZero()) {\r\n                delete this._literal[letter];\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    reduce = (): Monom => {\r\n        this.clean()\r\n        this.coefficient.reduce()\r\n        return this\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Get the opposed\r\n     * Returns a monom.\r\n     */\r\n    opposed = (): Monom => {\r\n        this._coefficient.opposed();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Add all similar monoms. If they aren't similar, they are simply skipped.\r\n     * @param M (Monom[]) The monoms to add.\r\n     */\r\n    add = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                if (this.isZero()) {\r\n                    this.makeSame(m)\r\n                }\r\n                this._coefficient.add(m.coefficient);\r\n            } else {\r\n                console.log('Add monom: ' + this.display + ' is not similar with ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Subtract multiple monoms\r\n     * @param M (Monom[]) The monoms to subtract\r\n     */\r\n    subtract = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                if (this.isZero()) {\r\n                    this.makeSame(m)\r\n                }\r\n                this._coefficient.add(m.clone().coefficient.opposed());\r\n            } else {\r\n                console.log('Subtract: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiple multiple monoms to the current monom\r\n     * @param M (Monom[]) The monoms to multiply to.\r\n     */\r\n    multiply = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            // Multiply the coefficient.\r\n            this._coefficient.multiply(m.coefficient);\r\n\r\n            // Multiply the literal parts.\r\n            for (let letter in m.literal) {\r\n                if (this._literal[letter] === undefined) {\r\n                    this._literal[letter] = m.literal[letter].clone()\r\n                } else {\r\n                    this._literal[letter].add(m.literal[letter])\r\n                }\r\n\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiplyByNumber = (F: Fraction | number): Monom => {\r\n        this._coefficient.multiply(F);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divide the current monoms by multiple monoms\r\n     * @param M (Monom[])\r\n     */\r\n    divide = (...M: Monom[]): Monom => {\r\n        // Depending on the given value, choose the current item\r\n        for (let v of M) {\r\n            // Divide the coefficient\r\n            this._coefficient.divide(v.coefficient);\r\n\r\n            // Subtract the power values\r\n            for (let letter in v.literal) {\r\n                this._literal[letter] = (this._literal[letter] === undefined) ? v.literal[letter].clone().opposed() : this._literal[letter].subtract(v.literal[letter])\r\n\r\n                // If the power of a particular setLetter is zero, delete it from the literal part..\r\n                if (this._literal[letter].isZero()) {\r\n                    delete this._literal[letter];\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the pow of a monom.\r\n     * @param nb (number) : Mathematical pow\r\n     */\r\n    pow = (nb: number|Fraction): Monom => {\r\n        this._coefficient.pow(nb);\r\n        for (let letter in this._literal) {\r\n            this._literal[letter].multiply(nb)\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the nth-root of the monom\r\n     * @param p\r\n     */\r\n    root = (p: number): Monom => {\r\n        // TODO: determiner the nth root of a monom\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Return the square root of a monom\r\n     */\r\n    sqrt = (): Monom => {\r\n        if (this.isSquare()) {\r\n            this._coefficient.sqrt();\r\n            for (let letter in this._literal) {\r\n                this._literal[letter].clone().divide(2)\r\n            }\r\n        }\r\n        return this.root(2);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    compare = (M: Monom, sign?: string): boolean => {\r\n        // TODO: Build the compare systems.\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // To be equal, they must be the isSame\r\n                if (!this.compare(M, 'same')) {\r\n                    return false;\r\n                }\r\n\r\n                // The literal parts are the isSame. The coefficient must be equal\r\n                return this._coefficient.isEqual(M.coefficient);\r\n            case 'same':\r\n                // Get the list of all variables from both monoms.\r\n                let M1: string[] = this.variables,\r\n                    M2: string[] = M.variables,\r\n                    K: string[] = M1.concat(M2.filter((item) => M1.indexOf(item) < 0));\r\n\r\n                if(M1.length===0 && M2.length===0){return true}\r\n                // To compare, both must be different than zero.\r\n                if (!this.isZero() && !M.isZero()) {\r\n                    for (let key of K) {\r\n                        // The setLetter is not available in one of the monom\r\n                        if (this._literal[key] === undefined || M.literal[key] === undefined) {\r\n                            return false;\r\n                        }\r\n                        // The setLetter does not have the isSame power in each monoms.\r\n                        if (!this._literal[key].isEqual(M.literal[key])) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // All are positive check - the monoms are the sames.\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is null\r\n     */\r\n    isZero(): boolean {\r\n        return this._coefficient.value === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is one\r\n     */\r\n    isOne(): boolean {\r\n        return this._coefficient.value === 1 && this.variables.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if two monoms are equals\r\n     * @param M\r\n     */\r\n    isEqual = (M: Monom): boolean => {\r\n        return this.compare(M, '=');\r\n    };\r\n\r\n    /**\r\n     * Determine if two monoms are similar\r\n     * @param M\r\n     */\r\n    isSameAs = (M: Monom): boolean => {\r\n        return this.compare(M, 'same');\r\n    };\r\n\r\n    isSquare = (): boolean => {\r\n        if (!this.coefficient.isSquare()) {\r\n            return false;\r\n        }\r\n        return this.isLiteralSquare();\r\n    }\r\n\r\n    isLiteralSquare = (): boolean => {\r\n        for (let letter in this.literal) {\r\n            // A literal square must have a natural power\r\n            if (this.literal[letter].isRational()) {\r\n                return false\r\n            }\r\n\r\n            // The natural power must be be even\r\n            if (this.literal[letter].isEven()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    hasFractionCoefficient = (): boolean => {\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter].isRational()) {\r\n                return true\r\n            }\r\n        }\r\n\r\n        return false\r\n    }\r\n    // ------------------------------------------\r\n    // Misc monoms functions\r\n    // -------------------------------------\r\n    /**\r\n     * Determine if a monom contains a setLetter in it's literal part\r\n     * @param letter\r\n     */\r\n    hasLetter = (letter?: string): boolean => {\r\n        // The letter was not found\r\n        if (this._literal[letter === undefined ? 'x' : letter] === undefined) {\r\n            return false\r\n        }\r\n\r\n        // The letter is found and is not zero !\r\n        return this._literal[letter === undefined ? 'x' : letter].isNotZero();\r\n    };\r\n\r\n    /**\r\n     * Set the power of a particular setLetter\r\n     * @param letter (string) Letter to change\r\n     * @param pow (number) Power of the setLetter (must be positive integer.\r\n     */\r\n    setLetter = (letter: string, pow: Fraction | number): void => {\r\n        if (pow instanceof Fraction) {\r\n            // Set the power of the letter to zero => remove it\r\n            if (this.hasLetter(letter) && pow.isZero()) {\r\n                delete this._literal[letter]\r\n            }\r\n\r\n            this._literal[letter] = pow.clone()\r\n        } else {\r\n            this.setLetter(letter, new Fraction(pow))\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the degree of a monom. If no setLetter is given, the result will be the global degree.\r\n     * @param letter (string) Letter to get to degree (power)\r\n     */\r\n    degree = (letter?: string): Fraction => {\r\n        if (this.variables.length === 0) {\r\n            return new Fraction().zero();\r\n        }\r\n        if (letter === undefined) {\r\n            // Not setLetter given -> we get the global monom degree (sum of all the letters).\r\n            return Object.values(this._literal).reduce((t, n) => t.clone().add(n));\r\n        } else {\r\n            // A setLetter is given -> get the corresponding power.\r\n            return this._literal[letter] === undefined ? new Fraction().zero() : this._literal[letter].clone();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Evaluate a monom. Each setLetter must be assigned to a Fraction.\r\n     * @param values    Dictionary of <setLetter: Fraction>\r\n     */\r\n    evaluate = (values: literalType | Fraction | number): Fraction => {\r\n        let r = this.coefficient.clone();\r\n\r\n        if (typeof values === 'number' || values instanceof Fraction) {\r\n            let tmpValues: literalType = {}\r\n            tmpValues[this.variables[0]] = new Fraction(values)\r\n            return this.evaluate(tmpValues);\r\n        }\r\n\r\n        if (typeof values === 'object') {\r\n            if(this.variables.length===0){\r\n                return this.coefficient\r\n            }\r\n            for (let L in this._literal) {\r\n                if (values[L] === undefined) {\r\n                    return new Fraction().zero();\r\n                }\r\n\r\n                let value = new Fraction(values[L])\r\n\r\n                r.multiply(value.pow(this._literal[L]))\r\n            }\r\n        }\r\n\r\n        return r;\r\n    };\r\n\r\n    evaluateAsNumeric = (values: { [Key: string]: number } | number): number => {\r\n        let r = this.coefficient.value\r\n\r\n        if (typeof values === 'number') {\r\n            let tmpValues: { [Key: string]: number } = {}\r\n            tmpValues[this.variables[0]] = values\r\n            return this.evaluateAsNumeric(tmpValues);\r\n        }\r\n\r\n        if (typeof values === 'object') {\r\n            if (this.variables.length === 0) {\r\n                return this.coefficient.value\r\n            }\r\n            for (let L in this._literal) {\r\n                if (values[L] === undefined) {\r\n                    return 0;\r\n                }\r\n\r\n                r *= values[L] ** (this._literal[L].value)\r\n            }\r\n        }\r\n\r\n        return r\r\n    }\r\n\r\n    /**\r\n     * Derivative the monom\r\n     * @param letter\r\n     */\r\n    derivative = (letter?: string): Monom => {\r\n        // No setLetter given - assume it's the setLetter 'x'\r\n        if (letter === undefined) {\r\n            letter = 'x';\r\n        }\r\n\r\n        if (this.hasLetter(letter)) {\r\n            let d = this._literal[letter].clone(),\r\n                dM = this.clone();\r\n\r\n            // Subtract one to the degree.\r\n            dM._literal[letter].subtract(1)\r\n\r\n            // Multiply the coefficient by the previous degree\r\n            dM._coefficient.multiply(new Fraction(d.clone()));\r\n            return dM;\r\n        } else {\r\n            return new Monom().zero();\r\n        }\r\n    };\r\n\r\n    primitive = (letter?: string): Monom => {\r\n        // TODO: derivative including the ln value => implies creating different monom system ?\r\n        if (letter === undefined) {\r\n            letter = 'x'\r\n        }\r\n\r\n        // Zero monom\r\n        let M = this.clone(), degree\r\n\r\n        if (M.hasLetter(letter)) {\r\n            degree = M.degree(letter).clone().add(1)\r\n            M.coefficient = M.coefficient.clone().divide(degree)\r\n            M.setLetter(letter, degree)\r\n        } else {\r\n            // There is no letter.\r\n\r\n            // The coefficient might be zero (=> x) or a number a (=> ax)\r\n            if (M.coefficient.isZero()) {\r\n                M.coefficient = new Fraction().one()\r\n            }\r\n            M.setLetter(letter, 1)\r\n        }\r\n\r\n        return M\r\n    }\r\n    // ----------------------------------------\r\n    // Static functions\r\n    // ----------------------------------------\r\n\r\n    /**\r\n     * Get the least common multiple of monoms\r\n     * @param monoms    Array of monoms\r\n     */\r\n    static lcm = (...monoms: Monom[]): Monom => {\r\n        // All the monoms must be with natural powers...\r\n        for (let m of monoms) {\r\n            if (m.hasFractionCoefficient()) {\r\n                return new Monom().zero()\r\n            }\r\n        }\r\n\r\n\r\n        let M = new Monom(),\r\n            coeffN: number[] = monoms.map(value => value.coefficient.numerator),\r\n            coeffD: number[] = monoms.map(value => value.coefficient.denominator),\r\n            n = Numeric.gcd(...coeffN),\r\n            d = Numeric.lcm(...coeffD);\r\n\r\n        // Get the coefficient.\r\n        M.coefficient = new Fraction(n, d).reduce();\r\n\r\n        // Set the literal parts - go through each monoms literal parts and get only the lowest degree of each letters.\r\n        for (let m of monoms) {\r\n            // Remove the inexistant letters from the resulting monom\r\n            for (let letter in M.literal) {\r\n                if (!(letter in m.literal)) {\r\n                    M.literal[letter].zero();\r\n                }\r\n            }\r\n            for (let letter in m.literal) {\r\n                if (M.literal[letter] === undefined && m.literal[letter].isStrictlyPositive()) {\r\n                    M.literal[letter] = m.literal[letter].clone();\r\n                } else {\r\n                    M.literal[letter] = new Fraction(Math.min(m.literal[letter].value, M.literal[letter].value))\r\n                }\r\n            }\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n    /**\r\n     * Multiply two monoms and return a NEW monom.\r\n     * @param monoms\r\n     */\r\n    static xmultiply = (...monoms: Monom[]): Monom => {\r\n        let M = new Monom().one();\r\n\r\n        for (let m of monoms) {\r\n            M.multiply(m);\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Determine if multiple monoms are similar\r\n     * @param M\r\n     */\r\n    areSameAs = (...M: Monom[]): boolean => {\r\n        let result: boolean = true;\r\n\r\n        // Check all monoms if they are the isSame as the \"this\" one.\r\n        for (let i = 0; i < M.length; i++) {\r\n            if (!this.isSameAs(M[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All check passed -> all the monoms are similar.\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Determine if multiple monoms are equals\r\n     * @param M\r\n     */\r\n    areEquals = (...M: Monom[]): boolean => {\r\n        // They are not similar.\r\n        if (!this.areSameAs(...M)) {\r\n            return false;\r\n        }\r\n\r\n        // Check all coefficient. They must be equals.\r\n        for (let m of M) {\r\n            if (!this._coefficient.isEqual(m.coefficient)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All checks passed.\r\n        return true;\r\n    };\r\n\r\n    isDivisible = (div:Monom):boolean => {\r\n        // For all variables (letters), the current monom must have a degree higher than the divider\r\n        if(div.degree().isStrictlyPositive()) {\r\n            for (let letter of div.variables) {\r\n                if (!this.degree(letter).geq(div.degree(letter))) {\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n\r\n        // If the coefficient is rational, we suppose we don't need to check the division by the coefficient.\r\n        if(this.coefficient.isRational() || div.coefficient.isRational()){return true}\r\n\r\n        return this.coefficient.clone().divide(div.coefficient).isRelative()\r\n    }\r\n\r\n}\r\n","/**\r\n * Polynom module contains everything necessary to handle polynoms.*\r\n */\r\n\r\nimport {literalType, Monom} from './monom';\r\nimport {Shutingyard, ShutingyardType, Token} from '../shutingyard';\r\nimport {Numeric} from '../numeric';\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Equation, ISolution} from \"./equation\";\r\nimport {Random} from \"../randomization/random\";\r\n\r\nexport type PolynomParsingType = string | Polynom | number | Fraction | Monom\r\n\r\nexport interface IEuclidian {\r\n    quotient: Polynom,\r\n    reminder: Polynom\r\n}\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n * ```\r\n * let P = new Polynom('3x-4')\r\n * ```\r\n */\r\nexport class Polynom {\r\n    private _dirty_factors: boolean\r\n    private _dirty_zeroes: boolean\r\n    private _euclidianCache: { [Key: string]: IEuclidian }\r\n    private _factors: Polynom[];\r\n    private _monoms: Monom[];\r\n    private _rawString: string;\r\n    private _texString: string;\r\n    private _zeroes: ISolution[]\r\n\r\n    /**\r\n     *\r\n     * @param {string} polynomString (optional) Default polynom to parse on class creation\r\n     * @param values\r\n     */\r\n    constructor(polynomString?: PolynomParsingType, ...values: unknown[]) {\r\n        this._monoms = [];\r\n        this._factors = [];\r\n        this.mark_as_dirty()\r\n\r\n        if (polynomString !== undefined) {\r\n            this.parse(polynomString, ...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    get euclidianCache(): { [p: string]: IEuclidian } {\r\n        return this._euclidianCache;\r\n    }\r\n\r\n    set euclidianCache(value: { [p: string]: IEuclidian }) {\r\n        this._euclidianCache = value;\r\n    }\r\n\r\n    get dirty_zeroes(): boolean {\r\n        return this._dirty_zeroes;\r\n    }\r\n\r\n    set dirty_zeroes(value: boolean) {\r\n        this._dirty_zeroes = value;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    get dirty_factors(): boolean {\r\n        return this._dirty_factors;\r\n    }\r\n\r\n    set dirty_factors(value: boolean) {\r\n        this._dirty_factors = value;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    get monoms() {\r\n        return this._monoms;\r\n    }\r\n\r\n    set monoms(M: Monom[]) {\r\n        this._monoms = M;\r\n    }\r\n\r\n    get zeroes(): ISolution[] {\r\n        return this.getZeroes()\r\n    }\r\n\r\n    get factors(): Polynom[] {\r\n        return this.factorize()\r\n    }\r\n\r\n    set factors(value: Polynom[]) {\r\n        this.mark_as_dirty()\r\n        this._factors = value;\r\n    }\r\n\r\n    get texString(): string {\r\n        return this._texString;\r\n    }\r\n\r\n    get texFactors(): string {\r\n        this.factorize()\r\n\r\n        if (this.factors.length <= 1) {\r\n            return this.tex\r\n        }\r\n\r\n        // Build an array of texFactors with the number of similar items.\r\n        let factorsCount: { [Key: string]: { degree: number, factor: Polynom } } = {}\r\n        for (let f of this.factors) {\r\n            if (factorsCount[f.tex] !== undefined) {\r\n                factorsCount[f.tex].degree++\r\n            } else {\r\n                factorsCount[f.tex] = {\r\n                    degree: 1,\r\n                    factor: f\r\n                }\r\n            }\r\n        }\r\n\r\n        // First round to put the 'monom' first\r\n        let simpleFactor = new Polynom().one()\r\n\r\n        for (let item of Object.values(factorsCount).filter(item => item.factor.monoms.length === 1)) {\r\n            simpleFactor.multiply(item.factor)\r\n        }\r\n\r\n        let tex = simpleFactor.isOne() ? '' : simpleFactor.tex\r\n\r\n        // Loop through all factors that contains at least 2 monoms.\r\n        for (let item of Object.values(factorsCount).filter(item => item.factor.monoms.length > 1)) {\r\n            if (item.factor.length > 1) {\r\n                tex += `\\\\left( ${item.factor.tex} \\\\right)${item.degree > 1 ? '^{ ' + item.degree + ' }' : ''}`\r\n            }\r\n        }\r\n\r\n        return tex;\r\n    }\r\n\r\n    get displayFactors() {\r\n        this.factorize()\r\n\r\n        if (this.factors.length <= 1) {\r\n            return this.display\r\n        }\r\n\r\n        // Build an array of texFactors with the number of similar items.\r\n        let factorsCount: { [Key: string]: { degree: number, factor: Polynom } } = {}\r\n        for (let f of this.factors) {\r\n            if (factorsCount[f.display] !== undefined) {\r\n                factorsCount[f.display].degree++\r\n            } else {\r\n                factorsCount[f.display] = {\r\n                    degree: 1,\r\n                    factor: f\r\n                }\r\n            }\r\n        }\r\n\r\n        // First round to put the 'monom' first\r\n        let simpleFactor = new Polynom().one()\r\n\r\n        for (let item of Object.values(factorsCount).filter(item => item.factor.monoms.length === 1)) {\r\n            simpleFactor.multiply(item.factor)\r\n        }\r\n\r\n        let display = simpleFactor.isOne() ? '' : simpleFactor.display\r\n\r\n        // Loop through all factors that contains at least 2 monoms.\r\n        for (let item of Object.values(factorsCount).filter(item => item.factor.monoms.length > 1)) {\r\n            if (item.factor.length > 1) {\r\n                display += `(${item.factor.display})${item.degree > 1 ? '^(' + item.degree + ')' : ''}`\r\n            }\r\n        }\r\n\r\n        return display;\r\n    }\r\n\r\n    get length() {\r\n        // TODO: Must reduce the monoms list to remove the zero coefficient.\r\n        return this._monoms.length;\r\n    }\r\n\r\n    get display(): string {\r\n        return this.genDisplay();\r\n    }\r\n\r\n    get raw(): string {\r\n        return this._rawString\r\n    }\r\n\r\n    get tex(): string {\r\n        return this.genDisplay('tex');\r\n    }\r\n\r\n    get isMultiVariable(): boolean {\r\n        const B = false;\r\n        for (const m of this._monoms) {\r\n            if (m.variables.length > 1) {\r\n                return true;\r\n            }\r\n        }\r\n        return B;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            V = V.concat(m.variables);\r\n        }\r\n\r\n        // Remove duplicates.\r\n        V = [...new Set(V)];\r\n        V.sort()\r\n        return V;\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    get plotFunction(): string {\r\n        return this.genDisplay('tex', false, false, true)\r\n    }\r\n\r\n    mark_as_dirty = (): void => {\r\n        this.dirty_factors = true\r\n        this.dirty_zeroes = true\r\n        this.euclidianCache = {}\r\n    }\r\n\r\n    addToken = (stack: Polynom[], element: Token): void => {\r\n        switch (element.tokenType) {\r\n            case ShutingyardType.COEFFICIENT:\r\n                stack.push(new Polynom(element.token))\r\n                break\r\n\r\n            case ShutingyardType.VARIABLE:\r\n                stack.push(new Polynom().add(new Monom(element.token)))\r\n                break\r\n\r\n            case ShutingyardType.CONSTANT:\r\n                // TODO: add constant support to Polynom parsing.\r\n                console.log('Actually, not supported - will be added later !')\r\n                break\r\n\r\n            case ShutingyardType.OPERATION:\r\n                if (stack.length >= 2) {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n\r\n                    if (element.token === '+') {\r\n                        stack.push(a.add(b))\r\n                    } else if (element.token === '-') {\r\n                        stack.push(a.subtract(b))\r\n                    } else if (element.token === '*') {\r\n                        stack.push(a.multiply(b))\r\n                    } else if (element.token === '/') {\r\n                        if (b.degree().isStrictlyPositive()) {\r\n                            console.log('divide by a polynom -> should create a rational polynom !')\r\n                        } else {\r\n                            stack.push(a.divide(b.monoms[0].coefficient))\r\n\r\n                        }\r\n                    } else if (element.token === '^') {\r\n                        if (b.degree().isStrictlyPositive()) {\r\n                            console.error('Cannot elevate a polynom with another polynom !', a.tex, b.tex)\r\n                        } else {\r\n                            if (b.monoms[0].coefficient.isRelative()) {\r\n                                // Integer power\r\n                                stack.push(a.pow(b.monoms[0].coefficient.value))\r\n                            } else {\r\n                                // Only allow power if the previous polynom is only a monom, without coefficient.\r\n                                if (a.monoms.length === 1 && a.monoms[0].coefficient.isOne()) {\r\n                                    for (let letter in a.monoms[0].literal) {\r\n                                        a.monoms[0].literal[letter].multiply(b.monoms[0].coefficient)\r\n                                    }\r\n                                    stack.push(a)\r\n                                } else {\r\n                                    console.error('Cannot have power with fraction')\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (element.token === '-') {\r\n                        stack.push(stack.pop().opposed())\r\n                    } else {\r\n                        throw \"Error parsing the polynom \" + this._rawString\r\n                    }\r\n                }\r\n                break\r\n\r\n            case ShutingyardType.MONOM:\r\n                // Should never appear.\r\n                console.error('The monom token should not appear here')\r\n                break;\r\n\r\n            case ShutingyardType.FUNCTION:\r\n                // Should never appear.\r\n                console.error('The function token should not appear here - might be introduced later.')\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse a string to a polynom.\r\n     * @param inputStr\r\n     * @param values: as string, numbers or fractions\r\n     */\r\n    parse = (inputStr: PolynomParsingType, ...values: unknown[]): Polynom => {\r\n        // Reset the main variables.\r\n        this._monoms = []\r\n        this._factors = []\r\n        this.mark_as_dirty()\r\n\r\n        // TODO: allow to enter a liste of Fraction (a, b, c, ...) to make a polynom ax^n + bx^(n-1) + cx^(n-2) + ...\r\n        if (typeof inputStr === 'string') {\r\n            return this._parseString(inputStr, ...values)\r\n        } else if (\r\n            (typeof inputStr === 'number' || inputStr instanceof Fraction || inputStr instanceof Monom)\r\n            && (values === undefined || values.length === 0)\r\n        ) {\r\n            this._monoms.push(new Monom(inputStr))\r\n        } else if (inputStr instanceof Monom && values.length > 0) {\r\n            this._monoms.push(new Monom(inputStr))\r\n            values.forEach(m => {\r\n                this._monoms.push(new Monom(m))\r\n            })\r\n        } else if (inputStr instanceof Polynom) {\r\n            for (const m of inputStr.monoms) {\r\n                this._monoms.push(m.clone())\r\n            }\r\n        }\r\n\r\n        return this\r\n    };\r\n\r\n    /**\r\n     * Clone the polynom\r\n     */\r\n    clone = (): Polynom => {\r\n        const P = new Polynom();\r\n        const M: Monom[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            M.push(m.clone());\r\n        }\r\n\r\n        P.monoms = M;\r\n\r\n        return P;\r\n    };\r\n\r\n    /**\r\n     * Set the polynom to zero.\r\n     * @returns {this}\r\n     */\r\n    zero = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().zero());\r\n        this._rawString = '0';\r\n        this.mark_as_dirty()\r\n        return this;\r\n    };\r\n\r\n    one = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().one());\r\n        this._rawString = '1';\r\n        this.mark_as_dirty()\r\n        return this;\r\n    }\r\n\r\n    empty = (): Polynom => {\r\n        this._monoms = [];\r\n        this._rawString = '';\r\n        this.mark_as_dirty()\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    opposed = (): Polynom => {\r\n        this._monoms = this._monoms.map(m => m.opposed());\r\n        this.mark_as_dirty()\r\n        return this;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n\r\n    add = (...values: unknown[]): Polynom => {\r\n        this.mark_as_dirty()\r\n\r\n        // @ts-ignore\r\n        for (let value of values) {\r\n            if (value instanceof Polynom) {\r\n                this._monoms = this._monoms.concat(value.monoms);\r\n            } else if (value instanceof Monom) {\r\n                this._monoms.push(value.clone());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()));\r\n            } else {\r\n                this._monoms.push(new Monom(value));\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (...values: unknown[]): Polynom => {\r\n        this.mark_as_dirty()\r\n\r\n        for (let value of values) {\r\n            if (value instanceof Polynom) {\r\n                this._monoms = this._monoms.concat(value.clone().opposed().monoms);\r\n            } else if (value instanceof Monom) {\r\n                this._monoms.push(value.clone().opposed());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()).opposed());\r\n            } else {\r\n                this._monoms.push(new Monom(value).opposed());\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    multiply = (value: unknown): Polynom => {\r\n        this.mark_as_dirty()\r\n\r\n        if (value instanceof Polynom) {\r\n            return this.multiplyByPolynom(value);\r\n        } else if (value instanceof Fraction) {\r\n            return this.multiplyByFraction(value);\r\n        } else if (value instanceof Monom) {\r\n            return this.multiplyByMonom(value);\r\n        } else if (Number.isSafeInteger(value) && typeof value === 'number') {\r\n            return this.multiplyByInteger(value);\r\n        }\r\n\r\n        // Something went wrong...\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divide the current polynom by another polynom.\r\n     * @param P\r\n     * returns {quotient: Polynom, reminder: Polynom}\r\n     */\r\n    euclidian = (P: Polynom): IEuclidian => {\r\n\r\n        if (this.euclidianCache[P.tex] !== undefined) {\r\n            return this.euclidianCache[P.tex]\r\n        }\r\n\r\n        const letter: string = P.variables[0];\r\n        const quotient: Polynom = new Polynom().zero();\r\n        const reminder: Polynom = this.clone().reorder(letter);\r\n\r\n        // There is no variable - means it's a number\r\n        if (P.variables.length === 0) {\r\n            let q = this.clone().divide(P)\r\n            return {\r\n                quotient: this.clone().divide(P),\r\n                reminder: new Polynom().zero()\r\n            }\r\n        }\r\n\r\n        // Get at least a letter\r\n\r\n        const maxMP: Monom = P.monomByDegree(undefined, letter);\r\n        const degreeP: Fraction = P.degree(letter);\r\n\r\n        let newM: Monom;\r\n\r\n        // Make the euclidian division of the two polynoms.\r\n        let MaxIteration = this.degree(letter).clone().multiply(2);\r\n        while (reminder.degree(letter).geq(degreeP) && MaxIteration.isPositive()) {\r\n            MaxIteration.subtract(1)\r\n\r\n            // Get the greatest monom divided by the max monom of the divider\r\n            newM = reminder.monomByDegree(undefined, letter).clone().divide(maxMP);\r\n\r\n            if (newM.isZero()) {\r\n                break;\r\n            }\r\n\r\n            // Get the new quotient and reminder.\r\n            quotient.add(newM);\r\n            reminder.subtract(P.clone().multiply(newM));\r\n        }\r\n\r\n        quotient.reduce()\r\n        reminder.reduce()\r\n        return {quotient, reminder};\r\n    };\r\n\r\n    divide = (value: unknown): Polynom => {\r\n        this.mark_as_dirty()\r\n\r\n        if (value instanceof Fraction) {\r\n            return this.divideByFraction(value);\r\n        } else if (typeof value === 'number' && Number.isSafeInteger(value)) {\r\n            return this.divideByInteger(value);\r\n        } else if (value instanceof Monom) {\r\n            return this.divide(new Polynom(value))\r\n        } else if (value instanceof Polynom) {\r\n            if (value.monoms.length === 1 && value.variables.length === 0) {\r\n                return this.divideByFraction(value.monoms[0].coefficient)\r\n            }else {\r\n                let {quotient, reminder} = this.euclidian(value)\r\n                if(reminder.isZero()){\r\n                    return quotient\r\n                }else{\r\n                    console.log(`${this.tex} is not divideable by ${value.tex}`)\r\n                    return new Polynom().zero()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    pow = (nb: number): Polynom => {\r\n        this.mark_as_dirty()\r\n\r\n        if (!Number.isSafeInteger(nb)) {\r\n            return this.zero();\r\n        }\r\n        if (nb < 0) {\r\n            return this.zero();\r\n        }\r\n        if (nb === 0) {\r\n            return new Polynom();\r\n        }\r\n\r\n        const P = this.clone();\r\n        for (let i = 1; i < nb; i++) {\r\n            this.multiply(P);\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param P\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (P: Polynom, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '='\r\n        }\r\n\r\n        // Create clone version to reduce them without altering the original polynoms.\r\n        const cP1 = this.clone().reduce().reorder();\r\n        const cP2 = P.clone().reduce().reorder();\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree().isNotEqual(cP2.degree())) {\r\n                    return false;\r\n                }\r\n\r\n                // Check if the coefficients are the isSame.\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isEqual(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            case 'same':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree() !== cP2.degree()) {\r\n                    return false;\r\n                }\r\n\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isSameAs(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    isZero(): boolean {\r\n        return (this._monoms.length === 1 && this._monoms[0].coefficient.isZero()) || this._monoms.length === 0;\r\n    }\r\n\r\n    isOne(): boolean {\r\n        return this._monoms.length === 1 && this._monoms[0].coefficient.isOne();\r\n    }\r\n\r\n    isEqual = (P: Polynom): boolean => {\r\n        return this.compare(P, '=');\r\n    };\r\n\r\n    isSameAs = (P: Polynom): boolean => {\r\n        return this.compare(P, 'same');\r\n    };\r\n\r\n    isOpposedAt = (P: Polynom): boolean => {\r\n        return this.compare(P.clone().opposed(), '=');\r\n    };\r\n\r\n    isFactorized = (polynomString: string, soft?: boolean): boolean => {\r\n        let P;\r\n\r\n        // Check if polynom is complete...\r\n        if (polynomString.split('(').length !== polynomString.split(')').length) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check if the provided (string) version is fully factorized.\r\n        // Run a regex on the string.\r\n        let polynomStringNormalized = polynomString.replaceAll('*', ''),\r\n            polynomStringReduced = '' + polynomStringNormalized,\r\n            factors: string[] = [];\r\n\r\n        for (let x of polynomStringNormalized.matchAll(/\\(([a-z0-9+\\-]+)\\)(\\^[0-9]*)?/g)) {\r\n\r\n            if (x[2] !== undefined) {\r\n                // if there is an exponential value, add it multiple times\r\n                for (let i = 0; i < +x[2].substring(1); i++) {\r\n                    factors.push(x[1])\r\n                }\r\n            } else {\r\n                // no power - add it once.\r\n                factors.push(x[1]);\r\n            }\r\n\r\n            // Remove the current polynom\r\n            polynomStringReduced = polynomStringReduced.replaceAll(x[0], '');\r\n        }\r\n        if (polynomStringReduced !== '') {\r\n            factors.push(polynomStringReduced);\r\n        }\r\n        let polyFactors = factors.map(x => new Polynom(x));\r\n\r\n        // polyFactors contain all polynoms.\r\n        let checkPolyFactors = polyFactors.filter(x=>x.degree().geq(1) && !x.commonMonom().isOne())\r\n\r\n        // Some polynoms are not completely factorized.\r\n        if(checkPolyFactors.length>0 && !soft){return false}\r\n        if(checkPolyFactors.length>0 && soft){\r\n            polyFactors = polyFactors.filter(x=>x.commonMonom().isOne())\r\n\r\n            let FactorizedConstant = new Fraction().one()\r\n            for(let p of checkPolyFactors){\r\n                let k = p.commonMonom(),\r\n                    pFactor = p.clone().divide(k)\r\n\r\n                if(k.degree().isZero()){\r\n                    FactorizedConstant.multiply(k.coefficient)\r\n                    polyFactors.push(pFactor.clone())\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        // Factorize the current polynom.\r\n        this.factorize();\r\n\r\n        // Compare the given factors with the generated factors\r\n        let sign = 1,\r\n            notFoundedFactors = []\r\n        for (let f of this.factors) {\r\n            // The factor is just a coefficient. Might be opposed\r\n            if (f.degree().isZero()) {\r\n                if (f.monoms[0].coefficient.isNegativeOne()) {\r\n                    sign = -sign\r\n                }\r\n            }\r\n\r\n            let factorFound = false\r\n            for (let i = 0; i < polyFactors.length; i++) {\r\n                if (f.isEqual(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    factorFound = true\r\n                    break;\r\n                } else if (f.isOpposedAt(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    sign = -sign;\r\n                    factorFound = true\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!factorFound) {\r\n                notFoundedFactors.push(f.clone())\r\n            }\r\n        }\r\n\r\n        // The polyfactors must be empty and the cumulative opposite factors must be 1.\r\n        return (polyFactors.length === 0 && sign === 1);\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n\r\n    isReduced = (polynomString: string): Boolean => {\r\n        // The polynom must be developed to be reduced.\r\n        if (!this.isDeveloped(polynomString)) {\r\n            return false\r\n        }\r\n\r\n        let P = new Polynom(polynomString)\r\n        if (P.monoms.length > this.monoms.length) {\r\n            return false\r\n        }\r\n\r\n        // TODO: Not ur the reduced systme checking is working properly !\r\n        for (let m of P.monoms) {\r\n            if (!m.coefficient.isReduced()) {\r\n                return false\r\n            }\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    isDeveloped = (polynomString: string): Boolean => {\r\n        let P: Polynom;\r\n\r\n        // There is at least one parenthese - it is not developed.\r\n        if (polynomString.split('(').length + polynomString.split(')').length > 0) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            // Build the polynom\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check that everything is completely developed. Actually, there are no parentheses... so it is fully developed\r\n\r\n        // maybe it wasn't reduced and not ordered...\r\n        // compare polynom string.\r\n\r\n        // normalize the string\r\n        let polynomStringNormalized = polynomString.replaceAll('[*\\s]', '')\r\n\r\n        // Determine if it's the exact same string.\r\n        // TODO: Maybe it's enough to just make this test !\r\n        return polynomStringNormalized === P.reduce().reorder().display\r\n    }\r\n\r\n    // -------------------------------------\r\n    reduce = (): Polynom => {\r\n        // Reduce the polynom\r\n        let values = [...this._monoms],\r\n            vars = [...this.variables]\r\n\r\n        this._monoms = []\r\n\r\n        let coeffs = values.filter(x => x.variables.length === 0)\r\n\r\n        if (coeffs.length > 0) {\r\n            this._monoms.push(coeffs.reduce((a, b) => a.add(b)))\r\n        }\r\n\r\n        // Build the new monoms\r\n        for (let letter of vars) {\r\n            // Monom with same letters, but might be of different degrees\r\n            let M = values.filter(x => x.hasLetter(letter))\r\n\r\n            while (M.length > 0) {\r\n                // Take the first element\r\n                const m = M.shift(), degree = m.degree(letter)\r\n\r\n                for (let a of M.filter(x => x.degree(letter).isEqual(degree))) {\r\n                    m.add(a)\r\n                }\r\n\r\n                this._monoms.push(m)\r\n\r\n                // Make the new array.\r\n                M = M.filter(x => x.degree(letter).isNotEqual(degree))\r\n            }\r\n            // reduce the monom\r\n\r\n        }\r\n\r\n        // Remove all null monoms\r\n        this._monoms = this._monoms.filter((m) => {\r\n            return m.coefficient.value !== 0\r\n        });\r\n\r\n        // Reduce all monoms coefficient.\r\n        for (const m of this._monoms) {\r\n            m.coefficient.reduce();\r\n        }\r\n\r\n        if (this.length === 0) {\r\n            return new Polynom().zero();\r\n        }\r\n        return this.reorder();\r\n    };\r\n\r\n    reorder = (letter: string = 'x'): Polynom => {\r\n        // TODO: Must handle multiple setLetter reorder system\r\n        let otherLetters = this.variables.filter(x => x !== letter)\r\n        this._monoms.sort(function (a, b) {\r\n            let da = a.degree(letter).value,\r\n                db = b.degree(letter).value\r\n\r\n            // Values are different\r\n            if (da !== db) return db - da\r\n\r\n            // if values are equals, check other letters.\r\n            if (otherLetters.length > 0) {\r\n                for (let L of otherLetters) {\r\n                    let da = a.degree(L).value,\r\n                        db = b.degree(L).value\r\n\r\n                    // Values are different\r\n                    if (da !== db) return db - da\r\n                }\r\n            }\r\n\r\n            return 0\r\n            // return b.degree(letter).clone().subtract(a.degree(letter)).value\r\n        });\r\n\r\n        return this;\r\n    };\r\n\r\n    degree = (letter?: string): Fraction => {\r\n        let d: Fraction = new Fraction().zero();\r\n        for (const m of this._monoms) {\r\n            d = Fraction.max(m.degree(letter).value, d);\r\n        }\r\n        return d;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        let L: string[] = [], S = new Set();\r\n\r\n        for (let m of this._monoms) {\r\n            S = new Set([...S, ...m.variables]);\r\n        }\r\n\r\n        // @ts-ignore\r\n        return [...S];\r\n    }\r\n\r\n    /**\r\n     * Replace a variable (letter) by a polynom.\r\n     * @param letter\r\n     * @param P\r\n     */\r\n    replaceBy = (letter: string, P: Polynom): Polynom => {\r\n        this.mark_as_dirty()\r\n\r\n        let pow: Fraction;\r\n        const resultPolynom: Polynom = new Polynom().zero();\r\n\r\n        for (const m of this.monoms) {\r\n            if (m.literal[letter] === undefined || m.literal[letter].isZero()) {\r\n                resultPolynom.add(m.clone());\r\n            } else {\r\n                // We have found a setLetter.\r\n                // Get the power and reset it.\r\n                pow = m.literal[letter].clone();\r\n                delete m.literal[letter];\r\n\r\n                // TODO: replaceBy works only with positive and natural pow\r\n                resultPolynom.add(P.clone().pow(Math.abs(pow.numerator)).multiply(m));\r\n            }\r\n        }\r\n\r\n        this._monoms = resultPolynom.reduce().reorder().monoms;\r\n        return this;\r\n    };\r\n\r\n    // Evaluate a polynom.\r\n    evaluate = (values: literalType | Fraction | number): Fraction => {\r\n        const r = new Fraction().zero();\r\n\r\n        this._monoms.forEach(monom => {\r\n            //console.log('Evaluate polynom: ', monom.display, values, monom.evaluate(values).display);\r\n            r.add(monom.evaluate(values));\r\n        });\r\n\r\n        return r;\r\n    };\r\n\r\n    evaluateAsNumeric = (values: { [Key: string]: number } | number): number => {\r\n        let r = 0\r\n        this._monoms.forEach(monom => {\r\n            r += monom.evaluateAsNumeric(values)\r\n        })\r\n\r\n        return r\r\n    }\r\n\r\n    derivative = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.derivative(letter));\r\n        }\r\n        return dP;\r\n    }\r\n    // ------------------------------------------\r\n    // Misc polynoms functions\r\n\r\n    primitive = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.primitive(letter))\r\n        }\r\n        return dP\r\n    }\r\n\r\n    integrate = (a: Fraction | number, b: Fraction | number, letter?: string): Fraction => {\r\n        const primitive = this.primitive(letter)\r\n\r\n        if (letter === undefined) {\r\n            letter = 'x'\r\n        }\r\n\r\n        let valuesA: literalType = {},\r\n            valuesB: literalType = {}\r\n        valuesA[letter] = new Fraction(a);\r\n        valuesB[letter] = new Fraction(b);\r\n\r\n        return primitive.evaluate(valuesB).subtract(primitive.evaluate(valuesA))\r\n    }\r\n\r\n    // -------------------------------------\r\n    /**\r\n     * Factorize a polynom and store the best results in factors.\r\n     * @param maxValue Defines the greatest value to search to (default is 20).\r\n     */\r\n    factorize = (letter?: string): Polynom[] => {\r\n        if (!this.dirty_factors) {\r\n            return this._factors\r\n        }\r\n\r\n        let factors: Polynom[] = [];\r\n        let P = this.clone().reorder()\r\n\r\n        // Extract the common monom\r\n        // 2x^3+6x^2 => 2x^2\r\n        let M = P.commonMonom()\r\n        // If the polynom starts with a negative monom, factorize it.\r\n        if (P.monomByDegree().coefficient.isStrictlyNegative() && M.coefficient.isStrictlyPositive() && !M.isOne()) {\r\n            M.opposed()\r\n        }\r\n\r\n        if (!M.isOne()) {\r\n            let tempPolynom: Polynom = new Polynom(M)\r\n            factors = [tempPolynom.clone()]\r\n            P = P.euclidian(tempPolynom).quotient;\r\n        }\r\n\r\n        // Main loop\r\n        let securityLoop = P.degree().clone().multiply(2).value,\r\n            maxDegree = 1\r\n        while (securityLoop >= 0) {\r\n            securityLoop--\r\n            if (P.monoms.length < 2) {\r\n                // The polynom has only one monom => 7x^2\r\n                // No need to continue.\r\n                if (!P.isOne()) {\r\n                    factors.push(P.clone())\r\n                    P.one()\r\n                }\r\n                break\r\n            } else if (P.degree(letter).isOne()) {\r\n                // The polynom is a first degree polynom => 3x-5\r\n                // No need to continue\r\n                factors.push(P.clone())\r\n                P.one()\r\n                break\r\n            } else {\r\n                // Create the list of all \"potential\" polynom dividers.\r\n                let allDividers: Polynom[] = this._getAllPotentialFactors(P, maxDegree, letter)\r\n                maxDegree = P.degree(letter).value\r\n\r\n                // Actually: 100ms\r\n                while (allDividers.length > 0) {\r\n                    let div = allDividers[0]\r\n\r\n                    if (!P.isDividableBy(div)) {\r\n                        // Not dividable. Remove it from the list\r\n                        allDividers.shift()\r\n                    } else {\r\n                        // It's dividable - so make the division\r\n                        let result = P.euclidian(div)\r\n\r\n                        // Add the factor\r\n                        factors.push(div)\r\n\r\n                        // As it's dividable, get the quotient.\r\n                        P = result.quotient.clone()\r\n\r\n                        // filter all dividers that are no more suitable.\r\n                        allDividers = allDividers.filter(x => {\r\n                            let pX = P.monoms[0],\r\n                                pC = P.monoms[P.monoms.length - 1],\r\n                                dX = x.monoms[0],\r\n                                dC = x.monoms[x.monoms.length - 1]\r\n\r\n                            // Check last item (degree zero)\r\n                            if (!pC.isDivisible(dC)) {\r\n                                return false\r\n                            }\r\n\r\n                            // Check the first item (degree max)\r\n                            if (!pX.isDivisible(dX)) {\r\n                                return false\r\n                            }\r\n\r\n                            return true\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Maybe there is still something in the Polynom (not everything was possible to factorize)\r\n        if (!P.isOne()) {\r\n            factors.push(P.clone())\r\n        }\r\n\r\n        // Save the factors\r\n        this._factors = factors\r\n\r\n        // The factors list is no more dirty\r\n        this.dirty_factors = false\r\n\r\n        return this._factors;\r\n    }\r\n\r\n    isDividableBy = (div: Polynom): boolean => {\r\n        // Quick evaluation.\r\n        if (div.degree().isOne()) {\r\n            let zero = div.getZeroes()[0]\r\n\r\n            if (zero.exact instanceof Fraction) {\r\n                return this.evaluate(zero.exact).isZero()\r\n            } else {\r\n                return false\r\n            }\r\n        } else {\r\n            this.euclidianCache[div.tex] = this.euclidian(div)\r\n            return this.euclidianCache[div.tex].reminder.isZero()\r\n        }\r\n    }\r\n    // TODO: get zeroes for more than first degree and for more than natural degrees\r\n    getZeroes = (): ISolution[] => {\r\n        if (this.dirty_zeroes) {\r\n            let equ = new Equation(this.clone(), 0)\r\n            equ.solve()\r\n            this._zeroes = equ.solutions\r\n            this.dirty_zeroes = false\r\n        }\r\n\r\n        return this._zeroes\r\n    };\r\n\r\n    // TODO: analyse the next functions to determine if they are useful or not...\r\n    monomByDegree = (degree?: Fraction | number, letter?: string): Monom => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomByDegree(this.degree(letter), letter);\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter).isEqual(degree)) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        // Nothing was found - return the null monom.\r\n        return new Monom().zero();\r\n    };\r\n\r\n    monomsByDegree = (degree?: number | Fraction, letter?: string): Monom[] => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomsByDegree(this.degree(letter));\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        let Ms: Monom[] = [];\r\n\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter) === degree) {\r\n                Ms.push(m.clone())\r\n            }\r\n        }\r\n\r\n        return Ms\r\n        // Nothing was found - retur\r\n    }\r\n\r\n    // Used in LinearSystem.tex\r\n    monomByLetter = (letter: string): Monom => {\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.hasLetter(letter)) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        return new Monom().zero();\r\n    };\r\n\r\n    // Next functions are used for for commonMonom, which is used in the factorize method.\r\n    getDenominators = (): number[] => {\r\n        const denominators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            denominators.push(m.coefficient.denominator);\r\n        }\r\n        return denominators;\r\n    };\r\n\r\n    getNumerators = (): number[] => {\r\n        const numerators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            numerators.push(m.coefficient.numerator);\r\n        }\r\n        return numerators;\r\n    };\r\n\r\n    lcmDenominator = (): number => {\r\n        return Numeric.lcm(...this.getDenominators());\r\n    };\r\n    // ------------------------------------------\r\n    // Polynoms factorization functions\r\n\r\n    gcdDenominator = (): number => {\r\n        return Numeric.gcd(...this.getDenominators());\r\n    };\r\n\r\n    lcmNumerator = (): number => {\r\n        return Numeric.lcm(...this.getNumerators());\r\n    };\r\n\r\n    gcdNumerator = (): number => {\r\n        return Numeric.gcd(...this.getNumerators());\r\n    };\r\n    // ------------------------------------------\r\n    // Polynoms helpers functions\r\n    // -------------------------------------\r\n\r\n    commonMonom = (): Monom => {\r\n        let M = new Monom().one(), numerator: number, denominator: number, degree = this.degree();\r\n\r\n        numerator = this.gcdNumerator();\r\n        denominator = this.gcdDenominator();\r\n\r\n        M.coefficient = new Fraction(numerator, denominator);\r\n        for (let L of this.variables) {\r\n            // Initialize the setLetter with the max degree\r\n            M.setLetter(L, degree);\r\n            for (let m of this._monoms) {\r\n                M.setLetter(L, Fraction.min(m.degree(L), M.degree(L)));\r\n                if (M.degree(L).isZero()) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return M;\r\n    }\r\n\r\n    limitToInfinity = (letter?: string): Fraction => {\r\n        const M = this.monomByDegree(undefined, letter),\r\n            sign = M.coefficient.sign(),\r\n            degree = M.degree(letter)\r\n\r\n        if (degree.isStrictlyPositive()) {\r\n            return sign === 1 ? (new Fraction()).infinite() : (new Fraction()).infinite().opposed()\r\n        } else if (degree.isZero()) {\r\n            return M.coefficient\r\n        }\r\n\r\n        // Any other cases\r\n        return (new Fraction()).zero()\r\n    }\r\n    limitToNegativeInfinity = (letter?: string): Fraction => {\r\n        const M = this.monomByDegree(undefined, letter),\r\n            sign = M.coefficient.sign(),\r\n            degree = M.degree(letter)\r\n\r\n        if (degree.isStrictlyPositive()) {\r\n            return sign === -1 ? (new Fraction()).infinite() : (new Fraction()).infinite().opposed()\r\n        } else if (degree.isZero()) {\r\n            return M.coefficient\r\n        }\r\n\r\n        // Any other cases\r\n        return (new Fraction()).zero()\r\n    }\r\n\r\n    private _getAllPotentialFactors = (P: Polynom, maxDegree: number, letter: string): Polynom[] => {\r\n        let m1 = P.monoms[0].dividers,\r\n            m2 = P.monoms[P.monoms.length - 1].dividers\r\n\r\n        let allDividers: Polynom[] = []\r\n        m1.forEach(m1d => {\r\n            // Get only polynom that has a degree less than a specific value\r\n            if (m1d.degree(letter).leq(maxDegree)) {\r\n                m2.forEach(m2d => {\r\n                    if (m1d.degree(letter).isNotEqual(m2d.degree(letter))) {\r\n                        allDividers.push(new Polynom(m1d, m2d))\r\n                        allDividers.push(new Polynom(m1d, m2d.clone().opposed()))\r\n                    }\r\n                })\r\n            }\r\n        })\r\n\r\n        return allDividers\r\n\r\n    }\r\n\r\n    private _parseString(inputStr: string, ...values: unknown[]): Polynom {\r\n        if (values === undefined || values.length === 0) {\r\n            inputStr = '' + inputStr;\r\n            this._rawString = inputStr.trim().replaceAll(' ', '');\r\n\r\n            // Parse the polynom using the shutting yard algorithm\r\n            if (inputStr !== '' && !isNaN(Number(inputStr))) {\r\n                this.empty();\r\n                // It's a simple number.\r\n                let m = new Monom(inputStr);\r\n                // m.coefficient = new Fraction(inputStr);\r\n                // m.literalStr = '';\r\n                this.add(m);\r\n                return this;\r\n            }\r\n\r\n            // Parse the string.\r\n            return this.shutingYardToReducedPolynom(inputStr);\r\n        } else if (/^[a-z]/.test(inputStr)) {\r\n            // We assume the inputStr contains only letters.\r\n            this.empty();\r\n\r\n            let fractions = values.map(x => new Fraction(x));\r\n            // Multiple setLetter version\r\n            if (inputStr.length > 1) {\r\n                // TODO: check that the number of values given correspond to the letters (+1 eventually)\r\n                let letters = inputStr.split(''),\r\n                    i = 0;\r\n                for (let F of fractions) {\r\n                    let m = new Monom();\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = letters[i] || '';\r\n                    this.add(m);\r\n                    i++;\r\n                }\r\n            }\r\n            // Single setLetter version\r\n            else {\r\n                let n = fractions.length - 1;\r\n                for (let F of fractions) {\r\n                    let m = new Monom()\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = `${inputStr}^${n}`\r\n                    this.add(m);\r\n                    n--;\r\n                }\r\n            }\r\n            return this;\r\n        } else {\r\n            return this.zero();\r\n        }\r\n    }\r\n\r\n    private genDisplay = (output?: string, forceSign?: boolean, wrapParentheses?: boolean, withAllMultSign?: boolean): string => {\r\n        let P: string = '';\r\n\r\n        for (const k of this._monoms) {\r\n            if (k.coefficient.value === 0) {\r\n                continue;\r\n            }\r\n\r\n            // The monom to be displayed\r\n            let m\r\n            if (withAllMultSign) {\r\n                m = k.plotFunction\r\n            } else {\r\n                m = (output === 'tex') ? k.tex : k.display\r\n            }\r\n\r\n            P += `${(k.coefficient.sign() === 1 && (P !== '' || forceSign === true)) ? '+' : ''}${m}`;\r\n        }\r\n\r\n        if (wrapParentheses === true && this.length > 1) {\r\n            if (output === 'tex') {\r\n                P = `\\\\left( ${P} \\\\right)`;\r\n            } else {\r\n                P = `(${P})`;\r\n            }\r\n        }\r\n\r\n        if (P === '') {\r\n            P = '0';\r\n        }\r\n        return P;\r\n    };\r\n\r\n    /**\r\n     * Main parse using a shutting yard class\r\n     * @param inputStr\r\n     */\r\n    private shutingYardToReducedPolynom = (inputStr: string): Polynom => {\r\n        // Get the RPN array of the current expression\r\n        const SY: Shutingyard = new Shutingyard().parse(inputStr);\r\n        const rpn: { token: string, tokenType: string }[] = SY.rpn;\r\n\r\n        // New version for reducing shuting yard.\r\n        this.zero()\r\n\r\n        let stack: Polynom[] = [],\r\n            monom: Monom = new Monom()\r\n\r\n        // Loop through the\r\n        for (const element of rpn) {\r\n            this.addToken(stack, element);\r\n        }\r\n\r\n        if (stack.length === 1) {\r\n            this.add(stack[0])\r\n        }\r\n\r\n        return this.reorder()\r\n    }\r\n\r\n    private multiplyByPolynom = (P: Polynom): Polynom => {\r\n        const M: Monom[] = [];\r\n        for (const m1 of this._monoms) {\r\n            for (const m2 of P.monoms) {\r\n                M.push(Monom.xmultiply(m1, m2));\r\n            }\r\n        }\r\n\r\n        this._monoms = M;\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.multiply(F);\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByInteger = (nb: number): Polynom => {\r\n        return this.multiplyByFraction(new Fraction(nb));\r\n    };\r\n\r\n    private multiplyByMonom = (M: Monom): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.multiply(M)\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n    private divideByInteger = (nb: number): Polynom => {\r\n        const nbF = new Fraction(nb);\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(nbF);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    private divideByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(F);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    private _factorize2ndDegree = (letter: string): Polynom[] => {\r\n        let P1: Polynom, P2: Polynom,\r\n            a, b, c, delta, x1, x2, factor;\r\n\r\n        // One variable only\r\n        if (this.numberOfVars === 1) {\r\n            a = this.monomByDegree(2, letter).coefficient;\r\n            b = this.monomByDegree(1, letter).coefficient;\r\n            c = this.monomByDegree(0, letter).coefficient;\r\n            delta = b.clone().pow(2).subtract(a.clone().multiply(c).multiply(4));\r\n\r\n            if (delta.isZero()) {\r\n                x1 = b.clone().opposed().divide(a.clone().multiply(2))\r\n                P1 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                P2 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                factor = a.divide(x1.denominator).divide(x1.denominator);\r\n\r\n                if (!factor.isOne()) {\r\n                    // TODO: Update new Polynom to accept anything...\r\n                    return [new Polynom(factor.display), P1, P2]\r\n                } else {\r\n                    return [P1, P2]\r\n                }\r\n            } else if (delta.isPositive() && delta.isSquare()) {\r\n                x1 = b.clone().opposed()\r\n                    .add(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n                x2 = b.clone().opposed()\r\n                    .subtract(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n\r\n                // (2x+5)(3x-2)\r\n                // 6x^2+11x-10\r\n                // a = 6, b = 11, c = -10\r\n                // delta = 121-4*6*(-10) = 361= 19^2\r\n                // x1 = (-11 + 19)  / 12 = 8/12 = 2/3\r\n                // x2 = (-11 - 19)  / 12 = -30/12 = -5/2\r\n                factor = a.divide(x1.denominator).divide(x2.denominator);\r\n                if (factor.isOne()) {\r\n                    return [\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n                } else {\r\n                    return [\r\n                        new Polynom(factor.display),\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n\r\n                }\r\n            } else {\r\n                // No solution possible - return the complete value.\r\n                return [this.clone()]\r\n            }\r\n        } else {\r\n            // If multiple variables, only handle perfect squares...\r\n            a = this.monomByDegree(2, letter);\r\n            b = this.monomByDegree(1, letter);\r\n            c = this.monomByDegree(0, letter);\r\n\r\n\r\n            if (a.isLiteralSquare() && c.isLiteralSquare()) {\r\n                // Check the middle item is same as...\r\n                if (b.clone().pow(2).isSameAs(a.clone().multiply(c))) {\r\n                    // Determine if the coefficient values matches.\r\n\r\n                    // Search 4 values (r, s, t, u) that matches:\r\n                    // (r X + s Y)(t X + u Y) = rt X^2 + (ru + st) XY + su Y^2\r\n\r\n                    let xPolynom = new Polynom('x', a.coefficient, b.coefficient, c.coefficient);\r\n                    let xFactors = xPolynom._factorize2ndDegree('x');\r\n\r\n                    let factors = [], xyzPolynom: Polynom;\r\n\r\n                    if (xFactors.length >= 2) {\r\n                        for (let p of xFactors) {\r\n                            if (p.degree().isZero()) {\r\n                                factors.push(p.clone())\r\n                            } else {\r\n                                xyzPolynom = p.clone();\r\n                                xyzPolynom.monoms[0].literal = a.literalSqrt\r\n                                xyzPolynom.monoms[1].literal = c.literalSqrt\r\n                                factors.push(xyzPolynom.clone())\r\n                            }\r\n                        }\r\n                        return factors\r\n                    }\r\n                }\r\n            }\r\n\r\n            return [this.clone()]\r\n        }\r\n    }\r\n\r\n    private _factorizeByGroups = (): Polynom[] => {\r\n        // TODO: Factorize by groups.\r\n        return [];\r\n    }\r\n}\r\n","/**\r\n * Rational polynom module contains everything necessary to handle rational polynoms.\r\n * @module Polynom\r\n */\r\n\r\nimport {IEuclidian, Polynom} from \"./polynom\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {literalType} from \"./monom\";\r\nimport {PARTICULAR_SOLUTION} from \"./equation\";\r\nimport {RationalStudy} from \"./study/rationalStudy\";\r\nimport {StudyConfig} from \"./study\";\r\n\r\n/**\r\n * Rational class can handle rational polynoms\r\n */\r\nexport class Rational {\r\n    private _denominator: Polynom;\r\n    private _numerator: Polynom;\r\n    private _rawString: string;\r\n\r\n    /**\r\n     *\r\n     * @param numerator\r\n     * @param denominator\r\n     */\r\n    constructor(numerator?: Polynom | string, denominator?: Polynom | string) {\r\n        if (numerator instanceof Polynom) {\r\n            this._numerator = numerator.clone()\r\n        } else if (typeof numerator === 'string') {\r\n            this._numerator = new Polynom(numerator)\r\n        } else {\r\n            this._numerator = new Polynom()\r\n        }\r\n\r\n        if (denominator instanceof Polynom) {\r\n            this._denominator = denominator.clone()\r\n        } else if (typeof denominator === 'string') {\r\n            this._denominator = new Polynom(denominator)\r\n        } else {\r\n            this._denominator = new Polynom()\r\n        }\r\n\r\n    }\r\n\r\n    get numerator(): Polynom {\r\n        return this._numerator\r\n    }\r\n\r\n    get denominator(): Polynom {\r\n        return this._denominator\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\frac{ ${this._numerator.tex} }{ ${this._denominator.tex} }`;\r\n    }\r\n\r\n    get texFactors(): string {\r\n        return `\\\\frac{ ${this._numerator.texFactors} }{ ${this._denominator.texFactors} }`\r\n    }\r\n\r\n    get plotFunction(): string {\r\n        return `(${this._numerator.plotFunction})/(${this._denominator.plotFunction})`\r\n    }\r\n\r\n    clone = (): Rational => {\r\n        return new Rational(\r\n            this._numerator.clone(),\r\n            this._denominator.clone()\r\n        )\r\n    }\r\n\r\n    domain = (): string => {\r\n        let zeroes = this._denominator.getZeroes();\r\n\r\n        if (zeroes.length === 0 || zeroes[0].tex === PARTICULAR_SOLUTION.real) {\r\n            return PARTICULAR_SOLUTION.varnothing\r\n        } else if (zeroes[0].tex === PARTICULAR_SOLUTION.varnothing) {\r\n            return PARTICULAR_SOLUTION.real\r\n        } else {\r\n            return '\\\\mathbb{R}\\\\setminus\\\\left\\\\{' +\r\n                zeroes.map(x => x.tex).join(';') + '\\\\right\\\\}'\r\n        }\r\n    }\r\n\r\n    amplify = (P: Polynom): Rational => {\r\n        this._numerator.multiply(P);\r\n        this._denominator.multiply(P);\r\n\r\n        return this;\r\n    }\r\n\r\n    derivative = (letter?: string): Rational => {\r\n        let N = this._numerator.clone(),\r\n            D = this._denominator.clone(),\r\n            dN = N.clone().derivative(letter),\r\n            dD = D.clone().derivative(letter)\r\n\r\n        this._numerator = dN.clone().multiply(D).subtract(N.clone().multiply(dD))\r\n        this._denominator = D.clone().pow(2)\r\n\r\n        return this\r\n    }\r\n\r\n    factorize = (letter?: string): Rational => {\r\n        this._numerator.factorize(letter)\r\n        this._denominator.factorize(letter)\r\n        return this\r\n    }\r\n\r\n    simplify = (P: Polynom): Rational => {\r\n        let NumeratorEuclidien = this._numerator.euclidian(P);\r\n        if (!NumeratorEuclidien.reminder.isZero()) {\r\n            return this;\r\n        }\r\n\r\n        let DenominatorEuclidien = this._denominator.euclidian(P);\r\n        if (!DenominatorEuclidien.reminder.isZero()) {\r\n            return this;\r\n        }\r\n\r\n        this._numerator = NumeratorEuclidien.quotient;\r\n        this._denominator = DenominatorEuclidien.quotient;\r\n        return this;\r\n    }\r\n\r\n    reduce = (): Rational => {\r\n        this._numerator.factorize();\r\n        for (let f of this._numerator.factors) {\r\n            this.simplify(f);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    opposed = (): Rational => {\r\n        this._numerator.opposed();\r\n        return this;\r\n    }\r\n\r\n    add = (R: Rational): Rational => {\r\n        // 1. Make sure both rational are at the same denominator\r\n        // 2. Add the numerators.\r\n        // 3. Simplify\r\n\r\n        // Store the adding denominator\r\n        let denominator = this._denominator.clone()\r\n\r\n        // Amplif the main rational polynom by the adding denominator\r\n        this.amplify(R._denominator)\r\n\r\n        // Add to the numerator the adding value...\r\n        this._numerator.add(R._numerator.clone().multiply(denominator));\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (R: Rational): Rational => {\r\n        return this.add(R.clone().opposed())\r\n    }\r\n\r\n    euclidian = (): IEuclidian => {\r\n        return this._numerator.euclidian(this._denominator)\r\n    }\r\n\r\n    // TODO : where and how is used limits ?\r\n    limits = (value: Fraction | number, offset?: string, letter?: string): Fraction => {\r\n        if (value === Infinity || value === -Infinity) {\r\n            let {quotient, reminder} = this._numerator.clone().euclidian(this._denominator)\r\n\r\n            // quotient is positive => it will be infinite.\r\n            if (quotient.degree(letter).isStrictlyPositive()) {\r\n                return value === Infinity ? quotient.limitToInfinity(letter) : quotient.limitToNegativeInfinity(letter)\r\n                // return quotient.monomByDegree(undefined, letter).coefficient.sign()===1?(new Fraction()).infinite():(new Fraction()).infinite().opposed()\r\n            } else {\r\n                return quotient.monomByDegree(undefined, letter).coefficient\r\n            }\r\n        } else {\r\n            let evalValues: literalType = {},\r\n                evalValuesOffset: literalType = {},\r\n                theLimit: Fraction | number,\r\n                theSign: number,\r\n                FR = this.clone().reduce()\r\n\r\n            evalValues[letter === undefined ? 'x' : letter] = new Fraction(value)\r\n\r\n            if (offset !== 'above' && offset !== 'below') {\r\n                theLimit = FR._numerator.evaluate(evalValues)\r\n                    .divide(FR._denominator.evaluate(evalValues))\r\n\r\n                return theLimit.isInfinity() ? theLimit.abs() : theLimit\r\n            } else {\r\n                if (offset === 'above') {\r\n                    evalValuesOffset[letter === undefined ? 'x' : letter] = (new Fraction(value)).add(0.000001)\r\n                } else if (offset === 'below') {\r\n                    evalValuesOffset[letter === undefined ? 'x' : letter] = (new Fraction(value)).subtract(0.000001)\r\n                }\r\n\r\n                theLimit = FR._numerator.evaluate(evalValues)\r\n                    .divide(FR._denominator.evaluate(evalValues))\r\n                theSign = FR._numerator.evaluate(evalValuesOffset)\r\n                    .divide(FR._denominator.evaluate(evalValuesOffset)).sign()\r\n\r\n                if (theLimit.isInfinity()) {\r\n                    return theSign === 1 ? theLimit.abs() : theLimit.abs().opposed()\r\n                } else {\r\n                    return theLimit\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    evaluate = (values: literalType | Fraction | number): Fraction => {\r\n        const r = new Fraction().zero();\r\n\r\n        let N = this._numerator.evaluate(values),\r\n            D = this._denominator.evaluate(values)\r\n\r\n        return N.divide(D)\r\n    };\r\n\r\n    evaluateAsNumeric = (values: { [Key: string]: number } | number): number => {\r\n        return this._numerator.evaluateAsNumeric(values) / this._denominator.evaluateAsNumeric(values)\r\n    }\r\n\r\n    study = (config?:StudyConfig|string): RationalStudy => {\r\n        return new RationalStudy(this, config)\r\n    }\r\n}\r\n","/**\r\n * Rational polynom module contains everything necessary to handle rational polynoms.\r\n * @module Polynom\r\n */\r\n\r\nimport {Rational} from \"./rational\";\r\nimport {ISolution} from \"./equation\";\r\nimport {Polynom} from \"./polynom\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Point} from \"../geometry/point\";\r\nimport {NumExp} from \"../expressions/numexp\";\r\n\r\nexport type StudyableFunction = Rational\r\n\r\n\r\nexport enum ZEROTYPE {\r\n    ZERO = 'z',\r\n    DEFENCE = 'd',\r\n    NOTHING = 't'\r\n}\r\n\r\nexport interface IZero extends ISolution {\r\n    extrema: FUNCTION_EXTREMA,\r\n    type: ZEROTYPE\r\n}\r\n\r\nexport enum ASYMPTOTE {\r\n    VERTICAL = \"av\",\r\n    HORIZONTAL = \"ah\",\r\n    SLOPE = \"ao\",\r\n    HOLE = \"hole\"\r\n}\r\n\r\nexport enum ASYMPTOTE_POSITION {\r\n    \"LT\" = \"LT\",\r\n    \"RT\" = \"RT\",\r\n    \"LB\" = \"LB\",\r\n    \"RB\" = \"RB\"\r\n}\r\n\r\nexport interface IAsymptote {\r\n    deltaX: StudyableFunction\r\n    display: string,\r\n    fx: Polynom,\r\n    limits: string,\r\n    position: ASYMPTOTE_POSITION[]\r\n    tableOfSign: ITableOfSigns,\r\n    tex: string,\r\n    type: ASYMPTOTE,\r\n    zero: IZero,\r\n}\r\n\r\nexport enum FUNCTION_EXTREMA {\r\n    MIN = \"min\",\r\n    MAX = \"max\",\r\n    FLAT = \"flat\",\r\n    NOTHING = \"\"\r\n}\r\n\r\nexport interface IExtrema {\r\n    tex: {\r\n        x: string,\r\n        y: string\r\n    },\r\n    type: FUNCTION_EXTREMA,\r\n    value: {\r\n        x: number,\r\n        y: number\r\n    }\r\n\r\n}\r\n\r\nexport interface ITableOfSigns {\r\n    extremes: { [Key: string]: IExtrema },\r\n    factors: Polynom[],\r\n    fx: StudyableFunction,\r\n    signs: (string[])[],\r\n    tex: string\r\n    type: TABLE_OF_SIGNS\r\n    zeroes: IZero[],\r\n}\r\n\r\nexport enum TABLE_OF_SIGNS {\r\n    SIGNS = \"signs\",\r\n    GROWS = \"grows\",\r\n    VARIATIONS = \"variatins\"\r\n}\r\n\r\nexport interface StudyConfig {\r\n    asymptotes?: boolean,\r\n    derivative?: boolean,\r\n    domain?: boolean,\r\n    name?: string,\r\n    signs?: boolean,\r\n    variations?: boolean\r\n}\r\n\r\n/**\r\n * The study class is a \"function study\" class that will get:\r\n * fx               : get the function\r\n * domain           : string\r\n * zeroes           : Object (tex, IZero)\r\n * signs            : table of signs + tex output  using tkz-tab\r\n * av               : vertical asymptotic\r\n * ah               : horizontal asymptotic\r\n * ao               : obliques\r\n * deltaX           : position relative\r\n * dx               : derivative\r\n * grows            : growing table + tex output  using tkz-tab\r\n * ddx              : dérivée seconde\r\n * variations       : variation table + tex output  using tkz-tab\r\n */\r\nexport class Study {\r\n    fx: StudyableFunction\r\n    private _asymptotes: IAsymptote[]\r\n    private _derivative: ITableOfSigns\r\n    private _signs: ITableOfSigns\r\n    private _variations: ITableOfSigns\r\n    private _zeroes: IZero[]\r\n    private _config: StudyConfig\r\n    private _name: string\r\n\r\n    constructor(fx: StudyableFunction, config?: StudyConfig | string) {\r\n        this.fx = fx\r\n\r\n        this._config = {\r\n            name :'f',\r\n            domain :true,\r\n            asymptotes :true,\r\n            signs :true,\r\n            derivative :true,\r\n            variations :true,\r\n        }\r\n\r\n        if (config) {\r\n            if (typeof config === 'string') {\r\n                const d = config.split(',')\r\n                this._config = {}\r\n                let n = d.filter(x=>x.includes('(x)'))\r\n                if(n.length===1){\r\n                    this._config.name = n[0].split('(x)')[0]\r\n                }\r\n                this._config.domain = d.includes('d')\r\n                this._config.asymptotes = d.includes('a')\r\n                this._config.signs = d.includes('signs')\r\n                this._config.derivative = d.includes('dx')\r\n                this._config.variations = d.includes('ddx')\r\n            } else {\r\n                this._config = config\r\n            }\r\n        }\r\n\r\n        this._name = this._config?.name ?? 'f'\r\n\r\n        this.makeStudy()\r\n        return this\r\n    }\r\n\r\n    get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    set name(value: string) {\r\n        this._name = value;\r\n    }\r\n\r\n    get config(): StudyConfig {\r\n        return this._config;\r\n    }\r\n\r\n    set config(value: StudyConfig) {\r\n        this._config = value;\r\n    }\r\n\r\n    get zeroes(): IZero[] {\r\n        return this._zeroes;\r\n    }\r\n\r\n    get domain(): string {\r\n        return this.fx.domain()\r\n    }\r\n\r\n    get signs(): ITableOfSigns {\r\n        return this._signs;\r\n    }\r\n\r\n    get asymptotes(): IAsymptote[] {\r\n        return this._asymptotes;\r\n    }\r\n\r\n    get derivative(): ITableOfSigns {\r\n        return this._derivative;\r\n    }\r\n\r\n    get texSigns(): string {\r\n        return this._makeTexFromTableOfSigns(this._signs)\r\n    }\r\n\r\n    get texGrows(): string {\r\n        return this._makeTexFromTableOfSigns(this._derivative)\r\n    }\r\n\r\n    get texVariations(): string {\r\n        return this._makeTexFromTableOfSigns(this._variations)\r\n    }\r\n\r\n    makeStudy = (): void => {\r\n        this._zeroes = this.makeZeroes()\r\n\r\n        if (this._config.signs) this._signs = this.makeSigns()\r\n\r\n        if (this._config.asymptotes) this._asymptotes = this.makeAsymptotes()\r\n\r\n        if (this._config.derivative) this._derivative = this.makeDerivative()\r\n\r\n        if (this._config.variations) this._variations = this.makeVariation()\r\n\r\n        // Table of signs / derivative / variation\r\n        if (this._config.signs) this._signs.tex = this.texSigns\r\n\r\n        if (this._config.derivative) this._derivative.tex = this.texGrows\r\n\r\n        if (this._config.variations) this._variations.tex = this.texVariations\r\n    };\r\n\r\n    indexOfZero = (zeroes: IZero[], zero: IZero | ISolution): number => {\r\n        for (let i = 0; i < zeroes.length; i++) {\r\n            if (zeroes[i].tex === zero.tex) {\r\n                return i\r\n            }\r\n        }\r\n        return -1\r\n    };\r\n\r\n    makeOneLineForSigns = (factor: Polynom, zeroes: IZero[], zeroSign: ZEROTYPE): string[] => {\r\n        let oneLine: string[] = [],\r\n            currentZero = factor.getZeroes().map(x => x.tex)\r\n\r\n        // First +/- sign, before the first zero\r\n        oneLine.push('')\r\n        if (factor.degree().isZero()) {\r\n            oneLine.push(factor.monoms[0].coefficient.sign() === 1 ? '+' : '-')\r\n        } else {\r\n            oneLine.push(factor.evaluate(zeroes[0].value - 1).sign() === 1 ? '+' : '-')\r\n        }\r\n\r\n        for (let i = 0; i < zeroes.length; i++) {\r\n            // Add the zero if it's the current one\r\n            oneLine.push(currentZero.includes(zeroes[i].tex) ? zeroSign : ZEROTYPE.NOTHING)\r\n\r\n            // + / - sign after the current zero\r\n            if (i < zeroes.length - 1) {\r\n                oneLine.push(factor.evaluate((zeroes[i].value + zeroes[i + 1].value) / 2).sign() === 1 ? '+' : '-')\r\n            } else if (i === zeroes.length - 1) {\r\n                oneLine.push(factor.evaluate(zeroes[i].value + 1).sign() === 1 ? '+' : '-')\r\n            }\r\n\r\n        }\r\n        oneLine.push('')\r\n\r\n        return oneLine\r\n    }\r\n\r\n    makeSignsResult = (signs: (string[])[]): string[] => {\r\n\r\n        // Initialize the result line with the first line of the signs table\r\n        let resultLine: string[] = signs[0].map((x, index) => {\r\n            if (index === 0 || index === signs[0].length - 1) {\r\n                return ''\r\n            }\r\n\r\n            if (index % 2 === 0) {\r\n                return 't'\r\n            }\r\n\r\n            return '+'\r\n        })\r\n\r\n        // Go through each lines (except the first)\r\n        for (let current of signs) {\r\n\r\n            for (let i = 0; i < current.length; i++) {\r\n                if (i % 2 === 0) {\r\n                    // t, z or d\r\n                    if (resultLine[i] === 'd') {\r\n                        continue\r\n                    }\r\n                    if (current[i] !== 't') {\r\n                        resultLine[i] = current[i]\r\n                    }\r\n                } else {\r\n                    // + or -\r\n                    if (current[i] === '-') {\r\n                        resultLine[i] = resultLine[i] === '+' ? '-' : '+'\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return resultLine\r\n    }\r\n\r\n    makeGrowsResult = (tos: ITableOfSigns): { growsLine: string[], extremes: { [Key: string]: IExtrema } } => {\r\n\r\n        // Use the last line (=> resultLine) to grab the necessary information\r\n        let signsAsArray = Object.values(tos.signs),\r\n            resultLine = signsAsArray[signsAsArray.length - 1],\r\n            growsLine: string[] = [],\r\n            extremes: { [Key: string]: IExtrema } = {},\r\n            zeroes = tos.zeroes\r\n\r\n        // Get the extremes\r\n        for (let i = 0; i < zeroes.length; i++) {\r\n\r\n            // Get the corresponding item in the resultLine.\r\n            let pos = 2 * i + 2\r\n            if (resultLine[pos] === 'z') {\r\n\r\n                // It's a zero. Get the coordinates\r\n                let x: number, y: number, zero = zeroes[i].exact,\r\n                    pt: Point,\r\n                    xTex: string, yTex: string,\r\n                    pointType: FUNCTION_EXTREMA\r\n\r\n                // TODO: NumExp should parse something that isn't yet plotFunction\r\n                let exp = new NumExp(this.fx.plotFunction)\r\n\r\n                if (zero instanceof Fraction) {\r\n                    let value: Fraction = zero,\r\n                        evalY = this.fx.evaluate(value)\r\n\r\n                    x = zero.value\r\n                    y = evalY.value\r\n                    xTex = zero.tex\r\n                    yTex = evalY.tex\r\n                } else {\r\n                    x = zeroes[i].value\r\n                    y = exp.evaluate({x})\r\n\r\n                    xTex = x.toFixed(2)\r\n                    yTex = y.toFixed(2)\r\n                }\r\n\r\n                // Determine the type of the zero.\r\n                if (resultLine[pos - 1] === resultLine[pos + 1]) {\r\n                    pointType = FUNCTION_EXTREMA.FLAT\r\n                } else if (resultLine[pos - 1] === '+') {\r\n                    pointType = FUNCTION_EXTREMA.MAX\r\n                } else {\r\n                    pointType = FUNCTION_EXTREMA.MIN\r\n\r\n                }\r\n\r\n                // Add the point to the list\r\n                extremes[zeroes[i].tex] = {\r\n                    type: pointType,\r\n                    tex: {x: xTex, y: yTex},\r\n                    value: {x, y}\r\n                }\r\n            }\r\n        }\r\n\r\n        // Create the grows line, based on tkz-tab\r\n        // \\tkzTabLine{  ,  +  ,  z    ,  -  ,  d  ,  -  ,  z  ,  +  ,  }\r\n        // \\tkzTabVar{     -/  , +/$3$ ,       -D+/ , -/$1$  , +/  }\r\n        growsLine.push(resultLine[1] === '+' ? '-/' : '+/')\r\n        for (let i = 1; i < resultLine.length - 1; i++) {\r\n            if (resultLine[i] === \"z\") {\r\n                let extr = extremes[zeroes[(i - 2) / 2].tex]\r\n\r\n                growsLine.push(`${resultLine[i - 1]}/\\\\(${extr.type}(${extr.tex.x};${extr.tex.y})\\\\)`)\r\n            } else if (resultLine[i] === 'd') {\r\n                growsLine.push(`${resultLine[i - 1]}D${resultLine[i + 1] === '+' ? '-' : '+'}/`)\r\n            }\r\n        }\r\n        growsLine.push(`${resultLine[resultLine.length - 2]}/`)\r\n\r\n        return {growsLine, extremes}\r\n    }\r\n\r\n    makeVariationsResult = (tos: ITableOfSigns): { varsLine: string[], extremes: { [Key: string]: IExtrema } } => {\r\n        // TODO: make variations result is not yet implemented.\r\n        let extremes = {},\r\n            varsLine: string[] = []\r\n        return {varsLine, extremes}\r\n    }\r\n\r\n    makeZeroes(): IZero[] {\r\n        return []\r\n    };\r\n\r\n    makeSigns(): ITableOfSigns {\r\n        return {\r\n            type: TABLE_OF_SIGNS.SIGNS,\r\n            fx: null,\r\n            factors: [],\r\n            zeroes: [],\r\n            signs: [],\r\n            extremes: {},\r\n            tex: ''\r\n        }\r\n    };\r\n\r\n    makeAsymptotes(): IAsymptote[] {\r\n        return []\r\n    }\r\n\r\n    makeDerivative(): ITableOfSigns {\r\n        return {\r\n            type: TABLE_OF_SIGNS.GROWS,\r\n            fx: null,\r\n            factors: [],\r\n            zeroes: [],\r\n            signs: [],\r\n            extremes: {},\r\n            tex: ''\r\n        }\r\n    }\r\n\r\n    makeVariation(): ITableOfSigns {\r\n        return {\r\n            type: TABLE_OF_SIGNS.VARIATIONS,\r\n            fx: null,\r\n            factors: [],\r\n            zeroes: [],\r\n            signs: [],\r\n            extremes: {},\r\n            tex: ''\r\n        }\r\n    }\r\n\r\n    drawCode = (): string => {\r\n        // Function as string\r\n        let code = `f(x)=${this.fx.plotFunction}`\r\n\r\n        // Asymptotes\r\n        let i: number = 1\r\n        this.asymptotes.forEach(asymptote => {\r\n            if (asymptote.type === ASYMPTOTE.VERTICAL) {\r\n                code += `\\nav_${i}=line x=${asymptote.zero.value}->red,dash`\r\n                i++\r\n            } else if (asymptote.type === ASYMPTOTE.HORIZONTAL) {\r\n                code += `\\nah=line y=${asymptote.fx.monoms[0].coefficient.value}->orange,dash`\r\n            } else if (asymptote.type === ASYMPTOTE.SLOPE) {\r\n                code += `\\nao=line y=${asymptote.fx.plotFunction}->red,dash`\r\n            }\r\n            i++\r\n        })\r\n\r\n        // Extremes\r\n        for (let zero in this.derivative.extremes) {\r\n            let extreme = this.derivative.extremes[zero]\r\n\r\n            code += `\\nM_${i}(${extreme.value.x},${extreme.value.y})*`\r\n            i++\r\n        }\r\n\r\n        // Zeroes\r\n        this.zeroes.forEach(zero => {\r\n            if (zero.type === ZEROTYPE.ZERO) {\r\n                code += `\\nZ_${i}(${zero.value},0)*`\r\n                i++\r\n            }\r\n        })\r\n\r\n        return code\r\n    }\r\n\r\n    private _makeTexFromTableOfSigns = (tos: ITableOfSigns): string => {\r\n        let factors = tos.factors.map(x => `\\\\(${x.tex}\\\\)/1`),\r\n            factorsFx = `\\\\(${this._name}(x)\\\\)/1.2`,\r\n            zeroes = tos.zeroes\r\n\r\n        // Add the last lines \"label\"\r\n        if (tos.type === TABLE_OF_SIGNS.GROWS) {\r\n            factorsFx = `\\\\(${this._name}'(x)\\\\)/1.2,\\\\(f(x)\\\\)/2`\r\n        } else if (tos.type === TABLE_OF_SIGNS.VARIATIONS) {\r\n            factorsFx = `\\\\(${this._name}''(x)\\\\)/1.2,\\\\(f(x)\\\\)/2`\r\n        }\r\n\r\n        // Create the tikzPicture header\r\n        let tex = `\\\\begin{tikzpicture}\r\n\\\\tkzTabInit[lgt=3,espcl=2,deltacl=0]{/1.2,${factors.join(',')},/.1,${factorsFx} }{{\\\\scriptsize \\\\hspace{1cm} \\\\(-\\\\infty\\\\)},\\\\(${zeroes.map(x => x.tex).join('\\\\),\\\\(')}\\\\),{\\\\scriptsize \\\\hspace{-1cm} \\\\(+\\\\infty\\\\)}}`\r\n\r\n        let pos\r\n        for (pos = 0; pos < tos.factors.length; pos++) {\r\n            tex += (`\\n\\\\tkzTabLine{${tos.signs[pos].join(',')}}`)\r\n        }\r\n\r\n        // Add the result line\r\n        tex += (`\\n\\\\tkzTabLine{${tos.signs[pos].join(',')}}`)\r\n        // Add the grows / vars line\r\n        if (tos.type === TABLE_OF_SIGNS.GROWS) {\r\n            tex += (`\\n\\\\tkzTabVar{${tos.signs[pos + 1].join(',')}}`)\r\n        } else if (tos.type === TABLE_OF_SIGNS.VARIATIONS) {\r\n            // TODO: Check variations table for as tex\r\n            tex += (`\\n\\\\tkzTabVar{${tos.signs[pos + 1].join(',')}}`)\r\n        }\r\n\r\n        tex += `\\n\\\\end{tikzpicture}`\r\n\r\n        return tex\r\n    }\r\n}\r\n","/**\r\n * The study class is a \"function study\" class that will get:\r\n * fx               : get the function\r\n * domain           : string\r\n * zeroes           : Object (tex, IZero)\r\n * signs            : table of signs + tex output  using tkz-tab\r\n * av               : vertical asymptotic\r\n * ah               : horizontal asymptotic\r\n * ao               : obliques\r\n * deltaX           : position relative\r\n * dx               : derivative\r\n * grows            : growing table + tex output  using tkz-tab\r\n * ddx              : dérivée seconde\r\n * variations       : variation table + tex output  using tkz-tab\r\n */\r\nimport {\r\n    ASYMPTOTE,\r\n    ASYMPTOTE_POSITION,\r\n    FUNCTION_EXTREMA,\r\n    IAsymptote,\r\n    ITableOfSigns,\r\n    IZero,\r\n    Study,\r\n    StudyableFunction, StudyConfig,\r\n    TABLE_OF_SIGNS,\r\n    ZEROTYPE\r\n} from \"../study\";\r\nimport {Rational} from \"../rational\";\r\nimport {Fraction} from \"../../coefficients/fraction\";\r\nimport {Polynom} from \"../polynom\";\r\n\r\nexport class RationalStudy extends Study {\r\n    constructor(fx: StudyableFunction, config?: StudyConfig|string) {\r\n        super(fx, config)\r\n\r\n        return this\r\n    }\r\n\r\n    makeZeroes(): IZero[] {\r\n        return this._getZeroes(this.fx)\r\n    };\r\n\r\n    makeSigns(): ITableOfSigns {\r\n        return this._getSigns(this.fx, this.zeroes)\r\n    };\r\n\r\n    makeAsymptotes(): IAsymptote[] {\r\n        const reduced: Rational = this.fx.clone().reduce()\r\n\r\n        // Vertical\r\n        let asymptotes: IAsymptote[] = []\r\n        this.zeroes.filter(x => x.type === ZEROTYPE.DEFENCE).forEach(zero => {\r\n            // Check if it's a hole or an asymptote\r\n            let Ztype = ASYMPTOTE.VERTICAL,\r\n                tex = `x=${zero.tex}`,\r\n                display = `x=${zero.display}`\r\n\r\n            // Check if it's a hole: the reduced polynom should not be null\r\n            if (zero.exact instanceof Fraction) {\r\n                if (reduced.denominator.evaluate(zero.exact).isNotZero()) {\r\n                    Ztype = ASYMPTOTE.HOLE\r\n                    tex = `(${zero.tex};${reduced.evaluate(zero.exact).tex})`\r\n                    display = `(${zero.display};${reduced.evaluate(zero.exact).display})`\r\n                }\r\n            } else {\r\n                if (reduced.denominator.evaluate(zero.value).isNotZero()) {\r\n                    Ztype = ASYMPTOTE.HOLE\r\n                    tex = `(${zero.tex};${reduced.evaluate(zero.value).tex})`\r\n                    display = `(${zero.display};${reduced.evaluate(zero.value).display})`\r\n                }\r\n            }\r\n\r\n            // Get the position before and after the asymptote.\r\n            const delta = 0.000001\r\n            let before = this.fx.evaluateAsNumeric(zero.value - delta),\r\n                after = this.fx.evaluateAsNumeric(zero.value + delta),\r\n                position: ASYMPTOTE_POSITION[] = [],\r\n                pm = \"\"\r\n\r\n            if (after < -10000) {\r\n                position.push(ASYMPTOTE_POSITION.RB)\r\n                pm += \"m\"\r\n            } else if (after > 10000) {\r\n                position.push(ASYMPTOTE_POSITION.RT)\r\n                pm += \"p\"\r\n            }\r\n\r\n            if (before < -10000) {\r\n                position.push(ASYMPTOTE_POSITION.LB)\r\n                pm += \"m\"\r\n            } else if (before > 10000) {\r\n                position.push(ASYMPTOTE_POSITION.LT)\r\n                pm += \"p\"\r\n            }\r\n\r\n            // Left and right are to infinity\r\n            // TODO: handle the case were one side of the asymptote isn't infinity (not possible in rational study?!)\r\n            if (pm === \"pp\") {\r\n                pm = \"+\"\r\n            } else if (pm === \"mm\") {\r\n                pm = \"-\"\r\n            } else {\r\n                pm = `\\\\${pm}`\r\n            }\r\n\r\n            asymptotes.push({\r\n                fx: null,\r\n                type: Ztype,\r\n                tex,\r\n                display,\r\n                zero: zero,\r\n                limits: `\\\\lim_{x\\\\to${zero.tex} }\\\\ f(x) = ${pm}\\\\infty`,\r\n                deltaX: null,\r\n                tableOfSign: null,\r\n                position\r\n            })\r\n        })\r\n\r\n        // Sloped asymptote\r\n        let NDegree = this.fx.numerator.degree(),\r\n            DDegree = this.fx.denominator.degree()\r\n        if (NDegree.isEqual(DDegree)) {\r\n            let H = this.fx.numerator.monomByDegree().coefficient.clone().divide(this.fx.denominator.monomByDegree().coefficient),\r\n                Htex = H.tex\r\n\r\n            let {reminder} = reduced.euclidian(),\r\n                deltaX = new Rational(reminder, reduced.denominator)\r\n\r\n            // Determine the position above or below on the left / right of the asymptote.\r\n            asymptotes.push({\r\n                fx: new Polynom(H),\r\n                type: ASYMPTOTE.HORIZONTAL,\r\n                tex: `y=${Htex}`,\r\n                display: `y=${H.display}`,\r\n                zero: null,\r\n                limits: `\\\\lim_{x\\\\to\\\\infty}\\\\ f(x) = ${Htex}`,\r\n                deltaX,\r\n                tableOfSign: this._getSigns(deltaX),\r\n                position: this._getHorizontalAsymptoteRelativePositon(deltaX)\r\n            })\r\n        } else if (DDegree.greater(NDegree)) {\r\n            asymptotes.push({\r\n                fx: new Polynom('0'),\r\n                type: ASYMPTOTE.HORIZONTAL,\r\n                tex: `y=0`,\r\n                display: `y=0`,\r\n                zero: null,\r\n                limits: `\\\\lim_{x\\\\to\\\\infty}\\\\ f(x) = ${0}`,\r\n                deltaX: null,\r\n                tableOfSign: null,\r\n                position: this._getHorizontalAsymptoteRelativePositon(this.fx)\r\n            })\r\n        } else if (NDegree.value - 1 === DDegree.value) {\r\n            // Calculate the slope\r\n            let {quotient, reminder} = reduced.euclidian(),\r\n                deltaX = new Rational(reminder, reduced.denominator)\r\n\r\n            asymptotes.push({\r\n                fx: quotient.clone(),\r\n                type: ASYMPTOTE.SLOPE,\r\n                tex: `y=${quotient.tex}`,\r\n                display: `y=${quotient.display}`,\r\n                zero: null,\r\n                limits: ``,\r\n                deltaX: new Rational(reminder, reduced.denominator),\r\n                tableOfSign: this._getSigns(deltaX),\r\n                position: this._getHorizontalAsymptoteRelativePositon(deltaX)\r\n            })\r\n        }\r\n\r\n        return asymptotes\r\n    };\r\n\r\n    _getHorizontalAsymptoteRelativePositon(deltaX: Rational, delta: number = 1000000): ASYMPTOTE_POSITION[] {\r\n\r\n        let position: ASYMPTOTE_POSITION[] = [],\r\n            before = deltaX.evaluateAsNumeric(-delta),\r\n            after = deltaX.evaluateAsNumeric(delta)\r\n\r\n        if (before >= 0) {\r\n            position.push(ASYMPTOTE_POSITION.LT)\r\n        } else {\r\n            position.push(ASYMPTOTE_POSITION.LB)\r\n        }\r\n\r\n        if (after >= 0) {\r\n            position.push(ASYMPTOTE_POSITION.RT)\r\n        } else {\r\n            position.push(ASYMPTOTE_POSITION.RB)\r\n        }\r\n\r\n        return position\r\n    }\r\n\r\n    makeDerivative(): ITableOfSigns {\r\n        let dx = this.fx.clone().derivative(),\r\n            tos = this._getSigns(dx, this._getZeroes(dx), TABLE_OF_SIGNS.GROWS)\r\n\r\n        let result = this.makeGrowsResult(tos)\r\n        tos.signs.push(result.growsLine)\r\n        tos.extremes = result.extremes\r\n        return tos\r\n    };\r\n\r\n    makeVariation(): ITableOfSigns {\r\n        // Get the zeroes, make signs.\r\n        let dx = this.derivative.fx.clone().derivative(),\r\n            tos = this._getSigns(dx, this._getZeroes(dx), TABLE_OF_SIGNS.VARIATIONS)\r\n\r\n        let result = this.makeVariationsResult(tos)\r\n        tos.signs.push(result.varsLine)\r\n        tos.extremes = result.extremes\r\n        return tos\r\n    };\r\n\r\n    private _getZeroes(fx: StudyableFunction) {\r\n        // All zeroes.\r\n        let zeroes: IZero[] = []\r\n\r\n        fx.numerator.getZeroes().filter(x => !isNaN(x.value)).forEach(z => {\r\n            // add the item\r\n            zeroes.push({\r\n                tex: z.tex,\r\n                display: z.display,\r\n                value: z.value,\r\n                exact: z.exact,\r\n                extrema: FUNCTION_EXTREMA.NOTHING,\r\n                type: ZEROTYPE.ZERO\r\n            })\r\n        })\r\n\r\n        fx.denominator.getZeroes().filter(x => !isNaN(x.value)).forEach(z => {\r\n            let idx = this.indexOfZero(zeroes, z)\r\n\r\n            if (idx !== -1) {\r\n                zeroes[idx].type = ZEROTYPE.DEFENCE\r\n            } else {\r\n                // Add the item\r\n                zeroes.push({\r\n                    tex: z.tex,\r\n                    display: z.display,\r\n                    value: z.value,\r\n                    exact: z.exact,\r\n                    extrema: FUNCTION_EXTREMA.NOTHING,\r\n                    type: ZEROTYPE.DEFENCE\r\n                })\r\n            }\r\n        })\r\n\r\n        // sort all zeroes\r\n        zeroes.sort((a, b) => a.value - b.value)\r\n\r\n        return zeroes\r\n    }\r\n\r\n    private _getSigns(fx: Rational, zeroes?: IZero[], typeOfTable?: TABLE_OF_SIGNS): ITableOfSigns {\r\n        // Factorize the rational\r\n        let signs: (string[])[] = [],\r\n            factors: Polynom[] = []\r\n\r\n        if (zeroes === undefined) {\r\n            zeroes = this._getZeroes(fx)\r\n        }\r\n\r\n        fx.numerator.factors.forEach(factor => {\r\n            signs.push(this.makeOneLineForSigns(factor, zeroes, ZEROTYPE.ZERO))\r\n            factors.push(factor.clone())\r\n        })\r\n\r\n        fx.denominator.factors.forEach(factor => {\r\n            signs.push(this.makeOneLineForSigns(factor, zeroes, ZEROTYPE.DEFENCE))\r\n            factors.push(factor.clone())\r\n        })\r\n\r\n        signs.push(this.makeSignsResult(signs))\r\n\r\n        return {\r\n            type: typeOfTable,\r\n            fx,\r\n            factors,\r\n            zeroes,\r\n            signs,\r\n            extremes: {},\r\n            tex: ''\r\n        }\r\n    }\r\n}\r\n","import {Numeric} from \"../numeric\";\r\n\r\nexport type FractionParsingType = number | string | Fraction\r\n\r\n/**\r\n * The fraction class make possible to handle\r\n * TODO: Write the documentation correctly.\r\n * \\\\(\\frac{a}{b}\\\\) or \\\\[\\frac{a}{b}\\\\]  values.\r\n */\r\nexport class Fraction {\r\n    private _denominator: number;\r\n    private _numerator: number;\r\n\r\n    constructor(value?: unknown, denominatorOrPeriodic?: number) {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n\r\n        if (value !== undefined) {\r\n            this.parse(value, denominatorOrPeriodic);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n\r\n    get numerator(): number {\r\n        return this._numerator;\r\n    }\r\n\r\n    set numerator(value: number) {\r\n        this._numerator = value;\r\n    }\r\n\r\n    get denominator(): number {\r\n        return this._denominator;\r\n    }\r\n\r\n    set denominator(value: number) {\r\n        this._denominator = value;\r\n    }\r\n\r\n    get value(): number {\r\n        return this._numerator / this._denominator;\r\n    }\r\n\r\n    // Display getter\r\n    get tex(): string {\r\n        if (this.isInfinity()) {\r\n            return `${this.sign() === 1 ? '+' : '-'}\\\\infty`\r\n        }\r\n\r\n        if (this.isExact()) {\r\n            if (this._denominator === 1) {\r\n                return `${this._numerator}`;\r\n            } else if (this._numerator < 0) {\r\n                return `-\\\\frac{ ${-this._numerator} }{ ${this._denominator} }`;\r\n            } else {\r\n                return `\\\\frac{ ${this._numerator} }{ ${this._denominator} }`;\r\n            }\r\n        } else {\r\n            return this.value.toFixed(3)\r\n        }\r\n    }\r\n\r\n    get texWithSign():string {\r\n        return this.isPositive() ? `+${this.tex}` : this.tex;\r\n    }\r\n\r\n    get display(): string {\r\n        if (this.isExact()) {\r\n            if (this._denominator === 1) {\r\n                return `${this._numerator}`;\r\n            } else {\r\n                return `${this._numerator}/${this._denominator}`;\r\n            }\r\n        } else {\r\n            return this.value.toFixed(3)\r\n        }\r\n    }\r\n\r\n    // Helper function to display fractions\r\n    get frac(): string {\r\n        return this.tex;\r\n    }\r\n\r\n    get dfrac(): string {\r\n        return this.tex.replace('\\\\frac', '\\\\dfrac');\r\n    }\r\n\r\n    get tfrac(): string {\r\n        return this.tex.replace('\\\\frac', '\\\\tfrac')\r\n    }\r\n\r\n    static max = (...fractions: (Fraction | number)[]): Fraction => {\r\n        let M = new Fraction(fractions[0])\r\n\r\n        for (let m of fractions) {\r\n            let compare = new Fraction(m)\r\n            if (compare.greater(M)) {\r\n                M = compare.clone()\r\n            }\r\n        }\r\n\r\n        return M\r\n    }\r\n\r\n    static min = (...fractions: (Fraction | number)[]): Fraction => {\r\n        let M = new Fraction(fractions[0])\r\n\r\n        for (let m of fractions) {\r\n            let compare = new Fraction(m)\r\n            if (compare.lesser(M)) {\r\n                M = compare.clone()\r\n            }\r\n        }\r\n\r\n        return M\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n\r\n    static average = (...fractions: (Fraction | number)[]): Fraction => {\r\n        let M = new Fraction().zero()\r\n\r\n        for (let f of fractions) {\r\n            M.add(f)\r\n        }\r\n\r\n        M.divide(fractions.length)\r\n\r\n        return M\r\n    }\r\n\r\n    static unique = (fractions: Fraction[], sorted?: boolean): Fraction[] => {\r\n        // TODO: make sure it's wokring -> test !\r\n        let unique: { [Key: string]: boolean } = {},\r\n            distinct: Fraction[] = []\r\n        fractions.forEach(x => {\r\n            if (!unique[x.clone().reduce().tex]) {\r\n                distinct.push(x.clone())\r\n                unique[x.tex] = true\r\n            }\r\n        })\r\n\r\n        if (sorted) {\r\n            return Fraction.sort(distinct)\r\n        } else {\r\n            return distinct\r\n        }\r\n    }\r\n\r\n    static sort = (fractions: Fraction[], reverse?: boolean): Fraction[] => {\r\n        // Todo make sure it's the correct order, not reverse -> make a test\r\n        let sorted = fractions.sort((a, b) => a.value - b.value)\r\n\r\n        if (reverse) {\r\n            sorted.reverse()\r\n        }\r\n\r\n        return sorted\r\n    }\r\n\r\n    isApproximative = (): boolean => {\r\n        return this._numerator.toString().length >= 15 && this._denominator.toString().length >= 15\r\n    }\r\n\r\n    isExact = (): boolean => {\r\n        return !this.isApproximative()\r\n    }\r\n\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse the value to get the numerator and denominator\r\n     * @param value : number or string to parse to get the fraction\r\n     * @param denominatorOrPeriodic (optional|number) : length of the periodic part: 2.333333 => 1 or denominator value\r\n     */\r\n    parse = (value: unknown, denominatorOrPeriodic?: number): Fraction => {\r\n        let S: string[];\r\n\r\n        // A null value means a zero fraction.\r\n        if (value === null || value === \"\") {\r\n            this._numerator = 0;\r\n            this._denominator = 1;\r\n            return this;\r\n        }\r\n\r\n        switch (typeof value) {\r\n            case \"string\":\r\n                // Split the string value in two parts: Numerator/Denominator\r\n                S = value.split('/');\r\n\r\n                // Security checks\r\n                if (S.length > 2) throw value + \" has too many divide signs\";\r\n                if (S.map(x => x === '' || isNaN(Number(x))).includes(true)) throw value + \" is not a valid number\"\r\n\r\n                if (S.length === 1) {\r\n                    // No divide sign - it's a number\r\n                    return this.parse(+S[0]);\r\n                } else if (S.length === 2) {\r\n                    // One divide signe\r\n                    // We check if the denominator is zero\r\n                    if (S[1] === '0') {\r\n                        this._numerator = NaN;\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._numerator = +S[0];\r\n                        this._denominator = +S[1];\r\n                    }\r\n                } else {\r\n                    // More than one divide sign ?\r\n                    // This is impossible\r\n                    this._numerator = NaN;\r\n                    this._denominator = 1;\r\n                }\r\n                break;\r\n            case \"number\":\r\n                if (Number.isSafeInteger(value)) {\r\n                    // The given value is an integer\r\n                    this._numerator = +value;\r\n\r\n                    if (denominatorOrPeriodic === undefined || !Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._denominator = +denominatorOrPeriodic;\r\n                    }\r\n                } else {\r\n                    // The given value is a float number\r\n                    // Get the number of decimals after the float sign\r\n                    let [unit, decimal] = (value.toString()).split('.')\r\n                    let p: number = decimal?decimal.length:0;\r\n\r\n                    // Detect if the decimal part is periodic or not...\r\n\r\n\r\n                    // Transform the float number in two integer\r\n                    if (denominatorOrPeriodic === undefined) {\r\n                        this._numerator = value * Math.pow(10, p);\r\n                        this._denominator = Math.pow(10, p);\r\n                    } else if (Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._numerator = value * Math.pow(10, p) - Math.floor(value * Math.pow(10, p - denominatorOrPeriodic));\r\n                        this.denominator = Math.pow(10, p) - Math.pow(10, p - denominatorOrPeriodic)\r\n                    }\r\n\r\n                    this.reduce()\r\n                }\r\n                break;\r\n            case \"object\":\r\n                if (value instanceof Fraction) {\r\n                    this._numerator = +value.numerator;\r\n                    this._denominator = +value.denominator;\r\n                }\r\n                break;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n\r\n    clone = (): Fraction => {\r\n        let F = new Fraction();\r\n        F.numerator = +this._numerator;\r\n        F.denominator = +this._denominator;\r\n        return F;\r\n    };\r\n\r\n    zero = (): Fraction => {\r\n        this._numerator = 0;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    one = (): Fraction => {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    infinite = (): Fraction => {\r\n        this._numerator = Infinity;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    invalid = (): Fraction => {\r\n        this._numerator = NaN;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    opposed = (): Fraction => {\r\n        this._numerator = -this._numerator;\r\n        return this;\r\n    };\r\n\r\n    add = (F: Fraction | number): Fraction => {\r\n        if (F instanceof Fraction) {\r\n            let N: number = this._numerator,\r\n                D: number = this._denominator;\r\n\r\n            this._numerator = N * F.denominator + F.numerator * D;\r\n            this._denominator = D * F.denominator;\r\n        } else {\r\n            return this.add(new Fraction(F))\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (F: Fraction | number): Fraction => {\r\n        if (F instanceof Fraction) {\r\n            return this.add(F.clone().opposed());\r\n        } else {\r\n            return this.add(-F)\r\n        }\r\n    };\r\n\r\n    multiply = (F: Fraction | number): Fraction => {\r\n        // Parse the value.\r\n        // If it's a fraction, return a clone of it\r\n        // If it's an integer, return the fraction F/1\r\n        let Q = new Fraction(F);\r\n\r\n        this._numerator = this._numerator * Q.numerator;\r\n        this._denominator = this._denominator * Q.denominator;\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    xMultiply = (...values: (Fraction | number)[]): Fraction => {\r\n        // Parse the value.\r\n        // If it's a fraction, return a clone of it\r\n        // If it's an integer, return the fraction F/1\r\n        for(let value of values){\r\n            let F = new Fraction(value)\r\n            this._numerator = this._numerator * F.numerator;\r\n            this._denominator = this._denominator * F.denominator;\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    divide = (F: Fraction | number): Fraction => {\r\n        let Q = new Fraction(F);\r\n\r\n        if (Q.numerator === 0) {\r\n            return new Fraction().infinite();\r\n        }\r\n\r\n        let N: number = +this._numerator,\r\n            D: number = +this._denominator;\r\n\r\n        this._numerator = N * Q.denominator;\r\n        this._denominator = D * Q.numerator;\r\n        return this.reduce();\r\n    };\r\n\r\n    invert = (): Fraction => {\r\n        let n = +this._numerator, d = +this._denominator;\r\n        this._numerator = d;\r\n        this._denominator = n;\r\n\r\n        return this;\r\n    }\r\n\r\n    pow = (p: number | Fraction): Fraction => {\r\n        // TODO: Fraction.pow with a value different than a safe integer !\r\n        if (p instanceof Fraction) {\r\n            return this.pow(p.value)\r\n        }\r\n\r\n        this.reduce();\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        // Check if numerator and denominator are roots of...\r\n        // othervise, convert to numeric.\r\n        let controlNumerator = Math.floor(Math.pow(this._numerator, Math.abs(p))),\r\n            controlDenominator = Math.floor(Math.pow(this._denominator, Math.abs(p)))\r\n\r\n        if (controlNumerator ** Math.abs(p) === this._numerator\r\n            &&\r\n            controlDenominator ** Math.abs(p) === this._denominator) {\r\n\r\n            this._numerator = this._numerator ** Math.abs(p);\r\n            this._denominator = this._denominator ** Math.abs(p);\r\n        } else {\r\n            this._numerator = this._numerator ** Math.abs(p);\r\n            this._denominator = this._denominator ** Math.abs(p);\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    root = (p: number): Fraction => {\r\n        // TODO: nth - root of a fraction => this will return another type of coefficient.\r\n\r\n        // Check if they are perfect roots..\r\n        if (p === 0) {\r\n            return this;\r\n        }\r\n\r\n        // If negative, invert the fraction\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        let n = Math.pow(this._numerator, Math.abs(1 / p)),\r\n            d = Math.pow(this._denominator, Math.abs(1 / p));\r\n\r\n        this._numerator = Math.pow(this._numerator, Math.abs(1 / p));\r\n        this._denominator = Math.pow(this._denominator, Math.abs(1 / p));\r\n        return this;\r\n    }\r\n\r\n    sqrt = (): Fraction => {\r\n        return this.root(2);\r\n    }\r\n\r\n    abs = (): Fraction => {\r\n        this._numerator = Math.abs(this._numerator);\r\n        this._denominator = Math.abs(this._denominator);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations specific to fractions\r\n\r\n    // ------------------------------------------\r\n    reduce = (): Fraction => {\r\n        let g = Numeric.gcd(this._numerator, this._denominator);\r\n        this._numerator = this._numerator / g;\r\n        this._denominator = this._denominator / g;\r\n\r\n        if (this._denominator < 0) {\r\n            this._denominator = -this._denominator;\r\n            this._numerator = -this._numerator;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    amplify = (k: number): Fraction => {\r\n        if (Number.isSafeInteger(k)) {\r\n            this._numerator *= k;\r\n            this._denominator *= k;\r\n        }\r\n        return this;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param F (Coefficient) The coefficient to compare\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (F: unknown, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n        let compareFraction: Fraction\r\n        if (F instanceof Fraction) {\r\n            compareFraction = F.clone()\r\n        } else {\r\n            compareFraction = new Fraction(F)\r\n        }\r\n\r\n        switch (sign) {\r\n            case '>':\r\n                return this.value > compareFraction.value;\r\n            case \">=\" || \"=>\" || \"geq\":\r\n                return this.value >= compareFraction.value;\r\n            case \"<\":\r\n                return this.value < compareFraction.value;\r\n            case \"<=\" || \"=>\" || \"leq\":\r\n                return this.value <= compareFraction.value;\r\n            case \"=\":\r\n                // let F2: Fraction = compareFraction.clone().reduce(),\r\n                //     F1: Fraction = this.clone().reduce();\r\n                // return (F1.numerator === F2.numerator && F1.denominator === F2.denominator);\r\n                return this.value === compareFraction.value;\r\n            case \"<>\":\r\n                return this.value !== compareFraction.value;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n    /* Compare shortcuts */\r\n    lesser = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '<');\r\n    };\r\n    leq = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '<=');\r\n    };\r\n    greater = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '>');\r\n    };\r\n    geq = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '>=');\r\n    };\r\n    isEqual = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '=');\r\n    }\r\n    isNotEqual = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '<>');\r\n    }\r\n    isOpposed = (p: Fraction): boolean => {\r\n        return this.isEqual(p.clone().opposed());\r\n    }\r\n    isInverted = (p: Fraction): boolean => {\r\n        return this.isEqual(new Fraction().one().divide(p.clone()));\r\n    }\r\n    isZero = (): boolean => {\r\n        return this._numerator === 0;\r\n    }\r\n    isNotZero = (): boolean => {\r\n        return this._numerator !== 0;\r\n    }\r\n    isOne = (): boolean => {\r\n        return this._numerator === 1 && this._denominator === 1;\r\n    }\r\n    isNegativeOne = (): boolean => {\r\n        return this._numerator === -1 && this._denominator === 1;\r\n    }\r\n    isPositive = (): boolean => {\r\n        return this.sign() === 1;\r\n    }\r\n    isNegative = (): boolean => {\r\n        return this.sign() === -1;\r\n    }\r\n    isStrictlyPositive = (): boolean => {\r\n        return this.value > 0\r\n    }\r\n    isStrictlyNegative = (): Boolean => {\r\n        return this.value < 0\r\n    }\r\n    isNaN = (): boolean => {\r\n        return isNaN(this._numerator);\r\n    }\r\n    isInfinity = (): boolean => {\r\n        return Math.abs(this._numerator) === Infinity;\r\n    }\r\n    isFinite = (): boolean => {\r\n        return !this.isInfinity() && !this.isNaN();\r\n    }\r\n    isSquare = (): boolean => {\r\n        return Math.sqrt(this._numerator) % 1 === 0 && Math.sqrt(this._denominator) % 1 === 0\r\n    }\r\n    isReduced = (): boolean => {\r\n        return Math.abs(Numeric.gcd(this._numerator, this._denominator)) === 1\r\n    }\r\n    isNatural = (): boolean => {\r\n        return this.isRelative() && this.isPositive()\r\n    }\r\n    isRelative = (): boolean => {\r\n        return this.clone().reduce().denominator === 1\r\n    }\r\n    isRational = (): boolean => {\r\n        return !this.isRelative()\r\n    }\r\n    isEven = (): boolean => {\r\n        return this.isRelative() && this.value % 2 === 0\r\n    }\r\n    isOdd = (): boolean => {\r\n        return this.isRelative() && this.value % 2 === 1\r\n    }\r\n    sign = (): number => {\r\n        return (this._numerator * this._denominator >= 0) ? 1 : -1;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Simple function to determine if it's a fraction\r\n     */\r\n    areEquals = (...F: Fraction[]): boolean => {\r\n        for (let i = 0; i < F.length; i++) {\r\n            if (!this.isEqual(F[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n}","/**\r\n * NthRoot is something like \"a+b\\sqrt{3}\r\n */\r\nexport class NthRoot {\r\n    private _radical: number;\r\n    private _nth: number;\r\n    private _coefficient: number;\r\n    private _isValid:boolean;\r\n\r\n    constructor(...values: number[]) {\r\n        this._radical = 1;\r\n        this._coefficient = 1;\r\n        this._nth = 2;\r\n        this._isValid = true;\r\n\r\n        if(values !== undefined){\r\n            this.parse(values[0], values[1], values[2])\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get radical(): number {\r\n        return this._radical;\r\n    }\r\n\r\n    set radical(value: number) {\r\n        this._radical = value;\r\n    }\r\n\r\n    get nth(): number {\r\n        return this._nth;\r\n    }\r\n\r\n    set nth(value: number) {\r\n        if (Number.isSafeInteger(value) && value >= 2) {\r\n            this._nth = value;\r\n        } else {\r\n            // Error setting the nth root.\r\n            console.log('Error setting the nth root');\r\n            this._nth = 2;\r\n        }\r\n    }\r\n\r\n    get coefficient(): number {\r\n        return this._coefficient;\r\n    }\r\n\r\n    set coefficient(value: number) {\r\n        this._coefficient = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let C: string;\r\n\r\n        if (this._coefficient === 1) {\r\n            C = '';\r\n        } else if (this._coefficient === -1) {\r\n            C = '-';\r\n        } else {\r\n            C = this._coefficient.toString();\r\n        }\r\n\r\n        if (this._radical === 1) {\r\n            return `${this._coefficient}`;\r\n        } else {\r\n            if (this._nth === 2) {\r\n                return `${C}\\\\sqrt{${this._radical}}`\r\n            } else {\r\n                return `${C}\\\\sqrt[${this._nth}]{${this._radical}}`\r\n            }\r\n        }\r\n    }\r\n\r\n    get display(): string {\r\n        let C: string;\r\n\r\n        if (this._coefficient === 1) {\r\n            C = '';\r\n        } else if (this._coefficient === -1) {\r\n            C = '-';\r\n        } else {\r\n            C = this._coefficient.toString();\r\n        }\r\n\r\n        if (this._radical === 1) {\r\n            return `${this._coefficient}`;\r\n        } else {\r\n            if (this._nth === 2) {\r\n                return `${C}sqrt{${this._radical}}`\r\n            } else {\r\n                return `${C}root(${this._nth}){${this._radical}}`\r\n            }\r\n        }\r\n    }\r\n\r\n    get value(): number {\r\n        return this._coefficient * Math.pow(this._radical, 1 / this._nth);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (radical: number, nthroot?: number, coefficient?: number): NthRoot => {\r\n        this._coefficient = (coefficient === undefined) ? 1 : coefficient;\r\n        this._nth = (nthroot === undefined) ? 2 : nthroot;\r\n        this._radical = (radical === undefined) ? 1 : radical;\r\n\r\n        if(this._nth%2===0 && this._radical<0){\r\n            this._isValid = false;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    reduce = (): NthRoot => {\r\n        // Max value to test.\r\n        let V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n        while (V > 1) {\r\n            if (this._radical % Math.pow(V, this._nth) === 0) {\r\n                // It's dividable by V^n\r\n                this._coefficient *= V;\r\n                this._radical = this._radical / Math.pow(V, this._nth);\r\n\r\n                // Redifine the new testing value (this is optimization)\r\n                V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n                continue;\r\n            }\r\n            V--;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiply = (N: NthRoot): NthRoot => {\r\n        this._radical *= N.radical;\r\n        return this.reduce();\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Help functions\r\n    // ------------------------------------------\r\n    hasRadical = ():boolean => {\r\n        return !(this._radical===1 || this._radical===0 || this._isValid===false)\r\n    };\r\n}","import {Shutingyard, ShutingyardMode, ShutingyardType, tokenConstant} from \"../shutingyard\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\nexport class NumExp {\r\n    private _rpn: { token: string, tokenType: string }[]\r\n    private _expression: string\r\n    private _isValid: boolean\r\n\r\n    constructor(value: string, uniformize?:boolean) {\r\n        this._expression = value\r\n        try {\r\n            this._rpn = new Shutingyard(ShutingyardMode.NUMERIC).parse(value, uniformize || uniformize===undefined).rpn\r\n        }catch(e){\r\n            this._rpn = null\r\n            this._isValid = false\r\n        }\r\n    }\r\n\r\n    get rpn(): { token: string; tokenType: string }[] {\r\n        return this._rpn;\r\n    }\r\n\r\n    get isValid(): boolean {\r\n        if(this._isValid===undefined){\r\n            try {\r\n                const v = this.evaluate({x: 0})\r\n            }catch{\r\n                this._isValid = false\r\n            }\r\n        }\r\n        return this._isValid\r\n    }\r\n\r\n    set isValid(value: boolean){\r\n        this._isValid = value\r\n    }\r\n\r\n    get expression(): string {\r\n        return this._expression;\r\n    }\r\n\r\n    private _extractDecimalPart(value: number): string {\r\n        let decimal = value.toString()\r\n\r\n        if (!decimal.includes('.')) {\r\n            return ''\r\n        }\r\n\r\n        decimal = decimal.split('.')[1]\r\n\r\n        return decimal.substring(0, decimal.length - 2)\r\n    }\r\n\r\n    private _numberCorrection(value: number): number {\r\n        // Must modify the number if it's like:\r\n        // a: 3.0000000000000003\r\n        // b: 3.9999999999999994\r\n        // remove the last character\r\n        // check if around n last characters are either 0 or 9\r\n        // if it is, 'round' the number.\r\n\r\n        const epsilon = 0.00000000000001,\r\n            number_of_digits = 6\r\n\r\n        const decimal = this._extractDecimalPart(value)\r\n        if(decimal===''){return value}\r\n\r\n        const n9 = decimal.match(/9+$/g)\r\n        const n0 = decimal.match(/0+$/g)\r\n\r\n        if (n9 && n9[0].length >= number_of_digits) {\r\n            // New tested values.\r\n            const mod = this._extractDecimalPart(value + epsilon),\r\n                mod0 = mod.match(/0+$/g)\r\n\r\n            if(mod0 && mod0[0].length>= number_of_digits){\r\n                // The value can be changed. Remove all zeros!\r\n                return +((value+epsilon).toString().split(mod0[0])[0])\r\n            }\r\n        }\r\n\r\n        if (n0 && n0[0].length >= number_of_digits) {\r\n            // New tested values.\r\n            const mod = this._extractDecimalPart(value - epsilon),\r\n                mod9 = mod.match(/9+$/g)\r\n\r\n            if(mod9 && mod9[0].length>= number_of_digits){\r\n                // The value can be changed. Remove all nines!\r\n                return +(value.toString().split(n0[0])[0])\r\n            }\r\n        }\r\n\r\n        return value\r\n    }\r\n\r\n    private _addToStack(stack:number[], value: number): void {\r\n        stack.push(this._numberCorrection(value))\r\n    }\r\n\r\n    evaluate(values: { [Key: string]: number }): number {\r\n        const stack: number[] = []\r\n\r\n        if(this._rpn===null){\r\n            this._isValid = false\r\n            return 0\r\n        }\r\n\r\n        this.isValid = true\r\n\r\n        for (const element of this._rpn) {\r\n            if (element.tokenType === ShutingyardType.COEFFICIENT) {\r\n                // May be a numeric value or a Fraction.\r\n                if (!isNaN(+element.token)) {\r\n                    this._addToStack(stack, +element.token)\r\n                } else {\r\n                    this._addToStack(stack, new Fraction(element.token).value)\r\n                }\r\n            } else if (element.tokenType === ShutingyardType.VARIABLE) {\r\n                if (values[element.token] !== undefined) {\r\n                    this._addToStack(stack, +values[element.token])\r\n                }\r\n            } else if (element.tokenType === ShutingyardType.CONSTANT) {\r\n                this._addToStack(stack, tokenConstant[element.token])\r\n            } else if (element.tokenType === ShutingyardType.OPERATION) {\r\n                if (element.token === '*') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if(a === undefined || b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, a * b)\r\n                } else if (element.token === '/') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if(a === undefined || b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, a / b)\r\n                } else if (element.token === '+') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if(a === undefined || b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, (+a) + (+b))\r\n                } else if (element.token === '-') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop() || 0\r\n                    if(b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, a - b)\r\n                } else if (element.token === '^') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if(a === undefined || b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, Math.pow(a, b))\r\n                }\r\n            } else if (element.tokenType === ShutingyardType.FUNCTION) {\r\n                const a = stack.pop()\r\n                if(a === undefined){this.isValid = false}\r\n                if (element.token === 'sin') {\r\n                    this._addToStack(stack, Math.sin(a))\r\n                } else if (element.token === 'cos') {\r\n                    this._addToStack(stack, Math.cos(a))\r\n                } else if (element.token === 'tan') {\r\n                    this._addToStack(stack, Math.tan(a))\r\n                } else if(element.token === 'sqrt') {\r\n                    this._addToStack(stack, Math.sqrt(a))\r\n                }else if(element.token ==='nthrt') {\r\n                    // TODO: support nthrt in num. exp.\r\n                    let b = stack.pop()\r\n                    if(a%2===0 && b<0){\r\n                        this._addToStack(stack, NaN)\r\n                    }else {\r\n                        this._addToStack(stack, (b < 0 ? -1 : 1) * Math.pow(Math.abs(b), 1 / a))\r\n                    }\r\n                } else if(element.token === 'ln'){\r\n                    this._addToStack(stack, Math.log(a))\r\n                } else if(element.token === 'log') {\r\n                    this._addToStack(stack, Math.log10(a))\r\n                }\r\n            }\r\n        }\r\n\r\n        if (stack.length === 1) {\r\n            return stack[0]\r\n        } else {\r\n            throw `There was a problem parsing: ${this._expression}`\r\n        }\r\n    }\r\n}\r\n","import {Polynom, PolynomParsingType} from \"../algebra/polynom\";\r\nimport {Fraction, FractionParsingType} from \"../coefficients/fraction\";\r\n\r\ntype PolynomExpMathFunctionType = { name: string; fn: Function, tex: string }\r\n\r\nexport class PolynomExpFactor {\r\n    constructor(polynom: PolynomParsingType, degree?: FractionParsingType, mathFunction?: PolynomExpMathFunctionType) {\r\n        this._polynom = new Polynom(polynom)\r\n        this._degree = new Fraction(degree === undefined ? 1 : degree)\r\n        this._fn = mathFunction\r\n        this._powerAsInteger = true\r\n        this._forceParenthesis = true\r\n\r\n    }\r\n\r\n    private _forceParenthesis: boolean\r\n\r\n    get forceParenthesis(): boolean {\r\n        return this._forceParenthesis;\r\n    }\r\n\r\n    set forceParenthesis(value: boolean) {\r\n        this._forceParenthesis = value;\r\n    }\r\n\r\n    private _fn: PolynomExpMathFunctionType\r\n\r\n    get fn(): PolynomExpMathFunctionType {\r\n        return this._fn;\r\n    }\r\n\r\n    set fn(value: PolynomExpMathFunctionType) {\r\n        this._fn = value;\r\n    }\r\n\r\n    private _powerAsInteger: boolean\r\n\r\n    get powerAsInteger(): boolean {\r\n        return this._powerAsInteger;\r\n    }\r\n\r\n    set powerAsInteger(value: boolean) {\r\n        this._powerAsInteger = value;\r\n    }\r\n\r\n    private _polynom: Polynom\r\n\r\n    get polynom(): Polynom {\r\n        return this._polynom;\r\n    }\r\n\r\n    set polynom(value: Polynom) {\r\n        this._polynom = value;\r\n    }\r\n\r\n    private _degree: Fraction\r\n\r\n    get degree(): Fraction {\r\n        return this._degree;\r\n    }\r\n\r\n    set degree(value: Fraction) {\r\n        this._degree = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let tex\r\n\r\n        if (this._degree.isOne() && (this._fn !== undefined || !this._forceParenthesis)) {\r\n            // If degree is one, no need to add the parenthesis.\r\n            tex = this._polynom.tex\r\n        } else {\r\n            // the degree is not one, add the parenthesis.\r\n            if (this._powerAsInteger && !this._degree.isRelative()) {\r\n                // the degree is a fraction and we want natural powers => use sqrt.\r\n                tex = `\\\\sqrt${this._degree.denominator !== 2 ? `[ ${this._degree.denominator} ]` : ''}{ ${this._polynom.tex} }^{ ${this._degree.numerator} }`\r\n            } else if (this.isCoefficient && this.firstCoefficient.isNatural()) {\r\n                // the value is a natural number (eg 3, 7, ...)\r\n                tex = this._polynom.tex + this._texDegree\r\n            } else {\r\n                // In any other case, add the parenthesis by default\r\n                tex = `\\\\left( ${this._polynom.tex} \\\\right)${this._texDegree}`\r\n            }\r\n        }\r\n\r\n        if (this._fn !== undefined && this._fn.tex !== undefined) {\r\n            tex = `${this._fn.tex}\\\\left( ${tex} \\\\right)`\r\n        }\r\n        return tex\r\n    }\r\n\r\n    get isCoefficient(): boolean {\r\n        // TODO: Maybe reduce the coefficient if it isn't of degree one.\r\n        return this._polynom.degree().isZero();\r\n\r\n    }\r\n\r\n    get firstCoefficient(): Fraction {\r\n        return this._polynom.monomByDegree().coefficient\r\n    }\r\n\r\n    private get _texDegree(): string {\r\n        if (this._degree.isOne()) {\r\n            return ''\r\n        } else {\r\n            return `^{ ${this._degree.tfrac} }`\r\n        }\r\n    }\r\n\r\n    setForceParenthesis(value?: boolean): PolynomExpFactor {\r\n        this._forceParenthesis = value === undefined || value\r\n        return this\r\n    }\r\n\r\n    derivative(letter?: string): PolynomExpProduct {\r\n        if (this._degree.isOne()) {\r\n            return new PolynomExpProduct(\r\n                new PolynomExpFactor(this._polynom.clone().derivative(letter))\r\n            )\r\n        } else {\r\n            return new PolynomExpProduct(\r\n                new PolynomExpFactor(this._degree.clone()),\r\n                new PolynomExpFactor(this._polynom.clone().derivative(letter)),\r\n                new PolynomExpFactor(this._polynom.clone(), this._degree.clone().subtract(1))\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport class PolynomExpProduct {\r\n    constructor(...values: PolynomExpFactor[]) {\r\n        this._factors = values || []\r\n        this._positive = true\r\n        this._asPositiveDegree = true\r\n    }\r\n\r\n    private _fn: PolynomExpMathFunctionType\r\n\r\n    get fn(): PolynomExpMathFunctionType {\r\n        return this._fn;\r\n    }\r\n\r\n    set fn(value: PolynomExpMathFunctionType) {\r\n        this._fn = value;\r\n    }\r\n\r\n    private _factors: PolynomExpFactor[]\r\n\r\n    get factors(): PolynomExpFactor[] {\r\n        return this._factors;\r\n    }\r\n\r\n    set factors(value: PolynomExpFactor[]) {\r\n        this._factors = value;\r\n    }\r\n\r\n    private _positive: boolean\r\n\r\n    get positive(): boolean {\r\n        return this._positive;\r\n    }\r\n\r\n    set positive(value: boolean) {\r\n        this._positive = value;\r\n    }\r\n\r\n    private _asPositiveDegree: boolean\r\n\r\n    get asPositiveDegree(): boolean {\r\n        return this._asPositiveDegree;\r\n    }\r\n\r\n    set asPositiveDegree(value: boolean) {\r\n        this._asPositiveDegree = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let parenthesis = this._factors.length>1\r\n        // Default value\r\n        let tex = this._factors.map(factor => factor.setForceParenthesis(parenthesis).tex).join(' \\\\cdot ')\r\n\r\n        // Change the value in some cases...\r\n        if (this._asPositiveDegree) {\r\n            const numerators = this._factors.filter(x => x.degree.isPositive()),\r\n                denominators = this._factors.filter(x => x.degree.isNegative())\r\n\r\n            let numeratorsAsTex, denominatorsAsTex\r\n\r\n            if (denominators.length > 0) {\r\n                if (numerators.length === 0) {\r\n                    numeratorsAsTex = [1]\r\n                } else if (numerators.length === 1) {\r\n                    numeratorsAsTex = [numerators[0].setForceParenthesis(false).tex]\r\n                } else {\r\n                    parenthesis = numerators.length>1\r\n                    numeratorsAsTex = numerators.map(factor => factor.setForceParenthesis(parenthesis).tex)\r\n                }\r\n\r\n                // Change all denominators degrees to positive.\r\n                denominators.map(x => x.degree.opposed())\r\n                if (denominators.length === 1) {\r\n                    denominatorsAsTex = [denominators[0].setForceParenthesis(false).tex]\r\n                } else {\r\n                    parenthesis = denominators.length>1\r\n                    denominatorsAsTex = denominators.map(factor => factor.setForceParenthesis(parenthesis).tex)\r\n                }\r\n                // restore all degrees to negative again.\r\n                denominators.map(x => x.degree.opposed())\r\n\r\n                tex = `\\\\frac{ ${numeratorsAsTex.join(' \\\\cdot ')} }{ ${denominatorsAsTex.join(' \\\\cdot ')} }`\r\n            }\r\n        }\r\n\r\n        // Apply the modification\r\n        if (this._fn !== undefined && this._fn.name !== undefined && this._fn.name !== '') {\r\n            tex = `${this._fn.tex}\\\\left( ${tex} \\\\right)`\r\n        }\r\n        return tex\r\n    }\r\n\r\n    reduce(): PolynomExpProduct {\r\n        let coefficients = this._factors.filter(factor => factor.isCoefficient),\r\n            polynoms = this._factors.filter(factor => !factor.isCoefficient)\r\n\r\n        let result = new Fraction().one()\r\n\r\n        if (coefficients.length > 1) {\r\n            for (const factor of coefficients) {\r\n                if (factor.degree.isPositive()) {\r\n                    result.multiply(factor.polynom.monoms[0].coefficient.pow(factor.degree))\r\n                } else {\r\n                    result.divide(factor.polynom.monoms[0].coefficient.pow(factor.degree.clone().abs()))\r\n                }\r\n            }\r\n        } else if (coefficients.length === 1) {\r\n            result = coefficients[0].polynom.monoms[0].coefficient\r\n        }\r\n\r\n        if (result.isOne()) {\r\n            this._factors = [...polynoms]\r\n        } else if (!result.isRelative()) {\r\n            this._factors = [\r\n                new PolynomExpFactor(result.numerator),\r\n                new PolynomExpFactor(result.denominator, -1),\r\n                ...polynoms\r\n            ]\r\n        } else {\r\n            this._factors = [\r\n                new PolynomExpFactor(result),\r\n                ...polynoms\r\n            ]\r\n        }\r\n        return this\r\n    }\r\n\r\n    integrate(letter?: string): PolynomExpProduct {\r\n        // Handle this kind of case:\r\n        // A * f' * F^n\r\n        // A * f' / F^n, n != 1\r\n        // A * f_1 * f_2 * f_3, where (f_1 * f_2)' = f_3\r\n        if (this._factors.length === 2) {\r\n            // Check polynoms degree: one must of one degree less than the other.\r\n            let d1 = this._factors[0].polynom.degree(letter).value,\r\n                d2 = this._factors[1].polynom.degree(letter).value\r\n\r\n            if (d1 === d2 + 1) {\r\n                return this._integrateWithInternalDerivative(this._factors[0], this._factors[1], letter)\r\n            } else if (d1 + 1 === d2) {\r\n                return this._integrateWithInternalDerivative(this._factors[1], this._factors[0], letter)\r\n            }\r\n        }\r\n        return\r\n    }\r\n\r\n    public applyMathFunction(mathFn: PolynomExpMathFunctionType): PolynomExpProduct {\r\n        this._fn = mathFn\r\n        return this\r\n    }\r\n\r\n    private _integrateWithInternalDerivative(P: PolynomExpFactor, Pinternal: PolynomExpFactor, letter?: string): PolynomExpProduct {\r\n        // Get the internal derivative\r\n        let internalDerivative: Polynom = P.polynom.clone().derivative(letter)\r\n\r\n        // Get the factor.\r\n        let {quotient, reminder} = Pinternal.polynom.clone().euclidian(internalDerivative)\r\n\r\n        if (reminder.isZero() && quotient.degree(letter).isZero()) {\r\n            // All the conditions are done. Actual situation is\r\n            // (4x-10)(x^2-5x+7)^9\r\n            // P1 = (x^2-5x+7), P2 = (2x-5)\r\n            // => 1/10 * quotient * (x^2-5x+7)^10\r\n\r\n            if (P.degree.isEqual(-1)) {\r\n                return (new PolynomExpProduct(\r\n                    new PolynomExpFactor(quotient, 1),\r\n                    new PolynomExpFactor(P.polynom.clone(), 1, {\r\n                        name: 'ln', tex: '\\\\ln', fn: (x: number) => Math.log(x)\r\n                    })\r\n                ))\r\n            } else {\r\n                return new PolynomExpProduct(\r\n                    new PolynomExpFactor(P.degree.clone().add(1).invert(), 1),\r\n                    new PolynomExpFactor(quotient, 1),\r\n                    new PolynomExpFactor(P.polynom.clone(), P.degree.clone().add(1))\r\n                )\r\n            }\r\n        }\r\n        return\r\n    }\r\n}","import {Point} from \"./point\";\r\nimport {Line, LinePropriety} from \"./line\";\r\nimport {Vector} from \"./vector\";\r\nimport {Triangle} from \"./triangle\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Equation} from \"../algebra/equation\";\r\nimport {Polynom} from \"../algebra/polynom\";\r\nimport {Monom} from \"../algebra/monom\";\r\n\r\nexport class Circle {\r\n    constructor(...values: unknown[]) {\r\n        this._exists = false\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values)\r\n        }\r\n    }\r\n\r\n    private _center: Point;\r\n\r\n    get center(): Point {\r\n        return this._center;\r\n    }\r\n\r\n    private _squareRadius: Fraction;\r\n\r\n    get squareRadius(): Fraction {\r\n        return this._squareRadius\r\n    }\r\n\r\n    private _cartesian: Equation;\r\n\r\n    get cartesian(): Equation {\r\n        return this._cartesian\r\n    }\r\n\r\n    private _exists: boolean;\r\n\r\n    get exists(): boolean {\r\n        return this._exists;\r\n    }\r\n\r\n    get radius(): { tex: string, display: string, value: number } {\r\n        if (this._squareRadius.isSquare()) {\r\n            return {\r\n                tex: this._squareRadius.clone().sqrt().tex,\r\n                display: this._squareRadius.clone().sqrt().display,\r\n                value: this._squareRadius.clone().sqrt().value\r\n            }\r\n        } else {\r\n            return {\r\n                tex: `\\\\sqrt{${this._squareRadius.tex}}`,\r\n                display: `sqrt(${this._squareRadius.display})`,\r\n                value: this._squareRadius.clone().sqrt().value\r\n            }\r\n        }\r\n        return this._squareRadius\r\n    }\r\n\r\n    get tex(): string {\r\n        if (this._exists) {\r\n            let cx, cy\r\n            if (this._center.x.isZero()) {\r\n                cx = 'x^2'\r\n            } else {\r\n                cx = `\\\\left(x${this._center.x.isNegative() ? '+' : '-'}${this._center.x.clone().abs().tex}\\\\right)^2`\r\n            }\r\n            if (this._center.y.isZero()) {\r\n                cy = 'y^2'\r\n            } else {\r\n                cy = `\\\\left(y${this._center.y.isNegative() ? '+' : '-'}${this._center.y.clone().abs().tex}\\\\right)^2`\r\n            }\r\n            return `${cx}+${cy}=${this._squareRadius.tex}`\r\n        } else {\r\n            return `\\\\text{le cercle n'existe pas.}`\r\n        }\r\n    }\r\n\r\n    get developed(): string {\r\n        return this._cartesian.tex\r\n    }\r\n\r\n    get display(): string {\r\n        if (this._exists) {\r\n            let cx, cy\r\n            if (this._center.x.isZero()) {\r\n                cx = 'x^2'\r\n            } else {\r\n                cx = `(x${this._center.x.isNegative() ? '+' : '-'}${this._center.x.clone().abs().tex})^2`\r\n            }\r\n            if (this._center.y.isZero()) {\r\n                cy = 'y^2'\r\n            } else {\r\n                cy = `(y${this._center.y.isNegative() ? '+' : '-'}${this._center.y.clone().abs().tex})^2`\r\n            }\r\n            return `${cx}+${cy}=${this._squareRadius.display}`\r\n        } else {\r\n            return `\\\\text{le cercle n'existe pas.}`\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the relative position between circle and line. It corresponds to the number of intersection.\r\n     * @param {Line} L\r\n     * @returns {number}\r\n     */\r\n    relativePosition = (L: Line): number => {\r\n        let distance = L.distanceTo(this.center), radius = Math.sqrt(this._squareRadius.value)\r\n\r\n        if (distance.value - radius > 0.0000000001) {\r\n            return 0 // external\r\n        } else if (Math.abs(distance.value - radius) < 0.0000000001) {\r\n            return 1 // tangent\r\n        } else {\r\n            return 2 // external\r\n        }\r\n    }\r\n\r\n    lineIntersection = (L: Line): Point[] => {\r\n        let intersectionPoints: Point[] = [], solX: Fraction\r\n\r\n        if (this._cartesian === null) {\r\n            return []\r\n        }\r\n        const equX = this._cartesian.clone(), lineX = L.equation.clone().isolate('x'),\r\n            lineY = L.equation.clone().isolate('y')\r\n\r\n        if (lineX instanceof Equation && lineY instanceof Equation) {\r\n            equX.replaceBy('y', lineY.right).simplify()\r\n            equX.solve()\r\n\r\n            for (let x of equX.solutions) {\r\n                if (x.exact === false && isNaN(x.value)) {\r\n                    continue\r\n                }\r\n\r\n                solX = new Fraction(x.exact === false ? x.value : x.exact)\r\n                intersectionPoints.push(new Point(solX.clone(), lineY.right.evaluate(solX)))\r\n            }\r\n        }\r\n\r\n        return intersectionPoints\r\n    }\r\n\r\n    tangents = (P: Point | Fraction): Line[] => {\r\n        if (P instanceof Fraction) {\r\n            return this._tangentsWithSlope(P)\r\n        } else if (this.isPointOnCircle(P)) {\r\n            return this._tangentsThroughOnePointOnTheCircle(P)\r\n        } else if (this.center.distanceTo(P).value > this.radius.value) {\r\n            //TODO:  Must check it's outside the circle\r\n            return this._tangentsThroughOnePointOutsideTheCircle(P)\r\n        } else {\r\n            console.log('No tangents as the point is inside !')\r\n        }\r\n        return []\r\n    }\r\n\r\n    isPointOnCircle = (P: Point): Boolean => {\r\n        return this._cartesian.test({x: P.x, y: P.y})\r\n    }\r\n\r\n    getPointsOnCircle = (numberIsInteger?: boolean): Point[] => {\r\n        if (numberIsInteger === undefined) {\r\n            numberIsInteger = false\r\n        }\r\n\r\n        // It means searching for pythagorician triples that make a perfect square.\r\n        // (x-4)^2 + (y+3)^2 = 15\r\n\r\n        let triplets = Numeric.pythagoricianTripletsWithTarget(this._squareRadius.value, true)\r\n\r\n        let points: Point[] = [], pt\r\n        triplets.forEach(triplet => {\r\n            // Allow positive / negative values\r\n            // x-a = t  => x = a + t\r\n            // x-a = -t => x = a - t\r\n\r\n            for (let k of [[1, 1], [-1, 1], [-1, -1], [1, -1]]) {\r\n                pt = new Point(\r\n                    this.center.x.clone().add(k[0] * triplet[0]),\r\n                    this.center.y.clone().add(k[1] * triplet[1])\r\n                )\r\n                // Check if the point is not already in points.\r\n                if (!pt.isInListOfPoints(points)) {\r\n                    points.push(pt)\r\n                }\r\n            }\r\n        })\r\n        return points\r\n    }\r\n\r\n    clone(): Circle {\r\n        this._center = this._center.clone()\r\n        this._squareRadius = this._squareRadius.clone()\r\n        this._calculateCartesian()\r\n        return this\r\n    }\r\n\r\n    private _tangentsThroughOnePointOnTheCircle = (P: Point): Line[] => {\r\n        let CT = new Vector(this._center, P)\r\n        return [new Line(P, CT, LinePropriety.Perpendicular)]\r\n    }\r\n\r\n    private _tangentsThroughOnePointOutsideTheCircle = (P: Point): Line[] => {\r\n        // y = mx + h\r\n        // px, py => h = -m px + py => mx - y -m.px + py = 0 =>\r\n        // Centre: cx, cy, radius: r\r\n        // (m.cx - cy -m.px + py)^2 = r^2  * (m^2  + 1)\r\n        // (m(cx-py) - (cy - py))^2 = r^2  * (m^2  + 1)\r\n\r\n        let cx_px = this.center.x.clone().subtract(P.x), cy_py = this.center.y.clone().subtract(P.y),\r\n            polyLeft = new Polynom('x'), polyRight = new Polynom('x^2+1')\r\n\r\n        polyLeft.multiply(cx_px).subtract(cy_py).pow(2)\r\n        polyRight.multiply(this.squareRadius)\r\n\r\n        let equ = new Equation(polyLeft, polyRight)\r\n        equ.moveLeft().simplify().solve()\r\n\r\n        return equ.solutions.map(sol => {\r\n            //  h = -m px + py\r\n            let h, equ = new Equation('y', 'x')\r\n\r\n            if (sol.exact instanceof Fraction) {\r\n                h = P.x.clone().opposed().multiply(sol.exact).add(P.y)\r\n                equ.right.multiply(sol.exact).add(h)\r\n            } else {\r\n                h = P.x.clone().opposed().multiply(sol.value).add(P.y)\r\n                equ.right.multiply(sol.value).add(h)\r\n            }\r\n\r\n            return new Line(equ)\r\n        })\r\n\r\n    }\r\n\r\n    private _tangentsWithSlope = (slope: Fraction): Line[] => {\r\n        // d(C;t)=r => ac1+bc2 + x = +- sqrt(a^2 + b^2)*r\r\n        // x = -ac1-bc2  +-  sqrt(a^2 + b^2)*r\r\n        // y = a/bx + h => ax-by + H = 0\r\n\r\n        const a = slope.numerator, b = -slope.denominator, c1 = this._center.x.clone(), c2 = this._center.y.clone(),\r\n            r = this._squareRadius\r\n\r\n        let sq = this._squareRadius.clone().multiply(slope.numerator ** 2 + slope.denominator ** 2),\r\n            x1 = c1.clone().multiply(a).opposed().subtract(c2.clone().multiply(b)).add(sq.clone().sqrt()),\r\n            x2 = c1.clone().multiply(a).opposed().subtract(c2.clone().multiply(b)).subtract(sq.clone().sqrt())\r\n\r\n        return [new Line(a, b, x1), new Line(a, b, x2)]\r\n    }\r\n\r\n    private _reset(): Circle {\r\n        this._center = null\r\n        this._squareRadius = null\r\n        this._cartesian = null\r\n        this._exists = false\r\n\r\n        return this\r\n    }\r\n\r\n    private parse(...values: unknown[]): Circle {\r\n        // Data can be given in these formats:\r\n        // one value, a string -> make it an Equation\r\n        // one value, an Equation\r\n        // one value, a circle -> clone it\r\n        // two values: two points (center and pointThrough)\r\n        // two values: point and Fraction (center and radius)\r\n        // three values: Point, Fraction, Boolean (center, square radius, true)\r\n\r\n        this._reset()\r\n\r\n        if (typeof values[0] === 'string') {\r\n            this._parseEquation(new Equation(values[0]))\r\n        } else if (values[0] instanceof Equation) {\r\n            this._parseEquation(values[0])\r\n        } else if (values[0] instanceof Circle) {\r\n            this._parseCopyCircle(values[0])\r\n        } else if (values[0] instanceof Point && values.length > 1) {\r\n            if (values[1] instanceof Point) {\r\n                if (values[2] instanceof Point) {\r\n                    this._parseThroughtThreePoints(values[0], values[1], values[2])\r\n                } else {\r\n                    this._parseCenterAndPointThrough(values[0], values[1])\r\n                }\r\n            } else if (values[1] instanceof Fraction || typeof values[1] === 'number') {\r\n                this._parseCenterAndRadius(values[0], values[1], (typeof values[2] === \"boolean\") ? values[2] : false)\r\n            }\r\n        }\r\n\r\n        // Calculate once the different values.\r\n        if (this._exists) {\r\n            this._calculateCartesian()\r\n\r\n            // If the square radius is zero or positive, the circle exists.\r\n            if (this._squareRadius !== undefined && this._squareRadius.isNegative()) {\r\n                this._exists = false\r\n            }\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    private _calculateCartesian() {\r\n        this._cartesian = (new Equation(new Polynom(`(x-(${this._center.x.display}))^2+(y-(${this._center.y.display}))^2`), new Polynom(`${this._squareRadius.display}`))).moveLeft()\r\n    }\r\n\r\n    private _parseCopyCircle(circle: Circle): Circle {\r\n        this._center = circle.center.clone()\r\n        this._squareRadius = circle.squareRadius.clone()\r\n        this._calculateCartesian()\r\n        this._exists = circle.exists\r\n        return this\r\n    }\r\n\r\n    private _parseCenterAndRadius(center: Point, radius: Fraction | number, square?: boolean): Circle {\r\n        this._center = center.clone()\r\n\r\n        if (square) {\r\n            this._squareRadius = (new Fraction(radius))\r\n        } else {\r\n            this._squareRadius = new Fraction(radius).pow(2)\r\n        }\r\n\r\n        this._exists = true\r\n        return this\r\n    }\r\n\r\n    private _parseCenterAndPointThrough(center: Point, pointThrough: Point): Circle {\r\n        this._center = center.clone()\r\n        this._squareRadius = new Vector(this._center, pointThrough).normSquare\r\n        this._exists = true\r\n        return this\r\n    }\r\n\r\n    private _parseEquation(equ: Equation): Circle {\r\n        this._exists = false\r\n\r\n        // Move everything to the left.\r\n        equ.moveLeft()\r\n\r\n        if (equ.degree('x').value === 2 && equ.degree('y').value === 2) {\r\n            // Both must be of degree 2.\r\n            let x2 = equ.left.monomByDegree(2, 'x'), y2 = equ.left.monomByDegree(2, 'y'), x1: Monom, y1: Monom, c: Monom\r\n\r\n            // Both square monoms must have the same coefficient.\r\n            if (x2.coefficient.isEqual(y2.coefficient)) {\r\n                equ.divide(x2.coefficient)\r\n\r\n                x1 = equ.left.monomByDegree(1, 'x')\r\n                y1 = equ.left.monomByDegree(1, 'y')\r\n\r\n                c = equ.left.monomByDegree(0)\r\n\r\n                this._center = new Point(x1.coefficient.clone().divide(2).opposed(), y1.coefficient.clone().divide(2).opposed())\r\n\r\n                this._squareRadius = c.coefficient.clone().opposed()\r\n                    .add(this._center.x.clone().pow(2))\r\n                    .add(this._center.y.clone().pow(2))\r\n\r\n                this._calculateCartesian()\r\n                this._exists = true\r\n            } else {\r\n                // The circle is not a valid circle\r\n                this._center = null\r\n                this._squareRadius = null\r\n                this._exists = false\r\n            }\r\n        }\r\n        return this\r\n    }\r\n\r\n    private _parseThroughtThreePoints(A: Point, B: Point, C: Point): Circle {\r\n        let T = new Triangle(A, B, C), mAB = T.remarquables.mediators.AB.clone(),\r\n            mAC = T.remarquables.mediators.AC.clone()\r\n        this.parse(mAB.intersection(mAC).point, A)\r\n\r\n        return this\r\n    }\r\n\r\n}","/**\r\n * This class works for 2d line in a plane.\r\n */\r\n\r\nimport {Vector} from \"./vector\";\r\nimport {Point} from \"./point\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Equation} from \"../algebra/equation\";\r\nimport {Polynom} from \"../algebra/polynom\";\r\n\r\nexport enum LinePropriety {\r\n    None,\r\n    Parallel='parallel',\r\n    Perpendicular = 'perpendicular',\r\n    Tangent = 'tangent'\r\n}\r\n\r\nexport class Line {\r\n    // A line is defined as the canonical form\r\n    // ax + by + c = 0\r\n    private _a: Fraction;\r\n    private _b: Fraction;\r\n    private _c: Fraction;\r\n    private _OA: Point;\r\n    private _d: Vector;\r\n    private _n: Vector;\r\n    private _exists: boolean\r\n\r\n    private _referencePropriety: LinePropriety\r\n    private _referenceLine: Line\r\n\r\n    static PERPENDICULAR = LinePropriety.Perpendicular\r\n    static PARALLEL = LinePropriety.Parallel\r\n\r\n    constructor(...values: unknown[]) {\r\n\r\n        this._exists = false;\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get exists(): boolean {\r\n        return this._exists;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equation(): Equation {\r\n        return new Equation(new Polynom().parse('xy', this._a, this._b, this._c), new Polynom('0')).simplify();\r\n    }\r\n\r\n    get tex(): { canonical: string, mxh: string, parametric: string , equation: string} {\r\n        // canonical    =>  ax + by + c = 0\r\n        // mxh          =>  y = -a/b x - c/b\r\n        // parametric   =>  (xy) = OA + k*d\r\n        // equation     => ax + by = -c\r\n\r\n        let canonical = this.equation.clone().moveLeft();\r\n        // Make sur the first item is positive.\r\n        if (this._a.isNegative()) {\r\n            canonical.multiply(-1);\r\n        }\r\n\r\n        const d = this._d.clone().simplifyDirection()\r\n\r\n        return {\r\n            canonical: canonical.tex,\r\n            mxh: this.slope.isInfinity() ? 'x=' + this.OA.x.tex : 'y=' + new Polynom().parse('x', this.slope, this.height).tex,\r\n            parametric: `${Point.pmatrix('x', 'y')} = ${Point.pmatrix(this._OA.x, this._OA.y)} + k\\\\cdot ${Point.pmatrix(d.x, d.y)}`,\r\n            equation: canonical.clone().reorder().tex\r\n        }\r\n    }\r\n\r\n    get display(): { canonical: string, mxh: string, parametric: string } {\r\n        // canonical    =>  ax + by + c = 0\r\n        // mxh          =>  y = -a/b x - c/b\r\n        // parametric   =>  (xy) = OA + k*d // not relevant in display mode.\r\n\r\n        let canonical = this.equation;\r\n        // Make sur the first item is positive.\r\n        if (this._a.isNegative()) {\r\n            canonical.multiply(-1);\r\n        }\r\n\r\n        return {\r\n            canonical: canonical.display,\r\n            mxh: this.slope.isInfinity() ? 'x=' + this.OA.x.display : 'y=' + new Polynom().parse('x', this.slope, this.height).display,\r\n            parametric: \"\"\r\n        }\r\n    }\r\n\r\n    get a(): Fraction {\r\n        return this._a;\r\n    }\r\n\r\n    set a(value: Fraction) {\r\n        this._a = value;\r\n    }\r\n\r\n    get b(): Fraction {\r\n        return this._b;\r\n    }\r\n\r\n    set b(value: Fraction) {\r\n        this._b = value;\r\n    }\r\n\r\n    get c(): Fraction {\r\n        return this._c;\r\n    }\r\n\r\n    set c(value: Fraction) {\r\n        this._c = value;\r\n    }\r\n\r\n    get OA(): Point {\r\n        return this._OA;\r\n    }\r\n\r\n    set OA(value: Point) {\r\n        this._OA = value;\r\n    }\r\n\r\n    get d(): Vector {\r\n        return this._d;\r\n    }\r\n\r\n    get n(): Vector {\r\n        return this._n;\r\n    }\r\n\r\n    get normal(): Vector {\r\n        return new Vector(this._a, this._b);\r\n    }\r\n\r\n    get director(): Vector {\r\n        return this._d.clone()\r\n    }\r\n\r\n    set d(value: Vector) {\r\n        this._d = value;\r\n    }\r\n\r\n    get slope(): Fraction {\r\n        return this._a.clone().opposed().divide(this._b);\r\n    }\r\n\r\n    get height(): Fraction {\r\n        return this._c.clone().opposed().divide(this._b);\r\n    }\r\n\r\n// ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse data to a line\r\n     * @param {any} values\r\n     * @returns {Line}\r\n     */\r\n    parse = (...values: unknown[]): Line => {\r\n        this._exists = false;\r\n\r\n        // Nothing is given...\r\n        if (values.length === 0) {\r\n            return this\r\n        }\r\n\r\n        // One value only: already a line (clone it), an Equation, a string (as Equation)\r\n        if (values.length === 1) {\r\n            if (values[0] instanceof Line) {\r\n                // Already a Line\r\n                return values[0].clone()\r\n            } else if (values[0] instanceof Equation) {\r\n                // It's an Equation\r\n                return this.parseEquation(values[0])\r\n            } else if (typeof values[0] === \"string\") {\r\n                // It's a string - create an Equation from it.\r\n                try {\r\n                    let E = new Equation(values[0])\r\n                    return this.parse(E)\r\n                } catch (e) {\r\n                    return this\r\n                }\r\n            }\r\n        }\r\n\r\n        if (values.length === 2) {\r\n            if (values[0] instanceof Point && values[1] instanceof Vector) {\r\n                return this.parseByPointAndVector(values[0], values[1]);\r\n            } else if (values[0] instanceof Point && values[1] instanceof Point) {\r\n                return this.parseByPointAndVector(values[0], new Vector(values[0], values[1]));\r\n            } else if (values[0] instanceof Vector && values[1] instanceof Point) {\r\n                return this.parseByPointAndNormal(values[1], values[0])\r\n            }\r\n        }\r\n\r\n        if (values.length === 3) {\r\n            if (\r\n                (values[0] instanceof Fraction || typeof values[0] === 'number')\r\n                &&\r\n                (values[1] instanceof Fraction || typeof values[1] === 'number')\r\n                &&\r\n                (values[2] instanceof Fraction || typeof values[2] === 'number')\r\n            ) {\r\n                return this.parseByCoefficient(values[0], values[1], values[2]);\r\n            }else if (\r\n                values[0] instanceof Point && values[1] instanceof Vector\r\n            ){\r\n                if(values[2] === LinePropriety.Perpendicular){\r\n                    return this.parseByPointAndNormal(values[0], values[1])\r\n                }else if (values[2] === LinePropriety.Parallel){\r\n                    return this.parseByPointAndVector(values[0], values[1])\r\n                }\r\n            }else if (values[0] instanceof Point && values[1] instanceof Line ) {\r\n                if(values[2]===LinePropriety.Parallel || values[2]===null) {\r\n                    return this.parseByPointAndLine(values[0], values[1], LinePropriety.Parallel)\r\n                }else{\r\n                    return this.parseByPointAndLine(values[0], values[1], LinePropriety.Perpendicular)\r\n                }\r\n            }\r\n        }\r\n\r\n        // TODO: Add the ability to create line from a normal vector\r\n        console.log('Someting wrong happend while creating the line')\r\n        return this;\r\n    }\r\n\r\n    parseEquation = (equ: Equation): Line => {\r\n        // Reorder the eequation\r\n        equ.reorder(true)\r\n\r\n        // It must contain either x, y or both.\r\n        let letters = new Set(equ.letters());\r\n\r\n        // No 'x', no 'y' in the equations\r\n        if (!(letters.has('x') || letters.has('y'))) {\r\n            return this\r\n        }\r\n\r\n        // Another letter in the equation ?\r\n        for (let elem of ['x', 'y']) {\r\n            if (letters.has(elem)) {\r\n                letters.delete(elem)\r\n            }\r\n        }\r\n\r\n        if (letters.size > 0) {\r\n            return this\r\n        }\r\n\r\n        // Everything should be ok now...\r\n        return this.parseByCoefficient(equ.left.monomByLetter('x').coefficient, equ.left.monomByLetter('y').coefficient, equ.left.monomByDegree(0).coefficient)\r\n    }\r\n    parseByCoefficient = (a: Fraction | number, b: Fraction | number, c: Fraction | number): Line => {\r\n        this._a = new Fraction(a);\r\n        this._b = new Fraction(b);\r\n        this._c = new Fraction(c);\r\n\r\n        this._d = new Vector(this._b.clone(), this._a.clone().opposed());\r\n        this._OA = new Point(new Fraction().zero(), this._c.clone());\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    parseByPointAndVector = (P: Point, d: Vector): Line => {\r\n        // OX = OP + k*d\r\n        // x = px + kdx     * dy\r\n        // y = py + kdy     * dx\r\n        // ------------------\r\n        // dy * x = px * dy + kdxdy\r\n        // dx * y = py * dx + kdxdy\r\n        // ------------------\r\n        // dy * x - dx * y = px * dy - py * dx\r\n        // dy * x - dx * y - (px * dy - py * dx) = 0\r\n        this.parseByCoefficient(\r\n            d.y,\r\n            d.x.clone().opposed(),\r\n            P.x.clone().multiply(d.y).subtract(P.y.clone().multiply(d.x)).opposed()\r\n        )\r\n\r\n        // Choose the current values as point and direction vector instead of the automatic version.\r\n        this._OA = P.clone();\r\n        this._d = d.clone();\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    parseByPointAndNormal = (P: Point, n: Vector): Line => {\r\n        return this.parseByCoefficient(\r\n            n.x,\r\n            n.y,\r\n            P.x.clone().multiply(n.x)\r\n                .add(P.y.clone().multiply(n.y)).opposed()\r\n        )\r\n    }\r\n\r\n    parseByPointAndLine = (P: Point, L: Line, orientation?: LinePropriety): Line => {\r\n\r\n        if (orientation === undefined) {\r\n            orientation = LinePropriety.Parallel\r\n        }\r\n\r\n        if (orientation === LinePropriety.Parallel) {\r\n            return this.parseByPointAndNormal(P, L.normal)\r\n        } else if (orientation === LinePropriety.Perpendicular) {\r\n            return this.parseByPointAndNormal(P, L.director)\r\n        }\r\n\r\n        this._exists = false\r\n        return this\r\n    }\r\n\r\n    clone = (): Line => {\r\n        this._a = this._a.clone();\r\n        this._b = this._b.clone();\r\n        this._c = this._c.clone();\r\n\r\n        this._d = this._d.clone();\r\n        this._OA = this._OA.clone();\r\n        this._n = this._n.clone();\r\n\r\n        this._exists = this.exists\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    isParellelTo = (line: Line): Boolean => {\r\n        // Do they have the isSame direction ?\r\n        return this.slope.isEqual(line.slope) && this.height.isNotEqual(line.height);\r\n    }\r\n    isSameAs = (line: Line): Boolean => {\r\n        return this.slope.isEqual(line.slope) && this.height.isEqual(line.height);\r\n    }\r\n    isVertical = (): Boolean => {\r\n        return this.slope.isInfinity()\r\n    }\r\n    simplify = (): Line => {\r\n        let lcm = Numeric.lcm(this._a.denominator, this._b.denominator, this._c.denominator),\r\n            gcd = Numeric.gcd(this._a.numerator, this._b.numerator, this._c.numerator);\r\n\r\n        this.parseByCoefficient(\r\n            this._a.clone().multiply(lcm).divide(gcd),\r\n            this._b.clone().multiply(lcm).divide(gcd),\r\n            this._c.clone().multiply(lcm).divide(gcd),\r\n        )\r\n\r\n        return this\r\n    }\r\n\r\n    simplifyDirection = (): Line => {\r\n        this._d.simplifyDirection()\r\n        return this;\r\n    }\r\n    intersection = (line: Line): { point: Point, hasIntersection: boolean, isParallel: boolean, isSame: boolean } => {\r\n        let Pt = new Point(), isParallel = false, isSame = false, hasIntersection = true;\r\n\r\n        // this         => ax+by+c = 0\r\n        // line         => dx+ey+f = 0\r\n        //\r\n        //  aex + bey + ce = 0\r\n        //  dbx + bey + bf = 0\r\n        // (ae-db)x + ce-bf = 0\r\n        //\r\n        //  adx + bdy + cd = 0\r\n        //  adx + aey + af = 0\r\n        // (bd-ae)y + (cd-af)\r\n        //\r\n        // x = (bf-ce)/(ae-db)\r\n        // y = (af-cd)/(bd-ae)\r\n\r\n\r\n        // Theres is no 'y'\r\n        if (this._b.isZero() || line.b.isZero()) {\r\n            // TODO : handle no y in the line canonical form\r\n        }\r\n\r\n        if (this.isParellelTo(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isParallel = true;\r\n        } else if (this.isSameAs(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isSame = true;\r\n        } else {\r\n            Pt.x = this._b.clone().multiply(line.c).subtract(this._c.clone().multiply(line.b))\r\n                .divide(this._a.clone().multiply(line.b).subtract(this._b.clone().multiply(line.a)));\r\n            Pt.y = this._a.clone().multiply(line.c).subtract(this._c.clone().multiply(line.a))\r\n                .divide(this._b.clone().multiply(line.a).subtract(this._a.clone().multiply(line.b)));\r\n        }\r\n\r\n        return {\r\n            point: Pt,\r\n            hasIntersection: !(isParallel || isSame),\r\n            isParallel,\r\n            isSame\r\n        };\r\n    }\r\n\r\n    distanceTo(pt: Point): { value: number, fraction: Fraction, tex: string } {\r\n        let numerator = pt.x.clone().multiply(this._a)\r\n                .add(pt.y.clone().multiply(this._b))\r\n                .add(this._c).abs(),\r\n            d2 = this.normal.normSquare;\r\n\r\n        // The denominator is null - shouldn't be possible\r\n        if (d2.isZero()) {\r\n            return {\r\n                value: NaN,\r\n                tex: 'Not a line',\r\n                fraction: new Fraction().infinite()\r\n            }\r\n        }\r\n        // The denominator is a perfect square - simplify the tex result\r\n        let value = numerator.value / Math.sqrt(d2.value),\r\n            F = numerator.clone().divide(d2.clone().sqrt());\r\n\r\n        // The denominator is a perfect square.\r\n        if (d2.isSquare()) {\r\n            return {\r\n                value,\r\n                tex: F.tex,\r\n                fraction: F\r\n            }\r\n        }\r\n        // Complete answer...\r\n        return {\r\n            value,\r\n            tex: `\\\\frac{${numerator.tex}}{\\\\sqrt{${d2.tex}}}`,\r\n            fraction: F\r\n        };\r\n    }\r\n\r\n    hitSegment(A: Point, B: Point): boolean {\r\n        let iPt = this.intersection(\r\n            new Line(A, B)\r\n        )\r\n\r\n        // There is an intersection point\r\n        if (iPt.hasIntersection) {\r\n            return iPt.point.x.value >= Math.min(A.x.value, B.x.value)\r\n                && iPt.point.x.value <= Math.max(A.x.value, B.x.value)\r\n                && iPt.point.y.value >= Math.min(A.y.value, B.y.value)\r\n                && iPt.point.y.value <= Math.max(A.y.value, B.y.value)\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getValueAtX = (value: Fraction|number): Fraction => {\r\n        const equ = this.equation.clone().isolate('y'),\r\n            F = new Fraction(value)\r\n\r\n        if(equ instanceof Equation){\r\n            return equ.right.evaluate({x: F})\r\n        }\r\n        return\r\n    }\r\n    getValueAtY = (value: Fraction|number): Fraction => {\r\n        const equ = this.equation.clone().isolate('x'),\r\n            F = new Fraction(value)\r\n\r\n        if(equ instanceof Equation){\r\n            return equ.right.evaluate({y: F})\r\n        }\r\n        return\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Special functions\r\n    // ------------------------------------------\r\n    canonicalAsFloatCoefficient(decimals: number): string {\r\n        if (decimals === undefined) {\r\n            decimals = 2;\r\n        }\r\n\r\n        let ca = this._a.value,\r\n            cb = this._b.value,\r\n            cc = this._c.value,\r\n            canonical = '';\r\n\r\n        if (!this._a.isZero()) {\r\n            if (this._a.isOne()) {\r\n                canonical = 'x'\r\n            } else if (this._a.clone().opposed().isOne()) {\r\n                canonical = '-x'\r\n            } else {\r\n                canonical = this._a.value.toFixed(decimals) + 'x'\r\n            }\r\n        }\r\n\r\n        if (!this._b.isZero()) {\r\n            if (this._b.isPositive()) {\r\n                canonical += '+'\r\n            }\r\n            canonical += this._b.value.toFixed(decimals) + 'y'\r\n        }\r\n\r\n        if (!this._c.isZero()) {\r\n            if (this._c.isPositive()) {\r\n                canonical += '+'\r\n            }\r\n            canonical += this._c.value.toFixed(decimals)\r\n        }\r\n\r\n\r\n        return canonical + '=0';\r\n    }\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Line} from \"./line\";\r\nimport {Vector} from \"./vector\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\n/**\r\n * Helper class - a way to identify an object {x: number, y: number}\r\n */\r\nclass PointXY {\r\n    x: number\r\n    y: number\r\n}\r\n\r\nexport class Point {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n    private _exist: Boolean;\r\n\r\n    constructor(...values: unknown[]) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.tex);\r\n        pts.push(this._y.tex);\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n\r\n    get display(): string {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.tex);\r\n        pts.push(this._y.tex);\r\n\r\n        return `(${pts.join(';')})`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...values: unknown[]): Point => {\r\n        // Initialize the value.\r\n        this.zero();\r\n\r\n        // Nothing is given\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        // One element is given - might be already a point !\r\n        if (values.length === 1) {\r\n            // it's already a point - clone it\r\n            if (values[0] instanceof Point) {\r\n                this._x = values[0].x.clone()\r\n                this._y = values[0].y.clone()\r\n                return this\r\n            }\r\n\r\n            // Value is given as string, comma separated.\r\n            if (typeof values[0] === 'string') {\r\n                let xy = values[0].split(',')\r\n                if (xy.length === 2) {\r\n                    this._x = new Fraction(xy[0]).reduce()\r\n                    this._y = new Fraction(xy[1]).reduce()\r\n                    return this\r\n                }\r\n            }\r\n\r\n            // Value given as an object with {x: value, y: value}\r\n            if(values[0] instanceof PointXY){\r\n                    this._x = new Fraction(values[0].x).reduce()\r\n                    this._y = new Fraction(values[0].y).reduce()\r\n                return this\r\n            } else {\r\n                return this.zero()\r\n            }\r\n        }\r\n\r\n        if (values.length === 2) {\r\n            this._x = new Fraction(values[0]).reduce()\r\n            this._y = new Fraction(values[1]).reduce()\r\n            return this\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Point => {\r\n        this._x = this._x.clone()\r\n        this._y = this._y.clone()\r\n\r\n        return this\r\n    }\r\n\r\n    zero = (): Point => {\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    origin = (): Point => {\r\n        this.zero();\r\n        return this;\r\n    }\r\n\r\n    middleOf = (P1: Point, P2: Point): Point => {\r\n        this._x = P1.x.clone().add(P2.x).divide(2);\r\n        this._y = P1.y.clone().add(P2.y).divide(2);\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Display functions\r\n    // ------------------------------------------\r\n    texValues = (numberOfDigits: number): string => {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.value.toFixed(numberOfDigits === undefined ? 2 : numberOfDigits));\r\n        pts.push(this._y.value.toFixed(numberOfDigits === undefined ? 2 : numberOfDigits));\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Static functions\r\n    // ------------------------------------------\r\n    static pmatrix = (a: any, b: any, c?: any): string => {\r\n        if (c === undefined) {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\end{pmatrix}`;\r\n        } else {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\\\\\ ${c.tex ? c.tex : c} \\\\end{pmatrix}`;\r\n        }\r\n    };\r\n\r\n    distanceTo = (item:Point|Line): { value: number, fraction: Fraction, tex: string } => {\r\n        let value = 0, fraction = new Fraction(), tex = ''\r\n\r\n        if(item instanceof Line){\r\n            return item.distanceTo(this)\r\n        }else if(item instanceof Point){\r\n            let V = new Vector(this, item)\r\n\r\n            value = V.norm\r\n            fraction = V.normSquare.sqrt()\r\n            tex = V.normSquare.isSquare() ? fraction.tex : `\\\\sqrt{\\\\frac{ ${V.normSquare.numerator} }{ ${V.normSquare.denominator} }}`\r\n        }\r\n        return { value, fraction, tex }\r\n    }\r\n\r\n    get key(): string {\r\n      return `${this.x.display};${this.y.display}`\r\n}\r\n    isInListOfPoints = (list: Point[]): boolean => {\r\n        const keyList = list.map(x=>x.key)\r\n\r\n        return keyList.includes(this.key)\r\n    }\r\n}\r\n","import {Point} from \"./point\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Vector} from \"./vector\";\r\nimport {Line} from \"./line\";\r\nimport {Equation} from \"../algebra/equation\";\r\n\r\nexport interface remarquableLines {\r\n    'medians': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'mediators': {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line,\r\n        'intersection': Point\r\n    },\r\n    'heights': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'bisectors': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    }\r\n}\r\n\r\nexport class Triangle {\r\n    private _A: Point;\r\n    private _B: Point;\r\n    private _C: Point;\r\n    private _lines: {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line\r\n    };\r\n    private _middles: {\r\n        'AB': Point,\r\n        'AC': Point,\r\n        'BC': Point\r\n    };\r\n    private _remarquables: remarquableLines;\r\n\r\n\r\n    constructor(...values: unknown[]) {\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setters\r\n    // ------------------------------------------\r\n\r\n    get A(): Point {\r\n        return this._A;\r\n    }\r\n\r\n    get B(): Point {\r\n        return this._B;\r\n    }\r\n\r\n    get C(): Point {\r\n        return this._C;\r\n    }\r\n\r\n    get AB(): Vector {\r\n        return this.getSegment('A', 'B');\r\n    }\r\n\r\n    get BA(): Vector {\r\n        return this.getSegment('B', 'A');\r\n    }\r\n\r\n    get BC(): Vector {\r\n        return this.getSegment('B', 'C');\r\n    }\r\n\r\n    get CB(): Vector {\r\n        return this.getSegment('C', 'B');\r\n    }\r\n\r\n    get AC(): Vector {\r\n        return this.getSegment('A', 'C');\r\n    }\r\n\r\n    get CA(): Vector {\r\n        return this.getSegment('C', 'A');\r\n    }\r\n\r\n    get isRectangle(): boolean {\r\n        if (this.AB.isNormalTo(this.BC)) {\r\n            return true;\r\n        }\r\n        if (this.AB.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n        if (this.BC.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    get isEquilateral(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) &&\r\n            this.AB.normSquare.isEqual(this.AC.normSquare);\r\n    }\r\n\r\n    get isIsocele(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) ||\r\n            this.AB.normSquare.isEqual(this.AC.normSquare) ||\r\n            this.BC.normSquare.isEqual(this.AC.normSquare)\r\n    }\r\n\r\n    get lines(): { 'AB': Line, 'BC': Line, 'AC': Line } {\r\n        return this._lines;\r\n    }\r\n\r\n    get remarquables(): remarquableLines {\r\n        return this._remarquables;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Parse values to a triangle. Supported formats:\r\n     * Point, Point, Point\r\n     * x1, y1, x2, y2, x3, y3\r\n     * TODO: Something else ?\r\n     * @param values\r\n     */\r\n    parse = (...values: any): Triangle => {\r\n        if (values.length === 6) {\r\n            // Check if all values are number or fractions.\r\n            let v = values.map((x: any) => new Fraction(x));\r\n            return this.parse(\r\n                new Point(v[0], v[1]),\r\n                new Point(v[2], v[3]),\r\n                new Point(v[4], v[5]),\r\n            )\r\n        } else if (values.length === 3) {\r\n            // Possibilities:\r\n            // - Three points (or part of points, only dict for example, or array (TODO: Add the array syntax for point)\r\n            // - Three lines\r\n            // - Three lines as text.\r\n            if(values.filter((x:any) => typeof x === 'string').length===3) {\r\n                return this.parse( ...values.map((x:string) => new Line(x)) )\r\n            }else if(values.filter((x:any) => x instanceof Line).length===3) {\r\n                // We have three lines\r\n                this._lines = {\r\n                    'AB': values[0],\r\n                    'BC': values[1],\r\n                    'AC': values[2]\r\n                };\r\n\r\n                // Get the intersection points -> build the triangle using these intersection points.\r\n                let intersect = values[0].intersection(values[1]);\r\n                if (intersect.hasIntersection) {\r\n                    this._B = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[1].intersection(values[2]);\r\n                if (intersect.hasIntersection) {\r\n                    this._C = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[2].intersection(values[0]);\r\n                if (intersect.hasIntersection) {\r\n                    this._A = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n            }else {\r\n                // At least, one of the value is not a point.\r\n                if (values.filter((x: any) => (x instanceof Point)).length < 3) {\r\n                    return this.parse(\r\n                        new Point(values[0]),\r\n                        new Point(values[1]),\r\n                        new Point(values[2])\r\n                    )\r\n                }\r\n\r\n                // We have three points.\r\n                this._A = values[0].clone();\r\n                this._B = values[1].clone();\r\n                this._C = values[2].clone();\r\n\r\n                this._lines = {\r\n                    'AB': new Line(this._A, this._B),\r\n                    'BC': new Line(this._B, this._C),\r\n                    'AC': new Line(this._A, this._C)\r\n                };\r\n            }\r\n        } else if (values.length === 1) {\r\n            if (values[0] instanceof Triangle) {\r\n                return values[0].clone();\r\n            }\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the Triangle class\r\n     */\r\n    clone = (): Triangle => {\r\n        this._A = this._A.clone();\r\n        this._B = this._B.clone();\r\n        this._C = this._C.clone();\r\n\r\n        this._lines = {\r\n            'AB': this._lines.AB.clone(),\r\n            'BC': this._lines.BC.clone(),\r\n            'AC': this._lines.AC.clone()\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Triangle operations and properties\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Generate the Line object for the three segments of the triangle\r\n     */\r\n    private _updateTriangle = () => {\r\n        this._middles = {\r\n            'AB': new Point().middleOf(this._A, this._B),\r\n            'AC': new Point().middleOf(this._A, this._C),\r\n            'BC': new Point().middleOf(this._B, this._C)\r\n        }\r\n\r\n        this._remarquables = this._calculateRemarquableLines();\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the Point class for the given name\r\n     * @param ptName\r\n     */\r\n    private getPointByName = (ptName: string): Point => {\r\n        switch (ptName.toUpperCase()) {\r\n            case 'A':\r\n                return this._A;\r\n            case 'B':\r\n                return this._B;\r\n            case 'C':\r\n                return this._C;\r\n        }\r\n\r\n        // Something went wrong ! Return the first point\r\n        return this._A;\r\n    }\r\n    /**\r\n     * Get the vector for the segment given by name.\r\n     * @param ptName1\r\n     * @param ptName2\r\n     */\r\n    private getSegment = (ptName1: string, ptName2: string): Vector => {\r\n        return new Vector(\r\n            this.getPointByName(ptName1),\r\n            this.getPointByName(ptName2)\r\n        );\r\n    }\r\n\r\n    private _calculateRemarquableLines = (): remarquableLines => {\r\n        let remarquables: remarquableLines = {\r\n            'medians': {\r\n                'A': new Line(this._A, this._middles.BC),\r\n                'B': new Line(this._B, this._middles.AC),\r\n                'C': new Line(this._C, this._middles.AB),\r\n                'intersection': null\r\n            },\r\n            'mediators': {\r\n                'AB': new Line(this._middles.AB, new Vector(this._A, this._B).normal()),\r\n                'AC': new Line(this._middles.AC, new Vector(this._A, this._C).normal()),\r\n                'BC': new Line(this._middles.BC, new Vector(this._B, this._C).normal()),\r\n                'intersection': null\r\n            },\r\n            'heights': {\r\n                'A': new Line(this._A, new Vector(this._B, this._C).normal()),\r\n                'B': new Line(this._B, new Vector(this._A, this._C).normal()),\r\n                'C': new Line(this._C, new Vector(this._A, this._B).normal()),\r\n                'intersection': null\r\n            },\r\n            'bisectors': {\r\n                'A': this._calculateBisectors('A'),\r\n                'B': this._calculateBisectors('B'),\r\n                'C': this._calculateBisectors('C'),\r\n                'intersection': null\r\n            }\r\n        }\r\n\r\n        // As it's a triangle, we assume the lines are intersecting and aren't parallel or superposed.\r\n        remarquables.medians.intersection = remarquables.medians.A.intersection(remarquables.medians.B).point;\r\n        remarquables.mediators.intersection = remarquables.mediators.AB.intersection(remarquables.mediators.BC).point;\r\n        remarquables.heights.intersection = remarquables.heights.A.intersection(remarquables.heights.B).point;\r\n        remarquables.bisectors.intersection = remarquables.bisectors.A.intersection(remarquables.bisectors.B).point;\r\n\r\n        // Everything was calculated for the remarquable lines.\r\n        return remarquables;\r\n    }\r\n\r\n    private _calculateBisectors = (pt: string): Line => {\r\n        let tlines = this.lines, d1, d2;\r\n\r\n        if(pt==='A'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.AC;\r\n        }else if(pt==='B'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.BC;\r\n        }else if(pt==='C'){\r\n            d1 = tlines.BC;\r\n            d2 = tlines.AC;\r\n        }\r\n\r\n        let b1 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm)).reorder(true).simplify()),\r\n            b2 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm).opposed()).reorder(true).simplify());\r\n\r\n        // Must determine which bisectors is in the triangle\r\n        if(pt==='A'){\r\n            return b1.hitSegment(this.B, this.C)?b1:b2;\r\n        }\r\n        if(pt==='B'){\r\n            return b1.hitSegment(this.A, this.C)?b1:b2;\r\n        }\r\n        if(pt==='C'){\r\n            return b1.hitSegment(this.B, this.A)?b1:b2;\r\n        }\r\n\r\n        // Default returns the first bisector\r\n        return b1;\r\n    }\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Point} from \"./point\";\r\n\r\nexport class Vector {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n\r\n    constructor(...values: unknown[]) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction|number|string) {\r\n        this._x = new Fraction(value);\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction|number|string) {\r\n        this._y = new Fraction(value);\r\n    }\r\n\r\n    get normSquare(): Fraction {\r\n        return this._x.clone().pow(2).add(this._y.clone().pow(2));\r\n    }\r\n\r\n    get norm(): number {\r\n        return Math.sqrt(this.normSquare.value);\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\begin{pmatrix}${this._x.tex} \\\\\\\\\\ ${this._y.tex} \\\\end{pmatrix}`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Vector => {\r\n        // TODO: Must be more strict about what is given and limit to two dimensional vectors.p\r\n        // Maybe more than one value was given...\r\n        // Initialize the vector\r\n        this.zero();\r\n\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        if (values.length === 1) {\r\n            if (values[0] instanceof Vector) {\r\n                return values[0].clone()\r\n            } else {\r\n                return this._parseString(values[0])\r\n            }\r\n        }\r\n\r\n        if (values.length >= 2) {\r\n            // Two points are given - skip the third value.\r\n            if (values[0] instanceof Point && values[1] instanceof Point) {\r\n                this._x = values[1].x.clone().subtract(values[0].x)\r\n                this._y = values[1].y.clone().subtract(values[0].y)\r\n                return this;\r\n            }\r\n\r\n            // Fractions or a number are give\r\n            if (values[0] instanceof Fraction || !isNaN(values[0])) {\r\n                this._x = new Fraction(values[0])\r\n            }\r\n            if (values[1] instanceof Fraction || !isNaN(values[1])) {\r\n                this._y = new Fraction(values[1])\r\n            }\r\n\r\n            if(\r\n                (typeof values[0] === 'object' && !isNaN(values[0].x) && !isNaN(values[0].x)) &&\r\n                (typeof values[1] === 'object' && !isNaN(values[1].x) && !isNaN(values[1].x))\r\n            ){\r\n                this._x = new Fraction(+values[1].x-values[0].x)\r\n                this._y = new Fraction(+values[1].y-values[0].y)\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Vector => {\r\n        let V = new Vector();\r\n\r\n        if (this._x !== null) {\r\n            V.x = this._x.clone();\r\n        }\r\n        if (this._y !== null) {\r\n            V.y = this._y.clone();\r\n        }\r\n        return V;\r\n    }\r\n\r\n    reset = (): Vector => {\r\n        this._x = null;\r\n        this._y = null;\r\n        return this;\r\n    }\r\n\r\n    zero = (): Vector => {\r\n        this.reset();\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    one = (): Vector => {\r\n        this._x = new Fraction();\r\n        this._y = new Fraction();\r\n        return this;\r\n    }\r\n\r\n    private _parseString = (value: string): Vector => {\r\n        // Split comma, semi colon or single space.\r\n        let components = value.split(/[,;\\s]/g);\r\n\r\n        // Validate the fraction values.\r\n        this.x = new Fraction(components[0] || null);\r\n        this.y = new Fraction(components[1] || null);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Vector => {\r\n        this._x.opposed();\r\n        this._y.opposed();\r\n        return this;\r\n    }\r\n\r\n    add = (V: Vector): Vector => {\r\n        this._x.add(V.x);\r\n        this._y.add(V.y);\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (V: Vector): Vector => {\r\n        return this.add(V.clone().opposed());\r\n    }\r\n\r\n    scalarProductWithVector = (V: Vector): Fraction => {\r\n        // TODO: Add the scalar factor !!!!\r\n        return this._x.clone().multiply(V.x).add(this._y.clone().multiply(V.y));\r\n    }\r\n\r\n    static scalarProduct = (v1: Vector, v2: Vector): number => {\r\n        // TODO: Transform to fraction with nthroot.\r\n        return v1.x.value * v2.x.value + v1.y.value * v2.y.value;\r\n    };\r\n\r\n    normal = (): Vector => {\r\n        let x = this.x.clone().opposed(), y = this.y.clone();\r\n        this._x = y;\r\n        this._y = x;\r\n        return this;\r\n    }\r\n\r\n    isNormalTo = (v: Vector): boolean => {\r\n        return this.scalarProductWithVector(v).isZero()\r\n    }\r\n\r\n    get isNull(): boolean {\r\n        return this.x.isZero() && this.y.isZero()\r\n    }\r\n\r\n    multiplyByScalar = (k: any): Vector => {\r\n        let scalar = new Fraction(k);\r\n        this._x.multiply(scalar);\r\n        this._y.multiply(scalar);\r\n        return this;\r\n    }\r\n\r\n    divideByScalar = (k: any): Vector => {\r\n        return this.multiplyByScalar(new Fraction(k).invert());\r\n    }\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    simplify = (): Vector => {\r\n        // Multiply by the lcm of denominators.\r\n        return this.multiplyByScalar(Numeric.lcm(this._x.denominator, this._y.denominator))\r\n            .divideByScalar(Numeric.gcd(this._x.numerator, this._y.numerator));\r\n    }\r\n\r\n    simplifyDirection = (): Vector => {\r\n        let lcm = Numeric.lcm(this.x.denominator, this.y.denominator),\r\n            gcd = Numeric.gcd(this.x.numerator, this.y.numerator);\r\n\r\n        this.x.multiply(lcm).divide(gcd);\r\n        this.y.multiply(lcm).divide(gcd);\r\n        return this\r\n    }\r\n\r\n    angleWith = (V: Vector, sharp?: Boolean, radian?: Boolean): number => {\r\n        let scalar = this.scalarProductWithVector(V).value,\r\n            toDegree = radian ? 1 : 180 / Math.PI;\r\n        if (sharp) {\r\n            scalar = Math.abs(scalar);\r\n        }\r\n\r\n        return toDegree * Math.acos(scalar / (this.norm * V.norm));\r\n    }\r\n}\r\n","export class Numeric{\r\n    static round(value:number, decimals:number=2):number {\r\n        return Number(Math.round(Number(value+'e'+decimals))+'e-'+decimals);\r\n    }\r\n\r\n    /**\r\n     * Get the list of the nth first prime numbers.\r\n     * @param nb : number of primes to choose from\r\n     */\r\n    static primes(nb?:number):number[]{\r\n        let primesValues:number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973];\r\n        if(nb === undefined){\r\n            return primesValues;\r\n        }else{\r\n            return primesValues.slice(0,Math.min(primesValues.length,nb));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the list of all dividers of a number.\r\n     * @param value\r\n     */\r\n    static dividers(value:number):number[]{\r\n        let D: number[];\r\n        const maxV = Math.sqrt(Math.abs(value));\r\n\r\n        // Initialize the list of dividers.\r\n        D = [];\r\n\r\n        for(let i=1; i<=maxV; i++){\r\n            if(value%i===0){\r\n                D.push(i);\r\n                D.push(value/i);\r\n            }\r\n        }\r\n\r\n        // Order numbers.\r\n        D.sort(function(a, b){return a-b;});\r\n\r\n        // Make sure the array of value is unique.\r\n        return [...new Set(D)];\r\n    }\r\n    /**\r\n     * Great Common Divisor\r\n     * @param values : number values\r\n     */\r\n    static gcd(...values:number[]):number{\r\n        // Define the gcd for two number\r\n        let gcd2 = function(a:number,b:number):number{\r\n            if(b===0){return a;}\r\n            return gcd2(b, a%b);\r\n        };\r\n\r\n        let g:number = 1,\r\n            i:number = 2;\r\n\r\n        // Nothing is given\r\n        if(values.length===0){return 1;}\r\n        // Only one number is given\r\n        if(values.length===1){\r\n            // The first number is zero\r\n            if(values[0]===0){return 1;}\r\n            // Return the number\r\n            return values[0];\r\n        }\r\n\r\n        // We have at least 2 numbers.\r\n        g = gcd2(values[0],values[1]);\r\n\r\n        // The gcd of the two first value is one ? It's already finished.\r\n        if(g===1){return 1;}\r\n\r\n        // The current gcd isn't one. Continue with all next values.\r\n        for(i=2; i<values.length; i++){\r\n            g = gcd2(g, values[i]);\r\n            // Escape if gcd is already one.\r\n            if(g===1){break;}\r\n        }\r\n\r\n        return Math.abs(g);\r\n    }\r\n\r\n    static divideNumbersByGCD(...values: number[]): number[]{\r\n        let gcd = Numeric.gcd(...values)\r\n\r\n        return values.map(x=>x/gcd)\r\n    }\r\n    /**\r\n     * Least Common Multiple\r\n     * @param values: list of numbers\r\n     */\r\n    static lcm(...values:number[]):number{\r\n        return values.reduce(function(a,b){\r\n            return Math.abs(a * b / Numeric.gcd(a, b));\r\n        });\r\n    }\r\n\r\n    static pythagoricianTripletsWithTarget(target: number, targetIsSquare?:boolean): number[][] {\r\n        // méthode inverse, à partir du triplet.\r\n        const triplets = [],\r\n            targetValue = targetIsSquare===true?+target:target**2\r\n        for(let u = 0; u <= target; u++){\r\n            for(let v = 0; v <=target; v++){\r\n                if(u**2+v**2===targetValue){\r\n                    triplets.push([u, v, target])\r\n                }\r\n            }\r\n        }\r\n\r\n        return triplets\r\n    }\r\n\r\n    static numberCorrection(value: number, epsilonDigit:number = 1, epsilonNumberOfDigits: number = 10, number_of_digits: number = 6){\r\n\r\n        // Must modify the number if it's like:\r\n        // a: 3.0000000000000003\r\n        // b: 3.9999999999999994\r\n        // remove the last character\r\n        // check if around n last characters are either 0 or 9\r\n        // if it is, 'round' the number.\r\n        function extractDecimalPart(valueToExtract: number, decimalLength: number){\r\n            let decimal = valueToExtract.toString()\r\n\r\n            if (!decimal.includes('.')) {\r\n                return ''\r\n            }\r\n\r\n            decimal = decimal.split('.')[1]\r\n            return decimal.substring(0, decimalLength)\r\n        }\r\n\r\n        const epsilon = Number(`0.${\"0\".repeat(epsilonNumberOfDigits-1)}${epsilonDigit}`)\r\n        const decimal = extractDecimalPart(value, epsilonNumberOfDigits)\r\n        if(decimal===''){return value}\r\n\r\n        const n9 = decimal.match(/9+$/g)\r\n        const n0 = decimal.match(/0+$/g)\r\n\r\n        if (n9 && n9[0].length >= number_of_digits) {\r\n            // New tested values.\r\n            const mod = extractDecimalPart(value + epsilon, epsilonNumberOfDigits),\r\n                mod0 = mod.match(/0+$/g)\r\n\r\n            if(mod0 && mod0[0].length>= number_of_digits){\r\n                return +((value+epsilon).toString().split(mod0[0])[0])\r\n            }\r\n        }\r\n\r\n        if (n0 && n0[0].length >= number_of_digits) {\r\n            // New tested values.\r\n            const mod = extractDecimalPart(value - epsilon, epsilonNumberOfDigits),\r\n                mod9 = mod.match(/9+$/g)\r\n\r\n            if(mod9 && mod9[0].length>= number_of_digits){\r\n                // The value can be changed. Remove all nines!\r\n                return +(value.toString().split(n0[0])[0])\r\n            }\r\n        }\r\n\r\n        return value\r\n    }\r\n\r\n    static periodic(value: number):number{\r\n        if(Number.isSafeInteger(value)){return 0}\r\n\r\n        // Assume it's with decimal.\r\n        let decimal = (value.toString()).split('.')[0]\r\n\r\n        // The decimal part is limited\r\n        if(decimal.length<10){return 0}\r\n\r\n        // Find the periodic if it exists.\r\n    }\r\n\r\n    static decompose(value: number): number[][]{\r\n        let dividers = Numeric.dividers(value),\r\n            limit = Math.sqrt(value),\r\n            arr = [],\r\n            u, v\r\n\r\n        while(dividers.length>0){\r\n            u = dividers.shift()\r\n            v = dividers.length>0?dividers.pop():+u\r\n\r\n            arr.push([u,v])\r\n        }\r\n\r\n        return arr\r\n    }\r\n}","import {rndPolynom} from \"./rndPolynom\";\r\nimport {rndMonom} from \"./rndMonom\";\r\nimport {rndHelpers} from \"./rndHelpers\";\r\nimport {randomCoefficientConfig, randomGeometryLineConfig, randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {rndFraction} from \"./rndFraction\";\r\nimport {Polynom} from \"../algebra/polynom\";\r\nimport {Monom} from \"../algebra/monom\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Line} from \"../geometry/line\";\r\nimport {rndGeometryLine} from \"./rndGeometryLine\";\r\n\r\nexport * from \"./rndTypes\"\r\n\r\nexport namespace Random {\r\n    export function polynom(config?: randomPolynomConfig): Polynom {\r\n        return (new rndPolynom(config)).generate()\r\n    }\r\n\r\n    export function monom(config?: randomMonomConfig): Monom {\r\n        return (new rndMonom(config)).generate()\r\n    }\r\n\r\n    export function fraction(config?: randomCoefficientConfig): Fraction {\r\n        return (new rndFraction(config)).generate()\r\n    }\r\n\r\n    export function number(from: number, to: number): number {\r\n        return rndHelpers.randomInt(from, to)\r\n    }\r\n\r\n    export function numberSym(max: number, allowZero?: boolean): number {\r\n        return rndHelpers.randomIntSym(max, allowZero)\r\n    }\r\n\r\n    export function prime(max: number): number {\r\n        return rndHelpers.randomPrime(max)\r\n    }\r\n\r\n    export function bool(percent?: number): boolean {\r\n        return rndHelpers.randomBool(percent)\r\n    }\r\n\r\n    export function array(arr: any[], number?: number): any[] {\r\n        return rndHelpers.randomArray(arr, number)\r\n    }\r\n\r\n    export function item(arr: any[]): any {\r\n        return rndHelpers.randomItem(arr)\r\n    }\r\n\r\n    export function shuffle(arr: any[]): any[] {\r\n        return rndHelpers.shuffleArray(arr)\r\n    }\r\n\r\n    export namespace Geometry {\r\n        export function line(config: randomGeometryLineConfig): Line {\r\n            return (new rndGeometryLine(config).generate())\r\n        }\r\n    }\r\n}","export class randomCore {\r\n    protected _config: Object\r\n    protected _defaultConfig: Object\r\n    mergeConfig = (config: Object, defaultConfig: Object): Object => {\r\n        if (config !== undefined) {\r\n            return {...defaultConfig, ...config}\r\n        }\r\n        return defaultConfig\r\n    }\r\n\r\n    generate = (): unknown => {\r\n        return undefined\r\n    }\r\n\r\n    config = (config: Object): randomCore => {\r\n        this._config = this.mergeConfig(config, this._defaultConfig)\r\n        return this\r\n    }\r\n}","import {randomCore} from \"./randomCore\";\r\nimport {randomCoefficientConfig, randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {Random} from \"./random\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\n/**\r\n * Create a random monom based on a based configuration\r\n */\r\nexport class rndFraction extends randomCore {\r\n    declare protected _config: randomCoefficientConfig\r\n    declare protected _defaultConfig: randomCoefficientConfig\r\n\r\n    constructor(userConfig?: randomCoefficientConfig) {\r\n        super();\r\n\r\n        this._defaultConfig = {\r\n            negative: true,\r\n            max: 10,\r\n            reduced: true,\r\n            zero: true,\r\n            natural: false\r\n        }\r\n\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Fraction => {\r\n        let Q = new Fraction()\r\n\r\n        if(this._config.negative){\r\n            Q.numerator = Random.numberSym(this._config.max, this._config.zero)\r\n        }else {\r\n            Q.numerator = Random.number(this._config.zero ? 0 : 1, this._config.max)\r\n        }\r\n        if(this._config.natural){\r\n            Q.denominator = 1\r\n        }else {\r\n            let securityCount = 0\r\n            while(Q.isRelative() && securityCount<10) {\r\n                Q.denominator = Random.number(1, this._config.max)\r\n                securityCount++\r\n            }\r\n        }\r\n\r\n        return this._config.reduced?Q.reduce():Q\r\n    }\r\n}\r\n","import {randomCore} from \"./randomCore\";\r\nimport {Random, randomGeometryLineConfig} from \"./random\";\r\nimport {Line} from \"../geometry/line\";\r\nimport {Vector} from \"../geometry/vector\";\r\nimport {PiMath} from \"../../index\";\r\nimport {Point} from \"../geometry/point\";\r\n\r\n/**\r\n * Create a random monom based on a based configuration\r\n */\r\nexport class rndGeometryLine extends randomCore {\r\n    declare protected _config: randomGeometryLineConfig\r\n    declare protected _defaultConfig: randomGeometryLineConfig\r\n\r\n    constructor(userConfig?: randomGeometryLineConfig) {\r\n        super();\r\n\r\n        this._defaultConfig = {\r\n            A: {\r\n                x: Random.numberSym(10),\r\n                y: Random.numberSym(10)\r\n            },\r\n        }\r\n\r\n        // TODO: Strange that it raise an error\r\n        // @ts-ignore\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Line => {\r\n        // The A point exists.\r\n        const d = new Vector(\r\n            Random.numberSym(10),\r\n            Random.numberSym(10)\r\n        )\r\n\r\n        while(d.isNull){\r\n            d.x = Random.numberSym(10)\r\n            d.y = Random.numberSym(10)\r\n        }\r\n\r\n        if(this._config.slope===1){\r\n            if(d.x.sign()!==d.y.sign()){\r\n                d.y.opposed()\r\n            }\r\n        }else if(this._config.slope===-1){\r\n            if(d.x.sign()!==d.y.sign()){\r\n                d.y.opposed()\r\n            }\r\n        }\r\n\r\n        return new Line(new Point(this._config.A.x, this._config.A.y), d)\r\n    }\r\n}\r\n","/**\r\n * Random helpers\r\n */\r\nimport {Numeric} from \"../numeric\";\r\n\r\nexport class rndHelpers {\r\n\r\n    /**\r\n     * Random boolean with a percent ratio\r\n     * @param percent\r\n     */\r\n    static randomBool(percent:number=0.5):boolean{\r\n        return Math.random()<percent;\r\n    }\r\n\r\n    /**\r\n     * Random integer between two values.\r\n     * @param a (number) : From this value to the second value. If the second is ommited, this value is the max value.\r\n     * @param b (number) : To this value. If this is ommited.\r\n     */\r\n    static randomInt(a:number, b?:number):number{\r\n        if(b===undefined){return this.randomInt(0,a);}\r\n\r\n        return Math.floor(Math.random() * (b - a + 1) + a);\r\n    }\r\n\r\n    /**\r\n     * Random integer between -max and max value.\r\n     * @param max (number) : determine the limits.\r\n     * @param zero (bool) : determine if zero is allowed or not.\r\n     */\r\n    static randomIntSym(max:number, zero?:boolean):number{\r\n        if(zero===false){\r\n            return this.randomBool()?this.randomInt(1,max):-this.randomInt(1,max);\r\n        }else{\r\n            return this.randomInt(-max, max);\r\n        }\r\n    }\r\n\r\n    static randomPrime(max: number): number {\r\n        let primes = Numeric.primes()\r\n        if(max!==undefined){\r\n            primes = primes.filter(x=>x<max)\r\n        }\r\n        return this.randomItem(primes)\r\n    }\r\n\r\n    static randomArray(arr: any[], number?:number):any[]{\r\n        if(number===undefined){number = 1}\r\n\r\n        // Return a clone array\r\n        if(arr.length<=0){return Object.values(arr)}\r\n\r\n        // Randomize the array and return the n first elements.\r\n        return rndHelpers.shuffleArray(arr).slice(0,number);\r\n    }\r\n\r\n    static randomItem(arr: any[]): any{\r\n        if(arr.length===0){return ''}\r\n        return this.randomArray(arr, 1)[0]\r\n    }\r\n\r\n    static shuffleArray(arr: any[]): any[] {\r\n        // The Fisher-Yates algorithm\r\n        let shuffleArray = Object.values(arr)\r\n        for (let i = shuffleArray.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            const temp = shuffleArray[i];\r\n            shuffleArray[i] = shuffleArray[j];\r\n            shuffleArray[j] = temp;\r\n        }\r\n\r\n        return shuffleArray;\r\n    }\r\n\r\n}","import {randomCore} from \"./randomCore\";\r\nimport {randomMonomConfig} from \"./rndTypes\";\r\nimport {Random} from \"./random\";\r\nimport {Monom} from \"../algebra/monom\";\r\n\r\n/**\r\n * Create a random monom based on a based configuration\r\n */\r\nexport class rndMonom extends randomCore {\r\n    declare protected _config: randomMonomConfig\r\n    declare protected _defaultConfig: randomMonomConfig\r\n\r\n    constructor(userConfig?: randomMonomConfig) {\r\n        super();\r\n\r\n        this._defaultConfig = {\r\n            letters: 'x',\r\n            degree: 2,\r\n            fraction: true,\r\n            zero: false\r\n        }\r\n\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Monom => {\r\n        // Create a monom instance\r\n        let M = new Monom()\r\n\r\n        // Generate the coefficient\r\n        if (typeof this._config.fraction === \"boolean\") {\r\n            M.coefficient = Random.fraction({\r\n                zero: this._config.zero,\r\n                reduced: true,\r\n                natural: !this._config.fraction\r\n            })\r\n        } else {\r\n            M.coefficient = Random.fraction(this._config.fraction)\r\n        }\r\n\r\n        // Calculate the degree of the monom\r\n        if (this._config.letters.length > 1) {\r\n            // Initialise each items...\r\n            for (let L of this._config.letters.split('')) {\r\n                M.setLetter(L, 0);\r\n            }\r\n            for (let i = 0; i < this._config.degree; i++) {\r\n                const L = Random.item(this._config.letters.split(\"\"))\r\n                M.setLetter(L, M.degree(L).clone().add(1))\r\n            }\r\n        } else {\r\n            M.setLetter(this._config.letters, this._config.degree)\r\n        }\r\n\r\n        return M\r\n    }\r\n}\r\n","import {randomCore} from \"./randomCore\";\r\nimport {randomPolynomConfig} from \"./rndTypes\";\r\nimport {rndMonom} from \"./rndMonom\";\r\nimport {Random} from \"./random\";\r\nimport {Polynom} from \"../algebra/polynom\";\r\nimport {Monom} from \"../algebra/monom\";\r\n\r\n/**\r\n * Random polynoms\r\n */\r\nexport class rndPolynom extends randomCore {\r\n    declare protected _config: randomPolynomConfig\r\n    declare protected _defaultConfig: randomPolynomConfig\r\n\r\n    constructor(userConfig?: randomPolynomConfig) {\r\n        super();\r\n\r\n        // Default config for a random polynom\r\n        this._defaultConfig = {\r\n            letters: 'x',\r\n            degree: 2,\r\n            fraction: false,\r\n            zero: false,\r\n            unit: false,\r\n            factorable: false,\r\n            allowNullMonom: true,\r\n            numberOfMonoms: 0,\r\n            positive: true\r\n        }\r\n\r\n        // Merge config with initialiser\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Polynom => {\r\n        if(this._config.factorable && this._config.degree>1){\r\n            return this.factorable()\r\n        }\r\n\r\n        // Create the polynom\r\n        let P = new Polynom().empty(),\r\n            M: Monom\r\n\r\n        for (let i = this._config.degree; i >= 0; i--) {\r\n            // Create monom of corresponding degree.\r\n            M = new rndMonom({\r\n                letters: this._config.letters,\r\n                degree: i,\r\n                fraction: this._config.fraction,\r\n                zero: (i === this._config.degree) ? false : this._config.allowNullMonom\r\n            }).generate()\r\n\r\n            // If degree is the greatest and unit is true, set the monom value to one.\r\n            if (this._config.unit && this._config.degree === i) {\r\n                M.coefficient.one()\r\n            }\r\n\r\n            // Add to the polynom\r\n            P.add(M)\r\n        }\r\n\r\n        // Make sure the first monom is positive.\r\n        if(this._config.positive && P.monomByDegree().coefficient.isNegative()){\r\n            P.monomByDegree().coefficient.opposed()\r\n        }\r\n\r\n        // If the number of monoms is greater than the allowed value, remove some of them... except the first one !\r\n        if (this._config.numberOfMonoms > 0 && this._config.numberOfMonoms < P.length) {\r\n            // Get the greatest degree monom\r\n            let M = P.monomByDegree().clone()\r\n            P.monoms = Random.array(P.monoms.slice(1), this._config.numberOfMonoms-1)\r\n            P.add(M).reorder().reduce()\r\n        }\r\n        return P\r\n    }\r\n\r\n    factorable = (): Polynom => {\r\n        let P = new Polynom().one()\r\n\r\n        let _factorableConfig = {...this._config}\r\n        _factorableConfig.degree = 1\r\n        _factorableConfig.factorable = false\r\n\r\n        for(let i=0; i<this._config.degree;i++){\r\n            P.multiply(Random.polynom(_factorableConfig))\r\n        }\r\n\r\n        return P\r\n    }\r\n}","export type tokenType = {\r\n    [key: string]: {\r\n        precedence: number,\r\n        associative: string,\r\n        type: string\r\n    }\r\n}\r\n\r\nexport const tokenConstant: { [Key: string]: number } = {\r\n    pi: Math.PI,\r\n    e: Math.exp(1)\r\n}\r\n\r\nexport enum ShutingyardType {\r\n    VARIABLE = 'variable',\r\n    COEFFICIENT = 'coefficient',\r\n    OPERATION = 'operation',\r\n    CONSTANT = 'constant',\r\n    FUNCTION = 'function',\r\n    MONOM = 'monom'\r\n}\r\n\r\nexport enum ShutingyardMode {\r\n    EXPRESSION = 'expression',\r\n    POLYNOM = 'polynom',\r\n    SET = 'set',\r\n    NUMERIC = 'numeric'\r\n}\r\n\r\nexport type Token = { token: string, tokenType: string }\r\n\r\nexport class Shutingyard {\r\n    readonly _mode: ShutingyardMode;\r\n    private _rpn: Token[] = [];\r\n    private _tokenConfig: tokenType;\r\n    private _tokenConstant: { [Key: string]: number }\r\n    private _tokenKeys: string[]\r\n    private _uniformize: boolean;\r\n\r\n    constructor(mode?: ShutingyardMode) {\r\n        this._mode = typeof mode === 'undefined' ? ShutingyardMode.POLYNOM : mode;\r\n        this.tokenConfigInitialization()\r\n    }\r\n\r\n    // Getter\r\n    get rpn() {\r\n        // console.log(this._rpn)\r\n        return this._rpn;\r\n    }\r\n\r\n    get rpnToken() {\r\n        return this._rpn.map(x => x.token)\r\n    }\r\n\r\n    /**\r\n     * Determin if the token is a defined operation\r\n     * Defined operations: + - * / ^ sin cos tan\r\n     * @param token\r\n     */\r\n    // isOperation(token: string): boolean {\r\n    //     if (token[0].match(/[+\\-*/^]/g)) {\r\n    //         return true;\r\n    //     }\r\n    //     //\r\n    //     // if (token.match(/^sin|cos|tan/g)) {\r\n    //     //     return true;\r\n    //     // }\r\n    //\r\n    //     return false;\r\n    // }\r\n\r\n    tokenConfigInitialization(): tokenType {\r\n        if (this._mode === ShutingyardMode.SET) {\r\n            this._tokenConfig = {\r\n                '&': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '|': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '!': {precedence: 4, associative: 'right', type: ShutingyardType.OPERATION},\r\n                '-': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION}\r\n            }\r\n            this._uniformize = false;\r\n        } else if (this._mode === ShutingyardMode.NUMERIC) {\r\n            this._tokenConfig = {\r\n                '^': {precedence: 4, associative: 'right', type: ShutingyardType.OPERATION},\r\n                '*': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '/': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '+': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '-': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '%': {precedence: 3, associative: 'right', type: ShutingyardType.OPERATION},\r\n                'sin': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'cos': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'tan': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'sqrt': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'nthrt': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'ln': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'log': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n            }\r\n            this._uniformize = false\r\n        } else if (this._mode === ShutingyardMode.EXPRESSION) {\r\n            this._tokenConfig = {\r\n                '^': {precedence: 4, associative: 'right', type: ShutingyardType.OPERATION},\r\n                '*': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '/': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '+': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '-': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '%': {precedence: 3, associative: 'right', type: ShutingyardType.OPERATION},\r\n                'sin': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'cos': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'tan': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'sqrt': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'nthrt': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n            }\r\n            this._uniformize = true\r\n        } else {\r\n            this._tokenConfig = {\r\n                '^': {precedence: 4, associative: 'right', type: ShutingyardType.OPERATION},\r\n                '*': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '/': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '+': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '-': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n            }\r\n            this._uniformize = true\r\n        }\r\n\r\n        this._tokenKeys = Object.keys(this._tokenConfig).sort((a, b) => b.length - a.length)\r\n        return this._tokenConfig\r\n    }\r\n\r\n    /**\r\n     * Get the next token to analyse.\r\n     * @param expr (string) Expression to analyse\r\n     * @param start (number) CUrrent position in the expr string.\r\n     */\r\n    NextToken(expr: string, start: number): [string, number, string] {\r\n        let token: string, tokenType: string;\r\n        token = '';\r\n        tokenType = '';\r\n        // Case of parenthesis or comma (generic items)\r\n        if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        } else {\r\n            // Extract operation and function tokens\r\n            for (let key of this._tokenKeys) {\r\n                if (expr.substring(start, start + key.length) === key) {\r\n                    token += key;\r\n                    tokenType = this._tokenConfig[key].type\r\n                    break\r\n                }\r\n            }\r\n\r\n            // Extract constant\r\n            for (let key in tokenConstant) {\r\n                if (expr.substring(start, start + key.length) === key) {\r\n                    token += key;\r\n                    tokenType = ShutingyardType.CONSTANT\r\n                    break\r\n                }\r\n            }\r\n\r\n            if (token === '') {\r\n                // No function found ! Might be a coefficient !\r\n                if (expr[start].match(/[0-9]/)) {\r\n                    if (this._mode === ShutingyardMode.POLYNOM && false) {\r\n                        token = expr.substring(start).match(/^([0-9.,/]+)/)[0]\r\n                    } else {\r\n                        token = expr.substring(start).match(/^([0-9.]+)/)[0]\r\n                    }\r\n                    tokenType = ShutingyardType.COEFFICIENT\r\n                } else if (expr[start].match(/[a-zA-Z]/)) {\r\n                    token = expr.substring(start).match(/^([a-zA-Z])/)[0]\r\n                    tokenType = ShutingyardType.VARIABLE\r\n                } else {\r\n                    console.log('Unidentified token', expr[start], expr, start)\r\n                    token = expr[start]\r\n                    tokenType = ShutingyardType.MONOM\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    normalize(expr: string): string {\r\n        if(expr.length===1){return expr}\r\n\r\n        // Get the list of function token.\r\n        let fnToken: string[] = [],\r\n            kToken: string[] = []\r\n        for (let token in this._tokenConfig) {\r\n            if (this._tokenConfig[token].type === ShutingyardType.FUNCTION) {\r\n                fnToken.push(token)\r\n            }\r\n        }\r\n        // sort if from the lengthy to the smallest function\r\n        fnToken.sort((a, b) => b.length - a.length)\r\n\r\n        for (let token in tokenConstant) {\r\n                kToken.push(token)\r\n        }\r\n        // sort if from the lengthy to the smallest function\r\n        kToken.sort((a, b) => b.length - a.length)\r\n\r\n        let normalizedExpr: string = \"\",\r\n            i = 0,\r\n            crtToken,\r\n            nextToken\r\n\r\n        while (i < expr.length - 1) {\r\n            // Check if we have a function token.\r\n            // The function MUST have an open parentheses\r\n            let tokenIdx = 0\r\n            while (tokenIdx < fnToken.length) {\r\n                let token = fnToken[tokenIdx]\r\n                if (expr.slice(i, i + token.length + 1) === token + '(') {\r\n                    normalizedExpr += token + '('\r\n                    i += token.length + 1\r\n\r\n                    // Restart the scan for the function token\r\n                    tokenIdx = 0\r\n                } else {\r\n                    // scan for a next function token\r\n                    tokenIdx++\r\n                }\r\n            }\r\n\r\n            // Check for a constant\r\n            tokenIdx = 0\r\n            while (tokenIdx < kToken.length) {\r\n                let token = kToken[tokenIdx]\r\n                if (expr.slice(i, i + token.length) === token) {\r\n                    // We have found a constant.\r\n                    // add it, but with remove the last letter\r\n                    normalizedExpr += token.slice(0, -1)\r\n                    i += token.length-1\r\n\r\n                    // Exit the loop\r\n                    break\r\n                }\r\n                tokenIdx++\r\n            }\r\n\r\n            // The function token are solved.\r\n            crtToken = expr[i]\r\n            nextToken = expr[i + 1]\r\n            normalizedExpr += crtToken\r\n            if (crtToken.match(/[a-zA-Z]/g)) {\r\n                // Current element is a letter.\r\n                // if the next element is a letter, a number or an opening parentheses, add the multiplication sign.\r\n                if (nextToken.match(/[a-zA-Z\\d(]/)) {\r\n                    normalizedExpr += '*'\r\n                }\r\n            } else if (crtToken.match(/\\d/)) {\r\n                // Current element is a number.\r\n                // if the next element is a letter or a parentheses, add the multiplication sign.\r\n                if (nextToken.match(/[a-zA-Z(]/)) {\r\n                    normalizedExpr += '*'\r\n                }\r\n            } else if (crtToken === ')') {\r\n                // Current element is a closing parentheses.\r\n                // if the next element is a letter, a number or an opening parentheses, add the multiplication sign\r\n                if (nextToken.match(/[a-zA-Z\\d(]/)) {\r\n                    normalizedExpr += '*'\r\n                }\r\n            }\r\n\r\n            // Go to next token\r\n            i++\r\n        }\r\n\r\n        // add the last token\r\n        return normalizedExpr + nextToken\r\n    }\r\n\r\n    // /**\r\n    //  * Sanitize an expression by adding missing common operation (multiplication between parentheseses)\r\n    //  * @param expr\r\n    //  * @constructor\r\n    //  */\r\n    // Uniformizer(expr: string): string {\r\n    //     // TODO: Delete this old version\r\n    //     // Prefere \"normalize\", much more robust !\r\n    //     // Determiner if need to be uniformized\r\n    //     if (!this._uniformize) {\r\n    //         return expr\r\n    //     }\r\n    //\r\n    //     // Generate the list of function token.\r\n    //     let fnToken: string[] = []\r\n    //     for (let token in this._tokenConfig) {\r\n    //         if (this._tokenConfig[token].type === ShutingyardType.FUNCTION) {\r\n    //             fnToken.push(token)\r\n    //         }\r\n    //     }\r\n    //     // sort if from the lengthy to the smallest function\r\n    //     fnToken.sort((a, b) => b.length - a.length)\r\n    //     let tokenRegExp = new RegExp(`(${fnToken.join('|')})`, 'g')\r\n    //     let functionTokenOrder = Array.from(expr.matchAll(tokenRegExp))\r\n    //\r\n    //\r\n    //     let expr2;\r\n    //\r\n    //     // Replace all function by @\r\n    //     expr2 = expr.replace(tokenRegExp, '@')\r\n    //     // Add * before @ (functionn)\r\n    //     expr2 = expr2.replace(/([\\da-zA-Z])(@)/g, \"$1*$2\");\r\n    //\r\n    //     // Replace missing multiplication between two parenthese\r\n    //     expr2 = expr2.replace(/\\)\\(/g, ')*(');\r\n    //\r\n    //     // Replace missing multiplication between number or setLetter and parenthese.\r\n    //\r\n    //     // 3x(x-4) => 3x*(x-4)\r\n    //     expr2 = expr2.replace(/([\\da-zA-Z])(\\()/g, \"$1*$2\");\r\n    //\r\n    //     // (x-4)3x => (x-4)*3x\r\n    //     expr2 = expr2.replace(/(\\))([\\da-zA-Z])/g, \"$1*$2\");\r\n    //\r\n    //     // Add multiplication between number and letters.\r\n    //     // 3x => 3*x\r\n    //     expr2 = expr2.replace(/([0-9])([a-zA-Z])/g, \"$1*$2\");\r\n    //     expr2 = expr2.replace(/([a-zA-Z])([0-9])/g, \"$1*$2\");\r\n    //\r\n    //     // Remove letter between function token and it's parenthese.\r\n    //     // for (let token of fnToken) {\r\n    //     //     // Remove\r\n    //     //     expr2 = expr2.replace(new RegExp(token + '\\\\*', 'g'), token);\r\n    //     // }\r\n    //     // Add multiplication between letters ?\r\n    //     expr2 = expr2.replace(/([a-zA-Z])([a-zA-Z])/g, \"$1*$2\");\r\n    //     expr2 = expr2.replace(/([a-zA-Z])([a-zA-Z])/g, \"$1*$2\");\r\n    //\r\n    //     // Restore operation auto formatting (prevent adding the multiplication star)\r\n    //     let exprAsArray = expr2.split('@')\r\n    //\r\n    //     if (exprAsArray.length > 0) {\r\n    //         expr2 = \"\"\r\n    //         for (let idx in exprAsArray) {\r\n    //         }\r\n    //         for (let token of fnToken) {\r\n    //             // Remove\r\n    //\r\n    //             // expr2 = expr2.replace(new RegExp(token + '\\\\*', 'g'), token);\r\n    //         }\r\n    //     }\r\n    //\r\n    //     return expr2;\r\n    // }\r\n\r\n    /**\r\n     * Parse an expression using the shutting yard tree algorithms\r\n     * @param expr (string) Expression to analyse\r\n     * Returns a RPN list of items.\r\n     * @param uniformize\r\n     */\r\n    parse(expr: string, uniformize?: boolean): Shutingyard {\r\n        let outQueue: { token: string, tokenType: string }[] = [],    // Output queue\r\n            opStack: { token: string, tokenType: string }[] = [],     // Operation queue\r\n            token: string = '',\r\n            tokenPos: number = 0,\r\n            tokenType: string = '',\r\n            previousOpStatckLength = 0\r\n\r\n        // Normalize the input if required.\r\n        if (uniformize || this._uniformize) expr = this.normalize(expr)\r\n\r\n        let securityLoopLvl1 = 50,\r\n            securityLoopLvl2_default = 50,\r\n            securityLoopLvl2;\r\n\r\n        while (tokenPos < expr.length) {\r\n            securityLoopLvl1--;\r\n            if (securityLoopLvl1 === 0) {\r\n                console.log('SECURITY LEVEL 1 EXIT');\r\n                break;\r\n            }\r\n\r\n            // Get the next token and the corresponding new (ending) position\r\n            [token, tokenPos, tokenType] = this.NextToken(expr, tokenPos);\r\n\r\n            switch (tokenType) {\r\n                case 'monom':\r\n                case 'coefficient':\r\n                case 'variable':\r\n                case 'constant':\r\n                    outQueue.push({\r\n                        token,\r\n                        tokenType\r\n                    });\r\n                    break;\r\n                case 'operation':\r\n                    previousOpStatckLength = opStack.length;\r\n                    //If the token is an operator, o1, then:\r\n                    if (opStack.length > 0) {\r\n                        let opTop = opStack[opStack.length - 1];\r\n\r\n                        securityLoopLvl2 = +securityLoopLvl2_default;\r\n\r\n                        //while there is an operator token o2, at the top of the operator stack and\r\n                        while (opTop.token in this._tokenConfig && (\r\n                                //either o1 is left-associative and its precedence is less than or equal to that of o2,\r\n                                (this._tokenConfig[token].associative === 'left' && this._tokenConfig[token].precedence <= this._tokenConfig[opTop.token].precedence)\r\n                                ||\r\n                                //or o1 is right associative, and has precedence less than that of o2,\r\n                                (this._tokenConfig[token].associative === 'right' && this._tokenConfig[token].precedence < this._tokenConfig[opTop.token].precedence)\r\n                            )\r\n                            ) {\r\n\r\n                            /* Security exit ! */\r\n                            securityLoopLvl2--;\r\n                            if (securityLoopLvl2 === 0) {\r\n                                console.log('SECURITY LEVEL 2 OPERATION EXIT');\r\n                                break;\r\n                            }\r\n\r\n                            // Add the operation to the queue\r\n                            outQueue.push((opStack.pop()) || {token: '', tokenType: 'operation'});\r\n\r\n                            // Get the next operation on top of the Stack.\r\n                            if (opStack.length === 0) {\r\n                                break;\r\n                            }\r\n                            opTop = opStack[opStack.length - 1];\r\n                        }\r\n                    }\r\n                    //at the end of iteration push o1 onto the operator stack\r\n                    opStack.push({token, tokenType});\r\n                    break;\r\n                case 'function-argument':\r\n                    // TODO: check if the opStack exist.\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 0) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 FUNCTION ARGUMENT EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token, tokenType});\r\n                    }\r\n                    break;\r\n                case '(':\r\n                    opStack.push({token, tokenType});\r\n                    // Add an empty value if next element is negative.\r\n                    if (expr[tokenPos] === '-') {\r\n                        outQueue.push({token: '0', tokenType: 'coefficient'});\r\n                    }\r\n                    break;\r\n                case ')':\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    //Until the token at the top of the stack is a left parenthesis, pop operators off the stack onto the output queue.\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 1 /*Maybe zero !? */) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 CLOSING PARENTHESE EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token, tokenType});\r\n                    }\r\n\r\n                    //Pop the left parenthesis from the stack, but not onto the output queue.\r\n                    opStack.pop();\r\n                    break;\r\n                case 'function':\r\n                    opStack.push({token, tokenType});\r\n                    break;\r\n                default:\r\n                    // In theory, everything should be handled.\r\n                    console.log(`SHUTING YARD: ${tokenType} : ${token} `);\r\n            }\r\n\r\n            // Output\r\n            // console.log(outQueue.concat(opStack.reverse()).join(\" \"));\r\n        }\r\n\r\n        // console.log(outQueue.concat(opStack.reverse()));\r\n        this._rpn = outQueue.concat(opStack.reverse());\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(607);\n"],"names":["ShutingYard","Shutingyard","Numeric","NumExp","Fraction","Root","NthRoot","Monom","Polynom","Equation","LinearSystem","Rational","Logicalset","Random","PolynomExpFactor","PolynomExpProduct","Geometry","Vector","Point","Line","Triangle","Circle","window","Pi","PARTICULAR_SOLUTION","constructor","equations","_varnothing","varnothing","_real","real","hasVariable","letter","this","variables","includes","_randomizeDefaults","degree","parse","equationString","pStr","strSign","_findSign","split","create","_formatSign","console","error","left","right","sign","_left","_right","_sign","clone","randomize","opts","moveLeft","subtract","zero","reorder","allLeft","monoms","filter","m","isZero","forEach","move","simplify","multiply","lcm","getDenominators","divide","gcd","getNumerators","isolate","isOne","isMultiVariable","mMove","cMove","values","hasLetter","length","coefficient","replaceBy","P","value","F","_reverseSign","invert","max","letters","Set","solve","_solutions","_polynom","_solveDegree1","_solveDegree2","_solveDegree3plus","makeSolutionsUnique","test","evaluate","isEqual","log","signStr","undefined","replace","isGreater","indexOf","isStrictEqual","isAlsoEqual","m1","monomByDegree","m0","v","opposed","s","d","tex","display","NaN","exact","delta","nthDelta","realX1","realX2","sX1","sX2","aF","bF","cF","denominator","a","b","Math","sqrt","v1","toFixed","v2","reduce","hasRadical","am","bm","tex1","tex2","display1","display2","S1","S2","frac","sol","equ","factorize","factors","factor","leq","factorAsEquation","solutions","solution","push","isEquation","map","x","join","isReal","isVarnothing","signAsTex","raw","concat","numberOfVars","randomizeDefaults","static","sorted","solutionAsTex","uniqueSolutions","sort","equationStrings","buildTex","operators","equStr","equArray","i","L","monomByLetter","o","startsWith","operatorsColumns","repeat","stepTex","steps","_resolutionSteps","operations","_equations","_findLetters","E","withResolution","_solveOneLetter","mergeEquations","eq1","eq2","factor1","factor2","eq1multiplied","eq2multiplied","add","_letters","isSolvable","LS","resolutionSteps","_linearReduction","c1","c2","gcdN","numerator","gcdD","isNegativeOne","merged","lastIndex","LE","reducedEquations","Array","result","_rpn","ShutingyardMode","SET","rpn","_rawString","isLogicalset","tokenSets","reference","referenceSet","varStack","key","token","tokenType","second","pop","first","has","vennAB","A","B","vennABC","C","inputStr","_shutingYardToReducedMonom","_coefficient","_literal","copyLiterals","literal","addToken","stack","element","q1","q2","pow","ShutingyardType","COEFFICIENT","VARIABLE","M","one","setLetter","OPERATION","k","makeSame","clean","isSameAs","multiplyByNumber","nb","root","p","isSquare","compare","M1","M2","K","item","isLiteralSquare","isRational","isEven","hasFractionCoefficient","isNotZero","Object","t","n","r","tmpValues","evaluateAsNumeric","derivative","dM","primitive","areSameAs","areEquals","isDivisible","div","isStrictlyPositive","geq","isRelative","literalSqrt","literalStr","matchAll","keys","isNotEqual","dividers","abs","literals","_getLiteralDividers","monomDividers","N","arr","tmpList","litt","currentLetter","displayWithSign","texWithSign","plotFunction","tfrac","coeffN","coeffD","min","xmultiply","polynomString","mark_as_dirty","dirty_factors","dirty_zeroes","euclidianCache","CONSTANT","MONOM","FUNCTION","_monoms","_factors","_parseString","empty","Number","isSafeInteger","toString","multiplyByPolynom","multiplyByFraction","multiplyByMonom","multiplyByInteger","euclidian","quotient","reminder","maxMP","degreeP","newM","MaxIteration","isPositive","divideByFraction","divideByInteger","cP1","cP2","isOpposedAt","isFactorized","soft","e","polynomStringNormalized","replaceAll","polynomStringReduced","substring","polyFactors","checkPolyFactors","commonMonom","FactorizedConstant","pFactor","notFoundedFactors","f","factorFound","splice","isReduced","isDeveloped","vars","coeffs","shift","otherLetters","da","db","S","resultPolynom","monom","dP","integrate","valuesA","valuesB","isStrictlyNegative","tempPolynom","securityLoop","maxDegree","allDividers","_getAllPotentialFactors","isDividableBy","pX","pC","dX","dC","getZeroes","_zeroes","monomsByDegree","Ms","denominators","numerators","lcmDenominator","gcdDenominator","lcmNumerator","gcdNumerator","limitToInfinity","infinite","limitToNegativeInfinity","m2","m1d","m2d","genDisplay","output","forceSign","wrapParentheses","withAllMultSign","shutingYardToReducedPolynom","nbF","_factorize2ndDegree","P1","P2","c","x1","x2","xyzPolynom","xFactors","_factorizeByGroups","_euclidianCache","_dirty_zeroes","_dirty_factors","zeroes","texString","_texString","texFactors","factorsCount","simpleFactor","displayFactors","V","trim","isNaN","fractions","_numerator","_denominator","domain","amplify","D","dN","dD","NumeratorEuclidien","DenominatorEuclidien","R","limits","offset","Infinity","theLimit","theSign","evalValues","evalValuesOffset","FR","isInfinity","study","config","RationalStudy","ZEROTYPE","ASYMPTOTE","FUNCTION_EXTREMA","TABLE_OF_SIGNS","ASYMPTOTE_POSITION","fx","makeStudy","makeZeroes","_config","signs","_signs","makeSigns","asymptotes","_asymptotes","makeAsymptotes","_derivative","makeDerivative","variations","_variations","makeVariation","texSigns","texGrows","texVariations","indexOfZero","makeOneLineForSigns","zeroSign","oneLine","currentZero","NOTHING","makeSignsResult","resultLine","index","current","makeGrowsResult","tos","signsAsArray","growsLine","extremes","pos","y","xTex","yTex","pointType","exp","evalY","FLAT","MAX","MIN","type","extr","makeVariationsResult","varsLine","drawCode","code","asymptote","VERTICAL","HORIZONTAL","SLOPE","extreme","ZERO","_makeTexFromTableOfSigns","factorsFx","_name","GROWS","VARIATIONS","name","SIGNS","Study","super","_getZeroes","_getSigns","reduced","DEFENCE","Ztype","HOLE","before","after","position","pm","RB","RT","LB","LT","deltaX","tableOfSign","NDegree","DDegree","H","Htex","_getHorizontalAsymptoteRelativePositon","greater","dx","z","extrema","idx","typeOfTable","denominatorOrPeriodic","isApproximative","isExact","unit","decimal","floor","invalid","Q","xMultiply","controlNumerator","g","compareFraction","lesser","than","isOpposed","isInverted","isNegative","isFinite","isNatural","isOdd","dfrac","average","unique","distinct","reverse","radical","nthroot","_nth","_radical","_isValid","nth","uniformize","_expression","NUMERIC","isValid","expression","_extractDecimalPart","_numberCorrection","epsilon","n9","match","n0","mod0","mod9","_addToStack","tokenConstant","sin","cos","tan","log10","polynom","mathFunction","_degree","_fn","_powerAsInteger","_forceParenthesis","forceParenthesis","fn","powerAsInteger","isCoefficient","firstCoefficient","_texDegree","setForceParenthesis","_positive","_asPositiveDegree","positive","asPositiveDegree","parenthesis","numeratorsAsTex","denominatorsAsTex","coefficients","polynoms","d1","d2","_integrateWithInternalDerivative","applyMathFunction","mathFn","Pinternal","internalDerivative","relativePosition","distance","distanceTo","center","radius","_squareRadius","lineIntersection","solX","intersectionPoints","_cartesian","equX","lineX","equation","lineY","tangents","_tangentsWithSlope","isPointOnCircle","_tangentsThroughOnePointOnTheCircle","_tangentsThroughOnePointOutsideTheCircle","getPointsOnCircle","numberIsInteger","pt","triplets","pythagoricianTripletsWithTarget","points","triplet","isInListOfPoints","CT","_center","LinePropriety","Perpendicular","cx_px","cy_py","polyLeft","polyRight","squareRadius","h","slope","sq","_exists","cartesian","exists","cx","cy","developed","_calculateCartesian","_reset","_parseEquation","_parseCopyCircle","_parseThroughtThreePoints","_parseCenterAndPointThrough","_parseCenterAndRadius","circle","square","pointThrough","normSquare","y1","y2","T","mAB","remarquables","mediators","AB","mAC","AC","intersection","point","parseEquation","parseByPointAndVector","parseByPointAndNormal","parseByCoefficient","Parallel","parseByPointAndLine","elem","delete","size","_a","_b","_c","_d","_OA","_n","normal","orientation","director","isParellelTo","line","height","isVertical","simplifyDirection","Pt","isParallel","isSame","hasIntersection","getValueAtX","getValueAtY","canonical","mxh","OA","parametric","pmatrix","fraction","hitSegment","iPt","canonicalAsFloatCoefficient","decimals","PERPENDICULAR","PARALLEL","PointXY","_x","_y","xy","origin","middleOf","texValues","numberOfDigits","pts","norm","list","_lines","intersect","_B","_C","_A","_updateTriangle","BC","_middles","_remarquables","_calculateRemarquableLines","getPointByName","ptName","toUpperCase","getSegment","ptName1","ptName2","_calculateBisectors","medians","heights","bisectors","tlines","lines","b1","b2","BA","CB","CA","isRectangle","isNormalTo","isEquilateral","isIsocele","reset","components","scalarProductWithVector","multiplyByScalar","scalar","divideByScalar","angleWith","sharp","radian","toDegree","PI","acos","isNull","scalarProduct","round","primesValues","slice","maxV","gcd2","target","targetIsSquare","targetValue","u","epsilonDigit","epsilonNumberOfDigits","number_of_digits","extractDecimalPart","valueToExtract","decimalLength","rndPolynom","generate","rndMonom","rndFraction","number","from","to","rndHelpers","randomInt","numberSym","allowZero","randomIntSym","prime","randomPrime","bool","percent","randomBool","array","randomArray","randomItem","shuffle","shuffleArray","rndGeometryLine","mergeConfig","defaultConfig","_defaultConfig","randomCore","userConfig","negative","natural","securityCount","random","primes","j","temp","factorable","allowNullMonom","numberOfMonoms","_factorableConfig","pi","mode","_mode","POLYNOM","tokenConfigInitialization","rpnToken","_tokenConfig","precedence","associative","_uniformize","EXPRESSION","_tokenKeys","NextToken","expr","start","normalize","fnToken","kToken","crtToken","nextToken","normalizedExpr","tokenIdx","outQueue","opStack","tokenPos","previousOpStatckLength","securityLoopLvl2","securityLoopLvl1","opTop","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call"],"sourceRoot":""}