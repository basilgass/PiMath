{"version":3,"file":"pi.min.js","mappings":"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","sources":["webpack://pimath/./src/index.ts","webpack://pimath/./src/maths/algebra/equation.ts","webpack://pimath/./src/maths/algebra/linearSystem.ts","webpack://pimath/./src/maths/algebra/logicalset.ts","webpack://pimath/./src/maths/algebra/monom.ts","webpack://pimath/./src/maths/algebra/polynom.ts","webpack://pimath/./src/maths/algebra/rational.ts","webpack://pimath/./src/maths/algebra/study.ts","webpack://pimath/./src/maths/algebra/study/rationalStudy.ts","webpack://pimath/./src/maths/coefficients/fraction.ts","webpack://pimath/./src/maths/coefficients/nthRoot.ts","webpack://pimath/./src/maths/expressions/numexp.ts","webpack://pimath/./src/maths/expressions/polynomexp.ts","webpack://pimath/./src/maths/geometry/circle.ts","webpack://pimath/./src/maths/geometry/line.ts","webpack://pimath/./src/maths/geometry/point.ts","webpack://pimath/./src/maths/geometry/triangle.ts","webpack://pimath/./src/maths/geometry/vector.ts","webpack://pimath/./src/maths/numeric.ts","webpack://pimath/./src/maths/randomization/random.ts","webpack://pimath/./src/maths/randomization/randomCore.ts","webpack://pimath/./src/maths/randomization/rndFraction.ts","webpack://pimath/./src/maths/randomization/rndHelpers.ts","webpack://pimath/./src/maths/randomization/rndMonom.ts","webpack://pimath/./src/maths/randomization/rndPolynom.ts","webpack://pimath/./src/maths/shutingyard.ts","webpack://pimath/webpack/bootstrap","webpack://pimath/webpack/startup"],"sourcesContent":["import {Numeric} from \"./maths/numeric\";\r\nimport {NumExp} from \"./maths/expressions/numexp\";\r\nimport {Shutingyard} from \"./maths/shutingyard\";\r\nimport {Random} from \"./maths/randomization/random\";\r\nimport {Fraction} from \"./maths/coefficients/fraction\";\r\nimport {NthRoot} from \"./maths/coefficients/nthRoot\";\r\nimport {Monom} from \"./maths/algebra/monom\";\r\nimport {Polynom} from \"./maths/algebra/polynom\";\r\nimport {Equation} from \"./maths/algebra/equation\";\r\nimport {LinearSystem} from \"./maths/algebra/linearSystem\";\r\nimport {Rational} from \"./maths/algebra/rational\";\r\nimport {Logicalset} from \"./maths/algebra/logicalset\";\r\nimport {PolynomExpFactor, PolynomExpProduct} from \"./maths/expressions/polynomexp\";\r\nimport {Vector} from \"./maths/geometry/vector\";\r\nimport {Line} from \"./maths/geometry/line\";\r\nimport {Triangle} from \"./maths/geometry/triangle\";\r\nimport {Circle} from \"./maths/geometry/circle\";\r\nimport {Point} from \"./maths/geometry/point\";\r\n\r\n// Expose as global\r\nexport const PiMath = {\r\n    ShutingYard: Shutingyard,\r\n    Numeric: Numeric,\r\n    NumExp: NumExp,\r\n    Fraction: Fraction,\r\n    Root: NthRoot,\r\n    Monom: Monom,\r\n    Polynom: Polynom,\r\n    Equation: Equation,\r\n    LinearSystem: LinearSystem,\r\n    Rational: Rational,\r\n    Logicalset: Logicalset,\r\n    Random: Random,\r\n    PolynomExpFactor: PolynomExpFactor,\r\n    PolynomExpProduct: PolynomExpProduct,\r\n    Geometry: {\r\n        Vector: Vector,\r\n        Point: Point,\r\n        Line: Line,\r\n        Triangle: Triangle,\r\n        Circle: Circle\r\n    }\r\n};\r\n(<any>window).Pi = PiMath\r\n","import {Polynom} from \"./polynom\";\r\nimport {literalType, Monom} from \"./monom\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {NthRoot} from \"../coefficients/nthRoot\";\r\n\r\n/**\r\n * Equation is a class to manage equations...\r\n */\r\nexport interface ISolution {\r\n    tex: string,\r\n    value: number,\r\n    exact: unknown\r\n}\r\n\r\nexport enum PARTICULAR_SOLUTION {\r\n    real=\"\\\\mathbb{R}\",\r\n    varnothing=\"\\\\varnothing\"\r\n}\r\n\r\nexport class Equation {\r\n    private _polynom: Polynom;  // Used to solve the equation // TODO: remove the private value ?\r\n\r\n    // Undetermined texSolutions.\r\n    private _varnothing: string = PARTICULAR_SOLUTION.varnothing;\r\n    private _real: string = PARTICULAR_SOLUTION.real;\r\n\r\n    /**\r\n     * Create an Equation using two polynoms.\r\n     * Markdown *support* is cool\r\n     * @param equations\r\n     */\r\n    constructor(...equations: unknown[]) {\r\n        // Default equation\r\n        this._left = new Polynom().zero();\r\n        this._right = new Polynom().zero();\r\n        this._sign = '=';\r\n\r\n        if (equations.length === 1) {\r\n            if (equations[0] instanceof Equation) {\r\n                return equations[0].clone();\r\n            } else if (typeof equations[0] === 'string') {\r\n                this.parse(equations[0]);\r\n            }\r\n        } else if (equations.length === 2) {\r\n            if (equations[0] instanceof Polynom) {\r\n                this.left = equations[0].clone()\r\n            } else if (typeof equations[0] === 'string') {\r\n                this.left = new Polynom(equations[0])\r\n            }\r\n\r\n            if (equations[1] instanceof Polynom) {\r\n                this.right = equations[1].clone()\r\n            } else if (typeof equations[1] === 'string') {\r\n                this.right = new Polynom(equations[1])\r\n            }\r\n        } else {\r\n            // Return default empty equation\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private _left: Polynom;  // Left part of the equation\r\n\r\n    get left(): Polynom {\r\n        return this._left;\r\n    }\r\n\r\n    set left(value: Polynom) {\r\n        this._left = value;\r\n    }\r\n\r\n    private _right: Polynom; // Right part of the equation\r\n\r\n    get right(): Polynom {\r\n        return this._right;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n\r\n    set right(value: Polynom) {\r\n        this._right = value;\r\n    }\r\n\r\n    private _sign: string;   // Signe of the equation, by default =\r\n\r\n    get sign(): string {\r\n        return this._sign;\r\n    }\r\n\r\n    set sign(value: string) {\r\n        // Set the sign value as formatted.\r\n        this._sign = this._formatSign(value);\r\n    }\r\n\r\n    private _solutions: ISolution[]\r\n\r\n    // ------------------------------------------\r\n    get solutions(): ISolution[] {\r\n        return this._solutions\r\n    }\r\n\r\n    get isEquation() {\r\n        return true;\r\n    }\r\n\r\n    get solution(): string {\r\n        if (this._solutions.length === 1\r\n            &&\r\n            (\r\n                this._solutions[0].tex === this._real\r\n                || this._solutions[0].tex === this._varnothing\r\n                || this._solutions[0].tex.includes('\\\\left')\r\n            )\r\n        ) {\r\n            return `S = ${this._solutions[0]}`;\r\n        }\r\n        return `S = \\\\left{ ${this._solutions.map(x => x.tex).join(';')} \\\\right}`;\r\n    }\r\n\r\n    get isReal(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0].tex === this._real;\r\n    }\r\n\r\n    get isVarnothing(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0].tex === this._varnothing;\r\n    }\r\n\r\n    get signAsTex(): string {\r\n        if (this._sign === '>=' || this._sign === '=>' || this._sign === 'geq') {\r\n            return '\\\\geq';\r\n        }\r\n        if (this._sign === '<=' || this._sign === '=<' || this._sign === 'leq') {\r\n            return '\\\\leq';\r\n        }\r\n        return this._sign;\r\n    }\r\n\r\n    get tex(): string {\r\n        return `${this._left.tex}${this.signAsTex}${this._right.tex}`;\r\n    }\r\n\r\n    get display(): string {\r\n        return `${this._left.display}${this.signAsTex}${this._right.display}`;\r\n    }\r\n\r\n    get raw(): string {\r\n        return `${this._left.raw}${this.signAsTex}${this._right.raw}`;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        return [...new Set(this._right.variables.concat(this._left.variables))];\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    hasVariable = (letter: string): boolean => {\r\n        return this.variables.includes(letter)\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n\r\n    // -----------------------------------------------\r\n    private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n        degree: 2\r\n    };\r\n\r\n    get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n        return this._randomizeDefaults;\r\n    }\r\n\r\n    set randomizeDefaults(value) {\r\n        this._randomizeDefaults = value;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    parse = (equationString: string): Equation => {\r\n        let pStr: string[], strSign: string | false;\r\n        // Find the string separator\r\n        strSign = this._findSign(equationString);\r\n\r\n        if (strSign === false) {\r\n            console.error('The equation is not valid (no sign found)');\r\n            return;\r\n        }\r\n\r\n        // The StrSign is found\r\n        pStr = equationString.split(strSign);\r\n\r\n        return this.create(new Polynom(pStr[0]), new Polynom(pStr[1]), this._formatSign(strSign));\r\n    };\r\n\r\n    create = (left: Polynom, right: Polynom, sign?: string): Equation => {\r\n        this._left = left;\r\n        this._right = right;\r\n        this._sign = this._formatSign(sign);\r\n        return this;\r\n    };\r\n\r\n    clone = (): Equation => {\r\n        return new Equation().create(this._left.clone(), this._right.clone(), this._sign + '');\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n\r\n    randomize = (opts?: {}, sign?: string): Equation => {\r\n        // TODO: Generate equations randomly, using config.\r\n        return new Equation().create(new Polynom(), new Polynom(), sign);\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    /**\r\n     * Reorder will move all monoms containing a letter on the left, all the other on the right.\r\n     */\r\n    moveLeft = (): Equation => {\r\n        this._left = this._left.clone().subtract(this._right)\r\n        this._right.zero()\r\n        return this;\r\n    }\r\n\r\n    reorder = (allLeft?: boolean): Equation => {\r\n        // Move all monoms of degree greater than 0 to the left.\r\n        // and all zero degree monoms to the right.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n\r\n        if (allLeft) {\r\n            return this.moveLeft()\r\n        }\r\n        let mMove: Monom;\r\n        for (let m of this._left.monoms) {\r\n            if (m.degree().isZero()) {\r\n                mMove = m.clone();\r\n                this._left.subtract(mMove);\r\n                this._right.subtract(mMove);\r\n            }\r\n        }\r\n\r\n        // Reorder the left and right polynoms\r\n        this._left.reorder();\r\n        this._right.reorder();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiply by the lcm denominator and divide by the gcm numerators.\r\n     */\r\n    simplify = (): Equation => {\r\n        this.multiply(Numeric.lcm(...this._left.getDenominators(), ...this._right.getDenominators()));\r\n        this.divide(Numeric.gcd(...this._left.getNumerators(), ...this._right.getNumerators()));\r\n        return this;\r\n    }\r\n\r\n\r\n    // -----------------------------------------------\r\n    // Equations operations\r\n\r\n    /**\r\n     * Reorder the polynom to have only one letter on the left, the rest on the right.\r\n     * @param letter\r\n     */\r\n    isolate = (letter?: string): Equation | false => {\r\n        // Determine if we can isolate the variables.\r\n\r\n        // Both part of the equations must be of the first degree.\r\n        //TODO: handle equations of degree two or more ?\r\n        if (!this.degree(letter).isOne()) {\r\n            return false;\r\n        }\r\n\r\n        // Modify the equation to isolate the asked variable.\r\n        // TODO: must handle equations like 3xy+5y=4 => y = 4/(3x-5)\r\n        if (this.isMultiVariable()) {\r\n            return false;\r\n        }\r\n\r\n        // Isolate the letter.\r\n        let mMove: Monom, cMove: Fraction;\r\n        // Start by moving everything to the left.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n        for (let m of this._left.monoms) {\r\n            if (!m.hasLetter(letter)) {\r\n                mMove = m.clone();\r\n                this._left.add(mMove.clone().opposed());\r\n                this._right.add(mMove.clone().opposed());\r\n            }\r\n        }\r\n\r\n        // In theory, we should have only one item on the left.\r\n        if (this._left.length !== 1) {\r\n            return false;\r\n        }\r\n        cMove = this._left.monoms[0].coefficient.clone();\r\n        this._left.divide(cMove);\r\n        this._right.divide(cMove);\r\n        return this;\r\n    };\r\n\r\n    replaceBy = (letter: string, P: Polynom): Equation => {\r\n        this._left.replaceBy(letter, P)\r\n        this._right.replaceBy(letter, P)\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiple an equation by a fraction value.\r\n     * @param value\r\n     */\r\n    multiply = (value: unknown): Equation => {\r\n\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        // Multiply each part of the equation by the fraction\r\n        this._left.multiply(F);\r\n        this._right.multiply(F);\r\n\r\n        // The sign of the inequation must be changed.\r\n        if (this._sign !== '=' && F.sign() === -1) {\r\n            this._reverseSign();\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * divide an equation by a given value (transformed as a fraction)\r\n     *\r\n     * ```\r\n     * 8x+10=6x \\vert 2\r\n     * 4x+5=3x\r\n     * ```\r\n     *\r\n     * |>Alternatively with $3x-4$ maybe it's working ?\r\n     * $$\\frac{3x}{5}$$\r\n     *\r\n     * @param value\r\n     * @returns {Equation}\r\n     */\r\n    divide = (value: unknown): Equation => {\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        if (F.isZero()) {\r\n            return this;\r\n        } else {\r\n            return this.multiply(F.invert());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the degree of the equation\r\n     * @param letter\r\n     */\r\n    degree = (letter?: string): Fraction => {\r\n        return Fraction.max(this._left.degree(letter), this._right.degree(letter));\r\n    };\r\n\r\n    /**\r\n     * Determine if the equation contains more than one letter/variable.\r\n     */\r\n    isMultiVariable = (): boolean => {\r\n        return this._left.isMultiVariable || this._right.isMultiVariable;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        // @ts-ignore\r\n        return [...new Set([...this._left.letters(), ...this._right.letters()])];\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations helpers\r\n    // -----------------------------------------------\r\n\r\n    // -----------------------------------------------\r\n    solve = (): Equation => {\r\n        // Initialise the variables:\r\n        this._solutions = [];\r\n\r\n        // TODO: consolidate solving equations (inequations vs equations)\r\n        // TODO: work with not natural degrees ?\r\n        this._polynom = this._left.clone().subtract(this._right);\r\n\r\n        switch (this._polynom.degree().value) {\r\n            case 0:\r\n            case 1:\r\n                this._solveDegree1();\r\n                break;\r\n            case 2:\r\n                this._solveDegree2();\r\n                break;\r\n            default:\r\n                this._solveDegree3plus();\r\n        }\r\n\r\n        // cleanup the solutions.\r\n        this._solutions = Equation.makeSolutionsUnique(this._solutions)\r\n        return this;\r\n    };\r\n\r\n    static makeSolutionsUnique(solutions: ISolution[], sorted?: boolean):ISolution[] {\r\n        let solutionAsTex:string[] = [],\r\n            uniqueSolutions = solutions.filter(sol=>{\r\n                if(!solutionAsTex.includes(sol.tex)){\r\n                    solutionAsTex.push(sol.tex)\r\n                    return true\r\n                }else{\r\n                    return false\r\n                }\r\n            })\r\n\r\n        if(sorted===true){\r\n            uniqueSolutions.sort((a, b)=>a.value-b.value)\r\n        }\r\n        return uniqueSolutions\r\n    }\r\n\r\n    test = (values: literalType): Boolean => {\r\n        return this.left.evaluate(values).isEqual(this.right.evaluate(values))\r\n    }\r\n\r\n    private _findSign = (equationString: string): string | false => {\r\n        let strSign: string = '';\r\n\r\n        if (equationString.includes('geq')) {\r\n            return (equationString.includes('\\\\geq')) ? '\\\\geq' : 'geq';\r\n        } else if (equationString.includes('leq')) {\r\n            return (equationString.includes('\\\\leq')) ? '\\\\leq' : 'leq';\r\n        } else if (equationString.includes('>=')) {\r\n            return '>=';\r\n        } else if (equationString.includes('=>')) {\r\n            return '=>';\r\n        } else if (equationString.includes('>')) {\r\n            return '>';\r\n        } else if (equationString.includes('<=')) {\r\n            return '<=';\r\n        } else if (equationString.includes('=<')) {\r\n            return '=<';\r\n        } else if (equationString.includes('<')) {\r\n            return '<';\r\n        } else if (equationString.includes('=')) {\r\n            return '='\r\n        }\r\n        if (strSign === '') {\r\n            console.log('Equation: parse string : sign not found');\r\n            return false;\r\n        }\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Equations solving algorithms\r\n\r\n    private _formatSign = (signStr: string): string => {\r\n        if (signStr === undefined) {\r\n            return '=';\r\n        }\r\n\r\n        if (signStr.includes('geq')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>=')) {\r\n            return '>=';\r\n        } else if (signStr.includes('=>')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>')) {\r\n            return '>';\r\n        } else if (signStr.includes('leq')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<=')) {\r\n            return '<=';\r\n        } else if (signStr.includes('=<')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<')) {\r\n            return '<';\r\n        } else {\r\n            return '='\r\n        }\r\n    };\r\n\r\n    private _reverseSign = (): Equation => {\r\n        if (this._sign === '=') {\r\n            return this;\r\n        }\r\n\r\n        if (this._sign.includes('<')) {\r\n            this._sign.replace('<', '>');\r\n            return this;\r\n        }\r\n        if (this._sign.includes('>')) {\r\n            this._sign.replace('>', '<');\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    private isGreater = (): boolean => {\r\n        if (this._sign.indexOf('>') !== -1) {\r\n            return true;\r\n        }\r\n        return this._sign.indexOf('geq') !== -1;\r\n\r\n    };\r\n\r\n    private isStrictEqual = (): boolean => {\r\n        return this._sign === '=';\r\n    };\r\n\r\n    private isAlsoEqual = (): boolean => {\r\n        if (this._sign.indexOf('=') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('geq') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('leq') !== -1) {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    private _solveDegree1 = (letter?: string): ISolution[] => {\r\n        const m1 = this._polynom.monomByDegree(1, letter).coefficient,\r\n            m0 = this._polynom.monomByDegree(0, letter).coefficient,\r\n            v = m0.clone().opposed().divide(m1);\r\n        let s: string;\r\n\r\n        if (this.isStrictEqual()) {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0) {\r\n                    this._solutions = [{\r\n                        tex: this._real,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                } else {\r\n                    this._solutions = [{\r\n                        tex: this._varnothing,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                }\r\n            } else {\r\n                this._solutions = [{\r\n                    tex: v.tex,\r\n                    value: v.value,\r\n                    exact: v\r\n                }]\r\n            }\r\n        }\r\n        else {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0 && this.isAlsoEqual()) {\r\n                    s = '\\\\mathbb{R}';\r\n                } else {\r\n                    if (m0.value > 0) {\r\n                        s = this.isGreater() ? this._real : this._varnothing;\r\n                    } else {\r\n                        s = !this.isGreater() ? this._real : this._varnothing;\r\n                    }\r\n                }\r\n            } else {\r\n                // Must handle the case if the m1 monom is negative.\r\n                if ((this.isGreater() && m1.sign() === 1) || (!this.isGreater() && m1.sign() === -1)) {\r\n                    s = `\\\\left${this.isAlsoEqual() ? '[' : ']'}${v.tex};+\\\\infty\\\\right[`;\r\n                } else {\r\n                    s = `\\\\left]-\\\\infty;${v.tex} \\\\right${this.isAlsoEqual() ? ']' : '['}`;\r\n                }\r\n            }\r\n            this._solutions = [{\r\n                tex: s,\r\n                value: NaN,\r\n                exact: false\r\n            }];\r\n        }\r\n\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree2 = (letter?: string): ISolution[] => {\r\n        let aF = this._polynom.monomByDegree(2, letter).coefficient,\r\n            bF = this._polynom.monomByDegree(1, letter).coefficient,\r\n            cF = this._polynom.monomByDegree(0, letter).coefficient,\r\n            delta: number, nthDelta: NthRoot,\r\n            lcm = Numeric.lcm(aF.denominator, bF.denominator, cF.denominator),\r\n            a = aF.multiply(lcm).value,\r\n            b = bF.multiply(lcm).value,\r\n            c = cF.multiply(lcm).value,\r\n            realX1: number, realX2: number,\r\n            sX1: string, sX2: string;\r\n\r\n        delta = b * b - 4 * a * c;\r\n\r\n        if (delta > 0) {\r\n            realX1 = (-b - Math.sqrt(delta)) / (2 * a);\r\n            realX2 = (-b + Math.sqrt(delta)) / (2 * a);\r\n\r\n            if (delta > 1.0e5) {\r\n                // The delta is too big to be parsed !\r\n                this._solutions = [\r\n                    {\r\n                        tex: ((-b - Math.sqrt(delta)) / (2 * a)).toFixed(5),\r\n                        value: realX1,\r\n                        exact: false\r\n                    },\r\n                    {\r\n                        tex: ((-b + Math.sqrt(delta)) / (2 * a)).toFixed(5),\r\n                        value: realX2,\r\n                        exact: false\r\n                    }\r\n                ]\r\n            } else {\r\n                nthDelta = new NthRoot(delta).reduce();\r\n                if (nthDelta.hasRadical()) {\r\n                    // -b +- coeff\\sqrt{radical}\r\n                    // -------------------------\r\n                    //           2a\r\n                    let gcd = Numeric.gcd(b, 2 * a, nthDelta.coefficient),\r\n                        am = a/gcd, bm = b/gcd\r\n                    nthDelta.coefficient = nthDelta.coefficient / gcd;\r\n\r\n                    if(a<0){\r\n                        am = -am\r\n                        bm = -bm\r\n                    }\r\n\r\n                    let tex1 = \"\", tex2 = \"\"\r\n\r\n                    tex1 = `${bm!==0?((-bm) + ' - '):''}${nthDelta.tex}`\r\n                    tex2 = `${bm!==0?((-bm) + ' + '):''}${nthDelta.tex}`\r\n\r\n                    if(am!==1){\r\n                        tex1 = `\\\\frac{ ${tex1} }{ ${2*am} }`\r\n                        tex2 = `\\\\frac{ ${tex2} }{ ${2*am} }`\r\n                    }\r\n\r\n                    this._solutions = [\r\n                        {\r\n                            tex: tex1, value: realX1, exact: false\r\n                        },\r\n                        {\r\n                            tex: tex2, value: realX2, exact: false\r\n                        },\r\n                    ]\r\n\r\n\r\n                    // if (b !== 0) {\r\n                    //     if (2 * a / gcd === 1) {\r\n                    //         this._solutions = [\r\n                    //             {\r\n                    //                 tex: `${-b / gcd} - ${nthDelta.tex}`,\r\n                    //                 value: realX1,\r\n                    //                 exact: false // TODO: implement exact value with nthroot\r\n                    //             },\r\n                    //             {\r\n                    //                 tex: `${-b / gcd} + ${nthDelta.tex}`,\r\n                    //                 value: realX2,\r\n                    //                 exact: false\r\n                    //             },\r\n                    //\r\n                    //         ]\r\n                    //     } else {\r\n                    //         this._solutions = [\r\n                    //             {\r\n                    //                 tex: `\\\\frac{${-b / gcd} - ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                    //                 value: realX1,\r\n                    //                 exact: false\r\n                    //             },\r\n                    //             {\r\n                    //                 tex: `\\\\frac{${-b / gcd} + ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                    //                 value: realX2,\r\n                    //                 exact: false\r\n                    //             },\r\n                    //         ]\r\n                    //     }\r\n                    // } else {\r\n                    //     if (2 * a / gcd === 1) {\r\n                    //         this._solutions = [\r\n                    //             {\r\n                    //                 tex: `- ${nthDelta.tex}`,\r\n                    //                 value: realX1,\r\n                    //                 exact: false\r\n                    //             },\r\n                    //             {\r\n                    //                 tex: `${nthDelta.tex}`,\r\n                    //                 value: realX2,\r\n                    //                 exact: false\r\n                    //             },\r\n                    //         ]\r\n                    //     } else {\r\n                    //         this._solutions = [\r\n                    //             {\r\n                    //                 tex: `\\\\frac{- ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                    //                 value: realX1,\r\n                    //                 exact: false\r\n                    //             },\r\n                    //             {\r\n                    //                 tex: `\\\\frac{${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                    //                 value: realX2,\r\n                    //                 exact: false\r\n                    //             },\r\n                    //         ]\r\n                    //     }\r\n                    // }\r\n                } else {\r\n                    // -b +- d / 2a\r\n                    const S1 = new Fraction(-b - nthDelta.coefficient, 2 * a).reduce(),\r\n                        S2 = new Fraction(-b + nthDelta.coefficient, 2 * a).reduce()\r\n                    this._solutions = [\r\n                        {\r\n                            tex: S1.frac,\r\n                            value: realX1,\r\n                            exact: S1\r\n                        },\r\n                        {\r\n                            tex: S2.frac,\r\n                            value: realX2,\r\n                            exact: S2\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n\r\n        } else if (delta === 0) {\r\n            const sol = new Fraction(-b, 2 * a).reduce()\r\n            this._solutions = [{\r\n                tex: sol.frac,\r\n                value: sol.value,\r\n                exact: sol\r\n            }];\r\n        } else {\r\n            this._solutions = [{\r\n                tex: this._varnothing,\r\n                value: NaN,\r\n                exact: false\r\n            }];\r\n        }\r\n\r\n        // Handle now the inequations.\r\n        if (!this.isStrictEqual()) {\r\n            if (this._solutions.length === 2) {\r\n                sX1 = (realX1 < realX2) ? this._solutions[0].tex : this._solutions[1].tex;\r\n                sX2 = (realX1 < realX2) ? this._solutions[1].tex : this._solutions[0].tex;\r\n\r\n                if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                    this._solutions = [{\r\n                        tex: `\\\\left]-\\\\infty ; ${sX1}\\\\right${this.isAlsoEqual() ? ']' : '['} \\\\cup \\\\left${this.isAlsoEqual() ? '[' : ']'}${sX2};+\\\\infty\\\\right[`,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }\r\n                    ];\r\n                } else {\r\n                    this._solutions = [{\r\n                        tex: `\\\\left${this.isAlsoEqual() ? '[' : ']'}${sX1} ; ${sX2}\\\\right${this.isAlsoEqual() ? ']' : '['}`,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }]\r\n                }\r\n            } else if (this._solutions.length === 1 && this._solutions[0].tex !== this._varnothing) {\r\n                if (!this.isAlsoEqual()) {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [{\r\n                            tex: `\\\\left]-\\\\infty ; ${this._solutions[0].tex}\\\\right[ \\\\cup \\\\left]${this._solutions[0].tex};+\\\\infty\\\\right[`,\r\n                            value: NaN,\r\n                            exact: false\r\n                        }\r\n                        ];\r\n                    } else {\r\n                        this._solutions = [{\r\n                            tex: this._varnothing,\r\n                            value: NaN,\r\n                            exact: false\r\n                        }];\r\n                    }\r\n                } else {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [{\r\n                            tex: this._real,\r\n                            value: NaN,\r\n                            exact: false\r\n                        }];\r\n                    } else {\r\n                        // this._texSolutions = [ this._texSolutions[0] ];\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.isGreater()) {\r\n                    this._solutions = [{\r\n                        tex: aF.sign() === 1 ? this._real : this._varnothing,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                } else {\r\n                    this._solutions = [{\r\n                        tex: aF.sign() === -1 ? this._real : this._varnothing,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                }\r\n            }\r\n        }\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree3plus = (letter?: string): ISolution[] => {\r\n        // Push everything to the left\r\n        // factorize\r\n        // solve each factors.\r\n        let equ = this.clone().moveLeft()\r\n        equ.left.factorize()\r\n\r\n        this._solutions = []\r\n\r\n        equ.left.factors.forEach(factor=>{\r\n            if(factor.degree(letter).leq(2)) {\r\n                let factorAsEquation = new Equation(factor, 0)\r\n                factorAsEquation.solve()\r\n                factorAsEquation.solutions.forEach(solution => {\r\n                    this._solutions.push(solution)\r\n                })\r\n            }else{\r\n                console.log(factor.tex, ': cannot actually get the solution of this equation')\r\n            }\r\n        })\r\n\r\n        // TODO: check equation resolution for more than degree 2\r\n        // this._solutions = [{tex: 'solve x - not yet handled', value: NaN, exact: false}];  // ESLint remove system :(\r\n        return this._solutions;\r\n    };\r\n}","import {Equation} from \"./equation\";\r\nimport {Polynom} from \"./polynom\";\r\nimport {Monom} from \"./monom\";\r\nimport {Random} from \"../randomization/random\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\n// TODO: Must check and rework\r\nexport class LinearSystem {\r\n    private _solutions: { [letter: string]: { value: Fraction, isReal: boolean, isVarnothing: boolean } };\r\n    private _resolutionSteps: LinearSystem[];\r\n    private _equations: Equation[];\r\n    private _letters: string[];\r\n\r\n    constructor(...equationStrings: string[]) {\r\n        this._equations = [];\r\n        this._letters = 'xy'.split('');\r\n\r\n        if (equationStrings !== undefined && equationStrings.length > 0) {\r\n            this.parse(...equationStrings);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equations(): Equation[] {\r\n        return this._equations;\r\n    }\r\n\r\n    set equations(value) {\r\n        this._equations = value;\r\n    }\r\n\r\n    get letters(): string {\r\n        return this._letters.join('')\r\n    }\r\n\r\n    set letters(value: string) {\r\n        this._letters = value.split('');\r\n    }\r\n\r\n    get isSolvable(): boolean {\r\n        let V = this.variables;\r\n\r\n        // TODO: in some case, it is possible to resolve systems if there isn't the isSame number of vars and equations\r\n        if (V.length !== this._equations.length) {\r\n            return false;\r\n        }\r\n\r\n        //TODO: Must check if two equations isn't a linear combination of the others ?\r\n\r\n        return true;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n        for (let E of this._equations) {\r\n            V = V.concat(E.variables);\r\n        }\r\n        return [...new Set(V)].sort();\r\n    }\r\n\r\n    get tex(): string {\r\n        // Build the array of values.\r\n        // Reorder\r\n        // This clone the system :!!!\r\n        //TODO: Avoid cloning this linear system\r\n        let LS = this.clone().reorder(),\r\n            letters = LS.variables,\r\n            equStr: string[],\r\n            equArray: string[] = [],\r\n            m: Monom;\r\n\r\n        // TODO: Manage tex output of linear equations\r\n        for (let equ of LS.equations) {\r\n            equStr = [];\r\n            for (let L of letters) {\r\n                m = equ.left.monomByLetter(L);\r\n\r\n                if (equStr.length === 0) {\r\n                    equStr.push(m.isZero() ? '' : m.tex);\r\n                } else {\r\n                    equStr.push(m.isZero() ? '' : ((m.coefficient.sign() === 1) ? '+' : '') + m.tex);\r\n                }\r\n            }\r\n\r\n            // Add the equal sign\r\n            equStr.push('=');\r\n\r\n            // Add the right hand part of the equation (should be only a number, because it has been reordered)\r\n            equStr.push(equ.right.tex);\r\n\r\n            // Add to the list.\r\n            equArray.push(equStr.join('&'));\r\n        }\r\n\r\n\r\n        return `\\\\left\\\\{\\\\begin{array}{${\"r\".repeat(letters.length)}cl}${equArray.join('\\\\\\\\\\ ')}\\\\end{array}\\\\right.`;\r\n        //return `\\\\left\\\\{\\\\begin{array}{rrrcl}${this._equations.map(equ => `${equ.tex}`).join('\\\\\\\\\\ \\n')}\\\\end{array}\\\\right.`;\r\n    }\r\n\r\n    get solution(): string {\r\n        let tex: string[] = [];\r\n\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n\r\n        for (let letter in this._solutions) {\r\n            if (this._solutions[letter].isReal) {\r\n                console.log(`Undetermined (letter ${letter})`);\r\n                return;\r\n            }\r\n            if (this._solutions[letter].isVarnothing) {\r\n                console.log(`Undefined (letter ${letter})`);\r\n                return;\r\n            }\r\n\r\n            tex.push(this._solutions[letter].value.frac);\r\n        }\r\n        return `(${tex.join(';')})`;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...equations: unknown[]): LinearSystem => {\r\n        this._equations = equations.map(value => new Equation(value));\r\n        this._findLetters();\r\n        return this;\r\n    };\r\n\r\n    setCoefficient = (...coefficients: string[]): LinearSystem => {\r\n        // Reset the equations list\r\n        this._equations = [];\r\n\r\n        let i = 0;\r\n        while (i < coefficients.length - this._letters.length) {\r\n            let left = new Polynom().parse(this._letters.join(''), ...coefficients.slice(i, i + this._letters.length)),\r\n                right = new Polynom(coefficients[i + this._letters.length].toString()),\r\n                equ = new Equation().create(left, right);\r\n            this._equations.push(equ.clone());\r\n\r\n            i = i + this._letters.length + 1;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): LinearSystem => {\r\n        return new LinearSystem().parse(...this._equations.map(equ => equ.clone()));\r\n    };\r\n\r\n    setLetters = (...letters: string[]): LinearSystem => {\r\n        this._letters = letters;\r\n        return this\r\n    }\r\n    private _findLetters = (): LinearSystem => {\r\n        // Find all letters used.\r\n        let variables = new Set();\r\n\r\n        for (let equ of this._equations) {\r\n            variables = new Set([...variables, ...equ.variables]);\r\n        }\r\n\r\n        // TODO: How to transform (Set of string) to string[]\r\n        // @ts-ignore\r\n        this._letters = [...variables];\r\n        return this;\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n    // -----------------------------------------------\r\n    generate = (...solutions: Fraction[] | number[]): LinearSystem => {\r\n        let solutionsF: Fraction[] = [];\r\n\r\n        // Convert the numbers to fractions if necessary\r\n        for (let s of solutions) {\r\n            if (typeof s === \"number\") {\r\n                solutionsF.push(new Fraction(s.toString()));\r\n            } else {\r\n                solutionsF.push(s.clone());\r\n            }\r\n        }\r\n\r\n        // Create the equations and make sure they are not linear combined.\r\n        this._equations = [];\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            this._equations.push(this._generateOneEquation(...solutionsF));\r\n        }\r\n        return this;\r\n    };\r\n    private _generateOneEquation = (...solutions: Fraction[]): Equation => {\r\n        let coeff: number[] = [], leftValue: Fraction = new Fraction().zero(),\r\n            letters: string[] = ['x', 'y', 'z', 't', 'u', 'v', 'w', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],\r\n            equString: string = '', equ: Equation;\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            coeff.push(Random.numberSym(5));\r\n            leftValue.add(solutions[i].clone().multiply(coeff[i]));\r\n            equString += `${(coeff[i] < 0) ? coeff[i] : '+' + coeff[i]}${letters[i]}`\r\n        }\r\n\r\n        // LeftValue contains the left part oof the equation - and is then the isSame as the right part.\r\n        // It might be a Fraction.\r\n\r\n        // Must check if it's not a linear combination\r\n        equ = new Equation(`${equString}=${leftValue.display}`);\r\n        if (equ.right.monoms[0].coefficient.denominator != 1) {\r\n            equ.multiply(new Fraction(equ.right.monoms[0].coefficient.denominator, 1));\r\n        }\r\n        if (this._checkIfLinerCombination(equ)) {\r\n            return equ;\r\n        } else {\r\n            return this._generateOneEquation(...solutions);\r\n        }\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    private _linearReduction(eq1: Equation, eq2: Equation, letter: string): Equation {\r\n        // TODO: handle other signs for equations ?\r\n        // Get the monom for the particular letter.\r\n        let c1 = eq1.left.monomByDegree(1, letter).coefficient.clone(),\r\n            c2 = eq2.left.monomByDegree(1, letter).coefficient.clone().opposed();\r\n\r\n        return this.mergeEquations(eq1, eq2, c2, c1);\r\n    }\r\n\r\n    mergeEquations = (eq1: Equation, eq2: Equation, factor1: unknown, factor2: unknown): Equation => {\r\n        // Set and clone the equations.\r\n\r\n        let eq1multiplied = eq1.clone().multiply(new Fraction(factor1)),\r\n            eq2multiplied = eq2.clone().multiply(new Fraction(factor2));\r\n\r\n        // Add both equations together.\r\n        eq1multiplied.left.add(eq2multiplied.left);\r\n        eq1multiplied.right.add(eq2multiplied.right);\r\n\r\n        return eq1multiplied;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Solvers algorithm\r\n    // ------------------------------------------\r\n    reorder = (): LinearSystem => {\r\n        for (let E of this._equations) {\r\n            E.reorder();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    solve = (): LinearSystem => {\r\n        // Solve it by linear\r\n        this._solutions = {};\r\n        this._resolutionSteps = [];\r\n\r\n        // Reorder all equations.\r\n        this.reorder();\r\n\r\n        // Get all variables in the linear system\r\n        let V = this.variables.sort();\r\n\r\n        for (let letter of V) {\r\n            this._solutions[letter] = this._solveOneLetter(letter, V)\r\n        }\r\n\r\n        // TODO: LinearSystem - solve: optimization and handle undetermined and undefined systems.\r\n        return this;\r\n    };\r\n\r\n    private _checkIfLinerCombination = (equ: Equation): boolean => {\r\n\r\n        return true;\r\n    };\r\n\r\n    private _solveOneLetter(letter: string, V: string[]): { value: Fraction, isReal: boolean, isVarnothing: boolean } {\r\n        // list of equations.\r\n        let LE: Equation[] = this.clone().equations,\r\n            reducedEquations: Equation[] = [];\r\n\r\n        // Reduce the equations.\r\n        // Do it as long as there is more than one step, but no more than the number of equations.\r\n        for (let L of V) {\r\n            // remove the setLetter from all equations using linear combinations\r\n            if (L === letter) {\r\n                continue;\r\n            }\r\n\r\n            // Linear reduction.\r\n            // TODO: Search for better association\r\n            for (let i = 0; i < LE.length - 1; i++) {\r\n                reducedEquations.push(this._linearReduction(LE[i], LE[i + 1], L));\r\n            }\r\n\r\n            // Keep track of each steps.\r\n            this._resolutionSteps.push(new LinearSystem().parse(...reducedEquations));\r\n\r\n            // Set the list of equations to the new version.\r\n            LE = this._resolutionSteps[this._resolutionSteps.length - 1].clone().equations;\r\n\r\n            // Reset the stack\r\n            reducedEquations = [];\r\n        }\r\n\r\n        // Solve the equations\r\n        let E = this._resolutionSteps[this._resolutionSteps.length - 1].equations[0];\r\n        E.solve();\r\n\r\n        return {\r\n            value: new Fraction(E.solutions[0].value),\r\n            isReal: E.isReal,\r\n            isVarnothing: E.isVarnothing\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Helpers\r\n    // ------------------------------------------\r\n    log = (): string => {\r\n        let str: string = '';\r\n\r\n        for (let E of this._equations) {\r\n            str += `${E.tex}\\\\n}`;\r\n        }\r\n\r\n        return str;\r\n    };\r\n}\r\n","/**\r\n * Polynom module contains everything necessary to handle polynoms.\r\n * @module Logicalset\r\n */\r\n\r\nimport {Shutingyard, ShutingyardMode} from '../shutingyard';\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n */\r\n    export class Logicalset {\r\n        private _rawString: string;\r\n        private _rpn: { token: string, tokenType: string }[]\r\n\r\n        /**\r\n         *\r\n         * @param {string} value (optional) Default polynom to parse on class creation\r\n         */\r\n        constructor(value: string) {\r\n            this._rawString = value\r\n            this.parse(value)\r\n            return this;\r\n        }\r\n\r\n        get isLogicalset() {\r\n            return true;\r\n        };\r\n\r\n        private parse = (value: string): Logicalset => {\r\n            // TODO: Must format the value string to convert some items...\r\n\r\n            // Parse the updated value to the shutingyard algorithm\r\n            this._rpn = new Shutingyard(ShutingyardMode.SET).parse(value).rpn;\r\n\r\n            return this;\r\n        }\r\n\r\n        evaluate(tokenSets: { [key: string]: unknown[] }, reference?: unknown[]): unknown[] {\r\n            let varStack: (Set<unknown>)[] = []\r\n\r\n            let referenceSet: Set<unknown>\r\n            if (reference === undefined) {\r\n                referenceSet = new Set()\r\n                for (let key in tokenSets) {\r\n                    referenceSet = new Set([...referenceSet, ...tokenSets[key]])\r\n                }\r\n            } else {\r\n                referenceSet = new Set(reference)\r\n            }\r\n\r\n            for (let token of this._rpn) {\r\n                if (token.tokenType === 'variable') {\r\n                    // The variable has no token - assume it's empty.\r\n                    if (tokenSets[token.token] === undefined) {\r\n                        varStack.push(new Set())\r\n                    } else {\r\n                        varStack.push(new Set(tokenSets[token.token]));\r\n                    }\r\n\r\n                } else {\r\n                    switch (token.token) {\r\n                        case '&':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                varStack.push(new Set([...first].filter(x => second.has(x))))\r\n                            }\r\n                            break\r\n                        case '|':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n                                varStack.push(new Set([...first, ...second]))\r\n                            }\r\n                            break\r\n                        case '-':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n                                varStack.push(new Set([...first].filter(x => !second.has(x))))\r\n                            }\r\n                            break\r\n                        case '!':\r\n                            if (varStack.length >= 1) {\r\n                                let first = varStack.pop()\r\n\r\n                                varStack.push(new Set([...referenceSet].filter(x => !first.has(x))))\r\n                            }\r\n                            break\r\n                    }\r\n                }\r\n            }\r\n\r\n            return [...varStack[0]].sort();\r\n        }\r\n\r\n        vennAB(): any[] {\r\n            return this.evaluate({\r\n                    A: ['A', 'AB'],\r\n                    B: ['B', 'AB']\r\n                },\r\n                ['A', 'B', 'AB', 'E']\r\n            )\r\n        }\r\n\r\n        vennABC(): any[] {\r\n            return this.evaluate({\r\n                    A: ['A', 'AB', 'AC', 'ABC'],\r\n                    B: ['B', 'AB', 'BC', 'ABC'],\r\n                    C: ['C', 'AC', 'BC', 'ABC']\r\n                },\r\n                ['A', 'B', 'C', 'AB', 'AC', 'BC', 'E']\r\n            )\r\n        }\r\n\r\n        get rpn(): { token: string, tokenType: string }[] {\r\n            return this._rpn\r\n        }\r\n\r\n        get tex(): string {\r\n            let varStack: { token: string, tokenType: string } [] = []\r\n\r\n            for (let token of this._rpn) {\r\n                if (token.tokenType === 'variable') {\r\n                    varStack.push(token);\r\n                } else {\r\n                    switch (token.token) {\r\n                        case '&':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\cap ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '|':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\cup ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '-':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\setminus ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '!':\r\n                            if (varStack.length >= 1) {\r\n                                let first = varStack.pop()\r\n                                varStack.push({token: `\\\\overline{ ${first.token} }`, tokenType: 'variable'})\r\n                            }\r\n                            break\r\n                    }\r\n                }\r\n            }\r\n\r\n            return varStack[0].token\r\n        }\r\n    }","/***\r\n * Monom class\r\n */\r\nimport {Numeric} from \"../numeric\";\r\nimport {Shutingyard, ShutingyardType, Token} from \"../shutingyard\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\nexport type literalType = {\r\n    [Key: string]: Fraction\r\n}\r\n\r\nexport class Monom {\r\n    private _coefficient: Fraction;\r\n    private _literal: literalType;\r\n\r\n    /**\r\n     * Create a Monom\r\n     * Defined as \\\\(k \\\\cdot x^{n}\\\\), where \\\\( k,n \\in \\\\mathbb{Q}\\\\).\r\n     * Examples: \\\\(3x^2\\\\) or \\\\(3/5x^2\\\\)\r\n     * @param value (optional) string The value that should be parse. Can be a Monom, a Fraction, a string or a number. If nothing is provided, it will return the trivial monom (0).\r\n     */\r\n    constructor(value?: unknown) {\r\n        this.zero();\r\n\r\n        if (value !== undefined) {\r\n            // A string is given - try to parse the value.\r\n            this.parse(value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    /**\r\n     * Get the coefficient \\\\(k\\\\) of the Monom \\\\(k\\\\cdot x^{n}\\\\)\r\n     * @returns {Fraction}\r\n     */\r\n    get coefficient(): Fraction {\r\n        return this._coefficient;\r\n    }\r\n\r\n    /**\r\n     * Set the coefficient \\\\(k\\\\) value of the monom\r\n     * @param {Fraction | number | string} F\r\n     */\r\n    set coefficient(F: Fraction | number | string) {\r\n        this._coefficient = new Fraction(F);\r\n    }\r\n\r\n    /**\r\n     * Get the literal part of \\\\(x^{n_1}y^{n_2}\\\\) as dictionary \\\\[\\\\begin{array}{ll}x&=n_1\\\\\\\\y&=n_2\\\\end{array}\\\\]\r\n     * @returns {literalType}\r\n     */\r\n    get literal(): literalType {\r\n        return this._literal;\r\n    }\r\n\r\n    /**\r\n     * Get the literal square roots of the Monom.\r\n     * TODO: remove this getter ? Is it used and is it correct ?\r\n     * @returns {literalType}\r\n     */\r\n    get literalSqrt(): literalType {\r\n        if (this.isLiteralSquare()) {\r\n            let L: literalType = {}\r\n            for (let key in this._literal) {\r\n                L[key] = this._literal[key].clone().sqrt()\r\n            }\r\n            return L;\r\n        } else {\r\n            return this._literal;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom. Must be a dictionary {x: Fraction, y: Fraction, ...}\r\n     * @param {literalType} L\r\n     */\r\n    set literal(L: literalType) {\r\n        this._literal = L;\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom from a string\r\n     * @param inputStr  String like x^2y^3\r\n     */\r\n    set literalStr(inputStr: string) {\r\n        // TODO : parse using shutingyard tree !\r\n\r\n        // Match all x^n\r\n        for (const v of [...inputStr.matchAll(/([a-z])\\^([+-]?[0-9]+)/g)]) {\r\n            // Create the default letter entry if necessary.\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = new Fraction().zero();\r\n            }\r\n\r\n            // Add the new value.\r\n            // TODO: actually, it adds only numeric value\r\n            this._literal[v[1]].add(+v[2]);\r\n        }\r\n\r\n        // Match all x\r\n        for (const v of [...inputStr.matchAll(/([a-z](?!\\^))/g)]) {\r\n            // Match all single letters\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = new Fraction().zero();\r\n            }\r\n\r\n            // Add one to the value.\r\n            this._literal[v[1]].add(1)\r\n        }\r\n    }\r\n\r\n    // Getter helpers.\r\n    /**\r\n     * Get the variables letters\r\n     */\r\n    get variables(): string[] {\r\n        let M = this.clone().clean();\r\n        return Object.keys(M.literal)\r\n    }\r\n\r\n    // Display getter\r\n    /**\r\n     * This display getter is to be used in the polynom display getter\r\n     */\r\n    get display(): string {\r\n        let L: string = '',\r\n            letters = Object.keys(this._literal).sort()\r\n        for (let letter of letters) {\r\n            if (this._literal[letter].isNotZero()) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter].isNotEqual(1)) {\r\n                    L += `^(${this._literal[letter].display})`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.display}`;\r\n            } else {\r\n                return '';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.display}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    get dividers(): Monom[] {\r\n        // Decompose only if the coefficient is a natural number\r\n        if (!this.coefficient.isRelative()) {\r\n            return [this.clone()]\r\n        }\r\n\r\n\r\n        // Decompose only if the power values are natural numbers.\r\n        if (this.hasFractionCoefficient()) {\r\n            return [this.clone()]\r\n        }\r\n\r\n        // Security : do not do this if greater than 10000\r\n        if (this.coefficient.numerator > 1000000) {\r\n            return [this.clone()]\r\n        }\r\n\r\n        const dividers = Numeric.dividers(Math.abs(this.coefficient.numerator))\r\n\r\n        // Decompose the literals parts.\r\n        let literals: literalType[] = [];\r\n        for (let L in this.literal) {\r\n            // L is the letter.\r\n            literals = this._getLiteralDividers(literals, L)\r\n        }\r\n\r\n        const monomDividers: Monom[] = [];\r\n        if (literals.length > 0 && dividers.length > 0) {\r\n            for (let N of dividers) {\r\n                for (let L of literals) {\r\n                    let M = new Monom();\r\n                    M.coefficient = new Fraction(N)\r\n                    M.literal = L\r\n                    monomDividers.push(M)\r\n                }\r\n            }\r\n        } else if (dividers.length === 0) {\r\n            for (let L of literals) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction().one()\r\n                M.literal = L\r\n                monomDividers.push(M)\r\n            }\r\n        } else {\r\n            for (let N of dividers) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction(N)\r\n                monomDividers.push(M)\r\n            }\r\n        }\r\n\r\n        return monomDividers.length === 0 ? [new Monom().one()] : monomDividers;\r\n    }\r\n\r\n    private _getLiteralDividers(arr: literalType[], letter: string): literalType[] {\r\n        let tmpList: { [key: string]: Fraction }[] = [];\r\n\r\n        // Be default, this.literal[letter] should be a rational number.\r\n        for (let d = 0; d <= this.literal[letter].value; d++) {\r\n            if (arr.length === 0) {\r\n                let litt: literalType = {}\r\n                litt[letter] = new Fraction(d)\r\n                tmpList.push(litt)\r\n            } else {\r\n                for (let item of arr) {\r\n                    let litt: literalType = {}\r\n                    for (let currentLetter in item) {\r\n                        litt[currentLetter] = item[currentLetter]\r\n                    }\r\n                    litt[letter] = new Fraction(d)\r\n                    tmpList.push(litt)\r\n                }\r\n            }\r\n        }\r\n        return tmpList;\r\n    }\r\n\r\n    /**\r\n     * Display the monom, forcing the '+' sign to appear\r\n     */\r\n    get displayWithSign(): string {\r\n        let d: String = this.display;\r\n        return (d[0] !== '-' ? '+' : '') + d;\r\n    }\r\n\r\n    get texWithSign(): string {\r\n        if (this.coefficient.isStrictlyPositive()) {\r\n            return '+' + this.tex\r\n        }\r\n\r\n        return this.tex\r\n    }\r\n\r\n    get plotFunction(): string {\r\n\r\n        let L: string = '',\r\n            letters = Object.keys(this._literal).sort()\r\n\r\n        for (let letter of letters) {\r\n            if (this._literal[letter].isNotZero()) {\r\n                L += (L===''?\"\":\"*\") + `${letter}`\r\n                if (this._literal[letter].isNotEqual(1)) {\r\n                    L += `^(${this._literal[letter].display})`;\r\n                }\r\n            }\r\n        }\r\n\r\n        // No literal part\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.display}`;\r\n            } else {\r\n                return '';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.display}*${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the tex output of the monom\r\n     */\r\n    get tex(): string {\r\n        // TODO: display with square root !\r\n        let L: string = '',\r\n            letters = Object.keys(this._literal).sort()\r\n\r\n        for (let letter of letters) {\r\n            if (this._literal[letter].isNotZero()) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter].isNotEqual(1)) {\r\n                    L += `^{${this._literal[letter].tfrac}}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.frac}`;\r\n            } else {\r\n                return '0';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.frac}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // -----------------------------------------\r\n    /**\r\n     * Parse a string to a monom. The string may include fraction.\r\n     * @param inputStr\r\n     */\r\n    parse = (inputStr: unknown): Monom => {\r\n\r\n        if (typeof inputStr === 'string') {\r\n            this._shutingYardToReducedMonom(inputStr)\r\n        } else if (typeof inputStr === 'number') {\r\n            this._coefficient = new Fraction(inputStr)\r\n            this._literal = {}\r\n        } else if (inputStr instanceof Fraction) {\r\n            this._coefficient = inputStr.clone()\r\n            this._literal = {}\r\n        } else if (inputStr instanceof Monom) {\r\n            this._coefficient = inputStr._coefficient.clone()\r\n            this._literal = this.copyLiterals(inputStr.literal)\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    addToken = (stack: Monom[], element: Token): void => {\r\n\r\n        let q1: Monom, q2: Monom, m: Monom, letter: string, pow: Fraction\r\n\r\n        if (element.tokenType === ShutingyardType.COEFFICIENT) {\r\n            stack.push(new Monom(new Fraction(element.token)))\r\n\r\n        } else if (element.tokenType === ShutingyardType.VARIABLE) {\r\n            let M = new Monom().one()\r\n            M.setLetter(element.token, 1)\r\n            stack.push(M.clone())\r\n\r\n        } else if (element.tokenType === ShutingyardType.OPERATION) {\r\n            switch (element.token) {\r\n                case '-':\r\n                    // this should only happen for negative powers or for negative coefficient.\r\n                    q2 = (stack.pop()) || new Monom().zero()\r\n                    q1 = (stack.pop()) || new Monom().zero()\r\n\r\n                    stack.push(q1.subtract(q2))\r\n\r\n                    break;\r\n                case '*':\r\n                    // Get the last element in the stack\r\n                    q2 = (stack.pop()) || new Monom().one()\r\n                    q1 = (stack.pop()) || new Monom().one()\r\n\r\n                    stack.push(q1.multiply(q2))\r\n                    break\r\n                case '/':\r\n                    // Get the last element in the stack\r\n                    q2 = (stack.pop()) || new Monom().one()\r\n                    q1 = (stack.pop()) || new Monom().one()\r\n\r\n                    stack.push(q1.divide(q2))\r\n                    break\r\n                case '^':\r\n                    // get the two last elements in the stack\r\n                    pow = (stack.pop().coefficient) || new Fraction().one()\r\n                    m = (stack.pop()) || new Monom().one()\r\n\r\n                    letter = m.variables[0]\r\n\r\n                    if (letter !== undefined) {\r\n                        m.setLetter(letter, pow)\r\n                    }\r\n\r\n                    stack.push(m)\r\n                    // this.multiply(m.clone())\r\n                    break\r\n            }\r\n        }\r\n    }\r\n    private _shutingYardToReducedMonom = (inputStr: string): Monom => {\r\n        // Get the RPN array of the current expression\r\n        const SY: Shutingyard = new Shutingyard().parse(inputStr);\r\n        const rpn: { token: string, tokenType: string }[] = SY.rpn;\r\n\r\n        let stack: Monom[] = [], m, pow, letter, q1, q2\r\n\r\n        if (rpn.length === 0) {\r\n            this.zero()\r\n            return this\r\n        } else if (rpn.length === 1) {\r\n            const element = rpn[0]\r\n\r\n            this.one()\r\n            if (element.tokenType === 'coefficient') {\r\n                this.coefficient = new Fraction(element.token)\r\n            } else if (element.tokenType === 'variable') {\r\n                this.setLetter(element.token, 1)\r\n            }\r\n            return this\r\n        } else {\r\n            // Reset the monom\r\n            for (const element of rpn) {\r\n                this.addToken(stack, element)\r\n            }\r\n        }\r\n\r\n        this.one()\r\n        this.multiply(stack[0])\r\n        return this\r\n    }\r\n    /**\r\n     * Clone the current Monom.\r\n     */\r\n    clone = (): Monom => {\r\n        let F: Monom = new Monom();\r\n\r\n        F.coefficient = this._coefficient.clone();\r\n\r\n        // Copy the literal parts.\r\n        for (let k in this._literal) {\r\n            F.setLetter(k, this._literal[k].clone());\r\n        }\r\n        return F;\r\n    };\r\n\r\n    copyLiterals = (literal: literalType): literalType => {\r\n        let L: literalType = {}\r\n\r\n        for (let k in literal) {\r\n            L[k] = literal[k].clone()\r\n        }\r\n        return L\r\n    }\r\n\r\n    makeSame = (M: Monom): Monom => {\r\n        // Copy the literal parts.\r\n        for (let k in M._literal) {\r\n            this.setLetter(k, M._literal[k].clone());\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Create a zero value monom\r\n     */\r\n    zero = (): Monom => {\r\n        this._coefficient = new Fraction().zero();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Create a one value monom\r\n     */\r\n    one = (): Monom => {\r\n        this._coefficient = new Fraction().one();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Clean the monom by removing each letters with a power of zero.\r\n     */\r\n    clean = (): Monom => {\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter].isZero()) {\r\n                delete this._literal[letter];\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    reduce = (): Monom => {\r\n        this.clean()\r\n        this.coefficient.reduce()\r\n        return this\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Get the opposed\r\n     * Returns a monom.\r\n     */\r\n    opposed = (): Monom => {\r\n        this._coefficient.opposed();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Add all similar monoms. If they aren't similar, they are simply skipped.\r\n     * @param M (Monom[]) The monoms to add.\r\n     */\r\n    add = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                if (this.isZero()) {\r\n                    this.makeSame(m)\r\n                }\r\n                this._coefficient.add(m.coefficient);\r\n            } else {\r\n                console.log('Add: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Subtract multiple monoms\r\n     * @param M (Monom[]) The monoms to subtract\r\n     */\r\n    subtract = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                if (this.isZero()) {\r\n                    this.makeSame(m)\r\n                }\r\n                this._coefficient.add(m.clone().coefficient.opposed());\r\n            } else {\r\n                console.log('Subtract: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiple multiple monoms to the current monom\r\n     * @param M (Monom[]) The monoms to multiply to.\r\n     */\r\n    multiply = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            // Multiply the coefficient.\r\n            this._coefficient.multiply(m.coefficient);\r\n\r\n            // Multiply the literal parts.\r\n            for (let letter in m.literal) {\r\n                if (this._literal[letter] === undefined) {\r\n                    this._literal[letter] = m.literal[letter].clone()\r\n                } else {\r\n                    this._literal[letter].add(m.literal[letter])\r\n                }\r\n\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiplyByNumber = (F: Fraction | number): Monom => {\r\n        this._coefficient.multiply(F);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divide the current monoms by multiple monoms\r\n     * @param M (Monom[])\r\n     */\r\n    divide = (...M: Monom[]): Monom => {\r\n        // Depending on the given value, choose the current item\r\n        for (let v of M) {\r\n            // Divide the coefficient\r\n            this._coefficient.divide(v.coefficient);\r\n\r\n            // Subtract the power values\r\n            for (let letter in v.literal) {\r\n                this._literal[letter] = (this._literal[letter] === undefined) ? v.literal[letter].clone().opposed() : this._literal[letter].subtract(v.literal[letter])\r\n\r\n                // If the power of a particular setLetter is zero, delete it from the literal part..\r\n                if (this._literal[letter].isZero()) {\r\n                    delete this._literal[letter];\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the pow of a monom.\r\n     * @param nb (number) : Mathematical pow\r\n     */\r\n    pow = (nb: number|Fraction): Monom => {\r\n        this._coefficient.pow(nb);\r\n        for (let letter in this._literal) {\r\n            this._literal[letter].multiply(nb)\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the nth-root of the monom\r\n     * @param p\r\n     */\r\n    root = (p: number): Monom => {\r\n        // TODO: determiner the nth root of a monom\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Return the square root of a monom\r\n     */\r\n    sqrt = (): Monom => {\r\n        if (this.isSquare()) {\r\n            this._coefficient.sqrt();\r\n            for (let letter in this._literal) {\r\n                this._literal[letter].clone().divide(2)\r\n            }\r\n        }\r\n        return this.root(2);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    compare = (M: Monom, sign?: string): boolean => {\r\n        // TODO: Build the compare systems.\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // To be equal, they must be the isSame\r\n                if (!this.compare(M, 'same')) {\r\n                    return false;\r\n                }\r\n\r\n                // The literal parts are the isSame. The coefficient must be equal\r\n                return this._coefficient.isEqual(M.coefficient);\r\n            case 'same':\r\n                // Get the list of all variables from both monoms.\r\n                let M1: string[] = this.variables,\r\n                    M2: string[] = M.variables,\r\n                    K: string[] = M1.concat(M2.filter((item) => M1.indexOf(item) < 0));\r\n\r\n                if(M1.length===0 && M2.length===0){return true}\r\n                // To compare, both must be different than zero.\r\n                if (!this.isZero() && !M.isZero()) {\r\n                    for (let key of K) {\r\n                        // The setLetter is not available in one of the monom\r\n                        if (this._literal[key] === undefined || M.literal[key] === undefined) {\r\n                            return false;\r\n                        }\r\n                        // The setLetter does not have the isSame power in each monoms.\r\n                        if (!this._literal[key].isEqual(M.literal[key])) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // All are positive check - the monoms are the sames.\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is null\r\n     */\r\n    isZero(): boolean {\r\n        return this._coefficient.value === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is one\r\n     */\r\n    isOne(): boolean {\r\n        return this._coefficient.value === 1 && this.variables.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if two monoms are equals\r\n     * @param M\r\n     */\r\n    isEqual = (M: Monom): boolean => {\r\n        return this.compare(M, '=');\r\n    };\r\n\r\n    /**\r\n     * Determine if two monoms are similar\r\n     * @param M\r\n     */\r\n    isSameAs = (M: Monom): boolean => {\r\n        return this.compare(M, 'same');\r\n    };\r\n\r\n    isSquare = (): boolean => {\r\n        if (!this.coefficient.isSquare()) {\r\n            return false;\r\n        }\r\n        return this.isLiteralSquare();\r\n    }\r\n\r\n    isLiteralSquare = (): boolean => {\r\n        for (let letter in this.literal) {\r\n            // A literal square must have a natural power\r\n            if (this.literal[letter].isRational()) {\r\n                return false\r\n            }\r\n\r\n            // The natural power must be be even\r\n            if (this.literal[letter].isEven()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    hasFractionCoefficient = (): boolean => {\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter].isRational()) {\r\n                return true\r\n            }\r\n        }\r\n\r\n        return false\r\n    }\r\n    // ------------------------------------------\r\n    // Misc monoms functions\r\n    // -------------------------------------\r\n    /**\r\n     * Determine if a monom contains a setLetter in it's literal part\r\n     * @param letter\r\n     */\r\n    hasLetter = (letter?: string): boolean => {\r\n        // The letter was not found\r\n        if (this._literal[letter === undefined ? 'x' : letter] === undefined) {\r\n            return false\r\n        }\r\n\r\n        // The letter is found and is not zero !\r\n        return this._literal[letter === undefined ? 'x' : letter].isNotZero();\r\n    };\r\n\r\n    /**\r\n     * Set the power of a particular setLetter\r\n     * @param letter (string) Letter to change\r\n     * @param pow (number) Power of the setLetter (must be positive integer.\r\n     */\r\n    setLetter = (letter: string, pow: Fraction | number): void => {\r\n        if (pow instanceof Fraction) {\r\n            // Set the power of the letter to zero => remove it\r\n            if (this.hasLetter(letter) && pow.isZero()) {\r\n                delete this._literal[letter]\r\n            }\r\n\r\n            this._literal[letter] = pow.clone()\r\n        } else {\r\n            this.setLetter(letter, new Fraction(pow))\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the degree of a monom. If no setLetter is given, the result will be the global degree.\r\n     * @param letter (string) Letter to get to degree (power)\r\n     */\r\n    degree = (letter?: string): Fraction => {\r\n        if (this.variables.length === 0) {\r\n            return new Fraction().zero();\r\n        }\r\n        if (letter === undefined) {\r\n            // Not setLetter given -> we get the global monom degree (sum of all the letters).\r\n            return Object.values(this._literal).reduce((t, n) => t.clone().add(n));\r\n        } else {\r\n            // A setLetter is given -> get the corresponding power.\r\n            return this._literal[letter] === undefined ? new Fraction().zero() : this._literal[letter].clone();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Evaluate a monom. Each setLetter must be assigned to a Fraction.\r\n     * @param values    Dictionary of <setLetter: Fraction>\r\n     */\r\n    evaluate = (values: literalType | Fraction | number): Fraction => {\r\n        let r = this.coefficient.clone();\r\n\r\n        if (typeof values === 'number' || values instanceof Fraction) {\r\n            let tmpValues: literalType = {}\r\n            tmpValues[this.variables[0]] = new Fraction(values)\r\n            return this.evaluate(tmpValues);\r\n        }\r\n\r\n        if (typeof values === 'object') {\r\n            if(this.variables.length===0){\r\n                return this.coefficient\r\n            }\r\n            for (let L in this._literal) {\r\n                if (values[L] === undefined) {\r\n                    return new Fraction().zero();\r\n                }\r\n\r\n                let value = new Fraction(values[L])\r\n\r\n                r.multiply(value.pow(this._literal[L]))\r\n            }\r\n        }\r\n\r\n        return r;\r\n    };\r\n\r\n    /**\r\n     * Derivative the monom\r\n     * @param letter\r\n     */\r\n    derivative = (letter?: string): Monom => {\r\n        // No setLetter given - assume it's the setLetter 'x'\r\n        if (letter === undefined) {\r\n            letter = 'x';\r\n        }\r\n\r\n        if (this.hasLetter(letter)) {\r\n            let d = this._literal[letter].clone(),\r\n                dM = this.clone();\r\n\r\n            // Subtract one to the degree.\r\n            dM._literal[letter].subtract(1)\r\n\r\n            // Multiply the coefficient by the previous degree\r\n            dM._coefficient.multiply(new Fraction(d.clone()));\r\n            return dM;\r\n        } else {\r\n            return new Monom().zero();\r\n        }\r\n    };\r\n\r\n    primitive = (letter?: string): Monom => {\r\n        // TODO: derivative including the ln value => implies creating different monom system ?\r\n        if (letter === undefined) {\r\n            letter = 'x'\r\n        }\r\n\r\n        // Zero monom\r\n        let M = this.clone(), degree\r\n\r\n        if (M.hasLetter(letter)) {\r\n            degree = M.degree(letter).clone().add(1)\r\n            M.coefficient = M.coefficient.clone().divide(degree)\r\n            M.setLetter(letter, degree)\r\n        } else {\r\n            // There is no letter.\r\n\r\n            // The coefficient might be zero (=> x) or a number a (=> ax)\r\n            if (M.coefficient.isZero()) {\r\n                M.coefficient = new Fraction().one()\r\n            }\r\n            M.setLetter(letter, 1)\r\n        }\r\n\r\n        return M\r\n    }\r\n    // ----------------------------------------\r\n    // Static functions\r\n    // ----------------------------------------\r\n\r\n    /**\r\n     * Get the least common multiple of monoms\r\n     * @param monoms    Array of monoms\r\n     */\r\n    static lcm = (...monoms: Monom[]): Monom => {\r\n        // All the monoms must be with natural powers...\r\n        for (let m of monoms) {\r\n            if (m.hasFractionCoefficient()) {\r\n                return new Monom().zero()\r\n            }\r\n        }\r\n\r\n\r\n        let M = new Monom(),\r\n            coeffN: number[] = monoms.map(value => value.coefficient.numerator),\r\n            coeffD: number[] = monoms.map(value => value.coefficient.denominator),\r\n            n = Numeric.gcd(...coeffN),\r\n            d = Numeric.lcm(...coeffD);\r\n\r\n        // Get the coefficient.\r\n        M.coefficient = new Fraction(n, d).reduce();\r\n\r\n        // Set the literal parts - go through each monoms literal parts and get only the lowest degree of each letters.\r\n        for (let m of monoms) {\r\n            // Remove the inexistant letters from the resulting monom\r\n            for (let letter in M.literal) {\r\n                if (!(letter in m.literal)) {\r\n                    M.literal[letter].zero();\r\n                }\r\n            }\r\n            for (let letter in m.literal) {\r\n                if (M.literal[letter] === undefined && m.literal[letter].isStrictlyPositive()) {\r\n                    M.literal[letter] = m.literal[letter].clone();\r\n                } else {\r\n                    M.literal[letter] = new Fraction(Math.min(m.literal[letter].value, M.literal[letter].value))\r\n                }\r\n            }\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n    /**\r\n     * Multiply two monoms and return a NEW monom.\r\n     * @param monoms\r\n     */\r\n    static xmultiply = (...monoms: Monom[]): Monom => {\r\n        let M = new Monom().one();\r\n\r\n        for (let m of monoms) {\r\n            M.multiply(m);\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Determine if multiple monoms are similar\r\n     * @param M\r\n     */\r\n    areSameAs = (...M: Monom[]): boolean => {\r\n        let result: boolean = true;\r\n\r\n        // Check all monoms if they are the isSame as the \"this\" one.\r\n        for (let i = 0; i < M.length; i++) {\r\n            if (!this.isSameAs(M[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All check passed -> all the monoms are similar.\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Determine if multiple monoms are equals\r\n     * @param M\r\n     */\r\n    areEquals = (...M: Monom[]): boolean => {\r\n        // They are not similar.\r\n        if (!this.areSameAs(...M)) {\r\n            return false;\r\n        }\r\n\r\n        // Check all coefficient. They must be equals.\r\n        for (let m of M) {\r\n            if (!this._coefficient.isEqual(m.coefficient)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All checks passed.\r\n        return true;\r\n    };\r\n\r\n    isDivisible = (div:Monom):boolean => {\r\n        // For all variables (letters), the current monom must have a degree higher than the divider\r\n        if(div.degree().isStrictlyPositive()) {\r\n            for (let letter of div.variables) {\r\n                if (!this.degree(letter).geq(div.degree(letter))) {\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n\r\n        // If the coefficient is rational, we suppose we don't need to check the division by the coefficient.\r\n        if(this.coefficient.isRational() || div.coefficient.isRational()){return true}\r\n\r\n        return this.coefficient.clone().divide(div.coefficient).isRelative()\r\n    }\r\n\r\n}\r\n","/**\r\n * Polynom module contains everything necessary to handle polynoms.*\r\n */\r\n\r\nimport {literalType, Monom} from './monom';\r\nimport {Shutingyard, ShutingyardType, Token} from '../shutingyard';\r\nimport {Numeric} from '../numeric';\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Equation, ISolution} from \"./equation\";\r\nimport {Random} from \"../randomization/random\";\r\nimport monom = Random.monom;\r\n\r\nexport type PolynomParsingType = string | Polynom | number | Fraction | Monom\r\n\r\nexport interface IEuclidian {\r\n    quotient: Polynom,\r\n    reminder: Polynom\r\n}\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n * ```\r\n * let P = new Polynom('3x-4')\r\n * ```\r\n */\r\nexport class Polynom {\r\n    private _dirty_factors: boolean\r\n    private _dirty_zeroes: boolean\r\n    private _euclidianCache: { [Key: string]: IEuclidian }\r\n    private _factors: Polynom[];\r\n    private _monoms: Monom[];\r\n    private _rawString: string;\r\n    private _texString: string;\r\n    private _zeroes: ISolution[]\r\n\r\n    /**\r\n     *\r\n     * @param {string} polynomString (optional) Default polynom to parse on class creation\r\n     * @param values\r\n     */\r\n    constructor(polynomString?: PolynomParsingType, ...values: unknown[]) {\r\n        this._monoms = [];\r\n        this._factors = [];\r\n        this.mark_as_dirty()\r\n\r\n        if (polynomString !== undefined) {\r\n            this.parse(polynomString, ...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    get euclidianCache(): { [p: string]: IEuclidian } {\r\n        return this._euclidianCache;\r\n    }\r\n\r\n    set euclidianCache(value: { [p: string]: IEuclidian }) {\r\n        this._euclidianCache = value;\r\n    }\r\n\r\n    get dirty_zeroes(): boolean {\r\n        return this._dirty_zeroes;\r\n    }\r\n\r\n    set dirty_zeroes(value: boolean) {\r\n        this._dirty_zeroes = value;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    get dirty_factors(): boolean {\r\n        return this._dirty_factors;\r\n    }\r\n\r\n    set dirty_factors(value: boolean) {\r\n        this._dirty_factors = value;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    get monoms() {\r\n        return this._monoms;\r\n    }\r\n\r\n    set monoms(M: Monom[]) {\r\n        this._monoms = M;\r\n    }\r\n\r\n    get zeroes(): ISolution[] {\r\n        return this.getZeroes()\r\n    }\r\n\r\n    get factors(): Polynom[] {\r\n        return this.factorize()\r\n    }\r\n\r\n    set factors(value: Polynom[]) {\r\n        this.mark_as_dirty()\r\n        this._factors = value;\r\n    }\r\n\r\n    get texString(): string {\r\n        return this._texString;\r\n    }\r\n\r\n    get texFactors(): string {\r\n        this.factorize()\r\n\r\n        if (this.factors.length <= 1) {\r\n            return this.tex\r\n        }\r\n\r\n        // Build an array of texFactors with the number of similar items.\r\n        let factorsCount: { [Key: string]: { degree: number, factor: Polynom } } = {}\r\n        for (let f of this.factors) {\r\n            if (factorsCount[f.tex] !== undefined) {\r\n                factorsCount[f.tex].degree++\r\n            } else {\r\n                factorsCount[f.tex] = {\r\n                    degree: 1,\r\n                    factor: f\r\n                }\r\n            }\r\n        }\r\n\r\n        // First round to put the 'monom' first\r\n        let simpleFactor = new Polynom().one()\r\n\r\n        for (let item of Object.values(factorsCount).filter(item => item.factor.monoms.length === 1)) {\r\n            simpleFactor.multiply(item.factor)\r\n        }\r\n\r\n        let tex = simpleFactor.isOne() ? '' : simpleFactor.tex\r\n\r\n        // Loop through all factors that contains at least 2 monoms.\r\n        for (let item of Object.values(factorsCount).filter(item => item.factor.monoms.length > 1)) {\r\n            if (item.factor.length > 1) {\r\n                tex += `\\\\left( ${item.factor.tex} \\\\right)${item.degree > 1 ? '^{ ' + item.degree + ' }' : ''}`\r\n            }\r\n        }\r\n\r\n        return tex;\r\n    }\r\n\r\n    get displayFactors() {\r\n        this.factorize()\r\n\r\n        if (this.factors.length <= 1) {\r\n            return this.display\r\n        }\r\n\r\n        // Build an array of texFactors with the number of similar items.\r\n        let factorsCount: { [Key: string]: { degree: number, factor: Polynom } } = {}\r\n        for (let f of this.factors) {\r\n            if (factorsCount[f.display] !== undefined) {\r\n                factorsCount[f.display].degree++\r\n            } else {\r\n                factorsCount[f.display] = {\r\n                    degree: 1,\r\n                    factor: f\r\n                }\r\n            }\r\n        }\r\n\r\n        // First round to put the 'monom' first\r\n        let simpleFactor = new Polynom().one()\r\n\r\n        for (let item of Object.values(factorsCount).filter(item => item.factor.monoms.length === 1)) {\r\n            simpleFactor.multiply(item.factor)\r\n        }\r\n\r\n        let display = simpleFactor.isOne() ? '' : simpleFactor.display\r\n\r\n        // Loop through all factors that contains at least 2 monoms.\r\n        for (let item of Object.values(factorsCount).filter(item => item.factor.monoms.length > 1)) {\r\n            if (item.factor.length > 1) {\r\n                display += `(${item.factor.display})${item.degree > 1 ? '^(' + item.degree + ')' : ''}`\r\n            }\r\n        }\r\n\r\n        return display;\r\n    }\r\n\r\n    get length() {\r\n        // TODO: Must reduce the monoms list to remove the zero coefficient.\r\n        return this._monoms.length;\r\n    }\r\n\r\n    get display(): string {\r\n        return this.genDisplay();\r\n    }\r\n\r\n    get raw(): string {\r\n        return this._rawString\r\n    }\r\n\r\n    get tex(): string {\r\n        return this.genDisplay('tex');\r\n    }\r\n\r\n    get isMultiVariable(): boolean {\r\n        const B = false;\r\n        for (const m of this._monoms) {\r\n            if (m.variables.length > 1) {\r\n                return true;\r\n            }\r\n        }\r\n        return B;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            V = V.concat(m.variables);\r\n        }\r\n\r\n        // Remove duplicates.\r\n        V = [...new Set(V)];\r\n\r\n        return V;\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    get plotFunction(): string {\r\n        return this.genDisplay('tex', false, false, true)\r\n    }\r\n\r\n    mark_as_dirty = (): void => {\r\n        this.dirty_factors = true\r\n        this.dirty_zeroes = true\r\n        this.euclidianCache = {}\r\n    }\r\n\r\n    addToken = (stack: Polynom[], element: Token): void => {\r\n        switch (element.tokenType) {\r\n            case ShutingyardType.COEFFICIENT:\r\n                stack.push(new Polynom(element.token))\r\n                break\r\n\r\n            case ShutingyardType.VARIABLE:\r\n                stack.push(new Polynom().add(new Monom(element.token)))\r\n                break\r\n\r\n            case ShutingyardType.CONSTANT:\r\n                // TODO: add constant support to Polynom parsing.\r\n                console.log('Actually, not supported - will be added later !')\r\n                break\r\n\r\n            case ShutingyardType.OPERATION:\r\n                if (stack.length >= 2) {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n\r\n                    if (element.token === '+') {\r\n                        stack.push(a.add(b))\r\n                    } else if (element.token === '-') {\r\n                        stack.push(a.subtract(b))\r\n                    } else if (element.token === '*') {\r\n                        stack.push(a.multiply(b))\r\n                    } else if (element.token === '/') {\r\n                        if (b.degree().isStrictlyPositive()) {\r\n                            console.log('divide by a polynom -> should create a rational polynom !')\r\n                        } else {\r\n                            stack.push(a.divide(b.monoms[0].coefficient))\r\n\r\n                        }\r\n                    } else if (element.token === '^') {\r\n                        if (b.degree().isStrictlyPositive()) {\r\n                            console.error('Cannot elevate a polynom with another polynom !', a.tex, b.tex)\r\n                        } else {\r\n                            if (b.monoms[0].coefficient.isRelative()) {\r\n                                // Integer power\r\n                                stack.push(a.pow(b.monoms[0].coefficient.value))\r\n                            } else {\r\n                                // Only allow power if the previous polynom is only a monom, without coefficient.\r\n                                if (a.monoms.length === 1 && a.monoms[0].coefficient.isOne()) {\r\n                                    for (let letter in a.monoms[0].literal) {\r\n                                        a.monoms[0].literal[letter].multiply(b.monoms[0].coefficient)\r\n                                    }\r\n                                    stack.push(a)\r\n                                } else {\r\n                                    console.error('Cannot have power with fraction')\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (element.token === '-') {\r\n                        stack.push(stack.pop().opposed())\r\n                    } else {\r\n                        throw \"Error parsing the polynom \" + this._rawString\r\n                    }\r\n                }\r\n                break\r\n\r\n            case ShutingyardType.MONOM:\r\n                // Should never appear.\r\n                console.error('The monom token should not appear here')\r\n                break;\r\n\r\n            case ShutingyardType.FUNCTION:\r\n                // Should never appear.\r\n                console.error('The function token should not appear here - might be introduced later.')\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse a string to a polynom.\r\n     * @param inputStr\r\n     * @param values: as string, numbers or fractions\r\n     */\r\n    parse = (inputStr: PolynomParsingType, ...values: unknown[]): Polynom => {\r\n        // Reset the main variables.\r\n        this._monoms = []\r\n        this._factors = []\r\n        this.mark_as_dirty()\r\n\r\n        // TODO: allow to enter a liste of Fraction (a, b, c, ...) to make a polynom ax^n + bx^(n-1) + cx^(n-2) + ...\r\n        if (typeof inputStr === 'string') {\r\n            return this._parseString(inputStr, ...values)\r\n        } else if (\r\n            (typeof inputStr === 'number' || inputStr instanceof Fraction || inputStr instanceof Monom)\r\n            && (values === undefined || values.length === 0)\r\n        ) {\r\n            this._monoms.push(new Monom(inputStr))\r\n        } else if (inputStr instanceof Monom && values.length > 0) {\r\n            this._monoms.push(new Monom(inputStr))\r\n            values.forEach(m => {\r\n                this._monoms.push(new Monom(m))\r\n            })\r\n        } else if (inputStr instanceof Polynom) {\r\n            for (const m of inputStr.monoms) {\r\n                this._monoms.push(m.clone())\r\n            }\r\n        }\r\n\r\n        return this\r\n    };\r\n\r\n    /**\r\n     * Clone the polynom\r\n     */\r\n    clone = (): Polynom => {\r\n        const P = new Polynom();\r\n        const M: Monom[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            M.push(m.clone());\r\n        }\r\n\r\n        P.monoms = M;\r\n\r\n        return P;\r\n    };\r\n\r\n    /**\r\n     * Set the polynom to zero.\r\n     * @returns {this}\r\n     */\r\n    zero = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().zero());\r\n        this._rawString = '0';\r\n        this.mark_as_dirty()\r\n        return this;\r\n    };\r\n\r\n    one = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().one());\r\n        this._rawString = '1';\r\n        this.mark_as_dirty()\r\n        return this;\r\n    }\r\n\r\n    empty = (): Polynom => {\r\n        this._monoms = [];\r\n        this._rawString = '';\r\n        this.mark_as_dirty()\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    opposed = (): Polynom => {\r\n        this._monoms = this._monoms.map(m => m.opposed());\r\n        this.mark_as_dirty()\r\n        return this;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n\r\n    add = (...values: unknown[]): Polynom => {\r\n        this.mark_as_dirty()\r\n\r\n        for (let value of values) {\r\n            if (value instanceof Polynom) {\r\n                this._monoms = this._monoms.concat(value.monoms);\r\n            } else if (value instanceof Monom) {\r\n                this._monoms.push(value.clone());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()));\r\n            } else {\r\n                this._monoms.push(new Monom(value));\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (...values: unknown[]): Polynom => {\r\n        this.mark_as_dirty()\r\n\r\n        for (let value of values) {\r\n            if (value instanceof Polynom) {\r\n                this._monoms = this._monoms.concat(value.clone().opposed().monoms);\r\n            } else if (value instanceof Monom) {\r\n                this._monoms.push(value.clone().opposed());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()).opposed());\r\n            } else {\r\n                this._monoms.push(new Monom(value).opposed());\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    multiply = (value: unknown): Polynom => {\r\n        this.mark_as_dirty()\r\n\r\n        if (value instanceof Polynom) {\r\n            return this.multiplyByPolynom(value);\r\n        } else if (value instanceof Fraction) {\r\n            return this.multiplyByFraction(value);\r\n        } else if (value instanceof Monom) {\r\n            return this.multiplyByMonom(value);\r\n        } else if (Number.isSafeInteger(value) && typeof value === 'number') {\r\n            return this.multiplyByInteger(value);\r\n        }\r\n\r\n        // Something went wrong...\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divide the current polynom by another polynom.\r\n     * @param P\r\n     * returns {quotient: Polynom, reminder: Polynom}\r\n     */\r\n    euclidian = (P: Polynom): IEuclidian => {\r\n\r\n        if (this.euclidianCache[P.tex] !== undefined) {\r\n            return this.euclidianCache[P.tex]\r\n        }\r\n\r\n        const letter: string = P.variables[0];\r\n        const quotient: Polynom = new Polynom().zero();\r\n        const reminder: Polynom = this.clone().reorder(letter);\r\n\r\n        // There is no variable - means it's a number\r\n        if (P.variables.length === 0) {\r\n            let q = this.clone().divide(P)\r\n            return {\r\n                quotient: this.clone().divide(P),\r\n                reminder: new Polynom().zero()\r\n            }\r\n\r\n        }\r\n\r\n        // Get at least a letter\r\n\r\n        const maxMP: Monom = P.monomByDegree(undefined, letter);\r\n        const degreeP: Fraction = P.degree(letter);\r\n\r\n        let newM: Monom;\r\n\r\n        // Make the euclidian division of the two polynoms.\r\n        let MaxIteration = this.degree(letter).clone().multiply(2);\r\n        while (reminder.degree(letter).geq(degreeP) && MaxIteration.isPositive()) {\r\n            MaxIteration.subtract(1)\r\n\r\n            // Get the greatest monom divided by the max monom of the divider\r\n            newM = reminder.monomByDegree(undefined, letter).clone().divide(maxMP);\r\n\r\n            if (newM.isZero()) {\r\n                break;\r\n            }\r\n\r\n            // Get the new quotient and reminder.\r\n            quotient.add(newM);\r\n            reminder.subtract(P.clone().multiply(newM));\r\n        }\r\n\r\n        quotient.reduce()\r\n        reminder.reduce()\r\n        return {quotient, reminder};\r\n    };\r\n\r\n    divide = (value: unknown): Polynom => {\r\n        this.mark_as_dirty()\r\n\r\n        if (value instanceof Fraction) {\r\n            return this.divideByFraction(value);\r\n        } else if (typeof value === 'number' && Number.isSafeInteger(value)) {\r\n            return this.divideByInteger(value);\r\n        } else if (value instanceof Polynom) {\r\n            if (value.monoms.length === 1 && value.variables.length === 0) {\r\n                return this.divideByFraction(value.monoms[0].coefficient)\r\n            }\r\n        }\r\n    }\r\n\r\n    pow = (nb: number): Polynom => {\r\n        this.mark_as_dirty()\r\n\r\n        if (!Number.isSafeInteger(nb)) {\r\n            return this.zero();\r\n        }\r\n        if (nb < 0) {\r\n            return this.zero();\r\n        }\r\n        if (nb === 0) {\r\n            return new Polynom();\r\n        }\r\n\r\n        const P = this.clone();\r\n        for (let i = 1; i < nb; i++) {\r\n            this.multiply(P);\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param P\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (P: Polynom, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '='\r\n        }\r\n\r\n        // Create clone version to reduce them without altering the original polynoms.\r\n        const cP1 = this.clone().reduce().reorder();\r\n        const cP2 = P.clone().reduce().reorder();\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree().isNotEqual(cP2.degree())) {\r\n                    return false;\r\n                }\r\n\r\n                // Check if the coefficients are the isSame.\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isEqual(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            case 'same':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree() !== cP2.degree()) {\r\n                    return false;\r\n                }\r\n\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isSameAs(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    isZero(): boolean {\r\n        return (this._monoms.length === 1 && this._monoms[0].coefficient.isZero()) || this._monoms.length === 0;\r\n    }\r\n\r\n    isOne(): boolean {\r\n        return this._monoms.length === 1 && this._monoms[0].coefficient.isOne();\r\n    }\r\n\r\n    isEqual = (P: Polynom): boolean => {\r\n        return this.compare(P, '=');\r\n    };\r\n\r\n    isSameAs = (P: Polynom): boolean => {\r\n        return this.compare(P, 'same');\r\n    };\r\n\r\n    isOpposedAt = (P: Polynom): boolean => {\r\n        return this.compare(P.clone().opposed(), '=');\r\n    };\r\n\r\n    isFactorized = (polynomString: string): boolean => {\r\n        let P;\r\n\r\n        // Check if polynom is complete...\r\n        if (polynomString.match(/\\(/g).length !== polynomString.match(/\\)/g).length) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check if the provided (string) version is fully factorized.\r\n        // Run a regex on the string.\r\n        let polynomStringNormalized = polynomString.replaceAll('*', ''),\r\n            polynomStringReduced = '' + polynomStringNormalized,\r\n            factors: string[] = [];\r\n\r\n        for (let x of polynomStringNormalized.matchAll(/\\(([a-z0-9+\\-]+)\\)(\\^[0-9]*)?/g)) {\r\n            if (x[2] !== undefined) {\r\n                for (let i = 0; i < +x[2].substr(1); i++) {\r\n                    factors.push(x[1])\r\n                }\r\n            } else {\r\n                factors.push(x[1]);\r\n            }\r\n            polynomStringReduced = polynomStringReduced.replaceAll(x[0], '');\r\n        }\r\n        if (polynomStringReduced !== '') {\r\n            factors.push(polynomStringReduced);\r\n        }\r\n        let polyFactors = factors.map(x => new Polynom(x));\r\n\r\n        // Factorize the current polynom.\r\n        this.factorize();\r\n\r\n        // Compare the given factors with the generated factors\r\n        let sign = 1;\r\n        for (let f of this.factors) {\r\n            for (let i = 0; i < polyFactors.length; i++) {\r\n                if (f.isEqual(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    break;\r\n                } else if (f.isOpposedAt(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    sign = -sign;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // The polyfactors must be empty and the cumulative opposite factors must be 1.\r\n        return (polyFactors.length === 0 && sign === 1);\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n\r\n    isReduced = (polynomString: string): Boolean => {\r\n        // The polynom must be developed to be reduced.\r\n        if(!this.isDeveloped(polynomString)){return false}\r\n\r\n        let P = new Polynom(polynomString)\r\n        if(P.monoms.length > this.monoms.length){return false}\r\n\r\n        // TODO: Not ur the reduced systme checking is working properly !\r\n        for(let m of P.monoms){\r\n            if(!m.coefficient.isReduced()){return false}\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    isDeveloped = (polynomString: string): Boolean => {\r\n        let P: Polynom;\r\n\r\n        // There is at least one parenthese - it is not developed.\r\n        if (polynomString.match(/\\(/g).length + polynomString.match(/\\)/g).length) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            // Build the polynom\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check that everything is completely developed. Actually, there are no parentheses... so it is fully developed\r\n\r\n        // maybe it wasn't reduced and not ordered...\r\n        // compare polynom string.\r\n\r\n        // normalize the string\r\n        let polynomStringNormalized = polynomString.replaceAll('[*\\s]', '')\r\n\r\n        // Determine if it's the exact same string.\r\n        // TODO: Maybe it's enough to just make this test !\r\n        return polynomStringNormalized === P.reduce().reorder().display\r\n    }\r\n\r\n    // -------------------------------------\r\n    reduce = (): Polynom => {\r\n        for (let i = 0; i < this._monoms.length; i++) {\r\n            for (let j = i + 1; j < this._monoms.length; j++) {\r\n                if (this._monoms[i].isSameAs(this.monoms[j])) {\r\n                    this._monoms[i].add(this.monoms[j]);\r\n                    this._monoms.splice(j, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Remove all null monoms\r\n        this._monoms = this._monoms.filter((m) => {\r\n            return m.coefficient.value !== 0\r\n        });\r\n\r\n        // Reduce all monoms coefficient.\r\n        for (const m of this._monoms) {\r\n            m.coefficient.reduce();\r\n        }\r\n\r\n        if (this.length === 0) {\r\n            return new Polynom().zero();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    reorder = (letter: string = 'x'): Polynom => {\r\n        // TODO: Must handle multiple setLetter reorder system\r\n        this._monoms.sort(function (a, b) {\r\n            return b.degree(letter).clone().subtract(a.degree(letter)).value\r\n        });\r\n        return this.reduce();\r\n    };\r\n\r\n    degree = (letter?: string): Fraction => {\r\n        let d: Fraction = new Fraction().zero();\r\n        for (const m of this._monoms) {\r\n            d = Fraction.max(m.degree(letter).value, d);\r\n        }\r\n        return d;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        let L: string[] = [], S = new Set();\r\n\r\n        for (let m of this._monoms) {\r\n            S = new Set([...S, ...m.variables]);\r\n        }\r\n\r\n        // @ts-ignore\r\n        return [...S];\r\n    }\r\n\r\n    /**\r\n     * Replace a variable (letter) by a polynom.\r\n     * @param letter\r\n     * @param P\r\n     */\r\n    replaceBy = (letter: string, P: Polynom): Polynom => {\r\n        this.mark_as_dirty()\r\n\r\n        let pow: Fraction;\r\n        const resultPolynom: Polynom = new Polynom().zero();\r\n\r\n        for (const m of this.monoms) {\r\n            if (m.literal[letter] === undefined || m.literal[letter].isZero()) {\r\n                resultPolynom.add(m.clone());\r\n            } else {\r\n                // We have found a setLetter.\r\n                // Get the power and reset it.\r\n                pow = m.literal[letter].clone();\r\n                delete m.literal[letter];\r\n\r\n                // TODO: replaceBy works only with positive and natural pow\r\n                resultPolynom.add(P.clone().pow(Math.abs(pow.numerator)).multiply(m));\r\n            }\r\n        }\r\n\r\n        this._monoms = resultPolynom.reduce().reorder().monoms;\r\n        return this;\r\n    };\r\n\r\n    // Evaluate a polynom.\r\n    evaluate = (values: literalType | Fraction | number): Fraction => {\r\n        const r = new Fraction().zero();\r\n\r\n        this._monoms.forEach(monom => {\r\n            //console.log('Evaluate polynom: ', monom.display, values, monom.evaluate(values).display);\r\n            r.add(monom.evaluate(values));\r\n        });\r\n\r\n        return r;\r\n    };\r\n\r\n    derivative = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.derivative(letter));\r\n        }\r\n        return dP;\r\n    }\r\n    // ------------------------------------------\r\n    // Misc polynoms functions\r\n\r\n    primitive = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.primitive(letter))\r\n        }\r\n        return dP\r\n    }\r\n\r\n    integrate = (a: Fraction | number, b: Fraction | number, letter?: string): Fraction => {\r\n        const primitive = this.primitive(letter)\r\n\r\n        if (letter === undefined) {\r\n            letter = 'x'\r\n        }\r\n\r\n        let valuesA: literalType = {},\r\n            valuesB: literalType = {}\r\n        valuesA[letter] = new Fraction(a);\r\n        valuesB[letter] = new Fraction(b);\r\n\r\n        return primitive.evaluate(valuesB).subtract(primitive.evaluate(valuesA))\r\n    }\r\n\r\n    // -------------------------------------\r\n    /**\r\n     * Factorize a polynom and store the best results in factors.\r\n     * @param maxValue Defines the greatest value to search to (default is 20).\r\n     */\r\n    factorize = (letter?: string): Polynom[] => {\r\n        if (!this.dirty_factors) {\r\n            return this._factors\r\n        }\r\n\r\n\r\n        let factors: Polynom[] = [];\r\n        let P = this.clone().reorder()\r\n\r\n        // Extract the common monom\r\n        // 2x^3+6x^2 => 2x^2\r\n        let M = P.commonMonom()\r\n        // If the polynom starts with a negative monom, factorize it.\r\n        if(P.monomByDegree().coefficient.isStrictlyNegative() && M.coefficient.isStrictlyPositive()){\r\n            M.opposed()\r\n        }\r\n\r\n        if (!M.isOne()) {\r\n            let tempPolynom: Polynom = new Polynom(M)\r\n            factors = [tempPolynom.clone()]\r\n            P = P.euclidian(tempPolynom).quotient;\r\n        }\r\n\r\n        // Main loop\r\n        let securityLoop = P.degree().clone().multiply(2).value,\r\n            maxDegree = 1\r\n        while (securityLoop >= 0) {\r\n            securityLoop--\r\n            if (P.monoms.length < 2) {\r\n                // The polynom has only one monom => 7x^2\r\n                // No need to continue.\r\n                if (!P.isOne()) {\r\n                    factors.push(P.clone())\r\n                    P.one()\r\n                }\r\n                break\r\n            } else if (P.degree(letter).isOne()) {\r\n                // The polynom is a first degree polynom => 3x-5\r\n                // No need to continue\r\n                factors.push(P.clone())\r\n                P.one()\r\n                break\r\n            } else {\r\n                // Create the list of all \"potential\" polynom dividers.\r\n                let allDividers: Polynom[] = this._getAllPotentialFactors(P, maxDegree, letter)\r\n                maxDegree = P.degree(letter).value\r\n\r\n                // Actually: 100ms\r\n                while (allDividers.length > 0) {\r\n                    let div = allDividers[0]\r\n\r\n                    if (!P.isDividableBy(div)) {\r\n                        // Not dividable. Remove it from the list\r\n                        allDividers.shift()\r\n                    } else {\r\n                        // It's dividable - so make the division\r\n                        let result = P.euclidian(div)\r\n\r\n                        // Add the factor\r\n                        factors.push(div)\r\n\r\n                        // As it's dividable, get the quotient.\r\n                        P = result.quotient.clone()\r\n\r\n                        // filter all dividers that are no more suitable.\r\n                        allDividers = allDividers.filter(x => {\r\n                            let pX = P.monoms[0],\r\n                                pC = P.monoms[P.monoms.length - 1],\r\n                                dX = x.monoms[0],\r\n                                dC = x.monoms[x.monoms.length - 1]\r\n\r\n                            // Check last item (degree zero)\r\n                            if (!pC.isDivisible(dC)) {\r\n                                return false\r\n                            }\r\n\r\n                            // Check the first item (degree max)\r\n                            if (!pX.isDivisible(dX)) {\r\n                                return false\r\n                            }\r\n\r\n                            return true\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Maybe there is still something in the Polynom (not everything was possible to factorize)\r\n        if (!P.isOne()) {\r\n            factors.push(P.clone())\r\n        }\r\n\r\n        // Save the factors\r\n        this._factors = factors\r\n\r\n        // The factors list is no more dirty\r\n        this.dirty_factors = false\r\n\r\n        return this._factors;\r\n    }\r\n\r\n    isDividableBy = (div: Polynom): boolean => {\r\n        // Quick evaluation.\r\n        if (div.degree().isOne()) {\r\n            let zero = div.getZeroes()[0]\r\n\r\n            if (zero.exact instanceof Fraction) {\r\n                return this.evaluate(zero.exact).isZero()\r\n            } else {\r\n                return false\r\n            }\r\n        } else {\r\n            this.euclidianCache[div.tex] = this.euclidian(div)\r\n            return this.euclidianCache[div.tex].reminder.isZero()\r\n        }\r\n    }\r\n    // TODO: get zeroes for more than first degree and for more than natural degrees\r\n    getZeroes = (): ISolution[] => {\r\n        if (this.dirty_zeroes) {\r\n            let equ = new Equation(this.clone(), 0)\r\n            equ.solve()\r\n            this._zeroes = equ.solutions\r\n            this.dirty_zeroes = false\r\n        }\r\n\r\n        return this._zeroes\r\n    };\r\n\r\n    // TODO: analyse the next functions to determine if they are useful or not...\r\n    monomByDegree = (degree?: Fraction | number, letter?: string): Monom => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomByDegree(this.degree(letter), letter);\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter).isEqual(degree)) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        // Nothing was found - return the null monom.\r\n        return new Monom().zero();\r\n    };\r\n\r\n    monomsByDegree = (degree?: number | Fraction, letter?: string): Monom[] => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomsByDegree(this.degree(letter));\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        let Ms: Monom[] = [];\r\n\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter) === degree) {\r\n                Ms.push(m.clone())\r\n            }\r\n        }\r\n\r\n        return Ms\r\n        // Nothing was found - retur\r\n    }\r\n\r\n    // Used in LinearSystem.tex\r\n    monomByLetter = (letter: string): Monom => {\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.hasLetter(letter)) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        return new Monom().zero();\r\n    };\r\n\r\n    // Next functions are used for for commonMonom, which is used in the factorize method.\r\n    getDenominators = (): number[] => {\r\n        const denominators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            denominators.push(m.coefficient.denominator);\r\n        }\r\n        return denominators;\r\n    };\r\n\r\n    getNumerators = (): number[] => {\r\n        const numerators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            numerators.push(m.coefficient.numerator);\r\n        }\r\n        return numerators;\r\n    };\r\n\r\n    lcmDenominator = (): number => {\r\n        return Numeric.lcm(...this.getDenominators());\r\n    };\r\n    // ------------------------------------------\r\n    // Polynoms factorization functions\r\n\r\n    gcdDenominator = (): number => {\r\n        return Numeric.gcd(...this.getDenominators());\r\n    };\r\n\r\n    lcmNumerator = (): number => {\r\n        return Numeric.lcm(...this.getNumerators());\r\n    };\r\n\r\n    gcdNumerator = (): number => {\r\n        return Numeric.gcd(...this.getNumerators());\r\n    };\r\n    // ------------------------------------------\r\n    // Polynoms helpers functions\r\n    // -------------------------------------\r\n\r\n    commonMonom = (): Monom => {\r\n        let M = new Monom().one(), numerator: number, denominator: number, degree = this.degree();\r\n\r\n        numerator = this.gcdNumerator();\r\n        denominator = this.gcdDenominator();\r\n\r\n        M.coefficient = new Fraction(numerator, denominator);\r\n        for (let L of this.variables) {\r\n            // Initialize the setLetter with the max degree\r\n            M.setLetter(L, degree);\r\n            for (let m of this._monoms) {\r\n                M.setLetter(L, Fraction.min(m.degree(L), M.degree(L)));\r\n                if (M.degree(L).isZero()) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return M;\r\n    }\r\n\r\n    limitToInfinity = (letter?: string): Fraction => {\r\n        const M = this.monomByDegree(undefined, letter),\r\n            sign = M.coefficient.sign(),\r\n            degree = M.degree(letter)\r\n\r\n        if (degree.isStrictlyPositive()) {\r\n            return sign === 1 ? (new Fraction()).infinite() : (new Fraction()).infinite().opposed()\r\n        } else if (degree.isZero()) {\r\n            return M.coefficient\r\n        }\r\n\r\n        // Any other cases\r\n        return (new Fraction()).zero()\r\n    }\r\n    limitToNegativeInfinity = (letter?: string): Fraction => {\r\n        const M = this.monomByDegree(undefined, letter),\r\n            sign = M.coefficient.sign(),\r\n            degree = M.degree(letter)\r\n\r\n        if (degree.isStrictlyPositive()) {\r\n            return sign === -1 ? (new Fraction()).infinite() : (new Fraction()).infinite().opposed()\r\n        } else if (degree.isZero()) {\r\n            return M.coefficient\r\n        }\r\n\r\n        // Any other cases\r\n        return (new Fraction()).zero()\r\n    }\r\n\r\n    private _getAllPotentialFactors = (P: Polynom, maxDegree: number, letter: string): Polynom[] => {\r\n        let m1 = P.monoms[0].dividers,\r\n            m2 = P.monoms[P.monoms.length - 1].dividers\r\n\r\n        let allDividers: Polynom[] = []\r\n        m1.forEach(m1d => {\r\n            // Get only polynom that has a degree less than a specific value\r\n            if (m1d.degree(letter).leq(maxDegree)) {\r\n                m2.forEach(m2d => {\r\n                    if (m1d.degree(letter).isNotEqual(m2d.degree(letter))) {\r\n                        allDividers.push(new Polynom(m1d, m2d))\r\n                        allDividers.push(new Polynom(m1d, m2d.clone().opposed()))\r\n                    }\r\n                })\r\n            }\r\n        })\r\n\r\n        return allDividers\r\n\r\n    }\r\n\r\n    private _parseString(inputStr: string, ...values: unknown[]): Polynom {\r\n        if (values === undefined || values.length === 0) {\r\n            inputStr = '' + inputStr;\r\n            this._rawString = inputStr.trim().replaceAll(' ','');\r\n\r\n            // Parse the polynom using the shutting yard algorithm\r\n            if (inputStr !== '' && !isNaN(Number(inputStr))) {\r\n                this.empty();\r\n                // It's a simple number.\r\n                let m = new Monom(inputStr);\r\n                // m.coefficient = new Fraction(inputStr);\r\n                // m.literalStr = '';\r\n                this.add(m);\r\n                return this;\r\n            }\r\n\r\n            // Parse the string.\r\n            return this.shutingYardToReducedPolynom(inputStr);\r\n        } else if (/^[a-z]/.test(inputStr)) {\r\n            // We assume the inputStr contains only letters.\r\n            this.empty();\r\n\r\n            let fractions = values.map(x => new Fraction(x));\r\n            // Multiple setLetter version\r\n            if (inputStr.length > 1) {\r\n                // TODO: check that the number of values given correspond to the letters (+1 eventually)\r\n                let letters = inputStr.split(''),\r\n                    i = 0;\r\n                for (let F of fractions) {\r\n                    let m = new Monom();\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = letters[i] || '';\r\n                    this.add(m);\r\n                    i++;\r\n                }\r\n            }\r\n            // Single setLetter version\r\n            else {\r\n                let n = fractions.length - 1;\r\n                for (let F of fractions) {\r\n                    let m = new Monom()\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = `${inputStr}^${n}`\r\n                    this.add(m);\r\n                    n--;\r\n                }\r\n            }\r\n            return this;\r\n        } else {\r\n            return this.zero();\r\n        }\r\n    }\r\n\r\n    private genDisplay = (output?: string, forceSign?: boolean, wrapParentheses?: boolean, withAllMultSign?: boolean): string => {\r\n        let P: string = '';\r\n\r\n        for (const k of this._monoms) {\r\n            if (k.coefficient.value === 0) {\r\n                continue;\r\n            }\r\n\r\n            // The monom to be displayed\r\n            let m\r\n            if (withAllMultSign) {\r\n                m = k.plotFunction\r\n            } else {\r\n                m = (output === 'tex') ? k.tex : k.display\r\n            }\r\n\r\n            P += `${(k.coefficient.sign() === 1 && (P !== '' || forceSign === true)) ? '+' : ''}${m}`;\r\n        }\r\n\r\n        if (wrapParentheses === true && this.length > 1) {\r\n            if (output === 'tex') {\r\n                P = `\\\\left( ${P} \\\\right)`;\r\n            } else {\r\n                P = `(${P})`;\r\n            }\r\n        }\r\n\r\n        if (P === '') {\r\n            P = '0';\r\n        }\r\n        return P;\r\n    };\r\n\r\n    /**\r\n     * Main parse using a shutting yard class\r\n     * @param inputStr\r\n     */\r\n    private shutingYardToReducedPolynom = (inputStr: string): Polynom => {\r\n        // Get the RPN array of the current expression\r\n        const SY: Shutingyard = new Shutingyard().parse(inputStr);\r\n        const rpn: { token: string, tokenType: string }[] = SY.rpn;\r\n\r\n        // New version for reducing shuting yard.\r\n        this.zero()\r\n\r\n        let stack: Polynom[] = [],\r\n            monom: Monom = new Monom()\r\n\r\n        // Loop through the\r\n        for (const element of rpn) {\r\n            this.addToken(stack, element);\r\n        }\r\n\r\n        if (stack.length === 1) {\r\n            this.add(stack[0])\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    private multiplyByPolynom = (P: Polynom): Polynom => {\r\n        const M: Monom[] = [];\r\n        for (const m1 of this._monoms) {\r\n            for (const m2 of P.monoms) {\r\n                M.push(Monom.xmultiply(m1, m2));\r\n            }\r\n        }\r\n\r\n        this._monoms = M;\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.multiply(F);\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByInteger = (nb: number): Polynom => {\r\n        return this.multiplyByFraction(new Fraction(nb));\r\n    };\r\n\r\n    private multiplyByMonom = (M: Monom): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.multiply(M)\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n    private divideByInteger = (nb: number): Polynom => {\r\n        const nbF = new Fraction(nb);\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(nbF);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    private divideByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(F);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    private _factorize2ndDegree = (letter: string): Polynom[] => {\r\n        let P1: Polynom, P2: Polynom,\r\n            a, b, c, delta, x1, x2, factor;\r\n\r\n        // One variable only\r\n        if (this.numberOfVars === 1) {\r\n            a = this.monomByDegree(2, letter).coefficient;\r\n            b = this.monomByDegree(1, letter).coefficient;\r\n            c = this.monomByDegree(0, letter).coefficient;\r\n            delta = b.clone().pow(2).subtract(a.clone().multiply(c).multiply(4));\r\n\r\n            if (delta.isZero()) {\r\n                x1 = b.clone().opposed().divide(a.clone().multiply(2))\r\n                P1 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                P2 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                factor = a.divide(x1.denominator).divide(x1.denominator);\r\n\r\n                if (!factor.isOne()) {\r\n                    // TODO: Update new Polynom to accept anything...\r\n                    return [new Polynom(factor.display), P1, P2]\r\n                } else {\r\n                    return [P1, P2]\r\n                }\r\n            } else if (delta.isPositive() && delta.isSquare()) {\r\n                x1 = b.clone().opposed()\r\n                    .add(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n                x2 = b.clone().opposed()\r\n                    .subtract(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n\r\n                // (2x+5)(3x-2)\r\n                // 6x^2+11x-10\r\n                // a = 6, b = 11, c = -10\r\n                // delta = 121-4*6*(-10) = 361= 19^2\r\n                // x1 = (-11 + 19)  / 12 = 8/12 = 2/3\r\n                // x2 = (-11 - 19)  / 12 = -30/12 = -5/2\r\n                factor = a.divide(x1.denominator).divide(x2.denominator);\r\n                if (factor.isOne()) {\r\n                    return [\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n                } else {\r\n                    return [\r\n                        new Polynom(factor.display),\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n\r\n                }\r\n            } else {\r\n                // No solution possible - return the complete value.\r\n                return [this.clone()]\r\n            }\r\n        } else {\r\n            // If multiple variables, only handle perfect squares...\r\n            a = this.monomByDegree(2, letter);\r\n            b = this.monomByDegree(1, letter);\r\n            c = this.monomByDegree(0, letter);\r\n\r\n\r\n            if (a.isLiteralSquare() && c.isLiteralSquare()) {\r\n                // Check the middle item is same as...\r\n                if (b.clone().pow(2).isSameAs(a.clone().multiply(c))) {\r\n                    // Determine if the coefficient values matches.\r\n\r\n                    // Search 4 values (r, s, t, u) that matches:\r\n                    // (r X + s Y)(t X + u Y) = rt X^2 + (ru + st) XY + su Y^2\r\n\r\n                    let xPolynom = new Polynom('x', a.coefficient, b.coefficient, c.coefficient);\r\n                    let xFactors = xPolynom._factorize2ndDegree('x');\r\n\r\n                    let factors = [], xyzPolynom: Polynom;\r\n\r\n                    if (xFactors.length >= 2) {\r\n                        for (let p of xFactors) {\r\n                            if (p.degree().isZero()) {\r\n                                factors.push(p.clone())\r\n                            } else {\r\n                                xyzPolynom = p.clone();\r\n                                xyzPolynom.monoms[0].literal = a.literalSqrt\r\n                                xyzPolynom.monoms[1].literal = c.literalSqrt\r\n                                factors.push(xyzPolynom.clone())\r\n                            }\r\n                        }\r\n                        return factors\r\n                    }\r\n                }\r\n            }\r\n\r\n            return [this.clone()]\r\n        }\r\n    }\r\n\r\n    private _factorizeByGroups = (): Polynom[] => {\r\n        // TODO: Factorize by groups.\r\n        return [];\r\n    }\r\n}\r\n","/**\r\n * Rational polynom module contains everything necessary to handle rational polynoms.\r\n * @module Polynom\r\n */\r\n\r\nimport {IEuclidian, Polynom} from \"./polynom\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {literalType} from \"./monom\";\r\nimport {PARTICULAR_SOLUTION} from \"./equation\";\r\nimport {RationalStudy} from \"./study/rationalStudy\";\r\n\r\n/**\r\n * Rational class can handle rational polynoms\r\n */\r\nexport class Rational {\r\n    private _denominator: Polynom;\r\n    private _numerator: Polynom;\r\n    private _rawString: string;\r\n\r\n    /**\r\n     *\r\n     * @param numerator\r\n     * @param denominator\r\n     */\r\n    constructor(numerator?: Polynom | string, denominator?: Polynom | string) {\r\n        if (numerator instanceof Polynom) {\r\n            this._numerator = numerator.clone()\r\n        } else if (typeof numerator === 'string') {\r\n            this._numerator = new Polynom(numerator)\r\n        } else {\r\n            this._numerator = new Polynom()\r\n        }\r\n\r\n        if (denominator instanceof Polynom) {\r\n            this._denominator = denominator.clone()\r\n        } else if (typeof denominator === 'string') {\r\n            this._denominator = new Polynom(denominator)\r\n        } else {\r\n            this._denominator = new Polynom()\r\n        }\r\n\r\n    }\r\n\r\n    get numerator(): Polynom {\r\n        return this._numerator\r\n    }\r\n\r\n    get denominator(): Polynom {\r\n        return this._denominator\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\frac{ ${this._numerator.tex} }{ ${this._denominator.tex} }`;\r\n    }\r\n\r\n    get texFactors(): string {\r\n        return `\\\\frac{ ${this._numerator.texFactors} }{ ${this._denominator.texFactors} }`\r\n    }\r\n\r\n    get plotFunction(): string {\r\n        return `(${this._numerator.plotFunction})/(${this._denominator.plotFunction})`\r\n    }\r\n\r\n    clone = (): Rational => {\r\n        return new Rational(\r\n            this._numerator.clone(),\r\n            this._denominator.clone()\r\n        )\r\n    }\r\n\r\n    domain = (): string => {\r\n        let zeroes = this._denominator.getZeroes();\r\n\r\n        if (zeroes.length === 0 || zeroes[0].tex === PARTICULAR_SOLUTION.real) {\r\n            return PARTICULAR_SOLUTION.varnothing\r\n        } else if (zeroes[0].tex === PARTICULAR_SOLUTION.varnothing) {\r\n            return PARTICULAR_SOLUTION.real\r\n        } else {\r\n            return '\\\\mathbb{R}\\\\setminus\\\\left\\\\{' +\r\n                zeroes.map(x => x.tex).join(';') + '\\\\right\\\\}'\r\n        }\r\n    }\r\n\r\n    amplify = (P: Polynom): Rational => {\r\n        this._numerator.multiply(P);\r\n        this._denominator.multiply(P);\r\n\r\n        return this;\r\n    }\r\n\r\n    derivative = (letter?: string): Rational => {\r\n        let N = this._numerator.clone(),\r\n            D = this._denominator.clone(),\r\n            dN = N.clone().derivative(letter),\r\n            dD = D.clone().derivative(letter)\r\n\r\n        this._numerator = dN.clone().multiply(D).subtract(N.clone().multiply(dD))\r\n        this._denominator = D.clone().pow(2)\r\n\r\n        return this\r\n    }\r\n\r\n    factorize = (letter?: string): Rational => {\r\n        this._numerator.factorize(letter)\r\n        this._denominator.factorize(letter)\r\n        return this\r\n    }\r\n\r\n    simplify = (P: Polynom): Rational => {\r\n        let NumeratorEuclidien = this._numerator.euclidian(P);\r\n        if (!NumeratorEuclidien.reminder.isZero()) {\r\n            return this;\r\n        }\r\n\r\n        let DenominatorEuclidien = this._denominator.euclidian(P);\r\n        if (!DenominatorEuclidien.reminder.isZero()) {\r\n            return this;\r\n        }\r\n\r\n        this._numerator = NumeratorEuclidien.quotient;\r\n        this._denominator = DenominatorEuclidien.quotient;\r\n        return this;\r\n    }\r\n\r\n    reduce = (): Rational => {\r\n        this._numerator.factorize();\r\n        for (let f of this._numerator.factors) {\r\n            this.simplify(f);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    opposed = (): Rational => {\r\n        this._numerator.opposed();\r\n        return this;\r\n    }\r\n\r\n    add = (R: Rational): Rational => {\r\n        // 1. Make sure both rational are at the same denominator\r\n        // 2. Add the numerators.\r\n        // 3. Simplify\r\n\r\n        // Store the adding denominator\r\n        let denominator = this._denominator.clone()\r\n\r\n        // Amplif the main rational polynom by the adding denominator\r\n        this.amplify(R._denominator)\r\n\r\n        // Add to the numerator the adding value...\r\n        this._numerator.add(R._numerator.clone().multiply(denominator));\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (R: Rational): Rational => {\r\n        return this.add(R.clone().opposed())\r\n    }\r\n\r\n    euclidian = (): IEuclidian => {\r\n        return this._numerator.euclidian(this._denominator)\r\n    }\r\n\r\n    // TODO : where and how is used limits ?\r\n    limits = (value: Fraction | number, offset?: string, letter?: string): Fraction => {\r\n        if (value === Infinity || value === -Infinity) {\r\n            let {quotient, reminder} = this._numerator.clone().euclidian(this._denominator)\r\n\r\n            // quotient is positive => it will be infinite.\r\n            if (quotient.degree(letter).isStrictlyPositive()) {\r\n                return value === Infinity ? quotient.limitToInfinity(letter) : quotient.limitToNegativeInfinity(letter)\r\n                // return quotient.monomByDegree(undefined, letter).coefficient.sign()===1?(new Fraction()).infinite():(new Fraction()).infinite().opposed()\r\n            } else {\r\n                return quotient.monomByDegree(undefined, letter).coefficient\r\n            }\r\n        } else {\r\n            let evalValues: literalType = {},\r\n                evalValuesOffset: literalType = {},\r\n                theLimit: Fraction | number,\r\n                theSign: number,\r\n                FR = this.clone().reduce()\r\n\r\n            evalValues[letter === undefined ? 'x' : letter] = new Fraction(value)\r\n\r\n            if (offset !== 'above' && offset !== 'below') {\r\n                theLimit = FR._numerator.evaluate(evalValues)\r\n                    .divide(FR._denominator.evaluate(evalValues))\r\n\r\n                return theLimit.isInfinity() ? theLimit.abs() : theLimit\r\n            } else {\r\n                if (offset === 'above') {\r\n                    evalValuesOffset[letter === undefined ? 'x' : letter] = (new Fraction(value)).add(0.000001)\r\n                } else if (offset === 'below') {\r\n                    evalValuesOffset[letter === undefined ? 'x' : letter] = (new Fraction(value)).subtract(0.000001)\r\n                }\r\n\r\n                theLimit = FR._numerator.evaluate(evalValues)\r\n                    .divide(FR._denominator.evaluate(evalValues))\r\n                theSign = FR._numerator.evaluate(evalValuesOffset)\r\n                    .divide(FR._denominator.evaluate(evalValuesOffset)).sign()\r\n\r\n                if (theLimit.isInfinity()) {\r\n                    return theSign === 1 ? theLimit.abs() : theLimit.abs().opposed()\r\n                } else {\r\n                    return theLimit\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    evaluate = (values: literalType | Fraction | number): Fraction => {\r\n        const r = new Fraction().zero();\r\n\r\n        let N = this._numerator.evaluate(values),\r\n            D = this._denominator.evaluate(values)\r\n\r\n        return N.divide(D)\r\n    };\r\n\r\n    study = (): RationalStudy => {\r\n        return new RationalStudy(this)\r\n    }\r\n}\r\n","/**\r\n * Rational polynom module contains everything necessary to handle rational polynoms.\r\n * @module Polynom\r\n */\r\n\r\nimport {Rational} from \"./rational\";\r\nimport {ISolution} from \"./equation\";\r\nimport {Polynom} from \"./polynom\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Point} from \"../geometry/point\";\r\nimport {NumExp} from \"../expressions/numexp\";\r\n\r\nexport type StudyableFunction = Rational\r\n\r\nexport enum ZEROTYPE {\r\n    ZERO = 'z',\r\n    DEFENCE = 'd',\r\n    NOTHING = 't'\r\n}\r\n\r\nexport interface IZero extends ISolution {\r\n    extrema: FUNCTION_EXTREMA,\r\n    type: ZEROTYPE\r\n}\r\n\r\nexport enum ASYMPTOTE {\r\n    VERTICAL = \"av\",\r\n    HORIZONTAL = \"ah\",\r\n    SLOPE = \"ao\",\r\n    HOLE = \"hole\"\r\n}\r\n\r\nexport interface IAsymptote {\r\n    deltaX: StudyableFunction\r\n    fx: Polynom,\r\n    limits: string,\r\n    tableOfSign: ITableOfSigns\r\n    tex: string,\r\n    type: ASYMPTOTE,\r\n    zero: IZero,\r\n}\r\n\r\nexport enum FUNCTION_EXTREMA {\r\n    MIN = \"min\",\r\n    MAX = \"max\",\r\n    FLAT = \"flat\",\r\n    NOTHING = \"\"\r\n}\r\n\r\nexport interface IExtrema {\r\n    tex: {\r\n        x: string,\r\n        y: string\r\n    },\r\n    type: FUNCTION_EXTREMA,\r\n    value: {\r\n        x: number,\r\n        y: number\r\n    }\r\n\r\n}\r\n\r\nexport interface ITableOfSigns {\r\n    extremes: { [Key: string]: IExtrema },\r\n    factors: Polynom[],\r\n    fx: StudyableFunction,\r\n    signs: (string[])[],\r\n    tex: string\r\n    type: TABLE_OF_SIGNS\r\n    zeroes: IZero[],\r\n}\r\n\r\nexport enum TABLE_OF_SIGNS {\r\n    SIGNS = \"signs\",\r\n    GROWS = \"grows\",\r\n    VARIATIONS = \"variatins\"\r\n}\r\n\r\nexport interface StudyConfig {\r\n    asymptotes?: boolean,\r\n    derivative?: boolean,\r\n    domain?: boolean,\r\n    name?: string,\r\n    signs?: boolean,\r\n    variations?: boolean\r\n}\r\n\r\n/**\r\n * The study class is a \"function study\" class that will get:\r\n * fx               : get the function\r\n * domain           : string\r\n * zeroes           : Object (tex, IZero)\r\n * signs            : table of signs + tex output  using tkz-tab\r\n * av               : vertical asymptotic\r\n * ah               : horizontal asymptotic\r\n * ao               : obliques\r\n * deltaX           : position relative\r\n * dx               : derivative\r\n * grows            : growing table + tex output  using tkz-tab\r\n * ddx              : dérivée seconde\r\n * variations       : variation table + tex output  using tkz-tab\r\n */\r\nexport class Study {\r\n    fx: StudyableFunction\r\n    private _asymptotes: IAsymptote[]\r\n    private _derivative: ITableOfSigns\r\n    private _signs: ITableOfSigns\r\n    private _variations: ITableOfSigns\r\n    private _zeroes: IZero[]\r\n    private config: StudyConfig\r\n    private name: string\r\n\r\n    constructor(fx: StudyableFunction, config?: StudyConfig | string) {\r\n        this.fx = fx\r\n\r\n        this.config = {\r\n            name :'f',\r\n            domain :true,\r\n            asymptotes :true,\r\n            signs :true,\r\n            derivative :true,\r\n            variations :true,\r\n        }\r\n\r\n        if (config) {\r\n            if (typeof config === 'string') {\r\n                const d = config.split(',')\r\n                this.config = {}\r\n                let n = d.filter(x=>x.includes('(x)'))\r\n                if(n.length===1){\r\n                    this.config.name = n[0].split('(x)')[0]\r\n                }\r\n                this.config.domain = d.includes('d')\r\n                this.config.asymptotes = d.includes('a')\r\n                this.config.signs = d.includes('signs')\r\n                this.config.derivative = d.includes('dx')\r\n                this.config.variations = d.includes('ddx')\r\n            } else {\r\n                this.config = config\r\n            }\r\n        }\r\n\r\n        this.name = this.config?.name ?? 'f'\r\n\r\n        this.makeStudy()\r\n        return this\r\n    }\r\n\r\n    get zeroes(): IZero[] {\r\n        return this._zeroes;\r\n    }\r\n\r\n    get domain(): string {\r\n        return this.fx.domain()\r\n    }\r\n\r\n    get signs(): ITableOfSigns {\r\n        return this._signs;\r\n    }\r\n\r\n    get asymptotes(): IAsymptote[] {\r\n        return this._asymptotes;\r\n    }\r\n\r\n    get derivative(): ITableOfSigns {\r\n        return this._derivative;\r\n    }\r\n\r\n    get texSigns(): string {\r\n        return this._makeTexFromTableOfSigns(this._signs)\r\n    }\r\n\r\n    get texGrows(): string {\r\n        return this._makeTexFromTableOfSigns(this._derivative)\r\n    }\r\n\r\n    get texVariations(): string {\r\n        return this._makeTexFromTableOfSigns(this._variations)\r\n    }\r\n\r\n    makeStudy = (): void => {\r\n        this._zeroes = this.makeZeroes()\r\n\r\n        if (this.config.signs) this._signs = this.makeSigns()\r\n\r\n        if (this.config.asymptotes) this._asymptotes = this.makeAsymptotes()\r\n\r\n        if (this.config.derivative) this._derivative = this.makeDerivative()\r\n\r\n        if (this.config.variations) this._variations = this.makeVariation()\r\n\r\n        // Table of signs / derivative / variation\r\n        if (this.config.signs) this._signs.tex = this.texSigns\r\n\r\n        if (this.config.derivative) this._derivative.tex = this.texGrows\r\n\r\n        if (this.config.variations) this._variations.tex = this.texVariations\r\n    };\r\n\r\n    indexOfZero = (zeroes: IZero[], zero: IZero | ISolution): number => {\r\n        for (let i = 0; i < zeroes.length; i++) {\r\n            if (zeroes[i].tex === zero.tex) {\r\n                return i\r\n            }\r\n        }\r\n        return -1\r\n    };\r\n\r\n    makeOneLineForSigns = (factor: Polynom, zeroes: IZero[], zeroSign: ZEROTYPE): string[] => {\r\n        let oneLine: string[] = [],\r\n            currentZero = factor.getZeroes().map(x => x.tex)\r\n\r\n        // First +/- sign, before the first zero\r\n        oneLine.push('')\r\n        if (factor.degree().isZero()) {\r\n            oneLine.push(factor.monoms[0].coefficient.sign() === 1 ? '+' : '-')\r\n        } else {\r\n            oneLine.push(factor.evaluate(zeroes[0].value - 1).sign() === 1 ? '+' : '-')\r\n        }\r\n\r\n        for (let i = 0; i < zeroes.length; i++) {\r\n            // Add the zero if it's the current one\r\n            oneLine.push(currentZero.includes(zeroes[i].tex) ? zeroSign : ZEROTYPE.NOTHING)\r\n\r\n            // + / - sign after the current zero\r\n            if (i < zeroes.length - 1) {\r\n                oneLine.push(factor.evaluate((zeroes[i].value + zeroes[i + 1].value) / 2).sign() === 1 ? '+' : '-')\r\n            } else if (i === zeroes.length - 1) {\r\n                oneLine.push(factor.evaluate(zeroes[i].value + 1).sign() === 1 ? '+' : '-')\r\n            }\r\n\r\n        }\r\n        oneLine.push('')\r\n\r\n        return oneLine\r\n    }\r\n\r\n    makeSignsResult = (signs: (string[])[]): string[] => {\r\n\r\n        // Initialize the result line with the first line of the signs table\r\n        let resultLine: string[] = signs[0].map((x, index) => {\r\n            if (index === 0 || index === signs[0].length - 1) {\r\n                return ''\r\n            }\r\n\r\n            if (index % 2 === 0) {\r\n                return 't'\r\n            }\r\n\r\n            return '+'\r\n        })\r\n\r\n        // Go through each lines (except the first)\r\n        for (let current of signs) {\r\n\r\n            for (let i = 0; i < current.length; i++) {\r\n                if (i % 2 === 0) {\r\n                    // t, z or d\r\n                    if (resultLine[i] === 'd') {\r\n                        continue\r\n                    }\r\n                    if (current[i] !== 't') {\r\n                        resultLine[i] = current[i]\r\n                    }\r\n                } else {\r\n                    // + or -\r\n                    if (current[i] === '-') {\r\n                        resultLine[i] = resultLine[i] === '+' ? '-' : '+'\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return resultLine\r\n    }\r\n\r\n    makeGrowsResult = (tos: ITableOfSigns): { growsLine: string[], extremes: { [Key: string]: IExtrema } } => {\r\n\r\n        // Use the last line (=> resultLine) to grab the necessary information\r\n        let signsAsArray = Object.values(tos.signs),\r\n            resultLine = signsAsArray[signsAsArray.length - 1],\r\n            growsLine: string[] = [],\r\n            extremes: { [Key: string]: IExtrema } = {},\r\n            zeroes = tos.zeroes\r\n\r\n        // Get the extremes\r\n        for (let i = 0; i < zeroes.length; i++) {\r\n\r\n            // Get the corresponding item in the resultLine.\r\n            let pos = 2 * i + 2\r\n            if (resultLine[pos] === 'z') {\r\n\r\n                // It's a zero. Get the coordinates\r\n                let x: number, y: number, zero = zeroes[i].exact,\r\n                    pt: Point,\r\n                    xTex: string, yTex: string,\r\n                    pointType: FUNCTION_EXTREMA\r\n\r\n                // TODO: NumExp should parse something that isn't yet plotFunction\r\n                let exp = new NumExp(this.fx.plotFunction)\r\n\r\n                if (zero instanceof Fraction) {\r\n                    let value: Fraction = zero,\r\n                        evalY = this.fx.evaluate(value)\r\n\r\n                    x = zero.value\r\n                    y = evalY.value\r\n                    xTex = zero.tex\r\n                    yTex = evalY.tex\r\n                } else {\r\n                    x = zeroes[i].value\r\n                    y = exp.evaluate({x})\r\n\r\n                    xTex = x.toFixed(2)\r\n                    yTex = y.toFixed(2)\r\n                }\r\n\r\n                // Determine the type of the zero.\r\n                if (resultLine[pos - 1] === resultLine[pos + 1]) {\r\n                    pointType = FUNCTION_EXTREMA.FLAT\r\n                } else if (resultLine[pos - 1] === '+') {\r\n                    pointType = FUNCTION_EXTREMA.MAX\r\n                } else {\r\n                    pointType = FUNCTION_EXTREMA.MIN\r\n\r\n                }\r\n\r\n                // Add the point to the list\r\n                extremes[zeroes[i].tex] = {\r\n                    type: pointType,\r\n                    tex: {x: xTex, y: yTex},\r\n                    value: {x, y}\r\n                }\r\n            }\r\n        }\r\n\r\n        // Create the grows line, based on tkz-tab\r\n        // \\tkzTabLine{  ,  +  ,  z    ,  -  ,  d  ,  -  ,  z  ,  +  ,  }\r\n        // \\tkzTabVar{     -/  , +/$3$ ,       -D+/ , -/$1$  , +/  }\r\n        growsLine.push(resultLine[1] === '+' ? '-/' : '+/')\r\n        for (let i = 1; i < resultLine.length - 1; i++) {\r\n            if (resultLine[i] === \"z\") {\r\n                let extr = extremes[zeroes[(i - 2) / 2].tex]\r\n\r\n                growsLine.push(`${resultLine[i - 1]}/\\\\(${extr.type}(${extr.tex.x};${extr.tex.y})\\\\)`)\r\n            } else if (resultLine[i] === 'd') {\r\n                growsLine.push(`${resultLine[i - 1]}D${resultLine[i + 1] === '+' ? '-' : '+'}/`)\r\n            }\r\n        }\r\n        growsLine.push(`${resultLine[resultLine.length - 2]}/`)\r\n\r\n        return {growsLine, extremes}\r\n    }\r\n\r\n    makeVariationsResult = (tos: ITableOfSigns): { varsLine: string[], extremes: { [Key: string]: IExtrema } } => {\r\n        // TODO: make variations result is not yet implemented.\r\n        let extremes = {},\r\n            varsLine: string[] = []\r\n        return {varsLine, extremes}\r\n    }\r\n\r\n    makeZeroes(): IZero[] {\r\n        return []\r\n    };\r\n\r\n    makeSigns(): ITableOfSigns {\r\n        return {\r\n            type: TABLE_OF_SIGNS.SIGNS,\r\n            fx: null,\r\n            factors: [],\r\n            zeroes: [],\r\n            signs: [],\r\n            extremes: {},\r\n            tex: ''\r\n        }\r\n    };\r\n\r\n    makeAsymptotes(): IAsymptote[] {\r\n        return []\r\n    }\r\n\r\n    makeDerivative(): ITableOfSigns {\r\n        return {\r\n            type: TABLE_OF_SIGNS.GROWS,\r\n            fx: null,\r\n            factors: [],\r\n            zeroes: [],\r\n            signs: [],\r\n            extremes: {},\r\n            tex: ''\r\n        }\r\n    }\r\n\r\n    makeVariation(): ITableOfSigns {\r\n        return {\r\n            type: TABLE_OF_SIGNS.VARIATIONS,\r\n            fx: null,\r\n            factors: [],\r\n            zeroes: [],\r\n            signs: [],\r\n            extremes: {},\r\n            tex: ''\r\n        }\r\n    }\r\n\r\n    drawCode = (): string => {\r\n        // Function as string\r\n        let code = `f(x)=${this.fx.plotFunction}`\r\n\r\n        // Asymptotes\r\n        let i: number = 1\r\n        this.asymptotes.forEach(asymptote => {\r\n            if (asymptote.type === ASYMPTOTE.VERTICAL) {\r\n                code += `\\nav_${i}=line x=${asymptote.zero.value}->red,dash`\r\n                i++\r\n            } else if (asymptote.type === ASYMPTOTE.HORIZONTAL) {\r\n                code += `\\nah=line y=${asymptote.fx.monoms[0].coefficient.value}->orange,dash`\r\n            } else if (asymptote.type === ASYMPTOTE.SLOPE) {\r\n                code += `\\nao=line y=${asymptote.fx.plotFunction}->red,dash`\r\n            }\r\n            i++\r\n        })\r\n\r\n        // Extremes\r\n        for (let zero in this.derivative.extremes) {\r\n            let extreme = this.derivative.extremes[zero]\r\n\r\n            code += `\\nM_${i}(${extreme.value.x},${extreme.value.y})*`\r\n            i++\r\n        }\r\n\r\n        // Zeroes\r\n        this.zeroes.forEach(zero => {\r\n            if (zero.type === ZEROTYPE.ZERO) {\r\n                code += `\\nZ_${i}(${zero.value},0)*`\r\n                i++\r\n            }\r\n        })\r\n\r\n        return code\r\n    }\r\n\r\n    private _makeTexFromTableOfSigns = (tos: ITableOfSigns): string => {\r\n        let factors = tos.factors.map(x => `\\\\(${x.tex}\\\\)/1`),\r\n            factorsFx = `\\\\(${this.name}(x)\\\\)/1.2`,\r\n            zeroes = tos.zeroes\r\n\r\n        // Add the last lines \"label\"\r\n        if (tos.type === TABLE_OF_SIGNS.GROWS) {\r\n            factorsFx = `\\\\(${this.name}'(x)\\\\)/1.2,\\\\(f(x)\\\\)/2`\r\n        } else if (tos.type === TABLE_OF_SIGNS.VARIATIONS) {\r\n            factorsFx = `\\\\(${this.name}''(x)\\\\)/1.2,\\\\(f(x)\\\\)/2`\r\n        }\r\n\r\n        // Create the tikzPicture header\r\n        let tex = `\\\\begin{tikzpicture}\r\n\\\\tkzTabInit[lgt=3,espcl=2,deltacl=0]{/1.2,${factors.join(',')},/.1,${factorsFx} }{{\\\\scriptsize \\\\hspace{1cm} \\\\(-\\\\infty\\\\)},\\\\(${zeroes.map(x => x.tex).join('\\\\),\\\\(')}\\\\),{\\\\scriptsize \\\\hspace{-1cm} \\\\(+\\\\infty\\\\)}}`\r\n\r\n        let pos\r\n        for (pos = 0; pos < tos.factors.length; pos++) {\r\n            tex += (`\\n\\\\tkzTabLine{${tos.signs[pos].join(',')}}`)\r\n        }\r\n\r\n        // Add the result line\r\n        tex += (`\\n\\\\tkzTabLine{${tos.signs[pos].join(',')}}`)\r\n        // Add the grows / vars line\r\n        if (tos.type === TABLE_OF_SIGNS.GROWS) {\r\n            tex += (`\\n\\\\tkzTabVar{${tos.signs[pos + 1].join(',')}}`)\r\n        } else if (tos.type === TABLE_OF_SIGNS.VARIATIONS) {\r\n            // TODO: Check variations table for as tex\r\n            tex += (`\\n\\\\tkzTabVar{${tos.signs[pos + 1].join(',')}}`)\r\n        }\r\n\r\n        tex += `\\n\\\\end{tikzpicture}`\r\n\r\n        return tex\r\n    }\r\n}\r\n","/**\r\n * The study class is a \"function study\" class that will get:\r\n * fx               : get the function\r\n * domain           : string\r\n * zeroes           : Object (tex, IZero)\r\n * signs            : table of signs + tex output  using tkz-tab\r\n * av               : vertical asymptotic\r\n * ah               : horizontal asymptotic\r\n * ao               : obliques\r\n * deltaX           : position relative\r\n * dx               : derivative\r\n * grows            : growing table + tex output  using tkz-tab\r\n * ddx              : dérivée seconde\r\n * variations       : variation table + tex output  using tkz-tab\r\n */\r\nimport {\r\n    ASYMPTOTE,\r\n    FUNCTION_EXTREMA,\r\n    IAsymptote,\r\n    ITableOfSigns,\r\n    IZero,\r\n    Study,\r\n    StudyableFunction, StudyConfig,\r\n    TABLE_OF_SIGNS,\r\n    ZEROTYPE\r\n} from \"../study\";\r\nimport {Rational} from \"../rational\";\r\nimport {Fraction} from \"../../coefficients/fraction\";\r\nimport {Polynom} from \"../polynom\";\r\n\r\nexport class RationalStudy extends Study {\r\n    constructor(fx: StudyableFunction, config?: StudyConfig) {\r\n        super(fx, config)\r\n\r\n        return this\r\n    }\r\n\r\n    makeZeroes(): IZero[] {\r\n        return this._getZeroes(this.fx)\r\n    };\r\n\r\n    makeSigns(): ITableOfSigns {\r\n        let tos = this._getSigns(this.fx, this.zeroes)\r\n        return tos\r\n    };\r\n\r\n    makeAsymptotes(): IAsymptote[] {\r\n        const reduced: Rational = this.fx.clone().reduce()\r\n\r\n        // Vertical\r\n        let asymptotes: IAsymptote[] = []\r\n        this.zeroes.filter(x => x.type === ZEROTYPE.DEFENCE).forEach(zero => {\r\n            // Check if it's a hole or an asymptote\r\n            // TODO: Check for a hole ! Means calculate the limits !\r\n            let Ztype = ASYMPTOTE.VERTICAL,\r\n                tex = `x=${zero.tex}`\r\n            if (zero.exact instanceof Fraction) {\r\n                if (reduced.denominator.evaluate(zero.exact).isNotZero()) {\r\n                    Ztype = ASYMPTOTE.HOLE\r\n                    tex = `(${zero.tex};${reduced.evaluate(zero.exact).tex})`\r\n                }\r\n            } else {\r\n                if (reduced.denominator.evaluate(zero.value).isNotZero()) {\r\n                    Ztype = ASYMPTOTE.HOLE\r\n                    tex = `(${zero.tex};${reduced.evaluate(zero.value).tex})`\r\n                }\r\n            }\r\n\r\n            asymptotes.push({\r\n                fx: null,\r\n                type: Ztype,\r\n                tex: tex,\r\n                zero: zero,\r\n                limits: `\\\\lim_{x\\\\to${zero.tex} }\\\\ f(x) = \\\\pm\\\\infty`,\r\n                deltaX: null,\r\n                tableOfSign: null\r\n            })\r\n        })\r\n\r\n        // Sloped asymptote\r\n        let NDegree = this.fx.numerator.degree(),\r\n            DDegree = this.fx.denominator.degree()\r\n        if (NDegree.isEqual(DDegree)) {\r\n            let H = this.fx.numerator.monomByDegree().coefficient.clone().divide(this.fx.denominator.monomByDegree().coefficient),\r\n                Htex = H.tex\r\n\r\n            let {reminder} = reduced.euclidian(),\r\n                deltaX = new Rational(reminder, reduced.denominator)\r\n\r\n\r\n            asymptotes.push({\r\n                fx: new Polynom(H),\r\n                type: ASYMPTOTE.HORIZONTAL,\r\n                tex: `y=${Htex}`,\r\n                zero: null,\r\n                limits: `\\\\lim_{x\\\\to\\\\infty}\\\\ f(x) = ${Htex}`,\r\n                deltaX,\r\n                tableOfSign: this._getSigns(deltaX)\r\n            })\r\n        } else if (DDegree.greater(NDegree)) {\r\n            asymptotes.push({\r\n                fx: new Polynom('0'),\r\n                type: ASYMPTOTE.HORIZONTAL,\r\n                tex: `y=0`,\r\n                zero: null,\r\n                limits: `\\\\lim_{x\\\\to\\\\infty}\\\\ f(x) = ${0}`,\r\n                deltaX: null,\r\n                tableOfSign: null\r\n            })\r\n        } else if (NDegree.value - 1 === DDegree.value) {\r\n            // Calculate the slope\r\n            let {quotient, reminder} = reduced.euclidian(),\r\n                deltaX = new Rational(reminder, reduced.denominator)\r\n\r\n            asymptotes.push({\r\n                fx: quotient.clone(),\r\n                type: ASYMPTOTE.SLOPE,\r\n                tex: `y=${quotient.tex}`,\r\n                zero: null,\r\n                limits: ``,\r\n                deltaX: new Rational(reminder, reduced.denominator),\r\n                tableOfSign: this._getSigns(deltaX)\r\n            })\r\n        }\r\n\r\n        return asymptotes\r\n    };\r\n\r\n    makeDerivative(): ITableOfSigns {\r\n        let dx = this.fx.clone().derivative(),\r\n            tos = this._getSigns(dx, this._getZeroes(dx), TABLE_OF_SIGNS.GROWS)\r\n\r\n        let result = this.makeGrowsResult(tos)\r\n        tos.signs.push(result.growsLine)\r\n        tos.extremes = result.extremes\r\n        return tos\r\n    };\r\n\r\n    makeVariation(): ITableOfSigns {\r\n        // Get the zeroes, make signs.\r\n        let dx = this.derivative.fx.clone().derivative(),\r\n            tos = this._getSigns(dx, this._getZeroes(dx), TABLE_OF_SIGNS.VARIATIONS)\r\n\r\n        let result = this.makeVariationsResult(tos)\r\n        tos.signs.push(result.varsLine)\r\n        tos.extremes = result.extremes\r\n        return tos\r\n    };\r\n\r\n    private _getZeroes(fx: StudyableFunction) {\r\n        // All zeroes.\r\n        let zeroes: IZero[] = []\r\n\r\n        fx.numerator.getZeroes().filter(x => !isNaN(x.value)).forEach(z => {\r\n            // add the item\r\n            zeroes.push({\r\n                tex: z.tex,\r\n                value: z.value,\r\n                exact: z.exact,\r\n                extrema: FUNCTION_EXTREMA.NOTHING,\r\n                type: ZEROTYPE.ZERO\r\n            })\r\n        })\r\n\r\n        fx.denominator.getZeroes().filter(x => !isNaN(x.value)).forEach(z => {\r\n            let idx = this.indexOfZero(zeroes, z)\r\n\r\n            if (idx !== -1) {\r\n                zeroes[idx].type = ZEROTYPE.DEFENCE\r\n            } else {\r\n                // Add the item\r\n                zeroes.push({\r\n                    tex: z.tex,\r\n                    value: z.value,\r\n                    exact: z.exact,\r\n                    extrema: FUNCTION_EXTREMA.NOTHING,\r\n                    type: ZEROTYPE.DEFENCE\r\n                })\r\n            }\r\n        })\r\n\r\n        // sort all zeroes\r\n        zeroes.sort((a, b) => a.value - b.value)\r\n\r\n        return zeroes\r\n    }\r\n\r\n    private _getSigns(fx: Rational, zeroes?: IZero[], typeOfTable?: TABLE_OF_SIGNS): ITableOfSigns {\r\n        // Factorize the rational\r\n        let signs: (string[])[] = [],\r\n            factors: Polynom[] = []\r\n\r\n        if (zeroes === undefined) {\r\n            zeroes = this._getZeroes(fx)\r\n        }\r\n\r\n        fx.numerator.factors.forEach(factor => {\r\n            signs.push(this.makeOneLineForSigns(factor, zeroes, ZEROTYPE.ZERO))\r\n            factors.push(factor.clone())\r\n        })\r\n\r\n        fx.denominator.factors.forEach(factor => {\r\n            signs.push(this.makeOneLineForSigns(factor, zeroes, ZEROTYPE.DEFENCE))\r\n            factors.push(factor.clone())\r\n        })\r\n\r\n        signs.push(this.makeSignsResult(signs))\r\n\r\n        return {\r\n            type: typeOfTable,\r\n            fx,\r\n            factors,\r\n            zeroes,\r\n            signs,\r\n            extremes: {},\r\n            tex: ''\r\n        }\r\n    }\r\n}\r\n","import {Numeric} from \"../numeric\";\r\n\r\nexport type FractionParsingType = number | string | Fraction\r\n\r\n/**\r\n * The fraction class make possible to handle\r\n * TODO: Write the documentation correctly.\r\n * \\\\(\\frac{a}{b}\\\\) or \\\\[\\frac{a}{b}\\\\]  values.\r\n */\r\nexport class Fraction {\r\n    private _denominator: number;\r\n    private _numerator: number;\r\n\r\n    constructor(value?: unknown, denominatorOrPeriodic?: number) {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n\r\n        if (value !== undefined) {\r\n            this.parse(value, denominatorOrPeriodic);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n\r\n    get numerator(): number {\r\n        return this._numerator;\r\n    }\r\n\r\n    set numerator(value: number) {\r\n        this._numerator = value;\r\n    }\r\n\r\n    get denominator(): number {\r\n        return this._denominator;\r\n    }\r\n\r\n    set denominator(value: number) {\r\n        this._denominator = value;\r\n    }\r\n\r\n    get value(): number {\r\n        return this._numerator / this._denominator;\r\n    }\r\n\r\n    // Display getter\r\n    get tex(): string {\r\n        if (this.isInfinity()) {\r\n            return `${this.sign() === 1 ? '+' : '-'}\\\\infty`\r\n        }\r\n\r\n        if (this.isExact()) {\r\n            if (this._denominator === 1) {\r\n                return `${this._numerator}`;\r\n            } else if (this._numerator < 0) {\r\n                return `-\\\\frac{ ${-this._numerator} }{ ${this._denominator} }`;\r\n            } else {\r\n                return `\\\\frac{ ${this._numerator} }{ ${this._denominator} }`;\r\n            }\r\n        } else {\r\n            return this.value.toFixed(3)\r\n        }\r\n    }\r\n\r\n    get texWithSign():string {\r\n        return this.isPositive() ? `+${this.tex}` : this.tex;\r\n    }\r\n\r\n    get display(): string {\r\n        if (this.isExact()) {\r\n            if (this._denominator === 1) {\r\n                return `${this._numerator}`;\r\n            } else {\r\n                return `${this._numerator}/${this._denominator}`;\r\n            }\r\n        } else {\r\n            return this.value.toFixed(3)\r\n        }\r\n    }\r\n\r\n    // Helper function to display fractions\r\n    get frac(): string {\r\n        return this.tex;\r\n    }\r\n\r\n    get dfrac(): string {\r\n        return this.tex.replace('\\\\frac', '\\\\dfrac');\r\n    }\r\n\r\n    get tfrac(): string {\r\n        return this.tex.replace('\\\\frac', '\\\\tfrac')\r\n    }\r\n\r\n    static max = (...fractions: (Fraction | number)[]): Fraction => {\r\n        let M = new Fraction(fractions[0])\r\n\r\n        for (let m of fractions) {\r\n            let compare = new Fraction(m)\r\n            if (compare.greater(M)) {\r\n                M = compare.clone()\r\n            }\r\n        }\r\n\r\n        return M\r\n    }\r\n\r\n    static min = (...fractions: (Fraction | number)[]): Fraction => {\r\n        let M = new Fraction(fractions[0])\r\n\r\n        for (let m of fractions) {\r\n            let compare = new Fraction(m)\r\n            if (compare.lesser(M)) {\r\n                M = compare.clone()\r\n            }\r\n        }\r\n\r\n        return M\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n\r\n    static average = (...fractions: (Fraction | number)[]): Fraction => {\r\n        let M = new Fraction().zero()\r\n\r\n        for (let f of fractions) {\r\n            M.add(f)\r\n        }\r\n\r\n        M.divide(fractions.length)\r\n\r\n        return M\r\n    }\r\n\r\n    static unique = (fractions: Fraction[], sorted?: boolean): Fraction[] => {\r\n        // TODO: make sure it's wokring -> test !\r\n        let unique: { [Key: string]: boolean } = {},\r\n            distinct: Fraction[] = []\r\n        fractions.forEach(x => {\r\n            if (!unique[x.clone().reduce().tex]) {\r\n                distinct.push(x.clone())\r\n                unique[x.tex] = true\r\n            }\r\n        })\r\n\r\n        if (sorted) {\r\n            return Fraction.sort(distinct)\r\n        } else {\r\n            return distinct\r\n        }\r\n    }\r\n\r\n    static sort = (fractions: Fraction[], reverse?: boolean): Fraction[] => {\r\n        // Todo make sure it's the correct order, not reverse -> make a test\r\n        let sorted = fractions.sort((a, b) => a.value - b.value)\r\n\r\n        if (reverse) {\r\n            sorted.reverse()\r\n        }\r\n\r\n        return sorted\r\n    }\r\n\r\n    isApproximative = (): boolean => {\r\n        return this._numerator.toString().length >= 15 && this._denominator.toString().length >= 15\r\n    }\r\n\r\n    isExact = (): boolean => {\r\n        return !this.isApproximative()\r\n    }\r\n\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse the value to get the numerator and denominator\r\n     * @param value : number or string to parse to get the fraction\r\n     * @param denominatorOrPeriodic (optional|number) : length of the periodic part: 2.333333 => 1 or denominator value\r\n     */\r\n    parse = (value: unknown, denominatorOrPeriodic?: number): Fraction => {\r\n        let S: string[];\r\n\r\n        // A null value means a zero fraction.\r\n        if (value === null || value === \"\") {\r\n            this._numerator = 0;\r\n            this._denominator = 1;\r\n            return this;\r\n        }\r\n\r\n        switch (typeof value) {\r\n            case \"string\":\r\n                // Split the string value in two parts: Numerator/Denominator\r\n                S = value.split('/');\r\n\r\n                // Security checks\r\n                if (S.length > 2) throw value + \" has too many divide signs\";\r\n                if (S.map(x => x === '' || isNaN(Number(x))).includes(true)) throw value + \" is not a valid number\"\r\n\r\n                if (S.length === 1) {\r\n                    // No divide sign - it's a number\r\n                    return this.parse(+S[0]);\r\n                } else if (S.length === 2) {\r\n                    // One divide signe\r\n                    // We check if the denominator is zero\r\n                    if (S[1] === '0') {\r\n                        this._numerator = NaN;\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._numerator = +S[0];\r\n                        this._denominator = +S[1];\r\n                    }\r\n                } else {\r\n                    // More than one divide sign ?\r\n                    // This is impossible\r\n                    this._numerator = NaN;\r\n                    this._denominator = 1;\r\n                }\r\n                break;\r\n            case \"number\":\r\n                if (Number.isSafeInteger(value)) {\r\n                    // The given value is an integer\r\n                    this._numerator = +value;\r\n\r\n                    if (denominatorOrPeriodic === undefined || !Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._denominator = +denominatorOrPeriodic;\r\n                    }\r\n                } else {\r\n                    // The given value is a float number\r\n                    // Get the number of decimals after the float sign\r\n                    let [unit, decimal] = (value.toString()).split('.')\r\n                    let p: number = decimal?decimal.length:0;\r\n\r\n                    // Detect if the decimal part is periodic or not...\r\n\r\n\r\n                    // Transform the float number in two integer\r\n                    if (denominatorOrPeriodic === undefined) {\r\n                        this._numerator = value * Math.pow(10, p);\r\n                        this._denominator = Math.pow(10, p);\r\n                    } else if (Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._numerator = value * Math.pow(10, p) - Math.floor(value * Math.pow(10, p - denominatorOrPeriodic));\r\n                        this.denominator = Math.pow(10, p) - Math.pow(10, p - denominatorOrPeriodic)\r\n                    }\r\n\r\n                    this.reduce()\r\n                }\r\n                break;\r\n            case \"object\":\r\n                if (value instanceof Fraction) {\r\n                    this._numerator = +value.numerator;\r\n                    this._denominator = +value.denominator;\r\n                }\r\n                break;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n\r\n    clone = (): Fraction => {\r\n        let F = new Fraction();\r\n        F.numerator = +this._numerator;\r\n        F.denominator = +this._denominator;\r\n        return F;\r\n    };\r\n\r\n    zero = (): Fraction => {\r\n        this._numerator = 0;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    one = (): Fraction => {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    infinite = (): Fraction => {\r\n        this._numerator = Infinity;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    invalid = (): Fraction => {\r\n        this._numerator = NaN;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    opposed = (): Fraction => {\r\n        this._numerator = -this._numerator;\r\n        return this;\r\n    };\r\n\r\n    add = (F: Fraction | number): Fraction => {\r\n        if (F instanceof Fraction) {\r\n            let N: number = this._numerator,\r\n                D: number = this._denominator;\r\n\r\n            this._numerator = N * F.denominator + F.numerator * D;\r\n            this._denominator = D * F.denominator;\r\n        } else {\r\n            return this.add(new Fraction(F))\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (F: Fraction | number): Fraction => {\r\n        if (F instanceof Fraction) {\r\n            return this.add(F.clone().opposed());\r\n        } else {\r\n            return this.add(-F)\r\n        }\r\n    };\r\n\r\n    multiply = (F: Fraction | number): Fraction => {\r\n        // Parse the value.\r\n        // If it's a fraction, return a clone of it\r\n        // If it's an integer, return the fraction F/1\r\n        let Q = new Fraction(F);\r\n\r\n        this._numerator = this._numerator * Q.numerator;\r\n        this._denominator = this._denominator * Q.denominator;\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    xMultiply = (...values: (Fraction | number)[]): Fraction => {\r\n        // Parse the value.\r\n        // If it's a fraction, return a clone of it\r\n        // If it's an integer, return the fraction F/1\r\n        for(let value of values){\r\n            let F = new Fraction(value)\r\n            this._numerator = this._numerator * F.numerator;\r\n            this._denominator = this._denominator * F.denominator;\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    divide = (F: Fraction | number): Fraction => {\r\n        let Q = new Fraction(F);\r\n\r\n        if (Q.numerator === 0) {\r\n            return new Fraction().infinite();\r\n        }\r\n\r\n        let N: number = +this._numerator,\r\n            D: number = +this._denominator;\r\n\r\n        this._numerator = N * Q.denominator;\r\n        this._denominator = D * Q.numerator;\r\n        return this.reduce();\r\n    };\r\n\r\n    invert = (): Fraction => {\r\n        let n = +this._numerator, d = +this._denominator;\r\n        this._numerator = d;\r\n        this._denominator = n;\r\n\r\n        return this;\r\n    }\r\n\r\n    pow = (p: number | Fraction): Fraction => {\r\n        // TODO: Fraction.pow with a value different than a safe integer !\r\n        if (p instanceof Fraction) {\r\n            return this.pow(p.value)\r\n        }\r\n\r\n        this.reduce();\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        // Check if numerator and denominator are roots of...\r\n        // othervise, convert to numeric.\r\n        let controlNumerator = Math.floor(Math.pow(this._numerator, Math.abs(p))),\r\n            controlDenominator = Math.floor(Math.pow(this._denominator, Math.abs(p)))\r\n\r\n        if (controlNumerator ** Math.abs(p) === this._numerator\r\n            &&\r\n            controlDenominator ** Math.abs(p) === this._denominator) {\r\n\r\n            this._numerator = this._numerator ** Math.abs(p);\r\n            this._denominator = this._denominator ** Math.abs(p);\r\n        } else {\r\n            this._numerator = this._numerator ** Math.abs(p);\r\n            this._denominator = this._denominator ** Math.abs(p);\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    root = (p: number): Fraction => {\r\n        // TODO: nth - root of a fraction => this will return another type of coefficient.\r\n\r\n        // Check if they are perfect roots..\r\n        if (p === 0) {\r\n            return this;\r\n        }\r\n\r\n        // If negative, invert the fraction\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        let n = Math.pow(this._numerator, Math.abs(1 / p)),\r\n            d = Math.pow(this._denominator, Math.abs(1 / p));\r\n\r\n        this._numerator = Math.pow(this._numerator, Math.abs(1 / p));\r\n        this._denominator = Math.pow(this._denominator, Math.abs(1 / p));\r\n        return this;\r\n    }\r\n\r\n    sqrt = (): Fraction => {\r\n        return this.root(2);\r\n    }\r\n\r\n    abs = (): Fraction => {\r\n        this._numerator = Math.abs(this._numerator);\r\n        this._denominator = Math.abs(this._denominator);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations specific to fractions\r\n\r\n    // ------------------------------------------\r\n    reduce = (): Fraction => {\r\n        let g = Numeric.gcd(this._numerator, this._denominator);\r\n        this._numerator = this._numerator / g;\r\n        this._denominator = this._denominator / g;\r\n\r\n        if (this._denominator < 0) {\r\n            this._denominator = -this._denominator;\r\n            this._numerator = -this._numerator;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    amplify = (k: number): Fraction => {\r\n        if (Number.isSafeInteger(k)) {\r\n            this._numerator *= k;\r\n            this._denominator *= k;\r\n        }\r\n        return this;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param F (Coefficient) The coefficient to compare\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (F: unknown, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n        let compareFraction: Fraction\r\n        if (F instanceof Fraction) {\r\n            compareFraction = F.clone()\r\n        } else {\r\n            compareFraction = new Fraction(F)\r\n        }\r\n\r\n        switch (sign) {\r\n            case '>':\r\n                return this.value > compareFraction.value;\r\n            case \">=\" || \"=>\" || \"geq\":\r\n                return this.value >= compareFraction.value;\r\n            case \"<\":\r\n                return this.value < compareFraction.value;\r\n            case \"<=\" || \"=>\" || \"leq\":\r\n                return this.value <= compareFraction.value;\r\n            case \"=\":\r\n                // let F2: Fraction = compareFraction.clone().reduce(),\r\n                //     F1: Fraction = this.clone().reduce();\r\n                // return (F1.numerator === F2.numerator && F1.denominator === F2.denominator);\r\n                return this.value === compareFraction.value;\r\n            case \"<>\":\r\n                return this.value !== compareFraction.value;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n    /* Compare shortcuts */\r\n    lesser = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '<');\r\n    };\r\n    leq = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '<=');\r\n    };\r\n    greater = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '>');\r\n    };\r\n    geq = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '>=');\r\n    };\r\n    isEqual = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '=');\r\n    }\r\n    isNotEqual = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '<>');\r\n    }\r\n    isOpposed = (p: Fraction): boolean => {\r\n        return this.isEqual(p.clone().opposed());\r\n    }\r\n    isInverted = (p: Fraction): boolean => {\r\n        return this.isEqual(new Fraction().one().divide(p.clone()));\r\n    }\r\n    isZero = (): boolean => {\r\n        return this._numerator === 0;\r\n    }\r\n    isNotZero = (): boolean => {\r\n        return this._numerator !== 0;\r\n    }\r\n    isOne = (): boolean => {\r\n        return this._numerator === 1 && this._denominator === 1;\r\n    }\r\n    isNegativeOne = (): boolean => {\r\n        return this._numerator === -1 && this._denominator === 1;\r\n    }\r\n    isPositive = (): boolean => {\r\n        return this.sign() === 1;\r\n    }\r\n    isNegative = (): boolean => {\r\n        return this.sign() === -1;\r\n    }\r\n    isStrictlyPositive = (): boolean => {\r\n        return this.value > 0\r\n    }\r\n    isStrictlyNegative = (): Boolean => {\r\n        return this.value < 0\r\n    }\r\n    isNaN = (): boolean => {\r\n        return isNaN(this._numerator);\r\n    }\r\n    isInfinity = (): boolean => {\r\n        return Math.abs(this._numerator) === Infinity;\r\n    }\r\n    isFinite = (): boolean => {\r\n        return !this.isInfinity() && !this.isNaN();\r\n    }\r\n    isSquare = (): boolean => {\r\n        return Math.sqrt(this._numerator) % 1 === 0 && Math.sqrt(this._denominator) % 1 === 0\r\n    }\r\n    isReduced = (): boolean => {\r\n        return Math.abs(Numeric.gcd(this._numerator, this._denominator)) === 1\r\n    }\r\n    isNatural = (): boolean => {\r\n        return this.isRelative() && this.isPositive()\r\n    }\r\n    isRelative = (): boolean => {\r\n        return this.clone().reduce().denominator === 1\r\n    }\r\n    isRational = (): boolean => {\r\n        return !this.isRelative()\r\n    }\r\n    isEven = (): boolean => {\r\n        return this.isRelative() && this.value % 2 === 0\r\n    }\r\n    isOdd = (): boolean => {\r\n        return this.isRelative() && this.value % 2 === 1\r\n    }\r\n    sign = (): number => {\r\n        return (this._numerator * this._denominator >= 0) ? 1 : -1;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Simple function to determine if it's a fraction\r\n     */\r\n    areEquals = (...F: Fraction[]): boolean => {\r\n        for (let i = 0; i < F.length; i++) {\r\n            if (!this.isEqual(F[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n}","/**\r\n * NthRoot is something like \"a+b\\sqrt{3}\r\n */\r\nexport class NthRoot {\r\n    private _radical: number;\r\n    private _nth: number;\r\n    private _coefficient: number;\r\n    private _isValid:boolean;\r\n\r\n    constructor(...values: number[]) {\r\n        this._radical = 1;\r\n        this._coefficient = 1;\r\n        this._nth = 2;\r\n        this._isValid = true;\r\n\r\n        if(values !== undefined){\r\n            this.parse(values[0], values[1], values[2])\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get radical(): number {\r\n        return this._radical;\r\n    }\r\n\r\n    set radical(value: number) {\r\n        this._radical = value;\r\n    }\r\n\r\n    get nth(): number {\r\n        return this._nth;\r\n    }\r\n\r\n    set nth(value: number) {\r\n        if (Number.isSafeInteger(value) && value >= 2) {\r\n            this._nth = value;\r\n        } else {\r\n            // Error setting the nth root.\r\n            console.log('Error setting the nth root');\r\n            this._nth = 2;\r\n        }\r\n    }\r\n\r\n    get coefficient(): number {\r\n        return this._coefficient;\r\n    }\r\n\r\n    set coefficient(value: number) {\r\n        this._coefficient = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let C: string;\r\n\r\n        if (this._coefficient === 1) {\r\n            C = '';\r\n        } else if (this._coefficient === -1) {\r\n            C = '-';\r\n        } else {\r\n            C = this._coefficient.toString();\r\n        }\r\n\r\n        if (this._radical === 1) {\r\n            return `${this._coefficient}`;\r\n        } else {\r\n            if (this._nth === 2) {\r\n                return `${C}\\\\sqrt{${this._radical}}`\r\n            } else {\r\n                return `${C}\\\\sqrt[${this._nth}]{${this._radical}}`\r\n            }\r\n        }\r\n    }\r\n\r\n    get value(): number {\r\n        return this._coefficient * Math.pow(this._radical, 1 / this._nth);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (radical: number, nthroot?: number, coefficient?: number): NthRoot => {\r\n        this._coefficient = (coefficient === undefined) ? 1 : coefficient;\r\n        this._nth = (nthroot === undefined) ? 2 : nthroot;\r\n        this._radical = (radical === undefined) ? 1 : radical;\r\n\r\n        if(this._nth%2===0 && this._radical<0){\r\n            this._isValid = false;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    reduce = (): NthRoot => {\r\n        // Max value to test.\r\n        let V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n        while (V > 1) {\r\n            if (this._radical % Math.pow(V, this._nth) === 0) {\r\n                // It's dividable by V^n\r\n                this._coefficient *= V;\r\n                this._radical = this._radical / Math.pow(V, this._nth);\r\n\r\n                // Redifine the new testing value (this is optimization)\r\n                V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n                continue;\r\n            }\r\n            V--;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiply = (N: NthRoot): NthRoot => {\r\n        this._radical *= N.radical;\r\n        return this.reduce();\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Help functions\r\n    // ------------------------------------------\r\n    hasRadical = ():boolean => {\r\n        return !(this._radical===1 || this._radical===0 || this._isValid===false)\r\n    };\r\n}","import {Shutingyard, ShutingyardMode, ShutingyardType, tokenConstant} from \"../shutingyard\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\nexport class NumExp {\r\n    private _rpn: { token: string, tokenType: string }[]\r\n    private _expression: string\r\n    private _isValid: boolean\r\n\r\n    constructor(value: string, uniformize?:boolean) {\r\n        this._expression = value\r\n        this._rpn = new Shutingyard(ShutingyardMode.NUMERIC).parse(value).rpn\r\n    }\r\n\r\n    get rpn(): { token: string; tokenType: string }[] {\r\n        return this._rpn;\r\n    }\r\n\r\n    get isValid(): boolean {\r\n        if(this._isValid===undefined){\r\n            this.evaluate({x: 0})\r\n        }\r\n        return this._isValid\r\n    }\r\n\r\n    set isValid(value: boolean){\r\n        this._isValid = value\r\n    }\r\n\r\n    get expression(): string {\r\n        return this._expression;\r\n    }\r\n\r\n    private _extractDecimalPart(value: number): string {\r\n        let decimal = value.toString()\r\n\r\n        if (!decimal.includes('.')) {\r\n            return ''\r\n        }\r\n\r\n        decimal = decimal.split('.')[1]\r\n\r\n        return decimal.substring(0, decimal.length - 2)\r\n    }\r\n\r\n    private _numberCorrection(value: number): number {\r\n        // Must modify the number if it's like:\r\n        // a: 3.0000000000000003\r\n        // b: 3.9999999999999994\r\n        // remove the last character\r\n        // check if around n last characters are either 0 or 9\r\n        // if it is, 'round' the number.\r\n\r\n        const epsilon = 0.00000000000001,\r\n            number_of_digits = 6\r\n\r\n        const decimal = this._extractDecimalPart(value)\r\n        if(decimal===''){return value}\r\n\r\n        const n9 = decimal.match(/9+$/g)\r\n        const n0 = decimal.match(/0+$/g)\r\n\r\n        if (n9 && n9[0].length >= number_of_digits) {\r\n            // New tested values.\r\n            const mod = this._extractDecimalPart(value + epsilon),\r\n                mod0 = mod.match(/0+$/g)\r\n\r\n            if(mod0 && mod0[0].length>= number_of_digits){\r\n                // The value can be changed. Remove all zeros!\r\n                return +((value+epsilon).toString().split(mod0[0])[0])\r\n            }\r\n        }\r\n\r\n        if (n0 && n0[0].length >= number_of_digits) {\r\n            // New tested values.\r\n            const mod = this._extractDecimalPart(value - epsilon),\r\n                mod9 = mod.match(/9+$/g)\r\n\r\n            if(mod9 && mod9[0].length>= number_of_digits){\r\n                // The value can be changed. Remove all nines!\r\n                return +(value.toString().split(n0[0])[0])\r\n            }\r\n        }\r\n\r\n        return value\r\n    }\r\n\r\n    private _addToStack(stack:number[], value: number): void {\r\n        stack.push(this._numberCorrection(value))\r\n    }\r\n\r\n    evaluate(values: { [Key: string]: number }): number {\r\n        const stack: number[] = []\r\n\r\n        this.isValid = true\r\n\r\n        for (const element of this._rpn) {\r\n            if (element.tokenType === ShutingyardType.COEFFICIENT) {\r\n                // May be a numeric value or a Fraction.\r\n                if (!isNaN(+element.token)) {\r\n                    this._addToStack(stack, +element.token)\r\n                } else {\r\n                    this._addToStack(stack, new Fraction(element.token).value)\r\n                }\r\n            } else if (element.tokenType === ShutingyardType.VARIABLE) {\r\n                if (values[element.token] !== undefined) {\r\n                    this._addToStack(stack, +values[element.token])\r\n                }\r\n            } else if (element.tokenType === ShutingyardType.CONSTANT) {\r\n                this._addToStack(stack, tokenConstant[element.token])\r\n            } else if (element.tokenType === ShutingyardType.OPERATION) {\r\n                if (element.token === '*') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if(a === undefined || b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, a * b)\r\n                } else if (element.token === '/') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if(a === undefined || b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, a / b)\r\n                } else if (element.token === '+') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if(a === undefined || b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, (+a) + (+b))\r\n                } else if (element.token === '-') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop() || 0\r\n                    if(b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, a - b)\r\n                } else if (element.token === '^') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if(a === undefined || b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, Math.pow(a, b))\r\n                }\r\n            } else if (element.tokenType === ShutingyardType.FUNCTION) {\r\n                const a = stack.pop()\r\n                if(a === undefined){this.isValid = false}\r\n                if (element.token === 'sin') {\r\n                    this._addToStack(stack, Math.sin(a))\r\n                } else if (element.token === 'cos') {\r\n                    this._addToStack(stack, Math.cos(a))\r\n                } else if (element.token === 'tan') {\r\n                    this._addToStack(stack, Math.tan(a))\r\n                } else if(element.token === 'sqrt') {\r\n                    this._addToStack(stack, Math.sqrt(a))\r\n                }else if(element.token ==='nthrt') {\r\n                    // TODO: support nthrt in num. exp.\r\n                    let b = stack.pop()\r\n                    if(a%2===0 && b<0){\r\n                        this._addToStack(stack, NaN)\r\n                    }else {\r\n                        this._addToStack(stack, (b < 0 ? -1 : 1) * Math.pow(Math.abs(b), 1 / a))\r\n                    }\r\n                } else if(element.token === 'ln'){\r\n                    this._addToStack(stack, Math.log(a))\r\n                } else if(element.token === 'log') {\r\n                    this._addToStack(stack, Math.log10(a))\r\n                }\r\n            }\r\n        }\r\n\r\n        if (stack.length === 1) {\r\n            return stack[0]\r\n        } else {\r\n            throw `There was a problem parsing: ${this._expression}`\r\n        }\r\n    }\r\n}\r\n","import {Polynom, PolynomParsingType} from \"../algebra/polynom\";\r\nimport {Fraction, FractionParsingType} from \"../coefficients/fraction\";\r\n\r\ntype PolynomExpMathFunctionType = { name: string; fn: Function, tex: string }\r\n\r\nexport class PolynomExpFactor {\r\n    constructor(polynom: PolynomParsingType, degree?: FractionParsingType, mathFunction?: PolynomExpMathFunctionType) {\r\n        this._polynom = new Polynom(polynom)\r\n        this._degree = new Fraction(degree === undefined ? 1 : degree)\r\n        this._fn = mathFunction\r\n        this._powerAsInteger = true\r\n        this._forceParenthesis = true\r\n\r\n    }\r\n\r\n    private _forceParenthesis: boolean\r\n\r\n    get forceParenthesis(): boolean {\r\n        return this._forceParenthesis;\r\n    }\r\n\r\n    set forceParenthesis(value: boolean) {\r\n        this._forceParenthesis = value;\r\n    }\r\n\r\n    private _fn: PolynomExpMathFunctionType\r\n\r\n    get fn(): PolynomExpMathFunctionType {\r\n        return this._fn;\r\n    }\r\n\r\n    set fn(value: PolynomExpMathFunctionType) {\r\n        this._fn = value;\r\n    }\r\n\r\n    private _powerAsInteger: boolean\r\n\r\n    get powerAsInteger(): boolean {\r\n        return this._powerAsInteger;\r\n    }\r\n\r\n    set powerAsInteger(value: boolean) {\r\n        this._powerAsInteger = value;\r\n    }\r\n\r\n    private _polynom: Polynom\r\n\r\n    get polynom(): Polynom {\r\n        return this._polynom;\r\n    }\r\n\r\n    set polynom(value: Polynom) {\r\n        this._polynom = value;\r\n    }\r\n\r\n    private _degree: Fraction\r\n\r\n    get degree(): Fraction {\r\n        return this._degree;\r\n    }\r\n\r\n    set degree(value: Fraction) {\r\n        this._degree = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let tex\r\n\r\n        if (this._degree.isOne() && (this._fn !== undefined || !this._forceParenthesis)) {\r\n            // If degree is one, no need to add the parenthesis.\r\n            tex = this._polynom.tex\r\n        } else {\r\n            // the degree is not one, add the parenthesis.\r\n            if (this._powerAsInteger && !this._degree.isRelative()) {\r\n                // the degree is a fraction and we want natural powers => use sqrt.\r\n                tex = `\\\\sqrt${this._degree.denominator !== 2 ? `[ ${this._degree.denominator} ]` : ''}{ ${this._polynom.tex} }^{ ${this._degree.numerator} }`\r\n            } else if (this.isCoefficient && this.firstCoefficient.isNatural()) {\r\n                // the value is a natural number (eg 3, 7, ...)\r\n                tex = this._polynom.tex + this._texDegree\r\n            } else {\r\n                // In any other case, add the parenthesis by default\r\n                tex = `\\\\left( ${this._polynom.tex} \\\\right)${this._texDegree}`\r\n            }\r\n        }\r\n\r\n        if (this._fn !== undefined && this._fn.tex !== undefined) {\r\n            tex = `${this._fn.tex}\\\\left( ${tex} \\\\right)`\r\n        }\r\n        return tex\r\n    }\r\n\r\n    get isCoefficient(): boolean {\r\n        // TODO: Maybe reduce the coefficient if it isn't of degree one.\r\n        return this._polynom.degree().isZero();\r\n\r\n    }\r\n\r\n    get firstCoefficient(): Fraction {\r\n        return this._polynom.monomByDegree().coefficient\r\n    }\r\n\r\n    private get _texDegree(): string {\r\n        if (this._degree.isOne()) {\r\n            return ''\r\n        } else {\r\n            return `^{ ${this._degree.tfrac} }`\r\n        }\r\n    }\r\n\r\n    setForceParenthesis(value?: boolean): PolynomExpFactor {\r\n        this._forceParenthesis = value === undefined || value\r\n        return this\r\n    }\r\n\r\n    derivative(letter?: string): PolynomExpProduct {\r\n        if (this._degree.isOne()) {\r\n            return new PolynomExpProduct(\r\n                new PolynomExpFactor(this._polynom.clone().derivative(letter))\r\n            )\r\n        } else {\r\n            return new PolynomExpProduct(\r\n                new PolynomExpFactor(this._degree.clone()),\r\n                new PolynomExpFactor(this._polynom.clone().derivative(letter)),\r\n                new PolynomExpFactor(this._polynom.clone(), this._degree.clone().subtract(1))\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport class PolynomExpProduct {\r\n    constructor(...values: PolynomExpFactor[]) {\r\n        this._factors = values || []\r\n        this._positive = true\r\n        this._asPositiveDegree = true\r\n    }\r\n\r\n    private _fn: PolynomExpMathFunctionType\r\n\r\n    get fn(): PolynomExpMathFunctionType {\r\n        return this._fn;\r\n    }\r\n\r\n    set fn(value: PolynomExpMathFunctionType) {\r\n        this._fn = value;\r\n    }\r\n\r\n    private _factors: PolynomExpFactor[]\r\n\r\n    get factors(): PolynomExpFactor[] {\r\n        return this._factors;\r\n    }\r\n\r\n    set factors(value: PolynomExpFactor[]) {\r\n        this._factors = value;\r\n    }\r\n\r\n    private _positive: boolean\r\n\r\n    get positive(): boolean {\r\n        return this._positive;\r\n    }\r\n\r\n    set positive(value: boolean) {\r\n        this._positive = value;\r\n    }\r\n\r\n    private _asPositiveDegree: boolean\r\n\r\n    get asPositiveDegree(): boolean {\r\n        return this._asPositiveDegree;\r\n    }\r\n\r\n    set asPositiveDegree(value: boolean) {\r\n        this._asPositiveDegree = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let parenthesis = this._factors.length>1\r\n        // Default value\r\n        let tex = this._factors.map(factor => factor.setForceParenthesis(parenthesis).tex).join(' \\\\cdot ')\r\n\r\n        // Change the value in some cases...\r\n        if (this._asPositiveDegree) {\r\n            const numerators = this._factors.filter(x => x.degree.isPositive()),\r\n                denominators = this._factors.filter(x => x.degree.isNegative())\r\n\r\n            let numeratorsAsTex, denominatorsAsTex\r\n\r\n            if (denominators.length > 0) {\r\n                if (numerators.length === 0) {\r\n                    numeratorsAsTex = [1]\r\n                } else if (numerators.length === 1) {\r\n                    numeratorsAsTex = [numerators[0].setForceParenthesis(false).tex]\r\n                } else {\r\n                    parenthesis = numerators.length>1\r\n                    numeratorsAsTex = numerators.map(factor => factor.setForceParenthesis(parenthesis).tex)\r\n                }\r\n\r\n                // Change all denominators degrees to positive.\r\n                denominators.map(x => x.degree.opposed())\r\n                if (denominators.length === 1) {\r\n                    denominatorsAsTex = [denominators[0].setForceParenthesis(false).tex]\r\n                } else {\r\n                    parenthesis = denominators.length>1\r\n                    denominatorsAsTex = denominators.map(factor => factor.setForceParenthesis(parenthesis).tex)\r\n                }\r\n                // restore all degrees to negative again.\r\n                denominators.map(x => x.degree.opposed())\r\n\r\n                tex = `\\\\frac{ ${numeratorsAsTex.join(' \\\\cdot ')} }{ ${denominatorsAsTex.join(' \\\\cdot ')} }`\r\n            }\r\n        }\r\n\r\n        // Apply the modification\r\n        if (this._fn !== undefined && this._fn.name !== undefined && this._fn.name !== '') {\r\n            tex = `${this._fn.tex}\\\\left( ${tex} \\\\right)`\r\n        }\r\n        return tex\r\n    }\r\n\r\n    reduce(): PolynomExpProduct {\r\n        let coefficients = this._factors.filter(factor => factor.isCoefficient),\r\n            polynoms = this._factors.filter(factor => !factor.isCoefficient)\r\n\r\n        let result = new Fraction().one()\r\n\r\n        if (coefficients.length > 1) {\r\n            for (const factor of coefficients) {\r\n                if (factor.degree.isPositive()) {\r\n                    result.multiply(factor.polynom.monoms[0].coefficient.pow(factor.degree))\r\n                } else {\r\n                    result.divide(factor.polynom.monoms[0].coefficient.pow(factor.degree.clone().abs()))\r\n                }\r\n            }\r\n        } else if (coefficients.length === 1) {\r\n            result = coefficients[0].polynom.monoms[0].coefficient\r\n        }\r\n\r\n        if (result.isOne()) {\r\n            this._factors = [...polynoms]\r\n        } else if (!result.isRelative()) {\r\n            this._factors = [\r\n                new PolynomExpFactor(result.numerator),\r\n                new PolynomExpFactor(result.denominator, -1),\r\n                ...polynoms\r\n            ]\r\n        } else {\r\n            this._factors = [\r\n                new PolynomExpFactor(result),\r\n                ...polynoms\r\n            ]\r\n        }\r\n        return this\r\n    }\r\n\r\n    integrate(letter?: string): PolynomExpProduct {\r\n        // Handle this kind of case:\r\n        // A * f' * F^n\r\n        // A * f' / F^n, n != 1\r\n        // A * f_1 * f_2 * f_3, where (f_1 * f_2)' = f_3\r\n        if (this._factors.length === 2) {\r\n            // Check polynoms degree: one must of one degree less than the other.\r\n            let d1 = this._factors[0].polynom.degree(letter).value,\r\n                d2 = this._factors[1].polynom.degree(letter).value\r\n\r\n            if (d1 === d2 + 1) {\r\n                return this._integrateWithInternalDerivative(this._factors[0], this._factors[1], letter)\r\n            } else if (d1 + 1 === d2) {\r\n                return this._integrateWithInternalDerivative(this._factors[1], this._factors[0], letter)\r\n            }\r\n        }\r\n        return\r\n    }\r\n\r\n    public applyMathFunction(mathFn: PolynomExpMathFunctionType): PolynomExpProduct {\r\n        this._fn = mathFn\r\n        return this\r\n    }\r\n\r\n    private _integrateWithInternalDerivative(P: PolynomExpFactor, Pinternal: PolynomExpFactor, letter?: string): PolynomExpProduct {\r\n        // Get the internal derivative\r\n        let internalDerivative: Polynom = P.polynom.clone().derivative(letter)\r\n\r\n        // Get the factor.\r\n        let {quotient, reminder} = Pinternal.polynom.clone().euclidian(internalDerivative)\r\n\r\n        if (reminder.isZero() && quotient.degree(letter).isZero()) {\r\n            // All the conditions are done. Actual situation is\r\n            // (4x-10)(x^2-5x+7)^9\r\n            // P1 = (x^2-5x+7), P2 = (2x-5)\r\n            // => 1/10 * quotient * (x^2-5x+7)^10\r\n\r\n            if (P.degree.isEqual(-1)) {\r\n                return (new PolynomExpProduct(\r\n                    new PolynomExpFactor(quotient, 1),\r\n                    new PolynomExpFactor(P.polynom.clone(), 1, {\r\n                        name: 'ln', tex: '\\\\ln', fn: (x: number) => Math.log(x)\r\n                    })\r\n                ))\r\n            } else {\r\n                return new PolynomExpProduct(\r\n                    new PolynomExpFactor(P.degree.clone().add(1).invert(), 1),\r\n                    new PolynomExpFactor(quotient, 1),\r\n                    new PolynomExpFactor(P.polynom.clone(), P.degree.clone().add(1))\r\n                )\r\n            }\r\n        }\r\n        return\r\n    }\r\n}","import {Point} from \"./point\";\r\nimport {Line, LinePropriety} from \"./line\";\r\nimport {Vector} from \"./vector\";\r\nimport {Triangle} from \"./triangle\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Equation} from \"../algebra/equation\";\r\nimport {Polynom} from \"../algebra/polynom\";\r\nimport {Monom} from \"../algebra/monom\";\r\n\r\nexport class Circle {\r\n    constructor(...values: unknown[]) {\r\n        this._exists = false\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values)\r\n        }\r\n    }\r\n\r\n    private _center: Point;\r\n\r\n    get center(): Point {\r\n        return this._center;\r\n    }\r\n\r\n    private _squareRadius: Fraction;\r\n\r\n    get squareRadius(): Fraction {\r\n        return this._squareRadius\r\n    }\r\n\r\n    private _cartesian: Equation;\r\n\r\n    get cartesian(): Equation {\r\n        return this._cartesian\r\n    }\r\n\r\n    private _exists: boolean;\r\n\r\n    get exists(): boolean {\r\n        return this._exists;\r\n    }\r\n\r\n    get radius(): { tex: string, display: string, value: number } {\r\n        if (this._squareRadius.isSquare()) {\r\n            return {\r\n                tex: this._squareRadius.clone().sqrt().tex,\r\n                display: this._squareRadius.clone().sqrt().display,\r\n                value: this._squareRadius.clone().sqrt().value\r\n            }\r\n        } else {\r\n            return {\r\n                tex: `\\\\sqrt{${this._squareRadius.tex}}`,\r\n                display: `sqrt(${this._squareRadius.display})`,\r\n                value: this._squareRadius.clone().sqrt().value\r\n            }\r\n        }\r\n        return this._squareRadius\r\n    }\r\n\r\n    get tex(): string {\r\n        if (this._exists) {\r\n            let cx, cy\r\n            if (this._center.x.isZero()) {\r\n                cx = 'x^2'\r\n            } else {\r\n                cx = `\\\\left(x${this._center.x.isNegative() ? '+' : '-'}${this._center.x.clone().abs().tex}\\\\right)^2`\r\n            }\r\n            if (this._center.y.isZero()) {\r\n                cy = 'y^2'\r\n            } else {\r\n                cy = `\\\\left(y${this._center.y.isNegative() ? '+' : '-'}${this._center.y.clone().abs().tex}\\\\right)^2`\r\n            }\r\n            return `${cx}+${cy}=${this._squareRadius.tex}`\r\n        } else {\r\n            return `\\\\text{le cercle n'existe pas.}`\r\n        }\r\n    }\r\n\r\n    get developed(): string {\r\n        return this._cartesian.tex\r\n    }\r\n\r\n    get display(): string {\r\n        if (this._exists) {\r\n            let cx, cy\r\n            if (this._center.x.isZero()) {\r\n                cx = 'x^2'\r\n            } else {\r\n                cx = `(x${this._center.x.isNegative() ? '+' : '-'}${this._center.x.clone().abs().tex})^2`\r\n            }\r\n            if (this._center.y.isZero()) {\r\n                cy = 'y^2'\r\n            } else {\r\n                cy = `(y${this._center.y.isNegative() ? '+' : '-'}${this._center.y.clone().abs().tex})^2`\r\n            }\r\n            return `${cx}+${cy}=${this._squareRadius.display}`\r\n        } else {\r\n            return `\\\\text{le cercle n'existe pas.}`\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the relative position between circle and line. It corresponds to the number of intersection.\r\n     * @param {Line} L\r\n     * @returns {number}\r\n     */\r\n    relativePosition = (L: Line): number => {\r\n        let distance = L.distanceTo(this.center), radius = Math.sqrt(this._squareRadius.value)\r\n\r\n        if (distance.value - radius > 0.0000000001) {\r\n            return 0 // external\r\n        } else if (Math.abs(distance.value - radius) < 0.0000000001) {\r\n            return 1 // tangent\r\n        } else {\r\n            return 2 // external\r\n        }\r\n    }\r\n\r\n    lineIntersection = (L: Line): Point[] => {\r\n        let intersectionPoints: Point[] = [], solX: Fraction\r\n\r\n        if (this._cartesian === null) {\r\n            return []\r\n        }\r\n        const equX = this._cartesian.clone(), lineX = L.equation.clone().isolate('x'),\r\n            lineY = L.equation.clone().isolate('y')\r\n\r\n        if (lineX instanceof Equation && lineY instanceof Equation) {\r\n            equX.replaceBy('y', lineY.right).simplify()\r\n            equX.solve()\r\n\r\n            for (let x of equX.solutions) {\r\n                if (x.exact === false && isNaN(x.value)) {\r\n                    continue\r\n                }\r\n\r\n                solX = new Fraction(x.exact === false ? x.value : x.exact)\r\n                intersectionPoints.push(new Point(solX.clone(), lineY.right.evaluate(solX)))\r\n            }\r\n        }\r\n\r\n        return intersectionPoints\r\n    }\r\n\r\n    tangents = (P: Point | Fraction): Line[] => {\r\n        if (P instanceof Fraction) {\r\n            return this._tangentsWithSlope(P)\r\n        } else if (this.isPointOnCircle(P)) {\r\n            return this._tangentsThroughOnePointOnTheCircle(P)\r\n        } else if (this.center.distanceTo(P).value > this.radius.value) {\r\n            //TODO:  Must check it's outside the circle\r\n            return this._tangentsThroughOnePointOutsideTheCircle(P)\r\n        } else {\r\n            console.log('No tangents as the point is inside !')\r\n        }\r\n        return []\r\n    }\r\n\r\n    isPointOnCircle = (P: Point): Boolean => {\r\n        return this._cartesian.test({x: P.x, y: P.y})\r\n    }\r\n\r\n    getPointsOnCircle = (numberIsInteger?: boolean): Point[] => {\r\n        if (numberIsInteger === undefined) {\r\n            numberIsInteger = false\r\n        }\r\n\r\n        // It means searching for pythagorician triples that make a perfect square.\r\n        // (x-4)^2 + (y+3)^2 = 15\r\n\r\n        let triplets = Numeric.pythagoricianTripletsWithTarget(this._squareRadius.value, true)\r\n\r\n        let points: Point[] = [], pt\r\n        triplets.forEach(triplet => {\r\n            // Allow positive / negative values\r\n            // x-a = t  => x = a + t\r\n            // x-a = -t => x = a - t\r\n\r\n            for (let k of [[1, 1], [-1, 1], [-1, -1], [1, -1]]) {\r\n                pt = new Point(\r\n                    this.center.x.clone().add(k[0] * triplet[0]),\r\n                    this.center.y.clone().add(k[1] * triplet[1])\r\n                )\r\n                // Check if the point is not already in points.\r\n                if (!pt.isInListOfPoints(points)) {\r\n                    points.push(pt)\r\n                }\r\n            }\r\n        })\r\n        return points\r\n    }\r\n\r\n    clone(): Circle {\r\n        this._center = this._center.clone()\r\n        this._squareRadius = this._squareRadius.clone()\r\n        this._calculateCartesian()\r\n        return this\r\n    }\r\n\r\n    private _tangentsThroughOnePointOnTheCircle = (P: Point): Line[] => {\r\n        let CT = new Vector(this._center, P)\r\n        return [new Line(P, CT, LinePropriety.Perpendicular)]\r\n    }\r\n\r\n    private _tangentsThroughOnePointOutsideTheCircle = (P: Point): Line[] => {\r\n        // y = mx + h\r\n        // px, py => h = -m px + py => mx - y -m.px + py = 0 =>\r\n        // Centre: cx, cy, radius: r\r\n        // (m.cx - cy -m.px + py)^2 = r^2  * (m^2  + 1)\r\n        // (m(cx-py) - (cy - py))^2 = r^2  * (m^2  + 1)\r\n\r\n        let cx_px = this.center.x.clone().subtract(P.x), cy_py = this.center.y.clone().subtract(P.y),\r\n            polyLeft = new Polynom('x'), polyRight = new Polynom('x^2+1')\r\n\r\n        polyLeft.multiply(cx_px).subtract(cy_py).pow(2)\r\n        polyRight.multiply(this.squareRadius)\r\n\r\n        let equ = new Equation(polyLeft, polyRight)\r\n        equ.moveLeft().simplify().solve()\r\n\r\n        return equ.solutions.map(sol => {\r\n            //  h = -m px + py\r\n            let h, equ = new Equation('y', 'x')\r\n\r\n            if (sol.exact instanceof Fraction) {\r\n                h = P.x.clone().opposed().multiply(sol.exact).add(P.y)\r\n                equ.right.multiply(sol.exact).add(h)\r\n            } else {\r\n                h = P.x.clone().opposed().multiply(sol.value).add(P.y)\r\n                equ.right.multiply(sol.value).add(h)\r\n            }\r\n\r\n            return new Line(equ)\r\n        })\r\n\r\n    }\r\n\r\n    private _tangentsWithSlope = (slope: Fraction): Line[] => {\r\n        // d(C;t)=r => ac1+bc2 + x = +- sqrt(a^2 + b^2)*r\r\n        // x = -ac1-bc2  +-  sqrt(a^2 + b^2)*r\r\n        // y = a/bx + h => ax-by + H = 0\r\n\r\n        const a = slope.numerator, b = -slope.denominator, c1 = this._center.x.clone(), c2 = this._center.y.clone(),\r\n            r = this._squareRadius\r\n\r\n        let sq = this._squareRadius.clone().multiply(slope.numerator ** 2 + slope.denominator ** 2),\r\n            x1 = c1.clone().multiply(a).opposed().subtract(c2.clone().multiply(b)).add(sq.clone().sqrt()),\r\n            x2 = c1.clone().multiply(a).opposed().subtract(c2.clone().multiply(b)).subtract(sq.clone().sqrt())\r\n\r\n        return [new Line(a, b, x1), new Line(a, b, x2)]\r\n    }\r\n\r\n    private _reset(): Circle {\r\n        this._center = null\r\n        this._squareRadius = null\r\n        this._cartesian = null\r\n        this._exists = false\r\n\r\n        return this\r\n    }\r\n\r\n    private parse(...values: unknown[]): Circle {\r\n        // Data can be given in these formats:\r\n        // one value, a string -> make it an Equation\r\n        // one value, an Equation\r\n        // one value, a circle -> clone it\r\n        // two values: two points (center and pointThrough)\r\n        // two values: point and Fraction (center and radius)\r\n        // three values: Point, Fraction, Boolean (center, square radius, true)\r\n\r\n        this._reset()\r\n\r\n        if (typeof values[0] === 'string') {\r\n            this._parseEquation(new Equation(values[0]))\r\n        } else if (values[0] instanceof Equation) {\r\n            this._parseEquation(values[0])\r\n        } else if (values[0] instanceof Circle) {\r\n            this._parseCopyCircle(values[0])\r\n        } else if (values[0] instanceof Point && values.length > 1) {\r\n            if (values[1] instanceof Point) {\r\n                if (values[2] instanceof Point) {\r\n                    this._parseThroughtThreePoints(values[0], values[1], values[2])\r\n                } else {\r\n                    this._parseCenterAndPointThrough(values[0], values[1])\r\n                }\r\n            } else if (values[1] instanceof Fraction || typeof values[1] === 'number') {\r\n                this._parseCenterAndRadius(values[0], values[1], (typeof values[2] === \"boolean\") ? values[2] : false)\r\n            }\r\n        }\r\n\r\n        // Calculate once the different values.\r\n        if (this._exists) {\r\n            this._calculateCartesian()\r\n\r\n            // If the square radius is zero or positive, the circle exists.\r\n            if (this._squareRadius !== undefined && this._squareRadius.isNegative()) {\r\n                this._exists = false\r\n            }\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    private _calculateCartesian() {\r\n        this._cartesian = (new Equation(new Polynom(`(x-(${this._center.x.display}))^2+(y-(${this._center.y.display}))^2`), new Polynom(`${this._squareRadius.display}`))).moveLeft()\r\n    }\r\n\r\n    private _parseCopyCircle(circle: Circle): Circle {\r\n        this._center = circle.center.clone()\r\n        this._squareRadius = circle.squareRadius.clone()\r\n        this._calculateCartesian()\r\n        this._exists = circle.exists\r\n        return this\r\n    }\r\n\r\n    private _parseCenterAndRadius(center: Point, radius: Fraction | number, square?: boolean): Circle {\r\n        this._center = center.clone()\r\n\r\n        if (square) {\r\n            this._squareRadius = (new Fraction(radius))\r\n        } else {\r\n            this._squareRadius = new Fraction(radius).pow(2)\r\n        }\r\n\r\n        this._exists = true\r\n        return this\r\n    }\r\n\r\n    private _parseCenterAndPointThrough(center: Point, pointThrough: Point): Circle {\r\n        this._center = center.clone()\r\n        this._squareRadius = new Vector(this._center, pointThrough).normSquare\r\n        this._exists = true\r\n        return this\r\n    }\r\n\r\n    private _parseEquation(equ: Equation): Circle {\r\n        this._exists = false\r\n\r\n        // Move everything to the left.\r\n        equ.moveLeft()\r\n\r\n        if (equ.degree('x').value === 2 && equ.degree('y').value === 2) {\r\n            // Both must be of degree 2.\r\n            let x2 = equ.left.monomByDegree(2, 'x'), y2 = equ.left.monomByDegree(2, 'y'), x1: Monom, y1: Monom, c: Monom\r\n\r\n            // Both square monoms must have the same coefficient.\r\n            if (x2.coefficient.isEqual(y2.coefficient)) {\r\n                equ.divide(x2.coefficient)\r\n\r\n                x1 = equ.left.monomByDegree(1, 'x')\r\n                y1 = equ.left.monomByDegree(1, 'y')\r\n\r\n                c = equ.left.monomByDegree(0)\r\n\r\n                this._center = new Point(x1.coefficient.clone().divide(2).opposed(), y1.coefficient.clone().divide(2).opposed())\r\n\r\n                this._squareRadius = c.coefficient.clone().opposed()\r\n                    .add(this._center.x.clone().pow(2))\r\n                    .add(this._center.y.clone().pow(2))\r\n\r\n                this._calculateCartesian()\r\n                this._exists = true\r\n            } else {\r\n                // The circle is not a valid circle\r\n                this._center = null\r\n                this._squareRadius = null\r\n                this._exists = false\r\n            }\r\n        }\r\n        return this\r\n    }\r\n\r\n    private _parseThroughtThreePoints(A: Point, B: Point, C: Point): Circle {\r\n        let T = new Triangle(A, B, C), mAB = T.remarquables.mediators.AB.clone(),\r\n            mAC = T.remarquables.mediators.AC.clone()\r\n        this.parse(mAB.intersection(mAC).point, A)\r\n\r\n        return this\r\n    }\r\n\r\n}","/**\r\n * This class works for 2d line in a plane.\r\n */\r\n\r\nimport {Vector} from \"./vector\";\r\nimport {Point} from \"./point\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Equation} from \"../algebra/equation\";\r\nimport {Polynom} from \"../algebra/polynom\";\r\n\r\nexport enum LinePropriety {\r\n    None,\r\n    Parallel='parallel',\r\n    Perpendicular = 'perpendicular',\r\n    Tangent = 'tangent'\r\n}\r\n\r\nexport class Line {\r\n    // A line is defined as the canonical form\r\n    // ax + by + c = 0\r\n    private _a: Fraction;\r\n    private _b: Fraction;\r\n    private _c: Fraction;\r\n    private _OA: Point;\r\n    private _d: Vector;\r\n    private _n: Vector;\r\n    private _exists: boolean\r\n\r\n    private _referencePropriety: LinePropriety\r\n    private _referenceLine: Line\r\n\r\n    static PERPENDICULAR = LinePropriety.Perpendicular\r\n    static PARALLEL = LinePropriety.Parallel\r\n\r\n    constructor(...values: unknown[]) {\r\n\r\n        this._exists = false;\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get exists(): boolean {\r\n        return this._exists;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equation(): Equation {\r\n        return new Equation(new Polynom().parse('xy', this._a, this._b, this._c), new Polynom('0')).simplify();\r\n    }\r\n\r\n    get tex(): { canonical: string, mxh: string, parametric: string } {\r\n        // canonical    =>  ax + by + c = 0\r\n        // mxh          =>  y = -a/b x - c/b\r\n        // parametric   =>  (xy) = OA + k*d\r\n\r\n        let canonical = this.equation;\r\n        // Make sur the first item is positive.\r\n        if (this._a.isNegative()) {\r\n            canonical.multiply(-1);\r\n        }\r\n\r\n        return {\r\n            canonical: canonical.tex,\r\n            mxh: this.slope.isInfinity() ? 'x=' + this.OA.x.tex : 'y=' + new Polynom().parse('x', this.slope, this.height).tex,\r\n            parametric: `${Point.pmatrix('x', 'y')} = ${Point.pmatrix(this._OA.x, this._OA.y)} + k\\\\cdot ${Point.pmatrix(this._d.x, this._d.y)}`\r\n        }\r\n    }\r\n\r\n    get display(): { canonical: string, mxh: string, parametric: string } {\r\n        // canonical    =>  ax + by + c = 0\r\n        // mxh          =>  y = -a/b x - c/b\r\n        // parametric   =>  (xy) = OA + k*d // not relevant in display mode.\r\n\r\n        let canonical = this.equation;\r\n        // Make sur the first item is positive.\r\n        if (this._a.isNegative()) {\r\n            canonical.multiply(-1);\r\n        }\r\n\r\n        return {\r\n            canonical: canonical.display,\r\n            mxh: this.slope.isInfinity() ? 'x=' + this.OA.x.display : 'y=' + new Polynom().parse('x', this.slope, this.height).display,\r\n            parametric: \"\"\r\n        }\r\n    }\r\n\r\n    get a(): Fraction {\r\n        return this._a;\r\n    }\r\n\r\n    set a(value: Fraction) {\r\n        this._a = value;\r\n    }\r\n\r\n    get b(): Fraction {\r\n        return this._b;\r\n    }\r\n\r\n    set b(value: Fraction) {\r\n        this._b = value;\r\n    }\r\n\r\n    get c(): Fraction {\r\n        return this._c;\r\n    }\r\n\r\n    set c(value: Fraction) {\r\n        this._c = value;\r\n    }\r\n\r\n    get OA(): Point {\r\n        return this._OA;\r\n    }\r\n\r\n    set OA(value: Point) {\r\n        this._OA = value;\r\n    }\r\n\r\n    get d(): Vector {\r\n        return this._d;\r\n    }\r\n\r\n    get n(): Vector {\r\n        return this._n;\r\n    }\r\n\r\n    get normal(): Vector {\r\n        return new Vector(this._a, this._b);\r\n    }\r\n\r\n    get director(): Vector {\r\n        return this._d.clone()\r\n    }\r\n\r\n    set d(value: Vector) {\r\n        this._d = value;\r\n    }\r\n\r\n    get slope(): Fraction {\r\n        return this._a.clone().opposed().divide(this._b);\r\n    }\r\n\r\n    get height(): Fraction {\r\n        return this._c.clone().opposed().divide(this._b);\r\n    }\r\n\r\n// ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse data to a line\r\n     * @param {any} values\r\n     * @returns {Line}\r\n     */\r\n    parse = (...values: unknown[]): Line => {\r\n        this._exists = false;\r\n\r\n        // Nothing is given...\r\n        if (values.length === 0) {\r\n            return this\r\n        }\r\n\r\n        // One value only: already a line (clone it), an Equation, a string (as Equation)\r\n        if (values.length === 1) {\r\n            if (values[0] instanceof Line) {\r\n                // Already a Line\r\n                return values[0].clone()\r\n            } else if (values[0] instanceof Equation) {\r\n                // It's an Equation\r\n                return this.parseEquation(values[0])\r\n            } else if (typeof values[0] === \"string\") {\r\n                // It's a string - create an Equation from it.\r\n                try {\r\n                    let E = new Equation(values[0])\r\n                    return this.parse(E)\r\n                } catch (e) {\r\n                    return this\r\n                }\r\n            }\r\n        }\r\n\r\n        if (values.length === 2) {\r\n            if (values[0] instanceof Point && values[1] instanceof Vector) {\r\n                return this.parseByPointAndVector(values[0], values[1]);\r\n            } else if (values[0] instanceof Point && values[1] instanceof Point) {\r\n                return this.parseByPointAndVector(values[0], new Vector(values[0], values[1]));\r\n            } else if (values[0] instanceof Vector && values[1] instanceof Point) {\r\n                return this.parseByPointAndNormal(values[1], values[0])\r\n            }\r\n        }\r\n\r\n        if (values.length === 3) {\r\n            if (\r\n                (values[0] instanceof Fraction || typeof values[0] === 'number')\r\n                &&\r\n                (values[1] instanceof Fraction || typeof values[1] === 'number')\r\n                &&\r\n                (values[2] instanceof Fraction || typeof values[2] === 'number')\r\n            ) {\r\n                return this.parseByCoefficient(values[0], values[1], values[2]);\r\n            }else if (\r\n                values[0] instanceof Point && values[1] instanceof Vector\r\n            ){\r\n                if(values[2] === LinePropriety.Perpendicular){\r\n                    return this.parseByPointAndNormal(values[0], values[1])\r\n                }else if (values[2] === LinePropriety.Parallel){\r\n                    return this.parseByPointAndVector(values[0], values[1])\r\n                }\r\n            }else if (values[0] instanceof Point && values[1] instanceof Line ) {\r\n                if(values[2]===LinePropriety.Parallel || values[2]===null) {\r\n                    return this.parseByPointAndLine(values[0], values[1], LinePropriety.Parallel)\r\n                }else{\r\n                    return this.parseByPointAndLine(values[0], values[1], LinePropriety.Perpendicular)\r\n                }\r\n            }\r\n        }\r\n\r\n        // TODO: Add the ability to create line from a normal vector\r\n        console.log('Someting wrong happend while creating the line')\r\n        return this;\r\n    }\r\n\r\n    parseEquation = (equ: Equation): Line => {\r\n        // Reorder the eequation\r\n        equ.reorder(true)\r\n\r\n        // It must contain either x, y or both.\r\n        let letters = new Set(equ.letters());\r\n\r\n        // No 'x', no 'y' in the equations\r\n        if (!(letters.has('x') || letters.has('y'))) {\r\n            return this\r\n        }\r\n\r\n        // Another letter in the equation ?\r\n        for (let elem of ['x', 'y']) {\r\n            if (letters.has(elem)) {\r\n                letters.delete(elem)\r\n            }\r\n        }\r\n\r\n        if (letters.size > 0) {\r\n            return this\r\n        }\r\n\r\n        // Everything should be ok now...\r\n        return this.parseByCoefficient(equ.left.monomByLetter('x').coefficient, equ.left.monomByLetter('y').coefficient, equ.left.monomByDegree(0).coefficient)\r\n    }\r\n    parseByCoefficient = (a: Fraction | number, b: Fraction | number, c: Fraction | number): Line => {\r\n        this._a = new Fraction(a);\r\n        this._b = new Fraction(b);\r\n        this._c = new Fraction(c);\r\n\r\n        this._d = new Vector(this._b.clone(), this._a.clone().opposed());\r\n        this._OA = new Point(new Fraction().zero(), this._c.clone());\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    parseByPointAndVector = (P: Point, d: Vector): Line => {\r\n        // OX = OP + k*d\r\n        // x = px + kdx     * dy\r\n        // y = py + kdy     * dx\r\n        // ------------------\r\n        // dy * x = px * dy + kdxdy\r\n        // dx * y = py * dx + kdxdy\r\n        // ------------------\r\n        // dy * x - dx * y = px * dy - py * dx\r\n        // dy * x - dx * y - (px * dy - py * dx) = 0\r\n        this.parseByCoefficient(\r\n            d.y,\r\n            d.x.clone().opposed(),\r\n            P.x.clone().multiply(d.y).subtract(P.y.clone().multiply(d.x)).opposed()\r\n        )\r\n\r\n        // Choose the current values as point and direction vector instead of the automatic version.\r\n        this._OA = P.clone();\r\n        this._d = d.clone();\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    parseByPointAndNormal = (P: Point, n: Vector): Line => {\r\n        return this.parseByCoefficient(\r\n            n.x,\r\n            n.y,\r\n            P.x.clone().multiply(n.x)\r\n                .add(P.y.clone().multiply(n.y)).opposed()\r\n        )\r\n    }\r\n\r\n    parseByPointAndLine = (P: Point, L: Line, orientation?: LinePropriety): Line => {\r\n\r\n        if (orientation === undefined) {\r\n            orientation = LinePropriety.Parallel\r\n        }\r\n\r\n        if (orientation === LinePropriety.Parallel) {\r\n            return this.parseByPointAndNormal(P, L.normal)\r\n        } else if (orientation === LinePropriety.Perpendicular) {\r\n            return this.parseByPointAndNormal(P, L.director)\r\n        }\r\n\r\n        this._exists = false\r\n        return this\r\n    }\r\n\r\n    clone = (): Line => {\r\n        this._a = this._a.clone();\r\n        this._b = this._b.clone();\r\n        this._c = this._c.clone();\r\n\r\n        this._d = this._d.clone();\r\n        this._OA = this._OA.clone();\r\n        this._n = this._n.clone();\r\n\r\n        this._exists = this.exists\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    isParellelTo = (line: Line): Boolean => {\r\n        // Do they have the isSame direction ?\r\n        return this.slope.isEqual(line.slope) && this.height.isNotEqual(line.height);\r\n    }\r\n    isSameAs = (line: Line): Boolean => {\r\n        return this.slope.isEqual(line.slope) && this.height.isEqual(line.height);\r\n    }\r\n    isVertical = (): Boolean => {\r\n        return this.slope.isInfinity()\r\n    }\r\n    simplify = (): Line => {\r\n        let lcm = Numeric.lcm(this._a.denominator, this._b.denominator, this._c.denominator),\r\n            gcd = Numeric.gcd(this._a.numerator, this._b.numerator, this._c.numerator);\r\n\r\n        this.parseByCoefficient(\r\n            this._a.clone().multiply(lcm).divide(gcd),\r\n            this._b.clone().multiply(lcm).divide(gcd),\r\n            this._c.clone().multiply(lcm).divide(gcd),\r\n        )\r\n\r\n        return this\r\n    }\r\n\r\n    simplifyDirection = (): Line => {\r\n        let lcm = Numeric.lcm(this._d.x.denominator, this._d.y.denominator),\r\n            gcd = Numeric.gcd(this._d.x.numerator, this._d.y.numerator);\r\n\r\n        this._d.x.multiply(lcm).divide(gcd);\r\n        this._d.y.multiply(lcm).divide(gcd);\r\n        return this;\r\n    }\r\n    intersection = (line: Line): { point: Point, hasIntersection: boolean, isParallel: boolean, isSame: boolean } => {\r\n        let Pt = new Point(), isParallel = false, isSame = false, hasIntersection = true;\r\n\r\n        // this         => ax+by+c = 0\r\n        // line         => dx+ey+f = 0\r\n        //\r\n        //  aex + bey + ce = 0\r\n        //  dbx + bey + bf = 0\r\n        // (ae-db)x + ce-bf = 0\r\n        //\r\n        //  adx + bdy + cd = 0\r\n        //  adx + aey + af = 0\r\n        // (bd-ae)y + (cd-af)\r\n        //\r\n        // x = (bf-ce)/(ae-db)\r\n        // y = (af-cd)/(bd-ae)\r\n\r\n\r\n        // Theres is no 'y'\r\n        if (this._b.isZero() || line.b.isZero()) {\r\n            // TODO : handle no y in the line canonical form\r\n        }\r\n\r\n        if (this.isParellelTo(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isParallel = true;\r\n        } else if (this.isSameAs(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isSame = true;\r\n        } else {\r\n            Pt.x = this._b.clone().multiply(line.c).subtract(this._c.clone().multiply(line.b))\r\n                .divide(this._a.clone().multiply(line.b).subtract(this._b.clone().multiply(line.a)));\r\n            Pt.y = this._a.clone().multiply(line.c).subtract(this._c.clone().multiply(line.a))\r\n                .divide(this._b.clone().multiply(line.a).subtract(this._a.clone().multiply(line.b)));\r\n        }\r\n\r\n        return {\r\n            point: Pt,\r\n            hasIntersection: !(isParallel || isSame),\r\n            isParallel,\r\n            isSame\r\n        };\r\n    }\r\n\r\n    distanceTo(pt: Point): { value: number, fraction: Fraction, tex: string } {\r\n        let numerator = pt.x.clone().multiply(this._a)\r\n                .add(pt.y.clone().multiply(this._b))\r\n                .add(this._c).abs(),\r\n            d2 = this.normal.normSquare;\r\n\r\n        // The denominator is null - shouldn't be possible\r\n        if (d2.isZero()) {\r\n            return {\r\n                value: NaN,\r\n                tex: 'Not a line',\r\n                fraction: new Fraction().infinite()\r\n            }\r\n        }\r\n        // The denominator is a perfect square - simplify the tex result\r\n        let value = numerator.value / Math.sqrt(d2.value),\r\n            F = numerator.clone().divide(d2.clone().sqrt());\r\n\r\n        // The denominator is a perfect square.\r\n        if (d2.isSquare()) {\r\n            return {\r\n                value,\r\n                tex: F.tex,\r\n                fraction: F\r\n            }\r\n        }\r\n        // Complete answer...\r\n        return {\r\n            value,\r\n            tex: `\\\\frac{${numerator.tex}}{\\\\sqrt{${d2.tex}}}`,\r\n            fraction: F\r\n        };\r\n    }\r\n\r\n    hitSegment(A: Point, B: Point): boolean {\r\n        let iPt = this.intersection(\r\n            new Line(A, B)\r\n        )\r\n\r\n        // There is an intersection point\r\n        if (iPt.hasIntersection) {\r\n            return iPt.point.x.value >= Math.min(A.x.value, B.x.value)\r\n                && iPt.point.x.value <= Math.max(A.x.value, B.x.value)\r\n                && iPt.point.y.value >= Math.min(A.y.value, B.y.value)\r\n                && iPt.point.y.value <= Math.max(A.y.value, B.y.value)\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getValueAtX = (value: Fraction|number): Fraction => {\r\n        const equ = this.equation.clone().isolate('y'),\r\n            F = new Fraction(value)\r\n\r\n        if(equ instanceof Equation){\r\n            return equ.right.evaluate({x: F})\r\n        }\r\n        return\r\n    }\r\n    getValueAtY = (value: Fraction|number): Fraction => {\r\n        const equ = this.equation.clone().isolate('x'),\r\n            F = new Fraction(value)\r\n\r\n        if(equ instanceof Equation){\r\n            return equ.right.evaluate({y: F})\r\n        }\r\n        return\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Special functions\r\n    // ------------------------------------------\r\n    canonicalAsFloatCoefficient(decimals: number): string {\r\n        if (decimals === undefined) {\r\n            decimals = 2;\r\n        }\r\n\r\n        let ca = this._a.value,\r\n            cb = this._b.value,\r\n            cc = this._c.value,\r\n            canonical = '';\r\n\r\n        if (!this._a.isZero()) {\r\n            if (this._a.isOne()) {\r\n                canonical = 'x'\r\n            } else if (this._a.clone().opposed().isOne()) {\r\n                canonical = '-x'\r\n            } else {\r\n                canonical = this._a.value.toFixed(decimals) + 'x'\r\n            }\r\n        }\r\n\r\n        if (!this._b.isZero()) {\r\n            if (this._b.isPositive()) {\r\n                canonical += '+'\r\n            }\r\n            canonical += this._b.value.toFixed(decimals) + 'y'\r\n        }\r\n\r\n        if (!this._c.isZero()) {\r\n            if (this._c.isPositive()) {\r\n                canonical += '+'\r\n            }\r\n            canonical += this._c.value.toFixed(decimals)\r\n        }\r\n\r\n\r\n        return canonical + '=0';\r\n    }\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Line} from \"./line\";\r\nimport {Vector} from \"./vector\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\n/**\r\n * Helper class - a way to identify an object {x: number, y: number}\r\n */\r\nclass PointXY {\r\n    x: number\r\n    y: number\r\n}\r\n\r\nexport class Point {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n    private _exist: Boolean;\r\n\r\n    constructor(...values: unknown[]) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.tex);\r\n        pts.push(this._y.tex);\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n\r\n    get display(): string {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.tex);\r\n        pts.push(this._y.tex);\r\n\r\n        return `(${pts.join(';')})`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...values: unknown[]): Point => {\r\n        // Initialize the value.\r\n        this.zero();\r\n\r\n        // Nothing is given\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        // One element is given - might be already a point !\r\n        if (values.length === 1) {\r\n            // it's already a point - clone it\r\n            if (values[0] instanceof Point) {\r\n                this._x = values[0].x.clone()\r\n                this._y = values[0].y.clone()\r\n                return this\r\n            }\r\n\r\n            // Value is given as string, comma separated.\r\n            if (typeof values[0] === 'string') {\r\n                let xy = values[0].split(',')\r\n                if (xy.length === 2) {\r\n                    this._x = new Fraction(xy[0]).reduce()\r\n                    this._y = new Fraction(xy[1]).reduce()\r\n                    return this\r\n                }\r\n            }\r\n\r\n            // Value given as an object with {x: value, y: value}\r\n            if(values[0] instanceof PointXY){\r\n                    this._x = new Fraction(values[0].x).reduce()\r\n                    this._y = new Fraction(values[0].y).reduce()\r\n                return this\r\n            } else {\r\n                return this.zero()\r\n            }\r\n        }\r\n\r\n        if (values.length === 2) {\r\n            this._x = new Fraction(values[0]).reduce()\r\n            this._y = new Fraction(values[1]).reduce()\r\n            return this\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Point => {\r\n        this._x = this._x.clone()\r\n        this._y = this._y.clone()\r\n\r\n        return this\r\n    }\r\n\r\n    zero = (): Point => {\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    origin = (): Point => {\r\n        this.zero();\r\n        return this;\r\n    }\r\n\r\n    middleOf = (P1: Point, P2: Point): Point => {\r\n        this._x = P1.x.clone().add(P2.x).divide(2);\r\n        this._y = P1.y.clone().add(P2.y).divide(2);\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Display functions\r\n    // ------------------------------------------\r\n    texValues = (numberOfDigits: number): string => {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.value.toFixed(numberOfDigits === undefined ? 2 : numberOfDigits));\r\n        pts.push(this._y.value.toFixed(numberOfDigits === undefined ? 2 : numberOfDigits));\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Static functions\r\n    // ------------------------------------------\r\n    static pmatrix = (a: any, b: any, c?: any): string => {\r\n        if (c === undefined) {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\end{pmatrix}`;\r\n        } else {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\\\\\ ${c.tex ? c.tex : c} \\\\end{pmatrix}`;\r\n        }\r\n    };\r\n\r\n    distanceTo = (item:Point|Line): { value: number, fraction: Fraction, tex: string } => {\r\n        let value = 0, fraction = new Fraction(), tex = ''\r\n\r\n        if(item instanceof Line){\r\n            return item.distanceTo(this)\r\n        }else if(item instanceof Point){\r\n            let V = new Vector(this, item)\r\n\r\n            value = V.norm\r\n            fraction = V.normSquare.sqrt()\r\n            tex = V.normSquare.isSquare() ? fraction.tex : `\\\\sqrt{\\\\frac{ ${V.normSquare.numerator} }{ ${V.normSquare.denominator} }}`\r\n        }\r\n        return { value, fraction, tex }\r\n    }\r\n\r\n    get key(): string {\r\n      return `${this.x.display};${this.y.display}`\r\n}\r\n    isInListOfPoints = (list: Point[]): boolean => {\r\n        const keyList = list.map(x=>x.key)\r\n\r\n        return keyList.includes(this.key)\r\n    }\r\n}\r\n","import {Point} from \"./point\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Vector} from \"./vector\";\r\nimport {Line} from \"./line\";\r\nimport {Equation} from \"../algebra/equation\";\r\n\r\nexport interface remarquableLines {\r\n    'medians': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'mediators': {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line,\r\n        'intersection': Point\r\n    },\r\n    'heights': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'bisectors': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    }\r\n}\r\n\r\nexport class Triangle {\r\n    private _A: Point;\r\n    private _B: Point;\r\n    private _C: Point;\r\n    private _lines: {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line\r\n    };\r\n    private _middles: {\r\n        'AB': Point,\r\n        'AC': Point,\r\n        'BC': Point\r\n    };\r\n    private _remarquables: remarquableLines;\r\n\r\n\r\n    constructor(...values: unknown[]) {\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setters\r\n    // ------------------------------------------\r\n\r\n    get A(): Point {\r\n        return this._A;\r\n    }\r\n\r\n    get B(): Point {\r\n        return this._B;\r\n    }\r\n\r\n    get C(): Point {\r\n        return this._C;\r\n    }\r\n\r\n    get AB(): Vector {\r\n        return this.getSegment('A', 'B');\r\n    }\r\n\r\n    get BA(): Vector {\r\n        return this.getSegment('B', 'A');\r\n    }\r\n\r\n    get BC(): Vector {\r\n        return this.getSegment('B', 'C');\r\n    }\r\n\r\n    get CB(): Vector {\r\n        return this.getSegment('C', 'B');\r\n    }\r\n\r\n    get AC(): Vector {\r\n        return this.getSegment('A', 'C');\r\n    }\r\n\r\n    get CA(): Vector {\r\n        return this.getSegment('C', 'A');\r\n    }\r\n\r\n    get isRectangle(): boolean {\r\n        if (this.AB.isNormalTo(this.BC)) {\r\n            return true;\r\n        }\r\n        if (this.AB.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n        if (this.BC.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    get isEquilateral(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) &&\r\n            this.AB.normSquare.isEqual(this.AC.normSquare);\r\n    }\r\n\r\n    get isIsocele(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) ||\r\n            this.AB.normSquare.isEqual(this.AC.normSquare) ||\r\n            this.BC.normSquare.isEqual(this.AC.normSquare)\r\n    }\r\n\r\n    get lines(): { 'AB': Line, 'BC': Line, 'AC': Line } {\r\n        return this._lines;\r\n    }\r\n\r\n    get remarquables(): remarquableLines {\r\n        return this._remarquables;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Parse values to a triangle. Supported formats:\r\n     * Point, Point, Point\r\n     * x1, y1, x2, y2, x3, y3\r\n     * TODO: Something else ?\r\n     * @param values\r\n     */\r\n    parse = (...values: any): Triangle => {\r\n        if (values.length === 6) {\r\n            // Check if all values are number or fractions.\r\n            let v = values.map((x: any) => new Fraction(x));\r\n            return this.parse(\r\n                new Point(v[0], v[1]),\r\n                new Point(v[2], v[3]),\r\n                new Point(v[4], v[5]),\r\n            )\r\n        } else if (values.length === 3) {\r\n            // Possibilities:\r\n            // - Three points (or part of points, only dict for example, or array (TODO: Add the array syntax for point)\r\n            // - Three lines\r\n            // - Three lines as text.\r\n            if(values.filter((x:any) => typeof x === 'string').length===3) {\r\n                return this.parse( ...values.map((x:string) => new Line(x)) )\r\n            }else if(values.filter((x:any) => x instanceof Line).length===3) {\r\n                // We have three lines\r\n                this._lines = {\r\n                    'AB': values[0],\r\n                    'BC': values[1],\r\n                    'AC': values[2]\r\n                };\r\n\r\n                // Get the intersection points -> build the triangle using these intersection points.\r\n                let intersect = values[0].intersection(values[1]);\r\n                if (intersect.hasIntersection) {\r\n                    this._B = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[1].intersection(values[2]);\r\n                if (intersect.hasIntersection) {\r\n                    this._C = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[2].intersection(values[0]);\r\n                if (intersect.hasIntersection) {\r\n                    this._A = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n            }else {\r\n                // At least, one of the value is not a point.\r\n                if (values.filter((x: any) => (x instanceof Point)).length < 3) {\r\n                    return this.parse(\r\n                        new Point(values[0]),\r\n                        new Point(values[1]),\r\n                        new Point(values[2])\r\n                    )\r\n                }\r\n\r\n                // We have three points.\r\n                this._A = values[0].clone();\r\n                this._B = values[1].clone();\r\n                this._C = values[2].clone();\r\n\r\n                this._lines = {\r\n                    'AB': new Line(this._A, this._B),\r\n                    'BC': new Line(this._B, this._C),\r\n                    'AC': new Line(this._A, this._C)\r\n                };\r\n            }\r\n        } else if (values.length === 1) {\r\n            if (values[0] instanceof Triangle) {\r\n                return values[0].clone();\r\n            }\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the Triangle class\r\n     */\r\n    clone = (): Triangle => {\r\n        this._A = this._A.clone();\r\n        this._B = this._B.clone();\r\n        this._C = this._C.clone();\r\n\r\n        this._lines = {\r\n            'AB': this._lines.AB.clone(),\r\n            'BC': this._lines.BC.clone(),\r\n            'AC': this._lines.AC.clone()\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Triangle operations and properties\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Generate the Line object for the three segments of the triangle\r\n     */\r\n    private _updateTriangle = () => {\r\n        this._middles = {\r\n            'AB': new Point().middleOf(this._A, this._B),\r\n            'AC': new Point().middleOf(this._A, this._C),\r\n            'BC': new Point().middleOf(this._B, this._C)\r\n        }\r\n\r\n        this._remarquables = this._calculateRemarquableLines();\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the Point class for the given name\r\n     * @param ptName\r\n     */\r\n    private getPointByName = (ptName: string): Point => {\r\n        switch (ptName.toUpperCase()) {\r\n            case 'A':\r\n                return this._A;\r\n            case 'B':\r\n                return this._B;\r\n            case 'C':\r\n                return this._C;\r\n        }\r\n\r\n        // Something went wrong ! Return the first point\r\n        return this._A;\r\n    }\r\n    /**\r\n     * Get the vector for the segment given by name.\r\n     * @param ptName1\r\n     * @param ptName2\r\n     */\r\n    private getSegment = (ptName1: string, ptName2: string): Vector => {\r\n        return new Vector(\r\n            this.getPointByName(ptName1),\r\n            this.getPointByName(ptName2)\r\n        );\r\n    }\r\n\r\n    private _calculateRemarquableLines = (): remarquableLines => {\r\n        let remarquables: remarquableLines = {\r\n            'medians': {\r\n                'A': new Line(this._A, this._middles.BC),\r\n                'B': new Line(this._B, this._middles.AC),\r\n                'C': new Line(this._C, this._middles.AB),\r\n                'intersection': null\r\n            },\r\n            'mediators': {\r\n                'AB': new Line(this._middles.AB, new Vector(this._A, this._B).normal()),\r\n                'AC': new Line(this._middles.AC, new Vector(this._A, this._C).normal()),\r\n                'BC': new Line(this._middles.BC, new Vector(this._B, this._C).normal()),\r\n                'intersection': null\r\n            },\r\n            'heights': {\r\n                'A': new Line(this._A, new Vector(this._B, this._C).normal()),\r\n                'B': new Line(this._B, new Vector(this._A, this._C).normal()),\r\n                'C': new Line(this._C, new Vector(this._A, this._B).normal()),\r\n                'intersection': null\r\n            },\r\n            'bisectors': {\r\n                'A': this._calculateBisectors('A'),\r\n                'B': this._calculateBisectors('B'),\r\n                'C': this._calculateBisectors('C'),\r\n                'intersection': null\r\n            }\r\n        }\r\n\r\n        // As it's a triangle, we assume the lines are intersecting and aren't parallel or superposed.\r\n        remarquables.medians.intersection = remarquables.medians.A.intersection(remarquables.medians.B).point;\r\n        remarquables.mediators.intersection = remarquables.mediators.AB.intersection(remarquables.mediators.BC).point;\r\n        remarquables.heights.intersection = remarquables.heights.A.intersection(remarquables.heights.B).point;\r\n        remarquables.bisectors.intersection = remarquables.bisectors.A.intersection(remarquables.bisectors.B).point;\r\n\r\n        // Everything was calculated for the remarquable lines.\r\n        return remarquables;\r\n    }\r\n\r\n    private _calculateBisectors = (pt: string): Line => {\r\n        let tlines = this.lines, d1, d2;\r\n\r\n        if(pt==='A'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.AC;\r\n        }else if(pt==='B'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.BC;\r\n        }else if(pt==='C'){\r\n            d1 = tlines.BC;\r\n            d2 = tlines.AC;\r\n        }\r\n\r\n        let b1 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm)).reorder(true).simplify()),\r\n            b2 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm).opposed()).reorder(true).simplify());\r\n\r\n        // Must determine which bisectors is in the triangle\r\n        if(pt==='A'){\r\n            return b1.hitSegment(this.B, this.C)?b1:b2;\r\n        }\r\n        if(pt==='B'){\r\n            return b1.hitSegment(this.A, this.C)?b1:b2;\r\n        }\r\n        if(pt==='C'){\r\n            return b1.hitSegment(this.B, this.A)?b1:b2;\r\n        }\r\n\r\n        // Default returns the first bisector\r\n        return b1;\r\n    }\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Point} from \"./point\";\r\n\r\nexport class Vector {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n\r\n    constructor(...values: unknown[]) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get normSquare(): Fraction {\r\n        return this._x.clone().pow(2).add(this._y.clone().pow(2));\r\n    }\r\n\r\n    get norm(): number {\r\n        return Math.sqrt(this.normSquare.value);\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\begin{pmatrix}${this._x.tex} \\\\\\\\\\ ${this._y.tex} \\\\end{pmatrix}`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Vector => {\r\n        // TODO: Must be more strict about what is given and limit to two dimensional vectors.p\r\n        // Maybe more than one value was given...\r\n        // Initialize the vector\r\n        this.zero();\r\n\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        if (values.length === 1) {\r\n            if (values[0] instanceof Vector) {\r\n                return values[0].clone()\r\n            } else {\r\n                return this._parseString(values[0])\r\n            }\r\n        }\r\n\r\n        if (values.length >= 2) {\r\n            // Two points are given - skip the third value.\r\n            if (values[0] instanceof Point && values[1] instanceof Point) {\r\n                this._x = values[1].x.clone().subtract(values[0].x)\r\n                this._y = values[1].y.clone().subtract(values[0].y)\r\n                return this;\r\n            }\r\n\r\n            // Fractions or a number are give\r\n            if (values[0] instanceof Fraction || !isNaN(values[0])) {\r\n                this._x = new Fraction(values[0])\r\n            }\r\n            if (values[1] instanceof Fraction || !isNaN(values[1])) {\r\n                this._y = new Fraction(values[1])\r\n            }\r\n\r\n            if(\r\n                (typeof values[0] === 'object' && !isNaN(values[0].x) && !isNaN(values[0].x)) &&\r\n                (typeof values[1] === 'object' && !isNaN(values[1].x) && !isNaN(values[1].x))\r\n            ){\r\n                this._x = new Fraction(+values[1].x-values[0].x)\r\n                this._y = new Fraction(+values[1].y-values[0].y)\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Vector => {\r\n        let V = new Vector();\r\n\r\n        if (this._x !== null) {\r\n            V.x = this._x.clone();\r\n        }\r\n        if (this._y !== null) {\r\n            V.y = this._y.clone();\r\n        }\r\n        return V;\r\n    }\r\n\r\n    reset = (): Vector => {\r\n        this._x = null;\r\n        this._y = null;\r\n        return this;\r\n    }\r\n\r\n    zero = (): Vector => {\r\n        this.reset();\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    one = (): Vector => {\r\n        this._x = new Fraction();\r\n        this._y = new Fraction();\r\n        return this;\r\n    }\r\n\r\n    private _parseString = (value: string): Vector => {\r\n        // Split comma, semi colon or single space.\r\n        let components = value.split(/[,;\\s]/g);\r\n\r\n        // Validate the fraction values.\r\n        this.x = new Fraction(components[0] || null);\r\n        this.y = new Fraction(components[1] || null);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Vector => {\r\n        this._x.opposed();\r\n        this._y.opposed();\r\n        return this;\r\n    }\r\n\r\n    add = (V: Vector): Vector => {\r\n        this._x.add(V.x);\r\n        this._y.add(V.y);\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (V: Vector): Vector => {\r\n        return this.add(V.clone().opposed());\r\n    }\r\n\r\n    scalarProductWithVector = (V: Vector): Fraction => {\r\n        // TODO: Add the scalar factor !!!!\r\n        return this._x.clone().multiply(V.x).add(this._y.clone().multiply(V.y));\r\n    }\r\n\r\n    static scalarProduct = (v1: Vector, v2: Vector): number => {\r\n        // TODO: Transform to fraction with nthroot.\r\n        return v1.x.value * v2.x.value + v1.y.value * v2.y.value;\r\n    };\r\n\r\n    normal = (): Vector => {\r\n        let x = this.x.clone().opposed(), y = this.y.clone();\r\n        this._x = y;\r\n        this._y = x;\r\n        return this;\r\n    }\r\n\r\n    isNormalTo = (v: Vector): boolean => {\r\n        return this.scalarProductWithVector(v).isZero()\r\n    }\r\n\r\n    multiplyByScalar = (k: any): Vector => {\r\n        let scalar = new Fraction(k);\r\n        this._x.multiply(scalar);\r\n        this._y.multiply(scalar);\r\n        return this;\r\n    }\r\n\r\n    divideByScalar = (k: any): Vector => {\r\n        return this.multiplyByScalar(new Fraction(k).invert());\r\n    }\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    simplify = (): Vector => {\r\n        // Multiply by the lcm of denominators.\r\n        return this.multiplyByScalar(Numeric.lcm(this._x.denominator, this._y.denominator))\r\n            .divideByScalar(Numeric.gcd(this._x.numerator, this._y.numerator));\r\n    }\r\n\r\n    angleWith = (V: Vector, sharp?: Boolean, radian?: Boolean): number => {\r\n        let scalar = this.scalarProductWithVector(V).value,\r\n            toDegree = radian ? 1 : 180 / Math.PI;\r\n        if (sharp) {\r\n            scalar = Math.abs(scalar);\r\n        }\r\n\r\n        return toDegree * Math.acos(scalar / (this.norm * V.norm));\r\n    }\r\n}\r\n","export class Numeric{\r\n    static round(value:number, decimals:number=2):number {\r\n        return Number(Math.round(Number(value+'e'+decimals))+'e-'+decimals);\r\n    }\r\n\r\n    /**\r\n     * Get the list of the nth first prime numbers.\r\n     * @param nb : number of primes to choose from\r\n     */\r\n    static primes(nb?:number):number[]{\r\n        let primesValues:number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973];\r\n        if(nb === undefined){\r\n            return primesValues;\r\n        }else{\r\n            return primesValues.slice(0,Math.min(primesValues.length,nb));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the list of all dividers of a number.\r\n     * @param value\r\n     */\r\n    static dividers(value:number):number[]{\r\n        let D: number[];\r\n        const maxV = Math.sqrt(Math.abs(value));\r\n\r\n        // Initialize the list of dividers.\r\n        D = [];\r\n\r\n        for(let i=1; i<=maxV; i++){\r\n            if(value%i===0){\r\n                D.push(i);\r\n                D.push(value/i);\r\n            }\r\n        }\r\n\r\n        // Order numbers.\r\n        D.sort(function(a, b){return a-b;});\r\n\r\n        // Make sure the array of value is unique.\r\n        return [...new Set(D)];\r\n    }\r\n    /**\r\n     * Great Common Divisor\r\n     * @param values : number values\r\n     */\r\n    static gcd(...values:number[]):number{\r\n        // Define the gcd for two number\r\n        let gcd2 = function(a:number,b:number):number{\r\n            if(b===0){return a;}\r\n            return gcd2(b, a%b);\r\n        };\r\n\r\n        let g:number = 1,\r\n            i:number = 2;\r\n\r\n        // Nothing is given\r\n        if(values.length===0){return 1;}\r\n        // Only one number is given\r\n        if(values.length===1){\r\n            // The first number is zero\r\n            if(values[0]===0){return 1;}\r\n            // Return the number\r\n            return values[0];\r\n        }\r\n\r\n        // We have at least 2 numbers.\r\n        g = gcd2(values[0],values[1]);\r\n\r\n        // The gcd of the two first value is one ? It's already finished.\r\n        if(g===1){return 1;}\r\n\r\n        // The current gcd isn't one. Continue with all next values.\r\n        for(i=2; i<values.length; i++){\r\n            g = gcd2(g, values[i]);\r\n            // Escape if gcd is already one.\r\n            if(g===1){break;}\r\n        }\r\n\r\n        return Math.abs(g);\r\n    }\r\n\r\n    static divideNumbersByGCD(...values: number[]): number[]{\r\n        let gcd = Numeric.gcd(...values)\r\n\r\n        return values.map(x=>x/gcd)\r\n    }\r\n    /**\r\n     * Least Common Multiple\r\n     * @param values: list of numbers\r\n     */\r\n    static lcm(...values:number[]):number{\r\n        return values.reduce(function(a,b){\r\n            return Math.abs(a * b / Numeric.gcd(a, b));\r\n        });\r\n    }\r\n\r\n    static pythagoricianTripletsWithTarget(target: number, targetIsSquare?:boolean): number[][] {\r\n        // méthode inverse, à partir du triplet.\r\n        const triplets = [],\r\n            targetValue = targetIsSquare===true?+target:target**2\r\n        for(let u = 0; u <= target; u++){\r\n            for(let v = 0; v <=target; v++){\r\n                if(u**2+v**2===targetValue){\r\n                    triplets.push([u, v, target])\r\n                }\r\n            }\r\n        }\r\n\r\n        return triplets\r\n    }\r\n\r\n    static numberCorrection(value: number, epsilonDigit:number = 1, epsilonNumberOfDigits: number = 10, number_of_digits: number = 6){\r\n\r\n        // Must modify the number if it's like:\r\n        // a: 3.0000000000000003\r\n        // b: 3.9999999999999994\r\n        // remove the last character\r\n        // check if around n last characters are either 0 or 9\r\n        // if it is, 'round' the number.\r\n        function extractDecimalPart(valueToExtract: number, decimalLength: number){\r\n            let decimal = valueToExtract.toString()\r\n\r\n            if (!decimal.includes('.')) {\r\n                return ''\r\n            }\r\n\r\n            decimal = decimal.split('.')[1]\r\n            return decimal.substring(0, decimalLength)\r\n        }\r\n\r\n        const epsilon = Number(`0.${\"0\".repeat(epsilonNumberOfDigits-1)}${epsilonDigit}`)\r\n        const decimal = extractDecimalPart(value, epsilonNumberOfDigits)\r\n        if(decimal===''){return value}\r\n\r\n        const n9 = decimal.match(/9+$/g)\r\n        const n0 = decimal.match(/0+$/g)\r\n\r\n        if (n9 && n9[0].length >= number_of_digits) {\r\n            // New tested values.\r\n            const mod = extractDecimalPart(value + epsilon, epsilonNumberOfDigits),\r\n                mod0 = mod.match(/0+$/g)\r\n\r\n            if(mod0 && mod0[0].length>= number_of_digits){\r\n                return +((value+epsilon).toString().split(mod0[0])[0])\r\n            }\r\n        }\r\n\r\n        if (n0 && n0[0].length >= number_of_digits) {\r\n            // New tested values.\r\n            const mod = extractDecimalPart(value - epsilon, epsilonNumberOfDigits),\r\n                mod9 = mod.match(/9+$/g)\r\n\r\n            if(mod9 && mod9[0].length>= number_of_digits){\r\n                // The value can be changed. Remove all nines!\r\n                return +(value.toString().split(n0[0])[0])\r\n            }\r\n        }\r\n\r\n        return value\r\n    }\r\n\r\n    static periodic(value: number):number{\r\n        if(Number.isSafeInteger(value)){return 0}\r\n\r\n        // Assume it's with decimal.\r\n        let decimal = (value.toString()).split('.')[0]\r\n\r\n        // The decimal part is limited\r\n        if(decimal.length<10){return 0}\r\n\r\n        // Find the periodic if it exists.\r\n    }\r\n}","import {rndPolynom} from \"./rndPolynom\";\r\nimport {rndMonom} from \"./rndMonom\";\r\nimport {rndHelpers} from \"./rndHelpers\";\r\nimport {randomCoefficientConfig, randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {rndFraction} from \"./rndFraction\";\r\nimport {Polynom} from \"../algebra/polynom\";\r\nimport {Monom} from \"../algebra/monom\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\nexport * from \"./rndTypes\"\r\n\r\nexport namespace Random {\r\n    export function polynom(config?: randomPolynomConfig): Polynom {\r\n        return (new rndPolynom(config)).generate()\r\n    }\r\n\r\n    export function monom(config?: randomMonomConfig): Monom {\r\n        return (new rndMonom(config)).generate()\r\n    }\r\n\r\n    export function fraction(config?: randomCoefficientConfig): Fraction {\r\n        return (new rndFraction(config)).generate()\r\n    }\r\n\r\n    export function number(from: number, to: number): number {\r\n        return rndHelpers.randomInt(from, to)\r\n    }\r\n\r\n    export function numberSym(max: number, allowZero?: boolean): number {\r\n        return rndHelpers.randomIntSym(max, allowZero)\r\n    }\r\n\r\n    export function prime(max: number): number {\r\n        return rndHelpers.randomPrime(max)\r\n    }\r\n\r\n    export function bool(percent?: number): boolean {\r\n        return rndHelpers.randomBool(percent)\r\n    }\r\n\r\n    export function array(arr: any[], number?: number): any[] {\r\n        return rndHelpers.randomArray(arr, number)\r\n    }\r\n\r\n    export function item(arr: any[]): any {\r\n        return rndHelpers.randomItem(arr)\r\n    }\r\n\r\n    export function shuffle(arr: any[]): any[] {\r\n        return rndHelpers.shuffleArray(arr)\r\n    }\r\n}","export class randomCore {\r\n    protected _config: Object\r\n    protected _defaultConfig: Object\r\n    mergeConfig = (config: Object, defaultConfig: Object): Object => {\r\n        if (config !== undefined) {\r\n            return {...defaultConfig, ...config}\r\n        }\r\n        return defaultConfig\r\n    }\r\n\r\n    generate = (): unknown => {\r\n        return undefined\r\n    }\r\n\r\n    config = (config: Object): randomCore => {\r\n        this._config = this.mergeConfig(config, this._defaultConfig)\r\n        return this\r\n    }\r\n}","import {randomCore} from \"./randomCore\";\r\nimport {randomCoefficientConfig, randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {Random} from \"./random\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\n/**\r\n * Create a random monom based on a based configuration\r\n */\r\nexport class rndFraction extends randomCore {\r\n    declare protected _config: randomCoefficientConfig\r\n    declare protected _defaultConfig: randomCoefficientConfig\r\n\r\n    constructor(userConfig?: randomCoefficientConfig) {\r\n        super();\r\n\r\n        this._defaultConfig = {\r\n            negative: true,\r\n            max: 10,\r\n            reduced: true,\r\n            zero: true,\r\n            natural: false\r\n        }\r\n\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Fraction => {\r\n        let Q = new Fraction()\r\n\r\n        if(this._config.negative){\r\n            Q.numerator = Random.numberSym(this._config.max, this._config.zero)\r\n        }else {\r\n            Q.numerator = Random.number(this._config.zero ? 0 : 1, this._config.max)\r\n        }\r\n        if(this._config.natural){\r\n            Q.denominator = 1\r\n        }else {\r\n            let securityCount = 0\r\n            while(Q.isRelative() && securityCount<10) {\r\n                Q.denominator = Random.number(1, this._config.max)\r\n                securityCount++\r\n            }\r\n        }\r\n\r\n        return this._config.reduced?Q.reduce():Q\r\n    }\r\n}\r\n","/**\r\n * Random helpers\r\n */\r\nimport {Numeric} from \"../numeric\";\r\n\r\nexport class rndHelpers {\r\n\r\n    /**\r\n     * Random boolean with a percent ratio\r\n     * @param percent\r\n     */\r\n    static randomBool(percent:number=0.5):boolean{\r\n        return Math.random()<percent;\r\n    }\r\n\r\n    /**\r\n     * Random integer between two values.\r\n     * @param a (number) : From this value to the second value. If the second is ommited, this value is the max value.\r\n     * @param b (number) : To this value. If this is ommited.\r\n     */\r\n    static randomInt(a:number, b?:number):number{\r\n        if(b===undefined){return this.randomInt(0,a);}\r\n\r\n        return Math.floor(Math.random() * (b - a + 1) + a);\r\n    }\r\n\r\n    /**\r\n     * Random integer between -max and max value.\r\n     * @param max (number) : determine the limits.\r\n     * @param zero (bool) : determine if zero is allowed or not.\r\n     */\r\n    static randomIntSym(max:number, zero?:boolean):number{\r\n        if(zero===false){\r\n            return this.randomBool()?this.randomInt(1,max):-this.randomInt(1,max);\r\n        }else{\r\n            return this.randomInt(-max, max);\r\n        }\r\n    }\r\n\r\n    static randomPrime(max: number): number {\r\n        let primes = Numeric.primes()\r\n        if(max!==undefined){\r\n            primes = primes.filter(x=>x<max)\r\n        }\r\n        return this.randomItem(primes)\r\n    }\r\n\r\n    static randomArray(arr: any[], number?:number):any[]{\r\n        if(number===undefined){number = 1}\r\n\r\n        // Return a clone array\r\n        if(arr.length<=0){return Object.values(arr)}\r\n\r\n        // Randomize the array and return the n first elements.\r\n        return rndHelpers.shuffleArray(arr).slice(0,number);\r\n    }\r\n\r\n    static randomItem(arr: any[]): any{\r\n        if(arr.length===0){return ''}\r\n        return this.randomArray(arr, 1)[0]\r\n    }\r\n\r\n    static shuffleArray(arr: any[]): any[] {\r\n        // The Fisher-Yates algorithm\r\n        let shuffleArray = Object.values(arr)\r\n        for (let i = shuffleArray.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            const temp = shuffleArray[i];\r\n            shuffleArray[i] = shuffleArray[j];\r\n            shuffleArray[j] = temp;\r\n        }\r\n\r\n        return shuffleArray;\r\n    }\r\n\r\n}","import {randomCore} from \"./randomCore\";\r\nimport {randomMonomConfig} from \"./rndTypes\";\r\nimport {Random} from \"./random\";\r\nimport {Monom} from \"../algebra/monom\";\r\n\r\n/**\r\n * Create a random monom based on a based configuration\r\n */\r\nexport class rndMonom extends randomCore {\r\n    declare protected _config: randomMonomConfig\r\n    declare protected _defaultConfig: randomMonomConfig\r\n\r\n    constructor(userConfig?: randomMonomConfig) {\r\n        super();\r\n\r\n        this._defaultConfig = {\r\n            letters: 'x',\r\n            degree: 2,\r\n            fraction: true,\r\n            zero: false\r\n        }\r\n\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Monom => {\r\n        // Create a monom instance\r\n        let M = new Monom()\r\n\r\n        // Generate the coefficient\r\n        if (typeof this._config.fraction === \"boolean\") {\r\n            M.coefficient = Random.fraction({\r\n                zero: this._config.zero,\r\n                reduced: true,\r\n                natural: !this._config.fraction\r\n            })\r\n        } else {\r\n            M.coefficient = Random.fraction(this._config.fraction)\r\n        }\r\n\r\n        // Calculate the degree of the monom\r\n        if (this._config.letters.length > 1) {\r\n            // Initialise each items...\r\n            for (let L of this._config.letters.split('')) {\r\n                M.setLetter(L, 0);\r\n            }\r\n            for (let i = 0; i < this._config.degree; i++) {\r\n                const L = Random.item(this._config.letters.split(\"\"))\r\n                M.setLetter(L, M.degree(L).clone().add(1))\r\n            }\r\n        } else {\r\n            M.setLetter(this._config.letters, this._config.degree)\r\n        }\r\n\r\n        return M\r\n    }\r\n}\r\n","import {randomCore} from \"./randomCore\";\r\nimport {randomPolynomConfig} from \"./rndTypes\";\r\nimport {rndMonom} from \"./rndMonom\";\r\nimport {Random} from \"./random\";\r\nimport {Polynom} from \"../algebra/polynom\";\r\nimport {Monom} from \"../algebra/monom\";\r\n\r\n/**\r\n * Random polynoms\r\n */\r\nexport class rndPolynom extends randomCore {\r\n    declare protected _config: randomPolynomConfig\r\n    declare protected _defaultConfig: randomPolynomConfig\r\n\r\n    constructor(userConfig?: randomPolynomConfig) {\r\n        super();\r\n\r\n        // Default config for a random polynom\r\n        this._defaultConfig = {\r\n            letters: 'x',\r\n            degree: 2,\r\n            fraction: false,\r\n            zero: false,\r\n            unit: false,\r\n            factorable: false,\r\n            allowNullMonom: true,\r\n            numberOfMonoms: 0,\r\n            positive: true\r\n        }\r\n\r\n        // Merge config with initialiser\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Polynom => {\r\n        if(this._config.factorable && this._config.degree>1){\r\n            return this.factorable()\r\n        }\r\n\r\n        // Create the polynom\r\n        let P = new Polynom().empty(),\r\n            M: Monom\r\n\r\n        for (let i = this._config.degree; i >= 0; i--) {\r\n            // Create monom of corresponding degree.\r\n            M = new rndMonom({\r\n                letters: this._config.letters,\r\n                degree: i,\r\n                fraction: this._config.fraction,\r\n                zero: (i === this._config.degree) ? false : this._config.allowNullMonom\r\n            }).generate()\r\n\r\n            // If degree is the greatest and unit is true, set the monom value to one.\r\n            if (this._config.unit && this._config.degree === i) {\r\n                M.coefficient.one()\r\n            }\r\n\r\n            // Add to the polynom\r\n            P.add(M)\r\n        }\r\n\r\n        // Make sure the first monom is positive.\r\n        if(this._config.positive && P.monomByDegree().coefficient.isNegative()){\r\n            P.monomByDegree().coefficient.opposed()\r\n        }\r\n\r\n        // If the number of monoms is greater than the allowed value, remove some of them... except the first one !\r\n        if (this._config.numberOfMonoms > 0 && this._config.numberOfMonoms < P.length) {\r\n            // Get the greatest degree monom\r\n            let M = P.monomByDegree().clone()\r\n            P.monoms = Random.array(P.monoms.slice(1), this._config.numberOfMonoms-1)\r\n            P.add(M).reorder().reduce()\r\n        }\r\n        return P\r\n    }\r\n\r\n    factorable = (): Polynom => {\r\n        let P = new Polynom().one()\r\n\r\n        let _factorableConfig = {...this._config}\r\n        _factorableConfig.degree = 1\r\n        _factorableConfig.factorable = false\r\n\r\n        for(let i=0; i<this._config.degree;i++){\r\n            P.multiply(Random.polynom(_factorableConfig))\r\n        }\r\n\r\n        return P\r\n    }\r\n}","export type tokenType = {\r\n    [key: string]: {\r\n        precedence: number,\r\n        associative: string,\r\n        type: string\r\n    }\r\n}\r\n\r\nexport const tokenConstant: { [Key: string]: number } = {\r\n    pi: Math.PI,\r\n    e: Math.exp(1)\r\n}\r\n\r\nexport enum ShutingyardType {\r\n    VARIABLE = 'variable',\r\n    COEFFICIENT = 'coefficient',\r\n    OPERATION = 'operation',\r\n    CONSTANT = 'constant',\r\n    FUNCTION = 'function',\r\n    MONOM = 'monom'\r\n}\r\n\r\nexport enum ShutingyardMode {\r\n    EXPRESSION = 'expression',\r\n    POLYNOM = 'polynom',\r\n    SET = 'set',\r\n    NUMERIC = 'numeric'\r\n}\r\n\r\nexport type Token = { token: string, tokenType: string }\r\n\r\nexport class Shutingyard {\r\n    readonly _mode: ShutingyardMode;\r\n    private _rpn: Token[] = [];\r\n    private _tokenConfig: tokenType;\r\n    private _tokenConstant: { [Key: string]: number }\r\n    private _tokenKeys: string[]\r\n    private _uniformize: boolean;\r\n\r\n    constructor(mode?: ShutingyardMode) {\r\n        this._mode = typeof mode === 'undefined' ? ShutingyardMode.POLYNOM : mode;\r\n        this.tokenConfigInitialization()\r\n    }\r\n\r\n    // Getter\r\n    get rpn() {\r\n        // console.log(this._rpn)\r\n        return this._rpn;\r\n    }\r\n\r\n    get rpnToken() {\r\n        return this._rpn.map(x => x.token)\r\n    }\r\n\r\n    /**\r\n     * Determin if the token is a defined operation\r\n     * Defined operations: + - * / ^ sin cos tan\r\n     * @param token\r\n     */\r\n    // isOperation(token: string): boolean {\r\n    //     if (token[0].match(/[+\\-*/^]/g)) {\r\n    //         return true;\r\n    //     }\r\n    //     //\r\n    //     // if (token.match(/^sin|cos|tan/g)) {\r\n    //     //     return true;\r\n    //     // }\r\n    //\r\n    //     return false;\r\n    // }\r\n\r\n    tokenConfigInitialization(): tokenType {\r\n        if (this._mode === ShutingyardMode.SET) {\r\n            this._tokenConfig = {\r\n                '&': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '|': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '!': {precedence: 4, associative: 'right', type: ShutingyardType.OPERATION},\r\n                '-': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION}\r\n            }\r\n            this._uniformize = false;\r\n        } else if (this._mode === ShutingyardMode.NUMERIC) {\r\n            this._tokenConfig = {\r\n                '^': {precedence: 4, associative: 'right', type: ShutingyardType.OPERATION},\r\n                '*': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '/': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '+': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '-': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '%': {precedence: 3, associative: 'right', type: ShutingyardType.OPERATION},\r\n                'sin': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'cos': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'tan': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'sqrt': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'nthrt': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'ln': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'log': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n            }\r\n            this._uniformize = false\r\n        } else if (this._mode === ShutingyardMode.EXPRESSION) {\r\n            this._tokenConfig = {\r\n                '^': {precedence: 4, associative: 'right', type: ShutingyardType.OPERATION},\r\n                '*': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '/': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '+': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '-': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '%': {precedence: 3, associative: 'right', type: ShutingyardType.OPERATION},\r\n                'sin': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'cos': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'tan': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'sqrt': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'nthrt': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n            }\r\n            this._uniformize = true\r\n        } else {\r\n            this._tokenConfig = {\r\n                '^': {precedence: 4, associative: 'right', type: ShutingyardType.OPERATION},\r\n                '*': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '/': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '+': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '-': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n            }\r\n            this._uniformize = true\r\n        }\r\n\r\n        this._tokenKeys = Object.keys(this._tokenConfig).sort((a, b) => b.length - a.length)\r\n        return this._tokenConfig\r\n    }\r\n\r\n    /**\r\n     * Get the next token to analyse.\r\n     * @param expr (string) Expression to analyse\r\n     * @param start (number) CUrrent position in the expr string.\r\n     */\r\n    NextToken(expr: string, start: number): [string, number, string] {\r\n        let token: string, tokenType: string;\r\n        token = '';\r\n        tokenType = '';\r\n        // Case of parenthesis or comma (generic items)\r\n        if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        } else {\r\n            // Extract operation and function tokens\r\n            for (let key of this._tokenKeys) {\r\n                if (expr.substring(start, start + key.length) === key) {\r\n                    token += key;\r\n                    tokenType = this._tokenConfig[key].type\r\n                    break\r\n                }\r\n            }\r\n\r\n            // Extract constant\r\n            for (let key in tokenConstant) {\r\n                if (expr.substring(start, start + key.length) === key) {\r\n                    token += key;\r\n                    tokenType = ShutingyardType.CONSTANT\r\n                    break\r\n                }\r\n            }\r\n\r\n            if (token === '') {\r\n                // No function found ! Might be a coefficient !\r\n                if (expr[start].match(/[0-9]/)) {\r\n                    if (this._mode === ShutingyardMode.POLYNOM && false) {\r\n                        token = expr.substring(start).match(/^([0-9.,/]+)/)[0]\r\n                    } else {\r\n                        token = expr.substring(start).match(/^([0-9.]+)/)[0]\r\n                    }\r\n                    tokenType = ShutingyardType.COEFFICIENT\r\n                } else if (expr[start].match(/[a-zA-Z]/)) {\r\n                    token = expr.substring(start).match(/^([a-zA-Z])/)[0]\r\n                    tokenType = ShutingyardType.VARIABLE\r\n                } else {\r\n                    console.log('Unidentified token', expr[start], expr, start)\r\n                    token = expr[start]\r\n                    tokenType = ShutingyardType.MONOM\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    normalize(expr: string): string {\r\n        if(expr.length===1){return expr}\r\n\r\n        // Get the list of function token.\r\n        let fnToken: string[] = [],\r\n            kToken: string[] = []\r\n        for (let token in this._tokenConfig) {\r\n            if (this._tokenConfig[token].type === ShutingyardType.FUNCTION) {\r\n                fnToken.push(token)\r\n            }\r\n        }\r\n        // sort if from the lengthy to the smallest function\r\n        fnToken.sort((a, b) => b.length - a.length)\r\n\r\n        for (let token in tokenConstant) {\r\n                kToken.push(token)\r\n        }\r\n        // sort if from the lengthy to the smallest function\r\n        kToken.sort((a, b) => b.length - a.length)\r\n\r\n\r\n\r\n\r\n        let normalizedExpr: string = \"\",\r\n            i = 0,\r\n            crtToken,\r\n            nextToken\r\n\r\n        while (i < expr.length - 1) {\r\n            // Check if we have a function token.\r\n            // The function MUST have an open parentheses\r\n            let tokenIdx = 0\r\n            while (tokenIdx < fnToken.length) {\r\n                let token = fnToken[tokenIdx]\r\n                if (expr.slice(i, i + token.length + 1) === token + '(') {\r\n                    normalizedExpr += token + '('\r\n                    i += token.length + 1\r\n\r\n                    // Restart the scan for the function token\r\n                    tokenIdx = 0\r\n                } else {\r\n                    // scan for a next function token\r\n                    tokenIdx++\r\n                }\r\n            }\r\n\r\n            // Check for a constant\r\n            tokenIdx = 0\r\n            while (tokenIdx < kToken.length) {\r\n                let token = kToken[tokenIdx]\r\n                if (expr.slice(i, i + token.length) === token) {\r\n                    // We have found a constant.\r\n                    // add it, but with remove the last letter\r\n                    normalizedExpr += token.slice(0, -1)\r\n                    i += token.length-1\r\n\r\n                    // Exit the loop\r\n                    break\r\n                }\r\n                tokenIdx++\r\n            }\r\n\r\n            // The function token are solved.\r\n            crtToken = expr[i]\r\n            nextToken = expr[i + 1]\r\n            normalizedExpr += crtToken\r\n            if (crtToken.match(/[a-zA-Z]/g)) {\r\n                // Current element is a letter.\r\n                // if the next element is a letter, a number or an opening parentheses, add the multiplication sign.\r\n                if (nextToken.match(/[a-zA-Z\\d(]/)) {\r\n                    normalizedExpr += '*'\r\n                }\r\n            } else if (crtToken.match(/\\d/)) {\r\n                // Current element is a number.\r\n                // if the next element is a letter or a parentheses, add the multiplication sign.\r\n                if (nextToken.match(/[a-zA-Z(]/)) {\r\n                    normalizedExpr += '*'\r\n                }\r\n            } else if (crtToken === ')') {\r\n                // Current element is a closing parentheses.\r\n                // if the next element is a letter, a number or an opening parentheses, add the multiplication sign\r\n                if (nextToken.match(/[a-zA-Z\\d(]/)) {\r\n                    normalizedExpr += '*'\r\n                }\r\n            }\r\n\r\n            // Go to next token\r\n            i++\r\n        }\r\n\r\n        // add the last token\r\n        return normalizedExpr + nextToken\r\n    }\r\n\r\n    /**\r\n     * Sanitize an expression by adding missing common operation (multiplication between parentheseses)\r\n     * @param expr\r\n     * @constructor\r\n     */\r\n    Uniformizer(expr: string): string {\r\n        // TODO: Delete this old version\r\n        // Prefere \"normalize\", much more robust !\r\n        // Determiner if need to be uniformized\r\n        if (!this._uniformize) {\r\n            return expr\r\n        }\r\n\r\n        // Generate the list of function token.\r\n        let fnToken: string[] = []\r\n        for (let token in this._tokenConfig) {\r\n            if (this._tokenConfig[token].type === ShutingyardType.FUNCTION) {\r\n                fnToken.push(token)\r\n            }\r\n        }\r\n        // sort if from the lengthy to the smallest function\r\n        fnToken.sort((a, b) => b.length - a.length)\r\n        let tokenRegExp = new RegExp(`(${fnToken.join('|')})`, 'g')\r\n        let functionTokenOrder = Array.from(expr.matchAll(tokenRegExp))\r\n\r\n\r\n        let expr2;\r\n\r\n        // Replace all function by @\r\n        expr2 = expr.replace(tokenRegExp, '@')\r\n        // Add * before @ (functionn)\r\n        expr2 = expr2.replace(/([\\da-zA-Z])(@)/g, \"$1*$2\");\r\n\r\n        // Replace missing multiplication between two parenthese\r\n        expr2 = expr2.replace(/\\)\\(/g, ')*(');\r\n\r\n        // Replace missing multiplication between number or setLetter and parenthese.\r\n\r\n        // 3x(x-4) => 3x*(x-4)\r\n        expr2 = expr2.replace(/([\\da-zA-Z])(\\()/g, \"$1*$2\");\r\n\r\n        // (x-4)3x => (x-4)*3x\r\n        expr2 = expr2.replace(/(\\))([\\da-zA-Z])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between number and letters.\r\n        // 3x => 3*x\r\n        expr2 = expr2.replace(/([0-9])([a-zA-Z])/g, \"$1*$2\");\r\n        expr2 = expr2.replace(/([a-zA-Z])([0-9])/g, \"$1*$2\");\r\n\r\n        // Remove letter between function token and it's parenthese.\r\n        // for (let token of fnToken) {\r\n        //     // Remove\r\n        //     expr2 = expr2.replace(new RegExp(token + '\\\\*', 'g'), token);\r\n        // }\r\n        // Add multiplication between letters ?\r\n        expr2 = expr2.replace(/([a-zA-Z])([a-zA-Z])/g, \"$1*$2\");\r\n        expr2 = expr2.replace(/([a-zA-Z])([a-zA-Z])/g, \"$1*$2\");\r\n\r\n        // Restore operation auto formatting (prevent adding the multiplication star)\r\n        let exprAsArray = expr2.split('@')\r\n\r\n        if (exprAsArray.length > 0) {\r\n            expr2 = \"\"\r\n            for (let idx in exprAsArray) {\r\n            }\r\n            for (let token of fnToken) {\r\n                // Remove\r\n\r\n                // expr2 = expr2.replace(new RegExp(token + '\\\\*', 'g'), token);\r\n            }\r\n        }\r\n\r\n        return expr2;\r\n    }\r\n\r\n    /**\r\n     * Parse an expression using the shutting yard tree algorithms\r\n     * @param expr (string) Expression to analyse\r\n     * Returns a RPN list of items.\r\n     * @param operators\r\n     */\r\n    parse(expr: string, operators?: string[]): Shutingyard {\r\n        let outQueue: { token: string, tokenType: string }[] = [],    // Output queue\r\n            opStack: { token: string, tokenType: string }[] = [],     // Operation queue\r\n            token: string = '',\r\n            tokenPos: number = 0,\r\n            tokenType: string = '',\r\n            previousOpStatckLength = 0\r\n\r\n        // Normalize the input if required.\r\n        if (this._uniformize) expr = this.normalize(expr)\r\n\r\n        let securityLoopLvl1 = 50,\r\n            securityLoopLvl2_default = 50,\r\n            securityLoopLvl2;\r\n\r\n        while (tokenPos < expr.length) {\r\n            securityLoopLvl1--;\r\n            if (securityLoopLvl1 === 0) {\r\n                console.log('SECURITY LEVEL 1 EXIT');\r\n                break;\r\n            }\r\n\r\n            // Get the next token and the corresponding new (ending) position\r\n            [token, tokenPos, tokenType] = this.NextToken(expr, tokenPos);\r\n\r\n            switch (tokenType) {\r\n                case 'monom':\r\n                case 'coefficient':\r\n                case 'variable':\r\n                case 'constant':\r\n                    outQueue.push({\r\n                        token,\r\n                        tokenType\r\n                    });\r\n                    break;\r\n                case 'operation':\r\n                    previousOpStatckLength = opStack.length;\r\n                    //If the token is an operator, o1, then:\r\n                    if (opStack.length > 0) {\r\n                        let opTop = opStack[opStack.length - 1];\r\n\r\n                        securityLoopLvl2 = +securityLoopLvl2_default;\r\n\r\n                        //while there is an operator token o2, at the top of the operator stack and\r\n                        while (opTop.token in this._tokenConfig && (\r\n                                //either o1 is left-associative and its precedence is less than or equal to that of o2,\r\n                                (this._tokenConfig[token].associative === 'left' && this._tokenConfig[token].precedence <= this._tokenConfig[opTop.token].precedence)\r\n                                ||\r\n                                //or o1 is right associative, and has precedence less than that of o2,\r\n                                (this._tokenConfig[token].associative === 'right' && this._tokenConfig[token].precedence < this._tokenConfig[opTop.token].precedence)\r\n                            )\r\n                            ) {\r\n\r\n                            /* Security exit ! */\r\n                            securityLoopLvl2--;\r\n                            if (securityLoopLvl2 === 0) {\r\n                                console.log('SECURITY LEVEL 2 OPERATION EXIT');\r\n                                break;\r\n                            }\r\n\r\n                            // Add the operation to the queue\r\n                            outQueue.push((opStack.pop()) || {token: '', tokenType: 'operation'});\r\n\r\n                            // Get the next operation on top of the Stack.\r\n                            if (opStack.length === 0) {\r\n                                break;\r\n                            }\r\n                            opTop = opStack[opStack.length - 1];\r\n                        }\r\n                    }\r\n                    //at the end of iteration push o1 onto the operator stack\r\n                    opStack.push({token, tokenType});\r\n                    break;\r\n                case 'function-argument':\r\n                    // TODO: check if the opStack exist.\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 0) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 FUNCTION ARGUMENT EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token, tokenType});\r\n                    }\r\n                    break;\r\n                case '(':\r\n                    opStack.push({token, tokenType});\r\n                    // Add an empty value if next element is negative.\r\n                    if (expr[tokenPos] === '-') {\r\n                        outQueue.push({token: '0', tokenType: 'coefficient'});\r\n                    }\r\n                    break;\r\n                case ')':\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    //Until the token at the top of the stack is a left parenthesis, pop operators off the stack onto the output queue.\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 1 /*Maybe zero !? */) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 CLOSING PARENTHESE EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token, tokenType});\r\n                    }\r\n\r\n                    //Pop the left parenthesis from the stack, but not onto the output queue.\r\n                    opStack.pop();\r\n                    break;\r\n                case 'function':\r\n                    opStack.push({token, tokenType});\r\n                    break;\r\n                default:\r\n                    // In theory, everything should be handled.\r\n                    console.log(`SHUTING YARD: ${tokenType} : ${token} `);\r\n            }\r\n\r\n            // Output\r\n            // console.log(outQueue.concat(opStack.reverse()).join(\" \"));\r\n        }\r\n\r\n        // console.log(outQueue.concat(opStack.reverse()));\r\n        this._rpn = outQueue.concat(opStack.reverse());\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(607);\n"],"names":["ShutingYard","Shutingyard","Numeric","NumExp","Fraction","Root","NthRoot","Monom","Polynom","Equation","LinearSystem","Rational","Logicalset","Random","PolynomExpFactor","PolynomExpProduct","Geometry","Vector","Point","Line","Triangle","Circle","window","Pi","PARTICULAR_SOLUTION","constructor","equations","_varnothing","varnothing","_real","real","hasVariable","letter","this","variables","includes","_randomizeDefaults","degree","parse","equationString","pStr","strSign","_findSign","split","create","_formatSign","console","error","left","right","sign","_left","_right","_sign","clone","randomize","opts","moveLeft","subtract","zero","reorder","allLeft","mMove","m","monoms","isZero","simplify","multiply","lcm","getDenominators","divide","gcd","getNumerators","isolate","isOne","isMultiVariable","cMove","hasLetter","add","opposed","length","coefficient","replaceBy","P","value","F","_reverseSign","invert","max","letters","Set","solve","_solutions","_polynom","_solveDegree1","_solveDegree2","_solveDegree3plus","makeSolutionsUnique","test","values","evaluate","isEqual","log","signStr","undefined","replace","isGreater","indexOf","isStrictEqual","isAlsoEqual","m1","monomByDegree","m0","v","s","tex","NaN","exact","delta","nthDelta","realX1","realX2","sX1","sX2","aF","bF","cF","denominator","a","b","Math","sqrt","toFixed","reduce","hasRadical","am","bm","tex1","tex2","S1","S2","frac","sol","equ","factorize","factors","forEach","factor","leq","factorAsEquation","solutions","solution","push","isEquation","map","x","join","isReal","isVarnothing","signAsTex","display","raw","concat","numberOfVars","randomizeDefaults","static","sorted","solutionAsTex","uniqueSolutions","filter","sort","equationStrings","_equations","_findLetters","setCoefficient","coefficients","i","_letters","slice","toString","setLetters","generate","solutionsF","_generateOneEquation","coeff","leftValue","equString","numberSym","_checkIfLinerCombination","mergeEquations","eq1","eq2","factor1","factor2","eq1multiplied","eq2multiplied","E","_resolutionSteps","V","_solveOneLetter","str","isSolvable","equStr","LS","equArray","L","monomByLetter","repeat","_linearReduction","c1","c2","LE","reducedEquations","_rpn","ShutingyardMode","SET","rpn","_rawString","isLogicalset","tokenSets","reference","referenceSet","varStack","key","token","tokenType","second","pop","first","has","vennAB","A","B","vennABC","C","inputStr","_shutingYardToReducedMonom","_coefficient","_literal","copyLiterals","literal","addToken","stack","element","q1","q2","pow","ShutingyardType","COEFFICIENT","VARIABLE","M","one","setLetter","OPERATION","k","makeSame","clean","isSameAs","multiplyByNumber","nb","root","p","isSquare","compare","M1","M2","K","item","isLiteralSquare","isRational","isEven","hasFractionCoefficient","isNotZero","Object","t","n","r","tmpValues","derivative","d","dM","primitive","areSameAs","areEquals","isDivisible","div","isStrictlyPositive","geq","isRelative","literalSqrt","literalStr","matchAll","keys","isNotEqual","dividers","numerator","abs","literals","_getLiteralDividers","monomDividers","N","arr","tmpList","litt","currentLetter","displayWithSign","texWithSign","plotFunction","tfrac","coeffN","coeffD","min","xmultiply","polynomString","mark_as_dirty","dirty_factors","dirty_zeroes","euclidianCache","CONSTANT","MONOM","FUNCTION","_monoms","_factors","_parseString","empty","Number","isSafeInteger","multiplyByPolynom","multiplyByFraction","multiplyByMonom","multiplyByInteger","euclidian","quotient","reminder","maxMP","degreeP","newM","MaxIteration","isPositive","divideByFraction","divideByInteger","cP1","cP2","isOpposedAt","isFactorized","match","e","polynomStringNormalized","replaceAll","polynomStringReduced","substr","polyFactors","f","splice","isReduced","isDeveloped","j","S","resultPolynom","monom","dP","integrate","valuesA","valuesB","commonMonom","isStrictlyNegative","tempPolynom","securityLoop","maxDegree","allDividers","_getAllPotentialFactors","isDividableBy","result","pX","pC","dX","dC","shift","getZeroes","_zeroes","monomsByDegree","Ms","denominators","numerators","lcmDenominator","gcdDenominator","lcmNumerator","gcdNumerator","limitToInfinity","infinite","limitToNegativeInfinity","m2","m1d","m2d","genDisplay","output","forceSign","wrapParentheses","withAllMultSign","shutingYardToReducedPolynom","nbF","_factorize2ndDegree","P1","P2","c","x1","x2","xyzPolynom","xFactors","_factorizeByGroups","_euclidianCache","_dirty_zeroes","_dirty_factors","zeroes","texString","_texString","texFactors","factorsCount","simpleFactor","displayFactors","trim","isNaN","fractions","_numerator","_denominator","domain","amplify","D","dN","dD","NumeratorEuclidien","DenominatorEuclidien","R","limits","offset","Infinity","theLimit","theSign","evalValues","evalValuesOffset","FR","isInfinity","study","RationalStudy","ZEROTYPE","ASYMPTOTE","FUNCTION_EXTREMA","TABLE_OF_SIGNS","fx","config","makeStudy","makeZeroes","signs","_signs","makeSigns","asymptotes","_asymptotes","makeAsymptotes","_derivative","makeDerivative","variations","_variations","makeVariation","texSigns","texGrows","texVariations","indexOfZero","makeOneLineForSigns","zeroSign","oneLine","currentZero","NOTHING","makeSignsResult","resultLine","index","current","makeGrowsResult","tos","signsAsArray","growsLine","extremes","pos","y","xTex","yTex","pointType","exp","evalY","FLAT","MAX","MIN","type","extr","makeVariationsResult","varsLine","drawCode","code","asymptote","VERTICAL","HORIZONTAL","SLOPE","extreme","ZERO","_makeTexFromTableOfSigns","factorsFx","name","GROWS","VARIATIONS","SIGNS","Study","super","_getZeroes","_getSigns","reduced","DEFENCE","Ztype","HOLE","deltaX","tableOfSign","NDegree","DDegree","H","Htex","greater","dx","z","extrema","idx","typeOfTable","denominatorOrPeriodic","isApproximative","isExact","unit","decimal","floor","invalid","Q","xMultiply","controlNumerator","g","compareFraction","lesser","than","isOpposed","isInverted","isNegativeOne","isNegative","isFinite","isNatural","isOdd","dfrac","average","unique","distinct","reverse","radical","nthroot","_nth","_radical","_isValid","nth","uniformize","_expression","NUMERIC","isValid","expression","_extractDecimalPart","substring","_numberCorrection","epsilon","n9","n0","mod0","mod9","_addToStack","tokenConstant","sin","cos","tan","log10","polynom","mathFunction","_degree","_fn","_powerAsInteger","_forceParenthesis","forceParenthesis","fn","powerAsInteger","isCoefficient","firstCoefficient","_texDegree","setForceParenthesis","_positive","_asPositiveDegree","positive","asPositiveDegree","parenthesis","numeratorsAsTex","denominatorsAsTex","polynoms","d1","d2","_integrateWithInternalDerivative","applyMathFunction","mathFn","Pinternal","internalDerivative","relativePosition","distance","distanceTo","center","radius","_squareRadius","lineIntersection","solX","intersectionPoints","_cartesian","equX","lineX","equation","lineY","tangents","_tangentsWithSlope","isPointOnCircle","_tangentsThroughOnePointOnTheCircle","_tangentsThroughOnePointOutsideTheCircle","getPointsOnCircle","numberIsInteger","pt","triplets","pythagoricianTripletsWithTarget","points","triplet","isInListOfPoints","CT","_center","LinePropriety","Perpendicular","cx_px","cy_py","polyLeft","polyRight","squareRadius","h","slope","sq","_exists","cartesian","exists","cx","cy","developed","_calculateCartesian","_reset","_parseEquation","_parseCopyCircle","_parseThroughtThreePoints","_parseCenterAndPointThrough","_parseCenterAndRadius","circle","square","pointThrough","normSquare","y1","y2","T","mAB","remarquables","mediators","AB","mAC","AC","intersection","point","parseEquation","parseByPointAndVector","parseByPointAndNormal","parseByCoefficient","Parallel","parseByPointAndLine","elem","delete","size","_a","_b","_c","_d","_OA","_n","normal","orientation","director","isParellelTo","line","height","isVertical","simplifyDirection","Pt","isParallel","isSame","hasIntersection","getValueAtX","getValueAtY","canonical","mxh","OA","parametric","pmatrix","fraction","hitSegment","iPt","canonicalAsFloatCoefficient","decimals","PERPENDICULAR","PARALLEL","_x","_y","xy","origin","middleOf","texValues","numberOfDigits","pts","norm","list","_lines","intersect","_B","_C","_A","_updateTriangle","BC","_middles","_remarquables","_calculateRemarquableLines","getPointByName","ptName","toUpperCase","getSegment","ptName1","ptName2","_calculateBisectors","medians","heights","bisectors","tlines","lines","b1","b2","BA","CB","CA","isRectangle","isNormalTo","isEquilateral","isIsocele","reset","components","scalarProductWithVector","multiplyByScalar","scalar","divideByScalar","angleWith","sharp","radian","toDegree","PI","acos","scalarProduct","v1","v2","round","primesValues","maxV","gcd2","target","targetIsSquare","targetValue","u","epsilonDigit","epsilonNumberOfDigits","number_of_digits","extractDecimalPart","valueToExtract","decimalLength","rndPolynom","rndMonom","rndFraction","number","from","to","rndHelpers","randomInt","allowZero","randomIntSym","prime","randomPrime","bool","percent","randomBool","array","randomArray","randomItem","shuffle","shuffleArray","mergeConfig","defaultConfig","_config","_defaultConfig","randomCore","userConfig","negative","natural","securityCount","random","primes","temp","factorable","allowNullMonom","numberOfMonoms","_factorableConfig","pi","mode","_mode","POLYNOM","tokenConfigInitialization","rpnToken","_tokenConfig","precedence","associative","_uniformize","EXPRESSION","_tokenKeys","NextToken","expr","start","normalize","fnToken","kToken","crtToken","nextToken","normalizedExpr","tokenIdx","Uniformizer","expr2","tokenRegExp","RegExp","Array","exprAsArray","operators","outQueue","opStack","tokenPos","previousOpStatckLength","securityLoopLvl2","securityLoopLvl1","opTop","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call"],"sourceRoot":""}