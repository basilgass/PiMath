{"version":3,"file":"pi.min.js","mappings":"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","sources":["webpack://pimath/./src/index.ts","webpack://pimath/./src/maths/algebra/equation.ts","webpack://pimath/./src/maths/algebra/linearSystem.ts","webpack://pimath/./src/maths/algebra/logicalset.ts","webpack://pimath/./src/maths/algebra/monom.ts","webpack://pimath/./src/maths/algebra/polynom.ts","webpack://pimath/./src/maths/algebra/rational.ts","webpack://pimath/./src/maths/algebra/study.ts","webpack://pimath/./src/maths/algebra/study/rationalStudy.ts","webpack://pimath/./src/maths/coefficients/fraction.ts","webpack://pimath/./src/maths/coefficients/nthRoot.ts","webpack://pimath/./src/maths/expressions/numexp.ts","webpack://pimath/./src/maths/expressions/polynomexp.ts","webpack://pimath/./src/maths/geometry/circle.ts","webpack://pimath/./src/maths/geometry/line.ts","webpack://pimath/./src/maths/geometry/point.ts","webpack://pimath/./src/maths/geometry/triangle.ts","webpack://pimath/./src/maths/geometry/vector.ts","webpack://pimath/./src/maths/numeric.ts","webpack://pimath/./src/maths/randomization/random.ts","webpack://pimath/./src/maths/randomization/randomCore.ts","webpack://pimath/./src/maths/randomization/rndFraction.ts","webpack://pimath/./src/maths/randomization/rndHelpers.ts","webpack://pimath/./src/maths/randomization/rndMonom.ts","webpack://pimath/./src/maths/randomization/rndPolynom.ts","webpack://pimath/./src/maths/shutingyard.ts","webpack://pimath/webpack/bootstrap","webpack://pimath/webpack/startup"],"sourcesContent":["import {Numeric} from \"./maths/numeric\";\r\nimport {NumExp} from \"./maths/expressions/numexp\";\r\nimport {Shutingyard} from \"./maths/shutingyard\";\r\nimport {Random} from \"./maths/randomization/random\";\r\nimport {Fraction} from \"./maths/coefficients/fraction\";\r\nimport {NthRoot} from \"./maths/coefficients/nthRoot\";\r\nimport {Monom} from \"./maths/algebra/monom\";\r\nimport {Polynom} from \"./maths/algebra/polynom\";\r\nimport {Equation} from \"./maths/algebra/equation\";\r\nimport {LinearSystem} from \"./maths/algebra/linearSystem\";\r\nimport {Rational} from \"./maths/algebra/rational\";\r\nimport {Logicalset} from \"./maths/algebra/logicalset\";\r\nimport {PolynomExpFactor, PolynomExpProduct} from \"./maths/expressions/polynomexp\";\r\nimport {Vector} from \"./maths/geometry/vector\";\r\nimport {Line} from \"./maths/geometry/line\";\r\nimport {Triangle} from \"./maths/geometry/triangle\";\r\nimport {Circle} from \"./maths/geometry/circle\";\r\nimport {Point} from \"./maths/geometry/point\";\r\n\r\n// Expose as global\r\nexport const PiMath = {\r\n    ShutingYard: Shutingyard,\r\n    Numeric: Numeric,\r\n    NumExp: NumExp,\r\n    Fraction: Fraction,\r\n    Root: NthRoot,\r\n    Monom: Monom,\r\n    Polynom: Polynom,\r\n    Equation: Equation,\r\n    LinearSystem: LinearSystem,\r\n    Rational: Rational,\r\n    Logicalset: Logicalset,\r\n    Random: Random,\r\n    PolynomExpFactor: PolynomExpFactor,\r\n    PolynomExpProduct: PolynomExpProduct,\r\n    Geometry: {\r\n        Vector: Vector,\r\n        Point: Point,\r\n        Line: Line,\r\n        Triangle: Triangle,\r\n        Circle: Circle\r\n    }\r\n};\r\n(<any>window).Pi = PiMath\r\n","import {Polynom} from \"./polynom\";\r\nimport {literalType, Monom} from \"./monom\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {NthRoot} from \"../coefficients/nthRoot\";\r\n\r\n/**\r\n * Equation is a class to manage equations...\r\n */\r\nexport interface ISolution {\r\n    tex: string,\r\n    value: number,\r\n    exact: unknown\r\n}\r\n\r\nexport enum PARTICULAR_SOLUTION {\r\n    real=\"\\\\mathbb{R}\",\r\n    varnothing=\"\\\\varnothing\"\r\n}\r\n\r\nexport class Equation {\r\n    private _polynom: Polynom;  // Used to solve the equation // TODO: remove the private value ?\r\n\r\n    // Undetermined texSolutions.\r\n    private _varnothing: string = PARTICULAR_SOLUTION.varnothing;\r\n    private _real: string = PARTICULAR_SOLUTION.real;\r\n\r\n    /**\r\n     * Create an Equation using two polynoms.\r\n     * Markdown *support* is cool\r\n     * @param equations\r\n     */\r\n    constructor(...equations: unknown[]) {\r\n        // Default equation\r\n        this._left = new Polynom().zero();\r\n        this._right = new Polynom().zero();\r\n        this._sign = '=';\r\n\r\n        if (equations.length === 1) {\r\n            if (equations[0] instanceof Equation) {\r\n                return equations[0].clone();\r\n            } else if (typeof equations[0] === 'string') {\r\n                this.parse(equations[0]);\r\n            }\r\n        } else if (equations.length === 2) {\r\n            if (equations[0] instanceof Polynom) {\r\n                this.left = equations[0].clone()\r\n            } else if (typeof equations[0] === 'string') {\r\n                this.left = new Polynom(equations[0])\r\n            }\r\n\r\n            if (equations[1] instanceof Polynom) {\r\n                this.right = equations[1].clone()\r\n            } else if (typeof equations[1] === 'string') {\r\n                this.right = new Polynom(equations[1])\r\n            }\r\n        } else {\r\n            // Return default empty equation\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private _left: Polynom;  // Left part of the equation\r\n\r\n    get left(): Polynom {\r\n        return this._left;\r\n    }\r\n\r\n    set left(value: Polynom) {\r\n        this._left = value;\r\n    }\r\n\r\n    private _right: Polynom; // Right part of the equation\r\n\r\n    get right(): Polynom {\r\n        return this._right;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n\r\n    set right(value: Polynom) {\r\n        this._right = value;\r\n    }\r\n\r\n    private _sign: string;   // Signe of the equation, by default =\r\n\r\n    get sign(): string {\r\n        return this._sign;\r\n    }\r\n\r\n    set sign(value: string) {\r\n        // Set the sign value as formatted.\r\n        this._sign = this._formatSign(value);\r\n    }\r\n\r\n    private _solutions: ISolution[]\r\n\r\n    // ------------------------------------------\r\n    get solutions(): ISolution[] {\r\n        return this._solutions\r\n    }\r\n\r\n    get isEquation() {\r\n        return true;\r\n    }\r\n\r\n    get solution(): string {\r\n        if (this._solutions.length === 1\r\n            &&\r\n            (\r\n                this._solutions[0].tex === this._real\r\n                || this._solutions[0].tex === this._varnothing\r\n                || this._solutions[0].tex.includes('\\\\left')\r\n            )\r\n        ) {\r\n            return `S = ${this._solutions[0]}`;\r\n        }\r\n        return `S = \\\\left{ ${this._solutions.map(x => x.tex).join(';')} \\\\right}`;\r\n    }\r\n\r\n    get isReal(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0].tex === this._real;\r\n    }\r\n\r\n    get isVarnothing(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0].tex === this._varnothing;\r\n    }\r\n\r\n    get signAsTex(): string {\r\n        if (this._sign === '>=' || this._sign === '=>' || this._sign === 'geq') {\r\n            return '\\\\geq';\r\n        }\r\n        if (this._sign === '<=' || this._sign === '=<' || this._sign === 'leq') {\r\n            return '\\\\leq';\r\n        }\r\n        return this._sign;\r\n    }\r\n\r\n    get tex(): string {\r\n        return `${this._left.tex}${this.signAsTex}${this._right.tex}`;\r\n    }\r\n\r\n    get display(): string {\r\n        return `${this._left.display}${this.signAsTex}${this._right.display}`;\r\n    }\r\n\r\n    get raw(): string {\r\n        return `${this._left.raw}${this.signAsTex}${this._right.raw}`;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        return [...new Set(this._right.variables.concat(this._left.variables))];\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    hasVariable = (letter: string): boolean => {\r\n        return this.variables.includes(letter)\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n\r\n    // -----------------------------------------------\r\n    private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n        degree: 2\r\n    };\r\n\r\n    get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n        return this._randomizeDefaults;\r\n    }\r\n\r\n    set randomizeDefaults(value) {\r\n        this._randomizeDefaults = value;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    parse = (equationString: string): Equation => {\r\n        let pStr: string[], strSign: string | false;\r\n        // Find the string separator\r\n        strSign = this._findSign(equationString);\r\n\r\n        if (strSign === false) {\r\n            console.error('The equation is not valid (no sign found)');\r\n            return;\r\n        }\r\n\r\n        // The StrSign is found\r\n        pStr = equationString.split(strSign);\r\n\r\n        return this.create(new Polynom(pStr[0]), new Polynom(pStr[1]), this._formatSign(strSign));\r\n    };\r\n\r\n    create = (left: Polynom, right: Polynom, sign?: string): Equation => {\r\n        this._left = left;\r\n        this._right = right;\r\n        this._sign = this._formatSign(sign);\r\n        return this;\r\n    };\r\n\r\n    clone = (): Equation => {\r\n        return new Equation().create(this._left.clone(), this._right.clone(), this._sign + '');\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n\r\n    randomize = (opts?: {}, sign?: string): Equation => {\r\n        // TODO: Generate equations randomly, using config.\r\n        return new Equation().create(new Polynom(), new Polynom(), sign);\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    /**\r\n     * Reorder will move all monoms containing a letter on the left, all the other on the right.\r\n     */\r\n    moveLeft = (): Equation => {\r\n        this._left = this._left.clone().subtract(this._right)\r\n        this._right.zero()\r\n        return this;\r\n    }\r\n\r\n    reorder = (allLeft?: boolean): Equation => {\r\n        // Move all monoms of degree greater than 0 to the left.\r\n        // and all zero degree monoms to the right.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n\r\n        if (allLeft) {\r\n            return this.moveLeft()\r\n        }\r\n        let mMove: Monom;\r\n        for (let m of this._left.monoms) {\r\n            if (m.degree().isZero()) {\r\n                mMove = m.clone();\r\n                this._left.subtract(mMove);\r\n                this._right.subtract(mMove);\r\n            }\r\n        }\r\n\r\n        // Reorder the left and right polynoms\r\n        this._left.reorder();\r\n        this._right.reorder();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiply by the lcm denominator and divide by the gcm numerators.\r\n     */\r\n    simplify = (): Equation => {\r\n        this.multiply(Numeric.lcm(...this._left.getDenominators(), ...this._right.getDenominators()));\r\n        this.divide(Numeric.gcd(...this._left.getNumerators(), ...this._right.getNumerators()));\r\n        return this;\r\n    }\r\n\r\n\r\n    // -----------------------------------------------\r\n    // Equations operations\r\n\r\n    /**\r\n     * Reorder the polynom to have only one letter on the left, the rest on the right.\r\n     * @param letter\r\n     */\r\n    isolate = (letter?: string): Equation | false => {\r\n        // Determine if we can isolate the variables.\r\n\r\n        // Both part of the equations must be of the first degree.\r\n        //TODO: handle equations of degree two or more ?\r\n        if (!this.degree(letter).isOne()) {\r\n            return false;\r\n        }\r\n\r\n        // Modify the equation to isolate the asked variable.\r\n        // TODO: must handle equations like 3xy+5y=4 => y = 4/(3x-5)\r\n        if (this.isMultiVariable()) {\r\n            return false;\r\n        }\r\n\r\n        // Isolate the letter.\r\n        let mMove: Monom, cMove: Fraction;\r\n        // Start by moving everything to the left.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n        for (let m of this._left.monoms) {\r\n            if (!m.hasLetter(letter)) {\r\n                mMove = m.clone();\r\n                this._left.add(mMove.clone().opposed());\r\n                this._right.add(mMove.clone().opposed());\r\n            }\r\n        }\r\n\r\n        // In theory, we should have only one item on the left.\r\n        if (this._left.length !== 1) {\r\n            return false;\r\n        }\r\n        cMove = this._left.monoms[0].coefficient.clone();\r\n        this._left.divide(cMove);\r\n        this._right.divide(cMove);\r\n        return this;\r\n    };\r\n\r\n    replaceBy = (letter: string, P: Polynom): Equation => {\r\n        this._left.replaceBy(letter, P)\r\n        this._right.replaceBy(letter, P)\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiple an equation by a fraction value.\r\n     * @param value\r\n     */\r\n    multiply = (value: unknown): Equation => {\r\n\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        // Multiply each part of the equation by the fraction\r\n        this._left.multiply(F);\r\n        this._right.multiply(F);\r\n\r\n        // The sign of the inequation must be changed.\r\n        if (this._sign !== '=' && F.sign() === -1) {\r\n            this._reverseSign();\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * divide an equation by a given value (transformed as a fraction)\r\n     *\r\n     * ```\r\n     * 8x+10=6x \\vert 2\r\n     * 4x+5=3x\r\n     * ```\r\n     *\r\n     * |>Alternatively with $3x-4$ maybe it's working ?\r\n     * $$\\frac{3x}{5}$$\r\n     *\r\n     * @param value\r\n     * @returns {Equation}\r\n     */\r\n    divide = (value: unknown): Equation => {\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        if (F.isZero()) {\r\n            return this;\r\n        } else {\r\n            return this.multiply(F.invert());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the degree of the equation\r\n     * @param letter\r\n     */\r\n    degree = (letter?: string): Fraction => {\r\n        return Fraction.max(this._left.degree(letter), this._right.degree(letter));\r\n    };\r\n\r\n    /**\r\n     * Determine if the equation contains more than one letter/variable.\r\n     */\r\n    isMultiVariable = (): boolean => {\r\n        return this._left.isMultiVariable || this._right.isMultiVariable;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        // @ts-ignore\r\n        return [...new Set([...this._left.letters(), ...this._right.letters()])];\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations helpers\r\n    // -----------------------------------------------\r\n\r\n    // -----------------------------------------------\r\n    solve = (): Equation => {\r\n        // Initialise the variables:\r\n        this._solutions = [];\r\n\r\n        // TODO: consolidate solving equations (inequations vs equations)\r\n        // TODO: work with not natural degrees ?\r\n        this._polynom = this._left.clone().subtract(this._right);\r\n\r\n        switch (this._polynom.degree().value) {\r\n            case 0:\r\n            case 1:\r\n                this._solveDegree1();\r\n                break;\r\n            case 2:\r\n                this._solveDegree2();\r\n                break;\r\n            default:\r\n                this._solveDegree3plus();\r\n        }\r\n\r\n        // cleanup the solutions.\r\n        this._solutions = Equation.makeSolutionsUnique(this._solutions)\r\n        return this;\r\n    };\r\n\r\n    static makeSolutionsUnique(solutions: ISolution[], sorted?: boolean):ISolution[] {\r\n        let solutionAsTex:string[] = [],\r\n            uniqueSolutions = solutions.filter(sol=>{\r\n                if(!solutionAsTex.includes(sol.tex)){\r\n                    solutionAsTex.push(sol.tex)\r\n                    return true\r\n                }else{\r\n                    return false\r\n                }\r\n            })\r\n\r\n        if(sorted===true){\r\n            uniqueSolutions.sort((a, b)=>a.value-b.value)\r\n        }\r\n        return uniqueSolutions\r\n    }\r\n\r\n    test = (values: literalType): Boolean => {\r\n        return this.left.evaluate(values).isEqual(this.right.evaluate(values))\r\n    }\r\n\r\n    private _findSign = (equationString: string): string | false => {\r\n        let strSign: string = '';\r\n\r\n        if (equationString.includes('geq')) {\r\n            return (equationString.includes('\\\\geq')) ? '\\\\geq' : 'geq';\r\n        } else if (equationString.includes('leq')) {\r\n            return (equationString.includes('\\\\leq')) ? '\\\\leq' : 'leq';\r\n        } else if (equationString.includes('>=')) {\r\n            return '>=';\r\n        } else if (equationString.includes('=>')) {\r\n            return '=>';\r\n        } else if (equationString.includes('>')) {\r\n            return '>';\r\n        } else if (equationString.includes('<=')) {\r\n            return '<=';\r\n        } else if (equationString.includes('=<')) {\r\n            return '=<';\r\n        } else if (equationString.includes('<')) {\r\n            return '<';\r\n        } else if (equationString.includes('=')) {\r\n            return '='\r\n        }\r\n        if (strSign === '') {\r\n            console.log('Equation: parse string : sign not found');\r\n            return false;\r\n        }\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Equations solving algorithms\r\n\r\n    private _formatSign = (signStr: string): string => {\r\n        if (signStr === undefined) {\r\n            return '=';\r\n        }\r\n\r\n        if (signStr.includes('geq')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>=')) {\r\n            return '>=';\r\n        } else if (signStr.includes('=>')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>')) {\r\n            return '>';\r\n        } else if (signStr.includes('leq')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<=')) {\r\n            return '<=';\r\n        } else if (signStr.includes('=<')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<')) {\r\n            return '<';\r\n        } else {\r\n            return '='\r\n        }\r\n    };\r\n\r\n    private _reverseSign = (): Equation => {\r\n        if (this._sign === '=') {\r\n            return this;\r\n        }\r\n\r\n        if (this._sign.includes('<')) {\r\n            this._sign.replace('<', '>');\r\n            return this;\r\n        }\r\n        if (this._sign.includes('>')) {\r\n            this._sign.replace('>', '<');\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    private isGreater = (): boolean => {\r\n        if (this._sign.indexOf('>') !== -1) {\r\n            return true;\r\n        }\r\n        return this._sign.indexOf('geq') !== -1;\r\n\r\n    };\r\n\r\n    private isStrictEqual = (): boolean => {\r\n        return this._sign === '=';\r\n    };\r\n\r\n    private isAlsoEqual = (): boolean => {\r\n        if (this._sign.indexOf('=') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('geq') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('leq') !== -1) {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    private _solveDegree1 = (letter?: string): ISolution[] => {\r\n        const m1 = this._polynom.monomByDegree(1, letter).coefficient,\r\n            m0 = this._polynom.monomByDegree(0, letter).coefficient,\r\n            v = m0.clone().opposed().divide(m1);\r\n        let s: string;\r\n\r\n        if (this.isStrictEqual()) {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0) {\r\n                    this._solutions = [{\r\n                        tex: this._real,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                } else {\r\n                    this._solutions = [{\r\n                        tex: this._varnothing,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                }\r\n            } else {\r\n                this._solutions = [{\r\n                    tex: v.tex,\r\n                    value: v.value,\r\n                    exact: v\r\n                }]\r\n            }\r\n        }\r\n        else {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0 && this.isAlsoEqual()) {\r\n                    s = '\\\\mathbb{R}';\r\n                } else {\r\n                    if (m0.value > 0) {\r\n                        s = this.isGreater() ? this._real : this._varnothing;\r\n                    } else {\r\n                        s = !this.isGreater() ? this._real : this._varnothing;\r\n                    }\r\n                }\r\n            } else {\r\n                // Must handle the case if the m1 monom is negative.\r\n                if ((this.isGreater() && m1.sign() === 1) || (!this.isGreater() && m1.sign() === -1)) {\r\n                    s = `\\\\left${this.isAlsoEqual() ? '\\\\[' : '\\\\]'}${v};+\\\\infty\\\\right\\\\[`;\r\n                } else {\r\n                    s = `\\\\left\\\\]-\\\\infty;${v} \\\\right\\\\${this.isAlsoEqual() ? '\\\\]' : '\\\\['}`;\r\n                }\r\n            }\r\n            this._solutions = [{\r\n                tex: s,\r\n                value: NaN,\r\n                exact: false\r\n            }];\r\n        }\r\n\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree2 = (letter?: string): ISolution[] => {\r\n        let aF = this._polynom.monomByDegree(2, letter).coefficient,\r\n            bF = this._polynom.monomByDegree(1, letter).coefficient,\r\n            cF = this._polynom.monomByDegree(0, letter).coefficient,\r\n            delta: number, nthDelta: NthRoot,\r\n            lcm = Numeric.lcm(aF.denominator, bF.denominator, cF.denominator),\r\n            a = aF.multiply(lcm).value,\r\n            b = bF.multiply(lcm).value,\r\n            c = cF.multiply(lcm).value,\r\n            realX1: number, realX2: number,\r\n            sX1: string, sX2: string;\r\n\r\n        delta = b * b - 4 * a * c;\r\n\r\n        if (delta > 0) {\r\n            realX1 = (-b - Math.sqrt(delta)) / (2 * a);\r\n            realX2 = (-b + Math.sqrt(delta)) / (2 * a);\r\n\r\n            if (delta > 1.0e5) {\r\n                // The delta is too big to be parsed !\r\n                this._solutions = [\r\n                    {\r\n                        tex: ((-b - Math.sqrt(delta)) / (2 * a)).toFixed(5),\r\n                        value: realX1,\r\n                        exact: false\r\n                    },\r\n                    {\r\n                        tex: ((-b + Math.sqrt(delta)) / (2 * a)).toFixed(5),\r\n                        value: realX2,\r\n                        exact: false\r\n                    }\r\n                ]\r\n            } else {\r\n                nthDelta = new NthRoot(delta).reduce();\r\n                if (nthDelta.hasRadical()) {\r\n                    // -b +- coeff\\sqrt{radical}\r\n                    // -------------------------\r\n                    //           2a\r\n                    let gcd = Numeric.gcd(b, 2 * a, nthDelta.coefficient);\r\n                    nthDelta.coefficient = nthDelta.coefficient / gcd;\r\n\r\n                    // TODO: Can i delete the next line ?\r\n                    // let deltaC = nthDelta.coefficient, deltaR = nthDelta.radical;\r\n                    if (b !== 0) {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                {\r\n                                    tex: `${-b / gcd} - ${nthDelta.tex}`,\r\n                                    value: realX1,\r\n                                    exact: false // TODO: implement exact value with nthroot\r\n                                },\r\n                                {\r\n                                    tex: `${-b / gcd} + ${nthDelta.tex}`,\r\n                                    value: realX2,\r\n                                    exact: false\r\n                                },\r\n\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                {\r\n                                    tex: `\\\\frac{${-b / gcd} - ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                    value: realX1,\r\n                                    exact: false\r\n                                },\r\n                                {\r\n                                    tex: `\\\\frac{${-b / gcd} + ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                    value: realX2,\r\n                                    exact: false\r\n                                },\r\n                            ]\r\n                        }\r\n                    } else {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                {\r\n                                    tex: `- ${nthDelta.tex}`,\r\n                                    value: realX1,\r\n                                    exact: false\r\n                                },\r\n                                {\r\n                                    tex: `${nthDelta.tex}`,\r\n                                    value: realX2,\r\n                                    exact: false\r\n                                },\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                {\r\n                                    tex: `\\\\frac{- ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                    value: realX1,\r\n                                    exact: false\r\n                                },\r\n                                {\r\n                                    tex: `\\\\frac{${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                    value: realX2,\r\n                                    exact: false\r\n                                },\r\n                            ]\r\n                        }\r\n                    }\r\n                } else {\r\n                    // -b +- d / 2a\r\n                    const S1 = new Fraction(-b - nthDelta.coefficient, 2 * a).reduce(),\r\n                        S2 = new Fraction(-b + nthDelta.coefficient, 2 * a).reduce()\r\n                    this._solutions = [\r\n                        {\r\n                            tex: S1.frac,\r\n                            value: realX1,\r\n                            exact: S1\r\n                        },\r\n                        {\r\n                            tex: S2.frac,\r\n                            value: realX2,\r\n                            exact: S2\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n\r\n        } else if (delta === 0) {\r\n            const sol = new Fraction(-b, 2 * a).reduce()\r\n            this._solutions = [{\r\n                tex: sol.frac,\r\n                value: sol.value,\r\n                exact: sol\r\n            }];\r\n        } else {\r\n            this._solutions = [{\r\n                tex: this._varnothing,\r\n                value: NaN,\r\n                exact: false\r\n            }];\r\n        }\r\n\r\n        // Handle now the inequations.\r\n        if (!this.isStrictEqual()) {\r\n            if (this._solutions.length === 2) {\r\n                sX1 = (realX1 < realX2) ? this._solutions[0].tex : this._solutions[1].tex;\r\n                sX2 = (realX1 < realX2) ? this._solutions[1].tex : this._solutions[0].tex;\r\n\r\n                if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                    this._solutions = [{\r\n                        tex: `\\\\left]-\\\\infty ; ${sX1}\\\\right${this.isAlsoEqual() ? ']' : '['} \\\\cup \\\\left${this.isAlsoEqual() ? '[' : ']'}${sX2};+\\\\infty\\\\right[`,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }\r\n                    ];\r\n                } else {\r\n                    this._solutions = [{\r\n                        tex: `\\\\left${this.isAlsoEqual() ? '[' : ']'}${sX1} ; ${sX2}\\\\right${this.isAlsoEqual() ? ']' : '['}`,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }]\r\n                }\r\n            } else if (this._solutions.length === 1 && this._solutions[0].tex !== this._varnothing) {\r\n                if (!this.isAlsoEqual()) {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [{\r\n                            tex: `\\\\left]-\\\\infty ; ${this._solutions[0].tex}\\\\right[ \\\\cup \\\\left]${this._solutions[0].tex};+\\\\infty\\\\right[`,\r\n                            value: NaN,\r\n                            exact: false\r\n                        }\r\n                        ];\r\n                    } else {\r\n                        this._solutions = [{\r\n                            tex: this._varnothing,\r\n                            value: NaN,\r\n                            exact: false\r\n                        }];\r\n                    }\r\n                } else {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [{\r\n                            tex: this._real,\r\n                            value: NaN,\r\n                            exact: false\r\n                        }];\r\n                    } else {\r\n                        // this._texSolutions = [ this._texSolutions[0] ];\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.isGreater()) {\r\n                    this._solutions = [{\r\n                        tex: aF.sign() === 1 ? this._real : this._varnothing,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                } else {\r\n                    this._solutions = [{\r\n                        tex: aF.sign() === -1 ? this._real : this._varnothing,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                }\r\n            }\r\n        }\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree3plus = (letter?: string): ISolution[] => {\r\n        // Push everything to the left\r\n        // factorize\r\n        // solve each factors.\r\n        let equ = this.clone().moveLeft()\r\n        equ.left.factorize()\r\n\r\n        this._solutions = []\r\n\r\n        equ.left.factors.forEach(factor=>{\r\n            if(factor.degree(letter).leq(2)) {\r\n                let factorAsEquation = new Equation(factor, 0)\r\n                factorAsEquation.solve()\r\n                factorAsEquation.solutions.forEach(solution => {\r\n                    this._solutions.push(solution)\r\n                })\r\n            }else{\r\n                console.log(factor.tex, ': cannot actually get the solution of this equation')\r\n            }\r\n        })\r\n\r\n        // TODO: check equation resolution for more than degree 2\r\n        // this._solutions = [{tex: 'solve x - not yet handled', value: NaN, exact: false}];  // ESLint remove system :(\r\n        return this._solutions;\r\n    };\r\n}","import {Equation} from \"./equation\";\r\nimport {Polynom} from \"./polynom\";\r\nimport {Monom} from \"./monom\";\r\nimport {Random} from \"../randomization/random\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\n// TODO: Must check and rework\r\nexport class LinearSystem {\r\n    private _solutions: { [letter: string]: { value: Fraction, isReal: boolean, isVarnothing: boolean } };\r\n    private _resolutionSteps: LinearSystem[];\r\n    private _equations: Equation[];\r\n    private _letters: string[];\r\n\r\n    constructor(...equationStrings: string[]) {\r\n        this._equations = [];\r\n        this._letters = 'xy'.split('');\r\n\r\n        if (equationStrings !== undefined && equationStrings.length > 0) {\r\n            this.parse(...equationStrings);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equations(): Equation[] {\r\n        return this._equations;\r\n    }\r\n\r\n    set equations(value) {\r\n        this._equations = value;\r\n    }\r\n\r\n    get letters(): string {\r\n        return this._letters.join('')\r\n    }\r\n\r\n    set letters(value: string) {\r\n        this._letters = value.split('');\r\n    }\r\n\r\n    get isSolvable(): boolean {\r\n        let V = this.variables;\r\n\r\n        // TODO: in some case, it is possible to resolve systems if there isn't the isSame number of vars and equations\r\n        if (V.length !== this._equations.length) {\r\n            return false;\r\n        }\r\n\r\n        //TODO: Must check if two equations isn't a linear combination of the others ?\r\n\r\n        return true;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n        for (let E of this._equations) {\r\n            V = V.concat(E.variables);\r\n        }\r\n        return [...new Set(V)].sort();\r\n    }\r\n\r\n    get tex(): string {\r\n        // Build the array of values.\r\n        // Reorder\r\n        // This clone the system :!!!\r\n        //TODO: Avoid cloning this linear system\r\n        let LS = this.clone().reorder(),\r\n            letters = LS.variables,\r\n            equStr: string[],\r\n            equArray: string[] = [],\r\n            m: Monom;\r\n\r\n        // TODO: Manage tex output of linear equations\r\n        for (let equ of LS.equations) {\r\n            equStr = [];\r\n            for (let L of letters) {\r\n                m = equ.left.monomByLetter(L);\r\n\r\n                if (equStr.length === 0) {\r\n                    equStr.push(m.isZero() ? '' : m.tex);\r\n                } else {\r\n                    equStr.push(m.isZero() ? '' : ((m.coefficient.sign() === 1) ? '+' : '') + m.tex);\r\n                }\r\n            }\r\n\r\n            // Add the equal sign\r\n            equStr.push('=');\r\n\r\n            // Add the right hand part of the equation (should be only a number, because it has been reordered)\r\n            equStr.push(equ.right.tex);\r\n\r\n            // Add to the list.\r\n            equArray.push(equStr.join('&'));\r\n        }\r\n\r\n\r\n        return `\\\\left\\\\{\\\\begin{array}{${\"r\".repeat(letters.length)}cl}${equArray.join('\\\\\\\\\\ ')}\\\\end{array}\\\\right.`;\r\n        //return `\\\\left\\\\{\\\\begin{array}{rrrcl}${this._equations.map(equ => `${equ.tex}`).join('\\\\\\\\\\ \\n')}\\\\end{array}\\\\right.`;\r\n    }\r\n\r\n    get solution(): string {\r\n        let tex: string[] = [];\r\n\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n\r\n        for (let letter in this._solutions) {\r\n            if (this._solutions[letter].isReal) {\r\n                console.log(`Undetermined (letter ${letter})`);\r\n                return;\r\n            }\r\n            if (this._solutions[letter].isVarnothing) {\r\n                console.log(`Undefined (letter ${letter})`);\r\n                return;\r\n            }\r\n\r\n            tex.push(this._solutions[letter].value.frac);\r\n        }\r\n        return `(${tex.join(';')})`;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...equations: unknown[]): LinearSystem => {\r\n        this._equations = equations.map(value => new Equation(value));\r\n        this._findLetters();\r\n        return this;\r\n    };\r\n\r\n    setCoefficient = (...coefficients: string[]): LinearSystem => {\r\n        // Reset the equations list\r\n        this._equations = [];\r\n\r\n        let i = 0;\r\n        while (i < coefficients.length - this._letters.length) {\r\n            let left = new Polynom().parse(this._letters.join(''), ...coefficients.slice(i, i + this._letters.length)),\r\n                right = new Polynom(coefficients[i + this._letters.length].toString()),\r\n                equ = new Equation().create(left, right);\r\n            this._equations.push(equ.clone());\r\n\r\n            i = i + this._letters.length + 1;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): LinearSystem => {\r\n        return new LinearSystem().parse(...this._equations.map(equ => equ.clone()));\r\n    };\r\n\r\n    setLetters = (...letters: string[]): LinearSystem => {\r\n        this._letters = letters;\r\n        return this\r\n    }\r\n    private _findLetters = (): LinearSystem => {\r\n        // Find all letters used.\r\n        let variables = new Set();\r\n\r\n        for (let equ of this._equations) {\r\n            variables = new Set([...variables, ...equ.variables]);\r\n        }\r\n\r\n        // TODO: How to transform (Set of string) to string[]\r\n        // @ts-ignore\r\n        this._letters = [...variables];\r\n        return this;\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n    // -----------------------------------------------\r\n    generate = (...solutions: Fraction[] | number[]): LinearSystem => {\r\n        let solutionsF: Fraction[] = [];\r\n\r\n        // Convert the numbers to fractions if necessary\r\n        for (let s of solutions) {\r\n            if (typeof s === \"number\") {\r\n                solutionsF.push(new Fraction(s.toString()));\r\n            } else {\r\n                solutionsF.push(s.clone());\r\n            }\r\n        }\r\n\r\n        // Create the equations and make sure they are not linear combined.\r\n        this._equations = [];\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            this._equations.push(this._generateOneEquation(...solutionsF));\r\n        }\r\n        return this;\r\n    };\r\n    private _generateOneEquation = (...solutions: Fraction[]): Equation => {\r\n        let coeff: number[] = [], leftValue: Fraction = new Fraction().zero(),\r\n            letters: string[] = ['x', 'y', 'z', 't', 'u', 'v', 'w', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],\r\n            equString: string = '', equ: Equation;\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            coeff.push(Random.numberSym(5));\r\n            leftValue.add(solutions[i].clone().multiply(coeff[i]));\r\n            equString += `${(coeff[i] < 0) ? coeff[i] : '+' + coeff[i]}${letters[i]}`\r\n        }\r\n\r\n        // LeftValue contains the left part oof the equation - and is then the isSame as the right part.\r\n        // It might be a Fraction.\r\n\r\n        // Must check if it's not a linear combination\r\n        equ = new Equation(`${equString}=${leftValue.display}`);\r\n        if (equ.right.monoms[0].coefficient.denominator != 1) {\r\n            equ.multiply(new Fraction(equ.right.monoms[0].coefficient.denominator, 1));\r\n        }\r\n        if (this._checkIfLinerCombination(equ)) {\r\n            return equ;\r\n        } else {\r\n            return this._generateOneEquation(...solutions);\r\n        }\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    private _linearReduction(eq1: Equation, eq2: Equation, letter: string): Equation {\r\n        // TODO: handle other signs for equations ?\r\n        // Get the monom for the particular letter.\r\n        let c1 = eq1.left.monomByDegree(1, letter).coefficient.clone(),\r\n            c2 = eq2.left.monomByDegree(1, letter).coefficient.clone().opposed();\r\n\r\n        return this.mergeEquations(eq1, eq2, c2, c1);\r\n    }\r\n\r\n    mergeEquations = (eq1: Equation, eq2: Equation, factor1: unknown, factor2: unknown): Equation => {\r\n        // Set and clone the equations.\r\n\r\n        let eq1multiplied = eq1.clone().multiply(new Fraction(factor1)),\r\n            eq2multiplied = eq2.clone().multiply(new Fraction(factor2));\r\n\r\n        // Add both equations together.\r\n        eq1multiplied.left.add(eq2multiplied.left);\r\n        eq1multiplied.right.add(eq2multiplied.right);\r\n\r\n        return eq1multiplied;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Solvers algorithm\r\n    // ------------------------------------------\r\n    reorder = (): LinearSystem => {\r\n        for (let E of this._equations) {\r\n            E.reorder();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    solve = (): LinearSystem => {\r\n        // Solve it by linear\r\n        this._solutions = {};\r\n        this._resolutionSteps = [];\r\n\r\n        // Reorder all equations.\r\n        this.reorder();\r\n\r\n        // Get all variables in the linear system\r\n        let V = this.variables.sort();\r\n\r\n        for (let letter of V) {\r\n            this._solutions[letter] = this._solveOneLetter(letter, V)\r\n        }\r\n\r\n        // TODO: LinearSystem - solve: optimization and handle undetermined and undefined systems.\r\n        return this;\r\n    };\r\n\r\n    private _checkIfLinerCombination = (equ: Equation): boolean => {\r\n\r\n        return true;\r\n    };\r\n\r\n    private _solveOneLetter(letter: string, V: string[]): { value: Fraction, isReal: boolean, isVarnothing: boolean } {\r\n        // list of equations.\r\n        let LE: Equation[] = this.clone().equations,\r\n            reducedEquations: Equation[] = [];\r\n\r\n        // Reduce the equations.\r\n        // Do it as long as there is more than one step, but no more than the number of equations.\r\n        for (let L of V) {\r\n            // remove the setLetter from all equations using linear combinations\r\n            if (L === letter) {\r\n                continue;\r\n            }\r\n\r\n            // Linear reduction.\r\n            // TODO: Search for better association\r\n            for (let i = 0; i < LE.length - 1; i++) {\r\n                reducedEquations.push(this._linearReduction(LE[i], LE[i + 1], L));\r\n            }\r\n\r\n            // Keep track of each steps.\r\n            this._resolutionSteps.push(new LinearSystem().parse(...reducedEquations));\r\n\r\n            // Set the list of equations to the new version.\r\n            LE = this._resolutionSteps[this._resolutionSteps.length - 1].clone().equations;\r\n\r\n            // Reset the stack\r\n            reducedEquations = [];\r\n        }\r\n\r\n        // Solve the equations\r\n        let E = this._resolutionSteps[this._resolutionSteps.length - 1].equations[0];\r\n        E.solve();\r\n\r\n        return {\r\n            value: new Fraction(E.solutions[0].value),\r\n            isReal: E.isReal,\r\n            isVarnothing: E.isVarnothing\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Helpers\r\n    // ------------------------------------------\r\n    log = (): string => {\r\n        let str: string = '';\r\n\r\n        for (let E of this._equations) {\r\n            str += `${E.tex}\\\\n}`;\r\n        }\r\n\r\n        return str;\r\n    };\r\n}\r\n","/**\r\n * Polynom module contains everything necessary to handle polynoms.\r\n * @module Logicalset\r\n */\r\n\r\nimport {Shutingyard, ShutingyardMode} from '../shutingyard';\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n */\r\n    export class Logicalset {\r\n        private _rawString: string;\r\n        private _rpn: { token: string, tokenType: string }[]\r\n\r\n        /**\r\n         *\r\n         * @param {string} value (optional) Default polynom to parse on class creation\r\n         */\r\n        constructor(value: string) {\r\n            this._rawString = value\r\n            this.parse(value)\r\n            return this;\r\n        }\r\n\r\n        get isLogicalset() {\r\n            return true;\r\n        };\r\n\r\n        private parse = (value: string): Logicalset => {\r\n            // TODO: Must format the value string to convert some items...\r\n\r\n            // Parse the updated value to the shutingyard algorithm\r\n            this._rpn = new Shutingyard(ShutingyardMode.SET).parse(value).rpn;\r\n\r\n            return this;\r\n        }\r\n\r\n        evaluate(tokenSets: { [key: string]: unknown[] }, reference?: unknown[]): unknown[] {\r\n            let varStack: (Set<unknown>)[] = []\r\n\r\n            let referenceSet: Set<unknown>\r\n            if (reference === undefined) {\r\n                referenceSet = new Set()\r\n                for (let key in tokenSets) {\r\n                    referenceSet = new Set([...referenceSet, ...tokenSets[key]])\r\n                }\r\n            } else {\r\n                referenceSet = new Set(reference)\r\n            }\r\n\r\n            for (let token of this._rpn) {\r\n                if (token.tokenType === 'variable') {\r\n                    // The variable has no token - assume it's empty.\r\n                    if (tokenSets[token.token] === undefined) {\r\n                        varStack.push(new Set())\r\n                    } else {\r\n                        varStack.push(new Set(tokenSets[token.token]));\r\n                    }\r\n\r\n                } else {\r\n                    switch (token.token) {\r\n                        case '&':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                varStack.push(new Set([...first].filter(x => second.has(x))))\r\n                            }\r\n                            break\r\n                        case '|':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n                                varStack.push(new Set([...first, ...second]))\r\n                            }\r\n                            break\r\n                        case '-':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n                                varStack.push(new Set([...first].filter(x => !second.has(x))))\r\n                            }\r\n                            break\r\n                        case '!':\r\n                            if (varStack.length >= 1) {\r\n                                let first = varStack.pop()\r\n\r\n                                varStack.push(new Set([...referenceSet].filter(x => !first.has(x))))\r\n                            }\r\n                            break\r\n                    }\r\n                }\r\n            }\r\n\r\n            return [...varStack[0]].sort();\r\n        }\r\n\r\n        vennAB(): any[] {\r\n            return this.evaluate({\r\n                    A: ['A', 'AB'],\r\n                    B: ['B', 'AB']\r\n                },\r\n                ['A', 'B', 'AB', 'E']\r\n            )\r\n        }\r\n\r\n        vennABC(): any[] {\r\n            return this.evaluate({\r\n                    A: ['A', 'AB', 'AC', 'ABC'],\r\n                    B: ['B', 'AB', 'BC', 'ABC'],\r\n                    C: ['C', 'AC', 'BC', 'ABC']\r\n                },\r\n                ['A', 'B', 'C', 'AB', 'AC', 'BC', 'E']\r\n            )\r\n        }\r\n\r\n        get rpn(): { token: string, tokenType: string }[] {\r\n            return this._rpn\r\n        }\r\n\r\n        get tex(): string {\r\n            let varStack: { token: string, tokenType: string } [] = []\r\n\r\n            for (let token of this._rpn) {\r\n                if (token.tokenType === 'variable') {\r\n                    varStack.push(token);\r\n                } else {\r\n                    switch (token.token) {\r\n                        case '&':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\cap ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '|':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\cup ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '-':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\setminus ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '!':\r\n                            if (varStack.length >= 1) {\r\n                                let first = varStack.pop()\r\n                                varStack.push({token: `\\\\overline{ ${first.token} }`, tokenType: 'variable'})\r\n                            }\r\n                            break\r\n                    }\r\n                }\r\n            }\r\n\r\n            return varStack[0].token\r\n        }\r\n    }","/***\r\n * Monom class\r\n */\r\nimport {Numeric} from \"../numeric\";\r\nimport {Shutingyard, ShutingyardType, Token} from \"../shutingyard\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\nexport type literalType = {\r\n    [Key: string]: Fraction\r\n}\r\n\r\nexport class Monom {\r\n    private _coefficient: Fraction;\r\n    private _literal: literalType;\r\n\r\n    /**\r\n     * Create a Monom\r\n     * Defined as \\\\(k \\\\cdot x^{n}\\\\), where \\\\( k,n \\in \\\\mathbb{Q}\\\\).\r\n     * Examples: \\\\(3x^2\\\\) or \\\\(3/5x^2\\\\)\r\n     * @param value (optional) string The value that should be parse. Can be a Monom, a Fraction, a string or a number. If nothing is provided, it will return the trivial monom (0).\r\n     */\r\n    constructor(value?: unknown) {\r\n        this.zero();\r\n\r\n        if (value !== undefined) {\r\n            // A string is given - try to parse the value.\r\n            this.parse(value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    /**\r\n     * Get the coefficient \\\\(k\\\\) of the Monom \\\\(k\\\\cdot x^{n}\\\\)\r\n     * @returns {Fraction}\r\n     */\r\n    get coefficient(): Fraction {\r\n        return this._coefficient;\r\n    }\r\n\r\n    /**\r\n     * Set the coefficient \\\\(k\\\\) value of the monom\r\n     * @param {Fraction | number | string} F\r\n     */\r\n    set coefficient(F: Fraction | number | string) {\r\n        this._coefficient = new Fraction(F);\r\n    }\r\n\r\n    /**\r\n     * Get the literal part of \\\\(x^{n_1}y^{n_2}\\\\) as dictionary \\\\[\\\\begin{array}{ll}x&=n_1\\\\\\\\y&=n_2\\\\end{array}\\\\]\r\n     * @returns {literalType}\r\n     */\r\n    get literal(): literalType {\r\n        return this._literal;\r\n    }\r\n\r\n    /**\r\n     * Get the literal square roots of the Monom.\r\n     * TODO: remove this getter ? Is it used and is it correct ?\r\n     * @returns {literalType}\r\n     */\r\n    get literalSqrt(): literalType {\r\n        if (this.isLiteralSquare()) {\r\n            let L: literalType = {}\r\n            for (let key in this._literal) {\r\n                L[key] = this._literal[key].clone().sqrt()\r\n            }\r\n            return L;\r\n        } else {\r\n            return this._literal;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom. Must be a dictionary {x: Fraction, y: Fraction, ...}\r\n     * @param {literalType} L\r\n     */\r\n    set literal(L: literalType) {\r\n        this._literal = L;\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom from a string\r\n     * @param inputStr  String like x^2y^3\r\n     */\r\n    set literalStr(inputStr: string) {\r\n        // TODO : parse using shutingyard tree !\r\n\r\n        // Match all x^n\r\n        for (const v of [...inputStr.matchAll(/([a-z])\\^([+-]?[0-9]+)/g)]) {\r\n            // Create the default letter entry if necessary.\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = new Fraction().zero();\r\n            }\r\n\r\n            // Add the new value.\r\n            // TODO: actually, it adds only numeric value\r\n            this._literal[v[1]].add(+v[2]);\r\n        }\r\n\r\n        // Match all x\r\n        for (const v of [...inputStr.matchAll(/([a-z](?!\\^))/g)]) {\r\n            // Match all single letters\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = new Fraction().zero();\r\n            }\r\n\r\n            // Add one to the value.\r\n            this._literal[v[1]].add(1)\r\n        }\r\n    }\r\n\r\n    // Getter helpers.\r\n    /**\r\n     * Get the variables letters\r\n     */\r\n    get variables(): string[] {\r\n        let M = this.clone().clean();\r\n        return Object.keys(M.literal)\r\n    }\r\n\r\n    // Display getter\r\n    /**\r\n     * This display getter is to be used in the polynom display getter\r\n     */\r\n    get display(): string {\r\n        let L: string = '',\r\n            letters = Object.keys(this._literal).sort()\r\n        for (let letter of letters) {\r\n            if (this._literal[letter].isNotZero()) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter].isNotEqual(1)) {\r\n                    L += `^(${this._literal[letter].display})`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.display}`;\r\n            } else {\r\n                return '';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.display}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    get dividers(): Monom[] {\r\n        // Decompose only if the coefficient is a natural number\r\n        if (!this.coefficient.isRelative()) {\r\n            return [this.clone()]\r\n        }\r\n\r\n\r\n        // Decompose only if the power values are natural numbers.\r\n        if (this.hasFractionCoefficient()) {\r\n            return [this.clone()]\r\n        }\r\n\r\n        // Security : do not do this if greater than 10000\r\n        if (this.coefficient.numerator > 1000000) {\r\n            return [this.clone()]\r\n        }\r\n\r\n        const dividers = Numeric.dividers(Math.abs(this.coefficient.numerator))\r\n\r\n        // Decompose the literals parts.\r\n        let literals: literalType[] = [];\r\n        for (let L in this.literal) {\r\n            // L is the letter.\r\n            literals = this._getLiteralDividers(literals, L)\r\n        }\r\n\r\n        const monomDividers: Monom[] = [];\r\n        if (literals.length > 0 && dividers.length > 0) {\r\n            for (let N of dividers) {\r\n                for (let L of literals) {\r\n                    let M = new Monom();\r\n                    M.coefficient = new Fraction(N)\r\n                    M.literal = L\r\n                    monomDividers.push(M)\r\n                }\r\n            }\r\n        } else if (dividers.length === 0) {\r\n            for (let L of literals) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction().one()\r\n                M.literal = L\r\n                monomDividers.push(M)\r\n            }\r\n        } else {\r\n            for (let N of dividers) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction(N)\r\n                monomDividers.push(M)\r\n            }\r\n        }\r\n\r\n        return monomDividers.length === 0 ? [new Monom().one()] : monomDividers;\r\n    }\r\n\r\n    private _getLiteralDividers(arr: literalType[], letter: string): literalType[] {\r\n        let tmpList: { [key: string]: Fraction }[] = [];\r\n\r\n        // Be default, this.literal[letter] should be a rational number.\r\n        for (let d = 0; d <= this.literal[letter].value; d++) {\r\n            if (arr.length === 0) {\r\n                let litt: literalType = {}\r\n                litt[letter] = new Fraction(d)\r\n                tmpList.push(litt)\r\n            } else {\r\n                for (let item of arr) {\r\n                    let litt: literalType = {}\r\n                    for (let currentLetter in item) {\r\n                        litt[currentLetter] = item[currentLetter]\r\n                    }\r\n                    litt[letter] = new Fraction(d)\r\n                    tmpList.push(litt)\r\n                }\r\n            }\r\n        }\r\n        return tmpList;\r\n    }\r\n\r\n    /**\r\n     * Display the monom, forcing the '+' sign to appear\r\n     */\r\n    get displayWithSign(): string {\r\n        let d: String = this.display;\r\n        return (d[0] !== '-' ? '+' : '') + d;\r\n    }\r\n\r\n    get texWithSign(): string {\r\n        if (this.coefficient.isStrictlyPositive()) {\r\n            return '+' + this.tex\r\n        }\r\n\r\n        return this.tex\r\n    }\r\n\r\n    get plotFunction(): string {\r\n\r\n        let L: string = '',\r\n            letters = Object.keys(this._literal).sort()\r\n\r\n        for (let letter of letters) {\r\n            if (this._literal[letter].isNotZero()) {\r\n                L += (L===''?\"\":\"*\") + `${letter}`\r\n                if (this._literal[letter].isNotEqual(1)) {\r\n                    L += `^(${this._literal[letter].display})`;\r\n                }\r\n            }\r\n        }\r\n\r\n        // No literal part\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.display}`;\r\n            } else {\r\n                return '';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.display}*${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the tex output of the monom\r\n     */\r\n    get tex(): string {\r\n        // TODO: display with square root !\r\n        let L: string = '',\r\n            letters = Object.keys(this._literal).sort()\r\n\r\n        for (let letter of letters) {\r\n            if (this._literal[letter].isNotZero()) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter].isNotEqual(1)) {\r\n                    L += `^{${this._literal[letter].tfrac}}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.frac}`;\r\n            } else {\r\n                return '0';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.frac}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // -----------------------------------------\r\n    /**\r\n     * Parse a string to a monom. The string may include fraction.\r\n     * @param inputStr\r\n     */\r\n    parse = (inputStr: unknown): Monom => {\r\n\r\n        if (typeof inputStr === 'string') {\r\n            this._shutingYardToReducedMonom(inputStr)\r\n        } else if (typeof inputStr === 'number') {\r\n            this._coefficient = new Fraction(inputStr)\r\n            this._literal = {}\r\n        } else if (inputStr instanceof Fraction) {\r\n            this._coefficient = inputStr.clone()\r\n            this._literal = {}\r\n        } else if (inputStr instanceof Monom) {\r\n            this._coefficient = inputStr._coefficient.clone()\r\n            this._literal = this.copyLiterals(inputStr.literal)\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    addToken = (stack: Monom[], element: Token): void => {\r\n\r\n        let q1: Monom, q2: Monom, m: Monom, letter: string, pow: Fraction\r\n\r\n        if (element.tokenType === ShutingyardType.COEFFICIENT) {\r\n            stack.push(new Monom(new Fraction(element.token)))\r\n\r\n        } else if (element.tokenType === ShutingyardType.VARIABLE) {\r\n            let M = new Monom().one()\r\n            M.setLetter(element.token, 1)\r\n            stack.push(M.clone())\r\n\r\n        } else if (element.tokenType === ShutingyardType.OPERATION) {\r\n            switch (element.token) {\r\n                case '-':\r\n                    // this should only happen for negative powers or for negative coefficient.\r\n                    q2 = (stack.pop()) || new Monom().zero()\r\n                    q1 = (stack.pop()) || new Monom().zero()\r\n\r\n                    stack.push(q1.subtract(q2))\r\n\r\n                    break;\r\n                case '*':\r\n                    // Get the last element in the stack\r\n                    q2 = (stack.pop()) || new Monom().one()\r\n                    q1 = (stack.pop()) || new Monom().one()\r\n\r\n                    stack.push(q1.multiply(q2))\r\n                    break\r\n                case '/':\r\n                    // Get the last element in the stack\r\n                    q2 = (stack.pop()) || new Monom().one()\r\n                    q1 = (stack.pop()) || new Monom().one()\r\n\r\n                    stack.push(q1.divide(q2))\r\n                    break\r\n                case '^':\r\n                    // get the two last elements in the stack\r\n                    pow = (stack.pop().coefficient) || new Fraction().one()\r\n                    m = (stack.pop()) || new Monom().one()\r\n\r\n                    letter = m.variables[0]\r\n\r\n                    if (letter !== undefined) {\r\n                        m.setLetter(letter, pow)\r\n                    }\r\n\r\n                    stack.push(m)\r\n                    // this.multiply(m.clone())\r\n                    break\r\n            }\r\n        }\r\n    }\r\n    private _shutingYardToReducedMonom = (inputStr: string): Monom => {\r\n        // Get the RPN array of the current expression\r\n        const SY: Shutingyard = new Shutingyard().parse(inputStr);\r\n        const rpn: { token: string, tokenType: string }[] = SY.rpn;\r\n\r\n        let stack: Monom[] = [], m, pow, letter, q1, q2\r\n\r\n        if (rpn.length === 0) {\r\n            this.zero()\r\n            return this\r\n        } else if (rpn.length === 1) {\r\n            const element = rpn[0]\r\n\r\n            this.one()\r\n            if (element.tokenType === 'coefficient') {\r\n                this.coefficient = new Fraction(element.token)\r\n            } else if (element.tokenType === 'variable') {\r\n                this.setLetter(element.token, 1)\r\n            }\r\n            return this\r\n        } else {\r\n            // Reset the monom\r\n            for (const element of rpn) {\r\n                this.addToken(stack, element)\r\n            }\r\n        }\r\n\r\n        this.one()\r\n        this.multiply(stack[0])\r\n        return this\r\n    }\r\n    /**\r\n     * Clone the current Monom.\r\n     */\r\n    clone = (): Monom => {\r\n        let F: Monom = new Monom();\r\n\r\n        F.coefficient = this._coefficient.clone();\r\n\r\n        // Copy the literal parts.\r\n        for (let k in this._literal) {\r\n            F.setLetter(k, this._literal[k].clone());\r\n        }\r\n        return F;\r\n    };\r\n\r\n    copyLiterals = (literal: literalType): literalType => {\r\n        let L: literalType = {}\r\n\r\n        for (let k in literal) {\r\n            L[k] = literal[k].clone()\r\n        }\r\n        return L\r\n    }\r\n\r\n    makeSame = (M: Monom): Monom => {\r\n        // Copy the literal parts.\r\n        for (let k in M._literal) {\r\n            this.setLetter(k, M._literal[k].clone());\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Create a zero value monom\r\n     */\r\n    zero = (): Monom => {\r\n        this._coefficient = new Fraction().zero();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Create a one value monom\r\n     */\r\n    one = (): Monom => {\r\n        this._coefficient = new Fraction().one();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Clean the monom by removing each letters with a power of zero.\r\n     */\r\n    clean = (): Monom => {\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter].isZero()) {\r\n                delete this._literal[letter];\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    reduce = (): Monom => {\r\n        this.clean()\r\n        this.coefficient.reduce()\r\n        return this\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Get the opposed\r\n     * Returns a monom.\r\n     */\r\n    opposed = (): Monom => {\r\n        this._coefficient.opposed();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Add all similar monoms. If they aren't similar, they are simply skipped.\r\n     * @param M (Monom[]) The monoms to add.\r\n     */\r\n    add = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                if (this.isZero()) {\r\n                    this.makeSame(m)\r\n                }\r\n                this._coefficient.add(m.coefficient);\r\n            } else {\r\n                console.log('Add: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Subtract multiple monoms\r\n     * @param M (Monom[]) The monoms to subtract\r\n     */\r\n    subtract = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                if (this.isZero()) {\r\n                    this.makeSame(m)\r\n                }\r\n                this._coefficient.add(m.clone().coefficient.opposed());\r\n            } else {\r\n                console.log('Subtract: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiple multiple monoms to the current monom\r\n     * @param M (Monom[]) The monoms to multiply to.\r\n     */\r\n    multiply = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            // Multiply the coefficient.\r\n            this._coefficient.multiply(m.coefficient);\r\n\r\n            // Multiply the literal parts.\r\n            for (let letter in m.literal) {\r\n                if (this._literal[letter] === undefined) {\r\n                    this._literal[letter] = m.literal[letter].clone()\r\n                } else {\r\n                    this._literal[letter].add(m.literal[letter])\r\n                }\r\n\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiplyByNumber = (F: Fraction | number): Monom => {\r\n        this._coefficient.multiply(F);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divide the current monoms by multiple monoms\r\n     * @param M (Monom[])\r\n     */\r\n    divide = (...M: Monom[]): Monom => {\r\n        // Depending on the given value, choose the current item\r\n        for (let v of M) {\r\n            // Divide the coefficient\r\n            this._coefficient.divide(v.coefficient);\r\n\r\n            // Subtract the power values\r\n            for (let letter in v.literal) {\r\n                this._literal[letter] = (this._literal[letter] === undefined) ? v.literal[letter].clone().opposed() : this._literal[letter].subtract(v.literal[letter])\r\n\r\n                // If the power of a particular setLetter is zero, delete it from the literal part..\r\n                if (this._literal[letter].isZero()) {\r\n                    delete this._literal[letter];\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the pow of a monom.\r\n     * @param nb (number) : Mathematical pow\r\n     */\r\n    pow = (nb: number|Fraction): Monom => {\r\n        this._coefficient.pow(nb);\r\n        for (let letter in this._literal) {\r\n            this._literal[letter].multiply(nb)\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the nth-root of the monom\r\n     * @param p\r\n     */\r\n    root = (p: number): Monom => {\r\n        // TODO: determiner the nth root of a monom\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Return the square root of a monom\r\n     */\r\n    sqrt = (): Monom => {\r\n        if (this.isSquare()) {\r\n            this._coefficient.sqrt();\r\n            for (let letter in this._literal) {\r\n                this._literal[letter].clone().divide(2)\r\n            }\r\n        }\r\n        return this.root(2);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    compare = (M: Monom, sign?: string): boolean => {\r\n        // TODO: Build the compare systems.\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // To be equal, they must be the isSame\r\n                if (!this.compare(M, 'same')) {\r\n                    return false;\r\n                }\r\n\r\n                // The literal parts are the isSame. The coefficient must be equal\r\n                return this._coefficient.isEqual(M.coefficient);\r\n            case 'same':\r\n                // Get the list of all variables from both monoms.\r\n                let M1: string[] = this.variables,\r\n                    M2: string[] = M.variables,\r\n                    K: string[] = M1.concat(M2.filter((item) => M1.indexOf(item) < 0));\r\n\r\n                if(M1.length===0 && M2.length===0){return true}\r\n                // To compare, both must be different than zero.\r\n                if (!this.isZero() && !M.isZero()) {\r\n                    for (let key of K) {\r\n                        // The setLetter is not available in one of the monom\r\n                        if (this._literal[key] === undefined || M.literal[key] === undefined) {\r\n                            return false;\r\n                        }\r\n                        // The setLetter does not have the isSame power in each monoms.\r\n                        if (!this._literal[key].isEqual(M.literal[key])) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // All are positive check - the monoms are the sames.\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is null\r\n     */\r\n    isZero(): boolean {\r\n        return this._coefficient.value === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is one\r\n     */\r\n    isOne(): boolean {\r\n        return this._coefficient.value === 1 && this.variables.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if two monoms are equals\r\n     * @param M\r\n     */\r\n    isEqual = (M: Monom): boolean => {\r\n        return this.compare(M, '=');\r\n    };\r\n\r\n    /**\r\n     * Determine if two monoms are similar\r\n     * @param M\r\n     */\r\n    isSameAs = (M: Monom): boolean => {\r\n        return this.compare(M, 'same');\r\n    };\r\n\r\n    isSquare = (): boolean => {\r\n        if (!this.coefficient.isSquare()) {\r\n            return false;\r\n        }\r\n        return this.isLiteralSquare();\r\n    }\r\n\r\n    isLiteralSquare = (): boolean => {\r\n        for (let letter in this.literal) {\r\n            // A literal square must have a natural power\r\n            if (this.literal[letter].isRational()) {\r\n                return false\r\n            }\r\n\r\n            // The natural power must be be even\r\n            if (this.literal[letter].isEven()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    hasFractionCoefficient = (): boolean => {\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter].isRational()) {\r\n                return true\r\n            }\r\n        }\r\n\r\n        return false\r\n    }\r\n    // ------------------------------------------\r\n    // Misc monoms functions\r\n    // -------------------------------------\r\n    /**\r\n     * Determine if a monom contains a setLetter in it's literal part\r\n     * @param letter\r\n     */\r\n    hasLetter = (letter?: string): boolean => {\r\n        // The letter was not found\r\n        if (this._literal[letter === undefined ? 'x' : letter] === undefined) {\r\n            return false\r\n        }\r\n\r\n        // The letter is found and is not zero !\r\n        return this._literal[letter === undefined ? 'x' : letter].isNotZero();\r\n    };\r\n\r\n    /**\r\n     * Set the power of a particular setLetter\r\n     * @param letter (string) Letter to change\r\n     * @param pow (number) Power of the setLetter (must be positive integer.\r\n     */\r\n    setLetter = (letter: string, pow: Fraction | number): void => {\r\n        if (pow instanceof Fraction) {\r\n            // Set the power of the letter to zero => remove it\r\n            if (this.hasLetter(letter) && pow.isZero()) {\r\n                delete this._literal[letter]\r\n            }\r\n\r\n            this._literal[letter] = pow.clone()\r\n        } else {\r\n            this.setLetter(letter, new Fraction(pow))\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the degree of a monom. If no setLetter is given, the result will be the global degree.\r\n     * @param letter (string) Letter to get to degree (power)\r\n     */\r\n    degree = (letter?: string): Fraction => {\r\n        if (this.variables.length === 0) {\r\n            return new Fraction().zero();\r\n        }\r\n        if (letter === undefined) {\r\n            // Not setLetter given -> we get the global monom degree (sum of all the letters).\r\n            return Object.values(this._literal).reduce((t, n) => t.clone().add(n));\r\n        } else {\r\n            // A setLetter is given -> get the corresponding power.\r\n            return this._literal[letter] === undefined ? new Fraction().zero() : this._literal[letter].clone();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Evaluate a monom. Each setLetter must be assigned to a Fraction.\r\n     * @param values    Dictionary of <setLetter: Fraction>\r\n     */\r\n    evaluate = (values: literalType | Fraction | number): Fraction => {\r\n        let r = this.coefficient.clone();\r\n\r\n        if (typeof values === 'number' || values instanceof Fraction) {\r\n            let tmpValues: literalType = {}\r\n            tmpValues[this.variables[0]] = new Fraction(values)\r\n            return this.evaluate(tmpValues);\r\n        }\r\n\r\n        if (typeof values === 'object') {\r\n            if(this.variables.length===0){\r\n                return this.coefficient\r\n            }\r\n            for (let L in this._literal) {\r\n                if (values[L] === undefined) {\r\n                    return new Fraction().zero();\r\n                }\r\n\r\n                let value = new Fraction(values[L])\r\n\r\n                r.multiply(value.pow(this._literal[L]))\r\n            }\r\n        }\r\n\r\n        return r;\r\n    };\r\n\r\n    evaluateAsNumeric = (values: { [Key: string]: number } | number): number => {\r\n        let r = this.coefficient.value\r\n\r\n        if (typeof values === 'number') {\r\n            let tmpValues: { [Key: string]: number } = {}\r\n            tmpValues[this.variables[0]] = values\r\n            return this.evaluateAsNumeric(tmpValues);\r\n        }\r\n\r\n        if (typeof values === 'object') {\r\n            if(this.variables.length===0){\r\n                return this.coefficient.value\r\n            }\r\n            for (let L in this._literal) {\r\n                if (values[L] === undefined) {\r\n                    return 0;\r\n                }\r\n\r\n                r *= values[L]**(this._literal[L].value)\r\n            }\r\n        }\r\n\r\n        return r\r\n    }\r\n\r\n    /**\r\n     * Derivative the monom\r\n     * @param letter\r\n     */\r\n    derivative = (letter?: string): Monom => {\r\n        // No setLetter given - assume it's the setLetter 'x'\r\n        if (letter === undefined) {\r\n            letter = 'x';\r\n        }\r\n\r\n        if (this.hasLetter(letter)) {\r\n            let d = this._literal[letter].clone(),\r\n                dM = this.clone();\r\n\r\n            // Subtract one to the degree.\r\n            dM._literal[letter].subtract(1)\r\n\r\n            // Multiply the coefficient by the previous degree\r\n            dM._coefficient.multiply(new Fraction(d.clone()));\r\n            return dM;\r\n        } else {\r\n            return new Monom().zero();\r\n        }\r\n    };\r\n\r\n    primitive = (letter?: string): Monom => {\r\n        // TODO: derivative including the ln value => implies creating different monom system ?\r\n        if (letter === undefined) {\r\n            letter = 'x'\r\n        }\r\n\r\n        // Zero monom\r\n        let M = this.clone(), degree\r\n\r\n        if (M.hasLetter(letter)) {\r\n            degree = M.degree(letter).clone().add(1)\r\n            M.coefficient = M.coefficient.clone().divide(degree)\r\n            M.setLetter(letter, degree)\r\n        } else {\r\n            // There is no letter.\r\n\r\n            // The coefficient might be zero (=> x) or a number a (=> ax)\r\n            if (M.coefficient.isZero()) {\r\n                M.coefficient = new Fraction().one()\r\n            }\r\n            M.setLetter(letter, 1)\r\n        }\r\n\r\n        return M\r\n    }\r\n    // ----------------------------------------\r\n    // Static functions\r\n    // ----------------------------------------\r\n\r\n    /**\r\n     * Get the least common multiple of monoms\r\n     * @param monoms    Array of monoms\r\n     */\r\n    static lcm = (...monoms: Monom[]): Monom => {\r\n        // All the monoms must be with natural powers...\r\n        for (let m of monoms) {\r\n            if (m.hasFractionCoefficient()) {\r\n                return new Monom().zero()\r\n            }\r\n        }\r\n\r\n\r\n        let M = new Monom(),\r\n            coeffN: number[] = monoms.map(value => value.coefficient.numerator),\r\n            coeffD: number[] = monoms.map(value => value.coefficient.denominator),\r\n            n = Numeric.gcd(...coeffN),\r\n            d = Numeric.lcm(...coeffD);\r\n\r\n        // Get the coefficient.\r\n        M.coefficient = new Fraction(n, d).reduce();\r\n\r\n        // Set the literal parts - go through each monoms literal parts and get only the lowest degree of each letters.\r\n        for (let m of monoms) {\r\n            // Remove the inexistant letters from the resulting monom\r\n            for (let letter in M.literal) {\r\n                if (!(letter in m.literal)) {\r\n                    M.literal[letter].zero();\r\n                }\r\n            }\r\n            for (let letter in m.literal) {\r\n                if (M.literal[letter] === undefined && m.literal[letter].isStrictlyPositive()) {\r\n                    M.literal[letter] = m.literal[letter].clone();\r\n                } else {\r\n                    M.literal[letter] = new Fraction(Math.min(m.literal[letter].value, M.literal[letter].value))\r\n                }\r\n            }\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n    /**\r\n     * Multiply two monoms and return a NEW monom.\r\n     * @param monoms\r\n     */\r\n    static xmultiply = (...monoms: Monom[]): Monom => {\r\n        let M = new Monom().one();\r\n\r\n        for (let m of monoms) {\r\n            M.multiply(m);\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Determine if multiple monoms are similar\r\n     * @param M\r\n     */\r\n    areSameAs = (...M: Monom[]): boolean => {\r\n        let result: boolean = true;\r\n\r\n        // Check all monoms if they are the isSame as the \"this\" one.\r\n        for (let i = 0; i < M.length; i++) {\r\n            if (!this.isSameAs(M[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All check passed -> all the monoms are similar.\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Determine if multiple monoms are equals\r\n     * @param M\r\n     */\r\n    areEquals = (...M: Monom[]): boolean => {\r\n        // They are not similar.\r\n        if (!this.areSameAs(...M)) {\r\n            return false;\r\n        }\r\n\r\n        // Check all coefficient. They must be equals.\r\n        for (let m of M) {\r\n            if (!this._coefficient.isEqual(m.coefficient)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All checks passed.\r\n        return true;\r\n    };\r\n\r\n    isDivisible = (div:Monom):boolean => {\r\n        // For all variables (letters), the current monom must have a degree higher than the divider\r\n        if(div.degree().isStrictlyPositive()) {\r\n            for (let letter of div.variables) {\r\n                if (!this.degree(letter).geq(div.degree(letter))) {\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n\r\n        // If the coefficient is rational, we suppose we don't need to check the division by the coefficient.\r\n        if(this.coefficient.isRational() || div.coefficient.isRational()){return true}\r\n\r\n        return this.coefficient.clone().divide(div.coefficient).isRelative()\r\n    }\r\n\r\n}\r\n","/**\r\n * Polynom module contains everything necessary to handle polynoms.*\r\n */\r\n\r\nimport {literalType, Monom} from './monom';\r\nimport {Shutingyard, ShutingyardType, Token} from '../shutingyard';\r\nimport {Numeric} from '../numeric';\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Equation, ISolution} from \"./equation\";\r\n\r\nexport type PolynomParsingType = string | Polynom | number | Fraction | Monom\r\n\r\nexport interface IEuclidian {\r\n    quotient: Polynom,\r\n    reminder: Polynom\r\n}\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n * ```\r\n * let P = new Polynom('3x-4')\r\n * ```\r\n */\r\nexport class Polynom {\r\n    private _dirty_factors: boolean\r\n    private _dirty_zeroes: boolean\r\n    private _euclidianCache: { [Key: string]: IEuclidian }\r\n    private _factors: Polynom[];\r\n    private _monoms: Monom[];\r\n    private _rawString: string;\r\n    private _texString: string;\r\n    private _zeroes: ISolution[]\r\n\r\n    /**\r\n     *\r\n     * @param {string} polynomString (optional) Default polynom to parse on class creation\r\n     * @param values\r\n     */\r\n    constructor(polynomString?: PolynomParsingType, ...values: unknown[]) {\r\n        this._monoms = [];\r\n        this._factors = [];\r\n        this.mark_as_dirty()\r\n\r\n        if (polynomString !== undefined) {\r\n            this.parse(polynomString, ...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    get euclidianCache(): { [p: string]: IEuclidian } {\r\n        return this._euclidianCache;\r\n    }\r\n\r\n    set euclidianCache(value: { [p: string]: IEuclidian }) {\r\n        this._euclidianCache = value;\r\n    }\r\n\r\n    get dirty_zeroes(): boolean {\r\n        return this._dirty_zeroes;\r\n    }\r\n\r\n    set dirty_zeroes(value: boolean) {\r\n        this._dirty_zeroes = value;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    get dirty_factors(): boolean {\r\n        return this._dirty_factors;\r\n    }\r\n\r\n    set dirty_factors(value: boolean) {\r\n        this._dirty_factors = value;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    get monoms() {\r\n        return this._monoms;\r\n    }\r\n\r\n    set monoms(M: Monom[]) {\r\n        this._monoms = M;\r\n    }\r\n\r\n    get zeroes(): ISolution[] {\r\n        return this.getZeroes()\r\n    }\r\n\r\n    get factors(): Polynom[] {\r\n        return this.factorize()\r\n    }\r\n\r\n    set factors(value: Polynom[]) {\r\n        this.mark_as_dirty()\r\n        this._factors = value;\r\n    }\r\n\r\n    get texString(): string {\r\n        return this._texString;\r\n    }\r\n\r\n    get texFactors(): string {\r\n        this.factorize()\r\n\r\n        if (this.factors.length === 0) {\r\n            return this.tex\r\n        }\r\n        let tex = ''\r\n        for (let f of this.factors) {\r\n            if (f.monoms.length > 1) {\r\n                tex += `(${f.tex})`\r\n            } else {\r\n                tex = f.tex + tex;\r\n            }\r\n        }\r\n        return tex;\r\n    }\r\n\r\n    get length() {\r\n        // TODO: Must reduce the monoms list to remove the zero coefficient.\r\n        return this._monoms.length;\r\n    }\r\n\r\n    get display(): string {\r\n        return this.genDisplay();\r\n    }\r\n\r\n    get raw(): string {\r\n        return this._rawString\r\n    }\r\n\r\n    get tex(): string {\r\n        return this.genDisplay('tex');\r\n    }\r\n\r\n    get isMultiVariable(): boolean {\r\n        const B = false;\r\n        for (const m of this._monoms) {\r\n            if (m.variables.length > 1) {\r\n                return true;\r\n            }\r\n        }\r\n        return B;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            V = V.concat(m.variables);\r\n        }\r\n\r\n        // Remove duplicates.\r\n        V = [...new Set(V)];\r\n\r\n        return V;\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    get plotFunction(): string {\r\n        return this.genDisplay('tex', false, false, true)\r\n    }\r\n\r\n    mark_as_dirty = (): void => {\r\n        this.dirty_factors = true\r\n        this.dirty_zeroes = true\r\n        this.euclidianCache = {}\r\n    }\r\n\r\n    addToken = (stack: Polynom[], element: Token): void => {\r\n        switch (element.tokenType) {\r\n            case ShutingyardType.COEFFICIENT:\r\n                stack.push(new Polynom(element.token))\r\n                break\r\n\r\n            case ShutingyardType.VARIABLE:\r\n                stack.push(new Polynom().add(new Monom(element.token)))\r\n                break\r\n\r\n            case ShutingyardType.CONSTANT:\r\n                // TODO: add constant support to Polynom parsing.\r\n                console.log('Actually, not supported - will be added later !')\r\n                break\r\n\r\n            case ShutingyardType.OPERATION:\r\n                if (stack.length >= 2) {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n\r\n                    if (element.token === '+') {\r\n                        stack.push(a.add(b))\r\n                    } else if (element.token === '-') {\r\n                        stack.push(a.subtract(b))\r\n                    } else if (element.token === '*') {\r\n                        stack.push(a.multiply(b))\r\n                    } else if (element.token === '/') {\r\n                        if (b.degree().isStrictlyPositive()) {\r\n                            console.log('divide by a polynom -> should create a rational polynom !')\r\n                        } else {\r\n                            stack.push(a.divide(b.monoms[0].coefficient))\r\n\r\n                        }\r\n                    } else if (element.token === '^') {\r\n                        if (b.degree().isStrictlyPositive()) {\r\n                            console.error('Cannot elevate a polynom with another polynom !')\r\n                        } else {\r\n                            if (b.monoms[0].coefficient.isRelative()) {\r\n                                // Integer power\r\n                                stack.push(a.pow(b.monoms[0].coefficient.value))\r\n                            } else {\r\n                                // Only allow power if the previous polynom is only a monom, without coefficient.\r\n                                if (a.monoms.length === 1 && a.monoms[0].coefficient.isOne()) {\r\n                                    for (let letter in a.monoms[0].literal) {\r\n                                        a.monoms[0].literal[letter].multiply(b.monoms[0].coefficient)\r\n                                    }\r\n                                    stack.push(a)\r\n                                } else {\r\n                                    console.error('Cannot have power with fraction')\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (element.token === '-') {\r\n                        stack.push(stack.pop().opposed())\r\n                    } else {\r\n                        throw \"Error parsing the polynom \" + this._rawString\r\n                    }\r\n                }\r\n                break\r\n\r\n            case ShutingyardType.MONOM:\r\n                // Should never appear.\r\n                console.error('The monom token should not appear here')\r\n                break;\r\n\r\n            case ShutingyardType.FUNCTION:\r\n                // Should never appear.\r\n                console.error('The function token should not appear here - might be introduced later.')\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse a string to a polynom.\r\n     * @param inputStr\r\n     * @param values: as string, numbers or fractions\r\n     */\r\n    parse = (inputStr: PolynomParsingType, ...values: unknown[]): Polynom => {\r\n        // Reset the main variables.\r\n        this._monoms = []\r\n        this._factors = []\r\n        this.mark_as_dirty()\r\n\r\n        // TODO: allow to enter a liste of Fraction (a, b, c, ...) to make a polynom ax^n + bx^(n-1) + cx^(n-2) + ...\r\n        if (typeof inputStr === 'string') {\r\n            return this._parseString(inputStr, ...values)\r\n        } else if (\r\n            (typeof inputStr === 'number' || inputStr instanceof Fraction || inputStr instanceof Monom)\r\n            && (values === undefined || values.length === 0)\r\n        ) {\r\n            this._monoms.push(new Monom(inputStr))\r\n        } else if (inputStr instanceof Monom && values.length > 0) {\r\n            this._monoms.push(new Monom(inputStr))\r\n            values.forEach(m => {\r\n                this._monoms.push(new Monom(m))\r\n            })\r\n        } else if (inputStr instanceof Polynom) {\r\n            for (const m of inputStr.monoms) {\r\n                this._monoms.push(m.clone())\r\n            }\r\n        }\r\n\r\n        return this\r\n    };\r\n\r\n    /**\r\n     * Clone the polynom\r\n     */\r\n    clone = (): Polynom => {\r\n        const P = new Polynom();\r\n        const M: Monom[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            M.push(m.clone());\r\n        }\r\n\r\n        P.monoms = M;\r\n\r\n        return P;\r\n    };\r\n\r\n    /**\r\n     * Set the polynom to zero.\r\n     * @returns {this}\r\n     */\r\n    zero = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().zero());\r\n        this._rawString = '0';\r\n        this.mark_as_dirty()\r\n        return this;\r\n    };\r\n\r\n    one = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().one());\r\n        this._rawString = '1';\r\n        this.mark_as_dirty()\r\n        return this;\r\n    }\r\n\r\n    empty = (): Polynom => {\r\n        this._monoms = [];\r\n        this._rawString = '';\r\n        this.mark_as_dirty()\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    opposed = (): Polynom => {\r\n        this._monoms = this._monoms.map(m => m.opposed());\r\n        this.mark_as_dirty()\r\n        return this;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n\r\n    add = (...values: unknown[]): Polynom => {\r\n        this.mark_as_dirty()\r\n\r\n        for (let value of values) {\r\n            if (value instanceof Polynom) {\r\n                this._monoms = this._monoms.concat(value.monoms);\r\n            } else if (value instanceof Monom) {\r\n                this._monoms.push(value.clone());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()));\r\n            } else {\r\n                this._monoms.push(new Monom(value));\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (...values: unknown[]): Polynom => {\r\n        this.mark_as_dirty()\r\n\r\n        for (let value of values) {\r\n            if (value instanceof Polynom) {\r\n                this._monoms = this._monoms.concat(value.clone().opposed().monoms);\r\n            } else if (value instanceof Monom) {\r\n                this._monoms.push(value.clone().opposed());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()).opposed());\r\n            } else {\r\n                this._monoms.push(new Monom(value).opposed());\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    multiply = (value: unknown): Polynom => {\r\n        this.mark_as_dirty()\r\n\r\n        if (value instanceof Polynom) {\r\n            return this.multiplyByPolynom(value);\r\n        } else if (value instanceof Fraction) {\r\n            return this.multiplyByFraction(value);\r\n        } else if (value instanceof Monom) {\r\n            return this.multiplyByMonom(value);\r\n        } else if (Number.isSafeInteger(value) && typeof value === 'number') {\r\n            return this.multiplyByInteger(value);\r\n        }\r\n\r\n        // Something went wrong...\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divide the current polynom by another polynom.\r\n     * @param P\r\n     * returns {quotient: Polynom, reminder: Polynom}\r\n     */\r\n    euclidian = (P: Polynom): IEuclidian => {\r\n\r\n        if (this.euclidianCache[P.tex] !== undefined) {\r\n            return this.euclidianCache[P.tex]\r\n        }\r\n\r\n        const letter: string = P.variables[0];\r\n        const quotient: Polynom = new Polynom().zero();\r\n        const reminder: Polynom = this.clone().reorder(letter);\r\n\r\n        // There is no variable - means it's a number\r\n        if (P.variables.length === 0) {\r\n            let q = this.clone().divide(P)\r\n            return {\r\n                quotient: this.clone().divide(P),\r\n                reminder: new Polynom().zero()\r\n            }\r\n\r\n        }\r\n\r\n        // Get at least a letter\r\n\r\n        const maxMP: Monom = P.monomByDegree(undefined, letter);\r\n        const degreeP: Fraction = P.degree(letter);\r\n\r\n        let newM: Monom;\r\n\r\n        // Make the euclidian division of the two polynoms.\r\n        let MaxIteration = this.degree(letter).clone().multiply(2);\r\n        while (reminder.degree(letter).geq(degreeP) && MaxIteration.isPositive()) {\r\n            MaxIteration.subtract(1)\r\n\r\n            // Get the greatest monom divided by the max monom of the divider\r\n            newM = reminder.monomByDegree(undefined, letter).clone().divide(maxMP);\r\n\r\n            if (newM.isZero()) {\r\n                break;\r\n            }\r\n\r\n            // Get the new quotient and reminder.\r\n            quotient.add(newM);\r\n            reminder.subtract(P.clone().multiply(newM));\r\n        }\r\n\r\n        quotient.reduce()\r\n        reminder.reduce()\r\n        return {quotient, reminder};\r\n    };\r\n\r\n    divide = (value: unknown): Polynom => {\r\n        this.mark_as_dirty()\r\n\r\n        if (value instanceof Fraction) {\r\n            return this.divideByFraction(value);\r\n        } else if (typeof value === 'number' && Number.isSafeInteger(value)) {\r\n            return this.divideByInteger(value);\r\n        } else if (value instanceof Polynom) {\r\n            if (value.monoms.length === 1 && value.variables.length === 0) {\r\n                return this.divideByFraction(value.monoms[0].coefficient)\r\n            }\r\n        }\r\n    }\r\n\r\n    pow = (nb: number): Polynom => {\r\n        this.mark_as_dirty()\r\n\r\n        if (!Number.isSafeInteger(nb)) {\r\n            return this.zero();\r\n        }\r\n        if (nb < 0) {\r\n            return this.zero();\r\n        }\r\n        if (nb === 0) {\r\n            return new Polynom();\r\n        }\r\n\r\n        const P = this.clone();\r\n        for (let i = 1; i < nb; i++) {\r\n            this.multiply(P);\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param P\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (P: Polynom, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '='\r\n        }\r\n\r\n        // Create clone version to reduce them without altering the original polynoms.\r\n        const cP1 = this.clone().reduce().reorder();\r\n        const cP2 = P.clone().reduce().reorder();\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree().isNotEqual(cP2.degree())) {\r\n                    return false;\r\n                }\r\n\r\n                // Check if the coefficients are the isSame.\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isEqual(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            case 'same':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree() !== cP2.degree()) {\r\n                    return false;\r\n                }\r\n\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isSameAs(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    isZero(): boolean {\r\n        return (this._monoms.length === 1 && this._monoms[0].coefficient.isZero()) || this._monoms.length === 0;\r\n    }\r\n\r\n    isOne(): boolean {\r\n        return this._monoms.length === 1 && this._monoms[0].coefficient.isOne();\r\n    }\r\n\r\n    isEqual = (P: Polynom): boolean => {\r\n        return this.compare(P, '=');\r\n    };\r\n\r\n    isSameAs = (P: Polynom): boolean => {\r\n        return this.compare(P, 'same');\r\n    };\r\n\r\n    isOpposedAt = (P: Polynom): boolean => {\r\n        return this.compare(P.clone().opposed(), '=');\r\n    };\r\n\r\n    isFactorized = (polynomString: string): boolean => {\r\n        let P;\r\n\r\n        // Check if polynom is complete...\r\n        if (polynomString.match(/\\(/g).length !== polynomString.match(/\\)/g).length) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check if the provided (string) version is fully factorized.\r\n        // Run a regex on the string.\r\n        let polynomStringNormalized = polynomString.replaceAll('*', ''),\r\n            polynomStringReduced = '' + polynomStringNormalized,\r\n            factors: string[] = [];\r\n\r\n        for (let x of polynomStringNormalized.matchAll(/\\(([a-z0-9+\\-]+)\\)(\\^[0-9]*)?/g)) {\r\n            if (x[2] !== undefined) {\r\n                for (let i = 0; i < +x[2].substr(1); i++) {\r\n                    factors.push(x[1])\r\n                }\r\n            } else {\r\n                factors.push(x[1]);\r\n            }\r\n            polynomStringReduced = polynomStringReduced.replaceAll(x[0], '');\r\n        }\r\n        if (polynomStringReduced !== '') {\r\n            factors.push(polynomStringReduced);\r\n        }\r\n        let polyFactors = factors.map(x => new Polynom(x));\r\n\r\n        // Factorize the current polynom.\r\n        this.factorize();\r\n\r\n        // Compare the given factors with the generated factors\r\n        let sign = 1;\r\n        for (let f of this.factors) {\r\n            for (let i = 0; i < polyFactors.length; i++) {\r\n                if (f.isEqual(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    break;\r\n                } else if (f.isOpposedAt(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    sign = -sign;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // The polyfactors must be empty and the cumulative opposite factors must be 1.\r\n        return (polyFactors.length === 0 && sign === 1);\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n\r\n    isDeveloped = (polynomString: string): Boolean => {\r\n        let P: Polynom;\r\n\r\n        // There is at least one parenthese - it is not developed.\r\n        if (polynomString.match(/\\(/g).length + polynomString.match(/\\)/g).length) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            // Build the polynom\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check that everything is completely developed. Actually, there are no parentheses... so it is fully developed\r\n\r\n        // maybe it wasn't reduced and not ordered...\r\n        // compare polynom string.\r\n\r\n        // normalize the string\r\n        let polynomStringNormalized = polynomString.replaceAll('[*\\s]', '')\r\n\r\n        // Determine if it's the exact same string.\r\n        // TODO: Maybe it's enough to just make this test !\r\n        return polynomStringNormalized === P.reduce().reorder().display\r\n    }\r\n\r\n    // -------------------------------------\r\n    reduce = (): Polynom => {\r\n        for (let i = 0; i < this._monoms.length; i++) {\r\n            for (let j = i + 1; j < this._monoms.length; j++) {\r\n                if (this._monoms[i].isSameAs(this.monoms[j])) {\r\n                    this._monoms[i].add(this.monoms[j]);\r\n                    this._monoms.splice(j, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Remove all null monoms\r\n        this._monoms = this._monoms.filter((m) => {\r\n            return m.coefficient.value !== 0\r\n        });\r\n\r\n        // Reduce all monoms coefficient.\r\n        for (const m of this._monoms) {\r\n            m.coefficient.reduce();\r\n        }\r\n\r\n        if (this.length === 0) {\r\n            return new Polynom().zero();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    reorder = (letter: string = 'x'): Polynom => {\r\n        // TODO: Must handle multiple setLetter reorder system\r\n        this._monoms.sort(function (a, b) {\r\n            return b.degree(letter).clone().subtract(a.degree(letter)).value\r\n        });\r\n        return this.reduce();\r\n    };\r\n\r\n    degree = (letter?: string): Fraction => {\r\n        let d: Fraction = new Fraction().zero();\r\n        for (const m of this._monoms) {\r\n            d = Fraction.max(m.degree(letter).value, d);\r\n        }\r\n        return d;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        let L: string[] = [], S = new Set();\r\n\r\n        for (let m of this._monoms) {\r\n            S = new Set([...S, ...m.variables]);\r\n        }\r\n\r\n        // @ts-ignore\r\n        return [...S];\r\n    }\r\n\r\n    /**\r\n     * Replace a variable (letter) by a polynom.\r\n     * @param letter\r\n     * @param P\r\n     */\r\n    replaceBy = (letter: string, P: Polynom): Polynom => {\r\n        this.mark_as_dirty()\r\n\r\n        let pow: Fraction;\r\n        const resultPolynom: Polynom = new Polynom().zero();\r\n\r\n        for (const m of this.monoms) {\r\n            if (m.literal[letter] === undefined || m.literal[letter].isZero()) {\r\n                resultPolynom.add(m.clone());\r\n            } else {\r\n                // We have found a setLetter.\r\n                // Get the power and reset it.\r\n                pow = m.literal[letter].clone();\r\n                delete m.literal[letter];\r\n\r\n                // TODO: replaceBy works only with positive and natural pow\r\n                resultPolynom.add(P.clone().pow(Math.abs(pow.numerator)).multiply(m));\r\n            }\r\n        }\r\n\r\n        this._monoms = resultPolynom.reduce().reorder().monoms;\r\n        return this;\r\n    };\r\n\r\n    // Evaluate a polynom.\r\n    evaluate = (values: literalType | Fraction | number): Fraction => {\r\n        const r = new Fraction().zero();\r\n\r\n        this._monoms.forEach(monom => {\r\n            //console.log('Evaluate polynom: ', monom.display, values, monom.evaluate(values).display);\r\n            r.add(monom.evaluate(values));\r\n        });\r\n\r\n        return r;\r\n    };\r\n\r\n    evaluateAsNumeric = (values: { [Key: string]: number } | number ): number => {\r\n        let r = 0\r\n        this._monoms.forEach(monom => {\r\n            r+= monom.evaluateAsNumeric(values)\r\n        })\r\n\r\n        return r\r\n    }\r\n\r\n    derivative = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.derivative(letter));\r\n        }\r\n        return dP;\r\n    }\r\n    // ------------------------------------------\r\n    // Misc polynoms functions\r\n\r\n    primitive = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.primitive(letter))\r\n        }\r\n        return dP\r\n    }\r\n\r\n    integrate = (a: Fraction | number, b: Fraction | number, letter?: string): Fraction => {\r\n        const primitive = this.primitive(letter)\r\n\r\n        if (letter === undefined) {\r\n            letter = 'x'\r\n        }\r\n\r\n        let valuesA: literalType = {},\r\n            valuesB: literalType = {}\r\n        valuesA[letter] = new Fraction(a);\r\n        valuesB[letter] = new Fraction(b);\r\n\r\n        return primitive.evaluate(valuesB).subtract(primitive.evaluate(valuesA))\r\n    }\r\n\r\n    // -------------------------------------\r\n    /**\r\n     * Factorize a polynom and store the best results in factors.\r\n     * @param maxValue Defines the greatest value to search to (default is 20).\r\n     */\r\n    factorize = (letter?: string): Polynom[] => {\r\n        if (this.dirty_factors) {\r\n            let factors: Polynom[] = [];\r\n\r\n            let P = this.clone().reorder()\r\n\r\n            // Extract the common monom\r\n            // 2x^3+6x^2 => 2x^2\r\n            let M = P.commonMonom()\r\n            if (!M.isOne()) {\r\n                let tempPolynom: Polynom = new Polynom(M)\r\n                factors = [tempPolynom.clone()]\r\n                P = P.euclidian(tempPolynom).quotient;\r\n            }\r\n\r\n            // Main loop\r\n            let securityLoop = P.degree().clone().multiply(2).value,\r\n                maxDegree = 1\r\n            while (securityLoop >= 0) {\r\n                securityLoop--\r\n                if (P.monoms.length < 2) {\r\n                    // The polynom has only one monom => 7x^2\r\n                    // No need to continue.\r\n                    if (!P.isOne()) {\r\n                        factors.push(P.clone())\r\n                        P.one()\r\n                    }\r\n                    break\r\n                } else if (P.degree(letter).isOne()) {\r\n                    // The polynom is a first degree polynom => 3x-5\r\n                    // No need to continue\r\n                    factors.push(P.clone())\r\n                    P.one()\r\n                    break\r\n                } else {\r\n                    // Create the list of all \"potential\" polynom dividers.\r\n                    let allDividers: Polynom[] = this._getAllPotentialFactors(P, maxDegree, letter)\r\n                    maxDegree = P.degree(letter).value\r\n\r\n                    // Actually: 100ms\r\n                    while (allDividers.length > 0) {\r\n                        let div = allDividers[0]\r\n\r\n                        if (!P.isDividableBy(div)) {\r\n                            // Not dividable. Remove it from the list\r\n                            allDividers.shift()\r\n                        } else {\r\n                            // It's dividable - so make the division\r\n                            let result = P.euclidian(div)\r\n\r\n                            // Add the factor\r\n                            factors.push(div)\r\n\r\n                            // As it's dividable, get the quotient.\r\n                            P = result.quotient.clone()\r\n\r\n                            // filter all dividers that are no more suitable.\r\n                            allDividers = allDividers.filter(x => {\r\n                                let pX = P.monoms[0],\r\n                                    pC = P.monoms[P.monoms.length - 1],\r\n                                    dX = x.monoms[0],\r\n                                    dC = x.monoms[x.monoms.length - 1]\r\n\r\n                                // Check last item (degree zero)\r\n                                if (!pC.isDivisible(dC)) {\r\n                                    return false\r\n                                }\r\n\r\n                                // Check the first item (degree max)\r\n                                if (!pX.isDivisible(dX)) {\r\n                                    return false\r\n                                }\r\n\r\n                                return true\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Maybe there is still something in the Polynom (not everything was possible to factorize)\r\n            if (!P.isOne()) {\r\n                factors.push(P.clone())\r\n            }\r\n\r\n            // Save the factors\r\n            this._factors = factors\r\n\r\n            // The factors list is no more dirty\r\n            this.dirty_factors = false\r\n        }\r\n\r\n        return this._factors;\r\n    }\r\n\r\n    isDividableBy = (div: Polynom): boolean => {\r\n        // Quick evaluation.\r\n        if (div.degree().isOne()) {\r\n            let zero = div.getZeroes()[0]\r\n\r\n            if (zero.exact instanceof Fraction) {\r\n                return this.evaluate(zero.exact).isZero()\r\n            } else {\r\n                return false\r\n            }\r\n        } else {\r\n            this.euclidianCache[div.tex] = this.euclidian(div)\r\n            return this.euclidianCache[div.tex].reminder.isZero()\r\n        }\r\n    }\r\n    // TODO: get zeroes for more than first degree and for more than natural degrees\r\n    getZeroes = (): ISolution[] => {\r\n        if (this.dirty_zeroes) {\r\n            let equ = new Equation(this.clone(), 0)\r\n            equ.solve()\r\n            this._zeroes = equ.solutions\r\n            this.dirty_zeroes = false\r\n        }\r\n\r\n        return this._zeroes\r\n    };\r\n\r\n    // TODO: analyse the next functions to determine if they are useful or not...\r\n    monomByDegree = (degree?: Fraction | number, letter?: string): Monom => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomByDegree(this.degree(letter), letter);\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter).isEqual(degree)) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        // Nothing was found - return the null monom.\r\n        return new Monom().zero();\r\n    };\r\n\r\n    monomsByDegree = (degree?: number | Fraction, letter?: string): Monom[] => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomsByDegree(this.degree(letter));\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        let Ms: Monom[] = [];\r\n\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter) === degree) {\r\n                Ms.push(m.clone())\r\n            }\r\n        }\r\n\r\n        return Ms\r\n        // Nothing was found - retur\r\n    }\r\n\r\n    // Used in LinearSystem.tex\r\n    monomByLetter = (letter: string): Monom => {\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.hasLetter(letter)) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        return new Monom().zero();\r\n    };\r\n\r\n    // Next functions are used for for commonMonom, which is used in the factorize method.\r\n    getDenominators = (): number[] => {\r\n        const denominators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            denominators.push(m.coefficient.denominator);\r\n        }\r\n        return denominators;\r\n    };\r\n\r\n    getNumerators = (): number[] => {\r\n        const numerators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            numerators.push(m.coefficient.numerator);\r\n        }\r\n        return numerators;\r\n    };\r\n\r\n    lcmDenominator = (): number => {\r\n        return Numeric.lcm(...this.getDenominators());\r\n    };\r\n    // ------------------------------------------\r\n    // Polynoms factorization functions\r\n\r\n    gcdDenominator = (): number => {\r\n        return Numeric.gcd(...this.getDenominators());\r\n    };\r\n\r\n    lcmNumerator = (): number => {\r\n        return Numeric.lcm(...this.getNumerators());\r\n    };\r\n\r\n    gcdNumerator = (): number => {\r\n        return Numeric.gcd(...this.getNumerators());\r\n    };\r\n    // ------------------------------------------\r\n    // Polynoms helpers functions\r\n    // -------------------------------------\r\n\r\n    commonMonom = (): Monom => {\r\n        let M = new Monom().one(), numerator: number, denominator: number, degree = this.degree();\r\n\r\n        numerator = this.gcdNumerator();\r\n        denominator = this.gcdDenominator();\r\n\r\n        M.coefficient = new Fraction(numerator, denominator);\r\n        for (let L of this.variables) {\r\n            // Initialize the setLetter with the max degree\r\n            M.setLetter(L, degree);\r\n            for (let m of this._monoms) {\r\n                M.setLetter(L, Fraction.min(m.degree(L), M.degree(L)));\r\n                if (M.degree(L).isZero()) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return M;\r\n    }\r\n\r\n    limitToInfinity = (letter?: string): Fraction => {\r\n        const M = this.monomByDegree(undefined, letter),\r\n            sign = M.coefficient.sign(),\r\n            degree = M.degree(letter)\r\n\r\n        if (degree.isStrictlyPositive()) {\r\n            return sign === 1 ? (new Fraction()).infinite() : (new Fraction()).infinite().opposed()\r\n        } else if (degree.isZero()) {\r\n            return M.coefficient\r\n        }\r\n\r\n        // Any other cases\r\n        return (new Fraction()).zero()\r\n    }\r\n    limitToNegativeInfinity = (letter?: string): Fraction => {\r\n        const M = this.monomByDegree(undefined, letter),\r\n            sign = M.coefficient.sign(),\r\n            degree = M.degree(letter)\r\n\r\n        if (degree.isStrictlyPositive()) {\r\n            return sign === -1 ? (new Fraction()).infinite() : (new Fraction()).infinite().opposed()\r\n        } else if (degree.isZero()) {\r\n            return M.coefficient\r\n        }\r\n\r\n        // Any other cases\r\n        return (new Fraction()).zero()\r\n    }\r\n\r\n    private _getAllPotentialFactors = (P: Polynom, maxDegree: number, letter: string): Polynom[] => {\r\n        let m1 = P.monoms[0].dividers,\r\n            m2 = P.monoms[P.monoms.length - 1].dividers\r\n\r\n        let allDividers: Polynom[] = []\r\n        m1.forEach(m1d => {\r\n            // Get only polynom that has a degree less than a specific value\r\n            if (m1d.degree(letter).leq(maxDegree)) {\r\n                m2.forEach(m2d => {\r\n                    if (m1d.degree(letter).isNotEqual(m2d.degree(letter))) {\r\n                        allDividers.push(new Polynom(m1d, m2d))\r\n                        allDividers.push(new Polynom(m1d, m2d.clone().opposed()))\r\n                    }\r\n                })\r\n            }\r\n        })\r\n\r\n        return allDividers\r\n\r\n    }\r\n\r\n    private _parseString(inputStr: string, ...values: unknown[]): Polynom {\r\n        if (values === undefined || values.length === 0) {\r\n            inputStr = '' + inputStr;\r\n            this._rawString = inputStr;\r\n\r\n            // Parse the polynom using the shutting yard algorithm\r\n            if (inputStr !== '' && !isNaN(Number(inputStr))) {\r\n                this.empty();\r\n                // It's a simple number.\r\n                let m = new Monom(inputStr);\r\n                // m.coefficient = new Fraction(inputStr);\r\n                // m.literalStr = '';\r\n                this.add(m);\r\n                return this;\r\n            }\r\n\r\n            // Parse the string.\r\n            return this.shutingYardToReducedPolynom(inputStr);\r\n        } else if (/^[a-z]/.test(inputStr)) {\r\n            // We assume the inputStr contains only letters.\r\n            this.empty();\r\n\r\n            let fractions = values.map(x => new Fraction(x));\r\n            // Multiple setLetter version\r\n            if (inputStr.length > 1) {\r\n                // TODO: check that the number of values given correspond to the letters (+1 eventually)\r\n                let letters = inputStr.split(''),\r\n                    i = 0;\r\n                for (let F of fractions) {\r\n                    let m = new Monom();\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = letters[i] || '';\r\n                    this.add(m);\r\n                    i++;\r\n                }\r\n            }\r\n            // Single setLetter version\r\n            else {\r\n                let n = fractions.length - 1;\r\n                for (let F of fractions) {\r\n                    let m = new Monom()\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = `${inputStr}^${n}`\r\n                    this.add(m);\r\n                    n--;\r\n                }\r\n            }\r\n            return this;\r\n        } else {\r\n            return this.zero();\r\n        }\r\n    }\r\n\r\n    private genDisplay = (output?: string, forceSign?: boolean, wrapParentheses?: boolean, withAllMultSign?: boolean): string => {\r\n        let P: string = '';\r\n\r\n        for (const k of this._monoms) {\r\n            if (k.coefficient.value === 0) {\r\n                continue;\r\n            }\r\n\r\n            // The monom to be displayed\r\n            let m\r\n            if (withAllMultSign) {\r\n                m = k.plotFunction\r\n            } else {\r\n                m = (output === 'tex') ? k.tex : k.display\r\n            }\r\n\r\n            P += `${(k.coefficient.sign() === 1 && (P !== '' || forceSign === true)) ? '+' : ''}${m}`;\r\n        }\r\n\r\n        if (wrapParentheses === true && this.length > 1) {\r\n            if (output === 'tex') {\r\n                P = `\\\\left( ${P} \\\\right)`;\r\n            } else {\r\n                P = `(${P})`;\r\n            }\r\n        }\r\n\r\n        if (P === '') {\r\n            P = '0';\r\n        }\r\n        return P;\r\n    };\r\n\r\n    /**\r\n     * Main parse using a shutting yard class\r\n     * @param inputStr\r\n     */\r\n    private shutingYardToReducedPolynom = (inputStr: string): Polynom => {\r\n        // Get the RPN array of the current expression\r\n        const SY: Shutingyard = new Shutingyard().parse(inputStr);\r\n        const rpn: { token: string, tokenType: string }[] = SY.rpn;\r\n\r\n        // New version for reducing shuting yard.\r\n        this.zero()\r\n\r\n        let stack: Polynom[] = [],\r\n            monom: Monom = new Monom()\r\n\r\n        // Loop through the\r\n        for (const element of rpn) {\r\n            this.addToken(stack, element);\r\n        }\r\n\r\n        if (stack.length === 1) {\r\n            this.add(stack[0])\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    private multiplyByPolynom = (P: Polynom): Polynom => {\r\n        const M: Monom[] = [];\r\n        for (const m1 of this._monoms) {\r\n            for (const m2 of P.monoms) {\r\n                M.push(Monom.xmultiply(m1, m2));\r\n            }\r\n        }\r\n\r\n        this._monoms = M;\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.multiply(F);\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByInteger = (nb: number): Polynom => {\r\n        return this.multiplyByFraction(new Fraction(nb));\r\n    };\r\n\r\n    private multiplyByMonom = (M: Monom): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.multiply(M)\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n    private divideByInteger = (nb: number): Polynom => {\r\n        const nbF = new Fraction(nb);\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(nbF);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    private divideByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(F);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    private _factorize2ndDegree = (letter: string): Polynom[] => {\r\n        let P1: Polynom, P2: Polynom,\r\n            a, b, c, delta, x1, x2, factor;\r\n\r\n        // One variable only\r\n        if (this.numberOfVars === 1) {\r\n            a = this.monomByDegree(2, letter).coefficient;\r\n            b = this.monomByDegree(1, letter).coefficient;\r\n            c = this.monomByDegree(0, letter).coefficient;\r\n            delta = b.clone().pow(2).subtract(a.clone().multiply(c).multiply(4));\r\n\r\n            if (delta.isZero()) {\r\n                x1 = b.clone().opposed().divide(a.clone().multiply(2))\r\n                P1 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                P2 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                factor = a.divide(x1.denominator).divide(x1.denominator);\r\n\r\n                if (!factor.isOne()) {\r\n                    // TODO: Update new Polynom to accept anything...\r\n                    return [new Polynom(factor.display), P1, P2]\r\n                } else {\r\n                    return [P1, P2]\r\n                }\r\n            } else if (delta.isPositive() && delta.isSquare()) {\r\n                x1 = b.clone().opposed()\r\n                    .add(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n                x2 = b.clone().opposed()\r\n                    .subtract(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n\r\n                // (2x+5)(3x-2)\r\n                // 6x^2+11x-10\r\n                // a = 6, b = 11, c = -10\r\n                // delta = 121-4*6*(-10) = 361= 19^2\r\n                // x1 = (-11 + 19)  / 12 = 8/12 = 2/3\r\n                // x2 = (-11 - 19)  / 12 = -30/12 = -5/2\r\n                factor = a.divide(x1.denominator).divide(x2.denominator);\r\n                if (factor.isOne()) {\r\n                    return [\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n                } else {\r\n                    return [\r\n                        new Polynom(factor.display),\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n\r\n                }\r\n            } else {\r\n                // No solution possible - return the complete value.\r\n                return [this.clone()]\r\n            }\r\n        } else {\r\n            // If multiple variables, only handle perfect squares...\r\n            a = this.monomByDegree(2, letter);\r\n            b = this.monomByDegree(1, letter);\r\n            c = this.monomByDegree(0, letter);\r\n\r\n\r\n            if (a.isLiteralSquare() && c.isLiteralSquare()) {\r\n                // Check the middle item is same as...\r\n                if (b.clone().pow(2).isSameAs(a.clone().multiply(c))) {\r\n                    // Determine if the coefficient values matches.\r\n\r\n                    // Search 4 values (r, s, t, u) that matches:\r\n                    // (r X + s Y)(t X + u Y) = rt X^2 + (ru + st) XY + su Y^2\r\n\r\n                    let xPolynom = new Polynom('x', a.coefficient, b.coefficient, c.coefficient);\r\n                    let xFactors = xPolynom._factorize2ndDegree('x');\r\n\r\n                    let factors = [], xyzPolynom: Polynom;\r\n\r\n                    if (xFactors.length >= 2) {\r\n                        for (let p of xFactors) {\r\n                            if (p.degree().isZero()) {\r\n                                factors.push(p.clone())\r\n                            } else {\r\n                                xyzPolynom = p.clone();\r\n                                xyzPolynom.monoms[0].literal = a.literalSqrt\r\n                                xyzPolynom.monoms[1].literal = c.literalSqrt\r\n                                factors.push(xyzPolynom.clone())\r\n                            }\r\n                        }\r\n                        return factors\r\n                    }\r\n                }\r\n            }\r\n\r\n            return [this.clone()]\r\n        }\r\n    }\r\n\r\n    private _factorizeByGroups = (): Polynom[] => {\r\n        // TODO: Factorize by groups.\r\n        return [];\r\n    }\r\n}\r\n","/**\r\n * Rational polynom module contains everything necessary to handle rational polynoms.\r\n * @module Polynom\r\n */\r\n\r\nimport {IEuclidian, Polynom} from \"./polynom\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {literalType} from \"./monom\";\r\nimport {PARTICULAR_SOLUTION} from \"./equation\";\r\nimport {RationalStudy} from \"./study/rationalStudy\";\r\n\r\n/**\r\n * Rational class can handle rational polynoms\r\n */\r\nexport class Rational {\r\n    private _denominator: Polynom;\r\n    private _numerator: Polynom;\r\n    private _rawString: string;\r\n\r\n    /**\r\n     *\r\n     * @param numerator\r\n     * @param denominator\r\n     */\r\n    constructor(numerator?: Polynom | string, denominator?: Polynom | string) {\r\n        if (numerator instanceof Polynom) {\r\n            this._numerator = numerator.clone()\r\n        } else if (typeof numerator === 'string') {\r\n            this._numerator = new Polynom(numerator)\r\n        } else {\r\n            this._numerator = new Polynom()\r\n        }\r\n\r\n        if (denominator instanceof Polynom) {\r\n            this._denominator = denominator.clone()\r\n        } else if (typeof denominator === 'string') {\r\n            this._denominator = new Polynom(denominator)\r\n        } else {\r\n            this._denominator = new Polynom()\r\n        }\r\n\r\n    }\r\n\r\n    get numerator(): Polynom {\r\n        return this._numerator\r\n    }\r\n\r\n    get denominator(): Polynom {\r\n        return this._denominator\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\frac{ ${this._numerator.tex} }{ ${this._denominator.tex} }`;\r\n    }\r\n\r\n    get texFactors(): string {\r\n        return `\\\\frac{ ${this._numerator.texFactors} }{ ${this._denominator.texFactors} }`\r\n    }\r\n\r\n    get plotFunction(): string {\r\n        return `(${this._numerator.plotFunction})/(${this._denominator.plotFunction})`\r\n    }\r\n\r\n    clone = (): Rational => {\r\n        return new Rational(\r\n            this._numerator.clone(),\r\n            this._denominator.clone()\r\n        )\r\n    }\r\n\r\n    domain = (): string => {\r\n        let zeroes = this._denominator.getZeroes();\r\n\r\n        if (zeroes.length === 0 || zeroes[0].tex === PARTICULAR_SOLUTION.real) {\r\n            return PARTICULAR_SOLUTION.varnothing\r\n        } else if (zeroes[0].tex === PARTICULAR_SOLUTION.varnothing) {\r\n            return PARTICULAR_SOLUTION.real\r\n        } else {\r\n            return '\\\\mathbb{R}\\\\setminus\\\\left\\\\{' +\r\n                zeroes.map(x => x.tex).join(';') + '\\\\right\\\\}'\r\n        }\r\n    }\r\n\r\n    amplify = (P: Polynom): Rational => {\r\n        this._numerator.multiply(P);\r\n        this._denominator.multiply(P);\r\n\r\n        return this;\r\n    }\r\n\r\n    derivative = (letter?: string): Rational => {\r\n        let N = this._numerator.clone(),\r\n            D = this._denominator.clone(),\r\n            dN = N.clone().derivative(letter),\r\n            dD = D.clone().derivative(letter)\r\n\r\n        this._numerator = dN.clone().multiply(D).subtract(N.clone().multiply(dD))\r\n        this._denominator = D.clone().pow(2)\r\n\r\n        return this\r\n    }\r\n\r\n    simplify = (P: Polynom): Rational => {\r\n        let NumeratorEuclidien = this._numerator.euclidian(P);\r\n        if (!NumeratorEuclidien.reminder.isZero()) {\r\n            return this;\r\n        }\r\n\r\n        let DenominatorEuclidien = this._denominator.euclidian(P);\r\n        if (!DenominatorEuclidien.reminder.isZero()) {\r\n            return this;\r\n        }\r\n\r\n        this._numerator = NumeratorEuclidien.quotient;\r\n        this._denominator = DenominatorEuclidien.quotient;\r\n        return this;\r\n    }\r\n\r\n    reduce = (): Rational => {\r\n        this._numerator.factorize();\r\n        for (let f of this._numerator.factors) {\r\n            this.simplify(f);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    opposed = (): Rational => {\r\n        this._numerator.opposed();\r\n        return this;\r\n    }\r\n\r\n    add = (R: Rational): Rational => {\r\n        // 1. Make sure both rational are at the same denominator\r\n        // 2. Add the numerators.\r\n        // 3. Simplify\r\n\r\n        // Store the adding denominator\r\n        let denominator = this._denominator.clone()\r\n\r\n        // Amplif the main rational polynom by the adding denominator\r\n        this.amplify(R._denominator)\r\n\r\n        // Add to the numerator the adding value...\r\n        this._numerator.add(R._numerator.clone().multiply(denominator));\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (R: Rational): Rational => {\r\n        return this.add(R.clone().opposed())\r\n    }\r\n\r\n    euclidian = (): IEuclidian => {\r\n        return this._numerator.euclidian(this._denominator)\r\n    }\r\n\r\n    // TODO : where and how is used limits ?\r\n    limits = (value: Fraction | number, offset?: string, letter?: string): Fraction => {\r\n        if (value === Infinity || value === -Infinity) {\r\n            let {quotient, reminder} = this._numerator.clone().euclidian(this._denominator)\r\n\r\n            // quotient is positive => it will be infinite.\r\n            if (quotient.degree(letter).isStrictlyPositive()) {\r\n                return value === Infinity ? quotient.limitToInfinity(letter) : quotient.limitToNegativeInfinity(letter)\r\n                // return quotient.monomByDegree(undefined, letter).coefficient.sign()===1?(new Fraction()).infinite():(new Fraction()).infinite().opposed()\r\n            } else {\r\n                return quotient.monomByDegree(undefined, letter).coefficient\r\n            }\r\n        } else {\r\n            let evalValues: literalType = {},\r\n                evalValuesOffset: literalType = {},\r\n                theLimit: Fraction | number,\r\n                theSign: number,\r\n                FR = this.clone().reduce()\r\n\r\n            evalValues[letter === undefined ? 'x' : letter] = new Fraction(value)\r\n\r\n            if (offset !== 'above' && offset !== 'below') {\r\n                theLimit = FR._numerator.evaluate(evalValues)\r\n                    .divide(FR._denominator.evaluate(evalValues))\r\n\r\n                return theLimit.isInfinity() ? theLimit.abs() : theLimit\r\n            } else {\r\n                if (offset === 'above') {\r\n                    evalValuesOffset[letter === undefined ? 'x' : letter] = (new Fraction(value)).add(0.000001)\r\n                } else if (offset === 'below') {\r\n                    evalValuesOffset[letter === undefined ? 'x' : letter] = (new Fraction(value)).subtract(0.000001)\r\n                }\r\n\r\n                theLimit = FR._numerator.evaluate(evalValues)\r\n                    .divide(FR._denominator.evaluate(evalValues))\r\n                theSign = FR._numerator.evaluate(evalValuesOffset)\r\n                    .divide(FR._denominator.evaluate(evalValuesOffset)).sign()\r\n\r\n                if (theLimit.isInfinity()) {\r\n                    return theSign === 1 ? theLimit.abs() : theLimit.abs().opposed()\r\n                } else {\r\n                    return theLimit\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    evaluate = (values: literalType | Fraction | number): Fraction => {\r\n        const r = new Fraction().zero();\r\n\r\n        let N = this._numerator.evaluate(values),\r\n            D = this._denominator.evaluate(values)\r\n\r\n        return N.divide(D)\r\n    };\r\n\r\n    evaluateAsNumeric = (values: { [Key: string]: number } | number): number => {\r\n        return this._numerator.evaluateAsNumeric(values) / this._denominator.evaluateAsNumeric(values)\r\n    }\r\n\r\n    study = (): RationalStudy => {\r\n        return new RationalStudy(this)\r\n    }\r\n}\r\n","/**\r\n * Rational polynom module contains everything necessary to handle rational polynoms.\r\n * @module Polynom\r\n */\r\n\r\nimport {Rational} from \"./rational\";\r\nimport {ISolution} from \"./equation\";\r\nimport {Polynom} from \"./polynom\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Point} from \"../geometry/point\";\r\nimport {NumExp} from \"../expressions/numexp\";\r\n\r\nexport type StudyableFunction = Rational\r\n\r\n\r\nexport enum ZEROTYPE {\r\n    ZERO = 'z',\r\n    DEFENCE = 'd',\r\n    NOTHING = 't'\r\n}\r\n\r\nexport interface IZero extends ISolution {\r\n    extrema: FUNCTION_EXTREMA,\r\n    type: ZEROTYPE\r\n}\r\n\r\nexport enum ASYMPTOTE {\r\n    VERTICAL = \"av\",\r\n    HORIZONTAL = \"ah\",\r\n    SLOPE = \"ao\",\r\n    HOLE = \"hole\"\r\n}\r\n\r\nexport enum ASYMPTOTE_POSITION {\r\n    \"LT\"=\"LT\",\r\n    \"RT\"=\"RT\",\r\n    \"LB\"=\"LB\",\r\n    \"RB\"=\"RB\"\r\n}\r\nexport interface IAsymptote {\r\n    fx: Polynom,\r\n    deltaX: StudyableFunction\r\n    limits: string,\r\n    tex: string,\r\n    type: ASYMPTOTE,\r\n    zero: IZero,\r\n    tableOfSign: ITableOfSigns,\r\n    position: ASYMPTOTE_POSITION[]\r\n}\r\n\r\nexport enum FUNCTION_EXTREMA {\r\n    MIN = \"min\",\r\n    MAX = \"max\",\r\n    FLAT = \"flat\",\r\n    NOTHING = \"\"\r\n}\r\n\r\nexport interface IExtrema {\r\n    tex: {\r\n        x: string,\r\n        y: string\r\n    },\r\n    type: FUNCTION_EXTREMA,\r\n    value: {\r\n        x: number,\r\n        y: number\r\n    }\r\n\r\n}\r\n\r\nexport interface ITableOfSigns {\r\n    extremes: { [Key: string]: IExtrema },\r\n    factors: Polynom[],\r\n    fx: StudyableFunction,\r\n    signs: (string[])[],\r\n    type: TABLE_OF_SIGNS\r\n    zeroes: IZero[],\r\n    tex: string\r\n}\r\n\r\nexport enum TABLE_OF_SIGNS {\r\n    SIGNS = \"signs\",\r\n    GROWS = \"grows\",\r\n    VARIATIONS = \"variations\"\r\n}\r\n\r\n/**\r\n * The study class is a \"function study\" class that will get:\r\n * fx               : get the function\r\n * domain           : string\r\n * zeroes           : Object (tex, IZero)\r\n * signs            : table of signs + tex output  using tkz-tab\r\n * av               : vertical asymptotic\r\n * ah               : horizontal asymptotic\r\n * ao               : obliques\r\n * deltaX           : position relative\r\n * dx               : derivative\r\n * grows            : growing table + tex output  using tkz-tab\r\n * ddx              : dérivée seconde\r\n * variations       : variation table + tex output  using tkz-tab\r\n */\r\nexport class Study {\r\n    fx: StudyableFunction\r\n    private _asymptotes: IAsymptote[]\r\n    private _derivative: ITableOfSigns\r\n    private _signs: ITableOfSigns\r\n    private _variations: ITableOfSigns\r\n    private _zeroes: IZero[]\r\n\r\n    constructor(fx: StudyableFunction) {\r\n        this.fx = fx\r\n        this.makeStudy()\r\n        return this\r\n    }\r\n\r\n    get zeroes(): IZero[] {\r\n        return this._zeroes;\r\n    }\r\n\r\n    get domain(): string {\r\n        return this.fx.domain()\r\n    }\r\n\r\n    get signs(): ITableOfSigns {\r\n        return this._signs;\r\n    }\r\n\r\n    get asymptotes(): IAsymptote[] {\r\n        return this._asymptotes;\r\n    }\r\n\r\n    get derivative(): ITableOfSigns {\r\n        return this._derivative;\r\n    }\r\n\r\n    get texSigns(): string {\r\n        return this._makeTexFromTableOfSigns(this._signs)\r\n    }\r\n\r\n    get texGrows(): string {\r\n        return this._makeTexFromTableOfSigns(this._derivative)\r\n    }\r\n\r\n    get texVariations(): string {\r\n        return this._makeTexFromTableOfSigns(this._variations)\r\n    }\r\n\r\n    makeStudy = (): void => {\r\n        this._zeroes = this.makeZeroes()\r\n\r\n        this._signs = this.makeSigns()\r\n\r\n        this._asymptotes = this.makeAsymptotes()\r\n\r\n        this._derivative = this.makeDerivative()\r\n\r\n        this._variations = this.makeVariation()\r\n\r\n        this._signs.tex = this.texSigns\r\n\r\n        this._derivative.tex = this.texGrows\r\n\r\n        this._variations.tex = this.texVariations\r\n\r\n    };\r\n\r\n    indexOfZero = (zeroes: IZero[], zero: IZero | ISolution): number => {\r\n        for (let i = 0; i < zeroes.length; i++) {\r\n            if (zeroes[i].tex === zero.tex) {\r\n                return i\r\n            }\r\n        }\r\n        return -1\r\n    };\r\n\r\n    makeOneLineForSigns = (factor: Polynom, zeroes: IZero[], zeroSign: ZEROTYPE): string[] => {\r\n        let oneLine: string[] = [],\r\n            currentZero = factor.getZeroes().map(x => x.tex)\r\n\r\n        // First +/- sign, before the first zero\r\n        oneLine.push('')\r\n        if (factor.degree().isZero()) {\r\n            oneLine.push(factor.monoms[0].coefficient.sign() === 1 ? '+' : '-')\r\n        } else {\r\n            oneLine.push(factor.evaluate(zeroes[0].value - 1).sign() === 1 ? '+' : '-')\r\n        }\r\n\r\n        for (let i = 0; i < zeroes.length; i++) {\r\n            // Add the zero if it's the current one\r\n            oneLine.push(currentZero.includes(zeroes[i].tex) ? zeroSign : ZEROTYPE.NOTHING)\r\n\r\n            // + / - sign after the current zero\r\n            if (i < zeroes.length - 1) {\r\n                oneLine.push(factor.evaluate((zeroes[i].value + zeroes[i + 1].value) / 2).sign() === 1 ? '+' : '-')\r\n            } else if (i === zeroes.length - 1) {\r\n                oneLine.push(factor.evaluate(zeroes[i].value + 1).sign() === 1 ? '+' : '-')\r\n            }\r\n\r\n        }\r\n        oneLine.push('')\r\n\r\n        return oneLine\r\n    }\r\n\r\n    makeSignsResult = (signs: (string[])[]): string[] => {\r\n\r\n        // Initialize the result line with the first line of the signs table\r\n        let resultLine: string[] = signs[0].map((x, index) => {\r\n            if (index === 0 || index === signs[0].length - 1) {\r\n                return ''\r\n            }\r\n\r\n            if (index % 2 === 0) {\r\n                return 't'\r\n            }\r\n\r\n            return '+'\r\n        })\r\n\r\n        // Go through each lines (except the first)\r\n        for (let current of signs) {\r\n\r\n            for (let i = 0; i < current.length; i++) {\r\n                if (i % 2 === 0) {\r\n                    // t, z or d\r\n                    if (resultLine[i] === 'd') {\r\n                        continue\r\n                    }\r\n                    if (current[i] !== 't') {\r\n                        resultLine[i] = current[i]\r\n                    }\r\n                } else {\r\n                    // + or -\r\n                    if (current[i] === '-') {\r\n                        resultLine[i] = resultLine[i] === '+' ? '-' : '+'\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return resultLine\r\n    }\r\n\r\n    makeGrowsResult = (tos: ITableOfSigns): { growsLine: string[], extremes: { [Key: string]: IExtrema } } => {\r\n\r\n        // Use the last line (=> resultLine) to grab the necessary information\r\n        let signsAsArray = Object.values(tos.signs),\r\n            resultLine = signsAsArray[signsAsArray.length - 1],\r\n            growsLine: string[] = [],\r\n            extremes: { [Key: string]: IExtrema } = {},\r\n            zeroes = tos.zeroes\r\n\r\n        // Get the extremes\r\n        for (let i = 0; i < zeroes.length; i++) {\r\n\r\n            // Get the corresponding item in the resultLine.\r\n            let pos = 2 * i + 2\r\n            if (resultLine[pos] === 'z') {\r\n\r\n                // It's a zero. Get the coordinates\r\n                let x: number, y: number, zero = zeroes[i].exact,\r\n                    pt: Point,\r\n                    xTex: string, yTex: string,\r\n                    pointType: FUNCTION_EXTREMA\r\n\r\n                // TODO: NumExp should parse something that isn't yet plotFunction\r\n                let exp = new NumExp(this.fx.plotFunction)\r\n\r\n                if (zero instanceof Fraction) {\r\n                    let value: Fraction = zero,\r\n                        evalY = this.fx.evaluate(value)\r\n\r\n                    x = zero.value\r\n                    y = evalY.value\r\n                    xTex = zero.tex\r\n                    yTex = evalY.tex\r\n                } else {\r\n                    x = zeroes[i].value\r\n                    y = exp.evaluate({x})\r\n\r\n                    xTex = x.toFixed(2)\r\n                    yTex = y.toFixed(2)\r\n                }\r\n\r\n                // Determine the type of the zero.\r\n                if (resultLine[pos - 1] === resultLine[pos + 1]) {\r\n                    pointType = FUNCTION_EXTREMA.FLAT\r\n                } else if (resultLine[pos - 1] === '+') {\r\n                    pointType = FUNCTION_EXTREMA.MAX\r\n                } else {\r\n                    pointType = FUNCTION_EXTREMA.MIN\r\n\r\n                }\r\n\r\n                // Add the point to the list\r\n                extremes[zeroes[i].tex] = {\r\n                    type: pointType,\r\n                    tex: {x: xTex, y: yTex},\r\n                    value: {x, y}\r\n                }\r\n            }\r\n        }\r\n\r\n        // Create the grows line, based on tkz-tab\r\n        // \\tkzTabLine{  ,  +  ,  z    ,  -  ,  d  ,  -  ,  z  ,  +  ,  }\r\n        // \\tkzTabVar{     -/  , +/$3$ ,       -D+/ , -/$1$  , +/  }\r\n        growsLine.push(resultLine[1] === '+' ? '-/' : '+/')\r\n        for (let i = 1; i < resultLine.length - 1; i++) {\r\n            if (resultLine[i] === \"z\") {\r\n                let extr = extremes[zeroes[(i - 2) / 2].tex]\r\n\r\n                growsLine.push(`${resultLine[i - 1]}/\\\\(${extr.type}(${extr.tex.x};${extr.tex.y})\\\\)`)\r\n            } else if (resultLine[i] === 'd') {\r\n                growsLine.push(`${resultLine[i - 1]}D${resultLine[i + 1] === '+' ? '-' : '+'}/`)\r\n            }\r\n        }\r\n        growsLine.push(`${resultLine[resultLine.length - 2]}/`)\r\n\r\n        return {growsLine, extremes}\r\n    }\r\n\r\n    makeVariationsResult = (tos: ITableOfSigns): { varsLine: string[], extremes: { [Key: string]: IExtrema } } => {\r\n        // TODO: make variations result is not yet implemented.\r\n        let extremes = {},\r\n            varsLine: string[] = []\r\n        return {varsLine, extremes}\r\n    }\r\n\r\n    makeZeroes(): IZero[] {\r\n        return []\r\n    };\r\n\r\n    makeSigns(): ITableOfSigns {\r\n        return {\r\n            type: TABLE_OF_SIGNS.SIGNS,\r\n            fx: null,\r\n            factors: [],\r\n            zeroes: [],\r\n            signs: [],\r\n            extremes: {},\r\n            tex: ''\r\n        }\r\n    };\r\n\r\n    makeAsymptotes(): IAsymptote[] {\r\n        return []\r\n    }\r\n\r\n    makeDerivative(): ITableOfSigns {\r\n        return {\r\n            type: TABLE_OF_SIGNS.GROWS,\r\n            fx: null,\r\n            factors: [],\r\n            zeroes: [],\r\n            signs: [],\r\n            extremes: {},\r\n            tex: ''\r\n        }\r\n    }\r\n\r\n    makeVariation(): ITableOfSigns {\r\n        return {\r\n            type: TABLE_OF_SIGNS.VARIATIONS,\r\n            fx: null,\r\n            factors: [],\r\n            zeroes: [],\r\n            signs: [],\r\n            extremes: {},\r\n            tex: ''\r\n        }\r\n    }\r\n\r\n    private _makeTexFromTableOfSigns = (tos: ITableOfSigns): string => {\r\n        let factors = tos.factors.map(x => `\\\\(${x.tex}\\\\)/1`),\r\n            factorsFx = \"\\\\(fx\\\\)/1.2\",\r\n            zeroes = tos.zeroes\r\n\r\n        // Add the last lines \"label\"\r\n        if (tos.type === TABLE_OF_SIGNS.GROWS) {\r\n            factorsFx = \"\\\\(f'(x)\\\\)/1.2,\\\\(f(x)\\\\)/2\"\r\n        } else if (tos.type === TABLE_OF_SIGNS.VARIATIONS) {\r\n            factorsFx = \"\\\\(f''(x)\\\\)/1.2,\\\\(f(x)\\\\)/2\"\r\n        }\r\n\r\n        // Create the tikzPicture header\r\n        let tex = `\\\\begin{tikzpicture}\r\n\\\\tkzTabInit[lgt=3,espcl=2,deltacl=0]{/1.2,${factors.join(',')},/.1,${factorsFx} }{{\\\\scriptsize \\\\hspace{1cm} \\\\(-\\\\infty\\\\)},\\\\(${zeroes.map(x => x.tex).join('\\\\),\\\\(')}\\\\),{\\\\scriptsize \\\\hspace{-1cm} \\\\(+\\\\infty\\\\)}}`\r\n\r\n        let pos\r\n        for (pos = 0; pos < tos.factors.length; pos++) {\r\n            tex += (`\\n\\\\tkzTabLine{${tos.signs[pos].join(',')}}`)\r\n        }\r\n\r\n        // Add the result line\r\n        tex += (`\\n\\\\tkzTabLine{${tos.signs[pos].join(',')}}`)\r\n        // Add the grows / vars line\r\n        if (tos.type === TABLE_OF_SIGNS.GROWS) {\r\n            tex += (`\\n\\\\tkzTabVar{${tos.signs[pos + 1].join(',')}}`)\r\n        } else if (tos.type === TABLE_OF_SIGNS.VARIATIONS) {\r\n            // TODO: Check variations table for as tex\r\n            tex += (`\\n\\\\tkzTabVar{${tos.signs[pos + 1].join(',')}}`)\r\n        }\r\n\r\n        tex += `\\n\\\\end{tikzpicture}`\r\n\r\n        return tex\r\n    }\r\n\r\n    drawCode = (): string => {\r\n        // Function as string\r\n        let code = `f(x)=${this.fx.plotFunction}`\r\n\r\n        // Asymptotes\r\n        let i: number = 1\r\n        this.asymptotes.forEach(asymptote => {\r\n            if (asymptote.type === ASYMPTOTE.VERTICAL) {\r\n                code += `\\nav_${i}=line x=${asymptote.zero.value}->red,dash`\r\n                i++\r\n            } else if (asymptote.type === ASYMPTOTE.HORIZONTAL) {\r\n                code += `\\nah=line y=${asymptote.fx.monoms[0].coefficient.value}->orange,dash`\r\n            } else if (asymptote.type === ASYMPTOTE.SLOPE) {\r\n                code += `\\nao=line y=${asymptote.fx.plotFunction}->red,dash`\r\n            }\r\n            i++\r\n        })\r\n\r\n        // Extremes\r\n        for (let zero in this.derivative.extremes) {\r\n            let extreme = this.derivative.extremes[zero]\r\n\r\n            code += `\\nM_${i}(${extreme.value.x},${extreme.value.y})*`\r\n            i++\r\n        }\r\n\r\n        // Zeroes\r\n        this.zeroes.forEach(zero => {\r\n            if (zero.type === ZEROTYPE.ZERO) {\r\n                code += `\\nZ_${i}(${zero.value},0)*`\r\n                i++\r\n            }\r\n        })\r\n\r\n        return code\r\n    }\r\n}\r\n","/**\r\n * The study class is a \"function study\" class that will get:\r\n * fx               : get the function\r\n * domain           : string\r\n * zeroes           : Object (tex, IZero)\r\n * signs            : table of signs + tex output  using tkz-tab\r\n * av               : vertical asymptotic\r\n * ah               : horizontal asymptotic\r\n * ao               : obliques\r\n * deltaX           : position relative\r\n * dx               : derivative\r\n * grows            : growing table + tex output  using tkz-tab\r\n * ddx              : dérivée seconde\r\n * variations       : variation table + tex output  using tkz-tab\r\n */\r\nimport {\r\n    ASYMPTOTE,\r\n    ASYMPTOTE_POSITION,\r\n    FUNCTION_EXTREMA,\r\n    IAsymptote,\r\n    ITableOfSigns,\r\n    IZero,\r\n    Study,\r\n    StudyableFunction,\r\n    TABLE_OF_SIGNS,\r\n    ZEROTYPE\r\n} from \"../study\";\r\nimport {Rational} from \"../rational\";\r\nimport {Fraction} from \"../../coefficients/fraction\";\r\nimport {Polynom} from \"../polynom\";\r\n\r\nexport class RationalStudy extends Study {\r\n    constructor(fx: StudyableFunction) {\r\n        super(fx)\r\n\r\n        return this\r\n    }\r\n\r\n    makeZeroes(): IZero[] {\r\n        return this._getZeroes(this.fx)\r\n    };\r\n\r\n    makeSigns(): ITableOfSigns {\r\n        return this._getSigns(this.fx, this.zeroes)\r\n    };\r\n\r\n    makeAsymptotes(): IAsymptote[] {\r\n        const reduced: Rational = this.fx.clone().reduce()\r\n\r\n        // Vertical\r\n        let asymptotes: IAsymptote[] = []\r\n        this.zeroes.filter(x => x.type === ZEROTYPE.DEFENCE).forEach(zero => {\r\n            // Check if it's a hole or an asymptote\r\n            let Ztype = ASYMPTOTE.VERTICAL,\r\n                tex = `x=${zero.tex}`\r\n\r\n            // Check if it's a hole: the reduced polynom should not be null\r\n            if (zero.exact instanceof Fraction) {\r\n                if (reduced.denominator.evaluate(zero.exact).isNotZero()) {\r\n                    Ztype = ASYMPTOTE.HOLE\r\n                    tex = `(${zero.tex};${reduced.evaluate(zero.exact).tex})`\r\n                }\r\n            } else {\r\n                if (reduced.denominator.evaluate(zero.value).isNotZero()) {\r\n                    Ztype = ASYMPTOTE.HOLE\r\n                    tex = `(${zero.tex};${reduced.evaluate(zero.value).tex})`\r\n                }\r\n            }\r\n\r\n            // Get the position before and after the asymptote.\r\n            const delta = 0.000001\r\n            let before = this.fx.evaluateAsNumeric(zero.value-delta),\r\n                after = this.fx.evaluateAsNumeric(zero.value+delta),\r\n                position:ASYMPTOTE_POSITION[] = [],\r\n                pm = \"\"\r\n\r\n            if(after < -10000){\r\n                position.push(ASYMPTOTE_POSITION.RB)\r\n                pm += \"m\"\r\n            }else if(after>10000){\r\n                position.push(ASYMPTOTE_POSITION.RT)\r\n                pm += \"p\"\r\n            }\r\n\r\n            if(before < -10000){\r\n                position.push(ASYMPTOTE_POSITION.LB)\r\n                pm += \"m\"\r\n            }else if(before>10000){\r\n                position.push(ASYMPTOTE_POSITION.LT)\r\n                pm += \"p\"\r\n            }\r\n\r\n            // Left and right are to infinity\r\n            // TODO: handle the case were one side of the asymptote isn't infinity (not possible in rational study?!)\r\n            if(pm===\"pp\"){pm=\"+\"}\r\n            else if(pm===\"mm\"){pm=\"-\"}\r\n            else{pm=`\\\\${pm}`}\r\n\r\n            asymptotes.push({\r\n                fx: null,\r\n                type: Ztype,\r\n                tex: tex,\r\n                zero: zero,\r\n                limits: `\\\\lim_{x\\\\to${zero.tex} }\\\\ f(x) = ${pm}\\\\infty`,\r\n                deltaX: null,\r\n                tableOfSign: null,\r\n                position\r\n            })\r\n        })\r\n\r\n        // Sloped asymptote\r\n        let NDegree = this.fx.numerator.degree(),\r\n            DDegree = this.fx.denominator.degree()\r\n        if (NDegree.isEqual(DDegree)) {\r\n            let H = this.fx.numerator.monomByDegree().coefficient.clone().divide(this.fx.denominator.monomByDegree().coefficient),\r\n                Htex = H.tex\r\n\r\n            let {reminder} = reduced.euclidian(),\r\n                deltaX = new Rational(reminder, reduced.denominator)\r\n\r\n            // Determine the position above or below on the left / right of the asymptote.\r\n            asymptotes.push({\r\n                fx: new Polynom(H),\r\n                type: ASYMPTOTE.HORIZONTAL,\r\n                tex: `y=${Htex}`,\r\n                zero: null,\r\n                limits: `\\\\lim_{x\\\\to\\\\infty}\\\\ f(x) = ${Htex}`,\r\n                deltaX,\r\n                tableOfSign: this._getSigns(deltaX),\r\n                position: this._getHorizontalAsymptoteRelativePositon(deltaX)\r\n            })\r\n        } else if (DDegree.greater(NDegree)) {\r\n            asymptotes.push({\r\n                fx: new Polynom('0'),\r\n                type: ASYMPTOTE.HORIZONTAL,\r\n                tex: `y=0`,\r\n                zero: null,\r\n                limits: `\\\\lim_{x\\\\to\\\\infty}\\\\ f(x) = ${0}`,\r\n                deltaX: null,\r\n                tableOfSign: null,\r\n                position: this._getHorizontalAsymptoteRelativePositon(this.fx)\r\n            })\r\n        } else if (NDegree.value - 1 === DDegree.value) {\r\n            // Calculate the slope\r\n            let {quotient, reminder} = reduced.euclidian(),\r\n                deltaX = new Rational(reminder, reduced.denominator)\r\n\r\n            asymptotes.push({\r\n                fx: quotient.clone(),\r\n                type: ASYMPTOTE.SLOPE,\r\n                tex: `y=${quotient.tex}`,\r\n                zero: null,\r\n                limits: ``,\r\n                deltaX: new Rational(reminder, reduced.denominator),\r\n                tableOfSign: this._getSigns(deltaX),\r\n                position: this._getHorizontalAsymptoteRelativePositon(deltaX)\r\n            })\r\n        }\r\n\r\n        return asymptotes\r\n    };\r\n\r\n    _getHorizontalAsymptoteRelativePositon(deltaX: Rational, delta: number = 1000000): ASYMPTOTE_POSITION[]{\r\n\r\n        let position:ASYMPTOTE_POSITION[] = [],\r\n            before = deltaX.evaluateAsNumeric(-delta),\r\n            after = deltaX.evaluateAsNumeric(delta)\r\n\r\n        if(before>=0){\r\n            position.push(ASYMPTOTE_POSITION.LT)\r\n        }else {\r\n            position.push(ASYMPTOTE_POSITION.LB)\r\n        }\r\n\r\n        if(after>=0){\r\n            position.push(ASYMPTOTE_POSITION.RT)\r\n        }else {\r\n            position.push(ASYMPTOTE_POSITION.RB)\r\n        }\r\n\r\n        return position\r\n    }\r\n\r\n    makeDerivative(): ITableOfSigns {\r\n        let dx = this.fx.clone().derivative(),\r\n            tos = this._getSigns(dx, this._getZeroes(dx), TABLE_OF_SIGNS.GROWS)\r\n\r\n        let result = this.makeGrowsResult(tos)\r\n        tos.signs.push(result.growsLine)\r\n        tos.extremes = result.extremes\r\n        return tos\r\n    };\r\n\r\n    makeVariation(): ITableOfSigns {\r\n        // Get the zeroes, make signs.\r\n        let dx = this.derivative.fx.clone().derivative(),\r\n            tos = this._getSigns(dx, this._getZeroes(dx), TABLE_OF_SIGNS.VARIATIONS)\r\n\r\n        let result = this.makeVariationsResult(tos)\r\n        tos.signs.push(result.varsLine)\r\n        tos.extremes = result.extremes\r\n        return tos\r\n    };\r\n\r\n    private _getZeroes(fx: StudyableFunction) {\r\n        // All zeroes.\r\n        let zeroes: IZero[] = []\r\n\r\n        fx.numerator.getZeroes().filter(x => !isNaN(x.value)).forEach(z => {\r\n            // add the item\r\n            zeroes.push({\r\n                tex: z.tex,\r\n                value: z.value,\r\n                exact: z.exact,\r\n                extrema: FUNCTION_EXTREMA.NOTHING,\r\n                type: ZEROTYPE.ZERO\r\n            })\r\n        })\r\n\r\n        fx.denominator.getZeroes().filter(x => !isNaN(x.value)).forEach(z => {\r\n            let idx = this.indexOfZero(zeroes, z)\r\n\r\n            if (idx !== -1) {\r\n                zeroes[idx].type = ZEROTYPE.DEFENCE\r\n            } else {\r\n                // Add the item\r\n                zeroes.push({\r\n                    tex: z.tex,\r\n                    value: z.value,\r\n                    exact: z.exact,\r\n                    extrema: FUNCTION_EXTREMA.NOTHING,\r\n                    type: ZEROTYPE.DEFENCE\r\n                })\r\n            }\r\n        })\r\n\r\n        // sort all zeroes\r\n        zeroes.sort((a, b) => a.value - b.value)\r\n\r\n        return zeroes\r\n    }\r\n\r\n    private _getSigns(fx: Rational, zeroes?: IZero[], typeOfTable?: TABLE_OF_SIGNS): ITableOfSigns {\r\n        // Factorize the rational\r\n        let signs: (string[])[] = [],\r\n            factors: Polynom[] = []\r\n\r\n        if (zeroes === undefined) {\r\n            zeroes = this._getZeroes(fx)\r\n        }\r\n\r\n        fx.numerator.factors.forEach(factor => {\r\n            signs.push(this.makeOneLineForSigns(factor, zeroes, ZEROTYPE.ZERO))\r\n            factors.push(factor.clone())\r\n        })\r\n\r\n        fx.denominator.factors.forEach(factor => {\r\n            signs.push(this.makeOneLineForSigns(factor, zeroes, ZEROTYPE.DEFENCE))\r\n            factors.push(factor.clone())\r\n        })\r\n\r\n        signs.push(this.makeSignsResult(signs))\r\n\r\n        return {\r\n            type: typeOfTable,\r\n            fx,\r\n            factors,\r\n            zeroes,\r\n            signs,\r\n            extremes: {},\r\n            tex: ''\r\n        }\r\n    }\r\n}\r\n","import {Numeric} from \"../numeric\";\r\n\r\nexport type FractionParsingType = number | string | Fraction\r\n\r\n/**\r\n * The fraction class make possible to handle\r\n * TODO: Write the documentation correctly.\r\n * \\\\(\\frac{a}{b}\\\\) or \\\\[\\frac{a}{b}\\\\]  values.\r\n */\r\nexport class Fraction {\r\n    private _denominator: number;\r\n    private _numerator: number;\r\n\r\n    constructor(value?: unknown, denominatorOrPeriodic?: number) {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n\r\n        if (value !== undefined) {\r\n            this.parse(value, denominatorOrPeriodic);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n\r\n    get numerator(): number {\r\n        return this._numerator;\r\n    }\r\n\r\n    set numerator(value: number) {\r\n        this._numerator = value;\r\n    }\r\n\r\n    get denominator(): number {\r\n        return this._denominator;\r\n    }\r\n\r\n    set denominator(value: number) {\r\n        this._denominator = value;\r\n    }\r\n\r\n    get value(): number {\r\n        return this._numerator / this._denominator;\r\n    }\r\n\r\n    // Display getter\r\n    get tex(): string {\r\n        if (this.isInfinity()) {\r\n            return `${this.sign() === 1 ? '+' : '-'}\\\\infty`\r\n        }\r\n\r\n        if (this.isExact()) {\r\n            if (this._denominator === 1) {\r\n                return `${this._numerator}`;\r\n            } else if (this._numerator < 0) {\r\n                return `-\\\\frac{ ${-this._numerator} }{ ${this._denominator} }`;\r\n            } else {\r\n                return `\\\\frac{ ${this._numerator} }{ ${this._denominator} }`;\r\n            }\r\n        } else {\r\n            return this.value.toFixed(3)\r\n        }\r\n    }\r\n\r\n    get display(): string {\r\n        if (this.isExact()) {\r\n            if (this._denominator === 1) {\r\n                return `${this._numerator}`;\r\n            } else {\r\n                return `${this._numerator}/${this._denominator}`;\r\n            }\r\n        } else {\r\n            return this.value.toFixed(3)\r\n        }\r\n    }\r\n\r\n    // Helper function to display fractions\r\n    get frac(): string {\r\n        return this.tex;\r\n    }\r\n\r\n    get dfrac(): string {\r\n        return this.tex.replace('\\\\frac', '\\\\dfrac');\r\n    }\r\n\r\n    get tfrac(): string {\r\n        return this.tex.replace('\\\\frac', '\\\\tfrac')\r\n    }\r\n\r\n    static max = (...fractions: (Fraction | number)[]): Fraction => {\r\n        let M = new Fraction(fractions[0])\r\n\r\n        for (let m of fractions) {\r\n            let compare = new Fraction(m)\r\n            if (compare.greater(M)) {\r\n                M = compare.clone()\r\n            }\r\n        }\r\n\r\n        return M\r\n    }\r\n\r\n    static min = (...fractions: (Fraction | number)[]): Fraction => {\r\n        let M = new Fraction(fractions[0])\r\n\r\n        for (let m of fractions) {\r\n            let compare = new Fraction(m)\r\n            if (compare.lesser(M)) {\r\n                M = compare.clone()\r\n            }\r\n        }\r\n\r\n        return M\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n\r\n    static average = (...fractions: (Fraction | number)[]): Fraction => {\r\n        let M = new Fraction().zero()\r\n\r\n        for (let f of fractions) {\r\n            M.add(f)\r\n        }\r\n\r\n        M.divide(fractions.length)\r\n\r\n        return M\r\n    }\r\n\r\n    static unique = (fractions: Fraction[], sorted?: boolean): Fraction[] => {\r\n        // TODO: make sure it's wokring -> test !\r\n        let unique: { [Key: string]: boolean } = {},\r\n            distinct: Fraction[] = []\r\n        fractions.forEach(x => {\r\n            if (!unique[x.clone().reduce().tex]) {\r\n                distinct.push(x.clone())\r\n                unique[x.tex] = true\r\n            }\r\n        })\r\n\r\n        if (sorted) {\r\n            return Fraction.sort(distinct)\r\n        } else {\r\n            return distinct\r\n        }\r\n    }\r\n\r\n    static sort = (fractions: Fraction[], reverse?: boolean): Fraction[] => {\r\n        // Todo make sure it's the correct order, not reverse -> make a test\r\n        let sorted = fractions.sort((a, b) => a.value - b.value)\r\n\r\n        if (reverse) {\r\n            sorted.reverse()\r\n        }\r\n\r\n        return sorted\r\n    }\r\n\r\n    isApproximative = (): boolean => {\r\n        return this._numerator.toString().length >= 15 && this._denominator.toString().length >= 15\r\n    }\r\n\r\n    isExact = (): boolean => {\r\n        return !this.isApproximative()\r\n    }\r\n\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse the value to get the numerator and denominator\r\n     * @param value : number or string to parse to get the fraction\r\n     * @param denominatorOrPeriodic (optional|number) : length of the periodic part: 2.333333 => 1 or denominator value\r\n     */\r\n    parse = (value: unknown, denominatorOrPeriodic?: number): Fraction => {\r\n        let S: string[];\r\n\r\n        // A null value means a zero fraction.\r\n        if (value === null || value === \"\") {\r\n            this._numerator = 0;\r\n            this._denominator = 1;\r\n            return this;\r\n        }\r\n\r\n        switch (typeof value) {\r\n            case \"string\":\r\n                // Split the string value in two parts: Numerator/Denominator\r\n                S = value.split('/');\r\n\r\n                // Security checks\r\n                if (S.length > 2) throw value + \" has too many divide signs\";\r\n                if (S.map(x => x === '' || isNaN(Number(x))).includes(true)) throw value + \" is not a valid number\"\r\n\r\n                if (S.length === 1) {\r\n                    // No divide sign - it's a number\r\n                    return this.parse(+S[0]);\r\n                } else if (S.length === 2) {\r\n                    // One divide signe\r\n                    // We check if the denominator is zero\r\n                    if (S[1] === '0') {\r\n                        this._numerator = NaN;\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._numerator = +S[0];\r\n                        this._denominator = +S[1];\r\n                    }\r\n                } else {\r\n                    // More than one divide sign ?\r\n                    // This is impossible\r\n                    this._numerator = NaN;\r\n                    this._denominator = 1;\r\n                }\r\n                break;\r\n            case \"number\":\r\n                if (Number.isSafeInteger(value)) {\r\n                    // The given value is an integer\r\n                    this._numerator = +value;\r\n\r\n                    if (denominatorOrPeriodic === undefined || !Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._denominator = +denominatorOrPeriodic;\r\n                    }\r\n                } else {\r\n                    // The given value is a float number\r\n\r\n                    // Get the number of decimals after the float sign\r\n                    let p: number = (value.toString()).split('.')[1].length;\r\n\r\n                    // Transform the float number in two integer\r\n                    if (denominatorOrPeriodic === undefined) {\r\n                        this._numerator = value * Math.pow(10, p);\r\n                        this._denominator = Math.pow(10, p);\r\n                    } else if (Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._numerator = value * Math.pow(10, p) - Math.floor(value * Math.pow(10, p - denominatorOrPeriodic));\r\n                        this.denominator = Math.pow(10, p) - Math.pow(10, p - denominatorOrPeriodic)\r\n                    }\r\n                    this.reduce()\r\n                }\r\n                break;\r\n            case \"object\":\r\n                if (value instanceof Fraction) {\r\n                    this._numerator = +value.numerator;\r\n                    this._denominator = +value.denominator;\r\n                }\r\n                break;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n\r\n    clone = (): Fraction => {\r\n        let F = new Fraction();\r\n        F.numerator = +this._numerator;\r\n        F.denominator = +this._denominator;\r\n        return F;\r\n    };\r\n\r\n    zero = (): Fraction => {\r\n        this._numerator = 0;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    one = (): Fraction => {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    infinite = (): Fraction => {\r\n        this._numerator = Infinity;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    invalid = (): Fraction => {\r\n        this._numerator = NaN;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    opposed = (): Fraction => {\r\n        this._numerator = -this._numerator;\r\n        return this;\r\n    };\r\n\r\n    add = (F: Fraction | number): Fraction => {\r\n        if (F instanceof Fraction) {\r\n            let N: number = this._numerator,\r\n                D: number = this._denominator;\r\n\r\n            this._numerator = N * F.denominator + F.numerator * D;\r\n            this._denominator = D * F.denominator;\r\n        } else {\r\n            return this.add(new Fraction(F))\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (F: Fraction | number): Fraction => {\r\n        if (F instanceof Fraction) {\r\n            return this.add(F.clone().opposed());\r\n        } else {\r\n            return this.add(-F)\r\n        }\r\n    };\r\n\r\n    multiply = (F: Fraction | number): Fraction => {\r\n        // Parse the value.\r\n        // If it's a fraction, return a clone of it\r\n        // If it's an integer, return the fraction F/1\r\n        let Q = new Fraction(F);\r\n\r\n        this._numerator = this._numerator * Q.numerator;\r\n        this._denominator = this._denominator * Q.denominator;\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    divide = (F: Fraction | number): Fraction => {\r\n        let Q = new Fraction(F);\r\n\r\n        if (Q.numerator === 0) {\r\n            return new Fraction().infinite();\r\n        }\r\n\r\n        let N: number = +this._numerator,\r\n            D: number = +this._denominator;\r\n\r\n        this._numerator = N * Q.denominator;\r\n        this._denominator = D * Q.numerator;\r\n        return this.reduce();\r\n    };\r\n\r\n    invert = (): Fraction => {\r\n        let n = +this._numerator, d = +this._denominator;\r\n        this._numerator = d;\r\n        this._denominator = n;\r\n\r\n        return this;\r\n    }\r\n\r\n    pow = (p: number | Fraction): Fraction => {\r\n        // TODO: Fraction.pow with a value different than a safe integer !\r\n        if (p instanceof Fraction) {\r\n            return this.pow(p.value)\r\n        }\r\n\r\n        this.reduce();\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        // Check if numerator and denominator are roots of...\r\n        // othervise, convert to numeric.\r\n        let controlNumerator = Math.floor(Math.pow(this._numerator, Math.abs(p))),\r\n            controlDenominator = Math.floor(Math.pow(this._denominator, Math.abs(p)))\r\n\r\n        if (controlNumerator ** Math.abs(p) === this._numerator\r\n            &&\r\n            controlDenominator ** Math.abs(p) === this._denominator) {\r\n\r\n            this._numerator = this._numerator ** Math.abs(p);\r\n            this._denominator = this._denominator ** Math.abs(p);\r\n        } else {\r\n            this._numerator = this._numerator ** Math.abs(p);\r\n            this._denominator = this._denominator ** Math.abs(p);\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    root = (p: number): Fraction => {\r\n        // TODO: nth - root of a fraction => this will return another type of coefficient.\r\n\r\n        // Check if they are perfect roots..\r\n        if (p === 0) {\r\n            return this;\r\n        }\r\n\r\n        // If negative, invert the fraction\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        let n = Math.pow(this._numerator, Math.abs(1 / p)),\r\n            d = Math.pow(this._denominator, Math.abs(1 / p));\r\n\r\n        this._numerator = Math.pow(this._numerator, Math.abs(1 / p));\r\n        this._denominator = Math.pow(this._denominator, Math.abs(1 / p));\r\n        return this;\r\n    }\r\n\r\n    sqrt = (): Fraction => {\r\n        return this.root(2);\r\n    }\r\n\r\n    abs = (): Fraction => {\r\n        this._numerator = Math.abs(this._numerator);\r\n        this._denominator = Math.abs(this._denominator);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations specific to fractions\r\n\r\n    // ------------------------------------------\r\n    reduce = (): Fraction => {\r\n        let g = Numeric.gcd(this._numerator, this._denominator);\r\n        this._numerator = this._numerator / g;\r\n        this._denominator = this._denominator / g;\r\n\r\n        if (this._denominator < 0) {\r\n            this._denominator = -this._denominator;\r\n            this._numerator = -this._numerator;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    amplify = (k: number): Fraction => {\r\n        if (Number.isSafeInteger(k)) {\r\n            this._numerator *= k;\r\n            this._denominator *= k;\r\n        }\r\n        return this;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param F (Coefficient) The coefficient to compare\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (F: unknown, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n        let compareFraction: Fraction\r\n        if (F instanceof Fraction) {\r\n            compareFraction = F.clone()\r\n        } else {\r\n            compareFraction = new Fraction(F)\r\n        }\r\n\r\n        switch (sign) {\r\n            case '>':\r\n                return this.value > compareFraction.value;\r\n            case \">=\" || \"=>\" || \"geq\":\r\n                return this.value >= compareFraction.value;\r\n            case \"<\":\r\n                return this.value < compareFraction.value;\r\n            case \"<=\" || \"=>\" || \"leq\":\r\n                return this.value <= compareFraction.value;\r\n            case \"=\":\r\n                // let F2: Fraction = compareFraction.clone().reduce(),\r\n                //     F1: Fraction = this.clone().reduce();\r\n                // return (F1.numerator === F2.numerator && F1.denominator === F2.denominator);\r\n                return this.value === compareFraction.value;\r\n            case \"<>\":\r\n                return this.value !== compareFraction.value;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n    /* Compare shortcuts */\r\n    lesser = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '<');\r\n    };\r\n    leq = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '<=');\r\n    };\r\n    greater = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '>');\r\n    };\r\n    geq = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '>=');\r\n    };\r\n    isEqual = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '=');\r\n    }\r\n    isNotEqual = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '<>');\r\n    }\r\n    isOpposed = (p: Fraction): boolean => {\r\n        return this.isEqual(p.clone().opposed());\r\n    }\r\n    isInverted = (p: Fraction): boolean => {\r\n        return this.isEqual(new Fraction().one().divide(p.clone()));\r\n    }\r\n    isZero = (): boolean => {\r\n        return this._numerator === 0;\r\n    }\r\n    isNotZero = (): boolean => {\r\n        return this._numerator !== 0;\r\n    }\r\n    isOne = (): boolean => {\r\n        return this._numerator === 1 && this._denominator === 1;\r\n    }\r\n    isNegativeOne = (): boolean => {\r\n        return this._numerator === -1 && this._denominator === 1;\r\n    }\r\n    isPositive = (): boolean => {\r\n        return this.sign() === 1;\r\n    }\r\n    isNegative = (): boolean => {\r\n        return this.sign() === -1;\r\n    }\r\n    isStrictlyPositive = (): boolean => {\r\n        return this.value > 0\r\n    }\r\n    isStrictlyNegative = (): Boolean => {\r\n        return this.value < 0\r\n    }\r\n    isNaN = (): boolean => {\r\n        return isNaN(this._numerator);\r\n    }\r\n    isInfinity = (): boolean => {\r\n        return Math.abs(this._numerator) === Infinity;\r\n    }\r\n    isFinite = (): boolean => {\r\n        return !this.isInfinity() && !this.isNaN();\r\n    }\r\n    isSquare = (): boolean => {\r\n        return Math.sqrt(this._numerator) % 1 === 0 && Math.sqrt(this._denominator) % 1 === 0\r\n    }\r\n    isReduced = (): boolean => {\r\n        return Math.abs(Numeric.gcd(this._numerator, this._denominator)) === 1\r\n    }\r\n    isNatural = (): boolean => {\r\n        return this.isRelative() && this.isPositive()\r\n    }\r\n    isRelative = (): boolean => {\r\n        return this.clone().reduce().denominator === 1\r\n    }\r\n    isRational = (): boolean => {\r\n        return !this.isRelative()\r\n    }\r\n    isEven = (): boolean => {\r\n        return this.isRelative() && this.value % 2 === 0\r\n    }\r\n    isOdd = (): boolean => {\r\n        return this.isRelative() && this.value % 2 === 1\r\n    }\r\n    sign = (): number => {\r\n        return (this._numerator * this._denominator >= 0) ? 1 : -1;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Simple function to determine if it's a fraction\r\n     */\r\n    areEquals = (...F: Fraction[]): boolean => {\r\n        for (let i = 0; i < F.length; i++) {\r\n            if (!this.isEqual(F[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n}","/**\r\n * NthRoot is something like \"a+b\\sqrt{3}\r\n */\r\nexport class NthRoot {\r\n    private _radical: number;\r\n    private _nth: number;\r\n    private _coefficient: number;\r\n    private _isValid:boolean;\r\n\r\n    constructor(...values: number[]) {\r\n        this._radical = 1;\r\n        this._coefficient = 1;\r\n        this._nth = 2;\r\n        this._isValid = true;\r\n\r\n        if(values !== undefined){\r\n            this.parse(values[0], values[1], values[2])\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get radical(): number {\r\n        return this._radical;\r\n    }\r\n\r\n    set radical(value: number) {\r\n        this._radical = value;\r\n    }\r\n\r\n    get nth(): number {\r\n        return this._nth;\r\n    }\r\n\r\n    set nth(value: number) {\r\n        if (Number.isSafeInteger(value) && value >= 2) {\r\n            this._nth = value;\r\n        } else {\r\n            // Error setting the nth root.\r\n            console.log('Error setting the nth root');\r\n            this._nth = 2;\r\n        }\r\n    }\r\n\r\n    get coefficient(): number {\r\n        return this._coefficient;\r\n    }\r\n\r\n    set coefficient(value: number) {\r\n        this._coefficient = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let C: string;\r\n\r\n        if (this._coefficient === 1) {\r\n            C = '';\r\n        } else if (this._coefficient === -1) {\r\n            C = '-';\r\n        } else {\r\n            C = this._coefficient.toString();\r\n        }\r\n\r\n        if (this._radical === 1) {\r\n            return `${this._coefficient}`;\r\n        } else {\r\n            if (this._nth === 2) {\r\n                return `${C}\\\\sqrt{${this._radical}}`\r\n            } else {\r\n                return `${C}\\\\sqrt[${this._nth}]{${this._radical}}`\r\n            }\r\n        }\r\n    }\r\n\r\n    get value(): number {\r\n        return this._coefficient * Math.pow(this._radical, 1 / this._nth);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (radical: number, nthroot?: number, coefficient?: number): NthRoot => {\r\n        this._coefficient = (coefficient === undefined) ? 1 : coefficient;\r\n        this._nth = (nthroot === undefined) ? 2 : nthroot;\r\n        this._radical = (radical === undefined) ? 1 : radical;\r\n\r\n        if(this._nth%2===0 && this._radical<0){\r\n            this._isValid = false;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    reduce = (): NthRoot => {\r\n        // Max value to test.\r\n        let V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n        while (V > 1) {\r\n            if (this._radical % Math.pow(V, this._nth) === 0) {\r\n                // It's dividable by V^n\r\n                this._coefficient *= V;\r\n                this._radical = this._radical / Math.pow(V, this._nth);\r\n\r\n                // Redifine the new testing value (this is optimization)\r\n                V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n                continue;\r\n            }\r\n            V--;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiply = (N: NthRoot): NthRoot => {\r\n        this._radical *= N.radical;\r\n        return this.reduce();\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Help functions\r\n    // ------------------------------------------\r\n    hasRadical = ():boolean => {\r\n        return !(this._radical===1 || this._radical===0 || this._isValid===false)\r\n    };\r\n}","import {Shutingyard, ShutingyardMode, ShutingyardType, tokenConstant} from \"../shutingyard\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\nexport class NumExp {\r\n    private _rpn: { token: string, tokenType: string }[]\r\n    private _expression: string\r\n    private _isValid: boolean\r\n\r\n    constructor(value: string, uniformize?:boolean) {\r\n        this._expression = value\r\n        this._rpn = new Shutingyard(ShutingyardMode.NUMERIC).parse(value).rpn\r\n    }\r\n\r\n    get rpn(): { token: string; tokenType: string }[] {\r\n        return this._rpn;\r\n    }\r\n\r\n    get isValid(): boolean {\r\n        if(this._isValid===undefined){\r\n            this.evaluate({x: 0})\r\n        }\r\n        return this._isValid\r\n    }\r\n\r\n    set isValid(value: boolean){\r\n        this._isValid = value\r\n    }\r\n\r\n    get expression(): string {\r\n        return this._expression;\r\n    }\r\n\r\n    private _extractDecimalPart(value: number): string {\r\n        let decimal = value.toString()\r\n\r\n        if (!decimal.includes('.')) {\r\n            return ''\r\n        }\r\n\r\n        decimal = decimal.split('.')[1]\r\n\r\n        return decimal.substring(0, decimal.length - 2)\r\n    }\r\n\r\n    private _numberCorrection(value: number): number {\r\n        // Must modify the number if it's like:\r\n        // a: 3.0000000000000003\r\n        // b: 3.9999999999999994\r\n        // remove the last character\r\n        // check if around n last characters are either 0 or 9\r\n        // if it is, 'round' the number.\r\n\r\n        const epsilon = 0.00000000000001,\r\n            number_of_digits = 6\r\n\r\n        const decimal = this._extractDecimalPart(value)\r\n        if(decimal===''){return value}\r\n\r\n        const n9 = decimal.match(/9+$/g)\r\n        const n0 = decimal.match(/0+$/g)\r\n\r\n        if (n9 && n9[0].length >= number_of_digits) {\r\n            // New tested values.\r\n            const mod = this._extractDecimalPart(value + epsilon),\r\n                mod0 = mod.match(/0+$/g)\r\n\r\n            if(mod0 && mod0[0].length>= number_of_digits){\r\n                // The value can be changed. Remove all zeros!\r\n                return +((value+epsilon).toString().split(mod0[0])[0])\r\n            }\r\n        }\r\n\r\n        if (n0 && n0[0].length >= number_of_digits) {\r\n            // New tested values.\r\n            const mod = this._extractDecimalPart(value - epsilon),\r\n                mod9 = mod.match(/9+$/g)\r\n\r\n            if(mod9 && mod9[0].length>= number_of_digits){\r\n                // The value can be changed. Remove all nines!\r\n                return +(value.toString().split(n0[0])[0])\r\n            }\r\n        }\r\n\r\n        return value\r\n    }\r\n\r\n    private _addToStack(stack:number[], value: number): void {\r\n        stack.push(this._numberCorrection(value))\r\n    }\r\n\r\n    evaluate(values: { [Key: string]: number }): number {\r\n        const stack: number[] = []\r\n\r\n        this.isValid = true\r\n\r\n        for (const element of this._rpn) {\r\n            if (element.tokenType === ShutingyardType.COEFFICIENT) {\r\n                // May be a numeric value or a Fraction.\r\n                if (!isNaN(+element.token)) {\r\n                    this._addToStack(stack, +element.token)\r\n                } else {\r\n                    this._addToStack(stack, new Fraction(element.token).value)\r\n                }\r\n            } else if (element.tokenType === ShutingyardType.VARIABLE) {\r\n                if (values[element.token] !== undefined) {\r\n                    this._addToStack(stack, +values[element.token])\r\n                }\r\n            } else if (element.tokenType === ShutingyardType.CONSTANT) {\r\n                this._addToStack(stack, tokenConstant[element.token])\r\n            } else if (element.tokenType === ShutingyardType.OPERATION) {\r\n                if (element.token === '*') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if(a === undefined || b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, a * b)\r\n                } else if (element.token === '/') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if(a === undefined || b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, a / b)\r\n                } else if (element.token === '+') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if(a === undefined || b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, (+a) + (+b))\r\n                } else if (element.token === '-') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop() || 0\r\n                    if(b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, a - b)\r\n                } else if (element.token === '^') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if(a === undefined || b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, Math.pow(a, b))\r\n                }\r\n            } else if (element.tokenType === ShutingyardType.FUNCTION) {\r\n                const a = stack.pop()\r\n                if(a === undefined){this.isValid = false}\r\n                if (element.token === 'sin') {\r\n                    this._addToStack(stack, Math.sin(a))\r\n                } else if (element.token === 'cos') {\r\n                    this._addToStack(stack, Math.cos(a))\r\n                } else if (element.token === 'tan') {\r\n                    this._addToStack(stack, Math.tan(a))\r\n                } else if(element.token === 'sqrt') {\r\n                    this._addToStack(stack, Math.sqrt(a))\r\n                }\r\n            }\r\n        }\r\n\r\n        if (stack.length === 1) {\r\n            return stack[0]\r\n        } else {\r\n            throw `There was a problem parsing: ${this._expression}`\r\n        }\r\n    }\r\n}\r\n","import {Polynom, PolynomParsingType} from \"../algebra/polynom\";\r\nimport {Fraction, FractionParsingType} from \"../coefficients/fraction\";\r\n\r\ntype PolynomExpMathFunctionType = { name: string; fn: Function, tex: string }\r\n\r\nexport class PolynomExpFactor {\r\n    constructor(polynom: PolynomParsingType, degree?: FractionParsingType, mathFunction?: PolynomExpMathFunctionType) {\r\n        this._polynom = new Polynom(polynom)\r\n        this._degree = new Fraction(degree === undefined ? 1 : degree)\r\n        this._fn = mathFunction\r\n        this._powerAsInteger = true\r\n        this._forceParenthesis = true\r\n\r\n    }\r\n\r\n    private _forceParenthesis: boolean\r\n\r\n    get forceParenthesis(): boolean {\r\n        return this._forceParenthesis;\r\n    }\r\n\r\n    set forceParenthesis(value: boolean) {\r\n        this._forceParenthesis = value;\r\n    }\r\n\r\n    private _fn: PolynomExpMathFunctionType\r\n\r\n    get fn(): PolynomExpMathFunctionType {\r\n        return this._fn;\r\n    }\r\n\r\n    set fn(value: PolynomExpMathFunctionType) {\r\n        this._fn = value;\r\n    }\r\n\r\n    private _powerAsInteger: boolean\r\n\r\n    get powerAsInteger(): boolean {\r\n        return this._powerAsInteger;\r\n    }\r\n\r\n    set powerAsInteger(value: boolean) {\r\n        this._powerAsInteger = value;\r\n    }\r\n\r\n    private _polynom: Polynom\r\n\r\n    get polynom(): Polynom {\r\n        return this._polynom;\r\n    }\r\n\r\n    set polynom(value: Polynom) {\r\n        this._polynom = value;\r\n    }\r\n\r\n    private _degree: Fraction\r\n\r\n    get degree(): Fraction {\r\n        return this._degree;\r\n    }\r\n\r\n    set degree(value: Fraction) {\r\n        this._degree = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let tex\r\n\r\n        if (this._degree.isOne() && (this._fn !== undefined || !this._forceParenthesis)) {\r\n            // If degree is one, no need to add the parenthesis.\r\n            tex = this._polynom.tex\r\n        } else {\r\n            // the degree is not one, add the parenthesis.\r\n            if (this._powerAsInteger && !this._degree.isRelative()) {\r\n                // the degree is a fraction and we want natural powers => use sqrt.\r\n                tex = `\\\\sqrt${this._degree.denominator !== 2 ? `[ ${this._degree.denominator} ]` : ''}{ ${this._polynom.tex} }^{ ${this._degree.numerator} }`\r\n            } else if (this.isCoefficient && this.firstCoefficient.isNatural()) {\r\n                // the value is a natural number (eg 3, 7, ...)\r\n                tex = this._polynom.tex + this._texDegree\r\n            } else {\r\n                // In any other case, add the parenthesis by default\r\n                tex = `\\\\left( ${this._polynom.tex} \\\\right)${this._texDegree}`\r\n            }\r\n        }\r\n\r\n        if (this._fn !== undefined && this._fn.tex !== undefined) {\r\n            tex = `${this._fn.tex}\\\\left( ${tex} \\\\right)`\r\n        }\r\n        return tex\r\n    }\r\n\r\n    get isCoefficient(): boolean {\r\n        // TODO: Maybe reduce the coefficient if it isn't of degree one.\r\n        return this._polynom.degree().isZero();\r\n\r\n    }\r\n\r\n    get firstCoefficient(): Fraction {\r\n        return this._polynom.monomByDegree().coefficient\r\n    }\r\n\r\n    private get _texDegree(): string {\r\n        if (this._degree.isOne()) {\r\n            return ''\r\n        } else {\r\n            return `^{ ${this._degree.tfrac} }`\r\n        }\r\n    }\r\n\r\n    setForceParenthesis(value?: boolean): PolynomExpFactor {\r\n        this._forceParenthesis = value === undefined || value\r\n        return this\r\n    }\r\n\r\n    derivative(letter?: string): PolynomExpProduct {\r\n        if (this._degree.isOne()) {\r\n            return new PolynomExpProduct(\r\n                new PolynomExpFactor(this._polynom.clone().derivative(letter))\r\n            )\r\n        } else {\r\n            return new PolynomExpProduct(\r\n                new PolynomExpFactor(this._degree.clone()),\r\n                new PolynomExpFactor(this._polynom.clone().derivative(letter)),\r\n                new PolynomExpFactor(this._polynom.clone(), this._degree.clone().subtract(1))\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport class PolynomExpProduct {\r\n    constructor(...values: PolynomExpFactor[]) {\r\n        this._factors = values || []\r\n        this._positive = true\r\n        this._asPositiveDegree = true\r\n    }\r\n\r\n    private _fn: PolynomExpMathFunctionType\r\n\r\n    get fn(): PolynomExpMathFunctionType {\r\n        return this._fn;\r\n    }\r\n\r\n    set fn(value: PolynomExpMathFunctionType) {\r\n        this._fn = value;\r\n    }\r\n\r\n    private _factors: PolynomExpFactor[]\r\n\r\n    get factors(): PolynomExpFactor[] {\r\n        return this._factors;\r\n    }\r\n\r\n    set factors(value: PolynomExpFactor[]) {\r\n        this._factors = value;\r\n    }\r\n\r\n    private _positive: boolean\r\n\r\n    get positive(): boolean {\r\n        return this._positive;\r\n    }\r\n\r\n    set positive(value: boolean) {\r\n        this._positive = value;\r\n    }\r\n\r\n    private _asPositiveDegree: boolean\r\n\r\n    get asPositiveDegree(): boolean {\r\n        return this._asPositiveDegree;\r\n    }\r\n\r\n    set asPositiveDegree(value: boolean) {\r\n        this._asPositiveDegree = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let parenthesis = this._factors.length>1\r\n        // Default value\r\n        let tex = this._factors.map(factor => factor.setForceParenthesis(parenthesis).tex).join(' \\\\cdot ')\r\n\r\n        // Change the value in some cases...\r\n        if (this._asPositiveDegree) {\r\n            const numerators = this._factors.filter(x => x.degree.isPositive()),\r\n                denominators = this._factors.filter(x => x.degree.isNegative())\r\n\r\n            let numeratorsAsTex, denominatorsAsTex\r\n\r\n            if (denominators.length > 0) {\r\n                if (numerators.length === 0) {\r\n                    numeratorsAsTex = [1]\r\n                } else if (numerators.length === 1) {\r\n                    numeratorsAsTex = [numerators[0].setForceParenthesis(false).tex]\r\n                } else {\r\n                    parenthesis = numerators.length>1\r\n                    numeratorsAsTex = numerators.map(factor => factor.setForceParenthesis(parenthesis).tex)\r\n                }\r\n\r\n                // Change all denominators degrees to positive.\r\n                denominators.map(x => x.degree.opposed())\r\n                if (denominators.length === 1) {\r\n                    denominatorsAsTex = [denominators[0].setForceParenthesis(false).tex]\r\n                } else {\r\n                    parenthesis = denominators.length>1\r\n                    denominatorsAsTex = denominators.map(factor => factor.setForceParenthesis(parenthesis).tex)\r\n                }\r\n                // restore all degrees to negative again.\r\n                denominators.map(x => x.degree.opposed())\r\n\r\n                tex = `\\\\frac{ ${numeratorsAsTex.join(' \\\\cdot ')} }{ ${denominatorsAsTex.join(' \\\\cdot ')} }`\r\n            }\r\n        }\r\n\r\n        // Apply the modification\r\n        if (this._fn !== undefined && this._fn.name !== undefined && this._fn.name !== '') {\r\n            tex = `${this._fn.tex}\\\\left( ${tex} \\\\right)`\r\n        }\r\n        return tex\r\n    }\r\n\r\n    reduce(): PolynomExpProduct {\r\n        let coefficients = this._factors.filter(factor => factor.isCoefficient),\r\n            polynoms = this._factors.filter(factor => !factor.isCoefficient)\r\n\r\n        let result = new Fraction().one()\r\n\r\n        if (coefficients.length > 1) {\r\n            for (const factor of coefficients) {\r\n                if (factor.degree.isPositive()) {\r\n                    result.multiply(factor.polynom.monoms[0].coefficient.pow(factor.degree))\r\n                } else {\r\n                    result.divide(factor.polynom.monoms[0].coefficient.pow(factor.degree.clone().abs()))\r\n                }\r\n            }\r\n        } else if (coefficients.length === 1) {\r\n            result = coefficients[0].polynom.monoms[0].coefficient\r\n        }\r\n\r\n        if (result.isOne()) {\r\n            this._factors = [...polynoms]\r\n        } else if (!result.isRelative()) {\r\n            this._factors = [\r\n                new PolynomExpFactor(result.numerator),\r\n                new PolynomExpFactor(result.denominator, -1),\r\n                ...polynoms\r\n            ]\r\n        } else {\r\n            this._factors = [\r\n                new PolynomExpFactor(result),\r\n                ...polynoms\r\n            ]\r\n        }\r\n        return this\r\n    }\r\n\r\n    integrate(letter?: string): PolynomExpProduct {\r\n        // Handle this kind of case:\r\n        // A * f' * F^n\r\n        // A * f' / F^n, n != 1\r\n        // A * f_1 * f_2 * f_3, where (f_1 * f_2)' = f_3\r\n        if (this._factors.length === 2) {\r\n            // Check polynoms degree: one must of one degree less than the other.\r\n            let d1 = this._factors[0].polynom.degree(letter).value,\r\n                d2 = this._factors[1].polynom.degree(letter).value\r\n\r\n            if (d1 === d2 + 1) {\r\n                return this._integrateWithInternalDerivative(this._factors[0], this._factors[1], letter)\r\n            } else if (d1 + 1 === d2) {\r\n                return this._integrateWithInternalDerivative(this._factors[1], this._factors[0], letter)\r\n            }\r\n        }\r\n        return\r\n    }\r\n\r\n    public applyMathFunction(mathFn: PolynomExpMathFunctionType): PolynomExpProduct {\r\n        this._fn = mathFn\r\n        return this\r\n    }\r\n\r\n    private _integrateWithInternalDerivative(P: PolynomExpFactor, Pinternal: PolynomExpFactor, letter?: string): PolynomExpProduct {\r\n        // Get the internal derivative\r\n        let internalDerivative: Polynom = P.polynom.clone().derivative(letter)\r\n\r\n        // Get the factor.\r\n        let {quotient, reminder} = Pinternal.polynom.clone().euclidian(internalDerivative)\r\n\r\n        if (reminder.isZero() && quotient.degree(letter).isZero()) {\r\n            // All the conditions are done. Actual situation is\r\n            // (4x-10)(x^2-5x+7)^9\r\n            // P1 = (x^2-5x+7), P2 = (2x-5)\r\n            // => 1/10 * quotient * (x^2-5x+7)^10\r\n\r\n            if (P.degree.isEqual(-1)) {\r\n                return (new PolynomExpProduct(\r\n                    new PolynomExpFactor(quotient, 1),\r\n                    new PolynomExpFactor(P.polynom.clone(), 1, {\r\n                        name: 'ln', tex: '\\\\ln', fn: (x: number) => Math.log(x)\r\n                    })\r\n                ))\r\n            } else {\r\n                return new PolynomExpProduct(\r\n                    new PolynomExpFactor(P.degree.clone().add(1).invert(), 1),\r\n                    new PolynomExpFactor(quotient, 1),\r\n                    new PolynomExpFactor(P.polynom.clone(), P.degree.clone().add(1))\r\n                )\r\n            }\r\n        }\r\n        return\r\n    }\r\n}","import {Point} from \"./point\";\r\nimport {Line, LinePropriety} from \"./line\";\r\nimport {Vector} from \"./vector\";\r\nimport {Triangle} from \"./triangle\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Equation} from \"../algebra/equation\";\r\nimport {Polynom} from \"../algebra/polynom\";\r\nimport {Monom} from \"../algebra/monom\";\r\n\r\nexport class Circle {\r\n    constructor(...values: unknown[]) {\r\n        this._exists = false\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values)\r\n        }\r\n    }\r\n\r\n    private _center: Point;\r\n\r\n    get center(): Point {\r\n        return this._center;\r\n    }\r\n\r\n    private _squareRadius: Fraction;\r\n\r\n    get squareRadius(): Fraction {\r\n        return this._squareRadius\r\n    }\r\n\r\n    private _cartesian: Equation;\r\n\r\n    get cartesian(): Equation {\r\n        return this._cartesian\r\n    }\r\n\r\n    private _exists: boolean;\r\n\r\n    get exists(): boolean {\r\n        return this._exists;\r\n    }\r\n\r\n    get radius(): { tex: string, display: string, value: number } {\r\n        if (this._squareRadius.isSquare()) {\r\n            return {\r\n                tex: this._squareRadius.clone().sqrt().tex,\r\n                display: this._squareRadius.clone().sqrt().display,\r\n                value: this._squareRadius.clone().sqrt().value\r\n            }\r\n        } else {\r\n            return {\r\n                tex: `\\\\sqrt{${this._squareRadius.tex}}`,\r\n                display: `sqrt(${this._squareRadius.display})`,\r\n                value: this._squareRadius.clone().sqrt().value\r\n            }\r\n        }\r\n        return this._squareRadius\r\n    }\r\n\r\n    get tex(): string {\r\n\r\n        if (this._exists) {\r\n            let cx, cy\r\n            if (this._center.x.isZero()) {\r\n                cx = 'x^2'\r\n            } else {\r\n                cx = `\\\\left(x${this._center.x.isNegative() ? '+' : '-'}${this._center.x.clone().abs().tex}\\\\right)^2`\r\n            }\r\n            if (this._center.y.isZero()) {\r\n                cy = 'y^2'\r\n            } else {\r\n                cy = `\\\\left(y${this._center.y.isNegative() ? '+' : '-'}${this._center.y.clone().abs().tex}\\\\right)^2`\r\n            }\r\n            return `${cx}+${cy}=${this._squareRadius.tex}`\r\n        } else {\r\n            return `\\\\text{le cercle n'existe pas.}`\r\n        }\r\n    }\r\n\r\n    get developed(): string {\r\n        return this._cartesian.tex\r\n    }\r\n\r\n    // TODO: reformat code for better display.\r\n    get display(): string {\r\n        return this._cartesian.display\r\n    }\r\n\r\n    /**\r\n     * Get the relative position between circle and line. It corresponds to the number of intersection.\r\n     * @param {Line} L\r\n     * @returns {number}\r\n     */\r\n    relativePosition = (L: Line): number => {\r\n        let distance = L.distanceTo(this.center), radius = Math.sqrt(this._squareRadius.value)\r\n\r\n        if (distance.value - radius > 0.0000000001) {\r\n            return 0 // external\r\n        } else if (Math.abs(distance.value - radius) < 0.0000000001) {\r\n            return 1 // tangent\r\n        } else {\r\n            return 2 // external\r\n        }\r\n    }\r\n\r\n    lineIntersection = (L: Line): Point[] => {\r\n        let intersectionPoints: Point[] = [], solX: Fraction\r\n\r\n        if (this._cartesian === null) {\r\n            return []\r\n        }\r\n        const equX = this._cartesian.clone(), lineX = L.equation.clone().isolate('x'),\r\n            lineY = L.equation.clone().isolate('y')\r\n\r\n        if (lineX instanceof Equation && lineY instanceof Equation) {\r\n            equX.replaceBy('y', lineY.right).simplify()\r\n            equX.solve()\r\n\r\n            for (let x of equX.solutions) {\r\n                if (x.exact === false && isNaN(x.value)) {\r\n                    continue\r\n                }\r\n\r\n                solX = new Fraction(x.exact === false ? x.value : x.exact)\r\n                intersectionPoints.push(new Point(solX.clone(), lineY.right.evaluate(solX)))\r\n            }\r\n        }\r\n\r\n        return intersectionPoints\r\n    }\r\n\r\n    tangents = (P: Point | Fraction): Line[] => {\r\n        if (P instanceof Fraction) {\r\n            return this._tangentsWithSlope(P)\r\n        } else if (this.isPointOnCircle(P)) {\r\n            return this._tangentsThroughOnePointOnTheCircle(P)\r\n        } else if (this.center.distanceTo(P).value > this.radius.value) {\r\n            //TODO:  Must check it's outside the circle\r\n            return this._tangentsThroughOnePointOutsideTheCircle(P)\r\n        } else {\r\n            console.log('No tangents as the point is inside !')\r\n        }\r\n        return []\r\n    }\r\n\r\n    isPointOnCircle = (P: Point): Boolean => {\r\n        return this._cartesian.test({x: P.x, y: P.y})\r\n    }\r\n\r\n    getPointsOnCircle = (numberIsInteger?: boolean): Point[] => {\r\n        if (numberIsInteger === undefined) {\r\n            numberIsInteger = false\r\n        }\r\n\r\n        // It means searching for pythagorician triples that make a perfect square.\r\n        // (x-4)^2 + (y+3)^2 = 15\r\n\r\n        let triplets = Numeric.pythagoricianTripletsWithTarget(this._squareRadius.value, true)\r\n\r\n        let points: Point[] = [], pt\r\n        triplets.forEach(triplet => {\r\n            // Allow positive / negative values\r\n            // x-a = t  => x = a + t\r\n            // x-a = -t => x = a - t\r\n\r\n            for (let k of [[1, 1], [-1, 1], [-1, -1], [1, -1]]) {\r\n                pt = new Point(\r\n                    this.center.x.clone().add(k[0] * triplet[0]),\r\n                    this.center.y.clone().add(k[1] * triplet[1])\r\n                )\r\n                // Check if the point is not already in points.\r\n                if (!pt.isInListOfPoints(points)) {\r\n                    points.push(pt)\r\n                }\r\n            }\r\n        })\r\n        return points\r\n    }\r\n\r\n    clone(): Circle {\r\n        this._center = this._center.clone()\r\n        this._squareRadius = this._squareRadius.clone()\r\n        this._calculateCartesian()\r\n        return this\r\n    }\r\n\r\n    private _tangentsThroughOnePointOnTheCircle = (P: Point): Line[] => {\r\n        let CT = new Vector(this._center, P)\r\n        return [new Line(P, CT, LinePropriety.Perpendicular)]\r\n    }\r\n\r\n    private _tangentsThroughOnePointOutsideTheCircle = (P: Point): Line[] => {\r\n        // y = mx + h\r\n        // px, py => h = -m px + py => mx - y -m.px + py = 0 =>\r\n        // Centre: cx, cy, radius: r\r\n        // (m.cx - cy -m.px + py)^2 = r^2  * (m^2  + 1)\r\n        // (m(cx-py) - (cy - py))^2 = r^2  * (m^2  + 1)\r\n\r\n        let cx_px = this.center.x.clone().subtract(P.x), cy_py = this.center.y.clone().subtract(P.y),\r\n            polyLeft = new Polynom('x'), polyRight = new Polynom('x^2+1')\r\n\r\n        polyLeft.multiply(cx_px).subtract(cy_py).pow(2)\r\n        polyRight.multiply(this.squareRadius)\r\n\r\n        let equ = new Equation(polyLeft, polyRight)\r\n        equ.moveLeft().simplify().solve()\r\n\r\n        return equ.solutions.map(sol => {\r\n            //  h = -m px + py\r\n            let h, equ = new Equation('y', 'x')\r\n\r\n            if (sol.exact instanceof Fraction) {\r\n                h = P.x.clone().opposed().multiply(sol.exact).add(P.y)\r\n                equ.right.multiply(sol.exact).add(h)\r\n            } else {\r\n                h = P.x.clone().opposed().multiply(sol.value).add(P.y)\r\n                equ.right.multiply(sol.value).add(h)\r\n            }\r\n\r\n            return new Line(equ)\r\n        })\r\n\r\n    }\r\n\r\n    private _tangentsWithSlope = (slope: Fraction): Line[] => {\r\n        // d(C;t)=r => ac1+bc2 + x = +- sqrt(a^2 + b^2)*r\r\n        // x = -ac1-bc2  +-  sqrt(a^2 + b^2)*r\r\n        // y = a/bx + h => ax-by + H = 0\r\n\r\n        const a = slope.numerator, b = -slope.denominator, c1 = this._center.x.clone(), c2 = this._center.y.clone(),\r\n            r = this._squareRadius\r\n\r\n        let sq = this._squareRadius.clone().multiply(slope.numerator ** 2 + slope.denominator ** 2),\r\n            x1 = c1.clone().multiply(a).opposed().subtract(c2.clone().multiply(b)).add(sq.clone().sqrt()),\r\n            x2 = c1.clone().multiply(a).opposed().subtract(c2.clone().multiply(b)).subtract(sq.clone().sqrt())\r\n\r\n        return [new Line(a, b, x1), new Line(a, b, x2)]\r\n    }\r\n\r\n    private _reset(): Circle {\r\n        this._center = null\r\n        this._squareRadius = null\r\n        this._cartesian = null\r\n        this._exists = false\r\n\r\n        return this\r\n    }\r\n\r\n    private parse(...values: unknown[]): Circle {\r\n        // Data can be given in these formats:\r\n        // one value, a string -> make it an Equation\r\n        // one value, an Equation\r\n        // one value, a circle -> clone it\r\n        // two values: two points (center and pointThrough)\r\n        // two values: point and Fraction (center and radius)\r\n        // three values: Point, Fraction, Boolean (center, square radius, true)\r\n\r\n        this._reset()\r\n\r\n        if (typeof values[0] === 'string') {\r\n            this._parseEquation(new Equation(values[0]))\r\n        } else if (values[0] instanceof Equation) {\r\n            this._parseEquation(values[0])\r\n        } else if (values[0] instanceof Circle) {\r\n            this._parseCopyCircle(values[0])\r\n        } else if (values[0] instanceof Point && values.length > 1) {\r\n            if (values[1] instanceof Point) {\r\n                if (values[2] instanceof Point) {\r\n                    this._parseThroughtThreePoints(values[0], values[1], values[2])\r\n                } else {\r\n                    this._parseCenterAndPointThrough(values[0], values[1])\r\n                }\r\n            } else if (values[1] instanceof Fraction || typeof values[1] === 'number') {\r\n                this._parseCenterAndRadius(values[0], values[1], (typeof values[2] === \"boolean\") ? values[2] : false)\r\n            }\r\n        }\r\n\r\n        // Calculate once the different values.\r\n        if (this._exists) {\r\n            this._calculateCartesian()\r\n\r\n            // If the square radius is zero or positive, the circle exists.\r\n            if (this._squareRadius !== undefined && this._squareRadius.isNegative()) {\r\n                this._exists = false\r\n            }\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    private _calculateCartesian() {\r\n        this._cartesian = (new Equation(new Polynom(`(x-(${this._center.x.display}))^2+(y-(${this._center.y.display}))^2`), new Polynom(`${this._squareRadius.display}`))).moveLeft()\r\n    }\r\n\r\n    private _parseCopyCircle(circle: Circle): Circle {\r\n        this._center = circle.center.clone()\r\n        this._squareRadius = circle.squareRadius.clone()\r\n        this._calculateCartesian()\r\n        this._exists = circle.exists\r\n        return this\r\n    }\r\n\r\n    private _parseCenterAndRadius(center: Point, radius: Fraction | number, square?: boolean): Circle {\r\n        this._center = center.clone()\r\n\r\n        if (square) {\r\n            this._squareRadius = (new Fraction(radius))\r\n        } else {\r\n            this._squareRadius = new Fraction(radius).pow(2)\r\n        }\r\n\r\n        this._exists = true\r\n        return this\r\n    }\r\n\r\n    private _parseCenterAndPointThrough(center: Point, pointThrough: Point): Circle {\r\n        this._center = center.clone()\r\n        this._squareRadius = new Vector(this._center, pointThrough).normSquare\r\n        this._exists = true\r\n        return this\r\n    }\r\n\r\n    private _parseEquation(equ: Equation): Circle {\r\n        this._exists = false\r\n\r\n        // Move everything to the left.\r\n        equ.moveLeft()\r\n\r\n        if (equ.degree('x').value === 2 && equ.degree('y').value === 2) {\r\n            // Both must be of degree 2.\r\n            let x2 = equ.left.monomByDegree(2, 'x'), y2 = equ.left.monomByDegree(2, 'y'), x1: Monom, y1: Monom, c: Monom\r\n\r\n            // Both square monoms must have the same coefficient.\r\n            if (x2.coefficient.isEqual(y2.coefficient)) {\r\n                equ.divide(x2.coefficient)\r\n\r\n                x1 = equ.left.monomByDegree(1, 'x')\r\n                y1 = equ.left.monomByDegree(1, 'y')\r\n\r\n                c = equ.left.monomByDegree(0)\r\n\r\n                this._center = new Point(x1.coefficient.clone().divide(2).opposed(), y1.coefficient.clone().divide(2).opposed())\r\n\r\n                this._squareRadius = c.coefficient.clone().opposed()\r\n                    .add(this._center.x.clone().pow(2))\r\n                    .add(this._center.y.clone().pow(2))\r\n\r\n                this._calculateCartesian()\r\n                this._exists = true\r\n            } else {\r\n                // The circle is not a valid circle\r\n                this._center = null\r\n                this._squareRadius = null\r\n                this._exists = false\r\n            }\r\n        }\r\n        return this\r\n    }\r\n\r\n    private _parseThroughtThreePoints(A: Point, B: Point, C: Point): Circle {\r\n        let T = new Triangle(A, B, C), mAB = T.remarquables.mediators.AB.clone(),\r\n            mAC = T.remarquables.mediators.AC.clone()\r\n        this.parse(mAB.intersection(mAC).point, A)\r\n\r\n        return this\r\n    }\r\n\r\n}","/**\r\n * This class works for 2d line in a plane.\r\n */\r\n\r\nimport {Vector} from \"./vector\";\r\nimport {Point} from \"./point\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Equation} from \"../algebra/equation\";\r\nimport {Polynom} from \"../algebra/polynom\";\r\n\r\nexport enum LinePropriety {\r\n    None,\r\n    Parallel='parallel',\r\n    Perpendicular = 'perpendicular',\r\n    Tangent = 'tangent'\r\n}\r\n\r\nexport class Line {\r\n    // A line is defined as the canonical form\r\n    // ax + by + c = 0\r\n    private _a: Fraction;\r\n    private _b: Fraction;\r\n    private _c: Fraction;\r\n    private _OA: Point;\r\n    private _d: Vector;\r\n    private _n: Vector;\r\n    private _exists: boolean\r\n\r\n    private _referencePropriety: LinePropriety\r\n    private _referenceLine: Line\r\n\r\n    static PERPENDICULAR = LinePropriety.Perpendicular\r\n    static PARALLEL = LinePropriety.Parallel\r\n\r\n    constructor(...values: unknown[]) {\r\n\r\n        this._exists = false;\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get exists(): boolean {\r\n        return this._exists;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equation(): Equation {\r\n        return new Equation(new Polynom().parse('xy', this._a, this._b, this._c), new Polynom('0')).simplify();\r\n    }\r\n\r\n    get tex(): { canonical: string, mxh: string, parametric: string } {\r\n        // canonical    =>  ax + by + c = 0\r\n        // mxh          =>  y = -a/b x - c/b\r\n        // parametric   =>  (xy) = OA + k*d\r\n\r\n        let canonical = this.equation;\r\n        // Make sur the first item is positive.\r\n        if (this._a.isNegative()) {\r\n            canonical.multiply(-1);\r\n        }\r\n\r\n        return {\r\n            canonical: canonical.tex,\r\n            mxh: this.slope.isInfinity() ? 'x=' + this.OA.x.tex : 'y=' + new Polynom().parse('x', this.slope, this.height).tex,\r\n            parametric: `${Point.pmatrix('x', 'y')} = ${Point.pmatrix(this._OA.x, this._OA.y)} + k\\\\cdot ${Point.pmatrix(this._d.x, this._d.y)}`\r\n        }\r\n    }\r\n\r\n    get a(): Fraction {\r\n        return this._a;\r\n    }\r\n\r\n    set a(value: Fraction) {\r\n        this._a = value;\r\n    }\r\n\r\n    get b(): Fraction {\r\n        return this._b;\r\n    }\r\n\r\n    set b(value: Fraction) {\r\n        this._b = value;\r\n    }\r\n\r\n    get c(): Fraction {\r\n        return this._c;\r\n    }\r\n\r\n    set c(value: Fraction) {\r\n        this._c = value;\r\n    }\r\n\r\n    get OA(): Point {\r\n        return this._OA;\r\n    }\r\n\r\n    set OA(value: Point) {\r\n        this._OA = value;\r\n    }\r\n\r\n    get d(): Vector {\r\n        return this._d;\r\n    }\r\n\r\n    get n(): Vector {\r\n        return this._n;\r\n    }\r\n\r\n    get normal(): Vector {\r\n        return new Vector(this._a, this._b);\r\n    }\r\n\r\n    get director(): Vector {\r\n        return this._d.clone()\r\n    }\r\n\r\n    set d(value: Vector) {\r\n        this._d = value;\r\n    }\r\n\r\n    get slope(): Fraction {\r\n        return this._a.clone().opposed().divide(this._b);\r\n    }\r\n\r\n    get height(): Fraction {\r\n        return this._c.clone().opposed().divide(this._b);\r\n    }\r\n\r\n// ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse data to a line\r\n     * @param {any} values\r\n     * @returns {Line}\r\n     */\r\n    parse = (...values: unknown[]): Line => {\r\n        this._exists = false;\r\n\r\n        // Nothing is given...\r\n        if (values.length === 0) {\r\n            return this\r\n        }\r\n\r\n        // One value only: already a line (clone it), an Equation, a string (as Equation)\r\n        if (values.length === 1) {\r\n            if (values[0] instanceof Line) {\r\n                // Already a Line\r\n                return values[0].clone()\r\n            } else if (values[0] instanceof Equation) {\r\n                // It's an Equation\r\n                return this.parseEquation(values[0])\r\n            } else if (typeof values[0] === \"string\") {\r\n                // It's a string - create an Equation from it.\r\n                try {\r\n                    let E = new Equation(values[0])\r\n                    return this.parse(E)\r\n                } catch (e) {\r\n                    return this\r\n                }\r\n            }\r\n        }\r\n\r\n        if (values.length === 2) {\r\n            if (values[0] instanceof Point && values[1] instanceof Vector) {\r\n                return this.parseByPointAndVector(values[0], values[1]);\r\n            } else if (values[0] instanceof Point && values[1] instanceof Point) {\r\n                return this.parseByPointAndVector(values[0], new Vector(values[0], values[1]));\r\n            } else if (values[0] instanceof Vector && values[1] instanceof Point) {\r\n                return this.parseByPointAndNormal(values[1], values[0])\r\n            }\r\n        }\r\n\r\n        if (values.length === 3) {\r\n            if (\r\n                (values[0] instanceof Fraction || typeof values[0] === 'number')\r\n                &&\r\n                (values[1] instanceof Fraction || typeof values[1] === 'number')\r\n                &&\r\n                (values[2] instanceof Fraction || typeof values[2] === 'number')\r\n            ) {\r\n                return this.parseByCoefficient(values[0], values[1], values[2]);\r\n            }else if (\r\n                values[0] instanceof Point && values[1] instanceof Vector\r\n            ){\r\n                if(values[2] === LinePropriety.Perpendicular){\r\n                    return this.parseByPointAndNormal(values[0], values[1])\r\n                }else if (values[2] === LinePropriety.Parallel){\r\n                    return this.parseByPointAndVector(values[0], values[1])\r\n                }\r\n            }else if (values[0] instanceof Point && values[1] instanceof Line ) {\r\n                if(values[2]===LinePropriety.Parallel || values[2]===null) {\r\n                    return this.parseByPointAndLine(values[0], values[1], LinePropriety.Parallel)\r\n                }else{\r\n                    return this.parseByPointAndLine(values[0], values[1], LinePropriety.Perpendicular)\r\n                }\r\n            }\r\n        }\r\n\r\n        // TODO: Add the ability to create line from a normal vector\r\n        console.log('Someting wrong happend while creating the line')\r\n        return this;\r\n    }\r\n\r\n    parseEquation = (equ: Equation): Line => {\r\n        // Reorder the eequation\r\n        equ.reorder(true)\r\n\r\n        // It must contain either x, y or both.\r\n        let letters = new Set(equ.letters());\r\n\r\n        // No 'x', no 'y' in the equations\r\n        if (!(letters.has('x') || letters.has('y'))) {\r\n            return this\r\n        }\r\n\r\n        // Another letter in the equation ?\r\n        for (let elem of ['x', 'y']) {\r\n            if (letters.has(elem)) {\r\n                letters.delete(elem)\r\n            }\r\n        }\r\n\r\n        if (letters.size > 0) {\r\n            return this\r\n        }\r\n\r\n        // Everything should be ok now...\r\n        return this.parseByCoefficient(equ.left.monomByLetter('x').coefficient, equ.left.monomByLetter('y').coefficient, equ.left.monomByDegree(0).coefficient)\r\n    }\r\n    parseByCoefficient = (a: Fraction | number, b: Fraction | number, c: Fraction | number): Line => {\r\n        this._a = new Fraction(a);\r\n        this._b = new Fraction(b);\r\n        this._c = new Fraction(c);\r\n\r\n        this._d = new Vector(this._b.clone(), this._a.clone().opposed());\r\n        this._OA = new Point(new Fraction().zero(), this._c.clone());\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    parseByPointAndVector = (P: Point, d: Vector): Line => {\r\n        // OX = OP + k*d\r\n        // x = px + kdx     * dy\r\n        // y = py + kdy     * dx\r\n        // ------------------\r\n        // dy * x = px * dy + kdxdy\r\n        // dx * y = py * dx + kdxdy\r\n        // ------------------\r\n        // dy * x - dx * y = px * dy - py * dx\r\n        // dy * x - dx * y - (px * dy - py * dx) = 0\r\n        this.parseByCoefficient(\r\n            d.y,\r\n            d.x.clone().opposed(),\r\n            P.x.clone().multiply(d.y).subtract(P.y.clone().multiply(d.x)).opposed()\r\n        )\r\n\r\n        // Choose the current values as point and direction vector instead of the automatic version.\r\n        this._OA = P.clone();\r\n        this._d = d.clone();\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    parseByPointAndNormal = (P: Point, n: Vector): Line => {\r\n        return this.parseByCoefficient(\r\n            n.x,\r\n            n.y,\r\n            P.x.clone().multiply(n.x)\r\n                .add(P.y.clone().multiply(n.y)).opposed()\r\n        )\r\n    }\r\n\r\n    parseByPointAndLine = (P: Point, L: Line, orientation?: LinePropriety): Line => {\r\n\r\n        if (orientation === undefined) {\r\n            orientation = LinePropriety.Parallel\r\n        }\r\n\r\n        if (orientation === LinePropriety.Parallel) {\r\n            return this.parseByPointAndNormal(P, L.normal)\r\n        } else if (orientation === LinePropriety.Perpendicular) {\r\n            return this.parseByPointAndNormal(P, L.director)\r\n        }\r\n\r\n        this._exists = false\r\n        return this\r\n    }\r\n\r\n    clone = (): Line => {\r\n        this._a = this._a.clone();\r\n        this._b = this._b.clone();\r\n        this._c = this._c.clone();\r\n\r\n        this._d = this._d.clone();\r\n        this._OA = this._OA.clone();\r\n        this._n = this._n.clone();\r\n\r\n        this._exists = this.exists\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    isParellelTo = (line: Line): Boolean => {\r\n        // Do they have the isSame direction ?\r\n        return this.slope.isEqual(line.slope) && this.height.isNotEqual(line.height);\r\n    }\r\n    isSameAs = (line: Line): Boolean => {\r\n        return this.slope.isEqual(line.slope) && this.height.isEqual(line.height);\r\n    }\r\n    isVertical = (): Boolean => {\r\n        return this.slope.isInfinity()\r\n    }\r\n    simplify = (): Line => {\r\n        let lcm = Numeric.lcm(this._a.denominator, this._b.denominator, this._c.denominator),\r\n            gcd = Numeric.gcd(this._a.numerator, this._b.numerator, this._c.numerator);\r\n\r\n        this.parseByCoefficient(\r\n            this._a.clone().multiply(lcm).divide(gcd),\r\n            this._b.clone().multiply(lcm).divide(gcd),\r\n            this._c.clone().multiply(lcm).divide(gcd),\r\n        )\r\n\r\n        return this\r\n    }\r\n\r\n    simplifyDirection = (): Line => {\r\n        let lcm = Numeric.lcm(this._d.x.denominator, this._d.y.denominator),\r\n            gcd = Numeric.gcd(this._d.x.numerator, this._d.y.numerator);\r\n\r\n        this._d.x.multiply(lcm).divide(gcd);\r\n        this._d.y.multiply(lcm).divide(gcd);\r\n        return this;\r\n    }\r\n    intersection = (line: Line): { point: Point, hasIntersection: boolean, isParallel: boolean, isSame: boolean } => {\r\n        let Pt = new Point(), isParallel = false, isSame = false, hasIntersection = true;\r\n\r\n        // this         => ax+by+c = 0\r\n        // line         => dx+ey+f = 0\r\n        //\r\n        //  aex + bey + ce = 0\r\n        //  dbx + bey + bf = 0\r\n        // (ae-db)x + ce-bf = 0\r\n        //\r\n        //  adx + bdy + cd = 0\r\n        //  adx + aey + af = 0\r\n        // (bd-ae)y + (cd-af)\r\n        //\r\n        // x = (bf-ce)/(ae-db)\r\n        // y = (af-cd)/(bd-ae)\r\n\r\n\r\n        // Theres is no 'y'\r\n        if (this._b.isZero() || line.b.isZero()) {\r\n            // TODO : handle no y in the line canonical form\r\n        }\r\n\r\n        if (this.isParellelTo(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isParallel = true;\r\n        } else if (this.isSameAs(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isSame = true;\r\n        } else {\r\n            Pt.x = this._b.clone().multiply(line.c).subtract(this._c.clone().multiply(line.b))\r\n                .divide(this._a.clone().multiply(line.b).subtract(this._b.clone().multiply(line.a)));\r\n            Pt.y = this._a.clone().multiply(line.c).subtract(this._c.clone().multiply(line.a))\r\n                .divide(this._b.clone().multiply(line.a).subtract(this._a.clone().multiply(line.b)));\r\n        }\r\n\r\n        return {\r\n            point: Pt,\r\n            hasIntersection: !(isParallel || isSame),\r\n            isParallel,\r\n            isSame\r\n        };\r\n    }\r\n\r\n    distanceTo(pt: Point): { value: number, fraction: Fraction, tex: string } {\r\n        let numerator = pt.x.clone().multiply(this._a)\r\n                .add(pt.y.clone().multiply(this._b))\r\n                .add(this._c).abs(),\r\n            d2 = this.normal.normSquare;\r\n\r\n        // The denominator is null - shouldn't be possible\r\n        if (d2.isZero()) {\r\n            return {\r\n                value: NaN,\r\n                tex: 'Not a line',\r\n                fraction: new Fraction().infinite()\r\n            }\r\n        }\r\n        // The denominator is a perfect square - simplify the tex result\r\n        let value = numerator.value / Math.sqrt(d2.value),\r\n            F = numerator.clone().divide(d2.clone().sqrt());\r\n\r\n        // The denominator is a perfect square.\r\n        if (d2.isSquare()) {\r\n            return {\r\n                value,\r\n                tex: F.tex,\r\n                fraction: F\r\n            }\r\n        }\r\n        // Complete answer...\r\n        return {\r\n            value,\r\n            tex: `\\\\frac{${numerator.tex}}{\\\\sqrt{${d2.tex}}}`,\r\n            fraction: F\r\n        };\r\n    }\r\n\r\n    hitSegment(A: Point, B: Point): boolean {\r\n        let iPt = this.intersection(\r\n            new Line(A, B)\r\n        )\r\n\r\n        // There is an intersection point\r\n        if (iPt.hasIntersection) {\r\n            return iPt.point.x.value >= Math.min(A.x.value, B.x.value)\r\n                && iPt.point.x.value <= Math.max(A.x.value, B.x.value)\r\n                && iPt.point.y.value >= Math.min(A.y.value, B.y.value)\r\n                && iPt.point.y.value <= Math.max(A.y.value, B.y.value)\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getValueAtX = (value: Fraction|number): Fraction => {\r\n        const equ = this.equation.clone().isolate('y'),\r\n            F = new Fraction(value)\r\n\r\n        if(equ instanceof Equation){\r\n            return equ.right.evaluate({x: F})\r\n        }\r\n        return\r\n    }\r\n    getValueAtY = (value: Fraction|number): Fraction => {\r\n        const equ = this.equation.clone().isolate('x'),\r\n            F = new Fraction(value)\r\n\r\n        if(equ instanceof Equation){\r\n            return equ.right.evaluate({y: F})\r\n        }\r\n        return\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Special functions\r\n    // ------------------------------------------\r\n    canonicalAsFloatCoefficient(decimals: number): string {\r\n        if (decimals === undefined) {\r\n            decimals = 2;\r\n        }\r\n\r\n        let ca = this._a.value,\r\n            cb = this._b.value,\r\n            cc = this._c.value,\r\n            canonical = '';\r\n\r\n        if (!this._a.isZero()) {\r\n            if (this._a.isOne()) {\r\n                canonical = 'x'\r\n            } else if (this._a.clone().opposed().isOne()) {\r\n                canonical = '-x'\r\n            } else {\r\n                canonical = this._a.value.toFixed(decimals) + 'x'\r\n            }\r\n        }\r\n\r\n        if (!this._b.isZero()) {\r\n            if (this._b.isPositive()) {\r\n                canonical += '+'\r\n            }\r\n            canonical += this._b.value.toFixed(decimals) + 'y'\r\n        }\r\n\r\n        if (!this._c.isZero()) {\r\n            if (this._c.isPositive()) {\r\n                canonical += '+'\r\n            }\r\n            canonical += this._c.value.toFixed(decimals)\r\n        }\r\n\r\n\r\n        return canonical + '=0';\r\n    }\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Line} from \"./line\";\r\nimport {Vector} from \"./vector\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\n/**\r\n * Helper class - a way to identify an object {x: number, y: number}\r\n */\r\nclass PointXY {\r\n    x: number\r\n    y: number\r\n}\r\n\r\nexport class Point {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n    private _exist: Boolean;\r\n\r\n    constructor(...values: unknown[]) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.tex);\r\n        pts.push(this._y.tex);\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n\r\n    get display(): string {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.tex);\r\n        pts.push(this._y.tex);\r\n\r\n        return `(${pts.join(';')})`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...values: unknown[]): Point => {\r\n        // Initialize the value.\r\n        this.zero();\r\n\r\n        // Nothing is given\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        // One element is given - might be already a point !\r\n        if (values.length === 1) {\r\n            // it's already a point - clone it\r\n            if (values[0] instanceof Point) {\r\n                this._x = values[0].x.clone()\r\n                this._y = values[0].y.clone()\r\n                return this\r\n            }\r\n\r\n            // Value is given as string, comma separated.\r\n            if (typeof values[0] === 'string') {\r\n                let xy = values[0].split(',')\r\n                if (xy.length === 2) {\r\n                    this._x = new Fraction(xy[0]).reduce()\r\n                    this._y = new Fraction(xy[1]).reduce()\r\n                    return this\r\n                }\r\n            }\r\n\r\n            // Value given as an object with {x: value, y: value}\r\n            if(values[0] instanceof PointXY){\r\n                    this._x = new Fraction(values[0].x).reduce()\r\n                    this._y = new Fraction(values[0].y).reduce()\r\n                return this\r\n            } else {\r\n                return this.zero()\r\n            }\r\n        }\r\n\r\n        if (values.length === 2) {\r\n            this._x = new Fraction(values[0]).reduce()\r\n            this._y = new Fraction(values[1]).reduce()\r\n            return this\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Point => {\r\n        this._x = this._x.clone()\r\n        this._y = this._y.clone()\r\n\r\n        return this\r\n    }\r\n\r\n    zero = (): Point => {\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    origin = (): Point => {\r\n        this.zero();\r\n        return this;\r\n    }\r\n\r\n    middleOf = (P1: Point, P2: Point): Point => {\r\n        this._x = P1.x.clone().add(P2.x).divide(2);\r\n        this._y = P1.y.clone().add(P2.y).divide(2);\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Display functions\r\n    // ------------------------------------------\r\n    texValues = (numberOfDigits: number): string => {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.value.toFixed(numberOfDigits === undefined ? 2 : numberOfDigits));\r\n        pts.push(this._y.value.toFixed(numberOfDigits === undefined ? 2 : numberOfDigits));\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Static functions\r\n    // ------------------------------------------\r\n    static pmatrix = (a: any, b: any, c?: any): string => {\r\n        if (c === undefined) {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\end{pmatrix}`;\r\n        } else {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\\\\\ ${c.tex ? c.tex : c} \\\\end{pmatrix}`;\r\n        }\r\n    };\r\n\r\n    distanceTo = (item:Point|Line): { value: number, fraction: Fraction, tex: string } => {\r\n        let value = 0, fraction = new Fraction(), tex = ''\r\n\r\n        if(item instanceof Line){\r\n            return item.distanceTo(this)\r\n        }else if(item instanceof Point){\r\n            let V = new Vector(this, item)\r\n\r\n            value = V.norm\r\n            fraction = V.normSquare.sqrt()\r\n            tex = V.normSquare.isSquare() ? fraction.tex : `\\\\sqrt{\\\\frac{ ${V.normSquare.numerator} }{ ${V.normSquare.denominator} }}`\r\n        }\r\n        return { value, fraction, tex }\r\n    }\r\n\r\n    get key(): string {\r\n      return `${this.x.display};${this.y.display}`\r\n}\r\n    isInListOfPoints = (list: Point[]): boolean => {\r\n        const keyList = list.map(x=>x.key)\r\n\r\n        return keyList.includes(this.key)\r\n    }\r\n}\r\n","import {Point} from \"./point\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Vector} from \"./vector\";\r\nimport {Line} from \"./line\";\r\nimport {Equation} from \"../algebra/equation\";\r\n\r\nexport interface remarquableLines {\r\n    'medians': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'mediators': {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line,\r\n        'intersection': Point\r\n    },\r\n    'heights': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'bisectors': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    }\r\n}\r\n\r\nexport class Triangle {\r\n    private _A: Point;\r\n    private _B: Point;\r\n    private _C: Point;\r\n    private _lines: {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line\r\n    };\r\n    private _middles: {\r\n        'AB': Point,\r\n        'AC': Point,\r\n        'BC': Point\r\n    };\r\n    private _remarquables: remarquableLines;\r\n\r\n\r\n    constructor(...values: unknown[]) {\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setters\r\n    // ------------------------------------------\r\n\r\n    get A(): Point {\r\n        return this._A;\r\n    }\r\n\r\n    get B(): Point {\r\n        return this._B;\r\n    }\r\n\r\n    get C(): Point {\r\n        return this._C;\r\n    }\r\n\r\n    get AB(): Vector {\r\n        return this.getSegment('A', 'B');\r\n    }\r\n\r\n    get BA(): Vector {\r\n        return this.getSegment('B', 'A');\r\n    }\r\n\r\n    get BC(): Vector {\r\n        return this.getSegment('B', 'C');\r\n    }\r\n\r\n    get CB(): Vector {\r\n        return this.getSegment('C', 'B');\r\n    }\r\n\r\n    get AC(): Vector {\r\n        return this.getSegment('A', 'C');\r\n    }\r\n\r\n    get CA(): Vector {\r\n        return this.getSegment('C', 'A');\r\n    }\r\n\r\n    get isRectangle(): boolean {\r\n        if (this.AB.isNormalTo(this.BC)) {\r\n            return true;\r\n        }\r\n        if (this.AB.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n        if (this.BC.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    get isEquilateral(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) &&\r\n            this.AB.normSquare.isEqual(this.AC.normSquare);\r\n    }\r\n\r\n    get isIsocele(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) ||\r\n            this.AB.normSquare.isEqual(this.AC.normSquare) ||\r\n            this.BC.normSquare.isEqual(this.AC.normSquare)\r\n    }\r\n\r\n    get lines(): { 'AB': Line, 'BC': Line, 'AC': Line } {\r\n        return this._lines;\r\n    }\r\n\r\n    get remarquables(): remarquableLines {\r\n        return this._remarquables;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Parse values to a triangle. Supported formats:\r\n     * Point, Point, Point\r\n     * x1, y1, x2, y2, x3, y3\r\n     * TODO: Something else ?\r\n     * @param values\r\n     */\r\n    parse = (...values: any): Triangle => {\r\n        if (values.length === 6) {\r\n            // Check if all values are number or fractions.\r\n            let v = values.map((x: any) => new Fraction(x));\r\n            return this.parse(\r\n                new Point(v[0], v[1]),\r\n                new Point(v[2], v[3]),\r\n                new Point(v[4], v[5]),\r\n            )\r\n        } else if (values.length === 3) {\r\n            // Possibilities:\r\n            // - Three points (or part of points, only dict for example, or array (TODO: Add the array syntax for point)\r\n            // - Three lines\r\n            // - Three lines as text.\r\n            if(values.filter((x:any) => typeof x === 'string').length===3) {\r\n                return this.parse( ...values.map((x:string) => new Line(x)) )\r\n            }else if(values.filter((x:any) => x instanceof Line).length===3) {\r\n                // We have three lines\r\n                this._lines = {\r\n                    'AB': values[0],\r\n                    'BC': values[1],\r\n                    'AC': values[2]\r\n                };\r\n\r\n                // Get the intersection points -> build the triangle using these intersection points.\r\n                let intersect = values[0].intersection(values[1]);\r\n                if (intersect.hasIntersection) {\r\n                    this._B = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[1].intersection(values[2]);\r\n                if (intersect.hasIntersection) {\r\n                    this._C = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[2].intersection(values[0]);\r\n                if (intersect.hasIntersection) {\r\n                    this._A = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n            }else {\r\n                // At least, one of the value is not a point.\r\n                if (values.filter((x: any) => (x instanceof Point)).length < 3) {\r\n                    return this.parse(\r\n                        new Point(values[0]),\r\n                        new Point(values[1]),\r\n                        new Point(values[2])\r\n                    )\r\n                }\r\n\r\n                // We have three points.\r\n                this._A = values[0].clone();\r\n                this._B = values[1].clone();\r\n                this._C = values[2].clone();\r\n\r\n                this._lines = {\r\n                    'AB': new Line(this._A, this._B),\r\n                    'BC': new Line(this._B, this._C),\r\n                    'AC': new Line(this._A, this._C)\r\n                };\r\n            }\r\n        } else if (values.length === 1) {\r\n            if (values[0] instanceof Triangle) {\r\n                return values[0].clone();\r\n            }\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the Triangle class\r\n     */\r\n    clone = (): Triangle => {\r\n        this._A = this._A.clone();\r\n        this._B = this._B.clone();\r\n        this._C = this._C.clone();\r\n\r\n        this._lines = {\r\n            'AB': this._lines.AB.clone(),\r\n            'BC': this._lines.BC.clone(),\r\n            'AC': this._lines.AC.clone()\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Triangle operations and properties\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Generate the Line object for the three segments of the triangle\r\n     */\r\n    private _updateTriangle = () => {\r\n        this._middles = {\r\n            'AB': new Point().middleOf(this._A, this._B),\r\n            'AC': new Point().middleOf(this._A, this._C),\r\n            'BC': new Point().middleOf(this._B, this._C)\r\n        }\r\n\r\n        this._remarquables = this._calculateRemarquableLines();\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the Point class for the given name\r\n     * @param ptName\r\n     */\r\n    private getPointByName = (ptName: string): Point => {\r\n        switch (ptName.toUpperCase()) {\r\n            case 'A':\r\n                return this._A;\r\n            case 'B':\r\n                return this._B;\r\n            case 'C':\r\n                return this._C;\r\n        }\r\n\r\n        // Something went wrong ! Return the first point\r\n        return this._A;\r\n    }\r\n    /**\r\n     * Get the vector for the segment given by name.\r\n     * @param ptName1\r\n     * @param ptName2\r\n     */\r\n    private getSegment = (ptName1: string, ptName2: string): Vector => {\r\n        return new Vector(\r\n            this.getPointByName(ptName1),\r\n            this.getPointByName(ptName2)\r\n        );\r\n    }\r\n\r\n    private _calculateRemarquableLines = (): remarquableLines => {\r\n        let remarquables: remarquableLines = {\r\n            'medians': {\r\n                'A': new Line(this._A, this._middles.BC),\r\n                'B': new Line(this._B, this._middles.AC),\r\n                'C': new Line(this._C, this._middles.AB),\r\n                'intersection': null\r\n            },\r\n            'mediators': {\r\n                'AB': new Line(this._middles.AB, new Vector(this._A, this._B).normal()),\r\n                'AC': new Line(this._middles.AC, new Vector(this._A, this._C).normal()),\r\n                'BC': new Line(this._middles.BC, new Vector(this._B, this._C).normal()),\r\n                'intersection': null\r\n            },\r\n            'heights': {\r\n                'A': new Line(this._A, new Vector(this._B, this._C).normal()),\r\n                'B': new Line(this._B, new Vector(this._A, this._C).normal()),\r\n                'C': new Line(this._C, new Vector(this._A, this._B).normal()),\r\n                'intersection': null\r\n            },\r\n            'bisectors': {\r\n                'A': this._calculateBisectors('A'),\r\n                'B': this._calculateBisectors('B'),\r\n                'C': this._calculateBisectors('C'),\r\n                'intersection': null\r\n            }\r\n        }\r\n\r\n        // As it's a triangle, we assume the lines are intersecting and aren't parallel or superposed.\r\n        remarquables.medians.intersection = remarquables.medians.A.intersection(remarquables.medians.B).point;\r\n        remarquables.mediators.intersection = remarquables.mediators.AB.intersection(remarquables.mediators.BC).point;\r\n        remarquables.heights.intersection = remarquables.heights.A.intersection(remarquables.heights.B).point;\r\n        remarquables.bisectors.intersection = remarquables.bisectors.A.intersection(remarquables.bisectors.B).point;\r\n\r\n        // Everything was calculated for the remarquable lines.\r\n        return remarquables;\r\n    }\r\n\r\n    private _calculateBisectors = (pt: string): Line => {\r\n        let tlines = this.lines, d1, d2;\r\n\r\n        if(pt==='A'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.AC;\r\n        }else if(pt==='B'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.BC;\r\n        }else if(pt==='C'){\r\n            d1 = tlines.BC;\r\n            d2 = tlines.AC;\r\n        }\r\n\r\n        let b1 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm)).reorder(true).simplify()),\r\n            b2 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm).opposed()).reorder(true).simplify());\r\n\r\n        // Must determine which bisectors is in the triangle\r\n        if(pt==='A'){\r\n            return b1.hitSegment(this.B, this.C)?b1:b2;\r\n        }\r\n        if(pt==='B'){\r\n            return b1.hitSegment(this.A, this.C)?b1:b2;\r\n        }\r\n        if(pt==='C'){\r\n            return b1.hitSegment(this.B, this.A)?b1:b2;\r\n        }\r\n\r\n        // Default returns the first bisector\r\n        return b1;\r\n    }\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Point} from \"./point\";\r\n\r\nexport class Vector {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n\r\n    constructor(...values: unknown[]) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get normSquare(): Fraction {\r\n        return this._x.clone().pow(2).add(this._y.clone().pow(2));\r\n    }\r\n\r\n    get norm(): number {\r\n        return Math.sqrt(this.normSquare.value);\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\begin{pmatrix}${this._x.tex} \\\\\\\\\\ ${this._y.tex} \\\\end{pmatrix}`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Vector => {\r\n        // TODO: Must be more strict about what is given and limit to two dimensional vectors.p\r\n        // Maybe more than one value was given...\r\n        // Initialize the vector\r\n        this.zero();\r\n\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        if (values.length === 1) {\r\n            if (values[0] instanceof Vector) {\r\n                return values[0].clone()\r\n            } else {\r\n                return this._parseString(values[0])\r\n            }\r\n        }\r\n\r\n        if (values.length >= 2) {\r\n            // Two points are given - skip the third value.\r\n            if (values[0] instanceof Point && values[1] instanceof Point) {\r\n                this._x = values[1].x.clone().subtract(values[0].x)\r\n                this._y = values[1].y.clone().subtract(values[0].y)\r\n                return this;\r\n            }\r\n\r\n            // Fractions or a number are give\r\n            if (values[0] instanceof Fraction || !isNaN(values[0])) {\r\n                this._x = new Fraction(values[0])\r\n            }\r\n            if (values[1] instanceof Fraction || !isNaN(values[1])) {\r\n                this._y = new Fraction(values[1])\r\n            }\r\n\r\n            if(\r\n                (typeof values[0] === 'object' && !isNaN(values[0].x) && !isNaN(values[0].x)) &&\r\n                (typeof values[1] === 'object' && !isNaN(values[1].x) && !isNaN(values[1].x))\r\n            ){\r\n                this._x = new Fraction(+values[1].x-values[0].x)\r\n                this._y = new Fraction(+values[1].y-values[0].y)\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Vector => {\r\n        let V = new Vector();\r\n\r\n        if (this._x !== null) {\r\n            V.x = this._x.clone();\r\n        }\r\n        if (this._y !== null) {\r\n            V.y = this._y.clone();\r\n        }\r\n        return V;\r\n    }\r\n\r\n    reset = (): Vector => {\r\n        this._x = null;\r\n        this._y = null;\r\n        return this;\r\n    }\r\n\r\n    zero = (): Vector => {\r\n        this.reset();\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    one = (): Vector => {\r\n        this._x = new Fraction();\r\n        this._y = new Fraction();\r\n        return this;\r\n    }\r\n\r\n    private _parseString = (value: string): Vector => {\r\n        // Split comma, semi colon or single space.\r\n        let components = value.split(/[,;\\s]/g);\r\n\r\n        // Validate the fraction values.\r\n        this.x = new Fraction(components[0] || null);\r\n        this.y = new Fraction(components[1] || null);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Vector => {\r\n        this._x.opposed();\r\n        this._y.opposed();\r\n        return this;\r\n    }\r\n\r\n    add = (V: Vector): Vector => {\r\n        this._x.add(V.x);\r\n        this._y.add(V.y);\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (V: Vector): Vector => {\r\n        return this.add(V.clone().opposed());\r\n    }\r\n\r\n    scalarProductWithVector = (V: Vector): Fraction => {\r\n        // TODO: Add the scalar factor !!!!\r\n        return this._x.clone().multiply(V.x).add(this._y.clone().multiply(V.y));\r\n    }\r\n\r\n    static scalarProduct = (v1: Vector, v2: Vector): number => {\r\n        // TODO: Transform to fraction with nthroot.\r\n        return v1.x.value * v2.x.value + v1.y.value * v2.y.value;\r\n    };\r\n\r\n    normal = (): Vector => {\r\n        let x = this.x.clone().opposed(), y = this.y.clone();\r\n        this._x = y;\r\n        this._y = x;\r\n        return this;\r\n    }\r\n\r\n    isNormalTo = (v: Vector): boolean => {\r\n        return this.scalarProductWithVector(v).isZero()\r\n    }\r\n\r\n    multiplyByScalar = (k: any): Vector => {\r\n        let scalar = new Fraction(k);\r\n        this._x.multiply(scalar);\r\n        this._y.multiply(scalar);\r\n        return this;\r\n    }\r\n\r\n    divideByScalar = (k: any): Vector => {\r\n        return this.multiplyByScalar(new Fraction(k).invert());\r\n    }\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    simplify = (): Vector => {\r\n        // Multiply by the lcm of denominators.\r\n        return this.multiplyByScalar(Numeric.lcm(this._x.denominator, this._y.denominator))\r\n            .divideByScalar(Numeric.gcd(this._x.numerator, this._y.numerator));\r\n    }\r\n\r\n    angleWith = (V: Vector, sharp?: Boolean, radian?: Boolean): number => {\r\n        let scalar = this.scalarProductWithVector(V).value,\r\n            toDegree = radian ? 1 : 180 / Math.PI;\r\n        if (sharp) {\r\n            scalar = Math.abs(scalar);\r\n        }\r\n\r\n        return toDegree * Math.acos(scalar / (this.norm * V.norm));\r\n    }\r\n}\r\n","export class Numeric{\r\n    static round(value:number, decimals:number=2):number {\r\n        return Number(Math.round(Number(value+'e'+decimals))+'e-'+decimals);\r\n    }\r\n\r\n    /**\r\n     * Get the list of the nth first prime numbers.\r\n     * @param nb : number of primes to choose from\r\n     */\r\n    static prime(nb?:number):number[]{\r\n        let primes:number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973];\r\n        if(nb === undefined){\r\n            return primes;\r\n        }else{\r\n            return primes.slice(0,Math.max(primes.length,nb));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the list of all dividers of a number.\r\n     * @param value\r\n     */\r\n    static dividers(value:number):number[]{\r\n        let D: number[];\r\n        const maxV = Math.sqrt(Math.abs(value));\r\n\r\n        // Initialize the list of dividers.\r\n        D = [];\r\n\r\n        for(let i=1; i<=maxV; i++){\r\n            if(value%i===0){\r\n                D.push(i);\r\n                D.push(value/i);\r\n            }\r\n        }\r\n\r\n        // Order numbers.\r\n        D.sort(function(a, b){return a-b;});\r\n\r\n        // Make sure the array of value is unique.\r\n        return [...new Set(D)];\r\n    }\r\n    /**\r\n     * Great Common Divisor\r\n     * @param values : number values\r\n     */\r\n    static gcd(...values:number[]):number{\r\n        // Define the gcd for two number\r\n        let gcd2 = function(a:number,b:number):number{\r\n            if(b===0){return a;}\r\n            return gcd2(b, a%b);\r\n        };\r\n\r\n        let g:number = 1,\r\n            i:number = 2;\r\n\r\n        // Nothing is given\r\n        if(values.length===0){return 1;}\r\n        // Only one number is given\r\n        if(values.length===1){\r\n            // The first number is zero\r\n            if(values[0]===0){return 1;}\r\n            // Return the number\r\n            return values[0];\r\n        }\r\n\r\n        // We have at least 2 numbers.\r\n        g = gcd2(values[0],values[1]);\r\n\r\n        // The gcd of the two first value is one ? It's already finished.\r\n        if(g===1){return 1;}\r\n\r\n        // The current gcd isn't one. Continue with all next values.\r\n        for(i=2; i<values.length; i++){\r\n            g = gcd2(g, values[i]);\r\n            // Escape if gcd is already one.\r\n            if(g===1){break;}\r\n        }\r\n\r\n        return Math.abs(g);\r\n    }\r\n\r\n    /**\r\n     * Least Common Multiple\r\n     * @param values: list of numbers\r\n     */\r\n    static lcm(...values:number[]):number{\r\n        return values.reduce(function(a,b){\r\n            return Math.abs(a * b / Numeric.gcd(a, b));\r\n        });\r\n    }\r\n\r\n    static pythagoricianTripletsWithTarget(target: number, targetIsSquare?:boolean): number[][] {\r\n        // méthode inverse, à partir du triplet.\r\n        const triplets = [],\r\n            targetValue = targetIsSquare===true?+target:target**2\r\n        for(let u = 0; u <= target; u++){\r\n            for(let v = 0; v <=target; v++){\r\n                if(u**2+v**2===targetValue){\r\n                    triplets.push([u, v, target])\r\n                }\r\n            }\r\n        }\r\n\r\n        return triplets\r\n    }\r\n}","import {rndPolynom} from \"./rndPolynom\";\r\nimport {rndMonom} from \"./rndMonom\";\r\nimport {rndHelpers} from \"./rndHelpers\";\r\nimport {randomCoefficientConfig, randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {rndFraction} from \"./rndFraction\";\r\nimport {Polynom} from \"../algebra/polynom\";\r\nimport {Monom} from \"../algebra/monom\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\nexport * from \"./rndTypes\"\r\n\r\nexport namespace Random {\r\n    export function polynom(config?: randomPolynomConfig): Polynom {\r\n        return (new rndPolynom(config)).generate()\r\n    }\r\n\r\n    export function monom(config?: randomMonomConfig): Monom {\r\n        return (new rndMonom(config)).generate()\r\n    }\r\n\r\n    export function fraction(config?: randomCoefficientConfig): Fraction {\r\n        return (new rndFraction(config)).generate()\r\n    }\r\n\r\n    export function number(from: number, to: number): number {\r\n        return rndHelpers.randomInt(from, to)\r\n    }\r\n\r\n    export function numberSym(max: number, allowZero?: boolean): number {\r\n        return rndHelpers.randomIntSym(max, allowZero)\r\n    }\r\n\r\n    export function bool(percent?: number): boolean {\r\n        return rndHelpers.randomBool(percent)\r\n    }\r\n\r\n    export function array(arr: any[], number?: number): any[] {\r\n        return rndHelpers.randomArray(arr, number)\r\n    }\r\n\r\n    export function item(arr: any[]): any {\r\n        return rndHelpers.randomItem(arr)\r\n    }\r\n\r\n    export function shuffle(arr: any[]): any {\r\n        rndHelpers.shuffleArray(arr)\r\n    }\r\n}","export class randomCore {\r\n    protected _config: Object\r\n    protected _defaultConfig: Object\r\n    mergeConfig = (config: Object, defaultConfig: Object): Object => {\r\n        if (config !== undefined) {\r\n            return {...defaultConfig, ...config}\r\n        }\r\n        return defaultConfig\r\n    }\r\n\r\n    generate = (): unknown => {\r\n        return undefined\r\n    }\r\n\r\n    config = (config: Object): randomCore => {\r\n        this._config = this.mergeConfig(config, this._defaultConfig)\r\n        return this\r\n    }\r\n}","import {randomCore} from \"./randomCore\";\r\nimport {randomCoefficientConfig, randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {Random} from \"./random\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\n/**\r\n * Create a random monom based on a based configuration\r\n */\r\nexport class rndFraction extends randomCore {\r\n    declare protected _config: randomCoefficientConfig\r\n    declare protected _defaultConfig: randomCoefficientConfig\r\n\r\n    constructor(userConfig?: randomCoefficientConfig) {\r\n        super();\r\n\r\n        this._defaultConfig = {\r\n            negative: true,\r\n            max: 10,\r\n            reduced: true,\r\n            zero: true,\r\n            natural: false\r\n        }\r\n\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Fraction => {\r\n        let Q = new Fraction()\r\n\r\n        if(this._config.negative){\r\n            Q.numerator = Random.numberSym(this._config.max, this._config.zero)\r\n        }else {\r\n            Q.numerator = Random.number(this._config.zero ? 0 : 1, this._config.max)\r\n        }\r\n        if(this._config.natural){\r\n            Q.denominator = 1\r\n        }else {\r\n            Q.denominator = Random.number(1, this._config.max)\r\n        }\r\n\r\n        return this._config.reduced?Q.reduce():Q\r\n    }\r\n}\r\n","/**\r\n * Random helpers\r\n */\r\nexport class rndHelpers {\r\n\r\n    /**\r\n     * Random boolean with a percent ratio\r\n     * @param percent\r\n     */\r\n    static randomBool(percent:number=0.5):boolean{\r\n        return Math.random()<percent;\r\n    }\r\n\r\n    /**\r\n     * Random integer between two values.\r\n     * @param a (number) : From this value to the second value. If the second is ommited, this value is the max value.\r\n     * @param b (number) : To this value. If this is ommited.\r\n     */\r\n    static randomInt(a:number, b?:number):number{\r\n        if(b===undefined){return this.randomInt(0,a);}\r\n\r\n        return Math.floor(Math.random() * (b - a + 1) + a);\r\n    }\r\n\r\n    /**\r\n     * Random integer between -max and max value.\r\n     * @param max (number) : determine the limits.\r\n     * @param zero (bool) : determine if zero is allowed or not.\r\n     */\r\n    static randomIntSym(max:number, zero?:boolean):number{\r\n        if(zero===false){\r\n            return this.randomBool()?this.randomInt(1,max):-this.randomInt(1,max);\r\n        }else{\r\n            return this.randomInt(-max, max);\r\n        }\r\n    }\r\n\r\n    static randomArray(arr: any[], number?:number):any[]{\r\n        if(number===undefined){number = 1}\r\n\r\n        // Return a clone array\r\n        if(arr.length<=0){return Object.values(arr)}\r\n\r\n        // Randomize the array and return the n first elements.\r\n        return rndHelpers.shuffleArray(arr).slice(0,number);\r\n    }\r\n\r\n    static randomItem(arr: any[]): any{\r\n        if(arr.length===0){return ''}\r\n        return this.randomArray(arr, 1)[0]\r\n    }\r\n\r\n    static shuffleArray(arr: any[]): any[] {\r\n        // The Fisher-Yates algorithm\r\n        let shuffleArray = Object.values(arr)\r\n        for (let i = shuffleArray.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            const temp = shuffleArray[i];\r\n            shuffleArray[i] = shuffleArray[j];\r\n            shuffleArray[j] = temp;\r\n        }\r\n\r\n        return shuffleArray;\r\n    }\r\n\r\n}","import {randomCore} from \"./randomCore\";\r\nimport {randomMonomConfig} from \"./rndTypes\";\r\nimport {Random} from \"./random\";\r\nimport {Monom} from \"../algebra/monom\";\r\n\r\n/**\r\n * Create a random monom based on a based configuration\r\n */\r\nexport class rndMonom extends randomCore {\r\n    declare protected _config: randomMonomConfig\r\n    declare protected _defaultConfig: randomMonomConfig\r\n\r\n    constructor(userConfig?: randomMonomConfig) {\r\n        super();\r\n\r\n        this._defaultConfig = {\r\n            letters: 'x',\r\n            degree: 2,\r\n            fraction: true,\r\n            zero: false\r\n        }\r\n\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Monom => {\r\n        // Create a monom instance\r\n        let M = new Monom()\r\n\r\n        // Generate the coefficient\r\n        if (typeof this._config.fraction === \"boolean\") {\r\n            M.coefficient = Random.fraction({\r\n                zero: this._config.zero,\r\n                reduced: true,\r\n                natural: !this._config.fraction\r\n            })\r\n        } else {\r\n            M.coefficient = Random.fraction(this._config.fraction)\r\n        }\r\n\r\n        // Calculate the degree of the monom\r\n        if (this._config.letters.length > 1) {\r\n            // Initialise each items...\r\n            for (let L of this._config.letters.split('')) {\r\n                M.setLetter(L, 0);\r\n            }\r\n            for (let i = 0; i < this._config.degree; i++) {\r\n                const L = Random.item(this._config.letters.split(\"\"))\r\n                M.setLetter(L, M.degree(L).clone().add(1))\r\n            }\r\n        } else {\r\n            M.setLetter(this._config.letters, this._config.degree)\r\n        }\r\n\r\n        return M\r\n    }\r\n}\r\n","import {randomCore} from \"./randomCore\";\r\nimport {randomPolynomConfig} from \"./rndTypes\";\r\nimport {rndMonom} from \"./rndMonom\";\r\nimport {Random} from \"./random\";\r\nimport {Polynom} from \"../algebra/polynom\";\r\nimport {Monom} from \"../algebra/monom\";\r\n\r\n/**\r\n * Random polynoms\r\n */\r\nexport class rndPolynom extends randomCore {\r\n    declare protected _config: randomPolynomConfig\r\n    declare protected _defaultConfig: randomPolynomConfig\r\n\r\n    constructor(userConfig?: randomPolynomConfig) {\r\n        super();\r\n\r\n        // Default config for a random polynom\r\n        this._defaultConfig = {\r\n            letters: 'x',\r\n            degree: 2,\r\n            fraction: false,\r\n            zero: false,\r\n            unit: false,\r\n            factorable: false,\r\n            allowNullMonom: true,\r\n            numberOfMonoms: 0,\r\n            positive: true\r\n        }\r\n\r\n        // Merge config with initialiser\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Polynom => {\r\n        if(this._config.factorable && this._config.degree>1){\r\n            return this.factorable()\r\n        }\r\n\r\n        // Create the polynom\r\n        let P = new Polynom().empty(),\r\n            M: Monom\r\n\r\n        for (let i = this._config.degree; i >= 0; i--) {\r\n            // Create monom of corresponding degree.\r\n            M = new rndMonom({\r\n                letters: this._config.letters,\r\n                degree: i,\r\n                fraction: this._config.fraction,\r\n                zero: (i === this._config.degree) ? false : this._config.allowNullMonom\r\n            }).generate()\r\n\r\n            // If degree is the greatest and unit is true, set the monom value to one.\r\n            if (this._config.unit && this._config.degree === i) {\r\n                M.coefficient.one()\r\n            }\r\n\r\n            // Add to the polynom\r\n            P.add(M)\r\n        }\r\n\r\n        // Make sure the first monom is positive.\r\n        if(this._config.positive && P.monomByDegree().coefficient.isNegative()){\r\n            P.monomByDegree().coefficient.opposed()\r\n        }\r\n\r\n        // If the number of monoms is greater than the allowed value, remove some of them... except the first one !\r\n        if (this._config.numberOfMonoms > 0 && this._config.numberOfMonoms < P.length) {\r\n            // Get the greatest degree monom\r\n            let M = P.monomByDegree().clone()\r\n            P.monoms = Random.array(P.monoms.slice(1), this._config.numberOfMonoms-1)\r\n            P.add(M).reorder().reduce()\r\n        }\r\n        return P\r\n    }\r\n\r\n    factorable = (): Polynom => {\r\n        let P = new Polynom().one()\r\n\r\n        let _factorableConfig = {...this._config}\r\n        _factorableConfig.degree = 1\r\n        _factorableConfig.factorable = false\r\n\r\n        for(let i=0; i<this._config.degree;i++){\r\n            P.multiply(Random.polynom(_factorableConfig))\r\n        }\r\n\r\n        return P\r\n    }\r\n}","export type tokenType = {\r\n    [key: string]: {\r\n        precedence: number,\r\n        associative: string,\r\n        type: string\r\n    }\r\n}\r\n\r\nexport const tokenConstant: { [Key: string]: number } = {\r\n    pi: Math.PI,\r\n    e: Math.exp(1)\r\n}\r\n\r\nexport enum ShutingyardType {\r\n    VARIABLE = 'variable',\r\n    COEFFICIENT = 'coefficient',\r\n    OPERATION = 'operation',\r\n    CONSTANT = 'constant',\r\n    FUNCTION = 'function',\r\n    MONOM = 'monom'\r\n}\r\n\r\nexport enum ShutingyardMode {\r\n    POLYNOM = 'polynom',\r\n    SET = 'set',\r\n    NUMERIC = 'numeric'\r\n}\r\n\r\nexport type Token = { token: string, tokenType: string }\r\n\r\nexport class Shutingyard {\r\n    readonly _mode: ShutingyardMode;\r\n    private _tokenConfig: tokenType;\r\n    private _tokenConstant: { [Key: string]: number }\r\n    private _tokenKeys: string[]\r\n    private _uniformize: boolean;\r\n\r\n    constructor(mode?: ShutingyardMode) {\r\n        this._mode = typeof mode === 'undefined' ? ShutingyardMode.POLYNOM : mode;\r\n        this.tokenConfigInitialization()\r\n    }\r\n\r\n    private _rpn: Token[] = [];\r\n\r\n    // Getter\r\n    get rpn() {\r\n        // console.log(this._rpn)\r\n        return this._rpn;\r\n    }\r\n\r\n    /**\r\n     * Determin if the token is a defined operation\r\n     * Defined operations: + - * / ^ sin cos tan\r\n     * @param token\r\n     */\r\n    // isOperation(token: string): boolean {\r\n    //     if (token[0].match(/[+\\-*/^]/g)) {\r\n    //         return true;\r\n    //     }\r\n    //     //\r\n    //     // if (token.match(/^sin|cos|tan/g)) {\r\n    //     //     return true;\r\n    //     // }\r\n    //\r\n    //     return false;\r\n    // }\r\n\r\n    tokenConfigInitialization(): tokenType {\r\n        if (this._mode === ShutingyardMode.SET) {\r\n            this._tokenConfig = {\r\n                '&': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '|': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '!': {precedence: 4, associative: 'right', type: ShutingyardType.OPERATION},\r\n                '-': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION}\r\n            }\r\n            this._uniformize = false;\r\n        } else if (this._mode === ShutingyardMode.NUMERIC) {\r\n            this._tokenConfig = {\r\n                '^': {precedence: 4, associative: 'right', type: ShutingyardType.OPERATION},\r\n                '*': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '/': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '+': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '-': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '%': {precedence: 3, associative: 'right', type: ShutingyardType.OPERATION},\r\n                'sin': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'cos': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'tan': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'sqrt': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n            }\r\n            this._uniformize = false\r\n        } else {\r\n            this._tokenConfig = {\r\n                '^': {precedence: 4, associative: 'right', type: ShutingyardType.OPERATION},\r\n                '*': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '/': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '+': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '-': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                // '%': {precedence: 3, associative: 'right', type: ShutingyardType.OPERATION},\r\n                // 'sin': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                // 'cos': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                // 'tan': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n            }\r\n            this._uniformize = true\r\n        }\r\n\r\n        this._tokenKeys = Object.keys(this._tokenConfig).sort((a, b) => b.length - a.length)\r\n        return this._tokenConfig\r\n    }\r\n\r\n    /**\r\n     * Get the next token to analyse.\r\n     * @param expr (string) Expression to analyse\r\n     * @param start (number) CUrrent position in the expr string.\r\n     */\r\n    NextToken(expr: string, start: number): [string, number, string] {\r\n        let token: string, tokenType: string;\r\n        token = '';\r\n        tokenType = '';\r\n        // Case of parenthesis or comma (generic items)\r\n        if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        } else {\r\n            // Order token keys by token characters length (descending)\r\n            // TODO: this is done each time ! SHould be done once !\r\n            // const keys = Object.keys(this._tokenConfig).sort((a,b)=>b.length-a.length)\r\n\r\n            // Extract operation and function tokens\r\n            for (let key of this._tokenKeys) {\r\n                if (expr.substring(start, start + key.length) === key) {\r\n                    token += key;\r\n                    tokenType = this._tokenConfig[key].type\r\n                    break\r\n                }\r\n            }\r\n\r\n            // Extract constant\r\n            for (let key in tokenConstant) {\r\n                if (expr.substring(start, start + key.length) === key) {\r\n                    token += key;\r\n                    tokenType = ShutingyardType.CONSTANT\r\n                    break\r\n                }\r\n            }\r\n\r\n            if (token === '') {\r\n                // No function found ! Might be a coefficient !\r\n                if (expr[start].match(/[0-9]/)) {\r\n                    if (this._mode === ShutingyardMode.POLYNOM && false) {\r\n                        token = expr.substring(start).match(/^([0-9.,/]+)/)[0]\r\n                    } else {\r\n                        token = expr.substring(start).match(/^([0-9.,]+)/)[0]\r\n                    }\r\n                    tokenType = ShutingyardType.COEFFICIENT\r\n                } else if (expr[start].match(/[a-zA-Z]/)) {\r\n                    token = expr.substring(start).match(/^([a-zA-Z])/)[0]\r\n                    tokenType = ShutingyardType.VARIABLE\r\n                } else {\r\n                    console.log('Unidentified token', expr[start], expr, start)\r\n                    token = expr[start]\r\n                    tokenType = ShutingyardType.MONOM\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    /**\r\n     * Sanitize an expression by adding missing common operation (multiplication between parentheseses)\r\n     * @param expr\r\n     * @constructor\r\n     */\r\n    Uniformizer(expr: string): string {\r\n        // Determiner if need to be uniformized\r\n        if (!this._uniformize) {\r\n            return expr\r\n        }\r\n\r\n        let expr2;\r\n\r\n        // Replace missing multiplication between two parenthese\r\n        expr2 = expr.replace(/\\)\\(/g, ')*(');\r\n\r\n        // Replace missing multiplication between number or setLetter and parenthese.\r\n\r\n        // 3x(x-4) => 3x*(x-4)\r\n        expr2 = expr2.replace(/([\\da-zA-Z])(\\()/g, \"$1*$2\");\r\n\r\n        // (x-4)3x => (x-4)*3x\r\n        expr2 = expr2.replace(/(\\))([\\da-zA-Z])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between number and letters.\r\n        // 3x => 3*x\r\n        expr2 = expr2.replace(/([0-9])([a-zA-Z])/g, \"$1*$2\");\r\n        expr2 = expr2.replace(/([a-zA-Z])([0-9])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between letters ?\r\n        // TODO: More robust solution to handle all letters ?\r\n        expr2 = expr2.replace(/([abcxyz])([abcxyz])/g, \"$1*$2\");\r\n\r\n        // Restore operation auto formating (prevent adding the mutliplcation star)\r\n        // TODO: Accept list of functions\r\n        let fnToken = ['sin', 'cos', 'tan']\r\n        for (let token of fnToken) {\r\n            expr2 = expr2.replace(new RegExp(token + '\\\\*', 'g'), token);\r\n        }\r\n\r\n        return expr2;\r\n    }\r\n\r\n    /**\r\n     * Parse an expression using the shutting yard tree algorithms\r\n     * @param expr (string) Expression to analyse\r\n     * Returns a RPN list of items.\r\n     * @param operators\r\n     */\r\n    parse(expr: string, operators?: string[]): Shutingyard {\r\n        let outQueue: { token: string, tokenType: string }[] = [],    // Output queue\r\n            opStack: { token: string, tokenType: string }[] = [],     // Operation queue\r\n            token: string = '',\r\n            tokenPos: number = 0,\r\n            tokenType: string = '',\r\n            previousOpStatckLength = 0\r\n\r\n        expr = this.Uniformizer(expr);\r\n\r\n        let securityLoopLvl1 = 50,\r\n            securityLoopLvl2_default = 50,\r\n            securityLoopLvl2;\r\n\r\n        while (tokenPos < expr.length) {\r\n            securityLoopLvl1--;\r\n            if (securityLoopLvl1 === 0) {\r\n                console.log('SECURITY LEVEL 1 EXIT');\r\n                break;\r\n            }\r\n\r\n            // Get the next token and the corresponding new (ending) position\r\n            [token, tokenPos, tokenType] = this.NextToken(expr, tokenPos);\r\n\r\n            switch (tokenType) {\r\n                case 'monom':\r\n                case 'coefficient':\r\n                case 'variable':\r\n                case 'constant':\r\n                    outQueue.push({\r\n                        token,\r\n                        tokenType\r\n                    });\r\n                    // if(previousOpStatckLength == opStack.length && outQueue.length>=2){\r\n                    //     console.log('opStatckLength', outQueue, opStack.length)\r\n                    //     outQueue.push('*')\r\n                    // }\r\n                    break;\r\n                case 'operation':\r\n                    previousOpStatckLength = opStack.length;\r\n                    //If the token is an operator, o1, then:\r\n                    if (opStack.length > 0) {\r\n                        let opTop = opStack[opStack.length - 1];\r\n\r\n\r\n                        securityLoopLvl2 = +securityLoopLvl2_default;\r\n\r\n                        //while there is an operator token o2, at the top of the operator stack and\r\n                        while (opTop.token in this._tokenConfig && (\r\n                                //either o1 is left-associative and its precedence is less than or equal to that of o2,\r\n                                (this._tokenConfig[token].associative === 'left' && this._tokenConfig[token].precedence <= this._tokenConfig[opTop.token].precedence)\r\n                                ||\r\n                                //or o1 is right associative, and has precedence less than that of o2,\r\n                                (this._tokenConfig[token].associative === 'right' && this._tokenConfig[token].precedence < this._tokenConfig[opTop.token].precedence)\r\n                            )\r\n                            ) {\r\n\r\n                            /* Security exit ! */\r\n                            securityLoopLvl2--;\r\n                            if (securityLoopLvl2 === 0) {\r\n                                console.log('SECURITY LEVEL 2 OPERATION EXIT');\r\n                                break;\r\n                            }\r\n\r\n                            // Add the operation to the queue\r\n                            outQueue.push((opStack.pop()) || {token: '', tokenType: 'operation'});\r\n\r\n                            // Get the next operation on top of the Stack.\r\n                            if (opStack.length === 0) {\r\n                                break;\r\n                            }\r\n                            opTop = opStack[opStack.length - 1];\r\n                        }\r\n                    }\r\n                    //at the end of iteration push o1 onto the operator stack\r\n                    opStack.push({token, tokenType});\r\n                    break;\r\n                case 'function-argument':\r\n                    // TODO: check if the opStack exist.\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 0) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 FUNCTION ARGUMENT EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token, tokenType});\r\n                    }\r\n                    break;\r\n                case '(':\r\n                    opStack.push({token, tokenType});\r\n                    // Add an empty value if next element is negative.\r\n                    if (expr[tokenPos] === '-') {\r\n                        outQueue.push({token: '0', tokenType: 'coefficient'});\r\n                    }\r\n                    break;\r\n                case ')':\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    //Until the token at the top of the stack is a left parenthesis, pop operators off the stack onto the output queue.\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 1 /*Maybe zero !? */) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 CLOSING PARENTHESE EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token, tokenType});\r\n                    }\r\n\r\n                    //Pop the left parenthesis from the stack, but not onto the output queue.\r\n                    opStack.pop();\r\n                    break;\r\n                case 'function':\r\n                    opStack.push({token, tokenType});\r\n                    break;\r\n                default:\r\n                    // In theory, everything should be handled.\r\n                    console.log(`SHUTING YARD: ${tokenType} : ${token} `);\r\n            }\r\n\r\n            // Output\r\n            // console.log(outQueue.concat(opStack.reverse()).join(\" \"));\r\n        }\r\n\r\n        // console.log(outQueue.concat(opStack.reverse()));\r\n        this._rpn = outQueue.concat(opStack.reverse());\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(607);\n"],"names":["ShutingYard","Shutingyard","Numeric","NumExp","Fraction","Root","NthRoot","Monom","Polynom","Equation","LinearSystem","Rational","Logicalset","Random","PolynomExpFactor","PolynomExpProduct","Geometry","Vector","Point","Line","Triangle","Circle","window","Pi","PARTICULAR_SOLUTION","constructor","equations","_varnothing","varnothing","_real","real","hasVariable","letter","this","variables","includes","_randomizeDefaults","degree","parse","equationString","pStr","strSign","_findSign","split","create","_formatSign","console","error","left","right","sign","_left","_right","_sign","clone","randomize","opts","moveLeft","subtract","zero","reorder","allLeft","mMove","m","monoms","isZero","simplify","multiply","lcm","getDenominators","divide","gcd","getNumerators","isolate","isOne","isMultiVariable","cMove","hasLetter","add","opposed","length","coefficient","replaceBy","P","value","F","_reverseSign","invert","max","letters","Set","solve","_solutions","_polynom","_solveDegree1","_solveDegree2","_solveDegree3plus","makeSolutionsUnique","test","values","evaluate","isEqual","log","signStr","undefined","replace","isGreater","indexOf","isStrictEqual","isAlsoEqual","m1","monomByDegree","m0","v","s","tex","NaN","exact","delta","nthDelta","realX1","realX2","sX1","sX2","aF","bF","cF","denominator","a","b","Math","sqrt","toFixed","reduce","hasRadical","S1","S2","frac","sol","equ","factorize","factors","forEach","factor","leq","factorAsEquation","solutions","solution","push","isEquation","map","x","join","isReal","isVarnothing","signAsTex","display","raw","concat","numberOfVars","randomizeDefaults","static","sorted","solutionAsTex","uniqueSolutions","filter","sort","equationStrings","_equations","_findLetters","setCoefficient","coefficients","i","_letters","slice","toString","setLetters","generate","solutionsF","_generateOneEquation","coeff","leftValue","equString","numberSym","_checkIfLinerCombination","mergeEquations","eq1","eq2","factor1","factor2","eq1multiplied","eq2multiplied","E","_resolutionSteps","V","_solveOneLetter","str","isSolvable","equStr","LS","equArray","L","monomByLetter","repeat","_linearReduction","c1","c2","LE","reducedEquations","_rpn","ShutingyardMode","SET","rpn","_rawString","isLogicalset","tokenSets","reference","referenceSet","varStack","key","token","tokenType","second","pop","first","has","vennAB","A","B","vennABC","C","inputStr","_shutingYardToReducedMonom","_coefficient","_literal","copyLiterals","literal","addToken","stack","element","q1","q2","pow","ShutingyardType","COEFFICIENT","VARIABLE","M","one","setLetter","OPERATION","k","makeSame","clean","isSameAs","multiplyByNumber","nb","root","p","isSquare","compare","M1","M2","K","item","isLiteralSquare","isRational","isEven","hasFractionCoefficient","isNotZero","Object","t","n","r","tmpValues","evaluateAsNumeric","derivative","d","dM","primitive","areSameAs","areEquals","isDivisible","div","isStrictlyPositive","geq","isRelative","literalSqrt","literalStr","matchAll","keys","isNotEqual","dividers","numerator","abs","literals","_getLiteralDividers","monomDividers","N","arr","tmpList","litt","currentLetter","displayWithSign","texWithSign","plotFunction","tfrac","coeffN","coeffD","min","xmultiply","polynomString","mark_as_dirty","dirty_factors","dirty_zeroes","euclidianCache","CONSTANT","MONOM","FUNCTION","_monoms","_factors","_parseString","empty","Number","isSafeInteger","multiplyByPolynom","multiplyByFraction","multiplyByMonom","multiplyByInteger","euclidian","quotient","reminder","maxMP","degreeP","newM","MaxIteration","isPositive","divideByFraction","divideByInteger","cP1","cP2","isOpposedAt","isFactorized","match","e","polynomStringNormalized","replaceAll","polynomStringReduced","substr","polyFactors","f","splice","isDeveloped","j","S","resultPolynom","monom","dP","integrate","valuesA","valuesB","commonMonom","tempPolynom","securityLoop","maxDegree","allDividers","_getAllPotentialFactors","isDividableBy","result","pX","pC","dX","dC","shift","getZeroes","_zeroes","monomsByDegree","Ms","denominators","numerators","lcmDenominator","gcdDenominator","lcmNumerator","gcdNumerator","limitToInfinity","infinite","limitToNegativeInfinity","m2","m1d","m2d","genDisplay","output","forceSign","wrapParentheses","withAllMultSign","shutingYardToReducedPolynom","nbF","_factorize2ndDegree","P1","P2","c","x1","x2","xyzPolynom","xFactors","_factorizeByGroups","_euclidianCache","_dirty_zeroes","_dirty_factors","zeroes","texString","_texString","texFactors","isNaN","fractions","_numerator","_denominator","domain","amplify","D","dN","dD","NumeratorEuclidien","DenominatorEuclidien","R","limits","offset","Infinity","theLimit","theSign","evalValues","evalValuesOffset","FR","isInfinity","study","RationalStudy","ZEROTYPE","ASYMPTOTE","FUNCTION_EXTREMA","TABLE_OF_SIGNS","ASYMPTOTE_POSITION","fx","makeStudy","makeZeroes","_signs","makeSigns","_asymptotes","makeAsymptotes","_derivative","makeDerivative","_variations","makeVariation","texSigns","texGrows","texVariations","indexOfZero","makeOneLineForSigns","zeroSign","oneLine","currentZero","NOTHING","makeSignsResult","signs","resultLine","index","current","makeGrowsResult","tos","signsAsArray","growsLine","extremes","pos","y","xTex","yTex","pointType","exp","evalY","FLAT","MAX","MIN","type","extr","makeVariationsResult","varsLine","_makeTexFromTableOfSigns","factorsFx","GROWS","VARIATIONS","drawCode","code","asymptotes","asymptote","VERTICAL","HORIZONTAL","SLOPE","extreme","ZERO","SIGNS","Study","super","_getZeroes","_getSigns","reduced","DEFENCE","Ztype","HOLE","before","after","position","pm","RB","RT","LB","LT","deltaX","tableOfSign","NDegree","DDegree","H","Htex","_getHorizontalAsymptoteRelativePositon","greater","dx","z","extrema","idx","typeOfTable","denominatorOrPeriodic","isApproximative","isExact","floor","invalid","Q","controlNumerator","g","compareFraction","lesser","than","isOpposed","isInverted","isNegativeOne","isNegative","isStrictlyNegative","isFinite","isReduced","isNatural","isOdd","dfrac","average","unique","distinct","reverse","radical","nthroot","_nth","_radical","_isValid","nth","uniformize","_expression","NUMERIC","isValid","expression","_extractDecimalPart","decimal","substring","_numberCorrection","epsilon","n9","n0","mod0","mod9","_addToStack","tokenConstant","sin","cos","tan","polynom","mathFunction","_degree","_fn","_powerAsInteger","_forceParenthesis","forceParenthesis","fn","powerAsInteger","isCoefficient","firstCoefficient","_texDegree","setForceParenthesis","_positive","_asPositiveDegree","positive","asPositiveDegree","parenthesis","numeratorsAsTex","denominatorsAsTex","name","polynoms","d1","d2","_integrateWithInternalDerivative","applyMathFunction","mathFn","Pinternal","internalDerivative","relativePosition","distance","distanceTo","center","radius","_squareRadius","lineIntersection","solX","intersectionPoints","_cartesian","equX","lineX","equation","lineY","tangents","_tangentsWithSlope","isPointOnCircle","_tangentsThroughOnePointOnTheCircle","_tangentsThroughOnePointOutsideTheCircle","getPointsOnCircle","numberIsInteger","pt","triplets","pythagoricianTripletsWithTarget","points","triplet","isInListOfPoints","CT","_center","LinePropriety","Perpendicular","cx_px","cy_py","polyLeft","polyRight","squareRadius","h","slope","sq","_exists","cartesian","exists","cx","cy","developed","_calculateCartesian","_reset","_parseEquation","_parseCopyCircle","_parseThroughtThreePoints","_parseCenterAndPointThrough","_parseCenterAndRadius","circle","square","pointThrough","normSquare","y1","y2","T","mAB","remarquables","mediators","AB","mAC","AC","intersection","point","parseEquation","parseByPointAndVector","parseByPointAndNormal","parseByCoefficient","Parallel","parseByPointAndLine","elem","delete","size","_a","_b","_c","_d","_OA","_n","normal","orientation","director","isParellelTo","line","height","isVertical","simplifyDirection","Pt","isParallel","isSame","hasIntersection","getValueAtX","getValueAtY","canonical","mxh","OA","parametric","pmatrix","fraction","hitSegment","iPt","canonicalAsFloatCoefficient","decimals","PERPENDICULAR","PARALLEL","_x","_y","xy","origin","middleOf","texValues","numberOfDigits","pts","norm","list","_lines","intersect","_B","_C","_A","_updateTriangle","BC","_middles","_remarquables","_calculateRemarquableLines","getPointByName","ptName","toUpperCase","getSegment","ptName1","ptName2","_calculateBisectors","medians","heights","bisectors","tlines","lines","b1","b2","BA","CB","CA","isRectangle","isNormalTo","isEquilateral","isIsocele","reset","components","scalarProductWithVector","multiplyByScalar","scalar","divideByScalar","angleWith","sharp","radian","toDegree","PI","acos","scalarProduct","v1","v2","round","primes","maxV","gcd2","target","targetIsSquare","targetValue","u","config","rndPolynom","rndMonom","rndFraction","number","from","to","rndHelpers","randomInt","allowZero","randomIntSym","bool","percent","randomBool","array","randomArray","randomItem","shuffle","shuffleArray","mergeConfig","defaultConfig","_config","_defaultConfig","randomCore","userConfig","negative","natural","random","temp","factorable","allowNullMonom","unit","numberOfMonoms","_factorableConfig","pi","mode","_mode","POLYNOM","tokenConfigInitialization","_tokenConfig","precedence","associative","_uniformize","_tokenKeys","NextToken","expr","start","Uniformizer","expr2","fnToken","RegExp","operators","outQueue","opStack","tokenPos","previousOpStatckLength","securityLoopLvl2","securityLoopLvl1","opTop","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call"],"sourceRoot":""}