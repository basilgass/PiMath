{"version":3,"file":"pi.min.js","mappings":"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","sources":["webpack://pimath/./src/main.ts","webpack://pimath/./src/maths/algebra/equation.ts","webpack://pimath/./src/maths/algebra/index.ts","webpack://pimath/./src/maths/algebra/linearSystem.ts","webpack://pimath/./src/maths/algebra/logicalset.ts","webpack://pimath/./src/maths/algebra/monom.ts","webpack://pimath/./src/maths/algebra/polynom.ts","webpack://pimath/./src/maths/algebra/rational.ts","webpack://pimath/./src/maths/coefficients/fraction.ts","webpack://pimath/./src/maths/coefficients/index.ts","webpack://pimath/./src/maths/coefficients/nthroot.ts","webpack://pimath/./src/maths/expressions/numexp.ts","webpack://pimath/./src/maths/expressions/polynomexp.ts","webpack://pimath/./src/maths/geometry/circle.ts","webpack://pimath/./src/maths/geometry/index.ts","webpack://pimath/./src/maths/geometry/line.ts","webpack://pimath/./src/maths/geometry/point.ts","webpack://pimath/./src/maths/geometry/triangle.ts","webpack://pimath/./src/maths/geometry/vector.ts","webpack://pimath/./src/maths/numeric.ts","webpack://pimath/./src/maths/random/index.ts","webpack://pimath/./src/maths/random/randomCore.ts","webpack://pimath/./src/maths/random/rndFraction.ts","webpack://pimath/./src/maths/random/rndHelpers.ts","webpack://pimath/./src/maths/random/rndMonom.ts","webpack://pimath/./src/maths/random/rndPolynom.ts","webpack://pimath/./src/maths/shutingyard.ts","webpack://pimath/webpack/bootstrap","webpack://pimath/webpack/startup"],"sourcesContent":["import {Numeric} from \"./maths/numeric\";\r\nimport {NumExp} from \"./maths/expressions/numexp\";\r\nimport {Shutingyard} from \"./maths/shutingyard\";\r\nimport {Random} from \"./maths/random\";\r\nimport {Fraction, Nthroot} from \"./maths/coefficients\";\r\nimport {\r\n    Monom,\r\n    Polynom,\r\n    Equation,\r\n    LinearSystem,\r\n    Rational,\r\n    Logicalset,\r\n    PolynomExpFactor,\r\n    PolynomExpProduct\r\n} from \"./maths/algebra\";\r\nimport {Line, Circle, Triangle, Point, Vector} from \"./maths/geometry\";\r\n\r\n// Expose as global\r\nexport const PiMath = {\r\n    ShutingYard: Shutingyard,\r\n    Numeric: Numeric,\r\n    NumExp: NumExp,\r\n    Fraction: Fraction,\r\n    Root: Nthroot,\r\n    Monom: Monom,\r\n    Polynom: Polynom,\r\n    Equation: Equation,\r\n    LinearSystem: LinearSystem,\r\n    Rational: Rational,\r\n    Logicalset: Logicalset,\r\n    Random: Random,\r\n    PolynomExpFactor: PolynomExpFactor,\r\n    PolynomExpProduct: PolynomExpProduct,\r\n    Geometry: {\r\n        Vector: Vector,\r\n        Point: Point,\r\n        Line: Line,\r\n        Triangle: Triangle,\r\n        Circle: Circle\r\n    }\r\n};\r\n(<any>window).Pi = PiMath\r\n","import {Polynom} from \"./polynom\";\r\nimport {literalType, Monom} from \"./monom\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Fraction, Nthroot} from \"../coefficients\";\r\n\r\n/**\r\n * Equation is a class to manage equations...\r\n */\r\ninterface ISolution {\r\n    tex: string,\r\n    value: number,\r\n    exact: unknown\r\n}\r\n\r\nexport class Equation {\r\n    private _polynom: Polynom;  // Used to solve the equation // TODO: remove the private value ?\r\n    // Undetermined texSolutions.\r\n    private _varnothing: string = '\\\\varnothing';\r\n    private _real: string = '\\\\mathbb{R}';\r\n\r\n    /**\r\n     * Create an Equation using two polynoms.\r\n     * Markdown *support* is cool\r\n     * @param equations\r\n     */\r\n    constructor(...equations: unknown[]) {\r\n        // Default equation\r\n        this._left = new Polynom().zero();\r\n        this._right = new Polynom().zero();\r\n        this._sign = '=';\r\n\r\n        if (equations.length === 1) {\r\n            if (equations[0] instanceof Equation) {\r\n                return equations[0].clone();\r\n            } else if (typeof equations[0] === 'string') {\r\n                this.parse(equations[0]);\r\n            }\r\n        } else if (equations.length === 2) {\r\n            if (equations[0] instanceof Polynom) {\r\n                this.left = equations[0].clone()\r\n            } else if (typeof equations[0] === 'string') {\r\n                this.left = new Polynom(equations[0])\r\n            }\r\n\r\n            if (equations[1] instanceof Polynom) {\r\n                this.right = equations[1].clone()\r\n            } else if (typeof equations[1] === 'string') {\r\n                this.right = new Polynom(equations[1])\r\n            }\r\n        } else {\r\n            // Return default empty equation\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private _left: Polynom;  // Left part of the equation\r\n\r\n    get left(): Polynom {\r\n        return this._left;\r\n    }\r\n\r\n    set left(value: Polynom) {\r\n        this._left = value;\r\n    }\r\n\r\n    private _right: Polynom; // Right part of the equation\r\n\r\n    get right(): Polynom {\r\n        return this._right;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n\r\n    set right(value: Polynom) {\r\n        this._right = value;\r\n    }\r\n\r\n    private _sign: string;   // Signe of the equation, by default =\r\n\r\n    get sign(): string {\r\n        return this._sign;\r\n    }\r\n\r\n    set sign(value: string) {\r\n        // Set the sign value as formatted.\r\n        this._sign = this._formatSign(value);\r\n    }\r\n\r\n    private _solutions: ISolution[]\r\n\r\n    // ------------------------------------------\r\n    get solutions(): ISolution[] {\r\n        return this._solutions\r\n    }\r\n\r\n    get isEquation() {\r\n        return true;\r\n    }\r\n\r\n    get solution(): string {\r\n        if (this._solutions.length === 1\r\n            &&\r\n            (\r\n                this._solutions[0].tex === this._real\r\n                || this._solutions[0].tex === this._varnothing\r\n                || this._solutions[0].tex.includes('\\\\left')\r\n            )\r\n        ) {\r\n            return `S = ${this._solutions[0]}`;\r\n        }\r\n        return `S = \\\\left{ ${this._solutions.map(x => x.tex).join(';')} \\\\right}`;\r\n    }\r\n\r\n    get isReal(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0].tex === this._real;\r\n    }\r\n\r\n    get isVarnothing(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0].tex === this._varnothing;\r\n    }\r\n\r\n    get signAsTex(): string {\r\n        if (this._sign === '>=' || this._sign === '=>' || this._sign === 'geq') {\r\n            return '\\\\geq';\r\n        }\r\n        if (this._sign === '<=' || this._sign === '=<' || this._sign === 'leq') {\r\n            return '\\\\leq';\r\n        }\r\n        return this._sign;\r\n    }\r\n\r\n    get tex(): string {\r\n        return `${this._left.tex}${this.signAsTex}${this._right.tex}`;\r\n    }\r\n\r\n    get display(): string {\r\n        return `${this._left.display}${this.signAsTex}${this._right.display}`;\r\n    }\r\n\r\n    get raw(): string {\r\n        return `${this._left.raw}${this.signAsTex}${this._right.raw}`;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        return [...new Set(this._right.variables.concat(this._left.variables))];\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n\r\n    // -----------------------------------------------\r\n    private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n        degree: 2\r\n    };\r\n\r\n    get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n        return this._randomizeDefaults;\r\n    }\r\n\r\n    set randomizeDefaults(value) {\r\n        this._randomizeDefaults = value;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    parse = (equationString: string): Equation => {\r\n        let pStr: string[], strSign: string | false;\r\n        // Find the string separator\r\n        strSign = this._findSign(equationString);\r\n\r\n        if (strSign === false) {\r\n            console.error('The equation is not valid (no sign found)');\r\n            return;\r\n        }\r\n\r\n        // The StrSign is found\r\n        pStr = equationString.split(strSign);\r\n\r\n        return this.create(new Polynom(pStr[0]), new Polynom(pStr[1]), this._formatSign(strSign));\r\n    };\r\n\r\n    create = (left: Polynom, right: Polynom, sign?: string): Equation => {\r\n        this._left = left;\r\n        this._right = right;\r\n        this._sign = this._formatSign(sign);\r\n        return this;\r\n    };\r\n\r\n    clone = (): Equation => {\r\n        return new Equation().create(this._left.clone(), this._right.clone(), this._sign + '');\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n\r\n    randomize = (opts?: {}, sign?: string): Equation => {\r\n        // TODO: Generate equations randomly, using config.\r\n        return new Equation().create(new Polynom(), new Polynom(), sign);\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    /**\r\n     * Reorder will move all monoms containing a letter on the left, all the other on the right.\r\n     */\r\n    moveLeft = (): Equation => {\r\n        this._left = this._left.clone().subtract(this._right)\r\n        this._right.zero()\r\n        return this;\r\n    }\r\n\r\n    reorder = (allLeft?: boolean): Equation => {\r\n        // Move all monoms of degree greater than 0 to the left.\r\n        // and all zero degree monoms to the right.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n\r\n        if (allLeft) {\r\n            return this.moveLeft()\r\n        }\r\n        let mMove: Monom;\r\n        for (let m of this._left.monoms) {\r\n            if (m.degree().isZero()) {\r\n                mMove = m.clone();\r\n                this._left.subtract(mMove);\r\n                this._right.subtract(mMove);\r\n            }\r\n        }\r\n\r\n        // Reorder the left and right polynoms\r\n        this._left.reorder();\r\n        this._right.reorder();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiply by the lcm denominator and divide by the gcm numerators.\r\n     */\r\n    simplify = (): Equation => {\r\n        this.multiply(Numeric.lcm(...this._left.getDenominators(), ...this._right.getDenominators()));\r\n        this.divide(Numeric.gcd(...this._left.getNumerators(), ...this._right.getNumerators()));\r\n        return this;\r\n    }\r\n\r\n\r\n    // -----------------------------------------------\r\n    // Equations operations\r\n\r\n    /**\r\n     * Reorder the polynom to have only one letter on the left, the rest on the right.\r\n     * @param letter\r\n     */\r\n    isolate = (letter?: string): Equation | false => {\r\n        // Determine if we can isolate the variables.\r\n\r\n        // Both part of the equations must be of the first degree.\r\n        //TODO: handle equations of degree two or more ?\r\n        if (!this.degree(letter).isOne()) {\r\n            return false;\r\n        }\r\n\r\n        // Modify the equation to isolate the asked variable.\r\n        // TODO: must handle equations like 3xy+5y=4 => y = 4/(3x-5)\r\n        if (this.isMultiVariable()) {\r\n            return false;\r\n        }\r\n\r\n        // Isolate the letter.\r\n        let mMove: Monom, cMove: Fraction;\r\n        // Start by moving everything to the left.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n        for (let m of this._left.monoms) {\r\n            if (!m.hasLetter(letter)) {\r\n                mMove = m.clone();\r\n                this._left.add(mMove.clone().opposed());\r\n                this._right.add(mMove.clone().opposed());\r\n            }\r\n        }\r\n\r\n        // In theory, we should have only one item on the left.\r\n        if (this._left.length !== 1) {\r\n            return false;\r\n        }\r\n        cMove = this._left.monoms[0].coefficient.clone();\r\n        this._left.divide(cMove);\r\n        this._right.divide(cMove);\r\n        return this;\r\n    };\r\n\r\n    replaceBy = (letter: string, P: Polynom): Equation => {\r\n        this._left.replaceBy(letter, P)\r\n        this._right.replaceBy(letter, P)\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiple an equation by a fraction value.\r\n     * @param value\r\n     */\r\n    multiply = (value: unknown): Equation => {\r\n\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        // Multiply each part of the equation by the fraction\r\n        this._left.multiply(F);\r\n        this._right.multiply(F);\r\n\r\n        // The sign of the inequation must be changed.\r\n        if (this._sign !== '=' && F.sign() === -1) {\r\n            this._reverseSign();\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * divide an equation by a given value (transformed as a fraction)\r\n     *\r\n     * ```\r\n     * 8x+10=6x \\vert 2\r\n     * 4x+5=3x\r\n     * ```\r\n     *\r\n     * |>Alternatively with $3x-4$ maybe it's working ?\r\n     * $$\\frac{3x}{5}$$\r\n     *\r\n     * @param value\r\n     * @returns {Equation}\r\n     */\r\n    divide = (value: unknown): Equation => {\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        if (F.isZero()) {\r\n            return this;\r\n        } else {\r\n            return this.multiply(F.invert());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the degree of the equation\r\n     * @param letter\r\n     */\r\n    degree = (letter?: string): Fraction => {\r\n        return Fraction.max(this._left.degree(letter), this._right.degree(letter));\r\n    };\r\n\r\n    /**\r\n     * Determine if the equation contains more than one letter/variable.\r\n     */\r\n    isMultiVariable = (): boolean => {\r\n        return this._left.isMultiVariable || this._right.isMultiVariable;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        // @ts-ignore\r\n        return [...new Set([...this._left.letters(), ...this._right.letters()])];\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations helpers\r\n    // -----------------------------------------------\r\n\r\n    // -----------------------------------------------\r\n    solve = (): Equation => {\r\n        // Initialise the variables:\r\n        this._solutions = [];\r\n\r\n        // TODO: consolidate solving equations (inequations vs equations)\r\n        // TODO: work with not natural degrees ?\r\n        this._polynom = this._left.clone().subtract(this._right);\r\n\r\n        switch (this._polynom.degree().value) {\r\n            case 0:\r\n            case 1:\r\n                this._solveDegree1();\r\n                break;\r\n            case 2:\r\n                this._solveDegree2();\r\n                break;\r\n            default:\r\n                this._solveDegree3plus();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    test = (values: literalType): Boolean => {\r\n        return this.left.evaluate(values).isEqual(this.right.evaluate(values))\r\n    }\r\n\r\n    private _findSign = (equationString: string): string | false => {\r\n        let strSign: string = '';\r\n\r\n        if (equationString.includes('geq')) {\r\n            return (equationString.includes('\\\\geq')) ? '\\\\geq' : 'geq';\r\n        } else if (equationString.includes('leq')) {\r\n            return (equationString.includes('\\\\leq')) ? '\\\\leq' : 'leq';\r\n        } else if (equationString.includes('>=')) {\r\n            return '>=';\r\n        } else if (equationString.includes('=>')) {\r\n            return '=>';\r\n        } else if (equationString.includes('>')) {\r\n            return '>';\r\n        } else if (equationString.includes('<=')) {\r\n            return '<=';\r\n        } else if (equationString.includes('=<')) {\r\n            return '=<';\r\n        } else if (equationString.includes('<')) {\r\n            return '<';\r\n        } else if (equationString.includes('=')) {\r\n            return '='\r\n        }\r\n        if (strSign === '') {\r\n            console.log('Equation: parse string : sign not found');\r\n            return false;\r\n        }\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Equations solving algorithms\r\n\r\n    private _formatSign = (signStr: string): string => {\r\n        if (signStr === undefined) {\r\n            return '=';\r\n        }\r\n\r\n        if (signStr.includes('geq')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>=')) {\r\n            return '>=';\r\n        } else if (signStr.includes('=>')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>')) {\r\n            return '>';\r\n        } else if (signStr.includes('leq')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<=')) {\r\n            return '<=';\r\n        } else if (signStr.includes('=<')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<')) {\r\n            return '<';\r\n        } else {\r\n            return '='\r\n        }\r\n    };\r\n\r\n    private _reverseSign = (): Equation => {\r\n        if (this._sign === '=') {\r\n            return this;\r\n        }\r\n\r\n        if (this._sign.includes('<')) {\r\n            this._sign.replace('<', '>');\r\n            return this;\r\n        }\r\n        if (this._sign.includes('>')) {\r\n            this._sign.replace('>', '<');\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    private isGreater = (): boolean => {\r\n        if (this._sign.indexOf('>') !== -1) {\r\n            return true;\r\n        }\r\n        return this._sign.indexOf('geq') !== -1;\r\n\r\n    };\r\n\r\n    private isStrictEqual = (): boolean => {\r\n        return this._sign === '=';\r\n    };\r\n\r\n    private isAlsoEqual = (): boolean => {\r\n        if (this._sign.indexOf('=') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('geq') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('leq') !== -1) {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    private _solveDegree1 = (letter?: string): ISolution[] => {\r\n        const m1 = this._polynom.monomByDegree(1, letter).coefficient,\r\n            m0 = this._polynom.monomByDegree(0, letter).coefficient,\r\n            v = m0.clone().opposed().divide(m1);\r\n        let s: string;\r\n\r\n        if (this.isStrictEqual()) {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0) {\r\n                    this._solutions = [{\r\n                        tex: this._real,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                } else {\r\n                    this._solutions = [{\r\n                        tex: this._varnothing,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                }\r\n            } else {\r\n                this._solutions = [{\r\n                    tex: v.display,\r\n                    value: v.value,\r\n                    exact: v\r\n                }]\r\n            }\r\n        } else {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0 && this.isAlsoEqual()) {\r\n                    s = '\\\\mathbb{R}';\r\n                } else {\r\n                    if (m0.value > 0) {\r\n                        s = this.isGreater() ? this._real : this._varnothing;\r\n                    } else {\r\n                        s = !this.isGreater() ? this._real : this._varnothing;\r\n                    }\r\n                }\r\n            } else {\r\n                // Must handle the case if the m1 monom is negative.\r\n                if ((this.isGreater() && m1.sign() === 1) || (!this.isGreater() && m1.sign() === -1)) {\r\n                    s = `\\\\left${this.isAlsoEqual() ? '\\\\[' : '\\\\]'}${v};+\\\\infty\\\\right\\\\[`;\r\n                } else {\r\n                    s = `\\\\left\\\\]-\\\\infty;${v} \\\\right\\\\${this.isAlsoEqual() ? '\\\\]' : '\\\\['}`;\r\n                }\r\n            }\r\n            this._solutions = [{\r\n                tex: s,\r\n                value: NaN,\r\n                exact: false\r\n            }];\r\n        }\r\n\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree2 = (letter?: string): ISolution[] => {\r\n        let aF = this._polynom.monomByDegree(2, letter).coefficient,\r\n            bF = this._polynom.monomByDegree(1, letter).coefficient,\r\n            cF = this._polynom.monomByDegree(0, letter).coefficient,\r\n            delta: number, nthDelta: Nthroot,\r\n            lcm = Numeric.lcm(aF.denominator, bF.denominator, cF.denominator),\r\n            a = aF.multiply(lcm).value,\r\n            b = bF.multiply(lcm).value,\r\n            c = cF.multiply(lcm).value,\r\n            realX1: number, realX2: number,\r\n            sX1: string, sX2: string;\r\n\r\n        delta = b * b - 4 * a * c;\r\n\r\n        if (delta > 0) {\r\n            realX1 = (-b - Math.sqrt(delta)) / (2 * a);\r\n            realX2 = (-b + Math.sqrt(delta)) / (2 * a);\r\n\r\n            if (delta > 1.0e5) {\r\n                // The delta is too big to be parsed !\r\n                this._solutions = [\r\n                    {\r\n                        tex: ((-b - Math.sqrt(delta)) / (2 * a)).toFixed(5),\r\n                        value: realX1,\r\n                        exact: false\r\n                    },\r\n                    {\r\n                        tex: ((-b + Math.sqrt(delta)) / (2 * a)).toFixed(5),\r\n                        value: realX2,\r\n                        exact: false\r\n                    }\r\n                ]\r\n            } else {\r\n                nthDelta = new Nthroot(delta).reduce();\r\n                if (nthDelta.hasRadical()) {\r\n                    // -b +- coeff\\sqrt{radical}\r\n                    // -------------------------\r\n                    //           2a\r\n                    let gcd = Numeric.gcd(b, 2 * a, nthDelta.coefficient);\r\n                    nthDelta.coefficient = nthDelta.coefficient / gcd;\r\n\r\n                    // TODO: Can i delete the next line ?\r\n                    // let deltaC = nthDelta.coefficient, deltaR = nthDelta.radical;\r\n                    if (b !== 0) {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                {\r\n                                    tex: `${-b / gcd} - ${nthDelta.tex}`,\r\n                                    value: realX1,\r\n                                    exact: false // TODO: implement exact value with nthroot\r\n                                },\r\n                                {\r\n                                    tex: `${-b / gcd} + ${nthDelta.tex}`,\r\n                                    value: realX2,\r\n                                    exact: false\r\n                                },\r\n\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                {\r\n                                    tex: `\\\\dfrac{${-b / gcd} - ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                    value: realX1,\r\n                                    exact: false\r\n                                },\r\n                                {\r\n                                    tex: `\\\\dfrac{${-b / gcd} + ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                    value: realX2,\r\n                                    exact: false\r\n                                },\r\n                            ]\r\n                        }\r\n                    } else {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                {\r\n                                    tex: `- ${nthDelta.tex}`,\r\n                                    value: realX1,\r\n                                    exact: false\r\n                                },\r\n                                {\r\n                                    tex: `${nthDelta.tex}`,\r\n                                    value: realX2,\r\n                                    exact: false\r\n                                },\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                {\r\n                                    tex: `\\\\dfrac{- ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                    value: realX1,\r\n                                    exact: false\r\n                                },\r\n                                {\r\n                                    tex: `\\\\dfrac{${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                    value: realX2,\r\n                                    exact: false\r\n                                },\r\n                            ]\r\n                        }\r\n                    }\r\n                } else {\r\n                    // -b +- d / 2a\r\n                    const S1 = new Fraction(-b - nthDelta.coefficient, 2 * a).reduce(),\r\n                        S2 = new Fraction(-b + nthDelta.coefficient, 2 * a).reduce()\r\n                    this._solutions = [\r\n                        {\r\n                            tex: S1.dfrac,\r\n                            value: realX1,\r\n                            exact: S1\r\n                        },\r\n                        {\r\n                            tex: S2.dfrac,\r\n                            value: realX2,\r\n                            exact: S2\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n\r\n        } else if (delta === 0) {\r\n            const sol = new Fraction(-b, 2 * a).reduce()\r\n            this._solutions = [{\r\n                tex: sol.dfrac,\r\n                value: sol.value,\r\n                exact: sol\r\n            }];\r\n        } else {\r\n            this._solutions = [{\r\n                tex: this._varnothing,\r\n                value: NaN,\r\n                exact: false\r\n            }];\r\n        }\r\n\r\n\r\n        // Handle now the inequations.\r\n        if (!this.isStrictEqual()) {\r\n            if (this._solutions.length === 2) {\r\n                sX1 = (realX1 < realX2) ? this._solutions[0].tex : this._solutions[1].tex;\r\n                sX2 = (realX1 < realX2) ? this._solutions[1].tex : this._solutions[0].tex;\r\n\r\n                if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                    this._solutions = [{\r\n                        tex: `\\\\left]-\\\\infty ; ${sX1}\\\\right${this.isAlsoEqual() ? ']' : '['} \\\\cup \\\\left${this.isAlsoEqual() ? '[' : ']'}${sX2};+\\\\infty\\\\right[`,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }\r\n                    ];\r\n                } else {\r\n                    this._solutions = [{\r\n                        tex: `\\\\left${this.isAlsoEqual() ? '[' : ']'}${sX1} ; ${sX2}\\\\right${this.isAlsoEqual() ? ']' : '['}`,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }]\r\n                }\r\n            } else if (this._solutions.length === 1 && this._solutions[0].tex !== this._varnothing) {\r\n                if (!this.isAlsoEqual()) {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [{\r\n                            tex: `\\\\left]-\\\\infty ; ${this._solutions[0].tex}\\\\right[ \\\\cup \\\\left]${this._solutions[0].tex};+\\\\infty\\\\right[`,\r\n                            value: NaN,\r\n                            exact: false\r\n                        }\r\n                        ];\r\n                    } else {\r\n                        this._solutions = [{\r\n                            tex: this._varnothing,\r\n                            value: NaN,\r\n                            exact: false\r\n                        }];\r\n                    }\r\n                } else {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [{\r\n                            tex: this._real,\r\n                            value: NaN,\r\n                            exact: false\r\n                        }];\r\n                    } else {\r\n                        // this._texSolutions = [ this._texSolutions[0] ];\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.isGreater()) {\r\n                    this._solutions = [{\r\n                        tex: aF.sign() === 1 ? this._real : this._varnothing,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                } else {\r\n                    this._solutions = [{\r\n                        tex: aF.sign() === -1 ? this._real : this._varnothing,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                }\r\n            }\r\n        }\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree3plus = (): ISolution[] => {\r\n        // TODO: try to resolve equations with a degree superior than 2.\r\n        this._solutions = [{tex: 'solve x - not yet handled', value: NaN, exact: false}];  // ESLint remove system :(\r\n        return this._solutions;\r\n    };\r\n}","export * from \"./equation\"\r\nexport * from \"./linearSystem\"\r\nexport * from \"./logicalset\"\r\nexport * from \"./monom\"\r\nexport * from \"./polynom\"\r\nexport * from \"./rational\"\r\nexport * from \"./../expressions/polynomexp\"","import {Fraction} from \"../coefficients\";\r\nimport {Equation} from \"./equation\";\r\nimport {Polynom} from \"./polynom\";\r\nimport {Monom} from \"./monom\";\r\nimport {Random} from \"../random\";\r\n\r\n// TODO: Must check and rework\r\nexport class LinearSystem {\r\n    private _solutions: { [letter: string]: { value: Fraction, isReal: boolean, isVarnothing: boolean } };\r\n    private _resolutionSteps: LinearSystem[];\r\n    private _equations: Equation[];\r\n    private _letters: string[];\r\n\r\n    constructor(...equationStrings: string[]) {\r\n        this._equations = [];\r\n        this._letters = 'xy'.split('');\r\n\r\n        if (equationStrings !== undefined && equationStrings.length > 0) {\r\n            this.parse(...equationStrings);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equations(): Equation[] {\r\n        return this._equations;\r\n    }\r\n\r\n    set equations(value) {\r\n        this._equations = value;\r\n    }\r\n\r\n    get letters(): string {\r\n        return this._letters.join('')\r\n    }\r\n\r\n    set letters(value: string) {\r\n        this._letters = value.split('');\r\n    }\r\n\r\n    get isSolvable(): boolean {\r\n        let V = this.variables;\r\n\r\n        // TODO: in some case, it is possible to resolve systems if there isn't the isSame number of vars and equations\r\n        if (V.length !== this._equations.length) {\r\n            return false;\r\n        }\r\n\r\n        //TODO: Must check if two equations isn't a linear combination of the others ?\r\n\r\n        return true;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n        for (let E of this._equations) {\r\n            V = V.concat(E.variables);\r\n        }\r\n        return [...new Set(V)].sort();\r\n    }\r\n\r\n    get tex(): string {\r\n        // Build the array of values.\r\n        // Reorder\r\n        // This clone the system :!!!\r\n        //TODO: Avoid cloning this linear system\r\n        let LS = this.clone().reorder(),\r\n            letters = LS.variables,\r\n            equStr: string[],\r\n            equArray: string[] = [],\r\n            m: Monom;\r\n\r\n        // TODO: Manage tex output of linear equations\r\n        for (let equ of LS.equations) {\r\n            equStr = [];\r\n            for (let L of letters) {\r\n                m = equ.left.monomByLetter(L);\r\n\r\n                if (equStr.length === 0) {\r\n                    equStr.push(m.isZero() ? '' : m.tex);\r\n                } else {\r\n                    equStr.push(m.isZero() ? '' : ((m.coefficient.sign() === 1) ? '+' : '') + m.tex);\r\n                }\r\n            }\r\n\r\n            // Add the equal sign\r\n            equStr.push('=');\r\n\r\n            // Add the right hand part of the equation (should be only a number, because it has been reordered)\r\n            equStr.push(equ.right.tex);\r\n\r\n            // Add to the list.\r\n            equArray.push(equStr.join('&'));\r\n        }\r\n\r\n\r\n        return `\\\\left\\\\{\\\\begin{array}{${\"r\".repeat(letters.length)}cl}${equArray.join('\\\\\\\\\\ ')}\\\\end{array}\\\\right.`;\r\n        //return `\\\\left\\\\{\\\\begin{array}{rrrcl}${this._equations.map(equ => `${equ.tex}`).join('\\\\\\\\\\ \\n')}\\\\end{array}\\\\right.`;\r\n    }\r\n\r\n    get solution(): string {\r\n        let tex: string[] = [];\r\n\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n\r\n        for (let letter in this._solutions) {\r\n            if (this._solutions[letter].isReal) {\r\n                console.log(`Undetermined (letter ${letter})`);\r\n                return;\r\n            }\r\n            if (this._solutions[letter].isVarnothing) {\r\n                console.log(`Undefined (letter ${letter})`);\r\n                return;\r\n            }\r\n\r\n            tex.push(this._solutions[letter].value.dfrac);\r\n        }\r\n        return `(${tex.join(';')})`;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...equations: unknown[]): LinearSystem => {\r\n        this._equations = equations.map(value => new Equation(value));\r\n        this._findLetters();\r\n        return this;\r\n    };\r\n\r\n    setCoefficient = (...coefficients: string[]): LinearSystem => {\r\n        // Reset the equations list\r\n        this._equations = [];\r\n\r\n        let i = 0;\r\n        while (i < coefficients.length - this._letters.length) {\r\n            let left = new Polynom().parse(this._letters.join(''), ...coefficients.slice(i, i + this._letters.length)),\r\n                right = new Polynom(coefficients[i + this._letters.length].toString()),\r\n                equ = new Equation().create(left, right);\r\n            this._equations.push(equ.clone());\r\n\r\n            i = i + this._letters.length + 1;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): LinearSystem => {\r\n        return new LinearSystem().parse(...this._equations.map(equ => equ.clone()));\r\n    };\r\n\r\n    setLetters = (...letters: string[]): LinearSystem => {\r\n        this._letters = letters;\r\n        return this\r\n    }\r\n    private _findLetters = (): LinearSystem => {\r\n        // Find all letters used.\r\n        let variables = new Set();\r\n\r\n        for (let equ of this._equations) {\r\n            variables = new Set([...variables, ...equ.variables]);\r\n        }\r\n\r\n        // TODO: How to transform (Set of string) to string[]\r\n        // @ts-ignore\r\n        this._letters = [...variables];\r\n        return this;\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n    // -----------------------------------------------\r\n    generate = (...solutions: Fraction[] | number[]): LinearSystem => {\r\n        let solutionsF: Fraction[] = [];\r\n\r\n        // Convert the numbers to fractions if necessary\r\n        for (let s of solutions) {\r\n            if (typeof s === \"number\") {\r\n                solutionsF.push(new Fraction(s.toString()));\r\n            } else {\r\n                solutionsF.push(s.clone());\r\n            }\r\n        }\r\n\r\n        // Create the equations and make sure they are not linear combined.\r\n        this._equations = [];\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            this._equations.push(this._generateOneEquation(...solutionsF));\r\n        }\r\n        return this;\r\n    };\r\n    private _generateOneEquation = (...solutions: Fraction[]): Equation => {\r\n        let coeff: number[] = [], leftValue: Fraction = new Fraction().zero(),\r\n            letters: string[] = ['x', 'y', 'z', 't', 'u', 'v', 'w', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],\r\n            equString: string = '', equ: Equation;\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            coeff.push(Random.numberSym(5));\r\n            leftValue.add(solutions[i].clone().multiply(coeff[i]));\r\n            equString += `${(coeff[i] < 0) ? coeff[i] : '+' + coeff[i]}${letters[i]}`\r\n        }\r\n\r\n        // LeftValue contains the left part oof the equation - and is then the isSame as the right part.\r\n        // It might be a Fraction.\r\n\r\n        // Must check if it's not a linear combination\r\n        equ = new Equation(`${equString}=${leftValue.display}`);\r\n        if (equ.right.monoms[0].coefficient.denominator != 1) {\r\n            equ.multiply(new Fraction(equ.right.monoms[0].coefficient.denominator, 1));\r\n        }\r\n        if (this._checkIfLinerCombination(equ)) {\r\n            return equ;\r\n        } else {\r\n            return this._generateOneEquation(...solutions);\r\n        }\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    private _linearReduction(eq1: Equation, eq2: Equation, letter: string): Equation {\r\n        // TODO: handle other signs for equations ?\r\n        // Get the monom for the particular letter.\r\n        let c1 = eq1.left.monomByDegree(1, letter).coefficient.clone(),\r\n            c2 = eq2.left.monomByDegree(1, letter).coefficient.clone().opposed();\r\n\r\n        return this.mergeEquations(eq1, eq2, c2, c1);\r\n    }\r\n\r\n    mergeEquations = (eq1: Equation, eq2: Equation, factor1: unknown, factor2: unknown): Equation => {\r\n        // Set and clone the equations.\r\n\r\n        let eq1multiplied = eq1.clone().multiply(new Fraction(factor1)),\r\n            eq2multiplied = eq2.clone().multiply(new Fraction(factor2));\r\n\r\n        // Add both equations together.\r\n        eq1multiplied.left.add(eq2multiplied.left);\r\n        eq1multiplied.right.add(eq2multiplied.right);\r\n\r\n        return eq1multiplied;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Solvers algorithm\r\n    // ------------------------------------------\r\n    reorder = (): LinearSystem => {\r\n        for (let E of this._equations) {\r\n            E.reorder();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    solve = (): LinearSystem => {\r\n        // Solve it by linear\r\n        this._solutions = {};\r\n        this._resolutionSteps = [];\r\n\r\n        // Reorder all equations.\r\n        this.reorder();\r\n\r\n        // Get all variables in the linear system\r\n        let V = this.variables.sort();\r\n\r\n        for (let letter of V) {\r\n            this._solutions[letter] = this._solveOneLetter(letter, V)\r\n        }\r\n\r\n        // TODO: LinearSystem - solve: optimization and handle undetermined and undefined systems.\r\n        return this;\r\n    };\r\n\r\n    private _checkIfLinerCombination = (equ: Equation): boolean => {\r\n\r\n        return true;\r\n    };\r\n\r\n    private _solveOneLetter(letter: string, V: string[]): { value: Fraction, isReal: boolean, isVarnothing: boolean } {\r\n        // list of equations.\r\n        let LE: Equation[] = this.clone().equations,\r\n            reducedEquations: Equation[] = [];\r\n\r\n        // Reduce the equations.\r\n        // Do it as long as there is more than one step, but no more than the number of equations.\r\n        for (let L of V) {\r\n            // remove the setLetter from all equations using linear combinations\r\n            if (L === letter) {\r\n                continue;\r\n            }\r\n\r\n            // Linear reduction.\r\n            // TODO: Search for better association\r\n            for (let i = 0; i < LE.length - 1; i++) {\r\n                reducedEquations.push(this._linearReduction(LE[i], LE[i + 1], L));\r\n            }\r\n\r\n            // Keep track of each steps.\r\n            this._resolutionSteps.push(new LinearSystem().parse(...reducedEquations));\r\n\r\n            // Set the list of equations to the new version.\r\n            LE = this._resolutionSteps[this._resolutionSteps.length - 1].clone().equations;\r\n\r\n            // Reset the stack\r\n            reducedEquations = [];\r\n        }\r\n\r\n        // Solve the equations\r\n        let E = this._resolutionSteps[this._resolutionSteps.length - 1].equations[0];\r\n        E.solve();\r\n\r\n        return {\r\n            value: new Fraction(E.solutions[0].value),\r\n            isReal: E.isReal,\r\n            isVarnothing: E.isVarnothing\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Helpers\r\n    // ------------------------------------------\r\n    log = (): string => {\r\n        let str: string = '';\r\n\r\n        for (let E of this._equations) {\r\n            console.log(E.tex);\r\n            str += `${E.tex}\\\\n}`;\r\n        }\r\n\r\n        return str;\r\n    };\r\n}\r\n","/**\r\n * Polynom module contains everything necessary to handle polynoms.\r\n * @module Logicalset\r\n */\r\n\r\nimport {Shutingyard, ShutingyardMode} from '../shutingyard';\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n */\r\n    export class Logicalset {\r\n        private _rawString: string;\r\n        private _rpn: { token: string, tokenType: string }[]\r\n\r\n        /**\r\n         *\r\n         * @param {string} value (optional) Default polynom to parse on class creation\r\n         */\r\n        constructor(value: string) {\r\n            this._rawString = value\r\n            this.parse(value)\r\n            return this;\r\n        }\r\n\r\n        get isLogicalset() {\r\n            return true;\r\n        };\r\n\r\n        private parse = (value: string): Logicalset => {\r\n            // TODO: Must format the value string to convert some items...\r\n\r\n            // Parse the updated value to the shutingyard algorithm\r\n            this._rpn = new Shutingyard(ShutingyardMode.SET).parse(value).rpn;\r\n\r\n            return this;\r\n        }\r\n\r\n        evaluate(tokenSets: { [key: string]: unknown[] }, reference?: unknown[]): unknown[] {\r\n            let varStack: (Set<unknown>)[] = []\r\n\r\n            let referenceSet: Set<unknown>\r\n            if (reference === undefined) {\r\n                referenceSet = new Set()\r\n                for (let key in tokenSets) {\r\n                    referenceSet = new Set([...referenceSet, ...tokenSets[key]])\r\n                }\r\n            } else {\r\n                referenceSet = new Set(reference)\r\n            }\r\n\r\n            for (let token of this._rpn) {\r\n                if (token.tokenType === 'variable') {\r\n                    // The variable has no token - assume it's empty.\r\n                    if (tokenSets[token.token] === undefined) {\r\n                        varStack.push(new Set())\r\n                    } else {\r\n                        varStack.push(new Set(tokenSets[token.token]));\r\n                    }\r\n\r\n                } else {\r\n                    switch (token.token) {\r\n                        case '&':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                varStack.push(new Set([...first].filter(x => second.has(x))))\r\n                            }\r\n                            break\r\n                        case '|':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n                                varStack.push(new Set([...first, ...second]))\r\n                            }\r\n                            break\r\n                        case '-':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n                                varStack.push(new Set([...first].filter(x => !second.has(x))))\r\n                            }\r\n                            break\r\n                        case '!':\r\n                            if (varStack.length >= 1) {\r\n                                let first = varStack.pop()\r\n\r\n                                varStack.push(new Set([...referenceSet].filter(x => !first.has(x))))\r\n                            }\r\n                            break\r\n                    }\r\n                }\r\n            }\r\n\r\n            return [...varStack[0]].sort();\r\n        }\r\n\r\n        vennAB(): any[] {\r\n            return this.evaluate({\r\n                    A: ['A', 'AB'],\r\n                    B: ['B', 'AB']\r\n                },\r\n                ['A', 'B', 'AB', 'E']\r\n            )\r\n        }\r\n\r\n        vennABC(): any[] {\r\n            return this.evaluate({\r\n                    A: ['A', 'AB', 'AC', 'ABC'],\r\n                    B: ['B', 'AB', 'BC', 'ABC'],\r\n                    C: ['C', 'AC', 'BC', 'ABC']\r\n                },\r\n                ['A', 'B', 'C', 'AB', 'AC', 'BC', 'E']\r\n            )\r\n        }\r\n\r\n        get rpn(): { token: string, tokenType: string }[] {\r\n            return this._rpn\r\n        }\r\n\r\n        get tex(): string {\r\n            let varStack: { token: string, tokenType: string } [] = []\r\n\r\n            for (let token of this._rpn) {\r\n                if (token.tokenType === 'variable') {\r\n                    varStack.push(token);\r\n                } else {\r\n                    switch (token.token) {\r\n                        case '&':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\cap ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '|':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\cup ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '-':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\setminus ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '!':\r\n                            if (varStack.length >= 1) {\r\n                                let first = varStack.pop()\r\n                                varStack.push({token: `\\\\overline{ ${first.token} }`, tokenType: 'variable'})\r\n                            }\r\n                            break\r\n                    }\r\n                }\r\n            }\r\n\r\n            return varStack[0].token\r\n        }\r\n    }","/***\r\n * Monom class\r\n */\r\nimport {Fraction} from \"../coefficients\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Shutingyard, ShutingyardType, Token, tokenType} from \"../shutingyard\";\r\nimport {log} from \"util\";\r\n\r\nexport type literalType = {\r\n    [Key: string]: Fraction\r\n}\r\n\r\nexport class Monom {\r\n    private _coefficient: Fraction;\r\n    private _literal: literalType;\r\n\r\n    /**\r\n     * Create a Monom\r\n     * Defined as \\\\(k \\\\cdot x^{n}\\\\), where \\\\( k,n \\in \\\\mathbb{Q}\\\\).\r\n     * Examples: \\\\(3x^2\\\\) or \\\\(3/5x^2\\\\)\r\n     * @param value (optional) string The value that should be parse. Can be a Monom, a Fraction, a string or a number. If nothing is provided, it will return the trivial monom (0).\r\n     */\r\n    constructor(value?: unknown) {\r\n        this.zero();\r\n\r\n        if (value !== undefined) {\r\n            // A string is given - try to parse the value.\r\n            this.parse(value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    /**\r\n     * Get the coefficient \\\\(k\\\\) of the Monom \\\\(k\\\\cdot x^{n}\\\\)\r\n     * @returns {Fraction}\r\n     */\r\n    get coefficient(): Fraction {\r\n        return this._coefficient;\r\n    }\r\n\r\n    /**\r\n     * Set the coefficient \\\\(k\\\\) value of the monom\r\n     * @param {Fraction | number | string} F\r\n     */\r\n    set coefficient(F: Fraction | number | string) {\r\n        this._coefficient = new Fraction(F);\r\n    }\r\n\r\n    /**\r\n     * Get the literal part of \\\\(x^{n_1}y^{n_2}\\\\) as dictionary \\\\[\\\\begin{array}{ll}x&=n_1\\\\\\\\y&=n_2\\\\end{array}\\\\]\r\n     * @returns {literalType}\r\n     */\r\n    get literal(): literalType {\r\n        return this._literal;\r\n    }\r\n\r\n    /**\r\n     * Get the literal square roots of the Monom.\r\n     * TODO: remove this getter ? Is it used and is it correct ?\r\n     * @returns {literalType}\r\n     */\r\n    get literalSqrt(): literalType {\r\n        if (this.isLiteralSquare()) {\r\n            let L: literalType = {}\r\n            for (let key in this._literal) {\r\n                L[key] = this._literal[key].clone().sqrt()\r\n            }\r\n            return L;\r\n        } else {\r\n            return this._literal;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom. Must be a dictionary {x: Fraction, y: Fraction, ...}\r\n     * @param {literalType} L\r\n     */\r\n    set literal(L: literalType) {\r\n        this._literal = L;\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom from a string\r\n     * @param inputStr  String like x^2y^3\r\n     */\r\n    set literalStr(inputStr: string) {\r\n        // TODO : parse using shutingyard tree !\r\n\r\n        // Match all x^n\r\n        for (const v of [...inputStr.matchAll(/([a-z])\\^([+-]?[0-9]+)/g)]) {\r\n            // Create the default letter entry if necessary.\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = new Fraction().zero();\r\n            }\r\n\r\n            // Add the new value.\r\n            // TODO: actually, it adds only numeric value\r\n            this._literal[v[1]].add(+v[2]);\r\n        }\r\n\r\n        // Match all x\r\n        for (const v of [...inputStr.matchAll(/([a-z](?!\\^))/g)]) {\r\n            // Match all single letters\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = new Fraction().zero();\r\n            }\r\n\r\n            // Add one to the value.\r\n            this._literal[v[1]].add(1)\r\n        }\r\n    }\r\n\r\n    // Getter helpers.\r\n    /**\r\n     * Get the variables letters\r\n     */\r\n    get variables(): string[] {\r\n        let M = this.clone().clean();\r\n        return Object.keys(M.literal)\r\n    }\r\n\r\n    // Display getter\r\n    /**\r\n     * This display getter is to be used in the polynom display getter\r\n     */\r\n    get display(): string {\r\n        let L: string = '',\r\n            letters = Object.keys(this._literal).sort()\r\n        for (let letter of letters) {\r\n            if (this._literal[letter].isNotZero()) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter].isNotEqual(1)) {\r\n                    L += `^${this._literal[letter].display}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.display}`;\r\n            } else {\r\n                return '';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.display}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    get dividers(): Monom[] {\r\n        // Decompose only if the coefficient is a natural number\r\n        if (!this.coefficient.isRelative()) {\r\n            return [this.clone()]\r\n        }\r\n\r\n\r\n        // Decompose only if the power values are natural numbers.\r\n        if (this.hasFractionCoefficient()) {\r\n            return [this.clone()]\r\n        }\r\n\r\n        // Security : do not do this if greater than 10000\r\n        if (this.coefficient.numerator > 10000) {\r\n            return [this.clone()]\r\n        }\r\n\r\n\r\n        const dividers = Numeric.dividers(Math.abs(this.coefficient.numerator))\r\n\r\n        // Decompose the literals parts.\r\n        let literals: literalType[] = [];\r\n        for (let L in this.literal) {\r\n            // L is the letter.\r\n            literals = this._getLiteralDividers(literals, L)\r\n        }\r\n\r\n        const monomDividers: Monom[] = [];\r\n        if (literals.length > 0 && dividers.length > 0) {\r\n            for (let N of dividers) {\r\n                for (let L of literals) {\r\n                    let M = new Monom();\r\n                    M.coefficient = new Fraction(N)\r\n                    M.literal = L\r\n                    monomDividers.push(M)\r\n                }\r\n            }\r\n        } else if (dividers.length === 0) {\r\n            for (let L of literals) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction().one()\r\n                M.literal = L\r\n                monomDividers.push(M)\r\n            }\r\n        } else {\r\n            for (let N of dividers) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction(N)\r\n                monomDividers.push(M)\r\n            }\r\n        }\r\n\r\n        return monomDividers.length === 0 ? [new Monom().one()] : monomDividers;\r\n    }\r\n\r\n    private _getLiteralDividers(arr: literalType[], letter: string): literalType[] {\r\n        let tmpList: { [key: string]: Fraction }[] = [];\r\n\r\n        // Be default, this.literal[letter] should be a rational number.\r\n        for (let d = 0; d <= this.literal[letter].value; d++) {\r\n            if (arr.length === 0) {\r\n                let litt: literalType = {}\r\n                litt[letter] = new Fraction(d)\r\n                tmpList.push(litt)\r\n            } else {\r\n                for (let item of arr) {\r\n                    let litt: literalType = {}\r\n                    for (let currentLetter in item) {\r\n                        litt[currentLetter] = item[currentLetter]\r\n                    }\r\n                    litt[letter] = new Fraction(d)\r\n                    tmpList.push(litt)\r\n                }\r\n            }\r\n        }\r\n        return tmpList;\r\n    }\r\n\r\n    /**\r\n     * Display the monom, forcing the '+' sign to appear\r\n     */\r\n    get displayWithSign(): string {\r\n        let d: String = this.display;\r\n        return (d[0] !== '-' ? '+' : '') + d;\r\n    }\r\n\r\n    get texWithSign(): string {\r\n        if (this.coefficient.isStrictlyPositive()) {\r\n            return '+' + this.tex\r\n        }\r\n\r\n        return this.tex\r\n    }\r\n\r\n    /**\r\n     * Get the tex output of the monom\r\n     */\r\n    get tex(): string {\r\n        // TODO: display with square root !\r\n        let L: string = '',\r\n            letters = Object.keys(this._literal).sort()\r\n\r\n        for (let letter of letters) {\r\n            if (this._literal[letter].isNotZero()) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter].isNotEqual(1)) {\r\n                    L += `^{${this._literal[letter].tfrac}}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.dfrac}`;\r\n            } else {\r\n                return '0';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.dfrac}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // -----------------------------------------\r\n    /**\r\n     * Parse a string to a monom. The string may include fraction.\r\n     * @param inputStr\r\n     */\r\n    parse = (inputStr: unknown): Monom => {\r\n\r\n        if (typeof inputStr === 'string') {\r\n            this._shutingYardToReducedMonom(inputStr)\r\n        } else if (typeof inputStr === 'number') {\r\n            this._coefficient = new Fraction(inputStr)\r\n            this._literal = {}\r\n        } else if (inputStr instanceof Fraction) {\r\n            this._coefficient = inputStr.clone()\r\n            this._literal = {}\r\n        } else if (inputStr instanceof Monom) {\r\n            this._coefficient = inputStr._coefficient.clone()\r\n            this._literal = this.copyLiterals(inputStr.literal)\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    static addToken = (stack: Monom[], element: Token): void => {\r\n\r\n        let q1: Monom, q2: Monom, m: Monom, letter: string, pow: Fraction\r\n\r\n        if (element.tokenType === ShutingyardType.COEFFICIENT) {\r\n            stack.push(new Monom(new Fraction(element.token)))\r\n\r\n        } else if (element.tokenType === ShutingyardType.VARIABLE) {\r\n            let M = new Monom().one()\r\n            M.setLetter(element.token, 1)\r\n            stack.push(M.clone())\r\n\r\n        } else if (element.tokenType === ShutingyardType.OPERATION) {\r\n            switch (element.token) {\r\n                case '-':\r\n                    // this should only happen for negative powers or for negative coefficient.\r\n                    q2 = (stack.pop()) || new Monom().zero()\r\n                    q1 = (stack.pop()) || new Monom().zero()\r\n\r\n                    stack.push(q1.subtract(q2))\r\n\r\n                    break;\r\n                case '*':\r\n                    // Get the last element in the stack\r\n                    q2 = (stack.pop()) || new Monom().one()\r\n                    q1 = (stack.pop()) || new Monom().one()\r\n\r\n                    stack.push(q1.multiply(q2))\r\n                    break\r\n                case '/':\r\n                    // Get the last element in the stack\r\n                    q2 = (stack.pop()) || new Monom().one()\r\n                    q1 = (stack.pop()) || new Monom().one()\r\n\r\n                    stack.push(q1.divide(q2))\r\n                    break\r\n                case '^':\r\n                    // get the two last elements in the stack\r\n                    pow = (stack.pop().coefficient) || new Fraction().one()\r\n                    m = (stack.pop()) || new Monom().one()\r\n\r\n                    letter = m.variables[0]\r\n\r\n                    if (letter !== undefined) {\r\n                        m.setLetter(letter, pow)\r\n                    }\r\n\r\n                    stack.push(m)\r\n                    // this.multiply(m.clone())\r\n                    break\r\n            }\r\n        }\r\n    }\r\n    private _shutingYardToReducedMonom = (inputStr: string): Monom => {\r\n        // Get the RPN array of the current expression\r\n        const SY: Shutingyard = new Shutingyard().parse(inputStr);\r\n        const rpn: { token: string, tokenType: string }[] = SY.rpn;\r\n\r\n        let stack: Monom[] = [], m, pow, letter, q1, q2\r\n\r\n        if (rpn.length === 0) {\r\n            this.zero()\r\n            return this\r\n        } else if (rpn.length === 1) {\r\n            const element = rpn[0]\r\n\r\n            this.one()\r\n            if (element.tokenType === 'coefficient') {\r\n                this.coefficient = new Fraction(element.token)\r\n            } else if (element.tokenType === 'variable') {\r\n                this.setLetter(element.token, 1)\r\n            }\r\n            return this\r\n        } else {\r\n            // Reset the monom\r\n            for (const element of rpn) {\r\n                Monom.addToken(stack, element)\r\n            }\r\n        }\r\n\r\n        this.one()\r\n        this.multiply(stack[0])\r\n        return this\r\n    }\r\n    /**\r\n     * Clone the current Monom.\r\n     */\r\n    clone = (): Monom => {\r\n        let F: Monom = new Monom();\r\n\r\n        F.coefficient = this._coefficient.clone();\r\n\r\n        // Copy the literal parts.\r\n        for (let k in this._literal) {\r\n            F.setLetter(k, this._literal[k].clone());\r\n        }\r\n        return F;\r\n    };\r\n\r\n    copyLiterals = (literal: literalType): literalType => {\r\n        let L: literalType = {}\r\n\r\n        for (let k in literal) {\r\n            L[k] = literal[k].clone()\r\n        }\r\n        return L\r\n    }\r\n\r\n    makeSame = (M: Monom): Monom => {\r\n        // Copy the literal parts.\r\n        for (let k in M._literal) {\r\n            this.setLetter(k, M._literal[k].clone());\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Create a zero value monom\r\n     */\r\n    zero = (): Monom => {\r\n        this._coefficient = new Fraction().zero();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Create a one value monom\r\n     */\r\n    one = (): Monom => {\r\n        this._coefficient = new Fraction().one();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Clean the monom by removing each letters with a power of zero.\r\n     */\r\n    clean = (): Monom => {\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter].isZero()) {\r\n                delete this._literal[letter];\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    reduce = (): Monom => {\r\n        this.clean()\r\n        this.coefficient.reduce()\r\n        return this\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Get the opposed\r\n     * Returns a monom.\r\n     */\r\n    opposed = (): Monom => {\r\n        this._coefficient.opposed();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Add all similar monoms. If they aren't similar, they are simply skipped.\r\n     * @param M (Monom[]) The monoms to add.\r\n     */\r\n    add = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                if (this.isZero()) {\r\n                    this.makeSame(m)\r\n                }\r\n                this._coefficient.add(m.coefficient);\r\n            } else {\r\n                console.log('Add: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Subtract multiple monoms\r\n     * @param M (Monom[]) The monoms to subtract\r\n     */\r\n    subtract = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                if (this.isZero()) {\r\n                    this.makeSame(m)\r\n                }\r\n                this._coefficient.add(m.clone().coefficient.opposed());\r\n            } else {\r\n                console.log('Subtract: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiple multiple monoms to the current monom\r\n     * @param M (Monom[]) The monoms to multiply to.\r\n     */\r\n    multiply = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            // Multiply the coefficient.\r\n            this._coefficient.multiply(m.coefficient);\r\n\r\n            // Multiply the literal parts.\r\n            for (let letter in m.literal) {\r\n                if (this._literal[letter] === undefined) {\r\n                    this._literal[letter] = m.literal[letter].clone()\r\n                } else {\r\n                    this._literal[letter].add(m.literal[letter])\r\n                }\r\n\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiplyByNumber = (F: Fraction | number): Monom => {\r\n        this._coefficient.multiply(F);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divide the current monoms by multiple monoms\r\n     * @param M (Monom[])\r\n     */\r\n    divide = (...M: Monom[]): Monom => {\r\n        // Depending on the given value, choose the current item\r\n        for (let v of M) {\r\n            // Divide the coefficient\r\n            this._coefficient.divide(v.coefficient);\r\n\r\n            // Subtract the power values\r\n            for (let letter in v.literal) {\r\n                this._literal[letter] = (this._literal[letter] === undefined) ? v.literal[letter].clone().opposed() : this._literal[letter].subtract(v.literal[letter])\r\n\r\n                // If the power of a particular setLetter is zero, delete it from the literal part..\r\n                if (this._literal[letter].isZero()) {\r\n                    delete this._literal[letter];\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the pow of a monom.\r\n     * @param nb (number) : Mathematical pow\r\n     */\r\n    pow = (nb: number|Fraction): Monom => {\r\n        this._coefficient.pow(nb);\r\n        for (let letter in this._literal) {\r\n            this._literal[letter].multiply(nb)\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the nth-root of the monom\r\n     * @param p\r\n     */\r\n    root = (p: number): Monom => {\r\n        // TODO: determiner the nth root of a monom\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Return the square root of a monom\r\n     */\r\n    sqrt = (): Monom => {\r\n        if (this.isSquare()) {\r\n            this._coefficient.sqrt();\r\n            for (let letter in this._literal) {\r\n                this._literal[letter].clone().divide(2)\r\n            }\r\n        }\r\n        return this.root(2);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    compare = (M: Monom, sign?: string): boolean => {\r\n        // TODO: Build the compare systems.\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // To be equal, they must be the isSame\r\n                if (!this.compare(M, 'same')) {\r\n                    return false;\r\n                }\r\n\r\n                // The literal parts are the isSame. The coefficient must be equal\r\n                return this._coefficient.isEqual(M.coefficient);\r\n            case 'same':\r\n                // Get the list of all variables from both monoms.\r\n                let M1: string[] = this.variables,\r\n                    M2: string[] = M.variables,\r\n                    K: string[] = M1.concat(M2.filter((item) => M1.indexOf(item) < 0));\r\n\r\n                if(M1.length===0 && M2.length===0){return true}\r\n                // To compare, both must be different than zero.\r\n                if (!this.isZero() && !M.isZero()) {\r\n                    for (let key of K) {\r\n                        // The setLetter is not available in one of the monom\r\n                        if (this._literal[key] === undefined || M.literal[key] === undefined) {\r\n                            return false;\r\n                        }\r\n                        // The setLetter does not have the isSame power in each monoms.\r\n                        if (!this._literal[key].isEqual(M.literal[key])) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // All are positive check - the monoms are the sames.\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is null\r\n     */\r\n    isZero(): boolean {\r\n        return this._coefficient.value === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is one\r\n     */\r\n    isOne(): boolean {\r\n        return this._coefficient.value === 1 && this.variables.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if two monoms are equals\r\n     * @param M\r\n     */\r\n    isEqual = (M: Monom): boolean => {\r\n        return this.compare(M, '=');\r\n    };\r\n\r\n    /**\r\n     * Determine if two monoms are similar\r\n     * @param M\r\n     */\r\n    isSameAs = (M: Monom): boolean => {\r\n        return this.compare(M, 'same');\r\n    };\r\n\r\n    isSquare = (): boolean => {\r\n        if (!this.coefficient.isSquare()) {\r\n            return false;\r\n        }\r\n        return this.isLiteralSquare();\r\n    }\r\n\r\n    isLiteralSquare = (): boolean => {\r\n        for (let letter in this.literal) {\r\n            // A literal square must have a natural power\r\n            if (this.literal[letter].isRational()) {\r\n                return false\r\n            }\r\n\r\n            // The natural power must be be even\r\n            if (this.literal[letter].isEven()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    hasFractionCoefficient = (): boolean => {\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter].isRational()) {\r\n                return true\r\n            }\r\n        }\r\n\r\n        return false\r\n    }\r\n    // ------------------------------------------\r\n    // Misc monoms functions\r\n    // -------------------------------------\r\n    /**\r\n     * Determine if a monom contains a setLetter in it's literal part\r\n     * @param letter\r\n     */\r\n    hasLetter = (letter?: string): boolean => {\r\n        // The letter was not found\r\n        if (this._literal[letter === undefined ? 'x' : letter] === undefined) {\r\n            return false\r\n        }\r\n\r\n        // The letter is found and is not zero !\r\n        return this._literal[letter === undefined ? 'x' : letter].isNotZero();\r\n    };\r\n\r\n    /**\r\n     * Set the power of a particular setLetter\r\n     * @param letter (string) Letter to change\r\n     * @param pow (number) Power of the setLetter (must be positive integer.\r\n     */\r\n    setLetter = (letter: string, pow: Fraction | number): void => {\r\n        if (pow instanceof Fraction) {\r\n            // Set the power of the letter to zero => remove it\r\n            if (this.hasLetter(letter) && pow.isZero()) {\r\n                delete this._literal[letter]\r\n            }\r\n\r\n            this._literal[letter] = pow.clone()\r\n        } else {\r\n            this.setLetter(letter, new Fraction(pow))\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the degree of a monom. If no setLetter is given, the result will be the global degree.\r\n     * @param letter (string) Letter to get to degree (power)\r\n     */\r\n    degree = (letter?: string): Fraction => {\r\n        if (this.variables.length === 0) {\r\n            return new Fraction().zero();\r\n        }\r\n        if (letter === undefined) {\r\n            // Not setLetter given -> we get the global monom degree (sum of all the letters).\r\n            return Object.values(this._literal).reduce((t, n) => t.clone().add(n));\r\n        } else {\r\n            // A setLetter is given -> get the corresponding power.\r\n            return this._literal[letter] === undefined ? new Fraction().zero() : this._literal[letter].clone();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Evaluate a monom. Each setLetter must be assigned to a Fraction.\r\n     * @param values    Dictionary of <setLetter: Fraction>\r\n     */\r\n    evaluate = (values: literalType | Fraction | number): Fraction => {\r\n        let r = this.coefficient.clone();\r\n\r\n        if (typeof values === 'number' || values instanceof Fraction) {\r\n            let tmpValues: literalType = {}\r\n            tmpValues[this.variables[0]] = new Fraction(values)\r\n            return this.evaluate(tmpValues);\r\n        }\r\n\r\n        if (typeof values === 'object') {\r\n            for (let L in this._literal) {\r\n                if (values[L] === undefined) {\r\n                    return new Fraction().zero();\r\n                }\r\n\r\n                let value = new Fraction(values[L])\r\n\r\n                r.multiply(value.pow(this._literal[L]))\r\n            }\r\n        }\r\n\r\n        return r;\r\n    };\r\n\r\n    /**\r\n     * Derivative the monom\r\n     * @param letter\r\n     */\r\n    derivative = (letter?: string): Monom => {\r\n        // No setLetter given - assume it's the setLetter 'x'\r\n        if (letter === undefined) {\r\n            letter = 'x';\r\n        }\r\n\r\n        if (this.hasLetter(letter)) {\r\n            let d = this._literal[letter].clone(),\r\n                dM = this.clone();\r\n\r\n            // Subtract one to the degree.\r\n            dM._literal[letter].subtract(1)\r\n\r\n            // Multiply the coefficient by the previous degree\r\n            dM._coefficient.multiply(new Fraction(d.clone()));\r\n            return dM;\r\n        } else {\r\n            return new Monom().zero();\r\n        }\r\n    };\r\n\r\n    primitive = (letter?: string): Monom => {\r\n        // TODO: derivative including the ln value => implies creating different monom system ?\r\n        if (letter === undefined) {\r\n            letter = 'x'\r\n        }\r\n\r\n        // Zero monom\r\n        let M = this.clone(), degree\r\n\r\n        if (M.hasLetter(letter)) {\r\n            degree = M.degree(letter).clone().add(1)\r\n            M.coefficient = M.coefficient.clone().divide(degree)\r\n            M.setLetter(letter, degree)\r\n        } else {\r\n            // There is no letter.\r\n\r\n            // The coefficient might be zero (=> x) or a number a (=> ax)\r\n            if (M.coefficient.isZero()) {\r\n                M.coefficient = new Fraction().one()\r\n            }\r\n            M.setLetter(letter, 1)\r\n        }\r\n\r\n        return M\r\n    }\r\n    // ----------------------------------------\r\n    // Static functions\r\n    // ----------------------------------------\r\n\r\n    /**\r\n     * Get the least common multiple of monoms\r\n     * @param monoms    Array of monoms\r\n     */\r\n    static lcm = (...monoms: Monom[]): Monom => {\r\n        // All the monoms must be with natural powers...\r\n        for (let m of monoms) {\r\n            if (m.hasFractionCoefficient()) {\r\n                return new Monom().zero()\r\n            }\r\n        }\r\n\r\n\r\n        let M = new Monom(),\r\n            coeffN: number[] = monoms.map(value => value.coefficient.numerator),\r\n            coeffD: number[] = monoms.map(value => value.coefficient.denominator),\r\n            n = Numeric.gcd(...coeffN),\r\n            d = Numeric.lcm(...coeffD);\r\n\r\n        // Get the coefficient.\r\n        M.coefficient = new Fraction(n, d).reduce();\r\n\r\n        // Set the literal parts - go through each monoms literal parts and get only the lowest degree of each letters.\r\n        for (let m of monoms) {\r\n            // Remove the inexistant letters from the resulting monom\r\n            for (let letter in M.literal) {\r\n                if (!(letter in m.literal)) {\r\n                    M.literal[letter].zero();\r\n                }\r\n            }\r\n            for (let letter in m.literal) {\r\n                if (M.literal[letter] === undefined && m.literal[letter].isStrictlyPositive()) {\r\n                    M.literal[letter] = m.literal[letter].clone();\r\n                } else {\r\n                    M.literal[letter] = new Fraction(Math.min(m.literal[letter].value, M.literal[letter].value))\r\n                }\r\n            }\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n    /**\r\n     * Multiply two monoms and return a NEW monom.\r\n     * @param monoms\r\n     */\r\n    static xmultiply = (...monoms: Monom[]): Monom => {\r\n        let M = new Monom().one();\r\n\r\n        for (let m of monoms) {\r\n            M.multiply(m);\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Determine if multiple monoms are similar\r\n     * @param M\r\n     */\r\n    areSameAs = (...M: Monom[]): boolean => {\r\n        let result: boolean = true;\r\n\r\n        // Check all monoms if they are the isSame as the \"this\" one.\r\n        for (let i = 0; i < M.length; i++) {\r\n            if (!this.isSameAs(M[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All check passed -> all the monoms are similar.\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Determine if multiple monoms are equals\r\n     * @param M\r\n     */\r\n    areEquals = (...M: Monom[]): boolean => {\r\n        // They are not similar.\r\n        if (!this.areSameAs(...M)) {\r\n            return false;\r\n        }\r\n\r\n        // Check all coefficient. They must be equals.\r\n        for (let m of M) {\r\n            if (!this._coefficient.isEqual(m.coefficient)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All checks passed.\r\n        return true;\r\n    };\r\n\r\n}\r\n","/**\r\n * Polynom module contains everything necessary to handle polynoms.*\r\n */\r\n\r\nimport {literalType, Monom} from './monom';\r\nimport {Shutingyard, ShutingyardType, Token} from '../shutingyard';\r\nimport {Numeric} from '../numeric';\r\nimport {Fraction} from \"../coefficients\";\r\nimport {log} from \"util\";\r\n\r\nexport type PolynomParsingType = string|Polynom|number|Fraction|Monom\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n * ```\r\n * let P = new Polynom('3x-4')\r\n * ```\r\n */\r\nexport class Polynom {\r\n    private _rawString: string;\r\n\r\n    /**\r\n     *\r\n     * @param {string} polynomString (optional) Default polynom to parse on class creation\r\n     * @param values\r\n     */\r\n    constructor(polynomString?: PolynomParsingType, ...values: unknown[]) {\r\n        this._monoms = [];\r\n        this._factors = [];\r\n        if (polynomString !== undefined) {\r\n            this.parse(polynomString, ...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    private _monoms: Monom[];\r\n\r\n    // ------------------------------------------\r\n    get monoms() {\r\n        return this._monoms;\r\n    }\r\n\r\n    set monoms(M: Monom[]) {\r\n        this._monoms = M;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n\r\n    private _factors: Polynom[];\r\n\r\n    get factors(): Polynom[] {\r\n        return this._factors;\r\n    }\r\n\r\n    set factors(value: Polynom[]) {\r\n        this._factors = value;\r\n    }\r\n\r\n    private _texString: string;\r\n\r\n    get texString(): string {\r\n        return this._texString;\r\n    }\r\n\r\n    get texFactors(): string {\r\n        this.factorize()\r\n\r\n        let tex = ''\r\n        for (let f of this.factors) {\r\n            if (f.monoms.length > 1) {\r\n                tex += `(${f.tex})`\r\n            } else {\r\n                tex = f.tex + tex;\r\n            }\r\n        }\r\n        return tex;\r\n    }\r\n\r\n    get length() {\r\n        // TODO: Must reduce the monoms list to remove the zero coefficient.\r\n        return this._monoms.length;\r\n    }\r\n\r\n    get display(): string {\r\n        return this.genDisplay();\r\n    }\r\n\r\n    get raw(): string {\r\n        return this._rawString\r\n    }\r\n\r\n    get tex(): string {\r\n        return this.genDisplay('tex');\r\n    }\r\n\r\n    get isMultiVariable(): boolean {\r\n        const B = false;\r\n        for (const m of this._monoms) {\r\n            if (m.variables.length > 1) {\r\n                return true;\r\n            }\r\n        }\r\n        return B;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            V = V.concat(m.variables);\r\n        }\r\n\r\n        // Remove duplicates.\r\n        V = [...new Set(V)];\r\n\r\n        return V;\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse a string to a polynom.\r\n     * @param inputStr\r\n     * @param values: as string, numbers or fractions\r\n     */\r\n    parse = (inputStr: PolynomParsingType, ...values: unknown[]): Polynom => {\r\n        // Reset the main variables.\r\n        this._monoms = []\r\n        this._factors = []\r\n\r\n        if(typeof inputStr === 'string') {\r\n            return this._parseString(inputStr, ...values)\r\n        }else if(typeof inputStr === 'number' || inputStr instanceof Fraction || inputStr instanceof Monom){\r\n            this._monoms.push(new Monom(inputStr))\r\n        }else if(inputStr instanceof Polynom){\r\n            for(const m of inputStr.monoms){\r\n                this._monoms.push(m.clone())\r\n            }\r\n        }\r\n\r\n        return this\r\n    };\r\n\r\n    private _parseString(inputStr: string, ...values:unknown[]): Polynom{\r\n        if (values === undefined || values.length === 0) {\r\n            inputStr = '' + inputStr;\r\n            this._rawString = inputStr;\r\n\r\n            // Parse the polynom using the shutting yard algorithm\r\n            if (inputStr !== '' && !isNaN(Number(inputStr))) {\r\n                this.empty();\r\n                // It's a simple number.\r\n                let m = new Monom(inputStr);\r\n                // m.coefficient = new Fraction(inputStr);\r\n                // m.literalStr = '';\r\n                this.add(m);\r\n                return this;\r\n            }\r\n\r\n            // Parse the string.\r\n            return this.shutingYardToReducedPolynom(inputStr);\r\n        } else if (/^[a-z]/.test(inputStr)) {\r\n            // We assume the inputStr contains only letters.\r\n            this.empty();\r\n\r\n            let fractions = values.map(x => new Fraction(x));\r\n            // Multiple setLetter version\r\n            if (inputStr.length > 1) {\r\n                // TODO: check that the number of values given correspond to the letters (+1 eventually)\r\n                let letters = inputStr.split(''),\r\n                    i = 0;\r\n                for (let F of fractions) {\r\n                    let m = new Monom();\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = letters[i] || '';\r\n                    this.add(m);\r\n                    i++;\r\n                }\r\n            }\r\n            // Single setLetter version\r\n            else {\r\n                let n = fractions.length - 1;\r\n                for (let F of fractions) {\r\n                    let m = new Monom()\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = `${inputStr}^${n}`\r\n                    this.add(m);\r\n                    n--;\r\n                }\r\n            }\r\n            return this;\r\n        } else {\r\n            return this.zero();\r\n        }\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n\r\n    /**\r\n     * Clone the polynom\r\n     */\r\n    clone = (): Polynom => {\r\n        const P = new Polynom();\r\n        const M: Monom[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            M.push(m.clone());\r\n        }\r\n\r\n        P.monoms = M;\r\n        return P;\r\n    };\r\n\r\n    /**\r\n     * Set the polynom to zero.\r\n     * @returns {this}\r\n     */\r\n    zero = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().zero());\r\n        this._rawString = '0';\r\n        return this;\r\n    };\r\n\r\n    one = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().one());\r\n        this._rawString = '1';\r\n        return this;\r\n    }\r\n\r\n    empty = (): Polynom => {\r\n        this._monoms = [];\r\n        this._rawString = '';\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    opposed = (): Polynom => {\r\n        this._monoms = this._monoms.map(m => m.opposed());\r\n        return this;\r\n    };\r\n\r\n    add = (...values: unknown[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value instanceof Polynom) {\r\n                this._monoms = this._monoms.concat(value.monoms);\r\n            } else if (value instanceof Monom) {\r\n                this._monoms.push(value.clone());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()));\r\n            } else {\r\n                this._monoms.push(new Monom(value));\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    // // -----------------------------------------------\r\n    // // Polynom generators and randomizers\r\n    // // -----------------------------------------------\r\n    // random(config?: randomPolynomConfig) {\r\n    //     return Random.polynom(config);\r\n    // }\r\n    //\r\n    // private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n    //     degree: 2,\r\n    //     unit: true,\r\n    //     fractions: false,\r\n    //     factorable: false,\r\n    //     letters: 'x',\r\n    //     allowNullMonom: false,\r\n    //     numberOfMonoms: false\r\n    // };\r\n    // get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n    //     return this._randomizeDefaults;\r\n    // }\r\n    //\r\n    // set randomizeDefaults(value) {\r\n    //     this._randomizeDefaults = value;\r\n    // }\r\n    //\r\n    // randomize = (config: { [key: string]: number | string | boolean }): Polynom => {\r\n    //     let P = new Polynom();\r\n    //\r\n    //     // Check the config file and use the default values.\r\n    //     if (config === undefined) {\r\n    //         config = {};\r\n    //     }\r\n    //     for (let k in this._randomizeDefaults) {\r\n    //         if (config[k] === undefined) {\r\n    //             config[k] = this._randomizeDefaults[k];\r\n    //         }\r\n    //     }\r\n    //\r\n    //     // TODO: Build a more robust randomize function\r\n    //     return P;\r\n    // }\r\n    //\r\n    // rndFactorable = (degree: number = 2, unit: boolean | number = false, letters: string = 'x'): Polynom => {\r\n    //     // TODO: Make rndFactorable polynom generator more user friendly\r\n    //     this._factors = [];\r\n    //     for (let i = 0; i < degree; i++) {\r\n    //         let factorUnit = unit === true || i >= unit,\r\n    //             p = Random.polynom({\r\n    //                 degree: 1,\r\n    //                 unit: factorUnit,\r\n    //                 fraction: false,\r\n    //                 letters\r\n    //             });\r\n    //         this._factors.push(p);\r\n    //     }\r\n    //\r\n    //     this.empty().monoms = this._factors[0].monoms;\r\n    //     for (let i = 1; i < this._factors.length; i++) {\r\n    //         this.multiply(this._factors[i]);\r\n    //     }\r\n    //     return this;\r\n    // };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n\r\n    subtract = (...values: unknown[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value instanceof Polynom) {\r\n                this._monoms = this._monoms.concat(value.clone().opposed().monoms);\r\n            } else if (value instanceof Monom) {\r\n                this._monoms.push(value.clone().opposed());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()).opposed());\r\n            } else {\r\n                this._monoms.push(new Monom(value).opposed());\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    multiply = (value: unknown): Polynom => {\r\n        if (value instanceof Polynom) {\r\n            return this.multiplyByPolynom(value);\r\n        } else if (value instanceof Fraction) {\r\n            return this.multiplyByFraction(value);\r\n        } else if (value instanceof Monom) {\r\n            return this.multiplyByMonom(value);\r\n        } else if (Number.isSafeInteger(value) && typeof value === 'number') {\r\n            return this.multiplyByInteger(value);\r\n        }\r\n\r\n        // Something went wrong...\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divide the current polynom by another polynom.\r\n     * @param P\r\n     * returns {quotient: Polynom, reminder: Polynom}\r\n     */\r\n    euclidian = (P: Polynom): { quotient: Polynom, reminder: Polynom } => {\r\n        const letter: string = P.variables[0];\r\n        const quotient: Polynom = new Polynom().zero();\r\n        const reminder: Polynom = this.clone().reorder(letter);\r\n\r\n        // There is no variable !\r\n        if (P.variables.length === 0) {\r\n            return {quotient, reminder}\r\n        }\r\n\r\n        // Get at least a letter\r\n\r\n        const maxMP: Monom = P.monomByDegree(undefined, letter);\r\n        const degreeP: Fraction = P.degree(letter);\r\n\r\n        let newM: Monom;\r\n\r\n        // Make the euclidian division of the two polynoms.\r\n        let MaxIteration = this.degree(letter).clone().multiply(2);\r\n        while (reminder.degree(letter).geq(degreeP) && MaxIteration.isPositive()) {\r\n            MaxIteration.subtract(1)\r\n\r\n            // Get the greatest monom divided by the max monom of the divider\r\n            newM = reminder.monomByDegree(undefined, letter).clone().divide(maxMP);\r\n\r\n            if (newM.isZero()) {\r\n                break;\r\n            }\r\n\r\n            // Get the new quotient and reminder.\r\n            quotient.add(newM);\r\n            reminder.subtract(P.clone().multiply(newM));\r\n        }\r\n\r\n        quotient.reduce()\r\n        reminder.reduce()\r\n        return {quotient, reminder};\r\n    };\r\n\r\n    divide = (value: unknown): Polynom => {\r\n        if (value instanceof Fraction) {\r\n            return this.divideByFraction(value);\r\n        } else if (typeof value === 'number' && Number.isSafeInteger(value)) {\r\n            return this.divideByInteger(value);\r\n        }\r\n\r\n    }\r\n\r\n    pow = (nb: number): Polynom => {\r\n        if (!Number.isSafeInteger(nb)) {\r\n            return this.zero();\r\n        }\r\n        if (nb < 0) {\r\n            return this.zero();\r\n        }\r\n        if (nb === 0) {\r\n            return new Polynom();\r\n        }\r\n\r\n        const P = this.clone();\r\n        for (let i = 1; i < nb; i++) {\r\n            this.multiply(P);\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param P\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (P: Polynom, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '='\r\n        }\r\n\r\n        // Create clone version to reduce them without altering the original polynoms.\r\n        const cP1 = this.clone().reduce().reorder();\r\n        const cP2 = P.clone().reduce().reorder();\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree().isNotEqual(cP2.degree())) {\r\n                    return false;\r\n                }\r\n\r\n                // Check if the coefficients are the isSame.\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isEqual(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            case 'same':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree() !== cP2.degree()) {\r\n                    return false;\r\n                }\r\n\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isSameAs(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    isZero(): boolean {\r\n        return (this._monoms.length === 1 && this._monoms[0].coefficient.isZero()) || this._monoms.length === 0;\r\n    }\r\n\r\n    isOne(): boolean {\r\n        return this._monoms.length === 1 && this._monoms[0].coefficient.isOne();\r\n    }\r\n\r\n    isEqual = (P: Polynom): boolean => {\r\n        return this.compare(P, '=');\r\n    };\r\n\r\n    isSameAs = (P: Polynom): boolean => {\r\n        return this.compare(P, 'same');\r\n    };\r\n\r\n    isOpposedAt = (P: Polynom): boolean => {\r\n        return this.compare(P.clone().opposed(), '=');\r\n    };\r\n\r\n    isFactorized = (polynomString: string): boolean => {\r\n        let P;\r\n\r\n        // Check if polynom is complete...\r\n        if (polynomString.match(/\\(/g).length !== polynomString.match(/\\)/g).length) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check if the provided (string) version is fully factorized.\r\n        // Run a regex on the string.\r\n        let polynomStringNormalized = polynomString.replaceAll('*', ''),\r\n            polynomStringReduced = '' + polynomStringNormalized,\r\n            factors: string[] = [];\r\n\r\n        for (let x of polynomStringNormalized.matchAll(/\\(([a-z0-9+\\-]+)\\)(\\^[0-9]*)?/g)) {\r\n            if (x[2] !== undefined) {\r\n                for (let i = 0; i < +x[2].substr(1); i++) {\r\n                    factors.push(x[1])\r\n                }\r\n            } else {\r\n                factors.push(x[1]);\r\n            }\r\n            polynomStringReduced = polynomStringReduced.replaceAll(x[0], '');\r\n        }\r\n        if (polynomStringReduced !== '') {\r\n            factors.push(polynomStringReduced);\r\n        }\r\n        let polyFactors = factors.map(x => new Polynom(x));\r\n\r\n        // Factorize the current polynom.\r\n        this.factorize();\r\n\r\n        // Compare the given factors with the generated factors\r\n        let sign = 1;\r\n        for (let f of this.factors) {\r\n            for (let i = 0; i < polyFactors.length; i++) {\r\n                if (f.isEqual(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    break;\r\n                } else if (f.isOpposedAt(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    sign = -sign;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // The polyfactors must be empty and the cumulative opposite factors must be 1.\r\n        return (polyFactors.length === 0 && sign === 1);\r\n    }\r\n\r\n    isDeveloped = (polynomString: string): Boolean => {\r\n        let P: Polynom;\r\n\r\n        // There is at least one parenthese - it is not developed.\r\n        if (polynomString.match(/\\(/g).length + polynomString.match(/\\)/g).length) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            // Build the polynom\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check that everything is completely developed. Actually, there are no parentheses... so it is fully developed\r\n\r\n        // maybe it wasn't reduced and not ordered...\r\n        // compare polynom string.\r\n\r\n        // normalize the string\r\n        let polynomStringNormalized = polynomString.replaceAll('[*\\s]', '')\r\n\r\n        // Determine if it's the exact same string.\r\n        // TODO: Maybe it's enough to just make this test !\r\n        return polynomStringNormalized === P.reduce().reorder().display\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n\r\n    // -------------------------------------\r\n    reduce = (): Polynom => {\r\n        for (let i = 0; i < this._monoms.length; i++) {\r\n            for (let j = i + 1; j < this._monoms.length; j++) {\r\n                if (this._monoms[i].isSameAs(this.monoms[j])) {\r\n                    this._monoms[i].add(this.monoms[j]);\r\n                    this._monoms.splice(j, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Remove all null monoms\r\n        this._monoms = this._monoms.filter((m) => {\r\n            return m.coefficient.value !== 0\r\n        });\r\n\r\n        // Reduce all monoms coefficient.\r\n        for (const m of this._monoms) {\r\n            m.coefficient.reduce();\r\n        }\r\n\r\n        if (this.length === 0) {\r\n            return new Polynom().zero();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    reorder = (letter: string = 'x'): Polynom => {\r\n        // TODO: Must handle multiple setLetter reorder system\r\n        this._monoms.sort(function (a, b) {\r\n            return b.degree(letter).clone().subtract(a.degree(letter)).value\r\n        });\r\n        return this.reduce();\r\n    };\r\n\r\n    degree = (letter?: string): Fraction => {\r\n        let d: Fraction = new Fraction().zero();\r\n        for (const m of this._monoms) {\r\n            d = Fraction.max(m.degree(letter).value, d);\r\n        }\r\n        return d;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        let L: string[] = [], S = new Set();\r\n\r\n        for (let m of this._monoms) {\r\n            S = new Set([...S, ...m.variables]);\r\n        }\r\n\r\n        // @ts-ignore\r\n        return [...S];\r\n    }\r\n\r\n    /**\r\n     * Replace a variable (letter) by a polynom.\r\n     * @param letter\r\n     * @param P\r\n     */\r\n    replaceBy = (letter: string, P: Polynom): Polynom => {\r\n        let pow: Fraction;\r\n        const resultPolynom: Polynom = new Polynom().zero();\r\n\r\n        for (const m of this.monoms) {\r\n            if (m.literal[letter] === undefined || m.literal[letter].isZero()) {\r\n                resultPolynom.add(m.clone());\r\n            } else {\r\n                // We have found a setLetter.\r\n                // Get the power and reset it.\r\n                pow = m.literal[letter].clone();\r\n                delete m.literal[letter];\r\n\r\n                // TODO: replaceBy works only with positive and natural pow\r\n                resultPolynom.add(P.clone().pow(Math.abs(pow.numerator)).multiply(m));\r\n            }\r\n        }\r\n\r\n        this._monoms = resultPolynom.reduce().reorder().monoms;\r\n        return this;\r\n    };\r\n\r\n    // Evaluate a polynom.\r\n    evaluate = (values: literalType | Fraction | number): Fraction => {\r\n        const r = new Fraction().zero();\r\n\r\n        this._monoms.forEach(monom => {\r\n            //console.log('Evaluate polynom: ', monom.display, values, monom.evaluate(values).display);\r\n            r.add(monom.evaluate(values));\r\n        });\r\n\r\n        return r;\r\n    };\r\n\r\n    derivative = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.derivative(letter));\r\n        }\r\n        return dP;\r\n\r\n    }\r\n\r\n    primitive = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.primitive(letter))\r\n        }\r\n        return dP\r\n    }\r\n    // ------------------------------------------\r\n    // Misc polynoms functions\r\n\r\n    integrate = (a: Fraction | number, b: Fraction | number, letter?: string): Fraction => {\r\n        const primitive = this.primitive(letter)\r\n\r\n        if (letter === undefined) {\r\n            letter = 'x'\r\n        }\r\n\r\n        let valuesA: literalType = {},\r\n            valuesB: literalType = {}\r\n        valuesA[letter] = new Fraction(a);\r\n        valuesB[letter] = new Fraction(b);\r\n\r\n        return primitive.evaluate(valuesB).subtract(primitive.evaluate(valuesA))\r\n    }\r\n\r\n    // -------------------------------------\r\n    /**\r\n     * Factorize a polynom and store the best results in factors.\r\n     * @param maxValue Defines the greatest value to search to (default is 20).\r\n     */\r\n    factorize = (letter?: string): Polynom[] => {\r\n        let factors: Polynom[] = [];\r\n\r\n        // Extract the common monom\r\n        let P = this.clone().reorder(),\r\n            M = P.commonMonom(),\r\n            tempPolynom: Polynom\r\n\r\n        // It has a common monom.\r\n        if (!M.isOne()) {\r\n            tempPolynom = new Polynom()\r\n            tempPolynom.monoms = [M]\r\n            factors = [tempPolynom.clone()]\r\n            P = P.euclidian(tempPolynom).quotient;\r\n        }\r\n\r\n        let securityLoop = P.degree().clone().multiply(2).value\r\n        // securityLoop = 0\r\n\r\n        while (securityLoop >= 0) {\r\n            securityLoop--\r\n\r\n            if (P.monoms.length < 2) {\r\n                if (!P.isOne()) {\r\n                    factors.push(P.clone());\r\n                }\r\n                break;\r\n            } else {\r\n                // Get the first and last monom.\r\n                let m1 = P.monoms[0].dividers,\r\n                    m2 = P.monoms[P.monoms.length - 1].dividers\r\n\r\n                for (let m1d of m1) {\r\n                    for (let m2d of m2) {\r\n                        // if(m1d.degree()===m2d.degree()){continue}\r\n                        let dividerPolynom = new Polynom(),\r\n                            result\r\n                        dividerPolynom.monoms = [m1d.clone(), m2d.clone()]\r\n                        result = P.euclidian(dividerPolynom)\r\n\r\n                        if (result.reminder.isZero()) {\r\n                            P = result.quotient.clone();\r\n                            factors.push(dividerPolynom)\r\n                            continue;\r\n                        }\r\n\r\n                        dividerPolynom.monoms = [m1d.clone(), m2d.clone().opposed()]\r\n                        result = P.euclidian(dividerPolynom)\r\n                        if (result.reminder.isZero()) {\r\n                            P = result.quotient.clone();\r\n                            factors.push(dividerPolynom)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.factors = factors\r\n        return factors;\r\n    }\r\n\r\n    // TODO: get zeroes for more than first degree and for more than natural degrees\r\n    getZeroes = (): (Fraction | boolean)[] => {\r\n        const Z: Fraction[] = [];\r\n\r\n        switch (this.degree().value) {\r\n            case 0:\r\n                if (this._monoms[0].coefficient.value === 0) {\r\n                    return [true];\r\n                } else {\r\n                    return [false];\r\n                }\r\n            case 1:\r\n                // There is only one monoms,\r\n                if (this._monoms.length === 1) {\r\n                    return [new Fraction().zero()];\r\n                } else {\r\n                    const P = this.clone().reduce().reorder();\r\n                    return [P.monoms[1].coefficient.opposed().divide(P.monoms[0].coefficient)];\r\n                }\r\n            // TODO: Determine the zeros of an equation of second degree.\r\n            //case 2:\r\n            default:\r\n                // Make sure the polynom is factorized.\r\n                if (this._factors.length === 0) {\r\n                    this.factorize()\r\n                }\r\n\r\n                let zeroes = [], zeroesAsTex = [];\r\n                for (let P of this._factors) {\r\n                    if (P.degree().greater(2)) {\r\n                        // TODO: Handle other polynom.\r\n\r\n                    } else if (P.degree().value === 2) {\r\n                        let A = P.monomByDegree(2).coefficient,\r\n                            B = P.monomByDegree(1).coefficient,\r\n                            C = P.monomByDegree(0).coefficient,\r\n                            D = B.clone().pow(2).subtract(A.clone().multiply(C).multiply(4));\r\n\r\n                        if (D.value > 0) {\r\n                            /*console.log('Two zeroes for ', P.tex); */\r\n                            let x1 = (-(B.value) + Math.sqrt(D.value)) / (2 * A.value),\r\n                                x2 = (-(B.value) - Math.sqrt(D.value)) / (2 * A.value);\r\n\r\n                            zeroes.push(new Fraction(x1.toFixed(3)).reduce());\r\n                            zeroes.push(new Fraction(x2.toFixed(3)).reduce());\r\n                        } else if (D.value === 0) {\r\n                            /*console.log('One zero for ', P.tex); */\r\n\r\n                        } else {\r\n                            console.log('No zero for ', P.tex);\r\n                        }\r\n                    } else {\r\n                        for (let z of P.getZeroes()) {\r\n                            // Check if the zero is already in the list.\r\n                            if (z === false || z === true) {\r\n                                continue;\r\n                            }\r\n                            if (zeroesAsTex.indexOf(z.frac) === -1) {\r\n                                zeroes.push(z);\r\n                                zeroesAsTex.push(z.frac);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return zeroes;\r\n        }\r\n        return Z;\r\n    };\r\n\r\n    // TODO: analyse the next functions to determine if they are useful or not...\r\n    monomByDegree = (degree?: Fraction | number, letter?: string): Monom => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomByDegree(this.degree(letter), letter);\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter).isEqual(degree)) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        // Nothing was found - return the null monom.\r\n        return new Monom().zero();\r\n    };\r\n\r\n    monomsByDegree = (degree?: number | Fraction, letter?: string): Monom[] => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomsByDegree(this.degree(letter));\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        let Ms: Monom[] = [];\r\n\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter) === degree) {\r\n                Ms.push(m.clone())\r\n            }\r\n        }\r\n\r\n        return Ms\r\n        // Nothing was found - retur\r\n    }\r\n\r\n    // Used in LinearSystem.tex\r\n    monomByLetter = (letter: string): Monom => {\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.hasLetter(letter)) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        return new Monom().zero();\r\n    };\r\n\r\n    // Next functions are used for for commonMonom, which is used in the factorize method.\r\n    getDenominators = (): number[] => {\r\n        const denominators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            denominators.push(m.coefficient.denominator);\r\n        }\r\n        return denominators;\r\n    };\r\n\r\n    getNumerators = (): number[] => {\r\n        const numerators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            numerators.push(m.coefficient.numerator);\r\n        }\r\n        return numerators;\r\n    };\r\n\r\n    lcmDenominator = (): number => {\r\n        return Numeric.lcm(...this.getDenominators());\r\n    };\r\n    // ------------------------------------------\r\n    // Polynoms factorization functions\r\n\r\n    gcdDenominator = (): number => {\r\n        return Numeric.gcd(...this.getDenominators());\r\n    };\r\n\r\n    lcmNumerator = (): number => {\r\n        return Numeric.lcm(...this.getNumerators());\r\n    };\r\n\r\n    gcdNumerator = (): number => {\r\n        return Numeric.gcd(...this.getNumerators());\r\n    };\r\n    // ------------------------------------------\r\n    // Polynoms helpers functions\r\n    // -------------------------------------\r\n\r\n    commonMonom = (): Monom => {\r\n        let M = new Monom().one(), numerator: number, denominator: number, degree = this.degree();\r\n\r\n        numerator = this.gcdNumerator();\r\n        denominator = this.gcdDenominator();\r\n\r\n        M.coefficient = new Fraction(numerator, denominator);\r\n        for (let L of this.variables) {\r\n            // Initialize the setLetter with the max degree\r\n            M.setLetter(L, degree);\r\n            for (let m of this._monoms) {\r\n                M.setLetter(L, Fraction.min(m.degree(L), M.degree(L)));\r\n                if (M.degree(L).isZero()) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return M;\r\n    }\r\n\r\n    private genDisplay = (output?: string, forceSign?: boolean, wrapParentheses?: boolean): string => {\r\n        let P: string = '';\r\n\r\n        for (const k of this._monoms) {\r\n            if (k.coefficient.value === 0) {\r\n                continue;\r\n            }\r\n\r\n            P += `${(k.coefficient.sign() === 1 && (P !== '' || forceSign === true)) ? '+' : ''}${(output === 'tex') ? k.tex : k.display}`;\r\n        }\r\n\r\n        if (wrapParentheses === true && this.length > 1) {\r\n            if (output === 'tex') {\r\n                P = `\\\\left( ${P} \\\\right)`;\r\n            } else {\r\n                P = `(${P})`;\r\n            }\r\n        }\r\n\r\n        if (P === '') {\r\n            P = '0';\r\n        }\r\n        return P;\r\n    };\r\n\r\n\r\n    static addToken = (stack: Polynom[], element: Token): void => {\r\n\r\n        switch(element.tokenType){\r\n            case ShutingyardType.COEFFICIENT:\r\n                stack.push(new Polynom( element.token ))\r\n                break\r\n\r\n            case ShutingyardType.VARIABLE:\r\n                stack.push(new Polynom().add(new Monom(element.token)))\r\n                break\r\n\r\n            case ShutingyardType.CONSTANT:\r\n                // TODO: add constant support to Polynom parsing.\r\n                console.log('Actually, not supported - will be added later !')\r\n                break\r\n\r\n            case ShutingyardType.OPERATION:\r\n                if(stack.length>=2){\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n\r\n                    if(element.token === '+'){\r\n                        stack.push(a.add(b))\r\n                    }else if(element.token === '-'){\r\n                        stack.push(a.subtract(b))\r\n                    }else if(element.token === '*'){\r\n                        stack.push(a.multiply(b))\r\n                    }else if(element.token === '/'){\r\n                        if(b.degree().isStrictlyPositive()){\r\n                            console.log('divide by a polynom -> should create a rational polynom !')\r\n                        }else {\r\n                            stack.push(a.divide(b.monoms[0].coefficient))\r\n\r\n                        }\r\n                    }else if(element.token === '^'){\r\n                        if(b.degree().isStrictlyPositive()) {\r\n                            console.error('Cannot elevate a polynom with another polynom !')\r\n                        }else {\r\n                            if(b.monoms[0].coefficient.isRelative()) {\r\n                                // Integer power\r\n                                stack.push(a.pow(b.monoms[0].coefficient.value))\r\n                            }else{\r\n                                // Only allow power if the previous polynom is only a monom, without coefficient.\r\n                                if(a.monoms.length===1 && a.monoms[0].coefficient.isOne()){\r\n                                    for (let letter in a.monoms[0].literal) {\r\n                                        a.monoms[0].literal[letter].multiply(b.monoms[0].coefficient)\r\n                                    }\r\n                                    stack.push(a)\r\n                                }else {\r\n                                    console.error('Cannot have power with fraction')\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }else{\r\n                    console.log('Stack size: ', stack.length)\r\n                    if(element.token === '-'){\r\n                        stack.push(stack.pop().opposed())\r\n                    }else{\r\n                        console.log('While parsing, cannot apply ', element.token, 'to', stack[0].tex)\r\n                    }\r\n                }\r\n                break\r\n\r\n            case ShutingyardType.MONOM:\r\n                // Should never appear.\r\n                console.error('The monom token should not appear here')\r\n                break;\r\n\r\n            case ShutingyardType.FUNCTION:\r\n                // Should never appear.\r\n                console.log('The function token should not appear here - might be introduced later.')\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * Main parse using a shutting yard class\r\n     * @param inputStr\r\n     */\r\n    private shutingYardToReducedPolynom = (inputStr: string): Polynom => {\r\n        // Get the RPN array of the current expression\r\n        const SY: Shutingyard = new Shutingyard().parse(inputStr);\r\n        const rpn: { token: string, tokenType: string }[] = SY.rpn;\r\n\r\n        // New version for reducing shuting yard.\r\n        this.zero()\r\n\r\n        let stack: Polynom[] = [],\r\n            monom: Monom = new Monom()\r\n\r\n        // Loop through the\r\n        for (const element of rpn) {\r\n            Polynom.addToken(stack, element);\r\n        }\r\n\r\n        if (stack.length === 1) {\r\n            this.add(stack[0])\r\n        }\r\n\r\n        return this\r\n        /**\r\n         let m1: Polynom;\r\n         let m2: Polynom;\r\n\r\n         let stack: Polynom[] = [],\r\n         previousToken: string = null,\r\n         tempPolynom\r\n\r\n         for (const element of rpn) {\r\n            if (element.tokenType === 'coefficient' || element.tokenType === 'variable') {\r\n                tempPolynom = new Polynom().zero();\r\n                tempPolynom.monoms = [new Monom(element.token)]\r\n                stack.push(tempPolynom.clone())\r\n            } else if (element.tokenType === 'operation') {\r\n                m2 = (stack.pop()) || new Polynom().zero();\r\n                m1 = (stack.pop()) || new Polynom().zero();\r\n                switch (element.token) {\r\n                    case '+':\r\n                        stack.push(m1.add(m2))\r\n                        break;\r\n                    case '-':\r\n                        stack.push(m1.subtract(m2))\r\n                        break;\r\n                    case '*':\r\n                        stack.push(m1.multiply(m2))\r\n                        break;\r\n                    case '^':\r\n                        stack.push(m1.pow(+previousToken))\r\n                }\r\n            }\r\n            previousToken = element.token;\r\n        }\r\n\r\n         this._monoms = stack[0].monoms;\r\n         return this;*/\r\n    }\r\n\r\n    private multiplyByPolynom = (P: Polynom): Polynom => {\r\n        const M: Monom[] = [];\r\n        for (const m1 of this._monoms) {\r\n            for (const m2 of P.monoms) {\r\n                M.push(Monom.xmultiply(m1, m2));\r\n            }\r\n        }\r\n\r\n        this._monoms = M;\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.multiply(F);\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByInteger = (nb: number): Polynom => {\r\n        return this.multiplyByFraction(new Fraction(nb));\r\n    };\r\n\r\n    private multiplyByMonom = (M: Monom): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.multiply(M)\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n    private divideByInteger = (nb: number): Polynom => {\r\n        const nbF = new Fraction(nb);\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(nbF);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    private divideByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(F);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    private _factorize2ndDegree = (letter: string): Polynom[] => {\r\n        let P1: Polynom, P2: Polynom,\r\n            a, b, c, delta, x1, x2, factor;\r\n\r\n        // One variable only\r\n        if (this.numberOfVars === 1) {\r\n            a = this.monomByDegree(2, letter).coefficient;\r\n            b = this.monomByDegree(1, letter).coefficient;\r\n            c = this.monomByDegree(0, letter).coefficient;\r\n            delta = b.clone().pow(2).subtract(a.clone().multiply(c).multiply(4));\r\n\r\n            if (delta.isZero()) {\r\n                x1 = b.clone().opposed().divide(a.clone().multiply(2))\r\n                P1 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                P2 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                factor = a.divide(x1.denominator).divide(x1.denominator);\r\n\r\n                if (!factor.isOne()) {\r\n                    // TODO: Update new Polynom to accept anything...\r\n                    return [new Polynom(factor.display), P1, P2]\r\n                } else {\r\n                    return [P1, P2]\r\n                }\r\n            } else if (delta.isPositive() && delta.isSquare()) {\r\n                x1 = b.clone().opposed()\r\n                    .add(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n                x2 = b.clone().opposed()\r\n                    .subtract(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n\r\n                // (2x+5)(3x-2)\r\n                // 6x^2+11x-10\r\n                // a = 6, b = 11, c = -10\r\n                // delta = 121-4*6*(-10) = 361= 19^2\r\n                // x1 = (-11 + 19)  / 12 = 8/12 = 2/3\r\n                // x2 = (-11 - 19)  / 12 = -30/12 = -5/2\r\n                factor = a.divide(x1.denominator).divide(x2.denominator);\r\n                if (factor.isOne()) {\r\n                    return [\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n                } else {\r\n                    return [\r\n                        new Polynom(factor.display),\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n\r\n                }\r\n            } else {\r\n                // No solution possible - return the complete value.\r\n                return [this.clone()]\r\n            }\r\n        } else {\r\n            // If multiple variables, only handle perfect squares...\r\n            a = this.monomByDegree(2, letter);\r\n            b = this.monomByDegree(1, letter);\r\n            c = this.monomByDegree(0, letter);\r\n\r\n\r\n            if (a.isLiteralSquare() && c.isLiteralSquare()) {\r\n                // Check the middle item is same as...\r\n                if (b.clone().pow(2).isSameAs(a.clone().multiply(c))) {\r\n                    // Determine if the coefficient values matches.\r\n\r\n                    // Search 4 values (r, s, t, u) that matches:\r\n                    // (r X + s Y)(t X + u Y) = rt X^2 + (ru + st) XY + su Y^2\r\n\r\n                    let xPolynom = new Polynom('x', a.coefficient, b.coefficient, c.coefficient);\r\n                    let xFactors = xPolynom._factorize2ndDegree('x');\r\n\r\n                    let factors = [], xyzPolynom: Polynom;\r\n\r\n                    if (xFactors.length >= 2) {\r\n                        for (let p of xFactors) {\r\n                            if (p.degree().isZero()) {\r\n                                factors.push(p.clone())\r\n                            } else {\r\n                                xyzPolynom = p.clone();\r\n                                xyzPolynom.monoms[0].literal = a.literalSqrt\r\n                                xyzPolynom.monoms[1].literal = c.literalSqrt\r\n                                factors.push(xyzPolynom.clone())\r\n                            }\r\n                        }\r\n                        return factors\r\n                    }\r\n                }\r\n            }\r\n\r\n            return [this.clone()]\r\n            //\r\n            // console.log(a.tex, b.tex, c.tex)\r\n            // if (a.isSquare() && c.isSquare()) {\r\n            //     console.log('A C squares')\r\n            //     if (a.clone().sqrt().multiply(c.clone().sqrt()).multiplyByNumber(2).isSameAs(b)) {\r\n            //         console.log('HERE')\r\n            //         if (a.coefficient.sign() === b.coefficient.sign()) {\r\n            //             return []\r\n            //         }else{\r\n            //             return []\r\n            //         }\r\n            //     }\r\n            // } else if(a.isLiteralSquare() && c.isLiteralSquare()) {\r\n            //     console.log('A C litteral SQUARES')\r\n            //     // Check that the middle element is the product of a and c.\r\n            //\r\n            //     if(b.clone().pow(2).isSameAs(a.clone().multiply(c))){\r\n            //         console.log('SAME')\r\n            //\r\n            //     }else{\r\n            //         console.log('NOT SAME')\r\n            //     }\r\n            //\r\n            //     return [this.clone()]\r\n            // } else {\r\n            //     console.log('NOT SQUARES AT ALL !!!!')\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    private _factorizeByGroups = (): Polynom[] => {\r\n        // TODO: Factorize by groups.\r\n        return [];\r\n    }\r\n}\r\n","/**\r\n * Rational polynom module contains everything necessary to handle rational polynoms.\r\n * @module Polynom\r\n */\r\n\r\nimport {Polynom} from \"./polynom\";\r\nimport {Fraction} from \"../coefficients\";\r\n\r\n/**\r\n * Rational class can handle rational polynoms\r\n */\r\n    export class Rational {\r\n        private _rawString: string;\r\n        private _numerator: Polynom;\r\n        private _denominator: Polynom;\r\n\r\n        /**\r\n         *\r\n         * @param numerator\r\n         * @param denominator\r\n         */\r\n        constructor(numerator?: Polynom, denominator?: Polynom) {\r\n            this._numerator = numerator ? numerator.clone() : new Polynom();\r\n            this._denominator = denominator ? denominator.clone() : new Polynom();\r\n        }\r\n\r\n        clone = (): Rational => {\r\n            this._numerator = this._numerator.clone()\r\n            this._denominator = this._denominator.clone()\r\n\r\n            return this;\r\n        }\r\n\r\n        get tex(): string {\r\n            return `\\\\dfrac{ ${this._numerator.tex} }{ ${this._denominator.tex} }`;\r\n        }\r\n\r\n        get texFactors(): string {\r\n            this._numerator.factorize()\r\n            this._denominator.factorize()\r\n\r\n            return `\\\\dfrac{ ${this._numerator.texFactors} }{ ${this._denominator.texFactors} }`\r\n        }\r\n\r\n        get numerator(): Polynom {\r\n            return this._numerator\r\n        }\r\n\r\n        get denominator(): Polynom {\r\n            return this._denominator\r\n        }\r\n\r\n        domain = (): string => {\r\n            let zeroes = this._denominator.getZeroes();\r\n            if (zeroes.length === 0 || zeroes[0] === false) {\r\n                return '\\\\mathbb{R}'\r\n            } else if (zeroes[0] === true) {\r\n                return '\\\\varnothing'\r\n            } else {\r\n                return '\\\\mathbb{R}\\\\setminus\\\\left{' +\r\n                    zeroes.map(x => {\r\n                        return (typeof x === 'boolean') ? '' : x.frac\r\n                    })\r\n                        .join(';') + '\\\\right}'\r\n            }\r\n        }\r\n\r\n        amplify = (P: Polynom): Rational => {\r\n            this._numerator.multiply(P);\r\n            this._denominator.multiply(P);\r\n\r\n            return this;\r\n        }\r\n\r\n        simplify = (P: Polynom): Rational => {\r\n            let NumeratorEuclidien = this._numerator.euclidian(P);\r\n            if (!NumeratorEuclidien.reminder.isZero()) {\r\n                return this;\r\n            }\r\n\r\n            let DenominatorEuclidien = this._denominator.euclidian(P);\r\n            if (!DenominatorEuclidien.reminder.isZero()) {\r\n                return this;\r\n            }\r\n\r\n            this._numerator = NumeratorEuclidien.quotient;\r\n            this._denominator = DenominatorEuclidien.quotient;\r\n            return this;\r\n        }\r\n\r\n        reduce = (): Rational => {\r\n            console.log(this._numerator.tex)\r\n            this._numerator.factorize();\r\n            console.log(this._numerator.factors.map(x => x.tex))\r\n            for (let f of this._numerator.factors) {\r\n                this.simplify(f);\r\n            }\r\n\r\n            return this;\r\n        }\r\n\r\n        opposed = (): Rational => {\r\n            this._numerator.opposed();\r\n            return this;\r\n        }\r\n        add = (R: Rational): Rational => {\r\n            // 1. Make sure both rational are at the same denominator\r\n            // 2. Add the numerators.\r\n            // 3. Simplify\r\n\r\n            // Store the adding denominator\r\n            let denominator = this._denominator.clone()\r\n\r\n            // Amplif the main rational polynom by the adding denominator\r\n            this.amplify(R._denominator)\r\n\r\n            // Add to the numerator the adding value...\r\n            this._numerator.add(R._numerator.clone().multiply(denominator));\r\n\r\n            return this;\r\n        }\r\n\r\n        subtract = (R: Rational): Rational => {\r\n            return this.add(R.clone().opposed())\r\n        }\r\n\r\n        limits = (value: Fraction | number, letter?: string): Fraction | number => {\r\n            if (value === Infinity || value === -Infinity) {\r\n                let N = this._numerator.monomByDegree(this._numerator.degree(letter), letter),\r\n                    D = this._denominator.monomByDegree(this._denominator.degree(letter), letter)\r\n\r\n                N.divide(D)\r\n\r\n                if (N.degree(letter).isStrictlyPositive()) {\r\n                    return N.coefficient.sign() * (Math.pow((value > 0 ? 1 : -1), N.degree(letter).value % 2)) === 1 ? Infinity : -Infinity\r\n                }\r\n                if (N.degree(letter).isZero()) {\r\n                    return N.coefficient\r\n                }\r\n                if (N.degree(letter).isStrictlyPositive()) {\r\n                    return N.coefficient.sign() * (Math.pow(-1, N.degree(letter).value % 2)) === 1 ? 0 : -0\r\n                }\r\n            } else {\r\n                return this._numerator.evaluate({letter: new Fraction(value)}).divide(this._denominator.evaluate({letter: new Fraction(value)}))\r\n            }\r\n        }\r\n    }\r\n","import {Numeric} from \"../numeric\";\r\n\r\nexport type FractionParsingType = number|string|Fraction\r\n/**\r\n * The fraction class make possible to handle\r\n * TODO: Write the documentation correctly.\r\n * \\\\(\\frac{a}{b}\\\\) or \\\\[\\frac{a}{b}\\\\]  values.\r\n */\r\nexport class Fraction {\r\n    private _numerator: number;\r\n    private _denominator: number;\r\n\r\n    constructor(value?: unknown, denominatorOrPeriodic?: number) {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n\r\n        if (value !== undefined) {\r\n            this.parse(value, denominatorOrPeriodic);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isFraction() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n\r\n    get numerator(): number {\r\n        return this._numerator;\r\n    }\r\n\r\n    set numerator(value: number) {\r\n        this._numerator = value;\r\n    }\r\n\r\n    get denominator(): number {\r\n        return this._denominator;\r\n    }\r\n\r\n    set denominator(value: number) {\r\n        this._denominator = value;\r\n    }\r\n\r\n    get value(): number {\r\n        return this._numerator / this._denominator;\r\n    }\r\n\r\n    // Display getter\r\n    get tex(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else if (this._numerator < 0) {\r\n            return `-\\\\frac{ ${-this._numerator} }{ ${this._denominator} }`;\r\n        } else {\r\n            return `\\\\frac{ ${this._numerator} }{ ${this._denominator} }`;\r\n        }\r\n    }\r\n\r\n    get display(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else {\r\n            return `${this._numerator}/${this._denominator}`;\r\n        }\r\n    }\r\n\r\n    // Helper function to display fractions\r\n    get frac(): string {\r\n        return this.tex;\r\n    }\r\n\r\n    get dfrac(): string {\r\n        return this.tex.replace('\\\\frac', '\\\\dfrac');\r\n    }\r\n    get tfrac(): string {\r\n        return this.tex.replace('\\\\frac', '\\\\tfrac')\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse the value to get the numerator and denominator\r\n     * @param value : number or string to parse to get the fraction\r\n     * @param denominatorOrPeriodic (optional|number) : length of the periodic part: 2.333333 => 1 or denominator value\r\n     */\r\n    parse = (value: unknown, denominatorOrPeriodic?: number): Fraction => {\r\n        let S: string[];\r\n\r\n        // A null value means a zero fraction.\r\n        if (value === null || value === \"\") {\r\n            this._numerator = 0;\r\n            this._denominator = 1;\r\n            return this;\r\n        }\r\n\r\n        switch (typeof value) {\r\n            case \"string\":\r\n                // Split the sting value in two parts: Numerator/Denominator\r\n                S = value.split('/');\r\n\r\n                // Security checks\r\n                if (S.length > 2) throw \"Two many divide signs\";\r\n                if (S.map(x => x === '' || isNaN(Number(x))).includes(true)) throw \"Not a number\"\r\n\r\n\r\n                if (S.length === 1) {\r\n                    // No divide sign\r\n                    return this.parse(+S[0]);\r\n                } else if (S.length === 2) {\r\n                    // One divide signe\r\n                    // We check if the denominator is zero\r\n                    if (S[1] === '0') {\r\n                        this._numerator = NaN;\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._numerator = +S[0];\r\n                        this._denominator = +S[1];\r\n                    }\r\n                } else {\r\n                    // More than one divide sign ?\r\n                    this._numerator = NaN;\r\n                    this._denominator = 1;\r\n                }\r\n                break;\r\n            case \"number\":\r\n                if (Number.isSafeInteger(value)) {\r\n                    // The given value is an integer\r\n                    this._numerator = +value;\r\n\r\n                    if (denominatorOrPeriodic === undefined || !Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._denominator = +denominatorOrPeriodic;\r\n                    }\r\n                } else {\r\n                    // The given value is a float number\r\n\r\n                    // Get the number of decimals after the float sign\r\n                    let p: number = (value.toString()).split('.')[1].length;\r\n\r\n                    // Transform the float number in two integer\r\n                    if (denominatorOrPeriodic === undefined) {\r\n                        this._numerator = value * Math.pow(10, p);\r\n                        this._denominator = Math.pow(10, p);\r\n                    } else if (Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._numerator = value * Math.pow(10, p) - Math.floor(value * Math.pow(10, p - denominatorOrPeriodic));\r\n                        this.denominator = Math.pow(10, p) - Math.pow(10, p - denominatorOrPeriodic)\r\n                    }\r\n                    this.reduce()\r\n                }\r\n                break;\r\n            case \"object\":\r\n                if (value instanceof Fraction) {\r\n                    this._numerator = +value.numerator;\r\n                    this._denominator = +value.denominator;\r\n                }\r\n                break;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): Fraction => {\r\n        let F = new Fraction();\r\n        F.numerator = +this._numerator;\r\n        F.denominator = +this._denominator;\r\n        return F;\r\n    };\r\n\r\n    zero = (): Fraction => {\r\n        this._numerator = 0;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    one = (): Fraction => {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    infinite = (): Fraction => {\r\n        this._numerator = Infinity;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    invalid = (): Fraction => {\r\n        this._numerator = NaN;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Fraction => {\r\n        this._numerator = -this._numerator;\r\n        return this;\r\n    };\r\n\r\n    add = (F: Fraction | number): Fraction => {\r\n        if (F instanceof Fraction) {\r\n            let N: number = this._numerator,\r\n                D: number = this._denominator;\r\n\r\n            this._numerator = N * F.denominator + F.numerator * D;\r\n            this._denominator = D * F.denominator;\r\n        } else {\r\n            return this.add(new Fraction(F))\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (F: Fraction | number): Fraction => {\r\n        if (F instanceof Fraction) {\r\n            return this.add(F.clone().opposed());\r\n        } else {\r\n            return this.add(-F)\r\n        }\r\n    };\r\n\r\n    multiply = (F: Fraction | number): Fraction => {\r\n        // Parse the value.\r\n        // If it's a fraction, return a clone of it\r\n        // If it's an integer, return the fraction F/1\r\n        let Q = new Fraction(F);\r\n\r\n        this._numerator = this._numerator * Q.numerator;\r\n        this._denominator = this._denominator * Q.denominator;\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    divide = (F: Fraction | number): Fraction => {\r\n        let Q = new Fraction(F);\r\n\r\n        if (Q.numerator === 0) {\r\n            return new Fraction().infinite();\r\n        }\r\n\r\n        let N: number = +this._numerator,\r\n            D: number = +this._denominator;\r\n\r\n        this._numerator = N * Q.denominator;\r\n        this._denominator = D * Q.numerator;\r\n        return this.reduce();\r\n    };\r\n\r\n    invert = (): Fraction => {\r\n        let n = +this._numerator, d = +this._denominator;\r\n        this._numerator = d;\r\n        this._denominator = n;\r\n\r\n        return this;\r\n    }\r\n    pow = (p: number | Fraction): Fraction => {\r\n        // TODO: Fraction.pow with a value different than a safe integer !\r\n        if (p instanceof Fraction) {\r\n            return this.pow(p.value)\r\n        }\r\n\r\n        this.reduce();\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        // Check if numerator and denominator are roots of...\r\n        // othervise, convert to numeric.\r\n        let controlNumerator = Math.floor(Math.pow(this._numerator, Math.abs(p))),\r\n            controlDenominator = Math.floor(Math.pow(this._denominator, Math.abs(p)))\r\n\r\n        if(controlNumerator ** Math.abs(p) === this._numerator\r\n            &&\r\n            controlDenominator ** Math.abs(p) === this._denominator){\r\n\r\n            this._numerator = this._numerator ** Math.abs(p);\r\n            this._denominator = this._denominator ** Math.abs(p);\r\n        }else{\r\n            this._numerator = this._numerator ** Math.abs(p);\r\n            this._denominator = this._denominator ** Math.abs(p);\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    root = (p: number): Fraction => {\r\n        // TODO: nth - root of a fraction => this will return another type of coefficient.\r\n\r\n        // Check if they are perfect roots..\r\n        if (p === 0) {\r\n            return this;\r\n        }\r\n\r\n        // If negative, invert the fraction\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        let n = Math.pow(this._numerator, Math.abs(1 / p)),\r\n            d = Math.pow(this._denominator, Math.abs(1 / p));\r\n\r\n        this._numerator = Math.pow(this._numerator, Math.abs(1 / p));\r\n        this._denominator = Math.pow(this._denominator, Math.abs(1 / p));\r\n        return this;\r\n    }\r\n\r\n    sqrt = (): Fraction => {\r\n        return this.root(2);\r\n    }\r\n\r\n    abs = (): Fraction => {\r\n        this._numerator = Math.abs(this._numerator);\r\n        this._denominator = Math.abs(this._denominator);\r\n        return this;\r\n    };\r\n\r\n\r\n    static max = (...fractions: (Fraction | number)[]): Fraction => {\r\n        let M = new Fraction(fractions[0])\r\n\r\n        for (let m of fractions) {\r\n            let compare = new Fraction(m)\r\n            if (compare.greater(M)) {\r\n                M = compare.clone()\r\n            }\r\n        }\r\n\r\n        return M\r\n    }\r\n    static min = (...fractions: (Fraction | number)[]): Fraction => {\r\n        let M = new Fraction(fractions[0])\r\n\r\n        for (let m of fractions) {\r\n            let compare = new Fraction(m)\r\n            if (compare.lesser(M)) {\r\n                M = compare.clone()\r\n            }\r\n        }\r\n\r\n        return M\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations specific to fractions\r\n    // ------------------------------------------\r\n    reduce = (): Fraction => {\r\n        let g = Numeric.gcd(this._numerator, this._denominator);\r\n        this._numerator = this._numerator / g;\r\n        this._denominator = this._denominator / g;\r\n\r\n        if (this._denominator < 0) {\r\n            this._denominator = -this._denominator;\r\n            this._numerator = -this._numerator;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    amplify = (k: number): Fraction => {\r\n        if (Number.isSafeInteger(k)) {\r\n            this._numerator *= k;\r\n            this._denominator *= k;\r\n        }\r\n        return this;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param F (Coefficient) The coefficient to compare\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (F: unknown, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n        let compareFraction: Fraction\r\n        if (F instanceof Fraction) {\r\n            compareFraction = F.clone()\r\n        } else {\r\n            compareFraction = new Fraction(F)\r\n        }\r\n\r\n        switch (sign) {\r\n            case '>':\r\n                return this.value > compareFraction.value;\r\n            case \">=\" || \"=>\" || \"geq\":\r\n                return this.value >= compareFraction.value;\r\n            case \"<\":\r\n                return this.value < compareFraction.value;\r\n            case \"<=\" || \"=>\" || \"leq\":\r\n                return this.value <= compareFraction.value;\r\n            case \"=\":\r\n                // let F2: Fraction = compareFraction.clone().reduce(),\r\n                //     F1: Fraction = this.clone().reduce();\r\n                // return (F1.numerator === F2.numerator && F1.denominator === F2.denominator);\r\n                return this.value === compareFraction.value;\r\n            case \"<>\":\r\n                return this.value !== compareFraction.value;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n    /* Compare shortcuts */\r\n    lesser = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '<');\r\n    };\r\n    leq = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '<=');\r\n    };\r\n    greater = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '>');\r\n    };\r\n    geq = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '>=');\r\n    };\r\n    isEqual = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '=');\r\n    }\r\n    isNotEqual = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '<>');\r\n    }\r\n    isOpposed = (p: Fraction): boolean => {\r\n        return this.isEqual(p.clone().opposed());\r\n    }\r\n    isInverted = (p: Fraction): boolean => {\r\n        return this.isEqual(new Fraction().one().divide(p.clone()));\r\n    }\r\n    isZero = (): boolean => {\r\n        return this._numerator === 0;\r\n    }\r\n    isNotZero = (): boolean => {\r\n        return this._numerator !== 0;\r\n    }\r\n    isOne = (): boolean => {\r\n        return this._numerator === 1 && this._denominator === 1;\r\n    }\r\n    isNegativeOne = (): boolean => {\r\n        return this._numerator === -1 && this._denominator === 1;\r\n    }\r\n    isPositive = (): boolean => {\r\n        return this.sign() === 1;\r\n    }\r\n    isNegative = (): boolean => {\r\n        return this.sign() === -1;\r\n    }\r\n    isStrictlyPositive = (): boolean => {\r\n        return this.value > 0\r\n    }\r\n    isStrictlyNegative = (): Boolean => {\r\n        return this.value < 0\r\n    }\r\n    isNaN = (): boolean => {\r\n        return isNaN(this._numerator);\r\n    }\r\n    isInfinity = (): boolean => {\r\n        return this._numerator === Infinity;\r\n    }\r\n    isFinite = (): boolean => {\r\n        return !this.isInfinity();\r\n    }\r\n    isSquare = (): boolean => {\r\n        return Math.sqrt(this._numerator) % 1 === 0 && Math.sqrt(this._denominator) % 1 === 0\r\n    }\r\n    isReduced = (): boolean => {\r\n        return Math.abs(Numeric.gcd(this._numerator, this._denominator)) === 1\r\n    }\r\n    isNatural = (): boolean => {\r\n        return this.isRelative() && this.isPositive()\r\n    }\r\n    isRelative = (): boolean => {\r\n        return this.clone().reduce().denominator === 1\r\n    }\r\n    isRational = (): boolean => {\r\n        return !this.isRelative()\r\n    }\r\n    isEven = (): boolean => {\r\n        return this.isRelative() && this.value % 2 === 0\r\n    }\r\n    isOdd = (): boolean => {\r\n        return this.isRelative() && this.value % 2 === 1\r\n    }\r\n    sign = (): number => {\r\n        return (this._numerator * this._denominator >= 0) ? 1 : -1;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Simple function to determine if it's a fraction\r\n     */\r\n    areEquals = (...F: Fraction[]): boolean => {\r\n        for (let i = 0; i < F.length; i++) {\r\n            if (!this.isEqual(F[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n}","export * from \"./fraction\"\r\nexport * from \"./nthroot\"","/**\r\n * Nthroot is something like \"a+b\\sqrt{3}\r\n */\r\nexport class Nthroot {\r\n    private _radical: number;\r\n    private _nth: number;\r\n    private _coefficient: number;\r\n    private _isValid:boolean;\r\n\r\n    constructor(...values: number[]) {\r\n        this._radical = 1;\r\n        this._coefficient = 1;\r\n        this._nth = 2;\r\n        this._isValid = true;\r\n\r\n        if(values !== undefined){\r\n            this.parse(values[0], values[1], values[2])\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get radical(): number {\r\n        return this._radical;\r\n    }\r\n\r\n    set radical(value: number) {\r\n        this._radical = value;\r\n    }\r\n\r\n    get nth(): number {\r\n        return this._nth;\r\n    }\r\n\r\n    set nth(value: number) {\r\n        if (Number.isSafeInteger(value) && value >= 2) {\r\n            this._nth = value;\r\n        } else {\r\n            // Error setting the nth root.\r\n            console.log('Error setting the nth root');\r\n            this._nth = 2;\r\n        }\r\n    }\r\n\r\n    get coefficient(): number {\r\n        return this._coefficient;\r\n    }\r\n\r\n    set coefficient(value: number) {\r\n        this._coefficient = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let C: string;\r\n\r\n        if (this._coefficient === 1) {\r\n            C = '';\r\n        } else if (this._coefficient === -1) {\r\n            C = '-';\r\n        } else {\r\n            C = this._coefficient.toString();\r\n        }\r\n\r\n        if (this._radical === 1) {\r\n            return `${this._coefficient}`;\r\n        } else {\r\n            if (this._nth === 2) {\r\n                return `${C}\\\\sqrt{${this._radical}}`\r\n            } else {\r\n                return `${C}\\\\sqrt[${this._nth}]{${this._radical}}`\r\n            }\r\n        }\r\n    }\r\n\r\n    get value(): number {\r\n        return this._coefficient * Math.pow(this._radical, 1 / this._nth);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (radical: number, nthroot?: number, coefficient?: number): Nthroot => {\r\n        this._coefficient = (coefficient === undefined) ? 1 : coefficient;\r\n        this._nth = (nthroot === undefined) ? 2 : nthroot;\r\n        this._radical = (radical === undefined) ? 1 : radical;\r\n\r\n        if(this._nth%2===0 && this._radical<0){\r\n            this._isValid = false;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    reduce = (): Nthroot => {\r\n        // Max value to test.\r\n        let V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n        while (V > 1) {\r\n            if (this._radical % Math.pow(V, this._nth) === 0) {\r\n                // It's dividable by V^n\r\n                this._coefficient *= V;\r\n                this._radical = this._radical / Math.pow(V, this._nth);\r\n\r\n                // Redifine the new testing value (this is optimization)\r\n                V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n                continue;\r\n            }\r\n            V--;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiply = (N: Nthroot): Nthroot => {\r\n        this._radical *= N.radical;\r\n        return this.reduce();\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Help functions\r\n    // ------------------------------------------\r\n    hasRadical = ():boolean => {\r\n        return !(this._radical===1 || this._radical===0 || this._isValid===false)\r\n    };\r\n}","import {Shutingyard, ShutingyardMode, ShutingyardType, tokenConstant} from \"../shutingyard\";\r\nimport {Fraction} from \"../coefficients\";\r\n\r\nexport class NumExp {\r\n    private _rpn: { token: string, tokenType: string }[]\r\n    private _expression: string\r\n    private _isValid: boolean\r\n\r\n    constructor(value: string) {\r\n        this._expression = value\r\n        this._rpn = new Shutingyard(ShutingyardMode.NUMERIC).parse(value).rpn\r\n    }\r\n\r\n    get rpn(): { token: string; tokenType: string }[] {\r\n        return this._rpn;\r\n    }\r\n\r\n    get isValid(): boolean {\r\n        if(this._isValid===undefined){\r\n            this.evaluate({x: 0})\r\n        }\r\n        return this._isValid\r\n    }\r\n\r\n    set isValid(value: boolean){\r\n        this._isValid = value\r\n    }\r\n\r\n    get expression(): string {\r\n        return this._expression;\r\n    }\r\n\r\n    private _extractDecimalPart(value: number): string {\r\n        let decimal = value.toString()\r\n\r\n        if (!decimal.includes('.')) {\r\n            return ''\r\n        }\r\n\r\n        decimal = decimal.split('.')[1]\r\n\r\n        return decimal.substring(0, decimal.length - 2)\r\n    }\r\n\r\n    private _numberCorrection(value: number): number {\r\n        // Must modify the number if it's like:\r\n        // a: 3.0000000000000003\r\n        // b: 3.9999999999999994\r\n        // remove the last character\r\n        // check if around n last characters are either 0 or 9\r\n        // if it is, 'round' the number.\r\n\r\n        const epsilon = 0.00000000000001,\r\n            number_of_digits = 6\r\n\r\n        const decimal = this._extractDecimalPart(value)\r\n        if(decimal===''){return value}\r\n\r\n        const n9 = decimal.match(/9+$/g)\r\n        const n0 = decimal.match(/0+$/g)\r\n\r\n        if (n9 && n9[0].length >= number_of_digits) {\r\n            // New tested values.\r\n            const mod = this._extractDecimalPart(value + epsilon),\r\n                mod0 = mod.match(/0+$/g)\r\n\r\n            if(mod0 && mod0[0].length>= number_of_digits){\r\n                // The value can be changed. Remove all zeros!\r\n                return +((value+epsilon).toString().split(mod0[0])[0])\r\n            }\r\n        }\r\n\r\n        if (n0 && n0[0].length >= number_of_digits) {\r\n            // New tested values.\r\n            const mod = this._extractDecimalPart(value - epsilon),\r\n                mod9 = mod.match(/9+$/g)\r\n\r\n            if(mod9 && mod9[0].length>= number_of_digits){\r\n                // The value can be changed. Remove all nines!\r\n                return +(value.toString().split(n0[0])[0])\r\n            }\r\n        }\r\n\r\n        return value\r\n    }\r\n\r\n    private _addToStack(stack:number[], value: number): void {\r\n        stack.push(this._numberCorrection(value))\r\n    }\r\n\r\n    evaluate(values: { [Key: string]: number }): number {\r\n        const stack: number[] = []\r\n\r\n        this.isValid = true\r\n\r\n        for (const element of this._rpn) {\r\n            if (element.tokenType === ShutingyardType.COEFFICIENT) {\r\n                // May be a numeric value or a Fraction.\r\n                if (!isNaN(+element.token)) {\r\n                    this._addToStack(stack, +element.token)\r\n                } else {\r\n                    this._addToStack(stack, new Fraction(element.token).value)\r\n                }\r\n            } else if (element.tokenType === ShutingyardType.VARIABLE) {\r\n                if (values[element.token] !== undefined) {\r\n                    this._addToStack(stack, +values[element.token])\r\n                }\r\n            } else if (element.tokenType === ShutingyardType.CONSTANT) {\r\n                this._addToStack(stack, tokenConstant[element.token])\r\n            } else if (element.tokenType === ShutingyardType.OPERATION) {\r\n                if (element.token === '*') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if(a === undefined || b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, a * b)\r\n                } else if (element.token === '/') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if(a === undefined || b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, a / b)\r\n                } else if (element.token === '+') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if(a === undefined || b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, (+a) + (+b))\r\n                } else if (element.token === '-') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop() || 0\r\n                    if(b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, a - b)\r\n                } else if (element.token === '^') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if(a === undefined || b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, Math.pow(a, b))\r\n                }\r\n            } else if (element.tokenType === ShutingyardType.FUNCTION) {\r\n                const a = stack.pop()\r\n                if(a === undefined){this.isValid = false}\r\n                if (element.token === 'sin') {\r\n                    this._addToStack(stack, Math.sin(a))\r\n                } else if (element.token === 'cos') {\r\n                    this._addToStack(stack, Math.cos(a))\r\n                } else if (element.token === 'tan') {\r\n                    this._addToStack(stack, Math.tan(a))\r\n                } else if(element.token === 'sqrt') {\r\n                    this._addToStack(stack, Math.sqrt(a))\r\n                }\r\n            }\r\n        }\r\n\r\n        if (stack.length === 1) {\r\n            return stack[0]\r\n        } else {\r\n            throw `There was a problem parsing: ${this._expression}`\r\n        }\r\n    }\r\n}\r\n","import {Polynom, PolynomParsingType} from \"../algebra\";\r\nimport {Fraction, FractionParsingType} from \"../coefficients\";\r\n\r\ntype PolynomExpMathFunctionType = { name: string; fn: Function, tex: string }\r\n\r\nexport class PolynomExpFactor {\r\n    constructor(polynom: PolynomParsingType, degree?: FractionParsingType, mathFunction?: PolynomExpMathFunctionType) {\r\n        this._polynom = new Polynom(polynom)\r\n        this._degree = new Fraction(degree === undefined ? 1 : degree)\r\n        this._fn = mathFunction\r\n        this._powerAsInteger = true\r\n        this._forceParenthesis = true\r\n    }\r\n\r\n    private _forceParenthesis: boolean\r\n\r\n    get forceParenthesis(): boolean {\r\n        return this._forceParenthesis;\r\n    }\r\n\r\n    set forceParenthesis(value: boolean) {\r\n        this._forceParenthesis = value;\r\n    }\r\n\r\n    private _fn: PolynomExpMathFunctionType\r\n\r\n    get fn(): PolynomExpMathFunctionType {\r\n        return this._fn;\r\n    }\r\n\r\n    set fn(value: PolynomExpMathFunctionType) {\r\n        this._fn = value;\r\n    }\r\n\r\n    private _powerAsInteger: boolean\r\n\r\n    get powerAsInteger(): boolean {\r\n        return this._powerAsInteger;\r\n    }\r\n\r\n    set powerAsInteger(value: boolean) {\r\n        this._powerAsInteger = value;\r\n    }\r\n\r\n    private _polynom: Polynom\r\n\r\n    get polynom(): Polynom {\r\n        return this._polynom;\r\n    }\r\n\r\n    set polynom(value: Polynom) {\r\n        this._polynom = value;\r\n    }\r\n\r\n    private _degree: Fraction\r\n\r\n    get degree(): Fraction {\r\n        return this._degree;\r\n    }\r\n\r\n    set degree(value: Fraction) {\r\n        this._degree = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let tex\r\n\r\n        if (this._degree.isOne() && (this._fn !== undefined || !this._forceParenthesis)) {\r\n            // If degree is one, no need to add the parenthesis.\r\n            tex = this._polynom.tex\r\n        } else {\r\n            // the degree is not one, add the parenthesis.\r\n            if (this._powerAsInteger && !this._degree.isRelative()) {\r\n                // the degree is a fraction and we want natural powers => use sqrt.\r\n                tex = `\\\\sqrt${this._degree.denominator !== 2 ? `[ ${this._degree.denominator} ]` : ''}{ ${this._polynom.tex} }^{ ${this._degree.numerator} }`\r\n            } else if (this.isCoefficient && this.firstCoefficient.isNatural()) {\r\n                // the value is a natural number (eg 3, 7, ...)\r\n                tex = this._polynom.tex + this._texDegree\r\n            } else {\r\n                // In any other case, add the parenthesis by default\r\n                tex = `\\\\left( ${this._polynom.tex} \\\\right)${this._texDegree}`\r\n            }\r\n        }\r\n\r\n        if (this._fn !== undefined && this._fn.tex !== undefined) {\r\n            tex = `${this._fn.tex}\\\\left( ${tex} \\\\right)`\r\n        }\r\n        return tex\r\n    }\r\n\r\n    get isCoefficient(): boolean {\r\n        // TODO: Maybe reduce the coefficient if it isn't of degree one.\r\n        return this._polynom.degree().isZero();\r\n\r\n    }\r\n\r\n    get firstCoefficient(): Fraction {\r\n        return this._polynom.monomByDegree().coefficient\r\n    }\r\n\r\n    private get _texDegree(): string {\r\n        if (this._degree.isOne()) {\r\n            return ''\r\n        } else {\r\n            return `^{ ${this._degree.tfrac} }`\r\n        }\r\n    }\r\n\r\n    setForceParenthesis(value?: boolean): PolynomExpFactor {\r\n        this._forceParenthesis = value === undefined || value\r\n        return this\r\n    }\r\n\r\n    derivative(letter?: string): PolynomExpProduct {\r\n        if (this._degree.isOne()) {\r\n            return new PolynomExpProduct(\r\n                new PolynomExpFactor(this._polynom.clone().derivative(letter))\r\n            )\r\n        } else {\r\n            return new PolynomExpProduct(\r\n                new PolynomExpFactor(this._degree.clone()),\r\n                new PolynomExpFactor(this._polynom.clone().derivative(letter)),\r\n                new PolynomExpFactor(this._polynom.clone(), this._degree.clone().subtract(1))\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport class PolynomExpProduct {\r\n    constructor(...values: PolynomExpFactor[]) {\r\n        this._factors = values || []\r\n        this._positive = true\r\n        this._asPositiveDegree = true\r\n    }\r\n\r\n    private _fn: PolynomExpMathFunctionType\r\n\r\n    get fn(): PolynomExpMathFunctionType {\r\n        return this._fn;\r\n    }\r\n\r\n    set fn(value: PolynomExpMathFunctionType) {\r\n        this._fn = value;\r\n    }\r\n\r\n    private _factors: PolynomExpFactor[]\r\n\r\n    get factors(): PolynomExpFactor[] {\r\n        return this._factors;\r\n    }\r\n\r\n    set factors(value: PolynomExpFactor[]) {\r\n        this._factors = value;\r\n    }\r\n\r\n    private _positive: boolean\r\n\r\n    get positive(): boolean {\r\n        return this._positive;\r\n    }\r\n\r\n    set positive(value: boolean) {\r\n        this._positive = value;\r\n    }\r\n\r\n    private _asPositiveDegree: boolean\r\n\r\n    get asPositiveDegree(): boolean {\r\n        return this._asPositiveDegree;\r\n    }\r\n\r\n    set asPositiveDegree(value: boolean) {\r\n        this._asPositiveDegree = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let parenthesis = this._factors.length>1\r\n        // Default value\r\n        let tex = this._factors.map(factor => factor.setForceParenthesis(parenthesis).tex).join(' \\\\cdot ')\r\n\r\n        // Change the value in some cases...\r\n        if (this._asPositiveDegree) {\r\n            const numerators = this._factors.filter(x => x.degree.isPositive()),\r\n                denominators = this._factors.filter(x => x.degree.isNegative())\r\n\r\n            let numeratorsAsTex, denominatorsAsTex\r\n\r\n            if (denominators.length > 0) {\r\n                if (numerators.length === 0) {\r\n                    numeratorsAsTex = [1]\r\n                } else if (numerators.length === 1) {\r\n                    numeratorsAsTex = [numerators[0].setForceParenthesis(false).tex]\r\n                } else {\r\n                    parenthesis = numerators.length>1\r\n                    numeratorsAsTex = numerators.map(factor => factor.setForceParenthesis(parenthesis).tex)\r\n                }\r\n\r\n                // Change all denominators degrees to positive.\r\n                denominators.map(x => x.degree.opposed())\r\n                if (denominators.length === 1) {\r\n                    denominatorsAsTex = [denominators[0].setForceParenthesis(false).tex]\r\n                } else {\r\n                    parenthesis = denominators.length>1\r\n                    denominatorsAsTex = denominators.map(factor => factor.setForceParenthesis(parenthesis).tex)\r\n                }\r\n                // restore all degrees to negative again.\r\n                denominators.map(x => x.degree.opposed())\r\n\r\n                tex = `\\\\dfrac{ ${numeratorsAsTex.join(' \\\\cdot ')} }{ ${denominatorsAsTex.join(' \\\\cdot ')} }`\r\n            }\r\n        }\r\n\r\n        // Apply the modification\r\n        if (this._fn !== undefined && this._fn.name !== undefined && this._fn.name !== '') {\r\n            tex = `${this._fn.tex}\\\\left( ${tex} \\\\right)`\r\n        }\r\n        return tex\r\n    }\r\n\r\n    reduce(): PolynomExpProduct {\r\n        let coefficients = this._factors.filter(factor => factor.isCoefficient),\r\n            polynoms = this._factors.filter(factor => !factor.isCoefficient)\r\n\r\n        let result = new Fraction().one()\r\n\r\n        if (coefficients.length > 1) {\r\n            for (const factor of coefficients) {\r\n                if (factor.degree.isPositive()) {\r\n                    result.multiply(factor.polynom.monoms[0].coefficient.pow(factor.degree))\r\n                } else {\r\n                    result.divide(factor.polynom.monoms[0].coefficient.pow(factor.degree.clone().abs()))\r\n                }\r\n            }\r\n        } else if (coefficients.length === 1) {\r\n            result = coefficients[0].polynom.monoms[0].coefficient\r\n        }\r\n\r\n        if (result.isOne()) {\r\n            this._factors = [...polynoms]\r\n        } else if (!result.isRelative()) {\r\n            this._factors = [\r\n                new PolynomExpFactor(result.numerator),\r\n                new PolynomExpFactor(result.denominator, -1),\r\n                ...polynoms\r\n            ]\r\n        } else {\r\n            this._factors = [\r\n                new PolynomExpFactor(result),\r\n                ...polynoms\r\n            ]\r\n        }\r\n        return this\r\n    }\r\n\r\n    integrate(letter?: string): PolynomExpProduct {\r\n        // Handle this kind of case:\r\n        // A * f' * F^n\r\n        // A * f' / F^n, n != 1\r\n        // A * f_1 * f_2 * f_3, where (f_1 * f_2)' = f_3\r\n        if (this._factors.length === 2) {\r\n            // Check polynoms degree: one must of one degree less than the other.\r\n            let d1 = this._factors[0].polynom.degree(letter).value,\r\n                d2 = this._factors[1].polynom.degree(letter).value\r\n\r\n            if (d1 === d2 + 1) {\r\n                return this._integrateWithInternalDerivative(this._factors[0], this._factors[1], letter)\r\n            } else if (d1 + 1 === d2) {\r\n                return this._integrateWithInternalDerivative(this._factors[1], this._factors[0], letter)\r\n            }\r\n        }\r\n        return\r\n    }\r\n\r\n    public applyMathFunction(mathFn: PolynomExpMathFunctionType): PolynomExpProduct {\r\n        this._fn = mathFn\r\n        return this\r\n    }\r\n\r\n    private _integrateWithInternalDerivative(P: PolynomExpFactor, Pinternal: PolynomExpFactor, letter?: string): PolynomExpProduct {\r\n        // Get the internal derivative\r\n        let internalDerivative: Polynom = P.polynom.clone().derivative(letter)\r\n\r\n        // Get the factor.\r\n        let {quotient, reminder} = Pinternal.polynom.clone().euclidian(internalDerivative)\r\n\r\n        if (reminder.isZero() && quotient.degree(letter).isZero()) {\r\n            // All the conditions are done. Actual situation is\r\n            // (4x-10)(x^2-5x+7)^9\r\n            // P1 = (x^2-5x+7), P2 = (2x-5)\r\n            // => 1/10 * quotient * (x^2-5x+7)^10\r\n\r\n            if (P.degree.isEqual(-1)) {\r\n                return (new PolynomExpProduct(\r\n                    new PolynomExpFactor(quotient, 1),\r\n                    new PolynomExpFactor(P.polynom.clone(), 1, {\r\n                        name: 'ln', tex: '\\\\ln', fn: (x: number) => Math.log(x)\r\n                    })\r\n                ))\r\n            } else {\r\n                return new PolynomExpProduct(\r\n                    new PolynomExpFactor(P.degree.clone().add(1).invert(), 1),\r\n                    new PolynomExpFactor(quotient, 1),\r\n                    new PolynomExpFactor(P.polynom.clone(), P.degree.clone().add(1))\r\n                )\r\n            }\r\n        }\r\n        return\r\n    }\r\n}","import {Point} from \"./point\";\r\nimport {Fraction} from \"../coefficients\";\r\nimport {Equation, Monom, Polynom} from \"../algebra\";\r\nimport {Line, LinePropriety} from \"./line\";\r\nimport {Vector} from \"./vector\";\r\nimport {Triangle} from \"./triangle\";\r\nimport {Numeric} from \"../numeric\";\r\n\r\nexport class Circle {\r\n    constructor(...values: unknown[]) {\r\n        this._exists = false\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values)\r\n        }\r\n    }\r\n\r\n    private _center: Point;\r\n\r\n    get center(): Point {\r\n        return this._center;\r\n    }\r\n\r\n    private _squareRadius: Fraction;\r\n\r\n    get squareRadius(): Fraction {\r\n        return this._squareRadius\r\n    }\r\n\r\n    private _cartesian: Equation;\r\n\r\n    get cartesian(): Equation {\r\n        return this._cartesian\r\n    }\r\n\r\n    private _exists: boolean;\r\n\r\n    get exists(): boolean {\r\n        return this._exists;\r\n    }\r\n\r\n    get radius(): { tex: string, display: string, value: number } {\r\n        if (this._squareRadius.isSquare()) {\r\n            return {\r\n                tex: this._squareRadius.clone().sqrt().tex,\r\n                display: this._squareRadius.clone().sqrt().display,\r\n                value: this._squareRadius.clone().sqrt().value\r\n            }\r\n        } else {\r\n            return {\r\n                tex: `\\\\sqrt{${this._squareRadius.tex}}`,\r\n                display: `sqrt(${this._squareRadius.display})`,\r\n                value: this._squareRadius.clone().sqrt().value\r\n            }\r\n        }\r\n        return this._squareRadius\r\n    }\r\n\r\n    get tex(): string {\r\n\r\n        if (this._exists) {\r\n            let cx, cy\r\n            if (this._center.x.isZero()) {\r\n                cx = 'x^2'\r\n            } else {\r\n                cx = `\\\\left(x${this._center.x.isNegative() ? '+' : '-'}${this._center.x.clone().abs().tex}\\\\right)^2`\r\n            }\r\n            if (this._center.y.isZero()) {\r\n                cy = 'y^2'\r\n            } else {\r\n                cy = `\\\\left(y${this._center.y.isNegative() ? '+' : '-'}${this._center.y.clone().abs().tex}\\\\right)^2`\r\n            }\r\n            return `${cx}+${cy}=${this._squareRadius.tex}`\r\n        } else {\r\n            return `\\\\text{le cercle n'existe pas.}`\r\n        }\r\n    }\r\n\r\n    get developed(): string {\r\n        return this._cartesian.tex\r\n    }\r\n\r\n    // TODO: reformat code for better display.\r\n    get display(): string {\r\n        return this._cartesian.display\r\n    }\r\n\r\n    /**\r\n     * Get the relative position between circle and line. It corresponds to the number of intersection.\r\n     * @param {Line} L\r\n     * @returns {number}\r\n     */\r\n    relativePosition = (L: Line): number => {\r\n        let distance = L.distanceTo(this.center), radius = Math.sqrt(this._squareRadius.value)\r\n\r\n        if (distance.value - radius > 0.0000000001) {\r\n            return 0 // external\r\n        } else if (Math.abs(distance.value - radius) < 0.0000000001) {\r\n            return 1 // tangent\r\n        } else {\r\n            return 2 // external\r\n        }\r\n    }\r\n\r\n    lineIntersection = (L: Line): Point[] => {\r\n        let intersectionPoints: Point[] = [], solX: Fraction\r\n\r\n        if (this._cartesian === null) {\r\n            return []\r\n        }\r\n        const equX = this._cartesian.clone(), lineX = L.equation.clone().isolate('x'),\r\n            lineY = L.equation.clone().isolate('y')\r\n\r\n        if (lineX instanceof Equation && lineY instanceof Equation) {\r\n            equX.replaceBy('y', lineY.right).simplify()\r\n            equX.solve()\r\n\r\n            for (let x of equX.solutions) {\r\n                if (x.exact === false && isNaN(x.value)) {\r\n                    continue\r\n                }\r\n\r\n                solX = new Fraction(x.exact === false ? x.value : x.exact)\r\n                intersectionPoints.push(new Point(solX.clone(), lineY.right.evaluate(solX)))\r\n            }\r\n        }\r\n\r\n        return intersectionPoints\r\n    }\r\n\r\n    tangents = (P: Point | Fraction): Line[] => {\r\n        if (P instanceof Fraction) {\r\n            return this._tangentsWithSlope(P)\r\n        } else if (this.isPointOnCircle(P)) {\r\n            return this._tangentsThroughOnePointOnTheCircle(P)\r\n        } else if (this.center.distanceTo(P).value > this.radius.value) {\r\n            //TODO:  Must check it's outside the circle\r\n            return this._tangentsThroughOnePointOutsideTheCircle(P)\r\n        } else {\r\n            console.log('No tangents as the point is inside !')\r\n        }\r\n        return []\r\n    }\r\n\r\n    isPointOnCircle = (P: Point): Boolean => {\r\n        return this._cartesian.test({x: P.x, y: P.y})\r\n    }\r\n\r\n    getPointsOnCircle = (numberIsInteger?: boolean): Point[] => {\r\n        if (numberIsInteger === undefined) {\r\n            numberIsInteger = false\r\n        }\r\n\r\n        // It means searching for pythagorician triples that make a perfect square.\r\n        // (x-4)^2 + (y+3)^2 = 15\r\n\r\n        let triplets = Numeric.pythagoricianTripletsWithTarget(this._squareRadius.value, true)\r\n\r\n        let points: Point[] = [], pt\r\n        triplets.forEach(triplet => {\r\n            // Allow positive / negative values\r\n            // x-a = t  => x = a + t\r\n            // x-a = -t => x = a - t\r\n\r\n            for (let k of [[1, 1], [-1, 1], [-1, -1], [1, -1]]) {\r\n                pt = new Point(\r\n                    this.center.x.clone().add(k[0] * triplet[0]),\r\n                    this.center.y.clone().add(k[1] * triplet[1])\r\n                )\r\n                // Check if the point is not already in points.\r\n                if (!pt.isInListOfPoints(points)) {\r\n                    points.push(pt)\r\n                }\r\n            }\r\n        })\r\n        return points\r\n    }\r\n\r\n    clone(): Circle {\r\n        this._center = this._center.clone()\r\n        this._squareRadius = this._squareRadius.clone()\r\n        this._calculateCartesian()\r\n        return this\r\n    }\r\n\r\n    private _tangentsThroughOnePointOnTheCircle = (P: Point): Line[] => {\r\n        let CT = new Vector(this._center, P)\r\n        return [new Line(P, CT, LinePropriety.Perpendicular)]\r\n    }\r\n\r\n    private _tangentsThroughOnePointOutsideTheCircle = (P: Point): Line[] => {\r\n        // y = mx + h\r\n        // px, py => h = -m px + py => mx - y -m.px + py = 0 =>\r\n        // Centre: cx, cy, radius: r\r\n        // (m.cx - cy -m.px + py)^2 = r^2  * (m^2  + 1)\r\n        // (m(cx-py) - (cy - py))^2 = r^2  * (m^2  + 1)\r\n\r\n        let cx_px = this.center.x.clone().subtract(P.x), cy_py = this.center.y.clone().subtract(P.y),\r\n            polyLeft = new Polynom('x'), polyRight = new Polynom('x^2+1')\r\n\r\n        polyLeft.multiply(cx_px).subtract(cy_py).pow(2)\r\n        polyRight.multiply(this.squareRadius)\r\n\r\n        let equ = new Equation(polyLeft, polyRight)\r\n        equ.moveLeft().simplify().solve()\r\n\r\n        return equ.solutions.map(sol => {\r\n            //  h = -m px + py\r\n            let h, equ = new Equation('y', 'x')\r\n\r\n            if (sol.exact instanceof Fraction) {\r\n                h = P.x.clone().opposed().multiply(sol.exact).add(P.y)\r\n                equ.right.multiply(sol.exact).add(h)\r\n            } else {\r\n                h = P.x.clone().opposed().multiply(sol.value).add(P.y)\r\n                equ.right.multiply(sol.value).add(h)\r\n            }\r\n\r\n            return new Line(equ)\r\n        })\r\n\r\n    }\r\n\r\n    private _tangentsWithSlope = (slope: Fraction): Line[] => {\r\n        // d(C;t)=r => ac1+bc2 + x = +- sqrt(a^2 + b^2)*r\r\n        // x = -ac1-bc2  +-  sqrt(a^2 + b^2)*r\r\n        // y = a/bx + h => ax-by + H = 0\r\n\r\n        const a = slope.numerator, b = -slope.denominator, c1 = this._center.x.clone(), c2 = this._center.y.clone(),\r\n            r = this._squareRadius\r\n\r\n        let sq = this._squareRadius.clone().multiply(slope.numerator ** 2 + slope.denominator ** 2),\r\n            x1 = c1.clone().multiply(a).opposed().subtract(c2.clone().multiply(b)).add(sq.clone().sqrt()),\r\n            x2 = c1.clone().multiply(a).opposed().subtract(c2.clone().multiply(b)).subtract(sq.clone().sqrt())\r\n\r\n        return [new Line(a, b, x1), new Line(a, b, x2)]\r\n    }\r\n\r\n    private _reset(): Circle {\r\n        this._center = null\r\n        this._squareRadius = null\r\n        this._cartesian = null\r\n        this._exists = false\r\n\r\n        return this\r\n    }\r\n\r\n    private parse(...values: unknown[]): Circle {\r\n        // Data can be given in these formats:\r\n        // one value, a string -> make it an Equation\r\n        // one value, an Equation\r\n        // one value, a circle -> clone it\r\n        // two values: two points (center and pointThrough)\r\n        // two values: point and Fraction (center and radius)\r\n        // three values: Point, Fraction, Boolean (center, square radius, true)\r\n\r\n        this._reset()\r\n\r\n        if (typeof values[0] === 'string') {\r\n            this._parseEquation(new Equation(values[0]))\r\n        } else if (values[0] instanceof Equation) {\r\n            this._parseEquation(values[0])\r\n        } else if (values[0] instanceof Circle) {\r\n            this._parseCopyCircle(values[0])\r\n        } else if (values[0] instanceof Point && values.length > 1) {\r\n            if (values[1] instanceof Point) {\r\n                if (values[2] instanceof Point) {\r\n                    this._parseThroughtThreePoints(values[0], values[1], values[2])\r\n                } else {\r\n                    this._parseCenterAndPointThrough(values[0], values[1])\r\n                }\r\n            } else if (values[1] instanceof Fraction || typeof values[1] === 'number') {\r\n                this._parseCenterAndRadius(values[0], values[1], (typeof values[2] === \"boolean\") ? values[2] : false)\r\n            }\r\n        }\r\n\r\n        // Calculate once the different values.\r\n        if (this._exists) {\r\n            this._calculateCartesian()\r\n\r\n            // If the square radius is zero or positive, the circle exists.\r\n            if (this._squareRadius !== undefined && this._squareRadius.isNegative()) {\r\n                this._exists = false\r\n            }\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    private _calculateCartesian() {\r\n        this._cartesian = (new Equation(new Polynom(`(x-(${this._center.x.display}))^2+(y-(${this._center.y.display}))^2`), new Polynom(`${this._squareRadius.display}`))).moveLeft()\r\n    }\r\n\r\n    private _parseCopyCircle(circle: Circle): Circle {\r\n        this._center = circle.center.clone()\r\n        this._squareRadius = circle.squareRadius.clone()\r\n        this._calculateCartesian()\r\n        this._exists = circle.exists\r\n        return this\r\n    }\r\n\r\n    private _parseCenterAndRadius(center: Point, radius: Fraction | number, square?: boolean): Circle {\r\n        this._center = center.clone()\r\n\r\n        if (square) {\r\n            this._squareRadius = (new Fraction(radius))\r\n        } else {\r\n            this._squareRadius = new Fraction(radius).pow(2)\r\n        }\r\n\r\n        this._exists = true\r\n        return this\r\n    }\r\n\r\n    private _parseCenterAndPointThrough(center: Point, pointThrough: Point): Circle {\r\n        this._center = center.clone()\r\n        this._squareRadius = new Vector(this._center, pointThrough).normSquare\r\n        this._exists = true\r\n        return this\r\n    }\r\n\r\n    private _parseEquation(equ: Equation): Circle {\r\n        this._exists = false\r\n\r\n        // Move everything to the left.\r\n        equ.moveLeft()\r\n\r\n        if (equ.degree('x').value === 2 && equ.degree('y').value === 2) {\r\n            // Both must be of degree 2.\r\n            let x2 = equ.left.monomByDegree(2, 'x'), y2 = equ.left.monomByDegree(2, 'y'), x1: Monom, y1: Monom, c: Monom\r\n\r\n            // Both square monoms must have the same coefficient.\r\n            if (x2.coefficient.isEqual(y2.coefficient)) {\r\n                equ.divide(x2.coefficient)\r\n\r\n                x1 = equ.left.monomByDegree(1, 'x')\r\n                y1 = equ.left.monomByDegree(1, 'y')\r\n\r\n                c = equ.left.monomByDegree(0)\r\n\r\n                this._center = new Point(x1.coefficient.clone().divide(2).opposed(), y1.coefficient.clone().divide(2).opposed())\r\n\r\n                this._squareRadius = c.coefficient.clone().opposed()\r\n                    .add(this._center.x.clone().pow(2))\r\n                    .add(this._center.y.clone().pow(2))\r\n\r\n                this._calculateCartesian()\r\n                this._exists = true\r\n            } else {\r\n                // The circle is not a valid circle\r\n                this._center = null\r\n                this._squareRadius = null\r\n                this._exists = false\r\n            }\r\n        }\r\n        return this\r\n    }\r\n\r\n    private _parseThroughtThreePoints(A: Point, B: Point, C: Point): Circle {\r\n        let T = new Triangle(A, B, C), mAB = T.remarquables.mediators.AB.clone(),\r\n            mAC = T.remarquables.mediators.AC.clone()\r\n        this.parse(mAB.intersection(mAC).point, A)\r\n\r\n        return this\r\n    }\r\n\r\n}","export * from \"./vector\"\r\nexport * from \"./triangle\"\r\nexport * from \"./point\"\r\nexport * from \"./circle\"\r\nexport * from \"./line\"","/**\r\n * This class works for 2d line in a plane.\r\n */\r\n\r\nimport {Fraction} from \"../coefficients\";\r\nimport {Vector} from \"./vector\";\r\nimport {Point} from \"./point\";\r\nimport {Equation, Polynom} from \"../algebra\";\r\nimport {Numeric} from \"../numeric\";\r\n\r\nexport enum LinePropriety {\r\n    None,\r\n    Parallel='parallel',\r\n    Perpendicular = 'perpendicular',\r\n    Tangent = 'tangent'\r\n}\r\n\r\nexport class Line {\r\n    // A line is defined as the canonical form\r\n    // ax + by + c = 0\r\n    private _a: Fraction;\r\n    private _b: Fraction;\r\n    private _c: Fraction;\r\n    private _OA: Point;\r\n    private _d: Vector;\r\n    private _n: Vector;\r\n    private _exists: boolean\r\n\r\n    private _referencePropriety: LinePropriety\r\n    private _referenceLine: Line\r\n\r\n    static PERPENDICULAR = LinePropriety.Perpendicular\r\n    static PARALLEL = LinePropriety.Parallel\r\n\r\n    constructor(...values: unknown[]) {\r\n\r\n        this._exists = false;\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get exists(): boolean {\r\n        return this._exists;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equation(): Equation {\r\n        return new Equation(new Polynom().parse('xy', this._a, this._b, this._c), new Polynom('0')).simplify();\r\n    }\r\n\r\n    get tex(): { canonical: string, mxh: string, parametric: string } {\r\n        // canonical    =>  ax + by + c = 0\r\n        // mxh          =>  y = -a/b x - c/b\r\n        // parametric   =>  (xy) = OA + k*d\r\n\r\n        let canonical = this.equation;\r\n        // Make sur the first item is positive.\r\n        if (this._a.isNegative()) {\r\n            canonical.multiply(-1);\r\n        }\r\n\r\n        return {\r\n            canonical: canonical.tex,\r\n            mxh: this.slope.isInfinity() ? 'x=' + this.OA.x.tex : 'y=' + new Polynom().parse('x', this.slope, this.height).tex,\r\n            parametric: `${Point.pmatrix('x', 'y')} = ${Point.pmatrix(this._OA.x, this._OA.y)} + k\\\\cdot ${Point.pmatrix(this._d.x, this._d.y)}`\r\n        }\r\n    }\r\n\r\n    get a(): Fraction {\r\n        return this._a;\r\n    }\r\n\r\n    set a(value: Fraction) {\r\n        this._a = value;\r\n    }\r\n\r\n    get b(): Fraction {\r\n        return this._b;\r\n    }\r\n\r\n    set b(value: Fraction) {\r\n        this._b = value;\r\n    }\r\n\r\n    get c(): Fraction {\r\n        return this._c;\r\n    }\r\n\r\n    set c(value: Fraction) {\r\n        this._c = value;\r\n    }\r\n\r\n    get OA(): Point {\r\n        return this._OA;\r\n    }\r\n\r\n    set OA(value: Point) {\r\n        this._OA = value;\r\n    }\r\n\r\n    get d(): Vector {\r\n        return this._d;\r\n    }\r\n\r\n    get n(): Vector {\r\n        return this._n;\r\n    }\r\n\r\n    get normal(): Vector {\r\n        return new Vector(this._a, this._b);\r\n    }\r\n\r\n    get director(): Vector {\r\n        return this._d.clone()\r\n    }\r\n\r\n    set d(value: Vector) {\r\n        this._d = value;\r\n    }\r\n\r\n    get slope(): Fraction {\r\n        return this._a.clone().opposed().divide(this._b);\r\n    }\r\n\r\n    get height(): Fraction {\r\n        return this._c.clone().opposed().divide(this._b);\r\n    }\r\n\r\n// ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse data to a line\r\n     * @param {any} values\r\n     * @returns {Line}\r\n     */\r\n    parse = (...values: unknown[]): Line => {\r\n        this._exists = false;\r\n\r\n        // Nothing is given...\r\n        if (values.length === 0) {\r\n            return this\r\n        }\r\n\r\n        // One value only: already a line (clone it), an Equation, a string (as Equation)\r\n        if (values.length === 1) {\r\n            if (values[0] instanceof Line) {\r\n                // Already a Line\r\n                return values[0].clone()\r\n            } else if (values[0] instanceof Equation) {\r\n                // It's an Equation\r\n                return this.parseEquation(values[0])\r\n            } else if (typeof values[0] === \"string\") {\r\n                // It's a string - create an Equation from it.\r\n                try {\r\n                    let E = new Equation(values[0])\r\n                    return this.parse(E)\r\n                } catch (e) {\r\n                    return this\r\n                }\r\n            }\r\n        }\r\n\r\n        if (values.length === 2) {\r\n            if (values[0] instanceof Point && values[1] instanceof Vector) {\r\n                return this.parseByPointAndVector(values[0], values[1]);\r\n            } else if (values[0] instanceof Point && values[1] instanceof Point) {\r\n                return this.parseByPointAndVector(values[0], new Vector(values[0], values[1]));\r\n            } else if (values[0] instanceof Vector && values[1] instanceof Point) {\r\n                return this.parseByPointAndNormal(values[1], values[0])\r\n            }\r\n        }\r\n\r\n        if (values.length === 3) {\r\n            if (\r\n                (values[0] instanceof Fraction || typeof values[0] === 'number')\r\n                &&\r\n                (values[1] instanceof Fraction || typeof values[1] === 'number')\r\n                &&\r\n                (values[2] instanceof Fraction || typeof values[2] === 'number')\r\n            ) {\r\n                return this.parseByCoefficient(values[0], values[1], values[2]);\r\n            }else if (\r\n                values[0] instanceof Point && values[1] instanceof Vector\r\n            ){\r\n                if(values[2] === LinePropriety.Perpendicular){\r\n                    return this.parseByPointAndNormal(values[0], values[1])\r\n                }else if (values[2] === LinePropriety.Parallel){\r\n                    return this.parseByPointAndVector(values[0], values[1])\r\n                }\r\n            }\r\n        }\r\n\r\n        // TODO: Add the ability to create line from a normal vector\r\n        console.log('Someting wrong happend while creating the line')\r\n        return this;\r\n    }\r\n\r\n    parseEquation = (equ: Equation): Line => {\r\n        // Reorder the eequation\r\n        equ.reorder(true)\r\n\r\n        // It must contain either x, y or both.\r\n        let letters = new Set(equ.letters());\r\n\r\n        // No 'x', no 'y' in the equations\r\n        if (!(letters.has('x') || letters.has('y'))) {\r\n            return this\r\n        }\r\n\r\n        // Another letter in the equation ?\r\n        for (let elem of ['x', 'y']) {\r\n            if (letters.has(elem)) {\r\n                letters.delete(elem)\r\n            }\r\n        }\r\n\r\n        if (letters.size > 0) {\r\n            return this\r\n        }\r\n\r\n        // Everything should be ok now...\r\n        return this.parseByCoefficient(equ.left.monomByLetter('x').coefficient, equ.left.monomByLetter('y').coefficient, equ.left.monomByDegree(0).coefficient)\r\n    }\r\n    parseByCoefficient = (a: Fraction | number, b: Fraction | number, c: Fraction | number): Line => {\r\n        this._a = new Fraction(a);\r\n        this._b = new Fraction(b);\r\n        this._c = new Fraction(c);\r\n\r\n        this._d = new Vector(this._b.clone(), this._a.clone().opposed());\r\n        this._OA = new Point(new Fraction().zero(), this._c.clone());\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    parseByPointAndVector = (P: Point, d: Vector): Line => {\r\n        // OX = OP + k*d\r\n        // x = px + kdx     * dy\r\n        // y = py + kdy     * dx\r\n        // ------------------\r\n        // dy * x = px * dy + kdxdy\r\n        // dx * y = py * dx + kdxdy\r\n        // ------------------\r\n        // dy * x - dx * y = px * dy - py * dx\r\n        // dy * x - dx * y - (px * dy - py * dx) = 0\r\n        this.parseByCoefficient(\r\n            d.y,\r\n            d.x.clone().opposed(),\r\n            P.x.clone().multiply(d.y).subtract(P.y.clone().multiply(d.x)).opposed()\r\n        )\r\n\r\n        // Choose the current values as point and direction vector instead of the automatic version.\r\n        this._OA = P.clone();\r\n        this._d = d.clone();\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    parseByPointAndNormal = (P: Point, n: Vector): Line => {\r\n        return this.parseByCoefficient(\r\n            n.x,\r\n            n.y,\r\n            P.x.clone().multiply(n.x)\r\n                .add(P.y.clone().multiply(n.y)).opposed()\r\n        )\r\n    }\r\n\r\n    parseByPointAndLine = (P: Point, L: Line, orientation?: LinePropriety): Line => {\r\n\r\n        if (orientation === undefined) {\r\n            orientation = LinePropriety.Parallel\r\n        }\r\n\r\n        if (orientation === LinePropriety.Parallel) {\r\n            return this.parseByPointAndNormal(P, L.normal)\r\n        } else if (orientation === LinePropriety.Perpendicular) {\r\n            return this.parseByPointAndNormal(P, L.director)\r\n        }\r\n\r\n        this._exists = false\r\n        return this\r\n    }\r\n\r\n    clone = (): Line => {\r\n        this._a = this._a.clone();\r\n        this._b = this._b.clone();\r\n        this._c = this._c.clone();\r\n\r\n        this._d = this._d.clone();\r\n        this._OA = this._OA.clone();\r\n        this._n = this._n.clone();\r\n\r\n        this._exists = this.exists\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    isParellelTo = (line: Line): Boolean => {\r\n        // Do they have the isSame direction ?\r\n        return this.slope.isEqual(line.slope) && this.height.isNotEqual(line.height);\r\n    }\r\n    isSameAs = (line: Line): Boolean => {\r\n        return this.slope.isEqual(line.slope) && this.height.isEqual(line.height);\r\n    }\r\n    isVertical = (): Boolean => {\r\n        return this.slope.isInfinity()\r\n    }\r\n    simplify = (): Line => {\r\n        let lcm = Numeric.lcm(this._a.denominator, this._b.denominator, this._c.denominator),\r\n            gcd = Numeric.gcd(this._a.numerator, this._b.numerator, this._c.numerator);\r\n\r\n        this.parseByCoefficient(\r\n            this._a.clone().multiply(lcm).divide(gcd),\r\n            this._b.clone().multiply(lcm).divide(gcd),\r\n            this._c.clone().multiply(lcm).divide(gcd),\r\n        )\r\n\r\n        return this\r\n    }\r\n\r\n    simplifyDirection = (): Line => {\r\n        let lcm = Numeric.lcm(this._d.x.denominator, this._d.y.denominator),\r\n            gcd = Numeric.gcd(this._d.x.numerator, this._d.y.numerator);\r\n\r\n        this._d.x.multiply(lcm).divide(gcd);\r\n        this._d.y.multiply(lcm).divide(gcd);\r\n        return this;\r\n    }\r\n    intersection = (line: Line): { point: Point, hasIntersection: boolean, isParallel: boolean, isSame: boolean } => {\r\n        let Pt = new Point(), isParallel = false, isSame = false, hasIntersection = true;\r\n\r\n        // this         => ax+by+c = 0\r\n        // line         => dx+ey+f = 0\r\n        //\r\n        //  aex + bey + ce = 0\r\n        //  dbx + bey + bf = 0\r\n        // (ae-db)x + ce-bf = 0\r\n        //\r\n        //  adx + bdy + cd = 0\r\n        //  adx + aey + af = 0\r\n        // (bd-ae)y + (cd-af)\r\n        //\r\n        // x = (bf-ce)/(ae-db)\r\n        // y = (af-cd)/(bd-ae)\r\n\r\n\r\n        // Theres is no 'y'\r\n        if (this._b.isZero() || line.b.isZero()) {\r\n            // TODO : handle no y in the line canonical form\r\n        }\r\n\r\n        if (this.isParellelTo(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isParallel = true;\r\n        } else if (this.isSameAs(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isSame = true;\r\n        } else {\r\n            Pt.x = this._b.clone().multiply(line.c).subtract(this._c.clone().multiply(line.b))\r\n                .divide(this._a.clone().multiply(line.b).subtract(this._b.clone().multiply(line.a)));\r\n            Pt.y = this._a.clone().multiply(line.c).subtract(this._c.clone().multiply(line.a))\r\n                .divide(this._b.clone().multiply(line.a).subtract(this._a.clone().multiply(line.b)));\r\n        }\r\n\r\n        return {\r\n            point: Pt,\r\n            hasIntersection: !(isParallel || isSame),\r\n            isParallel,\r\n            isSame\r\n        };\r\n    }\r\n\r\n    distanceTo(pt: Point): { value: number, fraction: Fraction, tex: string } {\r\n        let numerator = pt.x.clone().multiply(this._a)\r\n                .add(pt.y.clone().multiply(this._b))\r\n                .add(this._c).abs(),\r\n            d2 = this.normal.normSquare;\r\n\r\n        // The denominator is null - shouldn't be possible\r\n        if (d2.isZero()) {\r\n            return {\r\n                value: NaN,\r\n                tex: 'Not a line',\r\n                fraction: new Fraction().infinite()\r\n            }\r\n        }\r\n        // The denominator is a perfect square - simplify the tex result\r\n        let value = numerator.value / Math.sqrt(d2.value),\r\n            F = numerator.clone().divide(d2.clone().sqrt());\r\n\r\n        // The denominator is a perfect square.\r\n        if (d2.isSquare()) {\r\n            return {\r\n                value,\r\n                tex: F.tex,\r\n                fraction: F\r\n            }\r\n        }\r\n        // Complete answer...\r\n        return {\r\n            value,\r\n            tex: `\\\\frac{${numerator.tex}}{\\\\sqrt{${d2.tex}}}`,\r\n            fraction: F\r\n        };\r\n    }\r\n\r\n    hitSegment(A: Point, B: Point): boolean {\r\n        let iPt = this.intersection(\r\n            new Line(A, B)\r\n        )\r\n\r\n        // There is an intersection point\r\n        if (iPt.hasIntersection) {\r\n            return iPt.point.x.value >= Math.min(A.x.value, B.x.value)\r\n                && iPt.point.x.value <= Math.max(A.x.value, B.x.value)\r\n                && iPt.point.y.value >= Math.min(A.y.value, B.y.value)\r\n                && iPt.point.y.value <= Math.max(A.y.value, B.y.value)\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getValueAtX = (value: Fraction|number): Fraction => {\r\n\r\n        const equ = this.equation.clone().isolate('y'),\r\n            F = new Fraction(value)\r\n\r\n        if(equ instanceof Equation){\r\n            return equ.right.evaluate({x: F})\r\n        }\r\n        return\r\n    }\r\n    getValueAtY = (value: Fraction|number): Fraction => {\r\n        const equ = this.equation.clone().isolate('x'),\r\n            F = new Fraction(value)\r\n\r\n        if(equ instanceof Equation){\r\n            return equ.right.evaluate({y: F})\r\n        }\r\n        return\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Special functions\r\n    // ------------------------------------------\r\n    canonicalAsFloatCoefficient(decimals: number): string {\r\n        if (decimals === undefined) {\r\n            decimals = 2;\r\n        }\r\n\r\n        let ca = this._a.value,\r\n            cb = this._b.value,\r\n            cc = this._c.value,\r\n            canonical = '';\r\n\r\n        if (!this._a.isZero()) {\r\n            if (this._a.isOne()) {\r\n                canonical = 'x'\r\n            } else if (this._a.clone().opposed().isOne()) {\r\n                canonical = '-x'\r\n            } else {\r\n                canonical = this._a.value.toFixed(decimals) + 'x'\r\n            }\r\n        }\r\n\r\n        if (!this._b.isZero()) {\r\n            if (this._b.isPositive()) {\r\n                canonical += '+'\r\n            }\r\n            canonical += this._b.value.toFixed(decimals) + 'y'\r\n        }\r\n\r\n        if (!this._c.isZero()) {\r\n            if (this._c.isPositive()) {\r\n                canonical += '+'\r\n            }\r\n            canonical += this._c.value.toFixed(decimals)\r\n        }\r\n\r\n\r\n        return canonical + '=0';\r\n    }\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Fraction} from \"../coefficients\"\r\nimport {Line} from \"./line\";\r\nimport {Vector} from \"./vector\";\r\n\r\n/**\r\n * Helper class - a way to identify an object {x: number, y: number}\r\n */\r\nclass PointXY {\r\n    public x: number\r\n    public y: number\r\n}\r\n\r\nexport class Point {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n    private _exist: Boolean;\r\n\r\n    constructor(...values: unknown[]) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.tex);\r\n        pts.push(this._y.tex);\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n\r\n    get display(): string {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.tex);\r\n        pts.push(this._y.tex);\r\n\r\n        return `(${pts.join(';')})`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...values: unknown[]): Point => {\r\n        // Initialize the value.\r\n        this.zero();\r\n\r\n        // Nothing is given\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        // One element is given - might be already a point !\r\n        if (values.length === 1) {\r\n            // it's already a point - clone it\r\n            if (values[0] instanceof Point) {\r\n                this._x = values[0].x.clone()\r\n                this._y = values[0].y.clone()\r\n                return this\r\n            }\r\n\r\n            // Value is given as string, comma separated.\r\n            if (typeof values[0] === 'string') {\r\n                let xy = values[0].split(',')\r\n                if (xy.length === 2) {\r\n                    this._x = new Fraction(xy[0]).reduce()\r\n                    this._y = new Fraction(xy[1]).reduce()\r\n                    return this\r\n                }\r\n            }\r\n\r\n            // Value given as an object with {x: value, y: value}\r\n            if(values[0] instanceof PointXY){\r\n                    this._x = new Fraction(values[0].x).reduce()\r\n                    this._y = new Fraction(values[0].y).reduce()\r\n                return this\r\n            } else {\r\n                return this.zero()\r\n            }\r\n        }\r\n\r\n        if (values.length === 2) {\r\n            this._x = new Fraction(values[0]).reduce()\r\n            this._y = new Fraction(values[1]).reduce()\r\n            return this\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Point => {\r\n        this._x = this._x.clone()\r\n        this._y = this._y.clone()\r\n\r\n        return this\r\n    }\r\n\r\n    zero = (): Point => {\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    origin = (): Point => {\r\n        this.zero();\r\n        return this;\r\n    }\r\n\r\n    middleOf = (P1: Point, P2: Point): Point => {\r\n        this._x = P1.x.clone().add(P2.x).divide(2);\r\n        this._y = P1.y.clone().add(P2.y).divide(2);\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Display functions\r\n    // ------------------------------------------\r\n    texValues = (numberOfDigits: number): string => {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.value.toFixed(numberOfDigits === undefined ? 2 : numberOfDigits));\r\n        pts.push(this._y.value.toFixed(numberOfDigits === undefined ? 2 : numberOfDigits));\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Static functions\r\n    // ------------------------------------------\r\n    static pmatrix = (a: any, b: any, c?: any): string => {\r\n        if (c === undefined) {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\end{pmatrix}`;\r\n        } else {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\\\\\ ${c.tex ? c.tex : c} \\\\end{pmatrix}`;\r\n        }\r\n    };\r\n\r\n    distanceTo = (item:Point|Line): { value: number, fraction: Fraction, tex: string } => {\r\n        let value = 0, fraction = new Fraction(), tex = ''\r\n\r\n        if(item instanceof Line){\r\n            return item.distanceTo(this)\r\n        }else if(item instanceof Point){\r\n            let V = new Vector(this, item)\r\n\r\n            value = V.norm\r\n            fraction = V.normSquare.sqrt()\r\n            tex = V.normSquare.isSquare()?fraction.tex:`\\\\sqrt{\\\\dfrac{ ${V.normSquare.numerator} }{ ${V.normSquare.denominator} }}`\r\n        }\r\n        return { value, fraction, tex }\r\n    }\r\n\r\n    get key(): string {\r\n      return `${this.x.display};${this.y.display}`\r\n}\r\n    isInListOfPoints = (list: Point[]): boolean => {\r\n        const keyList = list.map(x=>x.key)\r\n\r\n        return keyList.includes(this.key)\r\n    }\r\n}\r\n","import {Point} from \"./point\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Vector} from \"./vector\";\r\nimport {Line} from \"./line\";\r\nimport {Equation} from \"../algebra/equation\";\r\n\r\nexport interface remarquableLines {\r\n    'medians': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'mediators': {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line,\r\n        'intersection': Point\r\n    },\r\n    'heights': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'bisectors': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    }\r\n}\r\n\r\nexport class Triangle {\r\n    private _A: Point;\r\n    private _B: Point;\r\n    private _C: Point;\r\n    private _lines: {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line\r\n    };\r\n    private _middles: {\r\n        'AB': Point,\r\n        'AC': Point,\r\n        'BC': Point\r\n    };\r\n    private _remarquables: remarquableLines;\r\n\r\n\r\n    constructor(...values: unknown[]) {\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setters\r\n    // ------------------------------------------\r\n\r\n    get A(): Point {\r\n        return this._A;\r\n    }\r\n\r\n    get B(): Point {\r\n        return this._B;\r\n    }\r\n\r\n    get C(): Point {\r\n        return this._C;\r\n    }\r\n\r\n    get AB(): Vector {\r\n        return this.getSegment('A', 'B');\r\n    }\r\n\r\n    get BA(): Vector {\r\n        return this.getSegment('B', 'A');\r\n    }\r\n\r\n    get BC(): Vector {\r\n        return this.getSegment('B', 'C');\r\n    }\r\n\r\n    get CB(): Vector {\r\n        return this.getSegment('C', 'B');\r\n    }\r\n\r\n    get AC(): Vector {\r\n        return this.getSegment('A', 'C');\r\n    }\r\n\r\n    get CA(): Vector {\r\n        return this.getSegment('C', 'A');\r\n    }\r\n\r\n    get isRectangle(): boolean {\r\n        if (this.AB.isNormalTo(this.BC)) {\r\n            return true;\r\n        }\r\n        if (this.AB.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n        if (this.BC.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    get isEquilateral(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) &&\r\n            this.AB.normSquare.isEqual(this.AC.normSquare);\r\n    }\r\n\r\n    get isIsocele(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) ||\r\n            this.AB.normSquare.isEqual(this.AC.normSquare) ||\r\n            this.BC.normSquare.isEqual(this.AC.normSquare)\r\n    }\r\n\r\n    get lines(): { 'AB': Line, 'BC': Line, 'AC': Line } {\r\n        return this._lines;\r\n    }\r\n\r\n    get remarquables(): remarquableLines {\r\n        return this._remarquables;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Parse values to a triangle. Supported formats:\r\n     * Point, Point, Point\r\n     * x1, y1, x2, y2, x3, y3\r\n     * TODO: Something else ?\r\n     * @param values\r\n     */\r\n    parse = (...values: any): Triangle => {\r\n        if (values.length === 6) {\r\n            // Check if all values are number or fractions.\r\n            let v = values.map((x: any) => new Fraction(x));\r\n            return this.parse(\r\n                new Point(v[0], v[1]),\r\n                new Point(v[2], v[3]),\r\n                new Point(v[4], v[5]),\r\n            )\r\n        } else if (values.length === 3) {\r\n            // Possibilities:\r\n            // - Three points (or part of points, only dict for example, or array (TODO: Add the array syntax for point)\r\n            // - Three lines\r\n            // - Three lines as text.\r\n            if(values.filter((x:any) => typeof x === 'string').length===3) {\r\n                return this.parse( ...values.map((x:string) => new Line(x)) )\r\n            }else if(values.filter((x:any) => x instanceof Line).length===3) {\r\n                // We have three lines\r\n                this._lines = {\r\n                    'AB': values[0],\r\n                    'BC': values[1],\r\n                    'AC': values[2]\r\n                };\r\n\r\n                // Get the intersection points -> build the triangle using these intersection points.\r\n                let intersect = values[0].intersection(values[1]);\r\n                if (intersect.hasIntersection) {\r\n                    this._B = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[1].intersection(values[2]);\r\n                if (intersect.hasIntersection) {\r\n                    this._C = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[2].intersection(values[0]);\r\n                if (intersect.hasIntersection) {\r\n                    this._A = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n            }else {\r\n                // At least, one of the value is not a point.\r\n                if (values.filter((x: any) => (x instanceof Point)).length < 3) {\r\n                    return this.parse(\r\n                        new Point(values[0]),\r\n                        new Point(values[1]),\r\n                        new Point(values[2])\r\n                    )\r\n                }\r\n\r\n                // We have three points.\r\n                this._A = values[0].clone();\r\n                this._B = values[1].clone();\r\n                this._C = values[2].clone();\r\n\r\n                this._lines = {\r\n                    'AB': new Line(this._A, this._B),\r\n                    'BC': new Line(this._B, this._C),\r\n                    'AC': new Line(this._A, this._C)\r\n                };\r\n            }\r\n        } else if (values.length === 1) {\r\n            if (values[0] instanceof Triangle) {\r\n                return values[0].clone();\r\n            }\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the Triangle class\r\n     */\r\n    clone = (): Triangle => {\r\n        this._A = this._A.clone();\r\n        this._B = this._B.clone();\r\n        this._C = this._C.clone();\r\n\r\n        this._lines = {\r\n            'AB': this._lines.AB.clone(),\r\n            'BC': this._lines.BC.clone(),\r\n            'AC': this._lines.AC.clone()\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Triangle operations and properties\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Generate the Line object for the three segments of the triangle\r\n     */\r\n    private _updateTriangle = () => {\r\n        this._middles = {\r\n            'AB': new Point().middleOf(this._A, this._B),\r\n            'AC': new Point().middleOf(this._A, this._C),\r\n            'BC': new Point().middleOf(this._B, this._C)\r\n        }\r\n\r\n        this._remarquables = this._calculateRemarquableLines();\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the Point class for the given name\r\n     * @param ptName\r\n     */\r\n    private getPointByName = (ptName: string): Point => {\r\n        switch (ptName.toUpperCase()) {\r\n            case 'A':\r\n                return this._A;\r\n            case 'B':\r\n                return this._B;\r\n            case 'C':\r\n                return this._C;\r\n        }\r\n\r\n        // Something went wrong ! Return the first point\r\n        return this._A;\r\n    }\r\n    /**\r\n     * Get the vector for the segment given by name.\r\n     * @param ptName1\r\n     * @param ptName2\r\n     */\r\n    private getSegment = (ptName1: string, ptName2: string): Vector => {\r\n        return new Vector(\r\n            this.getPointByName(ptName1),\r\n            this.getPointByName(ptName2)\r\n        );\r\n    }\r\n\r\n    private _calculateRemarquableLines = (): remarquableLines => {\r\n        let remarquables: remarquableLines = {\r\n            'medians': {\r\n                'A': new Line(this._A, this._middles.BC),\r\n                'B': new Line(this._B, this._middles.AC),\r\n                'C': new Line(this._C, this._middles.AB),\r\n                'intersection': null\r\n            },\r\n            'mediators': {\r\n                'AB': new Line(this._middles.AB, new Vector(this._A, this._B).normal()),\r\n                'AC': new Line(this._middles.AC, new Vector(this._A, this._C).normal()),\r\n                'BC': new Line(this._middles.BC, new Vector(this._B, this._C).normal()),\r\n                'intersection': null\r\n            },\r\n            'heights': {\r\n                'A': new Line(this._A, new Vector(this._B, this._C).normal()),\r\n                'B': new Line(this._B, new Vector(this._A, this._C).normal()),\r\n                'C': new Line(this._C, new Vector(this._A, this._B).normal()),\r\n                'intersection': null\r\n            },\r\n            'bisectors': {\r\n                'A': this._calculateBisectors('A'),\r\n                'B': this._calculateBisectors('B'),\r\n                'C': this._calculateBisectors('C'),\r\n                'intersection': null\r\n            }\r\n        }\r\n\r\n        // As it's a triangle, we assume the lines are intersecting and aren't parallel or superposed.\r\n        remarquables.medians.intersection = remarquables.medians.A.intersection(remarquables.medians.B).point;\r\n        remarquables.mediators.intersection = remarquables.mediators.AB.intersection(remarquables.mediators.BC).point;\r\n        remarquables.heights.intersection = remarquables.heights.A.intersection(remarquables.heights.B).point;\r\n        remarquables.bisectors.intersection = remarquables.bisectors.A.intersection(remarquables.bisectors.B).point;\r\n\r\n        // Everything was calculated for the remarquable lines.\r\n        return remarquables;\r\n    }\r\n\r\n    private _calculateBisectors = (pt: string): Line => {\r\n        let tlines = this.lines, d1, d2;\r\n\r\n        if(pt==='A'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.AC;\r\n        }else if(pt==='B'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.BC;\r\n        }else if(pt==='C'){\r\n            d1 = tlines.BC;\r\n            d2 = tlines.AC;\r\n        }\r\n\r\n        let b1 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm)).reorder(true).simplify()),\r\n            b2 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm).opposed()).reorder(true).simplify());\r\n\r\n        // Must determine which bisectors is in the triangle\r\n        if(pt==='A'){\r\n            return b1.hitSegment(this.B, this.C)?b1:b2;\r\n        }\r\n        if(pt==='B'){\r\n            return b1.hitSegment(this.A, this.C)?b1:b2;\r\n        }\r\n        if(pt==='C'){\r\n            return b1.hitSegment(this.B, this.A)?b1:b2;\r\n        }\r\n\r\n        // Default returns the first bisector\r\n        return b1;\r\n    }\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Point} from \"./point\";\r\n\r\nexport class Vector {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n\r\n    constructor(...values: unknown[]) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get normSquare(): Fraction {\r\n        return this._x.clone().pow(2).add(this._y.clone().pow(2));\r\n    }\r\n\r\n    get norm(): number {\r\n        return Math.sqrt(this.normSquare.value);\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\begin{pmatrix}${this._x.tex} \\\\\\\\\\ ${this._y.tex} \\\\end{pmatrix}`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Vector => {\r\n        // TODO: Must be more strict about what is given and limit to two dimensional vectors.p\r\n        // Maybe more than one value was given...\r\n        // Initialize the vector\r\n        this.zero();\r\n\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        if (values.length === 1) {\r\n            if (values[0] instanceof Vector) {\r\n                return values[0].clone()\r\n            } else {\r\n                return this._parseString(values[0])\r\n            }\r\n        }\r\n\r\n        if (values.length >= 2) {\r\n            // Two points are given - skip the third value.\r\n            if (values[0] instanceof Point && values[1] instanceof Point) {\r\n                this._x = values[1].x.clone().subtract(values[0].x)\r\n                this._y = values[1].y.clone().subtract(values[0].y)\r\n                return this;\r\n            }\r\n\r\n            // Fractions or a number are give\r\n            if (values[0] instanceof Fraction || !isNaN(values[0])) {\r\n                this._x = new Fraction(values[0])\r\n            }\r\n            if (values[1] instanceof Fraction || !isNaN(values[1])) {\r\n                this._y = new Fraction(values[1])\r\n            }\r\n\r\n            if(\r\n                (typeof values[0] === 'object' && !isNaN(values[0].x) && !isNaN(values[0].x)) &&\r\n                (typeof values[1] === 'object' && !isNaN(values[1].x) && !isNaN(values[1].x))\r\n            ){\r\n                this._x = new Fraction(+values[1].x-values[0].x)\r\n                this._y = new Fraction(+values[1].y-values[0].y)\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Vector => {\r\n        let V = new Vector();\r\n\r\n        if (this._x !== null) {\r\n            V.x = this._x.clone();\r\n        }\r\n        if (this._y !== null) {\r\n            V.y = this._y.clone();\r\n        }\r\n        return V;\r\n    }\r\n\r\n    reset = (): Vector => {\r\n        this._x = null;\r\n        this._y = null;\r\n        return this;\r\n    }\r\n\r\n    zero = (): Vector => {\r\n        this.reset();\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    one = (): Vector => {\r\n        this._x = new Fraction();\r\n        this._y = new Fraction();\r\n        return this;\r\n    }\r\n\r\n    private _parseString = (value: string): Vector => {\r\n        // Split comma, semi colon or single space.\r\n        let components = value.split(/[,;\\s]/g);\r\n\r\n        // Validate the fraction values.\r\n        this.x = new Fraction(components[0] || null);\r\n        this.y = new Fraction(components[1] || null);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Vector => {\r\n        this._x.opposed();\r\n        this._y.opposed();\r\n        return this;\r\n    }\r\n\r\n    add = (V: Vector): Vector => {\r\n        this._x.add(V.x);\r\n        this._y.add(V.y);\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (V: Vector): Vector => {\r\n        return this.add(V.clone().opposed());\r\n    }\r\n\r\n    scalarProductWithVector = (V: Vector): Fraction => {\r\n        // TODO: Add the scalar factor !!!!\r\n        return this._x.clone().multiply(V.x).add(this._y.clone().multiply(V.y));\r\n    }\r\n\r\n    static scalarProduct = (v1: Vector, v2: Vector): number => {\r\n        // TODO: Transform to fraction with nthroot.\r\n        return v1.x.value * v2.x.value + v1.y.value * v2.y.value;\r\n    };\r\n\r\n    normal = (): Vector => {\r\n        let x = this.x.clone().opposed(), y = this.y.clone();\r\n        this._x = y;\r\n        this._y = x;\r\n        return this;\r\n    }\r\n\r\n    isNormalTo = (v: Vector): boolean => {\r\n        return this.scalarProductWithVector(v).isZero()\r\n    }\r\n\r\n    multiplyByScalar = (k: any): Vector => {\r\n        let scalar = new Fraction(k);\r\n        this._x.multiply(scalar);\r\n        this._y.multiply(scalar);\r\n        return this;\r\n    }\r\n\r\n    divideByScalar = (k: any): Vector => {\r\n        return this.multiplyByScalar(new Fraction(k).invert());\r\n    }\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    simplify = (): Vector => {\r\n        // Multiply by the lcm of denominators.\r\n        return this.multiplyByScalar(Numeric.lcm(this._x.denominator, this._y.denominator))\r\n            .divideByScalar(Numeric.gcd(this._x.numerator, this._y.numerator));\r\n    }\r\n\r\n    angleWith = (V: Vector, sharp?: Boolean, radian?: Boolean): number => {\r\n        let scalar = this.scalarProductWithVector(V).value,\r\n            toDegree = radian ? 1 : 180 / Math.PI;\r\n        if (sharp) {\r\n            scalar = Math.abs(scalar);\r\n        }\r\n\r\n        return toDegree * Math.acos(scalar / (this.norm * V.norm));\r\n    }\r\n}\r\n","export class Numeric{\r\n    static round(value:number, decimals:number=2):number {\r\n        return Number(Math.round(Number(value+'e'+decimals))+'e-'+decimals);\r\n    }\r\n\r\n    /**\r\n     * Get the list of the nth first prime numbers.\r\n     * @param nb : number of primes to choose from\r\n     */\r\n    static prime(nb?:number):number[]{\r\n        let primes:number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973];\r\n        if(nb === undefined){\r\n            return primes;\r\n        }else{\r\n            return primes.slice(0,Math.max(primes.length,nb));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the list of all dividers of a number.\r\n     * @param value\r\n     */\r\n    static dividers(value:number):number[]{\r\n        let D: number[];\r\n        const maxV = Math.sqrt(Math.abs(value));\r\n\r\n        // Initialize the list of dividers.\r\n        D = [];\r\n\r\n        for(let i=1; i<=maxV; i++){\r\n            if(value%i===0){\r\n                D.push(i);\r\n                D.push(value/i);\r\n            }\r\n        }\r\n\r\n        // Order numbers.\r\n        D.sort(function(a, b){return a-b;});\r\n\r\n        // Make sure the array of value is unique.\r\n        return [...new Set(D)];\r\n    }\r\n    /**\r\n     * Great Common Divisor\r\n     * @param values : number values\r\n     */\r\n    static gcd(...values:number[]):number{\r\n        // Define the gcd for two number\r\n        let gcd2 = function(a:number,b:number):number{\r\n            if(b===0){return a;}\r\n            return gcd2(b, a%b);\r\n        };\r\n\r\n        let g:number = 1,\r\n            i:number = 2;\r\n\r\n        // Nothing is given\r\n        if(values.length===0){return 1;}\r\n        // Only one number is given\r\n        if(values.length===1){\r\n            // The first number is zero\r\n            if(values[0]===0){return 1;}\r\n            // Return the number\r\n            return values[0];\r\n        }\r\n\r\n        // We have at least 2 numbers.\r\n        g = gcd2(values[0],values[1]);\r\n\r\n        // The gcd of the two first value is one ? It's already finished.\r\n        if(g===1){return 1;}\r\n\r\n        // The current gcd isn't one. Continue with all next values.\r\n        for(i=2; i<values.length; i++){\r\n            g = gcd2(g, values[i]);\r\n            // Escape if gcd is already one.\r\n            if(g===1){break;}\r\n        }\r\n\r\n        return Math.abs(g);\r\n    }\r\n\r\n    /**\r\n     * Least Common Multiple\r\n     * @param values: list of numbers\r\n     */\r\n    static lcm(...values:number[]):number{\r\n        return values.reduce(function(a,b){\r\n            return Math.abs(a * b / Numeric.gcd(a, b));\r\n        });\r\n    }\r\n\r\n    static pythagoricianTripletsWithTarget(target: number, targetIsSquare?:boolean): number[][] {\r\n        // méthode inverse, à partir du triplet.\r\n        const triplets = [],\r\n            targetValue = targetIsSquare===true?+target:target**2\r\n        for(let u = 0; u <= target; u++){\r\n            for(let v = 0; v <=target; v++){\r\n                if(u**2+v**2===targetValue){\r\n                    triplets.push([u, v, target])\r\n                }\r\n            }\r\n        }\r\n\r\n        return triplets\r\n    }\r\n}","import {rndPolynom} from \"./rndPolynom\";\r\nimport {rndMonom} from \"./rndMonom\";\r\nimport {rndHelpers} from \"./rndHelpers\";\r\nimport {randomCoefficientConfig, randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {Monom, Polynom} from \"../algebra\";\r\nimport {Fraction} from \"../coefficients\";\r\nimport {rndFraction} from \"./rndFraction\";\r\n\r\nexport * from \"./rndTypes\"\r\n\r\nexport namespace Random {\r\n    export function polynom(config?: randomPolynomConfig): Polynom {\r\n        return (new rndPolynom(config)).generate()\r\n    }\r\n\r\n    export function monom(config?: randomMonomConfig): Monom {\r\n        return (new rndMonom(config)).generate()\r\n    }\r\n\r\n    export function fraction(config?: randomCoefficientConfig): Fraction {\r\n        return (new rndFraction(config)).generate()\r\n    }\r\n\r\n    export function number(from: number, to: number): number {\r\n        return rndHelpers.randomInt(from, to)\r\n    }\r\n\r\n    export function numberSym(max: number, allowZero?: boolean): number {\r\n        return rndHelpers.randomIntSym(max, allowZero)\r\n    }\r\n\r\n    export function bool(percent?: number): boolean {\r\n        return rndHelpers.randomBool(percent)\r\n    }\r\n\r\n    export function array(arr: any[], number?: number): any[] {\r\n        return rndHelpers.randomArray(arr, number)\r\n    }\r\n\r\n    export function item(arr: any[]): any {\r\n        return rndHelpers.randomItem(arr)\r\n    }\r\n\r\n    export function shuffle(arr: any[]): any {\r\n        rndHelpers.shuffleArray(arr)\r\n    }\r\n}","export class randomCore {\r\n    protected _config: Object\r\n    protected _defaultConfig: Object\r\n    mergeConfig = (config: Object, defaultConfig: Object): Object => {\r\n        if (config !== undefined) {\r\n            return {...defaultConfig, ...config}\r\n        }\r\n        return defaultConfig\r\n    }\r\n\r\n    generate = (): unknown => {\r\n        return undefined\r\n    }\r\n\r\n    config = (config: Object): randomCore => {\r\n        this._config = this.mergeConfig(config, this._defaultConfig)\r\n        return this\r\n    }\r\n}","import {randomCore} from \"./randomCore\";\r\nimport {randomCoefficientConfig, randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {Fraction} from \"../coefficients\";\r\nimport {Random} from \"./index\";\r\n\r\n/**\r\n * Create a random monom based on a based configuration\r\n */\r\nexport class rndFraction extends randomCore {\r\n    declare protected _config: randomCoefficientConfig\r\n    declare protected _defaultConfig: randomCoefficientConfig\r\n\r\n    constructor(userConfig?: randomCoefficientConfig) {\r\n        super();\r\n\r\n        this._defaultConfig = {\r\n            negative: true,\r\n            max: 10,\r\n            reduced: true,\r\n            zero: true,\r\n            natural: false\r\n        }\r\n\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Fraction => {\r\n        let Q = new Fraction()\r\n\r\n        if(this._config.negative){\r\n            Q.numerator = Random.numberSym(this._config.max, this._config.zero)\r\n        }else {\r\n            Q.numerator = Random.number(this._config.zero ? 0 : 1, this._config.max)\r\n        }\r\n        if(this._config.natural){\r\n            Q.denominator = 1\r\n        }else {\r\n            Q.denominator = Random.number(1, this._config.max)\r\n        }\r\n\r\n        return this._config.reduced?Q.reduce():Q\r\n    }\r\n}\r\n","/**\r\n * Random helpers\r\n */\r\nexport class rndHelpers {\r\n\r\n    /**\r\n     * Random boolean with a percent ratio\r\n     * @param percent\r\n     */\r\n    static randomBool(percent:number=0.5):boolean{\r\n        return Math.random()<percent;\r\n    }\r\n\r\n    /**\r\n     * Random integer between two values.\r\n     * @param a (number) : From this value to the second value. If the second is ommited, this value is the max value.\r\n     * @param b (number) : To this value. If this is ommited.\r\n     */\r\n    static randomInt(a:number, b?:number):number{\r\n        if(b===undefined){return this.randomInt(0,a);}\r\n\r\n        return Math.floor(Math.random() * (b - a + 1) + a);\r\n    }\r\n\r\n    /**\r\n     * Random integer between -max and max value.\r\n     * @param max (number) : determine the limits.\r\n     * @param zero (bool) : determine if zero is allowed or not.\r\n     */\r\n    static randomIntSym(max:number, zero?:boolean):number{\r\n        if(zero===false){\r\n            return this.randomBool()?this.randomInt(1,max):-this.randomInt(1,max);\r\n        }else{\r\n            return this.randomInt(-max, max);\r\n        }\r\n    }\r\n\r\n    static randomArray(arr: any[], number?:number):any[]{\r\n        if(number===undefined){number = 1}\r\n\r\n        // Return a clone array\r\n        if(arr.length<=0){return Object.values(arr)}\r\n\r\n        // Randomize the array and return the n first elements.\r\n        return rndHelpers.shuffleArray(arr).slice(0,number);\r\n    }\r\n\r\n    static randomItem(arr: any[]): any{\r\n        if(arr.length===0){return ''}\r\n        return this.randomArray(arr, 1)[0]\r\n    }\r\n\r\n    static shuffleArray(arr: any[]): any[] {\r\n        // The Fisher-Yates algorithm\r\n        let shuffleArray = Object.values(arr)\r\n        for (let i = shuffleArray.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            const temp = shuffleArray[i];\r\n            shuffleArray[i] = shuffleArray[j];\r\n            shuffleArray[j] = temp;\r\n        }\r\n\r\n        return shuffleArray;\r\n    }\r\n\r\n}","import {randomCore} from \"./randomCore\";\r\nimport {randomMonomConfig} from \"./rndTypes\";\r\nimport {Random} from \"./index\";\r\nimport {Monom} from \"../algebra\";\r\n\r\n/**\r\n * Create a random monom based on a based configuration\r\n */\r\nexport class rndMonom extends randomCore {\r\n    declare protected _config: randomMonomConfig\r\n    declare protected _defaultConfig: randomMonomConfig\r\n\r\n    constructor(userConfig?: randomMonomConfig) {\r\n        super();\r\n\r\n        this._defaultConfig = {\r\n            letters: 'x',\r\n            degree: 2,\r\n            fraction: true,\r\n            zero: false\r\n        }\r\n\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Monom => {\r\n        // Create a monom instance\r\n        let M = new Monom()\r\n\r\n        // Generate the coefficient\r\n        if (typeof this._config.fraction === \"boolean\") {\r\n            M.coefficient = Random.fraction({\r\n                zero: this._config.zero,\r\n                reduced: true,\r\n                natural: !this._config.fraction\r\n            })\r\n        } else {\r\n            M.coefficient = Random.fraction(this._config.fraction)\r\n        }\r\n\r\n        // Calculate the degree of the monom\r\n        if (this._config.letters.length > 1) {\r\n            // Initialise each items...\r\n            for (let L of this._config.letters.split('')) {\r\n                M.setLetter(L, 0);\r\n            }\r\n            for (let i = 0; i < this._config.degree; i++) {\r\n                const L = Random.item(this._config.letters.split(\"\"))\r\n                M.setLetter(L, M.degree(L).clone().add(1))\r\n            }\r\n        } else {\r\n            M.setLetter(this._config.letters, this._config.degree)\r\n        }\r\n\r\n        return M\r\n    }\r\n}\r\n","import {randomCore} from \"./randomCore\";\r\nimport {randomPolynomConfig} from \"./rndTypes\";\r\nimport {rndMonom} from \"./rndMonom\";\r\nimport {Random} from \"./index\";\r\nimport {Polynom} from \"../algebra\";\r\nimport {Monom} from \"../algebra\";\r\n\r\n/**\r\n * Random polynoms\r\n */\r\nexport class rndPolynom extends randomCore {\r\n    declare protected _config: randomPolynomConfig\r\n    declare protected _defaultConfig: randomPolynomConfig\r\n\r\n    constructor(userConfig?: randomPolynomConfig) {\r\n        super();\r\n\r\n        // Default config for a random polynom\r\n        this._defaultConfig = {\r\n            letters: 'x',\r\n            degree: 2,\r\n            fraction: false,\r\n            zero: false,\r\n            unit: false,\r\n            factorable: false,\r\n            allowNullMonom: true,\r\n            numberOfMonoms: 0,\r\n            positive: true\r\n        }\r\n\r\n        // Merge config with initialiser\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Polynom => {\r\n        if(this._config.factorable && this._config.degree>1){\r\n            return this.factorable()\r\n        }\r\n\r\n        // Create the polynom\r\n        let P = new Polynom().empty(),\r\n            M: Monom\r\n\r\n        for (let i = this._config.degree; i >= 0; i--) {\r\n            // Create monom of corresponding degree.\r\n            M = new rndMonom({\r\n                letters: this._config.letters,\r\n                degree: i,\r\n                fraction: this._config.fraction,\r\n                zero: (i === this._config.degree) ? false : this._config.allowNullMonom\r\n            }).generate()\r\n\r\n            // If degree is the greatest and unit is true, set the monom value to one.\r\n            if (this._config.unit && this._config.degree === i) {\r\n                M.coefficient.one()\r\n            }\r\n\r\n            // Add to the polynom\r\n            P.add(M)\r\n        }\r\n\r\n        // Make sure the first monom is positive.\r\n        if(this._config.positive && P.monomByDegree().coefficient.isNegative()){\r\n            P.monomByDegree().coefficient.opposed()\r\n        }\r\n\r\n        // If the number of monoms is greater than the allowed value, remove some of them... except the first one !\r\n        if (this._config.numberOfMonoms > 0 && this._config.numberOfMonoms < P.length) {\r\n            // Get the greatest degree monom\r\n            let M = P.monomByDegree().clone()\r\n            P.monoms = Random.array(P.monoms.slice(1), this._config.numberOfMonoms-1)\r\n            P.add(M).reorder().reduce()\r\n        }\r\n        return P\r\n    }\r\n\r\n    factorable = (): Polynom => {\r\n        let P = new Polynom().one()\r\n\r\n        let _factorableConfig = {...this._config}\r\n        _factorableConfig.degree = 1\r\n        _factorableConfig.factorable = false\r\n\r\n        for(let i=0; i<this._config.degree;i++){\r\n            P.multiply(Random.polynom(_factorableConfig))\r\n        }\r\n\r\n        return P\r\n    }\r\n}","import {loadHighlighter} from \"typedoc/dist/lib/utils/highlighter\";\r\nimport exp = require(\"constants\");\r\n\r\nexport type tokenType = {\r\n    [key: string]: {\r\n        precedence: number,\r\n        associative: string,\r\n        type: string\r\n    }\r\n}\r\n\r\nexport const tokenConstant:{[Key:string]:number} = {\r\n    pi: Math.PI,\r\n    e: Math.exp(1)\r\n}\r\n\r\nexport enum ShutingyardType {\r\n    VARIABLE='variable',\r\n    COEFFICIENT='coefficient',\r\n    OPERATION = 'operation',\r\n    CONSTANT = 'constant',\r\n    FUNCTION = 'function',\r\n    MONOM = 'monom'\r\n}\r\n\r\nexport enum ShutingyardMode {\r\n    POLYNOM= 'polynom',\r\n    SET = 'set',\r\n    NUMERIC = 'numeric'\r\n}\r\n\r\nexport type Token = { token: string, tokenType: string }\r\n\r\nexport class Shutingyard {\r\n    private _rpn: Token[] = [];\r\n    readonly _mode: ShutingyardMode;\r\n    private _tokenConfig: tokenType;\r\n    private _tokenConstant: {[Key:string]: number}\r\n    private _uniformize: boolean;\r\n    private _tokenKeys: string[]\r\n\r\n    constructor(mode?: ShutingyardMode ) {\r\n        this._mode = typeof mode === 'undefined' ? ShutingyardMode.POLYNOM : mode;\r\n        this.tokenConfigInitialization()\r\n    }\r\n\r\n    /**\r\n     * Determin if the token is a defined operation\r\n     * Defined operations: + - * / ^ sin cos tan\r\n     * @param token\r\n     */\r\n    // isOperation(token: string): boolean {\r\n    //     if (token[0].match(/[+\\-*/^]/g)) {\r\n    //         return true;\r\n    //     }\r\n    //     //\r\n    //     // if (token.match(/^sin|cos|tan/g)) {\r\n    //     //     return true;\r\n    //     // }\r\n    //\r\n    //     return false;\r\n    // }\r\n\r\n    tokenConfigInitialization(): tokenType {\r\n        if (this._mode === ShutingyardMode.SET) {\r\n            this._tokenConfig = {\r\n                '&': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '|': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '!': {precedence: 4, associative: 'right', type: ShutingyardType.OPERATION},\r\n                '-': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION}\r\n            }\r\n            this._uniformize = false;\r\n        }else if (this._mode === ShutingyardMode.NUMERIC){\r\n            this._tokenConfig = {\r\n                '^': {precedence: 4, associative: 'right', type: ShutingyardType.OPERATION},\r\n                '*': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '/': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '+': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '-': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '%': {precedence: 3, associative: 'right', type: ShutingyardType.OPERATION},\r\n                'sin': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'cos': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'tan': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'sqrt': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n            }\r\n            this._uniformize = false\r\n        } else {\r\n            this._tokenConfig = {\r\n                '^': {precedence: 4, associative: 'right', type: ShutingyardType.OPERATION},\r\n                '*': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '/': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '+': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '-': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                // '%': {precedence: 3, associative: 'right', type: ShutingyardType.OPERATION},\r\n                // 'sin': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                // 'cos': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                // 'tan': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n            }\r\n            this._uniformize = true\r\n        }\r\n\r\n        this._tokenKeys = Object.keys(this._tokenConfig).sort((a,b)=>b.length-a.length)\r\n        return this._tokenConfig\r\n    }\r\n\r\n    /**\r\n     * Get the next token to analyse.\r\n     * @param expr (string) Expression to analyse\r\n     * @param start (number) CUrrent position in the expr string.\r\n     */\r\n    NextToken(expr: string, start: number): [string, number, string] {\r\n        let token: string, tokenType: string;\r\n        token = '';\r\n        tokenType = '';\r\n        // Case of parenthesis or comma (generic items)\r\n        if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        } else{\r\n            // Order token keys by token characters length (descending)\r\n            // TODO: this is done each time ! SHould be done once !\r\n            // const keys = Object.keys(this._tokenConfig).sort((a,b)=>b.length-a.length)\r\n\r\n            // Extract operation and function tokens\r\n            for(let key of this._tokenKeys){\r\n                if(expr.substring(start, start+key.length) === key){\r\n                    token += key;\r\n                    tokenType = this._tokenConfig[key].type\r\n                    break\r\n                }\r\n            }\r\n\r\n            // Extract constant\r\n            for(let key in tokenConstant){\r\n                if(expr.substring(start, start+key.length) === key){\r\n                    token += key;\r\n                    tokenType = ShutingyardType.CONSTANT\r\n                    break\r\n                }\r\n            }\r\n\r\n            if(token===''){\r\n                // No function found ! Might be a coefficient !\r\n                if( expr[start].match(/[0-9]/) ) {\r\n                    if(this._mode === ShutingyardMode.POLYNOM && false) {\r\n                        token = expr.substring(start).match(/^([0-9.,/]+)/)[0]\r\n                    }else{\r\n                        token = expr.substring(start).match(/^([0-9.,]+)/)[0]\r\n                    }\r\n                    tokenType = ShutingyardType.COEFFICIENT\r\n                }else if (expr[start].match(/[a-zA-Z]/)) {\r\n                    token = expr.substring(start).match(/^([a-zA-Z])/)[0]\r\n                    tokenType = ShutingyardType.VARIABLE\r\n                }else{\r\n                    console.log('Unidentified token', expr[start], expr, start)\r\n                    token = expr[start]\r\n                    tokenType = ShutingyardType.MONOM\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    /**\r\n     * Sanitize an expression by adding missing common operation (multiplication between parentheseses)\r\n     * @param expr\r\n     * @constructor\r\n     */\r\n    Uniformizer(expr: string): string {\r\n        // Determiner if need to be uniformized\r\n        if(!this._uniformize){return expr}\r\n\r\n        let expr2;\r\n        // Replace missing multiplication between two parenthese\r\n        expr2 = expr.replace(/\\)\\(/g, ')*(');\r\n\r\n        // Replace missing multiplication between number or setLetter and parenthese.\r\n\r\n        // 3x(x-4) => 3x*(x-4)\r\n        expr2 = expr2.replace(/([\\da-zA-Z])(\\()/g, \"$1*$2\");\r\n\r\n        // (x-4)3x => (x-4)*3x\r\n        expr2 = expr2.replace(/(\\))([\\da-zA-Z])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between number and letters.\r\n        // 3x => 3*x\r\n        expr2 = expr2.replace(/([0-9])([a-zA-Z])/g, \"$1*$2\");\r\n        expr2 = expr2.replace(/([a-zA-Z])([0-9])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between letters ?\r\n        // TODO: More robust solution to handle all letters ?\r\n        expr2 = expr2.replace(/([abcxyz])([abcxyz])/g, \"$1*$2\");\r\n\r\n        // Restore operation auto formating (prevent adding the mutliplcation star)\r\n        // TODO: Accept list of functions\r\n        let fnToken = ['sin', 'cos', 'tan']\r\n        for (let token of fnToken) {\r\n            expr2 = expr2.replace(new RegExp(token + '\\\\*', 'g'), token);\r\n        }\r\n\r\n        return expr2;\r\n    }\r\n\r\n    /**\r\n     * Parse an expression using the shutting yard tree algorithms\r\n     * @param expr (string) Expression to analyse\r\n     * Returns a RPN list of items.\r\n     * @param operators\r\n     */\r\n    parse(expr: string, operators?: string[]): Shutingyard {\r\n        let outQueue: {token:string, tokenType: string}[] = [],    // Output queue\r\n            opStack: {token:string, tokenType: string}[] = [],     // Operation queue\r\n            token: string = '',\r\n            tokenPos: number = 0,\r\n            tokenType: string = '',\r\n            previousOpStatckLength = 0\r\n\r\n        expr = this.Uniformizer(expr);\r\n\r\n        let securityLoopLvl1 = 50,\r\n            securityLoopLvl2_default = 50,\r\n            securityLoopLvl2;\r\n\r\n        while (tokenPos < expr.length) {\r\n            securityLoopLvl1--;\r\n            if (securityLoopLvl1 === 0) {\r\n                console.log('SECURITY LEVEL 1 EXIT');\r\n                break;\r\n            }\r\n\r\n            // Get the next token and the corresponding new (ending) position\r\n            [token, tokenPos, tokenType] = this.NextToken(expr, tokenPos);\r\n\r\n            switch (tokenType) {\r\n                case 'monom':\r\n                case 'coefficient':\r\n                case 'variable':\r\n                case 'constant':\r\n                    outQueue.push({\r\n                        token,\r\n                        tokenType\r\n                    });\r\n                    // if(previousOpStatckLength == opStack.length && outQueue.length>=2){\r\n                    //     console.log('opStatckLength', outQueue, opStack.length)\r\n                    //     outQueue.push('*')\r\n                    // }\r\n                    break;\r\n                case 'operation':\r\n                    previousOpStatckLength = opStack.length;\r\n                    //If the token is an operator, o1, then:\r\n                    if (opStack.length > 0) {\r\n                        let opTop = opStack[opStack.length - 1];\r\n\r\n\r\n                        securityLoopLvl2 = +securityLoopLvl2_default;\r\n\r\n                        //while there is an operator token o2, at the top of the operator stack and\r\n                        while (opTop.token in this._tokenConfig && (\r\n                                //either o1 is left-associative and its precedence is less than or equal to that of o2,\r\n                                (this._tokenConfig[token].associative === 'left' && this._tokenConfig[token].precedence <= this._tokenConfig[opTop.token].precedence)\r\n                                ||\r\n                                //or o1 is right associative, and has precedence less than that of o2,\r\n                                (this._tokenConfig[token].associative === 'right' && this._tokenConfig[token].precedence < this._tokenConfig[opTop.token].precedence)\r\n                            )\r\n                            ) {\r\n\r\n                            /* Security exit ! */\r\n                            securityLoopLvl2--;\r\n                            if (securityLoopLvl2 === 0) {\r\n                                console.log('SECURITY LEVEL 2 OPERATION EXIT');\r\n                                break;\r\n                            }\r\n\r\n                            // Add the operation to the queue\r\n                            outQueue.push((opStack.pop()) || {token: '', tokenType: 'operation'});\r\n\r\n                            // Get the next operation on top of the Stack.\r\n                            if(opStack.length===0){break;}\r\n                            opTop = opStack[opStack.length - 1];\r\n                        }\r\n                    }\r\n                    //at the end of iteration push o1 onto the operator stack\r\n                    opStack.push({token,tokenType});\r\n                    break;\r\n                case 'function-argument':\r\n                    // TODO: check if the opStack exist.\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 0) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 FUNCTION ARGUMENT EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n                    break;\r\n                case '(':\r\n                    opStack.push({token,tokenType});\r\n                    // Add an empty value if next element is negative.\r\n                    if (expr[tokenPos] === '-') {\r\n                        outQueue.push({token: '0', tokenType: 'coefficient'});\r\n                    }\r\n                    break;\r\n                case ')':\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    //Until the token at the top of the stack is a left parenthesis, pop operators off the stack onto the output queue.\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 1 /*Maybe zero !? */) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 CLOSING PARENTHESE EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n\r\n                    //Pop the left parenthesis from the stack, but not onto the output queue.\r\n                    opStack.pop();\r\n                    break;\r\n                case 'function':\r\n                    opStack.push({token, tokenType});\r\n                    break;\r\n                default:\r\n                    // In theory, everything should be handled.\r\n                    console.log(`SHUTING YARD: ${tokenType} : ${token} `);\r\n            }\r\n\r\n            // Output\r\n            // console.log(outQueue.concat(opStack.reverse()).join(\" \"));\r\n        }\r\n\r\n        // console.log(outQueue.concat(opStack.reverse()));\r\n        this._rpn = outQueue.concat(opStack.reverse());\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    // Getter\r\n    get rpn() {\r\n        // console.log(this._rpn)\r\n        return this._rpn;\r\n    }\r\n\r\n\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(519);\n"],"names":["ShutingYard","Shutingyard","Numeric","NumExp","Fraction","Root","Nthroot","Monom","Polynom","Equation","LinearSystem","Rational","Logicalset","Random","PolynomExpFactor","PolynomExpProduct","Geometry","Vector","Point","Line","Triangle","Circle","window","Pi","constructor","equations","_varnothing","_real","_randomizeDefaults","degree","parse","equationString","pStr","strSign","this","_findSign","split","create","_formatSign","console","error","left","right","sign","_left","_right","_sign","clone","randomize","opts","moveLeft","subtract","zero","reorder","allLeft","mMove","m","monoms","isZero","simplify","multiply","lcm","getDenominators","divide","gcd","getNumerators","isolate","letter","isOne","isMultiVariable","cMove","hasLetter","add","opposed","length","coefficient","replaceBy","P","value","F","_reverseSign","invert","max","letters","Set","solve","_solutions","_polynom","_solveDegree1","_solveDegree2","_solveDegree3plus","test","values","evaluate","isEqual","includes","log","signStr","undefined","replace","isGreater","indexOf","isStrictEqual","isAlsoEqual","m1","monomByDegree","m0","v","s","tex","NaN","exact","display","delta","nthDelta","realX1","realX2","sX1","sX2","aF","bF","cF","denominator","a","b","Math","sqrt","toFixed","reduce","hasRadical","S1","S2","dfrac","sol","solutions","isEquation","solution","map","x","join","isReal","isVarnothing","signAsTex","raw","variables","concat","numberOfVars","randomizeDefaults","equationStrings","_equations","_findLetters","setCoefficient","coefficients","i","_letters","slice","toString","equ","push","setLetters","generate","solutionsF","_generateOneEquation","coeff","leftValue","equString","numberSym","_checkIfLinerCombination","mergeEquations","eq1","eq2","factor1","factor2","eq1multiplied","eq2multiplied","E","_resolutionSteps","V","sort","_solveOneLetter","str","isSolvable","equStr","LS","equArray","L","monomByLetter","repeat","_linearReduction","c1","c2","LE","reducedEquations","_rpn","ShutingyardMode","SET","rpn","_rawString","isLogicalset","tokenSets","reference","referenceSet","varStack","key","token","tokenType","second","pop","first","filter","has","vennAB","A","B","vennABC","C","inputStr","_shutingYardToReducedMonom","_coefficient","_literal","copyLiterals","literal","stack","element","one","setLetter","addToken","k","makeSame","M","clean","isSameAs","multiplyByNumber","pow","nb","root","p","isSquare","compare","M1","M2","K","item","isLiteralSquare","isRational","isEven","hasFractionCoefficient","isNotZero","Object","t","n","r","tmpValues","derivative","d","dM","primitive","areSameAs","areEquals","literalSqrt","literalStr","matchAll","keys","isNotEqual","dividers","isRelative","numerator","abs","literals","_getLiteralDividers","monomDividers","N","arr","tmpList","litt","currentLetter","displayWithSign","texWithSign","isStrictlyPositive","tfrac","q1","q2","ShutingyardType","COEFFICIENT","VARIABLE","OPERATION","coeffN","coeffD","min","xmultiply","polynomString","_monoms","_factors","_parseString","empty","Number","isSafeInteger","multiplyByPolynom","multiplyByFraction","multiplyByMonom","multiplyByInteger","euclidian","quotient","reminder","maxMP","degreeP","newM","MaxIteration","geq","isPositive","divideByFraction","divideByInteger","cP1","cP2","isOpposedAt","isFactorized","match","e","polynomStringNormalized","replaceAll","polynomStringReduced","factors","substr","polyFactors","factorize","f","splice","isDeveloped","j","S","resultPolynom","forEach","monom","dP","integrate","valuesA","valuesB","tempPolynom","commonMonom","securityLoop","m2","m1d","m2d","result","dividerPolynom","getZeroes","zeroes","zeroesAsTex","greater","D","x1","x2","z","frac","monomsByDegree","Ms","denominators","numerators","lcmDenominator","gcdDenominator","lcmNumerator","gcdNumerator","genDisplay","output","forceSign","wrapParentheses","shutingYardToReducedPolynom","nbF","_factorize2ndDegree","P1","P2","c","factor","xyzPolynom","xFactors","_factorizeByGroups","texString","_texString","texFactors","isNaN","fractions","CONSTANT","MONOM","FUNCTION","_numerator","_denominator","domain","amplify","NumeratorEuclidien","DenominatorEuclidien","R","limits","Infinity","denominatorOrPeriodic","floor","infinite","invalid","Q","controlNumerator","g","compareFraction","lesser","than","leq","isOpposed","isInverted","isNegativeOne","isNegative","isStrictlyNegative","isInfinity","isFinite","isReduced","isNatural","isOdd","isFraction","radical","nthroot","_nth","_radical","_isValid","nth","_expression","NUMERIC","isValid","expression","_extractDecimalPart","decimal","substring","_numberCorrection","epsilon","n9","n0","mod0","mod9","_addToStack","tokenConstant","sin","cos","tan","polynom","mathFunction","_degree","_fn","_powerAsInteger","_forceParenthesis","forceParenthesis","fn","powerAsInteger","isCoefficient","firstCoefficient","_texDegree","setForceParenthesis","_positive","_asPositiveDegree","positive","asPositiveDegree","parenthesis","numeratorsAsTex","denominatorsAsTex","name","polynoms","d1","d2","_integrateWithInternalDerivative","applyMathFunction","mathFn","Pinternal","internalDerivative","relativePosition","distance","distanceTo","center","radius","_squareRadius","lineIntersection","solX","intersectionPoints","_cartesian","equX","lineX","equation","lineY","tangents","_tangentsWithSlope","isPointOnCircle","_tangentsThroughOnePointOnTheCircle","_tangentsThroughOnePointOutsideTheCircle","y","getPointsOnCircle","numberIsInteger","pt","triplets","pythagoricianTripletsWithTarget","points","triplet","isInListOfPoints","CT","_center","LinePropriety","Perpendicular","cx_px","cy_py","polyLeft","polyRight","squareRadius","h","slope","sq","_exists","cartesian","exists","cx","cy","developed","_calculateCartesian","_reset","_parseEquation","_parseCopyCircle","_parseThroughtThreePoints","_parseCenterAndPointThrough","_parseCenterAndRadius","circle","square","pointThrough","normSquare","y1","y2","T","mAB","remarquables","mediators","AB","mAC","AC","intersection","point","parseEquation","parseByPointAndVector","parseByPointAndNormal","parseByCoefficient","Parallel","elem","delete","size","_a","_b","_c","_d","_OA","_n","normal","parseByPointAndLine","orientation","director","isParellelTo","line","height","isVertical","simplifyDirection","Pt","isParallel","isSame","hasIntersection","getValueAtX","getValueAtY","canonical","mxh","OA","parametric","pmatrix","fraction","hitSegment","iPt","canonicalAsFloatCoefficient","decimals","PERPENDICULAR","PARALLEL","_x","_y","xy","origin","middleOf","texValues","numberOfDigits","pts","norm","list","_lines","intersect","_B","_C","_A","_updateTriangle","BC","_middles","_remarquables","_calculateRemarquableLines","getPointByName","ptName","toUpperCase","getSegment","ptName1","ptName2","_calculateBisectors","medians","heights","bisectors","tlines","lines","b1","b2","BA","CB","CA","isRectangle","isNormalTo","isEquilateral","isIsocele","reset","components","scalarProductWithVector","multiplyByScalar","scalar","divideByScalar","angleWith","sharp","radian","toDegree","PI","acos","scalarProduct","v1","v2","static","round","primes","maxV","gcd2","target","targetIsSquare","targetValue","u","config","rndPolynom","rndMonom","rndFraction","number","from","to","rndHelpers","randomInt","allowZero","randomIntSym","bool","percent","randomBool","array","randomArray","randomItem","shuffle","shuffleArray","mergeConfig","defaultConfig","_config","_defaultConfig","randomCore","userConfig","super","negative","natural","reduced","random","temp","factorable","allowNullMonom","unit","numberOfMonoms","_factorableConfig","pi","exp","mode","_mode","POLYNOM","tokenConfigInitialization","_tokenConfig","precedence","associative","type","_uniformize","_tokenKeys","NextToken","expr","start","Uniformizer","expr2","fnToken","RegExp","operators","outQueue","opStack","tokenPos","previousOpStatckLength","securityLoopLvl2","securityLoopLvl1","opTop","reverse","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call"],"sourceRoot":""}