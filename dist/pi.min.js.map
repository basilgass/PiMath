{"version":3,"file":"pi.min.js","mappings":"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","sources":["webpack://pimath/./src/maths/algebra/equation.ts","webpack://pimath/./src/maths/algebra/index.ts","webpack://pimath/./src/maths/algebra/linearSystem.ts","webpack://pimath/./src/maths/algebra/logicalset.ts","webpack://pimath/./src/maths/algebra/monom.ts","webpack://pimath/./src/maths/algebra/polynom.ts","webpack://pimath/./src/maths/algebra/rational.ts","webpack://pimath/./src/maths/coefficients/fraction.ts","webpack://pimath/./src/maths/coefficients/index.ts","webpack://pimath/./src/maths/coefficients/nthroot.ts","webpack://pimath/./src/maths/expressions/numexp.ts","webpack://pimath/./src/maths/expressions/polynomexp.ts","webpack://pimath/./src/maths/geometry/circle.ts","webpack://pimath/./src/maths/geometry/index.ts","webpack://pimath/./src/maths/geometry/line.ts","webpack://pimath/./src/maths/geometry/point.ts","webpack://pimath/./src/maths/geometry/triangle.ts","webpack://pimath/./src/maths/geometry/vector.ts","webpack://pimath/./src/maths/numeric.ts","webpack://pimath/./src/maths/random/index.ts","webpack://pimath/./src/maths/random/randomCore.ts","webpack://pimath/./src/maths/random/rndFraction.ts","webpack://pimath/./src/maths/random/rndHelpers.ts","webpack://pimath/./src/maths/random/rndMonom.ts","webpack://pimath/./src/maths/random/rndPolynom.ts","webpack://pimath/./src/maths/shutingyard.ts","webpack://pimath/webpack/bootstrap","webpack://pimath/./src/main.ts"],"sourcesContent":["import {Polynom} from \"./polynom\";\r\nimport {literalType, Monom} from \"./monom\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Fraction, Nthroot} from \"../coefficients\";\r\n\r\n/**\r\n * Equation is a class to manage equations...\r\n */\r\ninterface ISolution {\r\n    tex: string,\r\n    value: number,\r\n    exact: unknown\r\n}\r\n\r\nexport class Equation {\r\n    private _polynom: Polynom;  // Used to solve the equation // TODO: remove the private value ?\r\n    // Undetermined texSolutions.\r\n    private _varnothing: string = '\\\\varnothing';\r\n    private _real: string = '\\\\mathbb{R}';\r\n\r\n    /**\r\n     * Create an Equation using two polynoms.\r\n     * Markdown *support* is cool\r\n     * @param equations\r\n     */\r\n    constructor(...equations: unknown[]) {\r\n        // Default equation\r\n        this._left = new Polynom().zero();\r\n        this._right = new Polynom().zero();\r\n        this._sign = '=';\r\n\r\n        if (equations.length === 1) {\r\n            if (equations[0] instanceof Equation) {\r\n                return equations[0].clone();\r\n            } else if (typeof equations[0] === 'string') {\r\n                this.parse(equations[0]);\r\n            }\r\n        } else if (equations.length === 2) {\r\n            if (equations[0] instanceof Polynom) {\r\n                this.left = equations[0].clone()\r\n            } else if (typeof equations[0] === 'string') {\r\n                this.left = new Polynom(equations[0])\r\n            }\r\n\r\n            if (equations[1] instanceof Polynom) {\r\n                this.right = equations[1].clone()\r\n            } else if (typeof equations[1] === 'string') {\r\n                this.right = new Polynom(equations[1])\r\n            }\r\n        } else {\r\n            // Return default empty equation\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private _left: Polynom;  // Left part of the equation\r\n\r\n    get left(): Polynom {\r\n        return this._left;\r\n    }\r\n\r\n    set left(value: Polynom) {\r\n        this._left = value;\r\n    }\r\n\r\n    private _right: Polynom; // Right part of the equation\r\n\r\n    get right(): Polynom {\r\n        return this._right;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n\r\n    set right(value: Polynom) {\r\n        this._right = value;\r\n    }\r\n\r\n    private _sign: string;   // Signe of the equation, by default =\r\n\r\n    get sign(): string {\r\n        return this._sign;\r\n    }\r\n\r\n    set sign(value: string) {\r\n        // Set the sign value as formatted.\r\n        this._sign = this._formatSign(value);\r\n    }\r\n\r\n    private _solutions: ISolution[]\r\n\r\n    // ------------------------------------------\r\n    get solutions(): ISolution[] {\r\n        return this._solutions\r\n    }\r\n\r\n    get isEquation() {\r\n        return true;\r\n    }\r\n\r\n    get solution(): string {\r\n        if (this._solutions.length === 1\r\n            &&\r\n            (\r\n                this._solutions[0].tex === this._real\r\n                || this._solutions[0].tex === this._varnothing\r\n                || this._solutions[0].tex.includes('\\\\left')\r\n            )\r\n        ) {\r\n            return `S = ${this._solutions[0]}`;\r\n        }\r\n        return `S = \\\\left{ ${this._solutions.map(x => x.tex).join(';')} \\\\right}`;\r\n    }\r\n\r\n    get isReal(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0].tex === this._real;\r\n    }\r\n\r\n    get isVarnothing(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0].tex === this._varnothing;\r\n    }\r\n\r\n    get signAsTex(): string {\r\n        if (this._sign === '>=' || this._sign === '=>' || this._sign === 'geq') {\r\n            return '\\\\geq';\r\n        }\r\n        if (this._sign === '<=' || this._sign === '=<' || this._sign === 'leq') {\r\n            return '\\\\leq';\r\n        }\r\n        return this._sign;\r\n    }\r\n\r\n    get tex(): string {\r\n        return `${this._left.tex}${this.signAsTex}${this._right.tex}`;\r\n    }\r\n\r\n    get display(): string {\r\n        return `${this._left.display}${this.signAsTex}${this._right.display}`;\r\n    }\r\n\r\n    get raw(): string {\r\n        return `${this._left.raw}${this.signAsTex}${this._right.raw}`;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        return [...new Set(this._right.variables.concat(this._left.variables))];\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n\r\n    // -----------------------------------------------\r\n    private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n        degree: 2\r\n    };\r\n\r\n    get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n        return this._randomizeDefaults;\r\n    }\r\n\r\n    set randomizeDefaults(value) {\r\n        this._randomizeDefaults = value;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    parse = (equationString: string): Equation => {\r\n        let pStr: string[], strSign: string | false;\r\n        // Find the string separator\r\n        strSign = this._findSign(equationString);\r\n\r\n        if (strSign === false) {\r\n            console.error('The equation is not valid (no sign found)');\r\n            return;\r\n        }\r\n\r\n        // The StrSign is found\r\n        pStr = equationString.split(strSign);\r\n\r\n        return this.create(new Polynom(pStr[0]), new Polynom(pStr[1]), this._formatSign(strSign));\r\n    };\r\n\r\n    create = (left: Polynom, right: Polynom, sign?: string): Equation => {\r\n        this._left = left;\r\n        this._right = right;\r\n        this._sign = this._formatSign(sign);\r\n        return this;\r\n    };\r\n\r\n    clone = (): Equation => {\r\n        return new Equation().create(this._left.clone(), this._right.clone(), this._sign + '');\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n\r\n    randomize = (opts?: {}, sign?: string): Equation => {\r\n        // TODO: Generate equations randomly, using config.\r\n        return new Equation().create(new Polynom(), new Polynom(), sign);\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    /**\r\n     * Reorder will move all monoms containing a letter on the left, all the other on the right.\r\n     */\r\n    moveLeft = (): Equation => {\r\n        this._left = this._left.clone().subtract(this._right)\r\n        this._right.zero()\r\n        return this;\r\n    }\r\n\r\n    reorder = (allLeft?: boolean): Equation => {\r\n        // Move all monoms of degree greater than 0 to the left.\r\n        // and all zero degree monoms to the right.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n\r\n        if (allLeft) {\r\n            return this.moveLeft()\r\n        }\r\n        let mMove: Monom;\r\n        for (let m of this._left.monoms) {\r\n            if (m.degree().isZero()) {\r\n                mMove = m.clone();\r\n                this._left.subtract(mMove);\r\n                this._right.subtract(mMove);\r\n            }\r\n        }\r\n\r\n        // Reorder the left and right polynoms\r\n        this._left.reorder();\r\n        this._right.reorder();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiply by the lcm denominator and divide by the gcm numerators.\r\n     */\r\n    simplify = (): Equation => {\r\n        this.multiply(Numeric.lcm(...this._left.getDenominators(), ...this._right.getDenominators()));\r\n        this.divide(Numeric.gcd(...this._left.getNumerators(), ...this._right.getNumerators()));\r\n        return this;\r\n    }\r\n\r\n\r\n    // -----------------------------------------------\r\n    // Equations operations\r\n\r\n    /**\r\n     * Reorder the polynom to have only one letter on the left, the rest on the right.\r\n     * @param letter\r\n     */\r\n    isolate = (letter?: string): Equation | false => {\r\n        // Determine if we can isolate the variables.\r\n\r\n        // Both part of the equations must be of the first degree.\r\n        //TODO: handle equations of degree two or more ?\r\n        if (!this.degree(letter).isOne()) {\r\n            return false;\r\n        }\r\n\r\n        // Modify the equation to isolate the asked variable.\r\n        // TODO: must handle equations like 3xy+5y=4 => y = 4/(3x-5)\r\n        if (this.isMultiVariable()) {\r\n            return false;\r\n        }\r\n\r\n        // Isolate the letter.\r\n        let mMove: Monom, cMove: Fraction;\r\n        // Start by moving everything to the left.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n        for (let m of this._left.monoms) {\r\n            if (!m.hasLetter(letter)) {\r\n                mMove = m.clone();\r\n                this._left.add(mMove.clone().opposed());\r\n                this._right.add(mMove.clone().opposed());\r\n            }\r\n        }\r\n\r\n        // In theory, we should have only one item on the left.\r\n        if (this._left.length !== 1) {\r\n            return false;\r\n        }\r\n        cMove = this._left.monoms[0].coefficient.clone();\r\n        this._left.divide(cMove);\r\n        this._right.divide(cMove);\r\n        return this;\r\n    };\r\n\r\n    replaceBy = (letter: string, P: Polynom): Equation => {\r\n        this._left.replaceBy(letter, P)\r\n        this._right.replaceBy(letter, P)\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiple an equation by a fraction value.\r\n     * @param value\r\n     */\r\n    multiply = (value: unknown): Equation => {\r\n\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        // Multiply each part of the equation by the fraction\r\n        this._left.multiply(F);\r\n        this._right.multiply(F);\r\n\r\n        // The sign of the inequation must be changed.\r\n        if (this._sign !== '=' && F.sign() === -1) {\r\n            this._reverseSign();\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * divide an equation by a given value (transformed as a fraction)\r\n     *\r\n     * ```\r\n     * 8x+10=6x \\vert 2\r\n     * 4x+5=3x\r\n     * ```\r\n     *\r\n     * |>Alternatively with $3x-4$ maybe it's working ?\r\n     * $$\\frac{3x}{5}$$\r\n     *\r\n     * @param value\r\n     * @returns {Equation}\r\n     */\r\n    divide = (value: unknown): Equation => {\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        if (F.isZero()) {\r\n            return this;\r\n        } else {\r\n            return this.multiply(F.invert());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the degree of the equation\r\n     * @param letter\r\n     */\r\n    degree = (letter?: string): Fraction => {\r\n        return Fraction.max(this._left.degree(letter), this._right.degree(letter));\r\n    };\r\n\r\n    /**\r\n     * Determine if the equation contains more than one letter/variable.\r\n     */\r\n    isMultiVariable = (): boolean => {\r\n        return this._left.isMultiVariable || this._right.isMultiVariable;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        // @ts-ignore\r\n        return [...new Set([...this._left.letters(), ...this._right.letters()])];\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations helpers\r\n    // -----------------------------------------------\r\n\r\n    // -----------------------------------------------\r\n    solve = (): Equation => {\r\n        // Initialise the variables:\r\n        this._solutions = [];\r\n\r\n        // TODO: consolidate solving equations (inequations vs equations)\r\n        // TODO: work with not natural degrees ?\r\n        this._polynom = this._left.clone().subtract(this._right);\r\n\r\n        switch (this._polynom.degree().value) {\r\n            case 0:\r\n            case 1:\r\n                this._solveDegree1();\r\n                break;\r\n            case 2:\r\n                this._solveDegree2();\r\n                break;\r\n            default:\r\n                this._solveDegree3plus();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    test = (values: literalType): Boolean => {\r\n        return this.left.evaluate(values).isEqual(this.right.evaluate(values))\r\n    }\r\n\r\n    private _findSign = (equationString: string): string | false => {\r\n        let strSign: string = '';\r\n\r\n        if (equationString.includes('geq')) {\r\n            return (equationString.includes('\\\\geq')) ? '\\\\geq' : 'geq';\r\n        } else if (equationString.includes('leq')) {\r\n            return (equationString.includes('\\\\leq')) ? '\\\\leq' : 'leq';\r\n        } else if (equationString.includes('>=')) {\r\n            return '>=';\r\n        } else if (equationString.includes('=>')) {\r\n            return '=>';\r\n        } else if (equationString.includes('>')) {\r\n            return '>';\r\n        } else if (equationString.includes('<=')) {\r\n            return '<=';\r\n        } else if (equationString.includes('=<')) {\r\n            return '=<';\r\n        } else if (equationString.includes('<')) {\r\n            return '<';\r\n        } else if (equationString.includes('=')) {\r\n            return '='\r\n        }\r\n        if (strSign === '') {\r\n            console.log('Equation: parse string : sign not found');\r\n            return false;\r\n        }\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Equations solving algorithms\r\n\r\n    private _formatSign = (signStr: string): string => {\r\n        if (signStr === undefined) {\r\n            return '=';\r\n        }\r\n\r\n        if (signStr.includes('geq')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>=')) {\r\n            return '>=';\r\n        } else if (signStr.includes('=>')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>')) {\r\n            return '>';\r\n        } else if (signStr.includes('leq')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<=')) {\r\n            return '<=';\r\n        } else if (signStr.includes('=<')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<')) {\r\n            return '<';\r\n        } else {\r\n            return '='\r\n        }\r\n    };\r\n\r\n    private _reverseSign = (): Equation => {\r\n        if (this._sign === '=') {\r\n            return this;\r\n        }\r\n\r\n        if (this._sign.includes('<')) {\r\n            this._sign.replace('<', '>');\r\n            return this;\r\n        }\r\n        if (this._sign.includes('>')) {\r\n            this._sign.replace('>', '<');\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    private isGreater = (): boolean => {\r\n        if (this._sign.indexOf('>') !== -1) {\r\n            return true;\r\n        }\r\n        return this._sign.indexOf('geq') !== -1;\r\n\r\n    };\r\n\r\n    private isStrictEqual = (): boolean => {\r\n        return this._sign === '=';\r\n    };\r\n\r\n    private isAlsoEqual = (): boolean => {\r\n        if (this._sign.indexOf('=') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('geq') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('leq') !== -1) {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    private _solveDegree1 = (letter?: string): ISolution[] => {\r\n        const m1 = this._polynom.monomByDegree(1, letter).coefficient,\r\n            m0 = this._polynom.monomByDegree(0, letter).coefficient,\r\n            v = m0.clone().opposed().divide(m1);\r\n        let s: string;\r\n\r\n        if (this.isStrictEqual()) {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0) {\r\n                    this._solutions = [{\r\n                        tex: this._real,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                } else {\r\n                    this._solutions = [{\r\n                        tex: this._varnothing,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                }\r\n            } else {\r\n                this._solutions = [{\r\n                    tex: v.display,\r\n                    value: v.value,\r\n                    exact: v\r\n                }]\r\n            }\r\n        } else {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0 && this.isAlsoEqual()) {\r\n                    s = '\\\\mathbb{R}';\r\n                } else {\r\n                    if (m0.value > 0) {\r\n                        s = this.isGreater() ? this._real : this._varnothing;\r\n                    } else {\r\n                        s = !this.isGreater() ? this._real : this._varnothing;\r\n                    }\r\n                }\r\n            } else {\r\n                // Must handle the case if the m1 monom is negative.\r\n                if ((this.isGreater() && m1.sign() === 1) || (!this.isGreater() && m1.sign() === -1)) {\r\n                    s = `\\\\left${this.isAlsoEqual() ? '\\\\[' : '\\\\]'}${v};+\\\\infty\\\\right\\\\[`;\r\n                } else {\r\n                    s = `\\\\left\\\\]-\\\\infty;${v} \\\\right\\\\${this.isAlsoEqual() ? '\\\\]' : '\\\\['}`;\r\n                }\r\n            }\r\n            this._solutions = [{\r\n                tex: s,\r\n                value: NaN,\r\n                exact: false\r\n            }];\r\n        }\r\n\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree2 = (letter?: string): ISolution[] => {\r\n        let aF = this._polynom.monomByDegree(2, letter).coefficient,\r\n            bF = this._polynom.monomByDegree(1, letter).coefficient,\r\n            cF = this._polynom.monomByDegree(0, letter).coefficient,\r\n            delta: number, nthDelta: Nthroot,\r\n            lcm = Numeric.lcm(aF.denominator, bF.denominator, cF.denominator),\r\n            a = aF.multiply(lcm).value,\r\n            b = bF.multiply(lcm).value,\r\n            c = cF.multiply(lcm).value,\r\n            realX1: number, realX2: number,\r\n            sX1: string, sX2: string;\r\n\r\n        delta = b * b - 4 * a * c;\r\n\r\n        if (delta > 0) {\r\n            realX1 = (-b - Math.sqrt(delta)) / (2 * a);\r\n            realX2 = (-b + Math.sqrt(delta)) / (2 * a);\r\n\r\n            if (delta > 1.0e5) {\r\n                // The delta is too big to be parsed !\r\n                this._solutions = [\r\n                    {\r\n                        tex: ((-b - Math.sqrt(delta)) / (2 * a)).toFixed(5),\r\n                        value: realX1,\r\n                        exact: false\r\n                    },\r\n                    {\r\n                        tex: ((-b + Math.sqrt(delta)) / (2 * a)).toFixed(5),\r\n                        value: realX2,\r\n                        exact: false\r\n                    }\r\n                ]\r\n            } else {\r\n                nthDelta = new Nthroot(delta).reduce();\r\n                if (nthDelta.hasRadical()) {\r\n                    // -b +- coeff\\sqrt{radical}\r\n                    // -------------------------\r\n                    //           2a\r\n                    let gcd = Numeric.gcd(b, 2 * a, nthDelta.coefficient);\r\n                    nthDelta.coefficient = nthDelta.coefficient / gcd;\r\n\r\n                    // TODO: Can i delete the next line ?\r\n                    // let deltaC = nthDelta.coefficient, deltaR = nthDelta.radical;\r\n                    if (b !== 0) {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                {\r\n                                    tex: `${-b / gcd} - ${nthDelta.tex}`,\r\n                                    value: realX1,\r\n                                    exact: false // TODO: implement exact value with nthroot\r\n                                },\r\n                                {\r\n                                    tex: `${-b / gcd} + ${nthDelta.tex}`,\r\n                                    value: realX2,\r\n                                    exact: false\r\n                                },\r\n\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                {\r\n                                    tex: `\\\\dfrac{${-b / gcd} - ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                    value: realX1,\r\n                                    exact: false\r\n                                },\r\n                                {\r\n                                    tex: `\\\\dfrac{${-b / gcd} + ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                    value: realX2,\r\n                                    exact: false\r\n                                },\r\n                            ]\r\n                        }\r\n                    } else {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                {\r\n                                    tex: `- ${nthDelta.tex}`,\r\n                                    value: realX1,\r\n                                    exact: false\r\n                                },\r\n                                {\r\n                                    tex: `${nthDelta.tex}`,\r\n                                    value: realX2,\r\n                                    exact: false\r\n                                },\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                {\r\n                                    tex: `\\\\dfrac{- ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                    value: realX1,\r\n                                    exact: false\r\n                                },\r\n                                {\r\n                                    tex: `\\\\dfrac{${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                    value: realX2,\r\n                                    exact: false\r\n                                },\r\n                            ]\r\n                        }\r\n                    }\r\n                } else {\r\n                    // -b +- d / 2a\r\n                    const S1 = new Fraction(-b - nthDelta.coefficient, 2 * a).reduce(),\r\n                        S2 = new Fraction(-b + nthDelta.coefficient, 2 * a).reduce()\r\n                    this._solutions = [\r\n                        {\r\n                            tex: S1.dfrac,\r\n                            value: realX1,\r\n                            exact: S1\r\n                        },\r\n                        {\r\n                            tex: S2.dfrac,\r\n                            value: realX2,\r\n                            exact: S2\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n\r\n        } else if (delta === 0) {\r\n            const sol = new Fraction(-b, 2 * a).reduce()\r\n            this._solutions = [{\r\n                tex: sol.dfrac,\r\n                value: sol.value,\r\n                exact: sol\r\n            }];\r\n        } else {\r\n            this._solutions = [{\r\n                tex: this._varnothing,\r\n                value: NaN,\r\n                exact: false\r\n            }];\r\n        }\r\n\r\n\r\n        // Handle now the inequations.\r\n        if (!this.isStrictEqual()) {\r\n            if (this._solutions.length === 2) {\r\n                sX1 = (realX1 < realX2) ? this._solutions[0].tex : this._solutions[1].tex;\r\n                sX2 = (realX1 < realX2) ? this._solutions[1].tex : this._solutions[0].tex;\r\n\r\n                if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                    this._solutions = [{\r\n                        tex: `\\\\left]-\\\\infty ; ${sX1}\\\\right${this.isAlsoEqual() ? ']' : '['} \\\\cup \\\\left${this.isAlsoEqual() ? '[' : ']'}${sX2};+\\\\infty\\\\right[`,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }\r\n                    ];\r\n                } else {\r\n                    this._solutions = [{\r\n                        tex: `\\\\left${this.isAlsoEqual() ? '[' : ']'}${sX1} ; ${sX2}\\\\right${this.isAlsoEqual() ? ']' : '['}`,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }]\r\n                }\r\n            } else if (this._solutions.length === 1 && this._solutions[0].tex !== this._varnothing) {\r\n                if (!this.isAlsoEqual()) {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [{\r\n                            tex: `\\\\left]-\\\\infty ; ${this._solutions[0].tex}\\\\right[ \\\\cup \\\\left]${this._solutions[0].tex};+\\\\infty\\\\right[`,\r\n                            value: NaN,\r\n                            exact: false\r\n                        }\r\n                        ];\r\n                    } else {\r\n                        this._solutions = [{\r\n                            tex: this._varnothing,\r\n                            value: NaN,\r\n                            exact: false\r\n                        }];\r\n                    }\r\n                } else {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [{\r\n                            tex: this._real,\r\n                            value: NaN,\r\n                            exact: false\r\n                        }];\r\n                    } else {\r\n                        // this._texSolutions = [ this._texSolutions[0] ];\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.isGreater()) {\r\n                    this._solutions = [{\r\n                        tex: aF.sign() === 1 ? this._real : this._varnothing,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                } else {\r\n                    this._solutions = [{\r\n                        tex: aF.sign() === -1 ? this._real : this._varnothing,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                }\r\n            }\r\n        }\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree3plus = (): ISolution[] => {\r\n        // TODO: try to resolve equations with a degree superior than 2.\r\n        this._solutions = [{tex: 'solve x - not yet handled', value: NaN, exact: false}];  // ESLint remove system :(\r\n        return this._solutions;\r\n    };\r\n}","export * from \"./equation\"\r\nexport * from \"./linearSystem\"\r\nexport * from \"./logicalset\"\r\nexport * from \"./monom\"\r\nexport * from \"./polynom\"\r\nexport * from \"./rational\"\r\nexport * from \"./../expressions/polynomexp\"","import {Fraction} from \"../coefficients\";\r\nimport {Equation} from \"./equation\";\r\nimport {Polynom} from \"./polynom\";\r\nimport {Monom} from \"./monom\";\r\nimport {Random} from \"../random\";\r\n\r\n// TODO: Must check and rework\r\nexport class LinearSystem {\r\n    private _solutions: { [letter: string]: { value: Fraction, isReal: boolean, isVarnothing: boolean } };\r\n    private _resolutionSteps: LinearSystem[];\r\n    private _equations: Equation[];\r\n    private _letters: string[];\r\n\r\n    constructor(...equationStrings: string[]) {\r\n        this._equations = [];\r\n        this._letters = 'xy'.split('');\r\n\r\n        if (equationStrings !== undefined && equationStrings.length > 0) {\r\n            this.parse(...equationStrings);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equations(): Equation[] {\r\n        return this._equations;\r\n    }\r\n\r\n    set equations(value) {\r\n        this._equations = value;\r\n    }\r\n\r\n    get letters(): string {\r\n        return this._letters.join('')\r\n    }\r\n\r\n    set letters(value: string) {\r\n        this._letters = value.split('');\r\n    }\r\n\r\n    get isSolvable(): boolean {\r\n        let V = this.variables;\r\n\r\n        // TODO: in some case, it is possible to resolve systems if there isn't the isSame number of vars and equations\r\n        if (V.length !== this._equations.length) {\r\n            return false;\r\n        }\r\n\r\n        //TODO: Must check if two equations isn't a linear combination of the others ?\r\n\r\n        return true;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n        for (let E of this._equations) {\r\n            V = V.concat(E.variables);\r\n        }\r\n        return [...new Set(V)].sort();\r\n    }\r\n\r\n    get tex(): string {\r\n        // Build the array of values.\r\n        // Reorder\r\n        // This clone the system :!!!\r\n        //TODO: Avoid cloning this linear system\r\n        let LS = this.clone().reorder(),\r\n            letters = LS.variables,\r\n            equStr: string[],\r\n            equArray: string[] = [],\r\n            m: Monom;\r\n\r\n        // TODO: Manage tex output of linear equations\r\n        for (let equ of LS.equations) {\r\n            equStr = [];\r\n            for (let L of letters) {\r\n                m = equ.left.monomByLetter(L);\r\n\r\n                if (equStr.length === 0) {\r\n                    equStr.push(m.isZero() ? '' : m.tex);\r\n                } else {\r\n                    equStr.push(m.isZero() ? '' : ((m.coefficient.sign() === 1) ? '+' : '') + m.tex);\r\n                }\r\n            }\r\n\r\n            // Add the equal sign\r\n            equStr.push('=');\r\n\r\n            // Add the right hand part of the equation (should be only a number, because it has been reordered)\r\n            equStr.push(equ.right.tex);\r\n\r\n            // Add to the list.\r\n            equArray.push(equStr.join('&'));\r\n        }\r\n\r\n\r\n        return `\\\\left\\\\{\\\\begin{array}{${\"r\".repeat(letters.length)}cl}${equArray.join('\\\\\\\\\\ ')}\\\\end{array}\\\\right.`;\r\n        //return `\\\\left\\\\{\\\\begin{array}{rrrcl}${this._equations.map(equ => `${equ.tex}`).join('\\\\\\\\\\ \\n')}\\\\end{array}\\\\right.`;\r\n    }\r\n\r\n    get solution(): string {\r\n        let tex: string[] = [];\r\n\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n\r\n        for (let letter in this._solutions) {\r\n            if (this._solutions[letter].isReal) {\r\n                console.log(`Undetermined (letter ${letter})`);\r\n                return;\r\n            }\r\n            if (this._solutions[letter].isVarnothing) {\r\n                console.log(`Undefined (letter ${letter})`);\r\n                return;\r\n            }\r\n\r\n            tex.push(this._solutions[letter].value.dfrac);\r\n        }\r\n        return `(${tex.join(';')})`;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...equations: unknown[]): LinearSystem => {\r\n        this._equations = equations.map(value => new Equation(value));\r\n        this._findLetters();\r\n        return this;\r\n    };\r\n\r\n    setCoefficient = (...coefficients: string[]): LinearSystem => {\r\n        // Reset the equations list\r\n        this._equations = [];\r\n\r\n        let i = 0;\r\n        while (i < coefficients.length - this._letters.length) {\r\n            let left = new Polynom().parse(this._letters.join(''), ...coefficients.slice(i, i + this._letters.length)),\r\n                right = new Polynom(coefficients[i + this._letters.length].toString()),\r\n                equ = new Equation().create(left, right);\r\n            this._equations.push(equ.clone());\r\n\r\n            i = i + this._letters.length + 1;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): LinearSystem => {\r\n        return new LinearSystem().parse(...this._equations.map(equ => equ.clone()));\r\n    };\r\n\r\n    setLetters = (...letters: string[]): LinearSystem => {\r\n        this._letters = letters;\r\n        return this\r\n    }\r\n    private _findLetters = (): LinearSystem => {\r\n        // Find all letters used.\r\n        let variables = new Set();\r\n\r\n        for (let equ of this._equations) {\r\n            variables = new Set([...variables, ...equ.variables]);\r\n        }\r\n\r\n        // TODO: How to transform (Set of string) to string[]\r\n        // @ts-ignore\r\n        this._letters = [...variables];\r\n        return this;\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n    // -----------------------------------------------\r\n    generate = (...solutions: Fraction[] | number[]): LinearSystem => {\r\n        let solutionsF: Fraction[] = [];\r\n\r\n        // Convert the numbers to fractions if necessary\r\n        for (let s of solutions) {\r\n            if (typeof s === \"number\") {\r\n                solutionsF.push(new Fraction(s.toString()));\r\n            } else {\r\n                solutionsF.push(s.clone());\r\n            }\r\n        }\r\n\r\n        // Create the equations and make sure they are not linear combined.\r\n        this._equations = [];\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            this._equations.push(this._generateOneEquation(...solutionsF));\r\n        }\r\n        return this;\r\n    };\r\n    private _generateOneEquation = (...solutions: Fraction[]): Equation => {\r\n        let coeff: number[] = [], leftValue: Fraction = new Fraction().zero(),\r\n            letters: string[] = ['x', 'y', 'z', 't', 'u', 'v', 'w', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],\r\n            equString: string = '', equ: Equation;\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            coeff.push(Random.numberSym(5));\r\n            leftValue.add(solutions[i].clone().multiply(coeff[i]));\r\n            equString += `${(coeff[i] < 0) ? coeff[i] : '+' + coeff[i]}${letters[i]}`\r\n        }\r\n\r\n        // LeftValue contains the left part oof the equation - and is then the isSame as the right part.\r\n        // It might be a Fraction.\r\n\r\n        // Must check if it's not a linear combination\r\n        equ = new Equation(`${equString}=${leftValue.display}`);\r\n        if (equ.right.monoms[0].coefficient.denominator != 1) {\r\n            equ.multiply(new Fraction(equ.right.monoms[0].coefficient.denominator, 1));\r\n        }\r\n        if (this._checkIfLinerCombination(equ)) {\r\n            return equ;\r\n        } else {\r\n            return this._generateOneEquation(...solutions);\r\n        }\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    private _linearReduction(eq1: Equation, eq2: Equation, letter: string): Equation {\r\n        // TODO: handle other signs for equations ?\r\n        // Get the monom for the particular letter.\r\n        let c1 = eq1.left.monomByDegree(1, letter).coefficient.clone(),\r\n            c2 = eq2.left.monomByDegree(1, letter).coefficient.clone().opposed();\r\n\r\n        return this.mergeEquations(eq1, eq2, c2, c1);\r\n    }\r\n\r\n    mergeEquations = (eq1: Equation, eq2: Equation, factor1: unknown, factor2: unknown): Equation => {\r\n        // Set and clone the equations.\r\n\r\n        let eq1multiplied = eq1.clone().multiply(new Fraction(factor1)),\r\n            eq2multiplied = eq2.clone().multiply(new Fraction(factor2));\r\n\r\n        // Add both equations together.\r\n        eq1multiplied.left.add(eq2multiplied.left);\r\n        eq1multiplied.right.add(eq2multiplied.right);\r\n\r\n        return eq1multiplied;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Solvers algorithm\r\n    // ------------------------------------------\r\n    reorder = (): LinearSystem => {\r\n        for (let E of this._equations) {\r\n            E.reorder();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    solve = (): LinearSystem => {\r\n        // Solve it by linear\r\n        this._solutions = {};\r\n        this._resolutionSteps = [];\r\n\r\n        // Reorder all equations.\r\n        this.reorder();\r\n\r\n        // Get all variables in the linear system\r\n        let V = this.variables.sort();\r\n\r\n        for (let letter of V) {\r\n            this._solutions[letter] = this._solveOneLetter(letter, V)\r\n        }\r\n\r\n        // TODO: LinearSystem - solve: optimization and handle undetermined and undefined systems.\r\n        return this;\r\n    };\r\n\r\n    private _checkIfLinerCombination = (equ: Equation): boolean => {\r\n\r\n        return true;\r\n    };\r\n\r\n    private _solveOneLetter(letter: string, V: string[]): { value: Fraction, isReal: boolean, isVarnothing: boolean } {\r\n        // list of equations.\r\n        let LE: Equation[] = this.clone().equations,\r\n            reducedEquations: Equation[] = [];\r\n\r\n        // Reduce the equations.\r\n        // Do it as long as there is more than one step, but no more than the number of equations.\r\n        for (let L of V) {\r\n            // remove the setLetter from all equations using linear combinations\r\n            if (L === letter) {\r\n                continue;\r\n            }\r\n\r\n            // Linear reduction.\r\n            // TODO: Search for better association\r\n            for (let i = 0; i < LE.length - 1; i++) {\r\n                reducedEquations.push(this._linearReduction(LE[i], LE[i + 1], L));\r\n            }\r\n\r\n            // Keep track of each steps.\r\n            this._resolutionSteps.push(new LinearSystem().parse(...reducedEquations));\r\n\r\n            // Set the list of equations to the new version.\r\n            LE = this._resolutionSteps[this._resolutionSteps.length - 1].clone().equations;\r\n\r\n            // Reset the stack\r\n            reducedEquations = [];\r\n        }\r\n\r\n        // Solve the equations\r\n        let E = this._resolutionSteps[this._resolutionSteps.length - 1].equations[0];\r\n        E.solve();\r\n\r\n        return {\r\n            value: new Fraction(E.solutions[0].value),\r\n            isReal: E.isReal,\r\n            isVarnothing: E.isVarnothing\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Helpers\r\n    // ------------------------------------------\r\n    log = (): string => {\r\n        let str: string = '';\r\n\r\n        for (let E of this._equations) {\r\n            console.log(E.tex);\r\n            str += `${E.tex}\\\\n}`;\r\n        }\r\n\r\n        return str;\r\n    };\r\n}\r\n","/**\r\n * Polynom module contains everything necessary to handle polynoms.\r\n * @module Logicalset\r\n */\r\n\r\nimport {Shutingyard, ShutingyardMode} from '../shutingyard';\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n */\r\n    export class Logicalset {\r\n        private _rawString: string;\r\n        private _rpn: { token: string, tokenType: string }[]\r\n\r\n        /**\r\n         *\r\n         * @param {string} value (optional) Default polynom to parse on class creation\r\n         */\r\n        constructor(value: string) {\r\n            this._rawString = value\r\n            this.parse(value)\r\n            return this;\r\n        }\r\n\r\n        get isLogicalset() {\r\n            return true;\r\n        };\r\n\r\n        private parse = (value: string): Logicalset => {\r\n            // TODO: Must format the value string to convert some items...\r\n\r\n            // Parse the updated value to the shutingyard algorithm\r\n            this._rpn = new Shutingyard(ShutingyardMode.SET).parse(value).rpn;\r\n\r\n            return this;\r\n        }\r\n\r\n        evaluate(tokenSets: { [key: string]: unknown[] }, reference?: unknown[]): unknown[] {\r\n            let varStack: (Set<unknown>)[] = []\r\n\r\n            let referenceSet: Set<unknown>\r\n            if (reference === undefined) {\r\n                referenceSet = new Set()\r\n                for (let key in tokenSets) {\r\n                    referenceSet = new Set([...referenceSet, ...tokenSets[key]])\r\n                }\r\n            } else {\r\n                referenceSet = new Set(reference)\r\n            }\r\n\r\n            for (let token of this._rpn) {\r\n                if (token.tokenType === 'variable') {\r\n                    // The variable has no token - assume it's empty.\r\n                    if (tokenSets[token.token] === undefined) {\r\n                        varStack.push(new Set())\r\n                    } else {\r\n                        varStack.push(new Set(tokenSets[token.token]));\r\n                    }\r\n\r\n                } else {\r\n                    switch (token.token) {\r\n                        case '&':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                varStack.push(new Set([...first].filter(x => second.has(x))))\r\n                            }\r\n                            break\r\n                        case '|':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n                                varStack.push(new Set([...first, ...second]))\r\n                            }\r\n                            break\r\n                        case '-':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n                                varStack.push(new Set([...first].filter(x => !second.has(x))))\r\n                            }\r\n                            break\r\n                        case '!':\r\n                            if (varStack.length >= 1) {\r\n                                let first = varStack.pop()\r\n\r\n                                varStack.push(new Set([...referenceSet].filter(x => !first.has(x))))\r\n                            }\r\n                            break\r\n                    }\r\n                }\r\n            }\r\n\r\n            return [...varStack[0]].sort();\r\n        }\r\n\r\n        vennAB(): any[] {\r\n            return this.evaluate({\r\n                    A: ['A', 'AB'],\r\n                    B: ['B', 'AB']\r\n                },\r\n                ['A', 'B', 'AB', 'E']\r\n            )\r\n        }\r\n\r\n        vennABC(): any[] {\r\n            return this.evaluate({\r\n                    A: ['A', 'AB', 'AC', 'ABC'],\r\n                    B: ['B', 'AB', 'BC', 'ABC'],\r\n                    C: ['C', 'AC', 'BC', 'ABC']\r\n                },\r\n                ['A', 'B', 'C', 'AB', 'AC', 'BC', 'E']\r\n            )\r\n        }\r\n\r\n        get rpn(): { token: string, tokenType: string }[] {\r\n            return this._rpn\r\n        }\r\n\r\n        get tex(): string {\r\n            let varStack: { token: string, tokenType: string } [] = []\r\n\r\n            for (let token of this._rpn) {\r\n                if (token.tokenType === 'variable') {\r\n                    varStack.push(token);\r\n                } else {\r\n                    switch (token.token) {\r\n                        case '&':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\cap ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '|':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\cup ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '-':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\setminus ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '!':\r\n                            if (varStack.length >= 1) {\r\n                                let first = varStack.pop()\r\n                                varStack.push({token: `\\\\overline{ ${first.token} }`, tokenType: 'variable'})\r\n                            }\r\n                            break\r\n                    }\r\n                }\r\n            }\r\n\r\n            return varStack[0].token\r\n        }\r\n    }","/***\r\n * Monom class\r\n */\r\nimport {Fraction} from \"../coefficients\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Shutingyard, ShutingyardType, Token, tokenType} from \"../shutingyard\";\r\nimport {log} from \"util\";\r\n\r\nexport type literalType = {\r\n    [Key: string]: Fraction\r\n}\r\n\r\nexport class Monom {\r\n    private _coefficient: Fraction;\r\n    private _literal: literalType;\r\n\r\n    /**\r\n     * Create a Monom\r\n     * Defined as \\\\(k \\\\cdot x^{n}\\\\), where \\\\( k,n \\in \\\\mathbb{Q}\\\\).\r\n     * Examples: \\\\(3x^2\\\\) or \\\\(3/5x^2\\\\)\r\n     * @param value (optional) string The value that should be parse. Can be a Monom, a Fraction, a string or a number. If nothing is provided, it will return the trivial monom (0).\r\n     */\r\n    constructor(value?: unknown) {\r\n        this.zero();\r\n\r\n        if (value !== undefined) {\r\n            // A string is given - try to parse the value.\r\n            this.parse(value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    /**\r\n     * Get the coefficient \\\\(k\\\\) of the Monom \\\\(k\\\\cdot x^{n}\\\\)\r\n     * @returns {Fraction}\r\n     */\r\n    get coefficient(): Fraction {\r\n        return this._coefficient;\r\n    }\r\n\r\n    /**\r\n     * Set the coefficient \\\\(k\\\\) value of the monom\r\n     * @param {Fraction | number | string} F\r\n     */\r\n    set coefficient(F: Fraction | number | string) {\r\n        this._coefficient = new Fraction(F);\r\n    }\r\n\r\n    /**\r\n     * Get the literal part of \\\\(x^{n_1}y^{n_2}\\\\) as dictionary \\\\[\\\\begin{array}{ll}x&=n_1\\\\\\\\y&=n_2\\\\end{array}\\\\]\r\n     * @returns {literalType}\r\n     */\r\n    get literal(): literalType {\r\n        return this._literal;\r\n    }\r\n\r\n    /**\r\n     * Get the literal square roots of the Monom.\r\n     * TODO: remove this getter ? Is it used and is it correct ?\r\n     * @returns {literalType}\r\n     */\r\n    get literalSqrt(): literalType {\r\n        if (this.isLiteralSquare()) {\r\n            let L: literalType = {}\r\n            for (let key in this._literal) {\r\n                L[key] = this._literal[key].clone().sqrt()\r\n            }\r\n            return L;\r\n        } else {\r\n            return this._literal;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom. Must be a dictionary {x: Fraction, y: Fraction, ...}\r\n     * @param {literalType} L\r\n     */\r\n    set literal(L: literalType) {\r\n        this._literal = L;\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom from a string\r\n     * @param inputStr  String like x^2y^3\r\n     */\r\n    set literalStr(inputStr: string) {\r\n        // TODO : parse using shutingyard tree !\r\n\r\n        // Match all x^n\r\n        for (const v of [...inputStr.matchAll(/([a-z])\\^([+-]?[0-9]+)/g)]) {\r\n            // Create the default letter entry if necessary.\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = new Fraction().zero();\r\n            }\r\n\r\n            // Add the new value.\r\n            // TODO: actually, it adds only numeric value\r\n            this._literal[v[1]].add(+v[2]);\r\n        }\r\n\r\n        // Match all x\r\n        for (const v of [...inputStr.matchAll(/([a-z](?!\\^))/g)]) {\r\n            // Match all single letters\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = new Fraction().zero();\r\n            }\r\n\r\n            // Add one to the value.\r\n            this._literal[v[1]].add(1)\r\n        }\r\n    }\r\n\r\n    // Getter helpers.\r\n    /**\r\n     * Get the variables letters\r\n     */\r\n    get variables(): string[] {\r\n        let M = this.clone().clean();\r\n        return Object.keys(M.literal)\r\n    }\r\n\r\n    // Display getter\r\n    /**\r\n     * This display getter is to be used in the polynom display getter\r\n     */\r\n    get display(): string {\r\n        let L: string = '',\r\n            letters = Object.keys(this._literal).sort()\r\n        for (let letter of letters) {\r\n            if (this._literal[letter].isNotZero()) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter].isNotEqual(1)) {\r\n                    L += `^${this._literal[letter].display}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.display}`;\r\n            } else {\r\n                return '';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.display}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    get dividers(): Monom[] {\r\n        // Decompose only if the coefficient is a natural number\r\n        if (!this.coefficient.isRelative()) {\r\n            return [this.clone()]\r\n        }\r\n\r\n\r\n        // Decompose only if the power values are natural numbers.\r\n        if (this.hasFractionCoefficient()) {\r\n            return [this.clone()]\r\n        }\r\n\r\n        // Security : do not do this if greater than 10000\r\n        if (this.coefficient.numerator > 10000) {\r\n            return [this.clone()]\r\n        }\r\n\r\n\r\n        const dividers = Numeric.dividers(Math.abs(this.coefficient.numerator))\r\n\r\n        // Decompose the literals parts.\r\n        let literals: literalType[] = [];\r\n        for (let L in this.literal) {\r\n            // L is the letter.\r\n            literals = this._getLiteralDividers(literals, L)\r\n        }\r\n\r\n        const monomDividers: Monom[] = [];\r\n        if (literals.length > 0 && dividers.length > 0) {\r\n            for (let N of dividers) {\r\n                for (let L of literals) {\r\n                    let M = new Monom();\r\n                    M.coefficient = new Fraction(N)\r\n                    M.literal = L\r\n                    monomDividers.push(M)\r\n                }\r\n            }\r\n        } else if (dividers.length === 0) {\r\n            for (let L of literals) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction().one()\r\n                M.literal = L\r\n                monomDividers.push(M)\r\n            }\r\n        } else {\r\n            for (let N of dividers) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction(N)\r\n                monomDividers.push(M)\r\n            }\r\n        }\r\n\r\n        return monomDividers.length === 0 ? [new Monom().one()] : monomDividers;\r\n    }\r\n\r\n    private _getLiteralDividers(arr: literalType[], letter: string): literalType[] {\r\n        let tmpList: { [key: string]: Fraction }[] = [];\r\n\r\n        // Be default, this.literal[letter] should be a rational number.\r\n        for (let d = 0; d <= this.literal[letter].value; d++) {\r\n            if (arr.length === 0) {\r\n                let litt: literalType = {}\r\n                litt[letter] = new Fraction(d)\r\n                tmpList.push(litt)\r\n            } else {\r\n                for (let item of arr) {\r\n                    let litt: literalType = {}\r\n                    for (let currentLetter in item) {\r\n                        litt[currentLetter] = item[currentLetter]\r\n                    }\r\n                    litt[letter] = new Fraction(d)\r\n                    tmpList.push(litt)\r\n                }\r\n            }\r\n        }\r\n        return tmpList;\r\n    }\r\n\r\n    /**\r\n     * Display the monom, forcing the '+' sign to appear\r\n     */\r\n    get displayWithSign(): string {\r\n        let d: String = this.display;\r\n        return (d[0] !== '-' ? '+' : '') + d;\r\n    }\r\n\r\n    get texWithSign(): string {\r\n        if (this.coefficient.isStrictlyPositive()) {\r\n            return '+' + this.tex\r\n        }\r\n\r\n        return this.tex\r\n    }\r\n\r\n    /**\r\n     * Get the tex output of the monom\r\n     */\r\n    get tex(): string {\r\n        // TODO: display with square root !\r\n        let L: string = '',\r\n            letters = Object.keys(this._literal).sort()\r\n\r\n        for (let letter of letters) {\r\n            if (this._literal[letter].isNotZero()) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter].isNotEqual(1)) {\r\n                    L += `^{${this._literal[letter].tfrac}}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.dfrac}`;\r\n            } else {\r\n                return '0';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.dfrac}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // -----------------------------------------\r\n    /**\r\n     * Parse a string to a monom. The string may include fraction.\r\n     * @param inputStr\r\n     */\r\n    parse = (inputStr: unknown): Monom => {\r\n\r\n        if (typeof inputStr === 'string') {\r\n            this._shutingYardToReducedMonom(inputStr)\r\n        } else if (typeof inputStr === 'number') {\r\n            this._coefficient = new Fraction(inputStr)\r\n            this._literal = {}\r\n        } else if (inputStr instanceof Fraction) {\r\n            this._coefficient = inputStr.clone()\r\n            this._literal = {}\r\n        } else if (inputStr instanceof Monom) {\r\n            this._coefficient = inputStr._coefficient.clone()\r\n            this._literal = this.copyLiterals(inputStr.literal)\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    static addToken = (stack: Monom[], element: Token): void => {\r\n\r\n        let q1: Monom, q2: Monom, m: Monom, letter: string, pow: Fraction\r\n\r\n        if (element.tokenType === ShutingyardType.COEFFICIENT) {\r\n            stack.push(new Monom(new Fraction(element.token)))\r\n\r\n        } else if (element.tokenType === ShutingyardType.VARIABLE) {\r\n            let M = new Monom().one()\r\n            M.setLetter(element.token, 1)\r\n            stack.push(M.clone())\r\n\r\n        } else if (element.tokenType === ShutingyardType.OPERATION) {\r\n            switch (element.token) {\r\n                case '-':\r\n                    // this should only happen for negative powers or for negative coefficient.\r\n                    q2 = (stack.pop()) || new Monom().zero()\r\n                    q1 = (stack.pop()) || new Monom().zero()\r\n\r\n                    stack.push(q1.subtract(q2))\r\n\r\n                    break;\r\n                case '*':\r\n                    // Get the last element in the stack\r\n                    q2 = (stack.pop()) || new Monom().one()\r\n                    q1 = (stack.pop()) || new Monom().one()\r\n\r\n                    stack.push(q1.multiply(q2))\r\n                    break\r\n                case '/':\r\n                    // Get the last element in the stack\r\n                    q2 = (stack.pop()) || new Monom().one()\r\n                    q1 = (stack.pop()) || new Monom().one()\r\n\r\n                    stack.push(q1.divide(q2))\r\n                    break\r\n                case '^':\r\n                    // get the two last elements in the stack\r\n                    pow = (stack.pop().coefficient) || new Fraction().one()\r\n                    m = (stack.pop()) || new Monom().one()\r\n\r\n                    letter = m.variables[0]\r\n\r\n                    if (letter !== undefined) {\r\n                        m.setLetter(letter, pow)\r\n                    }\r\n\r\n                    stack.push(m)\r\n                    // this.multiply(m.clone())\r\n                    break\r\n            }\r\n        }\r\n    }\r\n    private _shutingYardToReducedMonom = (inputStr: string): Monom => {\r\n        // Get the RPN array of the current expression\r\n        const SY: Shutingyard = new Shutingyard().parse(inputStr);\r\n        const rpn: { token: string, tokenType: string }[] = SY.rpn;\r\n\r\n        let stack: Monom[] = [], m, pow, letter, q1, q2\r\n\r\n        if (rpn.length === 0) {\r\n            this.zero()\r\n            return this\r\n        } else if (rpn.length === 1) {\r\n            const element = rpn[0]\r\n\r\n            this.one()\r\n            if (element.tokenType === 'coefficient') {\r\n                this.coefficient = new Fraction(element.token)\r\n            } else if (element.tokenType === 'variable') {\r\n                this.setLetter(element.token, 1)\r\n            }\r\n            return this\r\n        } else {\r\n            // Reset the monom\r\n            for (const element of rpn) {\r\n                Monom.addToken(stack, element)\r\n            }\r\n        }\r\n\r\n        this.one()\r\n        this.multiply(stack[0])\r\n        return this\r\n    }\r\n    /**\r\n     * Clone the current Monom.\r\n     */\r\n    clone = (): Monom => {\r\n        let F: Monom = new Monom();\r\n\r\n        F.coefficient = this._coefficient.clone();\r\n\r\n        // Copy the literal parts.\r\n        for (let k in this._literal) {\r\n            F.setLetter(k, this._literal[k].clone());\r\n        }\r\n        return F;\r\n    };\r\n\r\n    copyLiterals = (literal: literalType): literalType => {\r\n        let L: literalType = {}\r\n\r\n        for (let k in literal) {\r\n            L[k] = literal[k].clone()\r\n        }\r\n        return L\r\n    }\r\n\r\n    makeSame = (M: Monom): Monom => {\r\n        // Copy the literal parts.\r\n        for (let k in M._literal) {\r\n            this.setLetter(k, M._literal[k].clone());\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Create a zero value monom\r\n     */\r\n    zero = (): Monom => {\r\n        this._coefficient = new Fraction().zero();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Create a one value monom\r\n     */\r\n    one = (): Monom => {\r\n        this._coefficient = new Fraction().one();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Clean the monom by removing each letters with a power of zero.\r\n     */\r\n    clean = (): Monom => {\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter].isZero()) {\r\n                delete this._literal[letter];\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    reduce = (): Monom => {\r\n        this.clean()\r\n        this.coefficient.reduce()\r\n        return this\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Get the opposed\r\n     * Returns a monom.\r\n     */\r\n    opposed = (): Monom => {\r\n        this._coefficient.opposed();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Add all similar monoms. If they aren't similar, they are simply skipped.\r\n     * @param M (Monom[]) The monoms to add.\r\n     */\r\n    add = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                if (this.isZero()) {\r\n                    this.makeSame(m)\r\n                }\r\n                this._coefficient.add(m.coefficient);\r\n            } else {\r\n                console.log('Add: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Subtract multiple monoms\r\n     * @param M (Monom[]) The monoms to subtract\r\n     */\r\n    subtract = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                if (this.isZero()) {\r\n                    this.makeSame(m)\r\n                }\r\n                this._coefficient.add(m.clone().coefficient.opposed());\r\n            } else {\r\n                console.log('Subtract: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiple multiple monoms to the current monom\r\n     * @param M (Monom[]) The monoms to multiply to.\r\n     */\r\n    multiply = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            // Multiply the coefficient.\r\n            this._coefficient.multiply(m.coefficient);\r\n\r\n            // Multiply the literal parts.\r\n            for (let letter in m.literal) {\r\n                if (this._literal[letter] === undefined) {\r\n                    this._literal[letter] = m.literal[letter].clone()\r\n                } else {\r\n                    this._literal[letter].add(m.literal[letter])\r\n                }\r\n\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiplyByNumber = (F: Fraction | number): Monom => {\r\n        this._coefficient.multiply(F);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divide the current monoms by multiple monoms\r\n     * @param M (Monom[])\r\n     */\r\n    divide = (...M: Monom[]): Monom => {\r\n        // Depending on the given value, choose the current item\r\n        for (let v of M) {\r\n            // Divide the coefficient\r\n            this._coefficient.divide(v.coefficient);\r\n\r\n            // Subtract the power values\r\n            for (let letter in v.literal) {\r\n                this._literal[letter] = (this._literal[letter] === undefined) ? v.literal[letter].clone().opposed() : this._literal[letter].subtract(v.literal[letter])\r\n\r\n                // If the power of a particular setLetter is zero, delete it from the literal part..\r\n                if (this._literal[letter].isZero()) {\r\n                    delete this._literal[letter];\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the pow of a monom.\r\n     * @param nb (number) : Mathematical pow\r\n     */\r\n    pow = (nb: number|Fraction): Monom => {\r\n        this._coefficient.pow(nb);\r\n        for (let letter in this._literal) {\r\n            this._literal[letter].multiply(nb)\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the nth-root of the monom\r\n     * @param p\r\n     */\r\n    root = (p: number): Monom => {\r\n        // TODO: determiner the nth root of a monom\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Return the square root of a monom\r\n     */\r\n    sqrt = (): Monom => {\r\n        if (this.isSquare()) {\r\n            this._coefficient.sqrt();\r\n            for (let letter in this._literal) {\r\n                this._literal[letter].clone().divide(2)\r\n            }\r\n        }\r\n        return this.root(2);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    compare = (M: Monom, sign?: string): boolean => {\r\n        // TODO: Build the compare systems.\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // To be equal, they must be the isSame\r\n                if (!this.compare(M, 'same')) {\r\n                    return false;\r\n                }\r\n\r\n                // The literal parts are the isSame. The coefficient must be equal\r\n                return this._coefficient.isEqual(M.coefficient);\r\n            case 'same':\r\n                // Get the list of all variables from both monoms.\r\n                let M1: string[] = this.variables,\r\n                    M2: string[] = M.variables,\r\n                    K: string[] = M1.concat(M2.filter((item) => M1.indexOf(item) < 0));\r\n\r\n                if(M1.length===0 && M2.length===0){return true}\r\n                // To compare, both must be different than zero.\r\n                if (!this.isZero() && !M.isZero()) {\r\n                    for (let key of K) {\r\n                        // The setLetter is not available in one of the monom\r\n                        if (this._literal[key] === undefined || M.literal[key] === undefined) {\r\n                            return false;\r\n                        }\r\n                        // The setLetter does not have the isSame power in each monoms.\r\n                        if (!this._literal[key].isEqual(M.literal[key])) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // All are positive check - the monoms are the sames.\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is null\r\n     */\r\n    isZero(): boolean {\r\n        return this._coefficient.value === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is one\r\n     */\r\n    isOne(): boolean {\r\n        return this._coefficient.value === 1 && this.variables.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if two monoms are equals\r\n     * @param M\r\n     */\r\n    isEqual = (M: Monom): boolean => {\r\n        return this.compare(M, '=');\r\n    };\r\n\r\n    /**\r\n     * Determine if two monoms are similar\r\n     * @param M\r\n     */\r\n    isSameAs = (M: Monom): boolean => {\r\n        return this.compare(M, 'same');\r\n    };\r\n\r\n    isSquare = (): boolean => {\r\n        if (!this.coefficient.isSquare()) {\r\n            return false;\r\n        }\r\n        return this.isLiteralSquare();\r\n    }\r\n\r\n    isLiteralSquare = (): boolean => {\r\n        for (let letter in this.literal) {\r\n            // A literal square must have a natural power\r\n            if (this.literal[letter].isRational()) {\r\n                return false\r\n            }\r\n\r\n            // The natural power must be be even\r\n            if (this.literal[letter].isEven()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    hasFractionCoefficient = (): boolean => {\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter].isRational()) {\r\n                return true\r\n            }\r\n        }\r\n\r\n        return false\r\n    }\r\n    // ------------------------------------------\r\n    // Misc monoms functions\r\n    // -------------------------------------\r\n    /**\r\n     * Determine if a monom contains a setLetter in it's literal part\r\n     * @param letter\r\n     */\r\n    hasLetter = (letter?: string): boolean => {\r\n        // The letter was not found\r\n        if (this._literal[letter === undefined ? 'x' : letter] === undefined) {\r\n            return false\r\n        }\r\n\r\n        // The letter is found and is not zero !\r\n        return this._literal[letter === undefined ? 'x' : letter].isNotZero();\r\n    };\r\n\r\n    /**\r\n     * Set the power of a particular setLetter\r\n     * @param letter (string) Letter to change\r\n     * @param pow (number) Power of the setLetter (must be positive integer.\r\n     */\r\n    setLetter = (letter: string, pow: Fraction | number): void => {\r\n        if (pow instanceof Fraction) {\r\n            // Set the power of the letter to zero => remove it\r\n            if (this.hasLetter(letter) && pow.isZero()) {\r\n                delete this._literal[letter]\r\n            }\r\n\r\n            this._literal[letter] = pow.clone()\r\n        } else {\r\n            this.setLetter(letter, new Fraction(pow))\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the degree of a monom. If no setLetter is given, the result will be the global degree.\r\n     * @param letter (string) Letter to get to degree (power)\r\n     */\r\n    degree = (letter?: string): Fraction => {\r\n        if (this.variables.length === 0) {\r\n            return new Fraction().zero();\r\n        }\r\n        if (letter === undefined) {\r\n            // Not setLetter given -> we get the global monom degree (sum of all the letters).\r\n            return Object.values(this._literal).reduce((t, n) => t.clone().add(n));\r\n        } else {\r\n            // A setLetter is given -> get the corresponding power.\r\n            return this._literal[letter] === undefined ? new Fraction().zero() : this._literal[letter].clone();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Evaluate a monom. Each setLetter must be assigned to a Fraction.\r\n     * @param values    Dictionary of <setLetter: Fraction>\r\n     */\r\n    evaluate = (values: literalType | Fraction | number): Fraction => {\r\n        let r = this.coefficient.clone();\r\n\r\n        if (typeof values === 'number' || values instanceof Fraction) {\r\n            let tmpValues: literalType = {}\r\n            tmpValues[this.variables[0]] = new Fraction(values)\r\n            return this.evaluate(tmpValues);\r\n        }\r\n\r\n        if (typeof values === 'object') {\r\n            for (let L in this._literal) {\r\n                if (values[L] === undefined) {\r\n                    return new Fraction().zero();\r\n                }\r\n\r\n                let value = new Fraction(values[L])\r\n\r\n                r.multiply(value.pow(this._literal[L]))\r\n            }\r\n        }\r\n\r\n        return r;\r\n    };\r\n\r\n    /**\r\n     * Derivative the monom\r\n     * @param letter\r\n     */\r\n    derivative = (letter?: string): Monom => {\r\n        // No setLetter given - assume it's the setLetter 'x'\r\n        if (letter === undefined) {\r\n            letter = 'x';\r\n        }\r\n\r\n        if (this.hasLetter(letter)) {\r\n            let d = this._literal[letter].clone(),\r\n                dM = this.clone();\r\n\r\n            // Subtract one to the degree.\r\n            dM._literal[letter].subtract(1)\r\n\r\n            // Multiply the coefficient by the previous degree\r\n            dM._coefficient.multiply(new Fraction(d.clone()));\r\n            return dM;\r\n        } else {\r\n            return new Monom().zero();\r\n        }\r\n    };\r\n\r\n    primitive = (letter?: string): Monom => {\r\n        // TODO: derivative including the ln value => implies creating different monom system ?\r\n        if (letter === undefined) {\r\n            letter = 'x'\r\n        }\r\n\r\n        // Zero monom\r\n        let M = this.clone(), degree\r\n\r\n        if (M.hasLetter(letter)) {\r\n            degree = M.degree(letter).clone().add(1)\r\n            M.coefficient = M.coefficient.clone().divide(degree)\r\n            M.setLetter(letter, degree)\r\n        } else {\r\n            // There is no letter.\r\n\r\n            // The coefficient might be zero (=> x) or a number a (=> ax)\r\n            if (M.coefficient.isZero()) {\r\n                M.coefficient = new Fraction().one()\r\n            }\r\n            M.setLetter(letter, 1)\r\n        }\r\n\r\n        return M\r\n    }\r\n    // ----------------------------------------\r\n    // Static functions\r\n    // ----------------------------------------\r\n\r\n    /**\r\n     * Get the least common multiple of monoms\r\n     * @param monoms    Array of monoms\r\n     */\r\n    static lcm = (...monoms: Monom[]): Monom => {\r\n        // All the monoms must be with natural powers...\r\n        for (let m of monoms) {\r\n            if (m.hasFractionCoefficient()) {\r\n                return new Monom().zero()\r\n            }\r\n        }\r\n\r\n\r\n        let M = new Monom(),\r\n            coeffN: number[] = monoms.map(value => value.coefficient.numerator),\r\n            coeffD: number[] = monoms.map(value => value.coefficient.denominator),\r\n            n = Numeric.gcd(...coeffN),\r\n            d = Numeric.lcm(...coeffD);\r\n\r\n        // Get the coefficient.\r\n        M.coefficient = new Fraction(n, d).reduce();\r\n\r\n        // Set the literal parts - go through each monoms literal parts and get only the lowest degree of each letters.\r\n        for (let m of monoms) {\r\n            // Remove the inexistant letters from the resulting monom\r\n            for (let letter in M.literal) {\r\n                if (!(letter in m.literal)) {\r\n                    M.literal[letter].zero();\r\n                }\r\n            }\r\n            for (let letter in m.literal) {\r\n                if (M.literal[letter] === undefined && m.literal[letter].isStrictlyPositive()) {\r\n                    M.literal[letter] = m.literal[letter].clone();\r\n                } else {\r\n                    M.literal[letter] = new Fraction(Math.min(m.literal[letter].value, M.literal[letter].value))\r\n                }\r\n            }\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n    /**\r\n     * Multiply two monoms and return a NEW monom.\r\n     * @param monoms\r\n     */\r\n    static xmultiply = (...monoms: Monom[]): Monom => {\r\n        let M = new Monom().one();\r\n\r\n        for (let m of monoms) {\r\n            M.multiply(m);\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Determine if multiple monoms are similar\r\n     * @param M\r\n     */\r\n    areSameAs = (...M: Monom[]): boolean => {\r\n        let result: boolean = true;\r\n\r\n        // Check all monoms if they are the isSame as the \"this\" one.\r\n        for (let i = 0; i < M.length; i++) {\r\n            if (!this.isSameAs(M[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All check passed -> all the monoms are similar.\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Determine if multiple monoms are equals\r\n     * @param M\r\n     */\r\n    areEquals = (...M: Monom[]): boolean => {\r\n        // They are not similar.\r\n        if (!this.areSameAs(...M)) {\r\n            return false;\r\n        }\r\n\r\n        // Check all coefficient. They must be equals.\r\n        for (let m of M) {\r\n            if (!this._coefficient.isEqual(m.coefficient)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All checks passed.\r\n        return true;\r\n    };\r\n\r\n}\r\n","/**\r\n * Polynom module contains everything necessary to handle polynoms.*\r\n */\r\n\r\nimport {literalType, Monom} from './monom';\r\nimport {Shutingyard, ShutingyardType, Token} from '../shutingyard';\r\nimport {Numeric} from '../numeric';\r\nimport {Fraction} from \"../coefficients\";\r\nimport {log} from \"util\";\r\n\r\nexport type PolynomParsingType = string|Polynom|number|Fraction|Monom\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n * ```\r\n * let P = new Polynom('3x-4')\r\n * ```\r\n */\r\nexport class Polynom {\r\n    private _rawString: string;\r\n\r\n    /**\r\n     *\r\n     * @param {string} polynomString (optional) Default polynom to parse on class creation\r\n     * @param values\r\n     */\r\n    constructor(polynomString?: PolynomParsingType, ...values: unknown[]) {\r\n        this._monoms = [];\r\n        this._factors = [];\r\n        if (polynomString !== undefined) {\r\n            this.parse(polynomString, ...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    private _monoms: Monom[];\r\n\r\n    // ------------------------------------------\r\n    get monoms() {\r\n        return this._monoms;\r\n    }\r\n\r\n    set monoms(M: Monom[]) {\r\n        this._monoms = M;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n\r\n    private _factors: Polynom[];\r\n\r\n    get factors(): Polynom[] {\r\n        return this._factors;\r\n    }\r\n\r\n    set factors(value: Polynom[]) {\r\n        this._factors = value;\r\n    }\r\n\r\n    private _texString: string;\r\n\r\n    get texString(): string {\r\n        return this._texString;\r\n    }\r\n\r\n    get texFactors(): string {\r\n        this.factorize()\r\n\r\n        let tex = ''\r\n        for (let f of this.factors) {\r\n            if (f.monoms.length > 1) {\r\n                tex += `(${f.tex})`\r\n            } else {\r\n                tex = f.tex + tex;\r\n            }\r\n        }\r\n        return tex;\r\n    }\r\n\r\n    get length() {\r\n        // TODO: Must reduce the monoms list to remove the zero coefficient.\r\n        return this._monoms.length;\r\n    }\r\n\r\n    get display(): string {\r\n        return this.genDisplay();\r\n    }\r\n\r\n    get raw(): string {\r\n        return this._rawString\r\n    }\r\n\r\n    get tex(): string {\r\n        return this.genDisplay('tex');\r\n    }\r\n\r\n    get isMultiVariable(): boolean {\r\n        const B = false;\r\n        for (const m of this._monoms) {\r\n            if (m.variables.length > 1) {\r\n                return true;\r\n            }\r\n        }\r\n        return B;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            V = V.concat(m.variables);\r\n        }\r\n\r\n        // Remove duplicates.\r\n        V = [...new Set(V)];\r\n\r\n        return V;\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse a string to a polynom.\r\n     * @param inputStr\r\n     * @param values: as string, numbers or fractions\r\n     */\r\n    parse = (inputStr: PolynomParsingType, ...values: unknown[]): Polynom => {\r\n        // Reset the main variables.\r\n        this._monoms = []\r\n        this._factors = []\r\n\r\n        if(typeof inputStr === 'string') {\r\n            return this._parseString(inputStr, ...values)\r\n        }else if(typeof inputStr === 'number' || inputStr instanceof Fraction || inputStr instanceof Monom){\r\n            this._monoms.push(new Monom(inputStr))\r\n        }else if(inputStr instanceof Polynom){\r\n            for(const m of inputStr.monoms){\r\n                this._monoms.push(m.clone())\r\n            }\r\n        }\r\n\r\n        return this\r\n    };\r\n\r\n    private _parseString(inputStr: string, ...values:unknown[]): Polynom{\r\n        if (values === undefined || values.length === 0) {\r\n            inputStr = '' + inputStr;\r\n            this._rawString = inputStr;\r\n\r\n            // Parse the polynom using the shutting yard algorithm\r\n            if (inputStr !== '' && !isNaN(Number(inputStr))) {\r\n                this.empty();\r\n                // It's a simple number.\r\n                let m = new Monom(inputStr);\r\n                // m.coefficient = new Fraction(inputStr);\r\n                // m.literalStr = '';\r\n                this.add(m);\r\n                return this;\r\n            }\r\n\r\n            // Parse the string.\r\n            return this.shutingYardToReducedPolynom(inputStr);\r\n        } else if (/^[a-z]/.test(inputStr)) {\r\n            // We assume the inputStr contains only letters.\r\n            this.empty();\r\n\r\n            let fractions = values.map(x => new Fraction(x));\r\n            // Multiple setLetter version\r\n            if (inputStr.length > 1) {\r\n                // TODO: check that the number of values given correspond to the letters (+1 eventually)\r\n                let letters = inputStr.split(''),\r\n                    i = 0;\r\n                for (let F of fractions) {\r\n                    let m = new Monom();\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = letters[i] || '';\r\n                    this.add(m);\r\n                    i++;\r\n                }\r\n            }\r\n            // Single setLetter version\r\n            else {\r\n                let n = fractions.length - 1;\r\n                for (let F of fractions) {\r\n                    let m = new Monom()\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = `${inputStr}^${n}`\r\n                    this.add(m);\r\n                    n--;\r\n                }\r\n            }\r\n            return this;\r\n        } else {\r\n            return this.zero();\r\n        }\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n\r\n    /**\r\n     * Clone the polynom\r\n     */\r\n    clone = (): Polynom => {\r\n        const P = new Polynom();\r\n        const M: Monom[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            M.push(m.clone());\r\n        }\r\n\r\n        P.monoms = M;\r\n        return P;\r\n    };\r\n\r\n    /**\r\n     * Set the polynom to zero.\r\n     * @returns {this}\r\n     */\r\n    zero = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().zero());\r\n        this._rawString = '0';\r\n        return this;\r\n    };\r\n\r\n    one = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().one());\r\n        this._rawString = '1';\r\n        return this;\r\n    }\r\n\r\n    empty = (): Polynom => {\r\n        this._monoms = [];\r\n        this._rawString = '';\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    opposed = (): Polynom => {\r\n        this._monoms = this._monoms.map(m => m.opposed());\r\n        return this;\r\n    };\r\n\r\n    add = (...values: unknown[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value instanceof Polynom) {\r\n                this._monoms = this._monoms.concat(value.monoms);\r\n            } else if (value instanceof Monom) {\r\n                this._monoms.push(value.clone());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()));\r\n            } else {\r\n                this._monoms.push(new Monom(value));\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    // // -----------------------------------------------\r\n    // // Polynom generators and randomizers\r\n    // // -----------------------------------------------\r\n    // random(config?: randomPolynomConfig) {\r\n    //     return Random.polynom(config);\r\n    // }\r\n    //\r\n    // private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n    //     degree: 2,\r\n    //     unit: true,\r\n    //     fractions: false,\r\n    //     factorable: false,\r\n    //     letters: 'x',\r\n    //     allowNullMonom: false,\r\n    //     numberOfMonoms: false\r\n    // };\r\n    // get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n    //     return this._randomizeDefaults;\r\n    // }\r\n    //\r\n    // set randomizeDefaults(value) {\r\n    //     this._randomizeDefaults = value;\r\n    // }\r\n    //\r\n    // randomize = (config: { [key: string]: number | string | boolean }): Polynom => {\r\n    //     let P = new Polynom();\r\n    //\r\n    //     // Check the config file and use the default values.\r\n    //     if (config === undefined) {\r\n    //         config = {};\r\n    //     }\r\n    //     for (let k in this._randomizeDefaults) {\r\n    //         if (config[k] === undefined) {\r\n    //             config[k] = this._randomizeDefaults[k];\r\n    //         }\r\n    //     }\r\n    //\r\n    //     // TODO: Build a more robust randomize function\r\n    //     return P;\r\n    // }\r\n    //\r\n    // rndFactorable = (degree: number = 2, unit: boolean | number = false, letters: string = 'x'): Polynom => {\r\n    //     // TODO: Make rndFactorable polynom generator more user friendly\r\n    //     this._factors = [];\r\n    //     for (let i = 0; i < degree; i++) {\r\n    //         let factorUnit = unit === true || i >= unit,\r\n    //             p = Random.polynom({\r\n    //                 degree: 1,\r\n    //                 unit: factorUnit,\r\n    //                 fraction: false,\r\n    //                 letters\r\n    //             });\r\n    //         this._factors.push(p);\r\n    //     }\r\n    //\r\n    //     this.empty().monoms = this._factors[0].monoms;\r\n    //     for (let i = 1; i < this._factors.length; i++) {\r\n    //         this.multiply(this._factors[i]);\r\n    //     }\r\n    //     return this;\r\n    // };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n\r\n    subtract = (...values: unknown[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value instanceof Polynom) {\r\n                this._monoms = this._monoms.concat(value.clone().opposed().monoms);\r\n            } else if (value instanceof Monom) {\r\n                this._monoms.push(value.clone().opposed());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()).opposed());\r\n            } else {\r\n                this._monoms.push(new Monom(value).opposed());\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    multiply = (value: unknown): Polynom => {\r\n        if (value instanceof Polynom) {\r\n            return this.multiplyByPolynom(value);\r\n        } else if (value instanceof Fraction) {\r\n            return this.multiplyByFraction(value);\r\n        } else if (value instanceof Monom) {\r\n            return this.multiplyByMonom(value);\r\n        } else if (Number.isSafeInteger(value) && typeof value === 'number') {\r\n            return this.multiplyByInteger(value);\r\n        }\r\n\r\n        // Something went wrong...\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divide the current polynom by another polynom.\r\n     * @param P\r\n     * returns {quotient: Polynom, reminder: Polynom}\r\n     */\r\n    euclidian = (P: Polynom): { quotient: Polynom, reminder: Polynom } => {\r\n        const letter: string = P.variables[0];\r\n        const quotient: Polynom = new Polynom().zero();\r\n        const reminder: Polynom = this.clone().reorder(letter);\r\n\r\n        // There is no variable !\r\n        if (P.variables.length === 0) {\r\n            return {quotient, reminder}\r\n        }\r\n\r\n        // Get at least a letter\r\n\r\n        const maxMP: Monom = P.monomByDegree(undefined, letter);\r\n        const degreeP: Fraction = P.degree(letter);\r\n\r\n        let newM: Monom;\r\n\r\n        // Make the euclidian division of the two polynoms.\r\n        let MaxIteration = this.degree(letter).clone().multiply(2);\r\n        while (reminder.degree(letter).geq(degreeP) && MaxIteration.isPositive()) {\r\n            MaxIteration.subtract(1)\r\n\r\n            // Get the greatest monom divided by the max monom of the divider\r\n            newM = reminder.monomByDegree(undefined, letter).clone().divide(maxMP);\r\n\r\n            if (newM.isZero()) {\r\n                break;\r\n            }\r\n\r\n            // Get the new quotient and reminder.\r\n            quotient.add(newM);\r\n            reminder.subtract(P.clone().multiply(newM));\r\n        }\r\n\r\n        quotient.reduce()\r\n        reminder.reduce()\r\n        return {quotient, reminder};\r\n    };\r\n\r\n    divide = (value: unknown): Polynom => {\r\n        if (value instanceof Fraction) {\r\n            return this.divideByFraction(value);\r\n        } else if (typeof value === 'number' && Number.isSafeInteger(value)) {\r\n            return this.divideByInteger(value);\r\n        }\r\n\r\n    }\r\n\r\n    pow = (nb: number): Polynom => {\r\n        if (!Number.isSafeInteger(nb)) {\r\n            return this.zero();\r\n        }\r\n        if (nb < 0) {\r\n            return this.zero();\r\n        }\r\n        if (nb === 0) {\r\n            return new Polynom();\r\n        }\r\n\r\n        const P = this.clone();\r\n        for (let i = 1; i < nb; i++) {\r\n            this.multiply(P);\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param P\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (P: Polynom, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '='\r\n        }\r\n\r\n        // Create clone version to reduce them without altering the original polynoms.\r\n        const cP1 = this.clone().reduce().reorder();\r\n        const cP2 = P.clone().reduce().reorder();\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree().isNotEqual(cP2.degree())) {\r\n                    return false;\r\n                }\r\n\r\n                // Check if the coefficients are the isSame.\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isEqual(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            case 'same':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree() !== cP2.degree()) {\r\n                    return false;\r\n                }\r\n\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isSameAs(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    isZero(): boolean {\r\n        return (this._monoms.length === 1 && this._monoms[0].coefficient.isZero()) || this._monoms.length === 0;\r\n    }\r\n\r\n    isOne(): boolean {\r\n        return this._monoms.length === 1 && this._monoms[0].coefficient.isOne();\r\n    }\r\n\r\n    isEqual = (P: Polynom): boolean => {\r\n        return this.compare(P, '=');\r\n    };\r\n\r\n    isSameAs = (P: Polynom): boolean => {\r\n        return this.compare(P, 'same');\r\n    };\r\n\r\n    isOpposedAt = (P: Polynom): boolean => {\r\n        return this.compare(P.clone().opposed(), '=');\r\n    };\r\n\r\n    isFactorized = (polynomString: string): boolean => {\r\n        let P;\r\n\r\n        // Check if polynom is complete...\r\n        if (polynomString.match(/\\(/g).length !== polynomString.match(/\\)/g).length) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check if the provided (string) version is fully factorized.\r\n        // Run a regex on the string.\r\n        let polynomStringNormalized = polynomString.replaceAll('*', ''),\r\n            polynomStringReduced = '' + polynomStringNormalized,\r\n            factors: string[] = [];\r\n\r\n        for (let x of polynomStringNormalized.matchAll(/\\(([a-z0-9+\\-]+)\\)(\\^[0-9]*)?/g)) {\r\n            if (x[2] !== undefined) {\r\n                for (let i = 0; i < +x[2].substr(1); i++) {\r\n                    factors.push(x[1])\r\n                }\r\n            } else {\r\n                factors.push(x[1]);\r\n            }\r\n            polynomStringReduced = polynomStringReduced.replaceAll(x[0], '');\r\n        }\r\n        if (polynomStringReduced !== '') {\r\n            factors.push(polynomStringReduced);\r\n        }\r\n        let polyFactors = factors.map(x => new Polynom(x));\r\n\r\n        // Factorize the current polynom.\r\n        this.factorize();\r\n\r\n        // Compare the given factors with the generated factors\r\n        let sign = 1;\r\n        for (let f of this.factors) {\r\n            for (let i = 0; i < polyFactors.length; i++) {\r\n                if (f.isEqual(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    break;\r\n                } else if (f.isOpposedAt(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    sign = -sign;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // The polyfactors must be empty and the cumulative opposite factors must be 1.\r\n        return (polyFactors.length === 0 && sign === 1);\r\n    }\r\n\r\n    isDeveloped = (polynomString: string): Boolean => {\r\n        let P: Polynom;\r\n\r\n        // There is at least one parenthese - it is not developed.\r\n        if (polynomString.match(/\\(/g).length + polynomString.match(/\\)/g).length) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            // Build the polynom\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check that everything is completely developed. Actually, there are no parentheses... so it is fully developed\r\n\r\n        // maybe it wasn't reduced and not ordered...\r\n        // compare polynom string.\r\n\r\n        // normalize the string\r\n        let polynomStringNormalized = polynomString.replaceAll('[*\\s]', '')\r\n\r\n        // Determine if it's the exact same string.\r\n        // TODO: Maybe it's enough to just make this test !\r\n        return polynomStringNormalized === P.reduce().reorder().display\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n\r\n    // -------------------------------------\r\n    reduce = (): Polynom => {\r\n        for (let i = 0; i < this._monoms.length; i++) {\r\n            for (let j = i + 1; j < this._monoms.length; j++) {\r\n                if (this._monoms[i].isSameAs(this.monoms[j])) {\r\n                    this._monoms[i].add(this.monoms[j]);\r\n                    this._monoms.splice(j, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Remove all null monoms\r\n        this._monoms = this._monoms.filter((m) => {\r\n            return m.coefficient.value !== 0\r\n        });\r\n\r\n        // Reduce all monoms coefficient.\r\n        for (const m of this._monoms) {\r\n            m.coefficient.reduce();\r\n        }\r\n\r\n        if (this.length === 0) {\r\n            return new Polynom().zero();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    reorder = (letter: string = 'x'): Polynom => {\r\n        // TODO: Must handle multiple setLetter reorder system\r\n        this._monoms.sort(function (a, b) {\r\n            return b.degree(letter).clone().subtract(a.degree(letter)).value\r\n        });\r\n        return this.reduce();\r\n    };\r\n\r\n    degree = (letter?: string): Fraction => {\r\n        let d: Fraction = new Fraction().zero();\r\n        for (const m of this._monoms) {\r\n            d = Fraction.max(m.degree(letter).value, d);\r\n        }\r\n        return d;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        let L: string[] = [], S = new Set();\r\n\r\n        for (let m of this._monoms) {\r\n            S = new Set([...S, ...m.variables]);\r\n        }\r\n\r\n        // @ts-ignore\r\n        return [...S];\r\n    }\r\n\r\n    /**\r\n     * Replace a variable (letter) by a polynom.\r\n     * @param letter\r\n     * @param P\r\n     */\r\n    replaceBy = (letter: string, P: Polynom): Polynom => {\r\n        let pow: Fraction;\r\n        const resultPolynom: Polynom = new Polynom().zero();\r\n\r\n        for (const m of this.monoms) {\r\n            if (m.literal[letter] === undefined || m.literal[letter].isZero()) {\r\n                resultPolynom.add(m.clone());\r\n            } else {\r\n                // We have found a setLetter.\r\n                // Get the power and reset it.\r\n                pow = m.literal[letter].clone();\r\n                delete m.literal[letter];\r\n\r\n                // TODO: replaceBy works only with positive and natural pow\r\n                resultPolynom.add(P.clone().pow(Math.abs(pow.numerator)).multiply(m));\r\n            }\r\n        }\r\n\r\n        this._monoms = resultPolynom.reduce().reorder().monoms;\r\n        return this;\r\n    };\r\n\r\n    // Evaluate a polynom.\r\n    evaluate = (values: literalType | Fraction | number): Fraction => {\r\n        const r = new Fraction().zero();\r\n\r\n        this._monoms.forEach(monom => {\r\n            //console.log('Evaluate polynom: ', monom.display, values, monom.evaluate(values).display);\r\n            r.add(monom.evaluate(values));\r\n        });\r\n\r\n        return r;\r\n    };\r\n\r\n    derivative = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.derivative(letter));\r\n        }\r\n        return dP;\r\n\r\n    }\r\n\r\n    primitive = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.primitive(letter))\r\n        }\r\n        return dP\r\n    }\r\n    // ------------------------------------------\r\n    // Misc polynoms functions\r\n\r\n    integrate = (a: Fraction | number, b: Fraction | number, letter?: string): Fraction => {\r\n        const primitive = this.primitive(letter)\r\n\r\n        if (letter === undefined) {\r\n            letter = 'x'\r\n        }\r\n\r\n        let valuesA: literalType = {},\r\n            valuesB: literalType = {}\r\n        valuesA[letter] = new Fraction(a);\r\n        valuesB[letter] = new Fraction(b);\r\n\r\n        return primitive.evaluate(valuesB).subtract(primitive.evaluate(valuesA))\r\n    }\r\n\r\n    // -------------------------------------\r\n    /**\r\n     * Factorize a polynom and store the best results in factors.\r\n     * @param maxValue Defines the greatest value to search to (default is 20).\r\n     */\r\n    factorize = (letter?: string): Polynom[] => {\r\n        let factors: Polynom[] = [];\r\n\r\n        // Extract the common monom\r\n        let P = this.clone().reorder(),\r\n            M = P.commonMonom(),\r\n            tempPolynom: Polynom\r\n\r\n        // It has a common monom.\r\n        if (!M.isOne()) {\r\n            tempPolynom = new Polynom()\r\n            tempPolynom.monoms = [M]\r\n            factors = [tempPolynom.clone()]\r\n            P = P.euclidian(tempPolynom).quotient;\r\n        }\r\n\r\n        let securityLoop = P.degree().clone().multiply(2).value\r\n        // securityLoop = 0\r\n\r\n        while (securityLoop >= 0) {\r\n            securityLoop--\r\n\r\n            if (P.monoms.length < 2) {\r\n                if (!P.isOne()) {\r\n                    factors.push(P.clone());\r\n                }\r\n                break;\r\n            } else {\r\n                // Get the first and last monom.\r\n                let m1 = P.monoms[0].dividers,\r\n                    m2 = P.monoms[P.monoms.length - 1].dividers\r\n\r\n                for (let m1d of m1) {\r\n                    for (let m2d of m2) {\r\n                        // if(m1d.degree()===m2d.degree()){continue}\r\n                        let dividerPolynom = new Polynom(),\r\n                            result\r\n                        dividerPolynom.monoms = [m1d.clone(), m2d.clone()]\r\n                        result = P.euclidian(dividerPolynom)\r\n\r\n                        if (result.reminder.isZero()) {\r\n                            P = result.quotient.clone();\r\n                            factors.push(dividerPolynom)\r\n                            continue;\r\n                        }\r\n\r\n                        dividerPolynom.monoms = [m1d.clone(), m2d.clone().opposed()]\r\n                        result = P.euclidian(dividerPolynom)\r\n                        if (result.reminder.isZero()) {\r\n                            P = result.quotient.clone();\r\n                            factors.push(dividerPolynom)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.factors = factors\r\n        return factors;\r\n    }\r\n\r\n    // TODO: get zeroes for more than first degree and for more than natural degrees\r\n    getZeroes = (): (Fraction | boolean)[] => {\r\n        const Z: Fraction[] = [];\r\n\r\n        switch (this.degree().value) {\r\n            case 0:\r\n                if (this._monoms[0].coefficient.value === 0) {\r\n                    return [true];\r\n                } else {\r\n                    return [false];\r\n                }\r\n            case 1:\r\n                // There is only one monoms,\r\n                if (this._monoms.length === 1) {\r\n                    return [new Fraction().zero()];\r\n                } else {\r\n                    const P = this.clone().reduce().reorder();\r\n                    return [P.monoms[1].coefficient.opposed().divide(P.monoms[0].coefficient)];\r\n                }\r\n            // TODO: Determine the zeros of an equation of second degree.\r\n            //case 2:\r\n            default:\r\n                // Make sure the polynom is factorized.\r\n                if (this._factors.length === 0) {\r\n                    this.factorize()\r\n                }\r\n\r\n                let zeroes = [], zeroesAsTex = [];\r\n                for (let P of this._factors) {\r\n                    if (P.degree().greater(2)) {\r\n                        // TODO: Handle other polynom.\r\n\r\n                    } else if (P.degree().value === 2) {\r\n                        let A = P.monomByDegree(2).coefficient,\r\n                            B = P.monomByDegree(1).coefficient,\r\n                            C = P.monomByDegree(0).coefficient,\r\n                            D = B.clone().pow(2).subtract(A.clone().multiply(C).multiply(4));\r\n\r\n                        if (D.value > 0) {\r\n                            /*console.log('Two zeroes for ', P.tex); */\r\n                            let x1 = (-(B.value) + Math.sqrt(D.value)) / (2 * A.value),\r\n                                x2 = (-(B.value) - Math.sqrt(D.value)) / (2 * A.value);\r\n\r\n                            zeroes.push(new Fraction(x1.toFixed(3)).reduce());\r\n                            zeroes.push(new Fraction(x2.toFixed(3)).reduce());\r\n                        } else if (D.value === 0) {\r\n                            /*console.log('One zero for ', P.tex); */\r\n\r\n                        } else {\r\n                            console.log('No zero for ', P.tex);\r\n                        }\r\n                    } else {\r\n                        for (let z of P.getZeroes()) {\r\n                            // Check if the zero is already in the list.\r\n                            if (z === false || z === true) {\r\n                                continue;\r\n                            }\r\n                            if (zeroesAsTex.indexOf(z.frac) === -1) {\r\n                                zeroes.push(z);\r\n                                zeroesAsTex.push(z.frac);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return zeroes;\r\n        }\r\n        return Z;\r\n    };\r\n\r\n    // TODO: analyse the next functions to determine if they are useful or not...\r\n    monomByDegree = (degree?: Fraction | number, letter?: string): Monom => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomByDegree(this.degree(letter), letter);\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter).isEqual(degree)) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        // Nothing was found - return the null monom.\r\n        return new Monom().zero();\r\n    };\r\n\r\n    monomsByDegree = (degree?: number | Fraction, letter?: string): Monom[] => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomsByDegree(this.degree(letter));\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        let Ms: Monom[] = [];\r\n\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter) === degree) {\r\n                Ms.push(m.clone())\r\n            }\r\n        }\r\n\r\n        return Ms\r\n        // Nothing was found - retur\r\n    }\r\n\r\n    // Used in LinearSystem.tex\r\n    monomByLetter = (letter: string): Monom => {\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.hasLetter(letter)) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        return new Monom().zero();\r\n    };\r\n\r\n    // Next functions are used for for commonMonom, which is used in the factorize method.\r\n    getDenominators = (): number[] => {\r\n        const denominators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            denominators.push(m.coefficient.denominator);\r\n        }\r\n        return denominators;\r\n    };\r\n\r\n    getNumerators = (): number[] => {\r\n        const numerators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            numerators.push(m.coefficient.numerator);\r\n        }\r\n        return numerators;\r\n    };\r\n\r\n    lcmDenominator = (): number => {\r\n        return Numeric.lcm(...this.getDenominators());\r\n    };\r\n    // ------------------------------------------\r\n    // Polynoms factorization functions\r\n\r\n    gcdDenominator = (): number => {\r\n        return Numeric.gcd(...this.getDenominators());\r\n    };\r\n\r\n    lcmNumerator = (): number => {\r\n        return Numeric.lcm(...this.getNumerators());\r\n    };\r\n\r\n    gcdNumerator = (): number => {\r\n        return Numeric.gcd(...this.getNumerators());\r\n    };\r\n    // ------------------------------------------\r\n    // Polynoms helpers functions\r\n    // -------------------------------------\r\n\r\n    commonMonom = (): Monom => {\r\n        let M = new Monom().one(), numerator: number, denominator: number, degree = this.degree();\r\n\r\n        numerator = this.gcdNumerator();\r\n        denominator = this.gcdDenominator();\r\n\r\n        M.coefficient = new Fraction(numerator, denominator);\r\n        for (let L of this.variables) {\r\n            // Initialize the setLetter with the max degree\r\n            M.setLetter(L, degree);\r\n            for (let m of this._monoms) {\r\n                M.setLetter(L, Fraction.min(m.degree(L), M.degree(L)));\r\n                if (M.degree(L).isZero()) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return M;\r\n    }\r\n\r\n    private genDisplay = (output?: string, forceSign?: boolean, wrapParentheses?: boolean): string => {\r\n        let P: string = '';\r\n\r\n        for (const k of this._monoms) {\r\n            if (k.coefficient.value === 0) {\r\n                continue;\r\n            }\r\n\r\n            P += `${(k.coefficient.sign() === 1 && (P !== '' || forceSign === true)) ? '+' : ''}${(output === 'tex') ? k.tex : k.display}`;\r\n        }\r\n\r\n        if (wrapParentheses === true && this.length > 1) {\r\n            if (output === 'tex') {\r\n                P = `\\\\left( ${P} \\\\right)`;\r\n            } else {\r\n                P = `(${P})`;\r\n            }\r\n        }\r\n\r\n        if (P === '') {\r\n            P = '0';\r\n        }\r\n        return P;\r\n    };\r\n\r\n\r\n    static addToken = (stack: Polynom[], element: Token): void => {\r\n\r\n        switch(element.tokenType){\r\n            case ShutingyardType.COEFFICIENT:\r\n                stack.push(new Polynom( element.token ))\r\n                break\r\n\r\n            case ShutingyardType.VARIABLE:\r\n                stack.push(new Polynom().add(new Monom(element.token)))\r\n                break\r\n\r\n            case ShutingyardType.CONSTANT:\r\n                // TODO: add constant support to Polynom parsing.\r\n                console.log('Actually, not supported - will be added later !')\r\n                break\r\n\r\n            case ShutingyardType.OPERATION:\r\n                if(stack.length>=2){\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n\r\n                    if(element.token === '+'){\r\n                        stack.push(a.add(b))\r\n                    }else if(element.token === '-'){\r\n                        stack.push(a.subtract(b))\r\n                    }else if(element.token === '*'){\r\n                        stack.push(a.multiply(b))\r\n                    }else if(element.token === '/'){\r\n                        if(b.degree().isStrictlyPositive()){\r\n                            console.log('divide by a polynom -> should create a rational polynom !')\r\n                        }else {\r\n                            stack.push(a.divide(b.monoms[0].coefficient))\r\n\r\n                        }\r\n                    }else if(element.token === '^'){\r\n                        if(b.degree().isStrictlyPositive()) {\r\n                            console.error('Cannot elevate a polynom with another polynom !')\r\n                        }else {\r\n                            if(b.monoms[0].coefficient.isRelative()) {\r\n                                // Integer power\r\n                                stack.push(a.pow(b.monoms[0].coefficient.value))\r\n                            }else{\r\n                                // Only allow power if the previous polynom is only a monom, without coefficient.\r\n                                if(a.monoms.length===1 && a.monoms[0].coefficient.isOne()){\r\n                                    for (let letter in a.monoms[0].literal) {\r\n                                        a.monoms[0].literal[letter].multiply(b.monoms[0].coefficient)\r\n                                    }\r\n                                    stack.push(a)\r\n                                }else {\r\n                                    console.error('Cannot have power with fraction')\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }else{\r\n                    console.log('Stack size: ', stack.length)\r\n                    if(element.token === '-'){\r\n                        stack.push(stack.pop().opposed())\r\n                    }else{\r\n                        console.log('While parsing, cannot apply ', element.token, 'to', stack[0].tex)\r\n                    }\r\n                }\r\n                break\r\n\r\n            case ShutingyardType.MONOM:\r\n                // Should never appear.\r\n                console.error('The monom token should not appear here')\r\n                break;\r\n\r\n            case ShutingyardType.FUNCTION:\r\n                // Should never appear.\r\n                console.log('The function token should not appear here - might be introduced later.')\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * Main parse using a shutting yard class\r\n     * @param inputStr\r\n     */\r\n    private shutingYardToReducedPolynom = (inputStr: string): Polynom => {\r\n        // Get the RPN array of the current expression\r\n        const SY: Shutingyard = new Shutingyard().parse(inputStr);\r\n        const rpn: { token: string, tokenType: string }[] = SY.rpn;\r\n\r\n        // New version for reducing shuting yard.\r\n        this.zero()\r\n\r\n        let stack: Polynom[] = [],\r\n            monom: Monom = new Monom()\r\n\r\n        // Loop through the\r\n        for (const element of rpn) {\r\n            Polynom.addToken(stack, element);\r\n        }\r\n\r\n        if (stack.length === 1) {\r\n            this.add(stack[0])\r\n        }\r\n\r\n        return this\r\n        /**\r\n         let m1: Polynom;\r\n         let m2: Polynom;\r\n\r\n         let stack: Polynom[] = [],\r\n         previousToken: string = null,\r\n         tempPolynom\r\n\r\n         for (const element of rpn) {\r\n            if (element.tokenType === 'coefficient' || element.tokenType === 'variable') {\r\n                tempPolynom = new Polynom().zero();\r\n                tempPolynom.monoms = [new Monom(element.token)]\r\n                stack.push(tempPolynom.clone())\r\n            } else if (element.tokenType === 'operation') {\r\n                m2 = (stack.pop()) || new Polynom().zero();\r\n                m1 = (stack.pop()) || new Polynom().zero();\r\n                switch (element.token) {\r\n                    case '+':\r\n                        stack.push(m1.add(m2))\r\n                        break;\r\n                    case '-':\r\n                        stack.push(m1.subtract(m2))\r\n                        break;\r\n                    case '*':\r\n                        stack.push(m1.multiply(m2))\r\n                        break;\r\n                    case '^':\r\n                        stack.push(m1.pow(+previousToken))\r\n                }\r\n            }\r\n            previousToken = element.token;\r\n        }\r\n\r\n         this._monoms = stack[0].monoms;\r\n         return this;*/\r\n    }\r\n\r\n    private multiplyByPolynom = (P: Polynom): Polynom => {\r\n        const M: Monom[] = [];\r\n        for (const m1 of this._monoms) {\r\n            for (const m2 of P.monoms) {\r\n                M.push(Monom.xmultiply(m1, m2));\r\n            }\r\n        }\r\n\r\n        this._monoms = M;\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.multiply(F);\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByInteger = (nb: number): Polynom => {\r\n        return this.multiplyByFraction(new Fraction(nb));\r\n    };\r\n\r\n    private multiplyByMonom = (M: Monom): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.multiply(M)\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n    private divideByInteger = (nb: number): Polynom => {\r\n        const nbF = new Fraction(nb);\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(nbF);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    private divideByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(F);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    private _factorize2ndDegree = (letter: string): Polynom[] => {\r\n        let P1: Polynom, P2: Polynom,\r\n            a, b, c, delta, x1, x2, factor;\r\n\r\n        // One variable only\r\n        if (this.numberOfVars === 1) {\r\n            a = this.monomByDegree(2, letter).coefficient;\r\n            b = this.monomByDegree(1, letter).coefficient;\r\n            c = this.monomByDegree(0, letter).coefficient;\r\n            delta = b.clone().pow(2).subtract(a.clone().multiply(c).multiply(4));\r\n\r\n            if (delta.isZero()) {\r\n                x1 = b.clone().opposed().divide(a.clone().multiply(2))\r\n                P1 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                P2 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                factor = a.divide(x1.denominator).divide(x1.denominator);\r\n\r\n                if (!factor.isOne()) {\r\n                    // TODO: Update new Polynom to accept anything...\r\n                    return [new Polynom(factor.display), P1, P2]\r\n                } else {\r\n                    return [P1, P2]\r\n                }\r\n            } else if (delta.isPositive() && delta.isSquare()) {\r\n                x1 = b.clone().opposed()\r\n                    .add(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n                x2 = b.clone().opposed()\r\n                    .subtract(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n\r\n                // (2x+5)(3x-2)\r\n                // 6x^2+11x-10\r\n                // a = 6, b = 11, c = -10\r\n                // delta = 121-4*6*(-10) = 361= 19^2\r\n                // x1 = (-11 + 19)  / 12 = 8/12 = 2/3\r\n                // x2 = (-11 - 19)  / 12 = -30/12 = -5/2\r\n                factor = a.divide(x1.denominator).divide(x2.denominator);\r\n                if (factor.isOne()) {\r\n                    return [\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n                } else {\r\n                    return [\r\n                        new Polynom(factor.display),\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n\r\n                }\r\n            } else {\r\n                // No solution possible - return the complete value.\r\n                return [this.clone()]\r\n            }\r\n        } else {\r\n            // If multiple variables, only handle perfect squares...\r\n            a = this.monomByDegree(2, letter);\r\n            b = this.monomByDegree(1, letter);\r\n            c = this.monomByDegree(0, letter);\r\n\r\n\r\n            if (a.isLiteralSquare() && c.isLiteralSquare()) {\r\n                // Check the middle item is same as...\r\n                if (b.clone().pow(2).isSameAs(a.clone().multiply(c))) {\r\n                    // Determine if the coefficient values matches.\r\n\r\n                    // Search 4 values (r, s, t, u) that matches:\r\n                    // (r X + s Y)(t X + u Y) = rt X^2 + (ru + st) XY + su Y^2\r\n\r\n                    let xPolynom = new Polynom('x', a.coefficient, b.coefficient, c.coefficient);\r\n                    let xFactors = xPolynom._factorize2ndDegree('x');\r\n\r\n                    let factors = [], xyzPolynom: Polynom;\r\n\r\n                    if (xFactors.length >= 2) {\r\n                        for (let p of xFactors) {\r\n                            if (p.degree().isZero()) {\r\n                                factors.push(p.clone())\r\n                            } else {\r\n                                xyzPolynom = p.clone();\r\n                                xyzPolynom.monoms[0].literal = a.literalSqrt\r\n                                xyzPolynom.monoms[1].literal = c.literalSqrt\r\n                                factors.push(xyzPolynom.clone())\r\n                            }\r\n                        }\r\n                        return factors\r\n                    }\r\n                }\r\n            }\r\n\r\n            return [this.clone()]\r\n            //\r\n            // console.log(a.tex, b.tex, c.tex)\r\n            // if (a.isSquare() && c.isSquare()) {\r\n            //     console.log('A C squares')\r\n            //     if (a.clone().sqrt().multiply(c.clone().sqrt()).multiplyByNumber(2).isSameAs(b)) {\r\n            //         console.log('HERE')\r\n            //         if (a.coefficient.sign() === b.coefficient.sign()) {\r\n            //             return []\r\n            //         }else{\r\n            //             return []\r\n            //         }\r\n            //     }\r\n            // } else if(a.isLiteralSquare() && c.isLiteralSquare()) {\r\n            //     console.log('A C litteral SQUARES')\r\n            //     // Check that the middle element is the product of a and c.\r\n            //\r\n            //     if(b.clone().pow(2).isSameAs(a.clone().multiply(c))){\r\n            //         console.log('SAME')\r\n            //\r\n            //     }else{\r\n            //         console.log('NOT SAME')\r\n            //     }\r\n            //\r\n            //     return [this.clone()]\r\n            // } else {\r\n            //     console.log('NOT SQUARES AT ALL !!!!')\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    private _factorizeByGroups = (): Polynom[] => {\r\n        // TODO: Factorize by groups.\r\n        return [];\r\n    }\r\n}\r\n","/**\r\n * Rational polynom module contains everything necessary to handle rational polynoms.\r\n * @module Polynom\r\n */\r\n\r\nimport {Polynom} from \"./polynom\";\r\nimport {Fraction} from \"../coefficients\";\r\n\r\n/**\r\n * Rational class can handle rational polynoms\r\n */\r\n    export class Rational {\r\n        private _rawString: string;\r\n        private _numerator: Polynom;\r\n        private _denominator: Polynom;\r\n\r\n        /**\r\n         *\r\n         * @param numerator\r\n         * @param denominator\r\n         */\r\n        constructor(numerator?: Polynom, denominator?: Polynom) {\r\n            this._numerator = numerator ? numerator.clone() : new Polynom();\r\n            this._denominator = denominator ? denominator.clone() : new Polynom();\r\n        }\r\n\r\n        clone = (): Rational => {\r\n            this._numerator = this._numerator.clone()\r\n            this._denominator = this._denominator.clone()\r\n\r\n            return this;\r\n        }\r\n\r\n        get tex(): string {\r\n            return `\\\\dfrac{ ${this._numerator.tex} }{ ${this._denominator.tex} }`;\r\n        }\r\n\r\n        get texFactors(): string {\r\n            this._numerator.factorize()\r\n            this._denominator.factorize()\r\n\r\n            return `\\\\dfrac{ ${this._numerator.texFactors} }{ ${this._denominator.texFactors} }`\r\n        }\r\n\r\n        get numerator(): Polynom {\r\n            return this._numerator\r\n        }\r\n\r\n        get denominator(): Polynom {\r\n            return this._denominator\r\n        }\r\n\r\n        domain = (): string => {\r\n            let zeroes = this._denominator.getZeroes();\r\n            if (zeroes.length === 0 || zeroes[0] === false) {\r\n                return '\\\\mathbb{R}'\r\n            } else if (zeroes[0] === true) {\r\n                return '\\\\varnothing'\r\n            } else {\r\n                return '\\\\mathbb{R}\\\\setminus\\\\left{' +\r\n                    zeroes.map(x => {\r\n                        return (typeof x === 'boolean') ? '' : x.frac\r\n                    })\r\n                        .join(';') + '\\\\right}'\r\n            }\r\n        }\r\n\r\n        amplify = (P: Polynom): Rational => {\r\n            this._numerator.multiply(P);\r\n            this._denominator.multiply(P);\r\n\r\n            return this;\r\n        }\r\n\r\n        simplify = (P: Polynom): Rational => {\r\n            let NumeratorEuclidien = this._numerator.euclidian(P);\r\n            if (!NumeratorEuclidien.reminder.isZero()) {\r\n                return this;\r\n            }\r\n\r\n            let DenominatorEuclidien = this._denominator.euclidian(P);\r\n            if (!DenominatorEuclidien.reminder.isZero()) {\r\n                return this;\r\n            }\r\n\r\n            this._numerator = NumeratorEuclidien.quotient;\r\n            this._denominator = DenominatorEuclidien.quotient;\r\n            return this;\r\n        }\r\n\r\n        reduce = (): Rational => {\r\n            console.log(this._numerator.tex)\r\n            this._numerator.factorize();\r\n            console.log(this._numerator.factors.map(x => x.tex))\r\n            for (let f of this._numerator.factors) {\r\n                this.simplify(f);\r\n            }\r\n\r\n            return this;\r\n        }\r\n\r\n        opposed = (): Rational => {\r\n            this._numerator.opposed();\r\n            return this;\r\n        }\r\n        add = (R: Rational): Rational => {\r\n            // 1. Make sure both rational are at the same denominator\r\n            // 2. Add the numerators.\r\n            // 3. Simplify\r\n\r\n            // Store the adding denominator\r\n            let denominator = this._denominator.clone()\r\n\r\n            // Amplif the main rational polynom by the adding denominator\r\n            this.amplify(R._denominator)\r\n\r\n            // Add to the numerator the adding value...\r\n            this._numerator.add(R._numerator.clone().multiply(denominator));\r\n\r\n            return this;\r\n        }\r\n\r\n        subtract = (R: Rational): Rational => {\r\n            return this.add(R.clone().opposed())\r\n        }\r\n\r\n        limits = (value: Fraction | number, letter?: string): Fraction | number => {\r\n            if (value === Infinity || value === -Infinity) {\r\n                let N = this._numerator.monomByDegree(this._numerator.degree(letter), letter),\r\n                    D = this._denominator.monomByDegree(this._denominator.degree(letter), letter)\r\n\r\n                N.divide(D)\r\n\r\n                if (N.degree(letter).isStrictlyPositive()) {\r\n                    return N.coefficient.sign() * (Math.pow((value > 0 ? 1 : -1), N.degree(letter).value % 2)) === 1 ? Infinity : -Infinity\r\n                }\r\n                if (N.degree(letter).isZero()) {\r\n                    return N.coefficient\r\n                }\r\n                if (N.degree(letter).isStrictlyPositive()) {\r\n                    return N.coefficient.sign() * (Math.pow(-1, N.degree(letter).value % 2)) === 1 ? 0 : -0\r\n                }\r\n            } else {\r\n                return this._numerator.evaluate({letter: new Fraction(value)}).divide(this._denominator.evaluate({letter: new Fraction(value)}))\r\n            }\r\n        }\r\n    }\r\n","import {Numeric} from \"../numeric\";\r\n\r\nexport type FractionParsingType = number|string|Fraction\r\n/**\r\n * The fraction class make possible to handle\r\n * TODO: Write the documentation correctly.\r\n * \\\\(\\frac{a}{b}\\\\) or \\\\[\\frac{a}{b}\\\\]  values.\r\n */\r\nexport class Fraction {\r\n    private _numerator: number;\r\n    private _denominator: number;\r\n\r\n    constructor(value?: unknown, denominatorOrPeriodic?: number) {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n\r\n        if (value !== undefined) {\r\n            this.parse(value, denominatorOrPeriodic);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isFraction() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n\r\n    get numerator(): number {\r\n        return this._numerator;\r\n    }\r\n\r\n    set numerator(value: number) {\r\n        this._numerator = value;\r\n    }\r\n\r\n    get denominator(): number {\r\n        return this._denominator;\r\n    }\r\n\r\n    set denominator(value: number) {\r\n        this._denominator = value;\r\n    }\r\n\r\n    get value(): number {\r\n        return this._numerator / this._denominator;\r\n    }\r\n\r\n    // Display getter\r\n    get tex(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else if (this._numerator < 0) {\r\n            return `-\\\\frac{ ${-this._numerator} }{ ${this._denominator} }`;\r\n        } else {\r\n            return `\\\\frac{ ${this._numerator} }{ ${this._denominator} }`;\r\n        }\r\n    }\r\n\r\n    get display(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else {\r\n            return `${this._numerator}/${this._denominator}`;\r\n        }\r\n    }\r\n\r\n    // Helper function to display fractions\r\n    get frac(): string {\r\n        return this.tex;\r\n    }\r\n\r\n    get dfrac(): string {\r\n        return this.tex.replace('\\\\frac', '\\\\dfrac');\r\n    }\r\n    get tfrac(): string {\r\n        return this.tex.replace('\\\\frac', '\\\\tfrac')\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse the value to get the numerator and denominator\r\n     * @param value : number or string to parse to get the fraction\r\n     * @param denominatorOrPeriodic (optional|number) : length of the periodic part: 2.333333 => 1 or denominator value\r\n     */\r\n    parse = (value: unknown, denominatorOrPeriodic?: number): Fraction => {\r\n        let S: string[];\r\n\r\n        // A null value means a zero fraction.\r\n        if (value === null || value === \"\") {\r\n            this._numerator = 0;\r\n            this._denominator = 1;\r\n            return this;\r\n        }\r\n\r\n        switch (typeof value) {\r\n            case \"string\":\r\n                // Split the sting value in two parts: Numerator/Denominator\r\n                S = value.split('/');\r\n\r\n                // Security checks\r\n                if (S.length > 2) throw \"Two many divide signs\";\r\n                if (S.map(x => x === '' || isNaN(Number(x))).includes(true)) throw \"Not a number\"\r\n\r\n\r\n                if (S.length === 1) {\r\n                    // No divide sign\r\n                    return this.parse(+S[0]);\r\n                } else if (S.length === 2) {\r\n                    // One divide signe\r\n                    // We check if the denominator is zero\r\n                    if (S[1] === '0') {\r\n                        this._numerator = NaN;\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._numerator = +S[0];\r\n                        this._denominator = +S[1];\r\n                    }\r\n                } else {\r\n                    // More than one divide sign ?\r\n                    this._numerator = NaN;\r\n                    this._denominator = 1;\r\n                }\r\n                break;\r\n            case \"number\":\r\n                if (Number.isSafeInteger(value)) {\r\n                    // The given value is an integer\r\n                    this._numerator = +value;\r\n\r\n                    if (denominatorOrPeriodic === undefined || !Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._denominator = +denominatorOrPeriodic;\r\n                    }\r\n                } else {\r\n                    // The given value is a float number\r\n\r\n                    // Get the number of decimals after the float sign\r\n                    let p: number = (value.toString()).split('.')[1].length;\r\n\r\n                    // Transform the float number in two integer\r\n                    if (denominatorOrPeriodic === undefined) {\r\n                        this._numerator = value * Math.pow(10, p);\r\n                        this._denominator = Math.pow(10, p);\r\n                    } else if (Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._numerator = value * Math.pow(10, p) - Math.floor(value * Math.pow(10, p - denominatorOrPeriodic));\r\n                        this.denominator = Math.pow(10, p) - Math.pow(10, p - denominatorOrPeriodic)\r\n                    }\r\n                    this.reduce()\r\n                }\r\n                break;\r\n            case \"object\":\r\n                if (value instanceof Fraction) {\r\n                    this._numerator = +value.numerator;\r\n                    this._denominator = +value.denominator;\r\n                }\r\n                break;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): Fraction => {\r\n        let F = new Fraction();\r\n        F.numerator = +this._numerator;\r\n        F.denominator = +this._denominator;\r\n        return F;\r\n    };\r\n\r\n    zero = (): Fraction => {\r\n        this._numerator = 0;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    one = (): Fraction => {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    infinite = (): Fraction => {\r\n        this._numerator = Infinity;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    invalid = (): Fraction => {\r\n        this._numerator = NaN;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Fraction => {\r\n        this._numerator = -this._numerator;\r\n        return this;\r\n    };\r\n\r\n    add = (F: Fraction | number): Fraction => {\r\n        if (F instanceof Fraction) {\r\n            let N: number = this._numerator,\r\n                D: number = this._denominator;\r\n\r\n            this._numerator = N * F.denominator + F.numerator * D;\r\n            this._denominator = D * F.denominator;\r\n        } else {\r\n            return this.add(new Fraction(F))\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (F: Fraction | number): Fraction => {\r\n        if (F instanceof Fraction) {\r\n            return this.add(F.clone().opposed());\r\n        } else {\r\n            return this.add(-F)\r\n        }\r\n    };\r\n\r\n    multiply = (F: Fraction | number): Fraction => {\r\n        // Parse the value.\r\n        // If it's a fraction, return a clone of it\r\n        // If it's an integer, return the fraction F/1\r\n        let Q = new Fraction(F);\r\n\r\n        this._numerator = this._numerator * Q.numerator;\r\n        this._denominator = this._denominator * Q.denominator;\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    divide = (F: Fraction | number): Fraction => {\r\n        let Q = new Fraction(F);\r\n\r\n        if (Q.numerator === 0) {\r\n            return new Fraction().infinite();\r\n        }\r\n\r\n        let N: number = +this._numerator,\r\n            D: number = +this._denominator;\r\n\r\n        this._numerator = N * Q.denominator;\r\n        this._denominator = D * Q.numerator;\r\n        return this.reduce();\r\n    };\r\n\r\n    invert = (): Fraction => {\r\n        let n = +this._numerator, d = +this._denominator;\r\n        this._numerator = d;\r\n        this._denominator = n;\r\n\r\n        return this;\r\n    }\r\n    pow = (p: number | Fraction): Fraction => {\r\n        // TODO: Fraction.pow with a value different than a safe integer !\r\n        if (p instanceof Fraction) {\r\n            return this.pow(p.value)\r\n        }\r\n\r\n        this.reduce();\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        // Check if numerator and denominator are roots of...\r\n        // othervise, convert to numeric.\r\n        let controlNumerator = Math.floor(Math.pow(this._numerator, Math.abs(p))),\r\n            controlDenominator = Math.floor(Math.pow(this._denominator, Math.abs(p)))\r\n\r\n        if(controlNumerator ** Math.abs(p) === this._numerator\r\n            &&\r\n            controlDenominator ** Math.abs(p) === this._denominator){\r\n\r\n            this._numerator = this._numerator ** Math.abs(p);\r\n            this._denominator = this._denominator ** Math.abs(p);\r\n        }else{\r\n            this._numerator = this._numerator ** Math.abs(p);\r\n            this._denominator = this._denominator ** Math.abs(p);\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    root = (p: number): Fraction => {\r\n        // TODO: nth - root of a fraction => this will return another type of coefficient.\r\n\r\n        // Check if they are perfect roots..\r\n        if (p === 0) {\r\n            return this;\r\n        }\r\n\r\n        // If negative, invert the fraction\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        let n = Math.pow(this._numerator, Math.abs(1 / p)),\r\n            d = Math.pow(this._denominator, Math.abs(1 / p));\r\n\r\n        this._numerator = Math.pow(this._numerator, Math.abs(1 / p));\r\n        this._denominator = Math.pow(this._denominator, Math.abs(1 / p));\r\n        return this;\r\n    }\r\n\r\n    sqrt = (): Fraction => {\r\n        return this.root(2);\r\n    }\r\n\r\n    abs = (): Fraction => {\r\n        this._numerator = Math.abs(this._numerator);\r\n        this._denominator = Math.abs(this._denominator);\r\n        return this;\r\n    };\r\n\r\n\r\n    static max = (...fractions: (Fraction | number)[]): Fraction => {\r\n        let M = new Fraction(fractions[0])\r\n\r\n        for (let m of fractions) {\r\n            let compare = new Fraction(m)\r\n            if (compare.greater(M)) {\r\n                M = compare.clone()\r\n            }\r\n        }\r\n\r\n        return M\r\n    }\r\n    static min = (...fractions: (Fraction | number)[]): Fraction => {\r\n        let M = new Fraction(fractions[0])\r\n\r\n        for (let m of fractions) {\r\n            let compare = new Fraction(m)\r\n            if (compare.lesser(M)) {\r\n                M = compare.clone()\r\n            }\r\n        }\r\n\r\n        return M\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations specific to fractions\r\n    // ------------------------------------------\r\n    reduce = (): Fraction => {\r\n        let g = Numeric.gcd(this._numerator, this._denominator);\r\n        this._numerator = this._numerator / g;\r\n        this._denominator = this._denominator / g;\r\n\r\n        if (this._denominator < 0) {\r\n            this._denominator = -this._denominator;\r\n            this._numerator = -this._numerator;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    amplify = (k: number): Fraction => {\r\n        if (Number.isSafeInteger(k)) {\r\n            this._numerator *= k;\r\n            this._denominator *= k;\r\n        }\r\n        return this;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param F (Coefficient) The coefficient to compare\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (F: unknown, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n        let compareFraction: Fraction\r\n        if (F instanceof Fraction) {\r\n            compareFraction = F.clone()\r\n        } else {\r\n            compareFraction = new Fraction(F)\r\n        }\r\n\r\n        switch (sign) {\r\n            case '>':\r\n                return this.value > compareFraction.value;\r\n            case \">=\" || \"=>\" || \"geq\":\r\n                return this.value >= compareFraction.value;\r\n            case \"<\":\r\n                return this.value < compareFraction.value;\r\n            case \"<=\" || \"=>\" || \"leq\":\r\n                return this.value <= compareFraction.value;\r\n            case \"=\":\r\n                // let F2: Fraction = compareFraction.clone().reduce(),\r\n                //     F1: Fraction = this.clone().reduce();\r\n                // return (F1.numerator === F2.numerator && F1.denominator === F2.denominator);\r\n                return this.value === compareFraction.value;\r\n            case \"<>\":\r\n                return this.value !== compareFraction.value;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n    /* Compare shortcuts */\r\n    lesser = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '<');\r\n    };\r\n    leq = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '<=');\r\n    };\r\n    greater = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '>');\r\n    };\r\n    geq = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '>=');\r\n    };\r\n    isEqual = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '=');\r\n    }\r\n    isNotEqual = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '<>');\r\n    }\r\n    isOpposed = (p: Fraction): boolean => {\r\n        return this.isEqual(p.clone().opposed());\r\n    }\r\n    isInverted = (p: Fraction): boolean => {\r\n        return this.isEqual(new Fraction().one().divide(p.clone()));\r\n    }\r\n    isZero = (): boolean => {\r\n        return this._numerator === 0;\r\n    }\r\n    isNotZero = (): boolean => {\r\n        return this._numerator !== 0;\r\n    }\r\n    isOne = (): boolean => {\r\n        return this._numerator === 1 && this._denominator === 1;\r\n    }\r\n    isNegativeOne = (): boolean => {\r\n        return this._numerator === -1 && this._denominator === 1;\r\n    }\r\n    isPositive = (): boolean => {\r\n        return this.sign() === 1;\r\n    }\r\n    isNegative = (): boolean => {\r\n        return this.sign() === -1;\r\n    }\r\n    isStrictlyPositive = (): boolean => {\r\n        return this.value > 0\r\n    }\r\n    isStrictlyNegative = (): Boolean => {\r\n        return this.value < 0\r\n    }\r\n    isNaN = (): boolean => {\r\n        return isNaN(this._numerator);\r\n    }\r\n    isInfinity = (): boolean => {\r\n        return this._numerator === Infinity;\r\n    }\r\n    isFinite = (): boolean => {\r\n        return !this.isInfinity();\r\n    }\r\n    isSquare = (): boolean => {\r\n        return Math.sqrt(this._numerator) % 1 === 0 && Math.sqrt(this._denominator) % 1 === 0\r\n    }\r\n    isReduced = (): boolean => {\r\n        return Math.abs(Numeric.gcd(this._numerator, this._denominator)) === 1\r\n    }\r\n    isNatural = (): boolean => {\r\n        return this.isRelative() && this.isPositive()\r\n    }\r\n    isRelative = (): boolean => {\r\n        return this.clone().reduce().denominator === 1\r\n    }\r\n    isRational = (): boolean => {\r\n        return !this.isRelative()\r\n    }\r\n    isEven = (): boolean => {\r\n        return this.isRelative() && this.value % 2 === 0\r\n    }\r\n    isOdd = (): boolean => {\r\n        return this.isRelative() && this.value % 2 === 1\r\n    }\r\n    sign = (): number => {\r\n        return (this._numerator * this._denominator >= 0) ? 1 : -1;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Simple function to determine if it's a fraction\r\n     */\r\n    areEquals = (...F: Fraction[]): boolean => {\r\n        for (let i = 0; i < F.length; i++) {\r\n            if (!this.isEqual(F[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n}","export * from \"./fraction\"\r\nexport * from \"./nthroot\"","/**\r\n * Nthroot is something like \"a+b\\sqrt{3}\r\n */\r\nexport class Nthroot {\r\n    private _radical: number;\r\n    private _nth: number;\r\n    private _coefficient: number;\r\n    private _isValid:boolean;\r\n\r\n    constructor(...values: number[]) {\r\n        this._radical = 1;\r\n        this._coefficient = 1;\r\n        this._nth = 2;\r\n        this._isValid = true;\r\n\r\n        if(values !== undefined){\r\n            this.parse(values[0], values[1], values[2])\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get radical(): number {\r\n        return this._radical;\r\n    }\r\n\r\n    set radical(value: number) {\r\n        this._radical = value;\r\n    }\r\n\r\n    get nth(): number {\r\n        return this._nth;\r\n    }\r\n\r\n    set nth(value: number) {\r\n        if (Number.isSafeInteger(value) && value >= 2) {\r\n            this._nth = value;\r\n        } else {\r\n            // Error setting the nth root.\r\n            console.log('Error setting the nth root');\r\n            this._nth = 2;\r\n        }\r\n    }\r\n\r\n    get coefficient(): number {\r\n        return this._coefficient;\r\n    }\r\n\r\n    set coefficient(value: number) {\r\n        this._coefficient = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let C: string;\r\n\r\n        if (this._coefficient === 1) {\r\n            C = '';\r\n        } else if (this._coefficient === -1) {\r\n            C = '-';\r\n        } else {\r\n            C = this._coefficient.toString();\r\n        }\r\n\r\n        if (this._radical === 1) {\r\n            return `${this._coefficient}`;\r\n        } else {\r\n            if (this._nth === 2) {\r\n                return `${C}\\\\sqrt{${this._radical}}`\r\n            } else {\r\n                return `${C}\\\\sqrt[${this._nth}]{${this._radical}}`\r\n            }\r\n        }\r\n    }\r\n\r\n    get value(): number {\r\n        return this._coefficient * Math.pow(this._radical, 1 / this._nth);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (radical: number, nthroot?: number, coefficient?: number): Nthroot => {\r\n        this._coefficient = (coefficient === undefined) ? 1 : coefficient;\r\n        this._nth = (nthroot === undefined) ? 2 : nthroot;\r\n        this._radical = (radical === undefined) ? 1 : radical;\r\n\r\n        if(this._nth%2===0 && this._radical<0){\r\n            this._isValid = false;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    reduce = (): Nthroot => {\r\n        // Max value to test.\r\n        let V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n        while (V > 1) {\r\n            if (this._radical % Math.pow(V, this._nth) === 0) {\r\n                // It's dividable by V^n\r\n                this._coefficient *= V;\r\n                this._radical = this._radical / Math.pow(V, this._nth);\r\n\r\n                // Redifine the new testing value (this is optimization)\r\n                V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n                continue;\r\n            }\r\n            V--;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiply = (N: Nthroot): Nthroot => {\r\n        this._radical *= N.radical;\r\n        return this.reduce();\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Help functions\r\n    // ------------------------------------------\r\n    hasRadical = ():boolean => {\r\n        return !(this._radical===1 || this._radical===0 || this._isValid===false)\r\n    };\r\n}","import {Shutingyard, ShutingyardMode, ShutingyardType, tokenConstant} from \"../shutingyard\";\r\nimport {Fraction} from \"../coefficients\";\r\n\r\nexport class NumExp {\r\n    private _rpn: { token: string, tokenType: string }[]\r\n    private _expression: string\r\n    private _isValid: boolean\r\n\r\n    constructor(value: string) {\r\n        this._expression = value\r\n        this._rpn = new Shutingyard(ShutingyardMode.NUMERIC).parse(value).rpn\r\n    }\r\n\r\n    get rpn(): { token: string; tokenType: string }[] {\r\n        return this._rpn;\r\n    }\r\n\r\n    get isValid(): boolean {\r\n        if(this._isValid===undefined){\r\n            this.evaluate({x: 0})\r\n        }\r\n        return this._isValid\r\n    }\r\n\r\n    set isValid(value: boolean){\r\n        this._isValid = value\r\n    }\r\n\r\n    get expression(): string {\r\n        return this._expression;\r\n    }\r\n\r\n    private _extractDecimalPart(value: number): string {\r\n        let decimal = value.toString()\r\n\r\n        if (!decimal.includes('.')) {\r\n            return ''\r\n        }\r\n\r\n        decimal = decimal.split('.')[1]\r\n\r\n        return decimal.substring(0, decimal.length - 2)\r\n    }\r\n\r\n    private _numberCorrection(value: number): number {\r\n        // Must modify the number if it's like:\r\n        // a: 3.0000000000000003\r\n        // b: 3.9999999999999994\r\n        // remove the last character\r\n        // check if around n last characters are either 0 or 9\r\n        // if it is, 'round' the number.\r\n\r\n        const epsilon = 0.00000000000001,\r\n            number_of_digits = 6\r\n\r\n        const decimal = this._extractDecimalPart(value)\r\n        if(decimal===''){return value}\r\n\r\n        const n9 = decimal.match(/9+$/g)\r\n        const n0 = decimal.match(/0+$/g)\r\n\r\n        if (n9 && n9[0].length >= number_of_digits) {\r\n            // New tested values.\r\n            const mod = this._extractDecimalPart(value + epsilon),\r\n                mod0 = mod.match(/0+$/g)\r\n\r\n            if(mod0 && mod0[0].length>= number_of_digits){\r\n                // The value can be changed. Remove all zeros!\r\n                return +((value+epsilon).toString().split(mod0[0])[0])\r\n            }\r\n        }\r\n\r\n        if (n0 && n0[0].length >= number_of_digits) {\r\n            // New tested values.\r\n            const mod = this._extractDecimalPart(value - epsilon),\r\n                mod9 = mod.match(/9+$/g)\r\n\r\n            if(mod9 && mod9[0].length>= number_of_digits){\r\n                // The value can be changed. Remove all nines!\r\n                return +(value.toString().split(n0[0])[0])\r\n            }\r\n        }\r\n\r\n        return value\r\n    }\r\n\r\n    private _addToStack(stack:number[], value: number): void {\r\n        stack.push(this._numberCorrection(value))\r\n    }\r\n\r\n    evaluate(values: { [Key: string]: number }): number {\r\n        const stack: number[] = []\r\n\r\n        this.isValid = true\r\n\r\n        for (const element of this._rpn) {\r\n            if (element.tokenType === ShutingyardType.COEFFICIENT) {\r\n                // May be a numeric value or a Fraction.\r\n                if (!isNaN(+element.token)) {\r\n                    this._addToStack(stack, +element.token)\r\n                } else {\r\n                    this._addToStack(stack, new Fraction(element.token).value)\r\n                }\r\n            } else if (element.tokenType === ShutingyardType.VARIABLE) {\r\n                if (values[element.token] !== undefined) {\r\n                    this._addToStack(stack, +values[element.token])\r\n                }\r\n            } else if (element.tokenType === ShutingyardType.CONSTANT) {\r\n                this._addToStack(stack, tokenConstant[element.token])\r\n            } else if (element.tokenType === ShutingyardType.OPERATION) {\r\n                if (element.token === '*') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if(a === undefined || b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, a * b)\r\n                } else if (element.token === '/') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if(a === undefined || b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, a / b)\r\n                } else if (element.token === '+') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if(a === undefined || b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, (+a) + (+b))\r\n                } else if (element.token === '-') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop() || 0\r\n                    if(b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, a - b)\r\n                } else if (element.token === '^') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if(a === undefined || b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, Math.pow(a, b))\r\n                }\r\n            } else if (element.tokenType === ShutingyardType.FUNCTION) {\r\n                const a = stack.pop()\r\n                if(a === undefined){this.isValid = false}\r\n                if (element.token === 'sin') {\r\n                    this._addToStack(stack, Math.sin(a))\r\n                } else if (element.token === 'cos') {\r\n                    this._addToStack(stack, Math.cos(a))\r\n                } else if (element.token === 'tan') {\r\n                    this._addToStack(stack, Math.tan(a))\r\n                } else if(element.token === 'sqrt') {\r\n                    this._addToStack(stack, Math.sqrt(a))\r\n                }\r\n            }\r\n        }\r\n\r\n        if (stack.length === 1) {\r\n            return stack[0]\r\n        } else {\r\n            throw `There was a problem parsing: ${this._expression}`\r\n        }\r\n    }\r\n}\r\n","import {Polynom, PolynomParsingType} from \"../algebra\";\r\nimport {Fraction, FractionParsingType} from \"../coefficients\";\r\n\r\ntype PolynomExpMathFunctionType = { name: string; fn: Function, tex: string }\r\n\r\nexport class PolynomExpFactor {\r\n    constructor(polynom: PolynomParsingType, degree?: FractionParsingType, mathFunction?: PolynomExpMathFunctionType) {\r\n        this._polynom = new Polynom(polynom)\r\n        this._degree = new Fraction(degree === undefined ? 1 : degree)\r\n        this._fn = mathFunction\r\n        this._powerAsInteger = true\r\n        this._forceParenthesis = true\r\n    }\r\n\r\n    private _forceParenthesis: boolean\r\n\r\n    get forceParenthesis(): boolean {\r\n        return this._forceParenthesis;\r\n    }\r\n\r\n    set forceParenthesis(value: boolean) {\r\n        this._forceParenthesis = value;\r\n    }\r\n\r\n    private _fn: PolynomExpMathFunctionType\r\n\r\n    get fn(): PolynomExpMathFunctionType {\r\n        return this._fn;\r\n    }\r\n\r\n    set fn(value: PolynomExpMathFunctionType) {\r\n        this._fn = value;\r\n    }\r\n\r\n    private _powerAsInteger: boolean\r\n\r\n    get powerAsInteger(): boolean {\r\n        return this._powerAsInteger;\r\n    }\r\n\r\n    set powerAsInteger(value: boolean) {\r\n        this._powerAsInteger = value;\r\n    }\r\n\r\n    private _polynom: Polynom\r\n\r\n    get polynom(): Polynom {\r\n        return this._polynom;\r\n    }\r\n\r\n    set polynom(value: Polynom) {\r\n        this._polynom = value;\r\n    }\r\n\r\n    private _degree: Fraction\r\n\r\n    get degree(): Fraction {\r\n        return this._degree;\r\n    }\r\n\r\n    set degree(value: Fraction) {\r\n        this._degree = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let tex\r\n\r\n        if (this._degree.isOne() && (this._fn !== undefined || !this._forceParenthesis)) {\r\n            // If degree is one, no need to add the parenthesis.\r\n            tex = this._polynom.tex\r\n        } else {\r\n            // the degree is not one, add the parenthesis.\r\n            if (this._powerAsInteger && !this._degree.isRelative()) {\r\n                // the degree is a fraction and we want natural powers => use sqrt.\r\n                tex = `\\\\sqrt${this._degree.denominator !== 2 ? `[ ${this._degree.denominator} ]` : ''}{ ${this._polynom.tex} }^{ ${this._degree.numerator} }`\r\n            } else if (this.isCoefficient && this.firstCoefficient.isNatural()) {\r\n                // the value is a natural number (eg 3, 7, ...)\r\n                tex = this._polynom.tex + this._texDegree\r\n            } else {\r\n                // In any other case, add the parenthesis by default\r\n                tex = `\\\\left( ${this._polynom.tex} \\\\right)${this._texDegree}`\r\n            }\r\n        }\r\n\r\n        if (this._fn !== undefined && this._fn.tex !== undefined) {\r\n            tex = `${this._fn.tex}\\\\left( ${tex} \\\\right)`\r\n        }\r\n        return tex\r\n    }\r\n\r\n    get isCoefficient(): boolean {\r\n        // TODO: Maybe reduce the coefficient if it isn't of degree one.\r\n        return this._polynom.degree().isZero();\r\n\r\n    }\r\n\r\n    get firstCoefficient(): Fraction {\r\n        return this._polynom.monomByDegree().coefficient\r\n    }\r\n\r\n    private get _texDegree(): string {\r\n        if (this._degree.isOne()) {\r\n            return ''\r\n        } else {\r\n            return `^{ ${this._degree.tfrac} }`\r\n        }\r\n    }\r\n\r\n    setForceParenthesis(value?: boolean): PolynomExpFactor {\r\n        this._forceParenthesis = value === undefined || value\r\n        return this\r\n    }\r\n\r\n    derivative(letter?: string): PolynomExpProduct {\r\n        if (this._degree.isOne()) {\r\n            return new PolynomExpProduct(\r\n                new PolynomExpFactor(this._polynom.clone().derivative(letter))\r\n            )\r\n        } else {\r\n            return new PolynomExpProduct(\r\n                new PolynomExpFactor(this._degree.clone()),\r\n                new PolynomExpFactor(this._polynom.clone().derivative(letter)),\r\n                new PolynomExpFactor(this._polynom.clone(), this._degree.clone().subtract(1))\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport class PolynomExpProduct {\r\n    constructor(...values: PolynomExpFactor[]) {\r\n        this._factors = values || []\r\n        this._positive = true\r\n        this._asPositiveDegree = true\r\n    }\r\n\r\n    private _fn: PolynomExpMathFunctionType\r\n\r\n    get fn(): PolynomExpMathFunctionType {\r\n        return this._fn;\r\n    }\r\n\r\n    set fn(value: PolynomExpMathFunctionType) {\r\n        this._fn = value;\r\n    }\r\n\r\n    private _factors: PolynomExpFactor[]\r\n\r\n    get factors(): PolynomExpFactor[] {\r\n        return this._factors;\r\n    }\r\n\r\n    set factors(value: PolynomExpFactor[]) {\r\n        this._factors = value;\r\n    }\r\n\r\n    private _positive: boolean\r\n\r\n    get positive(): boolean {\r\n        return this._positive;\r\n    }\r\n\r\n    set positive(value: boolean) {\r\n        this._positive = value;\r\n    }\r\n\r\n    private _asPositiveDegree: boolean\r\n\r\n    get asPositiveDegree(): boolean {\r\n        return this._asPositiveDegree;\r\n    }\r\n\r\n    set asPositiveDegree(value: boolean) {\r\n        this._asPositiveDegree = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let parenthesis = this._factors.length>1\r\n        // Default value\r\n        let tex = this._factors.map(factor => factor.setForceParenthesis(parenthesis).tex).join(' \\\\cdot ')\r\n\r\n        // Change the value in some cases...\r\n        if (this._asPositiveDegree) {\r\n            const numerators = this._factors.filter(x => x.degree.isPositive()),\r\n                denominators = this._factors.filter(x => x.degree.isNegative())\r\n\r\n            let numeratorsAsTex, denominatorsAsTex\r\n\r\n            if (denominators.length > 0) {\r\n                if (numerators.length === 0) {\r\n                    numeratorsAsTex = [1]\r\n                } else if (numerators.length === 1) {\r\n                    numeratorsAsTex = [numerators[0].setForceParenthesis(false).tex]\r\n                } else {\r\n                    parenthesis = numerators.length>1\r\n                    numeratorsAsTex = numerators.map(factor => factor.setForceParenthesis(parenthesis).tex)\r\n                }\r\n\r\n                // Change all denominators degrees to positive.\r\n                denominators.map(x => x.degree.opposed())\r\n                if (denominators.length === 1) {\r\n                    denominatorsAsTex = [denominators[0].setForceParenthesis(false).tex]\r\n                } else {\r\n                    parenthesis = denominators.length>1\r\n                    denominatorsAsTex = denominators.map(factor => factor.setForceParenthesis(parenthesis).tex)\r\n                }\r\n                // restore all degrees to negative again.\r\n                denominators.map(x => x.degree.opposed())\r\n\r\n                tex = `\\\\dfrac{ ${numeratorsAsTex.join(' \\\\cdot ')} }{ ${denominatorsAsTex.join(' \\\\cdot ')} }`\r\n            }\r\n        }\r\n\r\n        // Apply the modification\r\n        if (this._fn !== undefined && this._fn.name !== undefined && this._fn.name !== '') {\r\n            tex = `${this._fn.tex}\\\\left( ${tex} \\\\right)`\r\n        }\r\n        return tex\r\n    }\r\n\r\n    reduce(): PolynomExpProduct {\r\n        let coefficients = this._factors.filter(factor => factor.isCoefficient),\r\n            polynoms = this._factors.filter(factor => !factor.isCoefficient)\r\n\r\n        let result = new Fraction().one()\r\n\r\n        if (coefficients.length > 1) {\r\n            for (const factor of coefficients) {\r\n                if (factor.degree.isPositive()) {\r\n                    result.multiply(factor.polynom.monoms[0].coefficient.pow(factor.degree))\r\n                } else {\r\n                    result.divide(factor.polynom.monoms[0].coefficient.pow(factor.degree.clone().abs()))\r\n                }\r\n            }\r\n        } else if (coefficients.length === 1) {\r\n            result = coefficients[0].polynom.monoms[0].coefficient\r\n        }\r\n\r\n        if (result.isOne()) {\r\n            this._factors = [...polynoms]\r\n        } else if (!result.isRelative()) {\r\n            this._factors = [\r\n                new PolynomExpFactor(result.numerator),\r\n                new PolynomExpFactor(result.denominator, -1),\r\n                ...polynoms\r\n            ]\r\n        } else {\r\n            this._factors = [\r\n                new PolynomExpFactor(result),\r\n                ...polynoms\r\n            ]\r\n        }\r\n        return this\r\n    }\r\n\r\n    integrate(letter?: string): PolynomExpProduct {\r\n        // Handle this kind of case:\r\n        // A * f' * F^n\r\n        // A * f' / F^n, n != 1\r\n        // A * f_1 * f_2 * f_3, where (f_1 * f_2)' = f_3\r\n        if (this._factors.length === 2) {\r\n            // Check polynoms degree: one must of one degree less than the other.\r\n            let d1 = this._factors[0].polynom.degree(letter).value,\r\n                d2 = this._factors[1].polynom.degree(letter).value\r\n\r\n            if (d1 === d2 + 1) {\r\n                return this._integrateWithInternalDerivative(this._factors[0], this._factors[1], letter)\r\n            } else if (d1 + 1 === d2) {\r\n                return this._integrateWithInternalDerivative(this._factors[1], this._factors[0], letter)\r\n            }\r\n        }\r\n        return\r\n    }\r\n\r\n    public applyMathFunction(mathFn: PolynomExpMathFunctionType): PolynomExpProduct {\r\n        this._fn = mathFn\r\n        return this\r\n    }\r\n\r\n    private _integrateWithInternalDerivative(P: PolynomExpFactor, Pinternal: PolynomExpFactor, letter?: string): PolynomExpProduct {\r\n        // Get the internal derivative\r\n        let internalDerivative: Polynom = P.polynom.clone().derivative(letter)\r\n\r\n        // Get the factor.\r\n        let {quotient, reminder} = Pinternal.polynom.clone().euclidian(internalDerivative)\r\n\r\n        if (reminder.isZero() && quotient.degree(letter).isZero()) {\r\n            // All the conditions are done. Actual situation is\r\n            // (4x-10)(x^2-5x+7)^9\r\n            // P1 = (x^2-5x+7), P2 = (2x-5)\r\n            // => 1/10 * quotient * (x^2-5x+7)^10\r\n\r\n            if (P.degree.isEqual(-1)) {\r\n                return (new PolynomExpProduct(\r\n                    new PolynomExpFactor(quotient, 1),\r\n                    new PolynomExpFactor(P.polynom.clone(), 1, {\r\n                        name: 'ln', tex: '\\\\ln', fn: (x: number) => Math.log(x)\r\n                    })\r\n                ))\r\n            } else {\r\n                return new PolynomExpProduct(\r\n                    new PolynomExpFactor(P.degree.clone().add(1).invert(), 1),\r\n                    new PolynomExpFactor(quotient, 1),\r\n                    new PolynomExpFactor(P.polynom.clone(), P.degree.clone().add(1))\r\n                )\r\n            }\r\n        }\r\n        return\r\n    }\r\n}","import {Point} from \"./point\";\r\nimport {Fraction} from \"../coefficients\";\r\nimport {Equation, Monom, Polynom} from \"../algebra\";\r\nimport {Line, LinePropriety} from \"./line\";\r\nimport {Vector} from \"./vector\";\r\nimport {Triangle} from \"./triangle\";\r\nimport {Numeric} from \"../numeric\";\r\n\r\nexport class Circle {\r\n    constructor(...values: unknown[]) {\r\n        this._exists = false\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values)\r\n        }\r\n    }\r\n\r\n    private _center: Point;\r\n\r\n    get center(): Point {\r\n        return this._center;\r\n    }\r\n\r\n    private _squareRadius: Fraction;\r\n\r\n    get squareRadius(): Fraction {\r\n        return this._squareRadius\r\n    }\r\n\r\n    private _cartesian: Equation;\r\n\r\n    get cartesian(): Equation {\r\n        return this._cartesian\r\n    }\r\n\r\n    private _exists: boolean;\r\n\r\n    get exists(): boolean {\r\n        return this._exists;\r\n    }\r\n\r\n    get radius(): { tex: string, display: string, value: number } {\r\n        if (this._squareRadius.isSquare()) {\r\n            return {\r\n                tex: this._squareRadius.clone().sqrt().tex,\r\n                display: this._squareRadius.clone().sqrt().display,\r\n                value: this._squareRadius.clone().sqrt().value\r\n            }\r\n        } else {\r\n            return {\r\n                tex: `\\\\sqrt{${this._squareRadius.tex}}`,\r\n                display: `sqrt(${this._squareRadius.display})`,\r\n                value: this._squareRadius.clone().sqrt().value\r\n            }\r\n        }\r\n        return this._squareRadius\r\n    }\r\n\r\n    get tex(): string {\r\n\r\n        if (this._exists) {\r\n            let cx, cy\r\n            if (this._center.x.isZero()) {\r\n                cx = 'x^2'\r\n            } else {\r\n                cx = `\\\\left(x${this._center.x.isNegative() ? '+' : '-'}${this._center.x.clone().abs().tex}\\\\right)^2`\r\n            }\r\n            if (this._center.y.isZero()) {\r\n                cy = 'y^2'\r\n            } else {\r\n                cy = `\\\\left(y${this._center.y.isNegative() ? '+' : '-'}${this._center.y.clone().abs().tex}\\\\right)^2`\r\n            }\r\n            return `${cx}+${cy}=${this._squareRadius.tex}`\r\n        } else {\r\n            return `\\\\text{le cercle n'existe pas.}`\r\n        }\r\n    }\r\n\r\n    get developed(): string {\r\n        return this._cartesian.tex\r\n    }\r\n\r\n    // TODO: reformat code for better display.\r\n    get display(): string {\r\n        return this._cartesian.display\r\n    }\r\n\r\n    /**\r\n     * Get the relative position between circle and line. It corresponds to the number of intersection.\r\n     * @param {Line} L\r\n     * @returns {number}\r\n     */\r\n    relativePosition = (L: Line): number => {\r\n        let distance = L.distanceTo(this.center), radius = Math.sqrt(this._squareRadius.value)\r\n\r\n        if (distance.value - radius > 0.0000000001) {\r\n            return 0 // external\r\n        } else if (Math.abs(distance.value - radius) < 0.0000000001) {\r\n            return 1 // tangent\r\n        } else {\r\n            return 2 // external\r\n        }\r\n    }\r\n\r\n    lineIntersection = (L: Line): Point[] => {\r\n        let intersectionPoints: Point[] = [], solX: Fraction\r\n\r\n        if (this._cartesian === null) {\r\n            return []\r\n        }\r\n        const equX = this._cartesian.clone(), lineX = L.equation.clone().isolate('x'),\r\n            lineY = L.equation.clone().isolate('y')\r\n\r\n        if (lineX instanceof Equation && lineY instanceof Equation) {\r\n            equX.replaceBy('y', lineY.right).simplify()\r\n            equX.solve()\r\n\r\n            for (let x of equX.solutions) {\r\n                if (x.exact === false && isNaN(x.value)) {\r\n                    continue\r\n                }\r\n\r\n                solX = new Fraction(x.exact === false ? x.value : x.exact)\r\n                intersectionPoints.push(new Point(solX.clone(), lineY.right.evaluate(solX)))\r\n            }\r\n        }\r\n\r\n        return intersectionPoints\r\n    }\r\n\r\n    tangents = (P: Point | Fraction): Line[] => {\r\n        if (P instanceof Fraction) {\r\n            return this._tangentsWithSlope(P)\r\n        } else if (this.isPointOnCircle(P)) {\r\n            return this._tangentsThroughOnePointOnTheCircle(P)\r\n        } else if (this.center.distanceTo(P).value > this.radius.value) {\r\n            //TODO:  Must check it's outside the circle\r\n            return this._tangentsThroughOnePointOutsideTheCircle(P)\r\n        } else {\r\n            console.log('No tangents as the point is inside !')\r\n        }\r\n        return []\r\n    }\r\n\r\n    isPointOnCircle = (P: Point): Boolean => {\r\n        return this._cartesian.test({x: P.x, y: P.y})\r\n    }\r\n\r\n    getPointsOnCircle = (numberIsInteger?: boolean): Point[] => {\r\n        if (numberIsInteger === undefined) {\r\n            numberIsInteger = false\r\n        }\r\n\r\n        // It means searching for pythagorician triples that make a perfect square.\r\n        // (x-4)^2 + (y+3)^2 = 15\r\n\r\n        let triplets = Numeric.pythagoricianTripletsWithTarget(this._squareRadius.value, true)\r\n\r\n        let points: Point[] = [], pt\r\n        triplets.forEach(triplet => {\r\n            // Allow positive / negative values\r\n            // x-a = t  => x = a + t\r\n            // x-a = -t => x = a - t\r\n\r\n            for (let k of [[1, 1], [-1, 1], [-1, -1], [1, -1]]) {\r\n                pt = new Point(\r\n                    this.center.x.clone().add(k[0] * triplet[0]),\r\n                    this.center.y.clone().add(k[1] * triplet[1])\r\n                )\r\n                // Check if the point is not already in points.\r\n                if (!pt.isInListOfPoints(points)) {\r\n                    points.push(pt)\r\n                }\r\n            }\r\n        })\r\n        return points\r\n    }\r\n\r\n    clone(): Circle {\r\n        this._center = this._center.clone()\r\n        this._squareRadius = this._squareRadius.clone()\r\n        this._calculateCartesian()\r\n        return this\r\n    }\r\n\r\n    private _tangentsThroughOnePointOnTheCircle = (P: Point): Line[] => {\r\n        let CT = new Vector(this._center, P)\r\n        return [new Line(P, CT, LinePropriety.Perpendicular)]\r\n    }\r\n\r\n    private _tangentsThroughOnePointOutsideTheCircle = (P: Point): Line[] => {\r\n        // y = mx + h\r\n        // px, py => h = -m px + py => mx - y -m.px + py = 0 =>\r\n        // Centre: cx, cy, radius: r\r\n        // (m.cx - cy -m.px + py)^2 = r^2  * (m^2  + 1)\r\n        // (m(cx-py) - (cy - py))^2 = r^2  * (m^2  + 1)\r\n\r\n        let cx_px = this.center.x.clone().subtract(P.x), cy_py = this.center.y.clone().subtract(P.y),\r\n            polyLeft = new Polynom('x'), polyRight = new Polynom('x^2+1')\r\n\r\n        polyLeft.multiply(cx_px).subtract(cy_py).pow(2)\r\n        polyRight.multiply(this.squareRadius)\r\n\r\n        let equ = new Equation(polyLeft, polyRight)\r\n        equ.moveLeft().simplify().solve()\r\n\r\n        return equ.solutions.map(sol => {\r\n            //  h = -m px + py\r\n            let h, equ = new Equation('y', 'x')\r\n\r\n            if (sol.exact instanceof Fraction) {\r\n                h = P.x.clone().opposed().multiply(sol.exact).add(P.y)\r\n                equ.right.multiply(sol.exact).add(h)\r\n            } else {\r\n                h = P.x.clone().opposed().multiply(sol.value).add(P.y)\r\n                equ.right.multiply(sol.value).add(h)\r\n            }\r\n\r\n            return new Line(equ)\r\n        })\r\n\r\n    }\r\n\r\n    private _tangentsWithSlope = (slope: Fraction): Line[] => {\r\n        // d(C;t)=r => ac1+bc2 + x = +- sqrt(a^2 + b^2)*r\r\n        // x = -ac1-bc2  +-  sqrt(a^2 + b^2)*r\r\n        // y = a/bx + h => ax-by + H = 0\r\n\r\n        const a = slope.numerator, b = -slope.denominator, c1 = this._center.x.clone(), c2 = this._center.y.clone(),\r\n            r = this._squareRadius\r\n\r\n        let sq = this._squareRadius.clone().multiply(slope.numerator ** 2 + slope.denominator ** 2),\r\n            x1 = c1.clone().multiply(a).opposed().subtract(c2.clone().multiply(b)).add(sq.clone().sqrt()),\r\n            x2 = c1.clone().multiply(a).opposed().subtract(c2.clone().multiply(b)).subtract(sq.clone().sqrt())\r\n\r\n        return [new Line(a, b, x1), new Line(a, b, x2)]\r\n    }\r\n\r\n    private _reset(): Circle {\r\n        this._center = null\r\n        this._squareRadius = null\r\n        this._cartesian = null\r\n        this._exists = false\r\n\r\n        return this\r\n    }\r\n\r\n    private parse(...values: unknown[]): Circle {\r\n        // Data can be given in these formats:\r\n        // one value, a string -> make it an Equation\r\n        // one value, an Equation\r\n        // one value, a circle -> clone it\r\n        // two values: two points (center and pointThrough)\r\n        // two values: point and Fraction (center and radius)\r\n        // three values: Point, Fraction, Boolean (center, square radius, true)\r\n\r\n        this._reset()\r\n\r\n        if (typeof values[0] === 'string') {\r\n            this._parseEquation(new Equation(values[0]))\r\n        } else if (values[0] instanceof Equation) {\r\n            this._parseEquation(values[0])\r\n        } else if (values[0] instanceof Circle) {\r\n            this._parseCopyCircle(values[0])\r\n        } else if (values[0] instanceof Point && values.length > 1) {\r\n            if (values[1] instanceof Point) {\r\n                if (values[2] instanceof Point) {\r\n                    this._parseThroughtThreePoints(values[0], values[1], values[2])\r\n                } else {\r\n                    this._parseCenterAndPointThrough(values[0], values[1])\r\n                }\r\n            } else if (values[1] instanceof Fraction || typeof values[1] === 'number') {\r\n                this._parseCenterAndRadius(values[0], values[1], (typeof values[2] === \"boolean\") ? values[2] : false)\r\n            }\r\n        }\r\n\r\n        // Calculate once the different values.\r\n        if (this._exists) {\r\n            this._calculateCartesian()\r\n\r\n            // If the square radius is zero or positive, the circle exists.\r\n            if (this._squareRadius !== undefined && this._squareRadius.isNegative()) {\r\n                this._exists = false\r\n            }\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    private _calculateCartesian() {\r\n        this._cartesian = (new Equation(new Polynom(`(x-(${this._center.x.display}))^2+(y-(${this._center.y.display}))^2`), new Polynom(`${this._squareRadius.display}`))).moveLeft()\r\n    }\r\n\r\n    private _parseCopyCircle(circle: Circle): Circle {\r\n        this._center = circle.center.clone()\r\n        this._squareRadius = circle.squareRadius.clone()\r\n        this._calculateCartesian()\r\n        this._exists = circle.exists\r\n        return this\r\n    }\r\n\r\n    private _parseCenterAndRadius(center: Point, radius: Fraction | number, square?: boolean): Circle {\r\n        this._center = center.clone()\r\n\r\n        if (square) {\r\n            this._squareRadius = (new Fraction(radius))\r\n        } else {\r\n            this._squareRadius = new Fraction(radius).pow(2)\r\n        }\r\n\r\n        this._exists = true\r\n        return this\r\n    }\r\n\r\n    private _parseCenterAndPointThrough(center: Point, pointThrough: Point): Circle {\r\n        this._center = center.clone()\r\n        this._squareRadius = new Vector(this._center, pointThrough).normSquare\r\n        this._exists = true\r\n        return this\r\n    }\r\n\r\n    private _parseEquation(equ: Equation): Circle {\r\n        this._exists = false\r\n\r\n        // Move everything to the left.\r\n        equ.moveLeft()\r\n\r\n        if (equ.degree('x').value === 2 && equ.degree('y').value === 2) {\r\n            // Both must be of degree 2.\r\n            let x2 = equ.left.monomByDegree(2, 'x'), y2 = equ.left.monomByDegree(2, 'y'), x1: Monom, y1: Monom, c: Monom\r\n\r\n            // Both square monoms must have the same coefficient.\r\n            if (x2.coefficient.isEqual(y2.coefficient)) {\r\n                equ.divide(x2.coefficient)\r\n\r\n                x1 = equ.left.monomByDegree(1, 'x')\r\n                y1 = equ.left.monomByDegree(1, 'y')\r\n\r\n                c = equ.left.monomByDegree(0)\r\n\r\n                this._center = new Point(x1.coefficient.clone().divide(2).opposed(), y1.coefficient.clone().divide(2).opposed())\r\n\r\n                this._squareRadius = c.coefficient.clone().opposed()\r\n                    .add(this._center.x.clone().pow(2))\r\n                    .add(this._center.y.clone().pow(2))\r\n\r\n                this._calculateCartesian()\r\n                this._exists = true\r\n            } else {\r\n                // The circle is not a valid circle\r\n                this._center = null\r\n                this._squareRadius = null\r\n                this._exists = false\r\n            }\r\n        }\r\n        return this\r\n    }\r\n\r\n    private _parseThroughtThreePoints(A: Point, B: Point, C: Point): Circle {\r\n        let T = new Triangle(A, B, C), mAB = T.remarquables.mediators.AB.clone(),\r\n            mAC = T.remarquables.mediators.AC.clone()\r\n        this.parse(mAB.intersection(mAC).point, A)\r\n\r\n        return this\r\n    }\r\n\r\n}","export * from \"./vector\"\r\nexport * from \"./triangle\"\r\nexport * from \"./point\"\r\nexport * from \"./circle\"\r\nexport * from \"./line\"\r\n","/**\r\n * This class works for 2d line in a plane.\r\n */\r\n\r\nimport {Fraction} from \"../coefficients\";\r\nimport {Vector} from \"./vector\";\r\nimport {Point} from \"./point\";\r\nimport {Equation, Polynom} from \"../algebra\";\r\nimport {Numeric} from \"../numeric\";\r\n\r\nexport enum LinePropriety {\r\n    None,\r\n    Parallel='parallel',\r\n    Perpendicular = 'perpendicular',\r\n    Tangent = 'tangent'\r\n}\r\n\r\nexport class Line {\r\n    // A line is defined as the canonical form\r\n    // ax + by + c = 0\r\n    private _a: Fraction;\r\n    private _b: Fraction;\r\n    private _c: Fraction;\r\n    private _OA: Point;\r\n    private _d: Vector;\r\n    private _n: Vector;\r\n    private _exists: boolean\r\n\r\n    private _referencePropriety: LinePropriety\r\n    private _referenceLine: Line\r\n\r\n    static PERPENDICULAR = LinePropriety.Perpendicular\r\n    static PARALLEL = LinePropriety.Parallel\r\n\r\n    constructor(...values: unknown[]) {\r\n\r\n        this._exists = false;\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get exists(): boolean {\r\n        return this._exists;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equation(): Equation {\r\n        return new Equation(new Polynom().parse('xy', this._a, this._b, this._c), new Polynom('0')).simplify();\r\n    }\r\n\r\n    get tex(): { canonical: string, mxh: string, parametric: string } {\r\n        // canonical    =>  ax + by + c = 0\r\n        // mxh          =>  y = -a/b x - c/b\r\n        // parametric   =>  (xy) = OA + k*d\r\n\r\n        let canonical = this.equation;\r\n        // Make sur the first item is positive.\r\n        if (this._a.isNegative()) {\r\n            canonical.multiply(-1);\r\n        }\r\n\r\n        return {\r\n            canonical: canonical.tex,\r\n            mxh: this.slope.isInfinity() ? 'x=' + this.OA.x.tex : 'y=' + new Polynom().parse('x', this.slope, this.height).tex,\r\n            parametric: `${Point.pmatrix('x', 'y')} = ${Point.pmatrix(this._OA.x, this._OA.y)} + k\\\\cdot ${Point.pmatrix(this._d.x, this._d.y)}`\r\n        }\r\n    }\r\n\r\n    get a(): Fraction {\r\n        return this._a;\r\n    }\r\n\r\n    set a(value: Fraction) {\r\n        this._a = value;\r\n    }\r\n\r\n    get b(): Fraction {\r\n        return this._b;\r\n    }\r\n\r\n    set b(value: Fraction) {\r\n        this._b = value;\r\n    }\r\n\r\n    get c(): Fraction {\r\n        return this._c;\r\n    }\r\n\r\n    set c(value: Fraction) {\r\n        this._c = value;\r\n    }\r\n\r\n    get OA(): Point {\r\n        return this._OA;\r\n    }\r\n\r\n    set OA(value: Point) {\r\n        this._OA = value;\r\n    }\r\n\r\n    get d(): Vector {\r\n        return this._d;\r\n    }\r\n\r\n    get n(): Vector {\r\n        return this._n;\r\n    }\r\n\r\n    get normal(): Vector {\r\n        return new Vector(this._a, this._b);\r\n    }\r\n\r\n    get director(): Vector {\r\n        return this._d.clone()\r\n    }\r\n\r\n    set d(value: Vector) {\r\n        this._d = value;\r\n    }\r\n\r\n    get slope(): Fraction {\r\n        return this._a.clone().opposed().divide(this._b);\r\n    }\r\n\r\n    get height(): Fraction {\r\n        return this._c.clone().opposed().divide(this._b);\r\n    }\r\n\r\n// ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse data to a line\r\n     * @param {any} values\r\n     * @returns {Line}\r\n     */\r\n    parse = (...values: unknown[]): Line => {\r\n        this._exists = false;\r\n\r\n        // Nothing is given...\r\n        if (values.length === 0) {\r\n            return this\r\n        }\r\n\r\n        // One value only: already a line (clone it), an Equation, a string (as Equation)\r\n        if (values.length === 1) {\r\n            if (values[0] instanceof Line) {\r\n                // Already a Line\r\n                return values[0].clone()\r\n            } else if (values[0] instanceof Equation) {\r\n                // It's an Equation\r\n                return this.parseEquation(values[0])\r\n            } else if (typeof values[0] === \"string\") {\r\n                // It's a string - create an Equation from it.\r\n                try {\r\n                    let E = new Equation(values[0])\r\n                    return this.parse(E)\r\n                } catch (e) {\r\n                    return this\r\n                }\r\n            }\r\n        }\r\n\r\n        if (values.length === 2) {\r\n            if (values[0] instanceof Point && values[1] instanceof Vector) {\r\n                return this.parseByPointAndVector(values[0], values[1]);\r\n            } else if (values[0] instanceof Point && values[1] instanceof Point) {\r\n                return this.parseByPointAndVector(values[0], new Vector(values[0], values[1]));\r\n            } else if (values[0] instanceof Vector && values[1] instanceof Point) {\r\n                return this.parseByPointAndNormal(values[1], values[0])\r\n            }\r\n        }\r\n\r\n        if (values.length === 3) {\r\n            if (\r\n                (values[0] instanceof Fraction || typeof values[0] === 'number')\r\n                &&\r\n                (values[1] instanceof Fraction || typeof values[1] === 'number')\r\n                &&\r\n                (values[2] instanceof Fraction || typeof values[2] === 'number')\r\n            ) {\r\n                return this.parseByCoefficient(values[0], values[1], values[2]);\r\n            }else if (\r\n                values[0] instanceof Point && values[1] instanceof Vector\r\n            ){\r\n                if(values[2] === LinePropriety.Perpendicular){\r\n                    return this.parseByPointAndNormal(values[0], values[1])\r\n                }else if (values[2] === LinePropriety.Parallel){\r\n                    return this.parseByPointAndVector(values[0], values[1])\r\n                }\r\n            }\r\n        }\r\n\r\n        // TODO: Add the ability to create line from a normal vector\r\n        console.log('Someting wrong happend while creating the line')\r\n        return this;\r\n    }\r\n\r\n    parseEquation = (equ: Equation): Line => {\r\n        // Reorder the eequation\r\n        equ.reorder(true)\r\n\r\n        // It must contain either x, y or both.\r\n        let letters = new Set(equ.letters());\r\n\r\n        // No 'x', no 'y' in the equations\r\n        if (!(letters.has('x') || letters.has('y'))) {\r\n            return this\r\n        }\r\n\r\n        // Another letter in the equation ?\r\n        for (let elem of ['x', 'y']) {\r\n            if (letters.has(elem)) {\r\n                letters.delete(elem)\r\n            }\r\n        }\r\n\r\n        if (letters.size > 0) {\r\n            return this\r\n        }\r\n\r\n        // Everything should be ok now...\r\n        return this.parseByCoefficient(equ.left.monomByLetter('x').coefficient, equ.left.monomByLetter('y').coefficient, equ.left.monomByDegree(0).coefficient)\r\n    }\r\n    parseByCoefficient = (a: Fraction | number, b: Fraction | number, c: Fraction | number): Line => {\r\n        this._a = new Fraction(a);\r\n        this._b = new Fraction(b);\r\n        this._c = new Fraction(c);\r\n\r\n        this._d = new Vector(this._b.clone(), this._a.clone().opposed());\r\n        this._OA = new Point(new Fraction().zero(), this._c.clone());\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    parseByPointAndVector = (P: Point, d: Vector): Line => {\r\n        // OX = OP + k*d\r\n        // x = px + kdx     * dy\r\n        // y = py + kdy     * dx\r\n        // ------------------\r\n        // dy * x = px * dy + kdxdy\r\n        // dx * y = py * dx + kdxdy\r\n        // ------------------\r\n        // dy * x - dx * y = px * dy - py * dx\r\n        // dy * x - dx * y - (px * dy - py * dx) = 0\r\n        this.parseByCoefficient(\r\n            d.y,\r\n            d.x.clone().opposed(),\r\n            P.x.clone().multiply(d.y).subtract(P.y.clone().multiply(d.x)).opposed()\r\n        )\r\n\r\n        // Choose the current values as point and direction vector instead of the automatic version.\r\n        this._OA = P.clone();\r\n        this._d = d.clone();\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    parseByPointAndNormal = (P: Point, n: Vector): Line => {\r\n        return this.parseByCoefficient(\r\n            n.x,\r\n            n.y,\r\n            P.x.clone().multiply(n.x)\r\n                .add(P.y.clone().multiply(n.y)).opposed()\r\n        )\r\n    }\r\n\r\n    parseByPointAndLine = (P: Point, L: Line, orientation?: LinePropriety): Line => {\r\n\r\n        if (orientation === undefined) {\r\n            orientation = LinePropriety.Parallel\r\n        }\r\n\r\n        if (orientation === LinePropriety.Parallel) {\r\n            return this.parseByPointAndNormal(P, L.normal)\r\n        } else if (orientation === LinePropriety.Perpendicular) {\r\n            return this.parseByPointAndNormal(P, L.director)\r\n        }\r\n\r\n        this._exists = false\r\n        return this\r\n    }\r\n\r\n    clone = (): Line => {\r\n        this._a = this._a.clone();\r\n        this._b = this._b.clone();\r\n        this._c = this._c.clone();\r\n\r\n        this._d = this._d.clone();\r\n        this._OA = this._OA.clone();\r\n        this._n = this._n.clone();\r\n\r\n        this._exists = this.exists\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    isParellelTo = (line: Line): Boolean => {\r\n        // Do they have the isSame direction ?\r\n        return this.slope.isEqual(line.slope) && this.height.isNotEqual(line.height);\r\n    }\r\n    isSameAs = (line: Line): Boolean => {\r\n        return this.slope.isEqual(line.slope) && this.height.isEqual(line.height);\r\n    }\r\n    isVertical = (): Boolean => {\r\n        return this.slope.isInfinity()\r\n    }\r\n    simplify = (): Line => {\r\n        let lcm = Numeric.lcm(this._a.denominator, this._b.denominator, this._c.denominator),\r\n            gcd = Numeric.gcd(this._a.numerator, this._b.numerator, this._c.numerator);\r\n\r\n        this.parseByCoefficient(\r\n            this._a.clone().multiply(lcm).divide(gcd),\r\n            this._b.clone().multiply(lcm).divide(gcd),\r\n            this._c.clone().multiply(lcm).divide(gcd),\r\n        )\r\n\r\n        return this\r\n    }\r\n\r\n    simplifyDirection = (): Line => {\r\n        let lcm = Numeric.lcm(this._d.x.denominator, this._d.y.denominator),\r\n            gcd = Numeric.gcd(this._d.x.numerator, this._d.y.numerator);\r\n\r\n        this._d.x.multiply(lcm).divide(gcd);\r\n        this._d.y.multiply(lcm).divide(gcd);\r\n        return this;\r\n    }\r\n    intersection = (line: Line): { point: Point, hasIntersection: boolean, isParallel: boolean, isSame: boolean } => {\r\n        let Pt = new Point(), isParallel = false, isSame = false, hasIntersection = true;\r\n\r\n        // this         => ax+by+c = 0\r\n        // line         => dx+ey+f = 0\r\n        //\r\n        //  aex + bey + ce = 0\r\n        //  dbx + bey + bf = 0\r\n        // (ae-db)x + ce-bf = 0\r\n        //\r\n        //  adx + bdy + cd = 0\r\n        //  adx + aey + af = 0\r\n        // (bd-ae)y + (cd-af)\r\n        //\r\n        // x = (bf-ce)/(ae-db)\r\n        // y = (af-cd)/(bd-ae)\r\n\r\n\r\n        // Theres is no 'y'\r\n        if (this._b.isZero() || line.b.isZero()) {\r\n            // TODO : handle no y in the line canonical form\r\n        }\r\n\r\n        if (this.isParellelTo(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isParallel = true;\r\n        } else if (this.isSameAs(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isSame = true;\r\n        } else {\r\n            Pt.x = this._b.clone().multiply(line.c).subtract(this._c.clone().multiply(line.b))\r\n                .divide(this._a.clone().multiply(line.b).subtract(this._b.clone().multiply(line.a)));\r\n            Pt.y = this._a.clone().multiply(line.c).subtract(this._c.clone().multiply(line.a))\r\n                .divide(this._b.clone().multiply(line.a).subtract(this._a.clone().multiply(line.b)));\r\n        }\r\n\r\n        return {\r\n            point: Pt,\r\n            hasIntersection: !(isParallel || isSame),\r\n            isParallel,\r\n            isSame\r\n        };\r\n    }\r\n\r\n    distanceTo(pt: Point): { value: number, fraction: Fraction, tex: string } {\r\n        let numerator = pt.x.clone().multiply(this._a)\r\n                .add(pt.y.clone().multiply(this._b))\r\n                .add(this._c).abs(),\r\n            d2 = this.normal.normSquare;\r\n\r\n        // The denominator is null - shouldn't be possible\r\n        if (d2.isZero()) {\r\n            return {\r\n                value: NaN,\r\n                tex: 'Not a line',\r\n                fraction: new Fraction().infinite()\r\n            }\r\n        }\r\n        // The denominator is a perfect square - simplify the tex result\r\n        let value = numerator.value / Math.sqrt(d2.value),\r\n            F = numerator.clone().divide(d2.clone().sqrt());\r\n\r\n        // The denominator is a perfect square.\r\n        if (d2.isSquare()) {\r\n            return {\r\n                value,\r\n                tex: F.tex,\r\n                fraction: F\r\n            }\r\n        }\r\n        // Complete answer...\r\n        return {\r\n            value,\r\n            tex: `\\\\frac{${numerator.tex}}{\\\\sqrt{${d2.tex}}}`,\r\n            fraction: F\r\n        };\r\n    }\r\n\r\n    hitSegment(A: Point, B: Point): boolean {\r\n        let iPt = this.intersection(\r\n            new Line(A, B)\r\n        )\r\n\r\n        // There is an intersection point\r\n        if (iPt.hasIntersection) {\r\n            return iPt.point.x.value >= Math.min(A.x.value, B.x.value)\r\n                && iPt.point.x.value <= Math.max(A.x.value, B.x.value)\r\n                && iPt.point.y.value >= Math.min(A.y.value, B.y.value)\r\n                && iPt.point.y.value <= Math.max(A.y.value, B.y.value)\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getValueAtX = (value: Fraction|number): Fraction => {\r\n\r\n        const equ = this.equation.clone().isolate('y'),\r\n            F = new Fraction(value)\r\n\r\n        if(equ instanceof Equation){\r\n            return equ.right.evaluate({x: F})\r\n        }\r\n        return\r\n    }\r\n    getValueAtY = (value: Fraction|number): Fraction => {\r\n        const equ = this.equation.clone().isolate('x'),\r\n            F = new Fraction(value)\r\n\r\n        if(equ instanceof Equation){\r\n            return equ.right.evaluate({y: F})\r\n        }\r\n        return\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Special functions\r\n    // ------------------------------------------\r\n    canonicalAsFloatCoefficient(decimals: number): string {\r\n        if (decimals === undefined) {\r\n            decimals = 2;\r\n        }\r\n\r\n        let ca = this._a.value,\r\n            cb = this._b.value,\r\n            cc = this._c.value,\r\n            canonical = '';\r\n\r\n        if (!this._a.isZero()) {\r\n            if (this._a.isOne()) {\r\n                canonical = 'x'\r\n            } else if (this._a.clone().opposed().isOne()) {\r\n                canonical = '-x'\r\n            } else {\r\n                canonical = this._a.value.toFixed(decimals) + 'x'\r\n            }\r\n        }\r\n\r\n        if (!this._b.isZero()) {\r\n            if (this._b.isPositive()) {\r\n                canonical += '+'\r\n            }\r\n            canonical += this._b.value.toFixed(decimals) + 'y'\r\n        }\r\n\r\n        if (!this._c.isZero()) {\r\n            if (this._c.isPositive()) {\r\n                canonical += '+'\r\n            }\r\n            canonical += this._c.value.toFixed(decimals)\r\n        }\r\n\r\n\r\n        return canonical + '=0';\r\n    }\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Fraction} from \"../coefficients\"\r\nimport {Line} from \"./line\";\r\nimport {Vector} from \"./vector\";\r\n\r\n/**\r\n * Helper class - a way to identify an object {x: number, y: number}\r\n */\r\nclass PointXY {\r\n    public x: number\r\n    public y: number\r\n}\r\n\r\nexport class Point {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n    private _exist: Boolean;\r\n\r\n    constructor(...values: unknown[]) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.tex);\r\n        pts.push(this._y.tex);\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n\r\n    get display(): string {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.tex);\r\n        pts.push(this._y.tex);\r\n\r\n        return `(${pts.join(';')})`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...values: unknown[]): Point => {\r\n        // Initialize the value.\r\n        this.zero();\r\n\r\n        // Nothing is given\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        // One element is given - might be already a point !\r\n        if (values.length === 1) {\r\n            // it's already a point - clone it\r\n            if (values[0] instanceof Point) {\r\n                this._x = values[0].x.clone()\r\n                this._y = values[0].y.clone()\r\n                return this\r\n            }\r\n\r\n            // Value is given as string, comma separated.\r\n            if (typeof values[0] === 'string') {\r\n                let xy = values[0].split(',')\r\n                if (xy.length === 2) {\r\n                    this._x = new Fraction(xy[0]).reduce()\r\n                    this._y = new Fraction(xy[1]).reduce()\r\n                    return this\r\n                }\r\n            }\r\n\r\n            // Value given as an object with {x: value, y: value}\r\n            if(values[0] instanceof PointXY){\r\n                    this._x = new Fraction(values[0].x).reduce()\r\n                    this._y = new Fraction(values[0].y).reduce()\r\n                return this\r\n            } else {\r\n                return this.zero()\r\n            }\r\n        }\r\n\r\n        if (values.length === 2) {\r\n            this._x = new Fraction(values[0]).reduce()\r\n            this._y = new Fraction(values[1]).reduce()\r\n            return this\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Point => {\r\n        this._x = this._x.clone()\r\n        this._y = this._y.clone()\r\n\r\n        return this\r\n    }\r\n\r\n    zero = (): Point => {\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    origin = (): Point => {\r\n        this.zero();\r\n        return this;\r\n    }\r\n\r\n    middleOf = (P1: Point, P2: Point): Point => {\r\n        this._x = P1.x.clone().add(P2.x).divide(2);\r\n        this._y = P1.y.clone().add(P2.y).divide(2);\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Display functions\r\n    // ------------------------------------------\r\n    texValues = (numberOfDigits: number): string => {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.value.toFixed(numberOfDigits === undefined ? 2 : numberOfDigits));\r\n        pts.push(this._y.value.toFixed(numberOfDigits === undefined ? 2 : numberOfDigits));\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Static functions\r\n    // ------------------------------------------\r\n    static pmatrix = (a: any, b: any, c?: any): string => {\r\n        if (c === undefined) {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\end{pmatrix}`;\r\n        } else {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\\\\\ ${c.tex ? c.tex : c} \\\\end{pmatrix}`;\r\n        }\r\n    };\r\n\r\n    distanceTo = (item:Point|Line): { value: number, fraction: Fraction, tex: string } => {\r\n        let value = 0, fraction = new Fraction(), tex = ''\r\n\r\n        if(item instanceof Line){\r\n            return item.distanceTo(this)\r\n        }else if(item instanceof Point){\r\n            let V = new Vector(this, item)\r\n\r\n            value = V.norm\r\n            fraction = V.normSquare.sqrt()\r\n            tex = V.normSquare.isSquare()?fraction.tex:`\\\\sqrt{\\\\dfrac{ ${V.normSquare.numerator} }{ ${V.normSquare.denominator} }}`\r\n        }\r\n        return { value, fraction, tex }\r\n    }\r\n\r\n    get key(): string {\r\n      return `${this.x.display};${this.y.display}`\r\n}\r\n    isInListOfPoints = (list: Point[]): boolean => {\r\n        const keyList = list.map(x=>x.key)\r\n\r\n        return keyList.includes(this.key)\r\n    }\r\n}\r\n","import {Point} from \"./point\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Vector} from \"./vector\";\r\nimport {Line} from \"./line\";\r\nimport {Equation} from \"../algebra/equation\";\r\n\r\nexport interface remarquableLines {\r\n    'medians': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'mediators': {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line,\r\n        'intersection': Point\r\n    },\r\n    'heights': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'bisectors': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    }\r\n}\r\n\r\nexport class Triangle {\r\n    private _A: Point;\r\n    private _B: Point;\r\n    private _C: Point;\r\n    private _lines: {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line\r\n    };\r\n    private _middles: {\r\n        'AB': Point,\r\n        'AC': Point,\r\n        'BC': Point\r\n    };\r\n    private _remarquables: remarquableLines;\r\n\r\n\r\n    constructor(...values: any) {\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setters\r\n    // ------------------------------------------\r\n\r\n    get A(): Point {\r\n        return this._A;\r\n    }\r\n\r\n    get B(): Point {\r\n        return this._B;\r\n    }\r\n\r\n    get C(): Point {\r\n        return this._C;\r\n    }\r\n\r\n    get AB(): Vector {\r\n        return this.getSegment('A', 'B');\r\n    }\r\n\r\n    get BA(): Vector {\r\n        return this.getSegment('B', 'A');\r\n    }\r\n\r\n    get BC(): Vector {\r\n        return this.getSegment('B', 'C');\r\n    }\r\n\r\n    get CB(): Vector {\r\n        return this.getSegment('C', 'B');\r\n    }\r\n\r\n    get AC(): Vector {\r\n        return this.getSegment('A', 'C');\r\n    }\r\n\r\n    get CA(): Vector {\r\n        return this.getSegment('C', 'A');\r\n    }\r\n\r\n    get isRectangle(): boolean {\r\n        if (this.AB.isNormalTo(this.BC)) {\r\n            return true;\r\n        }\r\n        if (this.AB.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n        if (this.BC.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    get isEquilateral(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) &&\r\n            this.AB.normSquare.isEqual(this.AC.normSquare);\r\n    }\r\n\r\n    get isIsocele(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) ||\r\n            this.AB.normSquare.isEqual(this.AC.normSquare) ||\r\n            this.BC.normSquare.isEqual(this.AC.normSquare)\r\n    }\r\n\r\n    get lines(): { 'AB': Line, 'BC': Line, 'AC': Line } {\r\n        return this._lines;\r\n    }\r\n\r\n    get remarquables(): remarquableLines {\r\n        return this._remarquables;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Parse values to a triangle. Supported formats:\r\n     * Point, Point, Point\r\n     * x1, y1, x2, y2, x3, y3\r\n     * TODO: Something else ?\r\n     * @param values\r\n     */\r\n    parse = (...values: any): Triangle => {\r\n        if (values.length === 6) {\r\n            // Check if all values are number or fractions.\r\n            let v = values.map((x: any) => new Fraction(x));\r\n            return this.parse(\r\n                new Point(v[0], v[1]),\r\n                new Point(v[2], v[3]),\r\n                new Point(v[4], v[5]),\r\n            )\r\n        } else if (values.length === 3) {\r\n            // Possibilities:\r\n            // - Three points (or part of points, only dict for example, or array (TODO: Add the array syntax for point)\r\n            // - Three lines\r\n            // - Three lines as text.\r\n            if(values.filter((x:any) => typeof x === 'string').length===3) {\r\n                return this.parse( ...values.map((x:string) => new Line(x)) )\r\n            }else if(values.filter((x:any) => x instanceof Line).length===3) {\r\n                // We have three lines\r\n                this._lines = {\r\n                    'AB': values[0],\r\n                    'BC': values[1],\r\n                    'AC': values[2]\r\n                };\r\n\r\n                // Get the intersection points -> build the triangle using these intersection points.\r\n                let intersect = values[0].intersection(values[1]);\r\n                if (intersect.hasIntersection) {\r\n                    this._B = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[1].intersection(values[2]);\r\n                if (intersect.hasIntersection) {\r\n                    this._C = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[2].intersection(values[0]);\r\n                if (intersect.hasIntersection) {\r\n                    this._A = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n            }else {\r\n                // At least, one of the value is not a point.\r\n                if (values.filter((x: any) => (x instanceof Point)).length < 3) {\r\n                    return this.parse(\r\n                        new Point(values[0]),\r\n                        new Point(values[1]),\r\n                        new Point(values[2])\r\n                    )\r\n                }\r\n\r\n                // We have three points.\r\n                this._A = values[0].clone();\r\n                this._B = values[1].clone();\r\n                this._C = values[2].clone();\r\n\r\n                this._lines = {\r\n                    'AB': new Line(this._A, this._B),\r\n                    'BC': new Line(this._B, this._C),\r\n                    'AC': new Line(this._A, this._C)\r\n                };\r\n            }\r\n        } else if (values.length === 1) {\r\n            if (values[0] instanceof Triangle) {\r\n                return values[0].clone();\r\n            }\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the Triangle class\r\n     */\r\n    clone = (): Triangle => {\r\n        this._A = this._A.clone();\r\n        this._B = this._B.clone();\r\n        this._C = this._C.clone();\r\n\r\n        this._lines = {\r\n            'AB': this._lines.AB.clone(),\r\n            'BC': this._lines.BC.clone(),\r\n            'AC': this._lines.AC.clone()\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Triangle operations and properties\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Generate the Line object for the three segments of the triangle\r\n     */\r\n    private _updateTriangle = () => {\r\n        this._middles = {\r\n            'AB': new Point().middleOf(this._A, this._B),\r\n            'AC': new Point().middleOf(this._A, this._C),\r\n            'BC': new Point().middleOf(this._B, this._C)\r\n        }\r\n\r\n        this._remarquables = this._calculateRemarquableLines();\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the Point class for the given name\r\n     * @param ptName\r\n     */\r\n    private getPointByName = (ptName: string): Point => {\r\n        switch (ptName.toUpperCase()) {\r\n            case 'A':\r\n                return this._A;\r\n            case 'B':\r\n                return this._B;\r\n            case 'C':\r\n                return this._C;\r\n        }\r\n\r\n        // Something went wrong ! Return the first point\r\n        return this._A;\r\n    }\r\n    /**\r\n     * Get the vector for the segment given by name.\r\n     * @param ptName1\r\n     * @param ptName2\r\n     */\r\n    private getSegment = (ptName1: string, ptName2: string): Vector => {\r\n        return new Vector(\r\n            this.getPointByName(ptName1),\r\n            this.getPointByName(ptName2)\r\n        );\r\n    }\r\n\r\n    private _calculateRemarquableLines = (): remarquableLines => {\r\n        let remarquables: remarquableLines = {\r\n            'medians': {\r\n                'A': new Line(this._A, this._middles.BC),\r\n                'B': new Line(this._B, this._middles.AC),\r\n                'C': new Line(this._C, this._middles.AB),\r\n                'intersection': null\r\n            },\r\n            'mediators': {\r\n                'AB': new Line(this._middles.AB, new Vector(this._A, this._B).normal()),\r\n                'AC': new Line(this._middles.AC, new Vector(this._A, this._C).normal()),\r\n                'BC': new Line(this._middles.BC, new Vector(this._B, this._C).normal()),\r\n                'intersection': null\r\n            },\r\n            'heights': {\r\n                'A': new Line(this._A, new Vector(this._B, this._C).normal()),\r\n                'B': new Line(this._B, new Vector(this._A, this._C).normal()),\r\n                'C': new Line(this._C, new Vector(this._A, this._B).normal()),\r\n                'intersection': null\r\n            },\r\n            'bisectors': {\r\n                'A': this._calculateBisectors('A'),\r\n                'B': this._calculateBisectors('B'),\r\n                'C': this._calculateBisectors('C'),\r\n                'intersection': null\r\n            }\r\n        }\r\n\r\n        // As it's a triangle, we assume the lines are intersecting and aren't parallel or superposed.\r\n        remarquables.medians.intersection = remarquables.medians.A.intersection(remarquables.medians.B).point;\r\n        remarquables.mediators.intersection = remarquables.mediators.AB.intersection(remarquables.mediators.BC).point;\r\n        remarquables.heights.intersection = remarquables.heights.A.intersection(remarquables.heights.B).point;\r\n        remarquables.bisectors.intersection = remarquables.bisectors.A.intersection(remarquables.bisectors.B).point;\r\n\r\n        // Everything was calculated for the remarquable lines.\r\n        return remarquables;\r\n    }\r\n\r\n    private _calculateBisectors = (pt: string): Line => {\r\n        let tlines = this.lines, d1, d2;\r\n\r\n        if(pt==='A'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.AC;\r\n        }else if(pt==='B'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.BC;\r\n        }else if(pt==='C'){\r\n            d1 = tlines.BC;\r\n            d2 = tlines.AC;\r\n        }\r\n\r\n        let b1 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm)).reorder(true).simplify()),\r\n            b2 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm).opposed()).reorder(true).simplify());\r\n\r\n        // Must determine which bisectors is in the triangle\r\n        if(pt==='A'){\r\n            return b1.hitSegment(this.B, this.C)?b1:b2;\r\n        }\r\n        if(pt==='B'){\r\n            return b1.hitSegment(this.A, this.C)?b1:b2;\r\n        }\r\n        if(pt==='C'){\r\n            return b1.hitSegment(this.B, this.A)?b1:b2;\r\n        }\r\n\r\n        // Default returns the first bisector\r\n        return b1;\r\n    }\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Point} from \"./point\";\r\n\r\nexport class Vector {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n\r\n    constructor(...values: any) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get normSquare(): Fraction {\r\n        return this._x.clone().pow(2).add(this._y.clone().pow(2));\r\n    }\r\n\r\n    get norm(): number {\r\n        return Math.sqrt(this.normSquare.value);\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\begin{pmatrix}${this._x.tex} \\\\\\\\\\ ${this._y.tex} \\\\end{pmatrix}`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Vector => {\r\n        // TODO: Must be more strict about what is given and limit to two dimensional vectors.p\r\n        // Maybe more than one value was given...\r\n        // Initialize the vector\r\n        this.zero();\r\n\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        if (values.length === 1) {\r\n            if (values[0] instanceof Vector) {\r\n                return values[0].clone()\r\n            } else {\r\n                return this._parseString(values[0])\r\n            }\r\n        }\r\n\r\n        if (values.length >= 2) {\r\n            // Two points are given - skip the third value.\r\n            if (values[0] instanceof Point && values[1] instanceof Point) {\r\n                this._x = values[1].x.clone().subtract(values[0].x)\r\n                this._y = values[1].y.clone().subtract(values[0].y)\r\n                return this;\r\n            }\r\n\r\n            // Fractions or a number are give\r\n            if (values[0] instanceof Fraction || !isNaN(values[0])) {\r\n                this._x = new Fraction(values[0])\r\n            }\r\n            if (values[1] instanceof Fraction || !isNaN(values[1])) {\r\n                this._y = new Fraction(values[1])\r\n            }\r\n\r\n            if(\r\n                (typeof values[0] === 'object' && !isNaN(values[0].x) && !isNaN(values[0].x)) &&\r\n                (typeof values[1] === 'object' && !isNaN(values[1].x) && !isNaN(values[1].x))\r\n            ){\r\n                this._x = new Fraction(+values[1].x-values[0].x)\r\n                this._y = new Fraction(+values[1].y-values[0].y)\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Vector => {\r\n        let V = new Vector();\r\n\r\n        if (this._x !== null) {\r\n            V.x = this._x.clone();\r\n        }\r\n        if (this._y !== null) {\r\n            V.y = this._y.clone();\r\n        }\r\n        return V;\r\n    }\r\n\r\n    reset = (): Vector => {\r\n        this._x = null;\r\n        this._y = null;\r\n        return this;\r\n    }\r\n\r\n    zero = (): Vector => {\r\n        this.reset();\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    one = (): Vector => {\r\n        this._x = new Fraction();\r\n        this._y = new Fraction();\r\n        return this;\r\n    }\r\n\r\n    private _parseString = (value: string): Vector => {\r\n        // Split comma, semi colon or single space.\r\n        let components = value.split(/[,;\\s]/g);\r\n\r\n        // Validate the fraction values.\r\n        this.x = new Fraction(components[0] || null);\r\n        this.y = new Fraction(components[1] || null);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Vector => {\r\n        this._x.opposed();\r\n        this._y.opposed();\r\n        return this;\r\n    }\r\n\r\n    add = (V: Vector): Vector => {\r\n        this._x.add(V.x);\r\n        this._y.add(V.y);\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (V: Vector): Vector => {\r\n        return this.add(V.clone().opposed());\r\n    }\r\n\r\n    scalarProductWithVector = (V: Vector): Fraction => {\r\n        // TODO: Add the scalar factor !!!!\r\n        return this._x.clone().multiply(V.x).add(this._y.clone().multiply(V.y));\r\n    }\r\n\r\n    static scalarProduct = (v1: Vector, v2: Vector): number => {\r\n        // TODO: Transform to fraction with nthroot.\r\n        return v1.x.value * v2.x.value + v1.y.value * v2.y.value;\r\n    };\r\n\r\n    normal = (): Vector => {\r\n        let x = this.x.clone().opposed(), y = this.y.clone();\r\n        this._x = y;\r\n        this._y = x;\r\n        return this;\r\n    }\r\n\r\n    isNormalTo = (v: Vector): boolean => {\r\n        return this.scalarProductWithVector(v).isZero()\r\n    }\r\n\r\n    multiplyByScalar = (k: any): Vector => {\r\n        let scalar = new Fraction(k);\r\n        this._x.multiply(scalar);\r\n        this._y.multiply(scalar);\r\n        return this;\r\n    }\r\n\r\n    divideByScalar = (k: any): Vector => {\r\n        return this.multiplyByScalar(new Fraction(k).invert());\r\n    }\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    simplify = (): Vector => {\r\n        // Multiply by the lcm of denominators.\r\n        return this.multiplyByScalar(Numeric.lcm(this._x.denominator, this._y.denominator))\r\n            .divideByScalar(Numeric.gcd(this._x.numerator, this._y.numerator));\r\n    }\r\n\r\n    angleWith = (V: Vector, sharp?: Boolean, radian?: Boolean): number => {\r\n        let scalar = this.scalarProductWithVector(V).value,\r\n            toDegree = radian ? 1 : 180 / Math.PI;\r\n        if (sharp) {\r\n            scalar = Math.abs(scalar);\r\n        }\r\n\r\n        return toDegree * Math.acos(scalar / (this.norm * V.norm));\r\n    }\r\n}\r\n","export class Numeric{\r\n    static round(value:number, decimals:number=2):number {\r\n        return Number(Math.round(Number(value+'e'+decimals))+'e-'+decimals);\r\n    }\r\n\r\n    /**\r\n     * Get the list of the nth first prime numbers.\r\n     * @param nb : number of primes to choose from\r\n     */\r\n    static prime(nb?:number):number[]{\r\n        let primes:number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973];\r\n        if(nb === undefined){\r\n            return primes;\r\n        }else{\r\n            return primes.slice(0,Math.max(primes.length,nb));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the list of all dividers of a number.\r\n     * @param value\r\n     */\r\n    static dividers(value:number):number[]{\r\n        let D: number[];\r\n        const maxV = Math.sqrt(Math.abs(value));\r\n\r\n        // Initialize the list of dividers.\r\n        D = [];\r\n\r\n        for(let i=1; i<=maxV; i++){\r\n            if(value%i===0){\r\n                D.push(i);\r\n                D.push(value/i);\r\n            }\r\n        }\r\n\r\n        // Order numbers.\r\n        D.sort(function(a, b){return a-b;});\r\n\r\n        // Make sure the array of value is unique.\r\n        return [...new Set(D)];\r\n    }\r\n    /**\r\n     * Great Common Divisor\r\n     * @param values : number values\r\n     */\r\n    static gcd(...values:number[]):number{\r\n        // Define the gcd for two number\r\n        let gcd2 = function(a:number,b:number):number{\r\n            if(b===0){return a;}\r\n            return gcd2(b, a%b);\r\n        };\r\n\r\n        let g:number = 1,\r\n            i:number = 2;\r\n\r\n        // Nothing is given\r\n        if(values.length===0){return 1;}\r\n        // Only one number is given\r\n        if(values.length===1){\r\n            // The first number is zero\r\n            if(values[0]===0){return 1;}\r\n            // Return the number\r\n            return values[0];\r\n        }\r\n\r\n        // We have at least 2 numbers.\r\n        g = gcd2(values[0],values[1]);\r\n\r\n        // The gcd of the two first value is one ? It's already finished.\r\n        if(g===1){return 1;}\r\n\r\n        // The current gcd isn't one. Continue with all next values.\r\n        for(i=2; i<values.length; i++){\r\n            g = gcd2(g, values[i]);\r\n            // Escape if gcd is already one.\r\n            if(g===1){break;}\r\n        }\r\n\r\n        return Math.abs(g);\r\n    }\r\n\r\n    /**\r\n     * Least Common Multiple\r\n     * @param values: list of numbers\r\n     */\r\n    static lcm(...values:number[]):number{\r\n        return values.reduce(function(a,b){\r\n            return Math.abs(a * b / Numeric.gcd(a, b));\r\n        });\r\n    }\r\n\r\n    static pythagoricianTripletsWithTarget(target: number, targetIsSquare?:boolean): number[][] {\r\n        // méthode inverse, à partir du triplet.\r\n        const triplets = [],\r\n            targetValue = targetIsSquare===true?+target:target**2\r\n        for(let u = 0; u <= target; u++){\r\n            for(let v = 0; v <=target; v++){\r\n                if(u**2+v**2===targetValue){\r\n                    triplets.push([u, v, target])\r\n                }\r\n            }\r\n        }\r\n\r\n        return triplets\r\n    }\r\n}","import {rndPolynom} from \"./rndPolynom\";\r\nimport {rndMonom} from \"./rndMonom\";\r\nimport {rndHelpers} from \"./rndHelpers\";\r\nimport {randomCoefficientConfig, randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {Monom, Polynom} from \"../algebra\";\r\nimport {Fraction} from \"../coefficients\";\r\nimport {rndFraction} from \"./rndFraction\";\r\n\r\nexport * from \"./rndTypes\"\r\n\r\nexport namespace Random {\r\n    export function polynom(config?: randomPolynomConfig): Polynom {\r\n        return (new rndPolynom(config)).generate()\r\n    }\r\n\r\n    export function monom(config?: randomMonomConfig): Monom {\r\n        return (new rndMonom(config)).generate()\r\n    }\r\n\r\n    export function fraction(config?: randomCoefficientConfig): Fraction {\r\n        return (new rndFraction(config)).generate()\r\n    }\r\n\r\n    export function number(from: number, to: number): number {\r\n        return rndHelpers.randomInt(from, to)\r\n    }\r\n\r\n    export function numberSym(max: number, allowZero?: boolean): number {\r\n        return rndHelpers.randomIntSym(max, allowZero)\r\n    }\r\n\r\n    export function bool(percent?: number): boolean {\r\n        return rndHelpers.randomBool(percent)\r\n    }\r\n\r\n    export function array(arr: any[], number?: number): any[] {\r\n        return rndHelpers.randomArray(arr, number)\r\n    }\r\n\r\n    export function item(arr: any[]): any {\r\n        return rndHelpers.randomItem(arr)\r\n    }\r\n\r\n    export function shuffle(arr: any[]): any {\r\n        rndHelpers.shuffleArray(arr)\r\n    }\r\n}","export class randomCore {\r\n    protected _config: Object\r\n    protected _defaultConfig: Object\r\n    mergeConfig = (config: Object, defaultConfig: Object): Object => {\r\n        if (config !== undefined) {\r\n            return {...defaultConfig, ...config}\r\n        }\r\n        return defaultConfig\r\n    }\r\n\r\n    generate = (): unknown => {\r\n        return undefined\r\n    }\r\n\r\n    config = (config: Object): randomCore => {\r\n        this._config = this.mergeConfig(config, this._defaultConfig)\r\n        return this\r\n    }\r\n}","import {randomCore} from \"./randomCore\";\r\nimport {randomCoefficientConfig, randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {Fraction} from \"../coefficients\";\r\nimport {Random} from \"./index\";\r\n\r\n/**\r\n * Create a random monom based on a based configuration\r\n */\r\nexport class rndFraction extends randomCore {\r\n    declare protected _config: randomCoefficientConfig\r\n    declare protected _defaultConfig: randomCoefficientConfig\r\n\r\n    constructor(userConfig?: randomCoefficientConfig) {\r\n        super();\r\n\r\n        this._defaultConfig = {\r\n            negative: true,\r\n            max: 10,\r\n            reduced: true,\r\n            zero: true,\r\n            natural: false\r\n        }\r\n\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Fraction => {\r\n        let Q = new Fraction()\r\n\r\n        if(this._config.negative){\r\n            Q.numerator = Random.numberSym(this._config.max, this._config.zero)\r\n        }else {\r\n            Q.numerator = Random.number(this._config.zero ? 0 : 1, this._config.max)\r\n        }\r\n        if(this._config.natural){\r\n            Q.denominator = 1\r\n        }else {\r\n            Q.denominator = Random.number(1, this._config.max)\r\n        }\r\n\r\n        return this._config.reduced?Q.reduce():Q\r\n    }\r\n}\r\n","/**\r\n * Random helpers\r\n */\r\nexport class rndHelpers {\r\n\r\n    /**\r\n     * Random boolean with a percent ratio\r\n     * @param percent\r\n     */\r\n    static randomBool(percent:number=0.5):boolean{\r\n        return Math.random()<percent;\r\n    }\r\n\r\n    /**\r\n     * Random integer between two values.\r\n     * @param a (number) : From this value to the second value. If the second is ommited, this value is the max value.\r\n     * @param b (number) : To this value. If this is ommited.\r\n     */\r\n    static randomInt(a:number, b?:number):number{\r\n        if(b===undefined){return this.randomInt(0,a);}\r\n\r\n        return Math.floor(Math.random() * (b - a + 1) + a);\r\n    }\r\n\r\n    /**\r\n     * Random integer between -max and max value.\r\n     * @param max (number) : determine the limits.\r\n     * @param zero (bool) : determine if zero is allowed or not.\r\n     */\r\n    static randomIntSym(max:number, zero?:boolean):number{\r\n        if(zero===false){\r\n            return this.randomBool()?this.randomInt(1,max):-this.randomInt(1,max);\r\n        }else{\r\n            return this.randomInt(-max, max);\r\n        }\r\n    }\r\n\r\n    static randomArray(arr: any[], number?:number):any[]{\r\n        if(number===undefined){number = 1}\r\n\r\n        // Return a clone array\r\n        if(arr.length<=0){return Object.values(arr)}\r\n\r\n        // Randomize the array and return the n first elements.\r\n        return rndHelpers.shuffleArray(arr).slice(0,number);\r\n    }\r\n\r\n    static randomItem(arr: any[]): any{\r\n        if(arr.length===0){return ''}\r\n        return this.randomArray(arr, 1)[0]\r\n    }\r\n\r\n    static shuffleArray(arr: any[]): any[] {\r\n        // The Fisher-Yates algorithm\r\n        let shuffleArray = Object.values(arr)\r\n        for (let i = shuffleArray.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            const temp = shuffleArray[i];\r\n            shuffleArray[i] = shuffleArray[j];\r\n            shuffleArray[j] = temp;\r\n        }\r\n\r\n        return shuffleArray;\r\n    }\r\n\r\n}","import {randomCore} from \"./randomCore\";\r\nimport {randomMonomConfig} from \"./rndTypes\";\r\nimport {Random} from \"./index\";\r\nimport {Monom} from \"../algebra\";\r\n\r\n/**\r\n * Create a random monom based on a based configuration\r\n */\r\nexport class rndMonom extends randomCore {\r\n    declare protected _config: randomMonomConfig\r\n    declare protected _defaultConfig: randomMonomConfig\r\n\r\n    constructor(userConfig?: randomMonomConfig) {\r\n        super();\r\n\r\n        this._defaultConfig = {\r\n            letters: 'x',\r\n            degree: 2,\r\n            fraction: true,\r\n            zero: false\r\n        }\r\n\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Monom => {\r\n        // Create a monom instance\r\n        let M = new Monom()\r\n\r\n        // Generate the coefficient\r\n        if (typeof this._config.fraction === \"boolean\") {\r\n            M.coefficient = Random.fraction({\r\n                zero: this._config.zero,\r\n                reduced: true,\r\n                natural: !this._config.fraction\r\n            })\r\n        } else {\r\n            M.coefficient = Random.fraction(this._config.fraction)\r\n        }\r\n\r\n        // Calculate the degree of the monom\r\n        if (this._config.letters.length > 1) {\r\n            // Initialise each items...\r\n            for (let L of this._config.letters.split('')) {\r\n                M.setLetter(L, 0);\r\n            }\r\n            for (let i = 0; i < this._config.degree; i++) {\r\n                const L = Random.item(this._config.letters.split(\"\"))\r\n                M.setLetter(L, M.degree(L).clone().add(1))\r\n            }\r\n        } else {\r\n            M.setLetter(this._config.letters, this._config.degree)\r\n        }\r\n\r\n        return M\r\n    }\r\n}\r\n","import {randomCore} from \"./randomCore\";\r\nimport {randomPolynomConfig} from \"./rndTypes\";\r\nimport {rndMonom} from \"./rndMonom\";\r\nimport {Random} from \"./index\";\r\nimport {Polynom} from \"../algebra\";\r\nimport {Monom} from \"../algebra\";\r\n\r\n/**\r\n * Random polynoms\r\n */\r\nexport class rndPolynom extends randomCore {\r\n    declare protected _config: randomPolynomConfig\r\n    declare protected _defaultConfig: randomPolynomConfig\r\n\r\n    constructor(userConfig?: randomPolynomConfig) {\r\n        super();\r\n\r\n        // Default config for a random polynom\r\n        this._defaultConfig = {\r\n            letters: 'x',\r\n            degree: 2,\r\n            fraction: false,\r\n            zero: false,\r\n            unit: false,\r\n            factorable: false,\r\n            allowNullMonom: true,\r\n            numberOfMonoms: 0,\r\n            positive: true\r\n        }\r\n\r\n        // Merge config with initialiser\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Polynom => {\r\n        if(this._config.factorable && this._config.degree>1){\r\n            return this.factorable()\r\n        }\r\n\r\n        // Create the polynom\r\n        let P = new Polynom().empty(),\r\n            M: Monom\r\n\r\n        for (let i = this._config.degree; i >= 0; i--) {\r\n            // Create monom of corresponding degree.\r\n            M = new rndMonom({\r\n                letters: this._config.letters,\r\n                degree: i,\r\n                fraction: this._config.fraction,\r\n                zero: (i === this._config.degree) ? false : this._config.allowNullMonom\r\n            }).generate()\r\n\r\n            // If degree is the greatest and unit is true, set the monom value to one.\r\n            if (this._config.unit && this._config.degree === i) {\r\n                M.coefficient.one()\r\n            }\r\n\r\n            // Add to the polynom\r\n            P.add(M)\r\n        }\r\n\r\n        // Make sure the first monom is positive.\r\n        if(this._config.positive && P.monomByDegree().coefficient.isNegative()){\r\n            P.monomByDegree().coefficient.opposed()\r\n        }\r\n\r\n        // If the number of monoms is greater than the allowed value, remove some of them... except the first one !\r\n        if (this._config.numberOfMonoms > 0 && this._config.numberOfMonoms < P.length) {\r\n            // Get the greatest degree monom\r\n            let M = P.monomByDegree().clone()\r\n            P.monoms = Random.array(P.monoms.slice(1), this._config.numberOfMonoms-1)\r\n            P.add(M).reorder().reduce()\r\n        }\r\n        return P\r\n    }\r\n\r\n    factorable = (): Polynom => {\r\n        let P = new Polynom().one()\r\n\r\n        let _factorableConfig = {...this._config}\r\n        _factorableConfig.degree = 1\r\n        _factorableConfig.factorable = false\r\n\r\n        for(let i=0; i<this._config.degree;i++){\r\n            P.multiply(Random.polynom(_factorableConfig))\r\n        }\r\n\r\n        return P\r\n    }\r\n}","import {loadHighlighter} from \"typedoc/dist/lib/utils/highlighter\";\r\nimport exp = require(\"constants\");\r\n\r\nexport type tokenType = {\r\n    [key: string]: {\r\n        precedence: number,\r\n        associative: string,\r\n        type: string\r\n    }\r\n}\r\n\r\nexport const tokenConstant:{[Key:string]:number} = {\r\n    pi: Math.PI,\r\n    e: Math.exp(1)\r\n}\r\n\r\nexport enum ShutingyardType {\r\n    VARIABLE='variable',\r\n    COEFFICIENT='coefficient',\r\n    OPERATION = 'operation',\r\n    CONSTANT = 'constant',\r\n    FUNCTION = 'function',\r\n    MONOM = 'monom'\r\n}\r\n\r\nexport enum ShutingyardMode {\r\n    POLYNOM= 'polynom',\r\n    SET = 'set',\r\n    NUMERIC = 'numeric'\r\n}\r\n\r\nexport type Token = { token: string, tokenType: string }\r\n\r\nexport class Shutingyard {\r\n    private _rpn: Token[] = [];\r\n    readonly _mode: ShutingyardMode;\r\n    private _tokenConfig: tokenType;\r\n    private _tokenConstant: {[Key:string]: number}\r\n    private _uniformize: boolean;\r\n    private _tokenKeys: string[]\r\n\r\n    constructor(mode?: ShutingyardMode ) {\r\n        this._mode = typeof mode === 'undefined' ? ShutingyardMode.POLYNOM : mode;\r\n        this.tokenConfigInitialization()\r\n    }\r\n\r\n    /**\r\n     * Determin if the token is a defined operation\r\n     * Defined operations: + - * / ^ sin cos tan\r\n     * @param token\r\n     */\r\n    // isOperation(token: string): boolean {\r\n    //     if (token[0].match(/[+\\-*/^]/g)) {\r\n    //         return true;\r\n    //     }\r\n    //     //\r\n    //     // if (token.match(/^sin|cos|tan/g)) {\r\n    //     //     return true;\r\n    //     // }\r\n    //\r\n    //     return false;\r\n    // }\r\n\r\n    tokenConfigInitialization(): tokenType {\r\n        if (this._mode === ShutingyardMode.SET) {\r\n            this._tokenConfig = {\r\n                '&': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '|': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '!': {precedence: 4, associative: 'right', type: ShutingyardType.OPERATION},\r\n                '-': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION}\r\n            }\r\n            this._uniformize = false;\r\n        }else if (this._mode === ShutingyardMode.NUMERIC){\r\n            this._tokenConfig = {\r\n                '^': {precedence: 4, associative: 'right', type: ShutingyardType.OPERATION},\r\n                '*': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '/': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '+': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '-': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '%': {precedence: 3, associative: 'right', type: ShutingyardType.OPERATION},\r\n                'sin': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'cos': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'tan': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'sqrt': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n            }\r\n            this._uniformize = false\r\n        } else {\r\n            this._tokenConfig = {\r\n                '^': {precedence: 4, associative: 'right', type: ShutingyardType.OPERATION},\r\n                '*': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '/': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '+': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '-': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                // '%': {precedence: 3, associative: 'right', type: ShutingyardType.OPERATION},\r\n                // 'sin': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                // 'cos': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                // 'tan': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n            }\r\n            this._uniformize = true\r\n        }\r\n\r\n        this._tokenKeys = Object.keys(this._tokenConfig).sort((a,b)=>b.length-a.length)\r\n        return this._tokenConfig\r\n    }\r\n\r\n    /**\r\n     * Get the next token to analyse.\r\n     * @param expr (string) Expression to analyse\r\n     * @param start (number) CUrrent position in the expr string.\r\n     */\r\n    NextToken(expr: string, start: number): [string, number, string] {\r\n        let token: string, tokenType: string;\r\n        token = '';\r\n        tokenType = '';\r\n        // Case of parenthesis or comma (generic items)\r\n        if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        } else{\r\n            // Order token keys by token characters length (descending)\r\n            // TODO: this is done each time ! SHould be done once !\r\n            // const keys = Object.keys(this._tokenConfig).sort((a,b)=>b.length-a.length)\r\n\r\n            // Extract operation and function tokens\r\n            for(let key of this._tokenKeys){\r\n                if(expr.substring(start, start+key.length) === key){\r\n                    token += key;\r\n                    tokenType = this._tokenConfig[key].type\r\n                    break\r\n                }\r\n            }\r\n\r\n            // Extract constant\r\n            for(let key in tokenConstant){\r\n                if(expr.substring(start, start+key.length) === key){\r\n                    token += key;\r\n                    tokenType = ShutingyardType.CONSTANT\r\n                    break\r\n                }\r\n            }\r\n\r\n            if(token===''){\r\n                // No function found ! Might be a coefficient !\r\n                if( expr[start].match(/[0-9]/) ) {\r\n                    if(this._mode === ShutingyardMode.POLYNOM && false) {\r\n                        token = expr.substring(start).match(/^([0-9.,/]+)/)[0]\r\n                    }else{\r\n                        token = expr.substring(start).match(/^([0-9.,]+)/)[0]\r\n                    }\r\n                    tokenType = ShutingyardType.COEFFICIENT\r\n                }else if (expr[start].match(/[a-zA-Z]/)) {\r\n                    token = expr.substring(start).match(/^([a-zA-Z])/)[0]\r\n                    tokenType = ShutingyardType.VARIABLE\r\n                }else{\r\n                    console.log('Unidentified token', expr[start], expr, start)\r\n                    token = expr[start]\r\n                    tokenType = ShutingyardType.MONOM\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    /**\r\n     * Sanitize an expression by adding missing common operation (multiplication between parentheseses)\r\n     * @param expr\r\n     * @constructor\r\n     */\r\n    Uniformizer(expr: string): string {\r\n        // Determiner if need to be uniformized\r\n        if(!this._uniformize){return expr}\r\n\r\n        let expr2;\r\n        // Replace missing multiplication between two parenthese\r\n        expr2 = expr.replace(/\\)\\(/g, ')*(');\r\n\r\n        // Replace missing multiplication between number or setLetter and parenthese.\r\n\r\n        // 3x(x-4) => 3x*(x-4)\r\n        expr2 = expr2.replace(/([\\da-zA-Z])(\\()/g, \"$1*$2\");\r\n\r\n        // (x-4)3x => (x-4)*3x\r\n        expr2 = expr2.replace(/(\\))([\\da-zA-Z])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between number and letters.\r\n        // 3x => 3*x\r\n        expr2 = expr2.replace(/([0-9])([a-zA-Z])/g, \"$1*$2\");\r\n        expr2 = expr2.replace(/([a-zA-Z])([0-9])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between letters ?\r\n        // TODO: More robust solution to handle all letters ?\r\n        expr2 = expr2.replace(/([abcxyz])([abcxyz])/g, \"$1*$2\");\r\n\r\n        // Restore operation auto formating (prevent adding the mutliplcation star)\r\n        // TODO: Accept list of functions\r\n        let fnToken = ['sin', 'cos', 'tan']\r\n        for (let token of fnToken) {\r\n            expr2 = expr2.replace(new RegExp(token + '\\\\*', 'g'), token);\r\n        }\r\n\r\n        return expr2;\r\n    }\r\n\r\n    /**\r\n     * Parse an expression using the shutting yard tree algorithms\r\n     * @param expr (string) Expression to analyse\r\n     * Returns a RPN list of items.\r\n     * @param operators\r\n     */\r\n    parse(expr: string, operators?: string[]): Shutingyard {\r\n        let outQueue: {token:string, tokenType: string}[] = [],    // Output queue\r\n            opStack: {token:string, tokenType: string}[] = [],     // Operation queue\r\n            token: string = '',\r\n            tokenPos: number = 0,\r\n            tokenType: string = '',\r\n            previousOpStatckLength = 0\r\n\r\n        expr = this.Uniformizer(expr);\r\n\r\n        let securityLoopLvl1 = 50,\r\n            securityLoopLvl2_default = 50,\r\n            securityLoopLvl2;\r\n\r\n        while (tokenPos < expr.length) {\r\n            securityLoopLvl1--;\r\n            if (securityLoopLvl1 === 0) {\r\n                console.log('SECURITY LEVEL 1 EXIT');\r\n                break;\r\n            }\r\n\r\n            // Get the next token and the corresponding new (ending) position\r\n            [token, tokenPos, tokenType] = this.NextToken(expr, tokenPos);\r\n\r\n            switch (tokenType) {\r\n                case 'monom':\r\n                case 'coefficient':\r\n                case 'variable':\r\n                case 'constant':\r\n                    outQueue.push({\r\n                        token,\r\n                        tokenType\r\n                    });\r\n                    // if(previousOpStatckLength == opStack.length && outQueue.length>=2){\r\n                    //     console.log('opStatckLength', outQueue, opStack.length)\r\n                    //     outQueue.push('*')\r\n                    // }\r\n                    break;\r\n                case 'operation':\r\n                    previousOpStatckLength = opStack.length;\r\n                    //If the token is an operator, o1, then:\r\n                    if (opStack.length > 0) {\r\n                        let opTop = opStack[opStack.length - 1];\r\n\r\n\r\n                        securityLoopLvl2 = +securityLoopLvl2_default;\r\n\r\n                        //while there is an operator token o2, at the top of the operator stack and\r\n                        while (opTop.token in this._tokenConfig && (\r\n                                //either o1 is left-associative and its precedence is less than or equal to that of o2,\r\n                                (this._tokenConfig[token].associative === 'left' && this._tokenConfig[token].precedence <= this._tokenConfig[opTop.token].precedence)\r\n                                ||\r\n                                //or o1 is right associative, and has precedence less than that of o2,\r\n                                (this._tokenConfig[token].associative === 'right' && this._tokenConfig[token].precedence < this._tokenConfig[opTop.token].precedence)\r\n                            )\r\n                            ) {\r\n\r\n                            /* Security exit ! */\r\n                            securityLoopLvl2--;\r\n                            if (securityLoopLvl2 === 0) {\r\n                                console.log('SECURITY LEVEL 2 OPERATION EXIT');\r\n                                break;\r\n                            }\r\n\r\n                            // Add the operation to the queue\r\n                            outQueue.push((opStack.pop()) || {token: '', tokenType: 'operation'});\r\n\r\n                            // Get the next operation on top of the Stack.\r\n                            if(opStack.length===0){break;}\r\n                            opTop = opStack[opStack.length - 1];\r\n                        }\r\n                    }\r\n                    //at the end of iteration push o1 onto the operator stack\r\n                    opStack.push({token,tokenType});\r\n                    break;\r\n                case 'function-argument':\r\n                    // TODO: check if the opStack exist.\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 0) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 FUNCTION ARGUMENT EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n                    break;\r\n                case '(':\r\n                    opStack.push({token,tokenType});\r\n                    // Add an empty value if next element is negative.\r\n                    if (expr[tokenPos] === '-') {\r\n                        outQueue.push({token: '0', tokenType: 'coefficient'});\r\n                    }\r\n                    break;\r\n                case ')':\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    //Until the token at the top of the stack is a left parenthesis, pop operators off the stack onto the output queue.\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 1 /*Maybe zero !? */) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 CLOSING PARENTHESE EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n\r\n                    //Pop the left parenthesis from the stack, but not onto the output queue.\r\n                    opStack.pop();\r\n                    break;\r\n                case 'function':\r\n                    opStack.push({token, tokenType});\r\n                    break;\r\n                default:\r\n                    // In theory, everything should be handled.\r\n                    console.log(`SHUTING YARD: ${tokenType} : ${token} `);\r\n            }\r\n\r\n            // Output\r\n            // console.log(outQueue.concat(opStack.reverse()).join(\" \"));\r\n        }\r\n\r\n        // console.log(outQueue.concat(opStack.reverse()));\r\n        this._rpn = outQueue.concat(opStack.reverse());\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    // Getter\r\n    get rpn() {\r\n        // console.log(this._rpn)\r\n        return this._rpn;\r\n    }\r\n\r\n\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import {Numeric} from \"./maths/numeric\";\r\nimport {NumExp} from \"./maths/expressions/numexp\";\r\nimport {Shutingyard} from \"./maths/shutingyard\";\r\nimport {Random} from \"./maths/random\";\r\nimport {Fraction, Nthroot} from \"./maths/coefficients\";\r\nimport {\r\n    Monom,\r\n    Polynom,\r\n    Equation,\r\n    LinearSystem,\r\n    Rational,\r\n    Logicalset,\r\n    PolynomExpFactor,\r\n    PolynomExpProduct\r\n} from \"./maths/algebra\";\r\nimport {Line, Circle, Triangle, Point, Vector} from \"./maths/geometry\";\r\n\r\n// Expose as global\r\n// export let Pi = {\r\n(<any>window).Pi = {\r\n    ShutingYard: Shutingyard,\r\n    Numeric: Numeric,\r\n    NumExp: NumExp,\r\n    Fraction: Fraction,\r\n    Root: Nthroot,\r\n    Monom: Monom,\r\n    Polynom: Polynom,\r\n    Equation: Equation,\r\n    LinearSystem: LinearSystem,\r\n    Rational: Rational,\r\n    Logicalset: Logicalset,\r\n    Random: Random,\r\n    PolynomExpFactor: PolynomExpFactor,\r\n    PolynomExpProduct: PolynomExpProduct,\r\n    Geometry: {\r\n        Vector: Vector,\r\n        Point: Point,\r\n        Line: Line,\r\n        Triangle: Triangle,\r\n        Circle: Circle\r\n    }\r\n};\r\n"],"names":["Equation","constructor","equations","_varnothing","_real","_randomizeDefaults","degree","parse","equationString","pStr","strSign","this","_findSign","split","create","Polynom","_formatSign","console","error","left","right","sign","_left","_right","_sign","clone","randomize","opts","moveLeft","subtract","zero","reorder","allLeft","mMove","m","monoms","isZero","simplify","multiply","Numeric","lcm","getDenominators","divide","gcd","getNumerators","isolate","letter","isOne","isMultiVariable","cMove","hasLetter","add","opposed","length","coefficient","replaceBy","P","value","F","Fraction","_reverseSign","invert","max","letters","Set","solve","_solutions","_polynom","_solveDegree1","_solveDegree2","_solveDegree3plus","test","values","evaluate","isEqual","includes","log","signStr","undefined","replace","isGreater","indexOf","isStrictEqual","isAlsoEqual","m1","monomByDegree","m0","v","s","tex","NaN","exact","display","delta","nthDelta","realX1","realX2","sX1","sX2","aF","bF","cF","denominator","a","b","Math","sqrt","toFixed","Nthroot","reduce","hasRadical","S1","S2","dfrac","sol","solutions","isEquation","solution","map","x","join","isReal","isVarnothing","signAsTex","raw","variables","concat","numberOfVars","randomizeDefaults","LinearSystem","equationStrings","_equations","_findLetters","setCoefficient","coefficients","i","_letters","slice","toString","equ","push","setLetters","generate","solutionsF","_generateOneEquation","coeff","leftValue","equString","Random","numberSym","_checkIfLinerCombination","mergeEquations","eq1","eq2","factor1","factor2","eq1multiplied","eq2multiplied","E","_resolutionSteps","V","sort","_solveOneLetter","str","isSolvable","equStr","LS","equArray","L","monomByLetter","repeat","_linearReduction","c1","c2","LE","reducedEquations","_rpn","Shutingyard","ShutingyardMode","SET","rpn","_rawString","isLogicalset","tokenSets","reference","referenceSet","varStack","key","token","tokenType","second","pop","first","filter","has","vennAB","A","B","vennABC","C","Monom","inputStr","_shutingYardToReducedMonom","_coefficient","_literal","copyLiterals","literal","stack","element","one","setLetter","addToken","k","makeSame","M","clean","isSameAs","multiplyByNumber","pow","nb","root","p","isSquare","compare","M1","M2","K","item","isLiteralSquare","isRational","isEven","hasFractionCoefficient","isNotZero","Object","t","n","r","tmpValues","derivative","d","dM","primitive","areSameAs","areEquals","literalSqrt","literalStr","matchAll","keys","isNotEqual","dividers","isRelative","numerator","abs","literals","_getLiteralDividers","monomDividers","N","arr","tmpList","litt","currentLetter","displayWithSign","texWithSign","isStrictlyPositive","tfrac","q1","q2","ShutingyardType","COEFFICIENT","VARIABLE","OPERATION","coeffN","coeffD","min","xmultiply","polynomString","_monoms","_factors","_parseString","empty","Number","isSafeInteger","multiplyByPolynom","multiplyByFraction","multiplyByMonom","multiplyByInteger","euclidian","quotient","reminder","maxMP","degreeP","newM","MaxIteration","geq","isPositive","divideByFraction","divideByInteger","cP1","cP2","isOpposedAt","isFactorized","match","e","polynomStringNormalized","replaceAll","polynomStringReduced","factors","substr","polyFactors","factorize","f","splice","isDeveloped","j","S","resultPolynom","forEach","monom","dP","integrate","valuesA","valuesB","tempPolynom","commonMonom","securityLoop","m2","m1d","m2d","result","dividerPolynom","getZeroes","zeroes","zeroesAsTex","greater","D","x1","x2","z","frac","monomsByDegree","Ms","denominators","numerators","lcmDenominator","gcdDenominator","lcmNumerator","gcdNumerator","genDisplay","output","forceSign","wrapParentheses","shutingYardToReducedPolynom","nbF","_factorize2ndDegree","P1","P2","c","factor","xyzPolynom","xFactors","_factorizeByGroups","texString","_texString","texFactors","isNaN","fractions","CONSTANT","MONOM","FUNCTION","_numerator","_denominator","domain","amplify","NumeratorEuclidien","DenominatorEuclidien","R","limits","Infinity","denominatorOrPeriodic","floor","infinite","invalid","Q","controlNumerator","g","compareFraction","lesser","than","leq","isOpposed","isInverted","isNegativeOne","isNegative","isStrictlyNegative","isInfinity","isFinite","isReduced","isNatural","isOdd","isFraction","radical","nthroot","_nth","_radical","_isValid","nth","_expression","NUMERIC","isValid","expression","_extractDecimalPart","decimal","substring","_numberCorrection","epsilon","n9","n0","mod0","mod9","_addToStack","tokenConstant","sin","cos","tan","PolynomExpFactor","polynom","mathFunction","_degree","_fn","_powerAsInteger","_forceParenthesis","forceParenthesis","fn","powerAsInteger","isCoefficient","firstCoefficient","_texDegree","setForceParenthesis","PolynomExpProduct","_positive","_asPositiveDegree","positive","asPositiveDegree","parenthesis","numeratorsAsTex","denominatorsAsTex","name","polynoms","d1","d2","_integrateWithInternalDerivative","applyMathFunction","mathFn","Pinternal","internalDerivative","Circle","relativePosition","distance","distanceTo","center","radius","_squareRadius","lineIntersection","solX","intersectionPoints","_cartesian","equX","lineX","equation","lineY","Point","tangents","_tangentsWithSlope","isPointOnCircle","_tangentsThroughOnePointOnTheCircle","_tangentsThroughOnePointOutsideTheCircle","y","getPointsOnCircle","numberIsInteger","pt","triplets","pythagoricianTripletsWithTarget","points","triplet","isInListOfPoints","CT","Vector","_center","Line","LinePropriety","Perpendicular","cx_px","cy_py","polyLeft","polyRight","squareRadius","h","slope","sq","_exists","cartesian","exists","cx","cy","developed","_calculateCartesian","_reset","_parseEquation","_parseCopyCircle","_parseThroughtThreePoints","_parseCenterAndPointThrough","_parseCenterAndRadius","circle","square","pointThrough","normSquare","y1","y2","T","Triangle","mAB","remarquables","mediators","AB","mAC","AC","intersection","point","parseEquation","parseByPointAndVector","parseByPointAndNormal","parseByCoefficient","Parallel","elem","delete","size","_a","_b","_c","_d","_OA","_n","normal","parseByPointAndLine","orientation","director","isParellelTo","line","height","isVertical","simplifyDirection","Pt","isParallel","isSame","hasIntersection","getValueAtX","getValueAtY","canonical","mxh","OA","parametric","pmatrix","fraction","hitSegment","iPt","canonicalAsFloatCoefficient","decimals","PERPENDICULAR","PARALLEL","_x","_y","xy","origin","middleOf","texValues","numberOfDigits","pts","norm","list","_lines","intersect","_B","_C","_A","_updateTriangle","BC","_middles","_remarquables","_calculateRemarquableLines","getPointByName","ptName","toUpperCase","getSegment","ptName1","ptName2","_calculateBisectors","medians","heights","bisectors","tlines","lines","b1","b2","BA","CB","CA","isRectangle","isNormalTo","isEquilateral","isIsocele","reset","components","scalarProductWithVector","multiplyByScalar","scalar","divideByScalar","angleWith","sharp","radian","toDegree","PI","acos","scalarProduct","v1","v2","static","round","primes","maxV","gcd2","target","targetIsSquare","targetValue","u","config","rndPolynom","rndMonom","rndFraction","number","from","to","rndHelpers","randomInt","allowZero","randomIntSym","bool","percent","randomBool","array","randomArray","randomItem","shuffle","shuffleArray","mergeConfig","defaultConfig","_config","_defaultConfig","randomCore","userConfig","super","negative","natural","reduced","random","temp","factorable","allowNullMonom","unit","numberOfMonoms","_factorableConfig","pi","exp","mode","_mode","POLYNOM","tokenConfigInitialization","_tokenConfig","precedence","associative","type","_uniformize","_tokenKeys","NextToken","expr","start","Uniformizer","expr2","fnToken","RegExp","operators","outQueue","opStack","tokenPos","previousOpStatckLength","securityLoopLvl2","securityLoopLvl1","opTop","reverse","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","window","Pi","ShutingYard","NumExp","Root","Rational","Logicalset","Geometry"],"sourceRoot":""}