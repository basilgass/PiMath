import type { IAlgebra, IAnalyse, IExpression, InputAlgebra, InputValue, IPiMathObject, literalType } from "../pimath.interface";
import { Fraction } from "../coefficients/fraction";
export declare class Monom implements IPiMathObject<Monom>, IExpression<Monom>, IAnalyse<Monom>, IAlgebra<Monom> {
    #private;
    constructor(value?: InputValue<Fraction>);
    constructor(value?: Monom);
    parse: (inputStr: InputAlgebra<Monom>) => this;
    clone: () => Monom;
    static gcd: (...monoms: Monom[]) => Monom;
    static xMultiply: (...monoms: Monom[]) => Monom;
    add: (...M: InputAlgebra<Fraction>[]) => this;
    get coefficient(): Fraction;
    set coefficient(F: InputValue<Fraction>);
    containsRationalPower: () => boolean;
    degree: (letter?: string) => Fraction;
    derivative: (letter?: string) => Monom;
    get display(): string;
    divide: (...M: InputAlgebra<Fraction>[]) => this;
    get dividers(): Monom[];
    evaluate: (values: literalType<number | Fraction> | InputValue<Fraction>, asNumeric?: boolean) => Fraction | number;
    hasVariable: (letter?: string) => boolean;
    integrate(a: InputValue<Fraction>, b: InputValue<Fraction>, letter?: string | undefined): Fraction;
    inverse: () => this;
    isDivisible: (div: Monom) => boolean;
    isEqual: (M: Monom) => boolean;
    isLiteralSquare: () => boolean;
    isOne: () => boolean;
    isSameAs: (M: Monom) => boolean;
    isSquare: () => boolean;
    isZero: () => boolean;
    get literal(): literalType<Fraction>;
    set literal(L: literalType<Fraction>);
    get literalSqrt(): literalType<Fraction>;
    set literalStr(inputStr: string);
    multiply: (...M: InputAlgebra<Fraction>[]) => this;
    one: () => this;
    opposite: () => this;
    get plotFunction(): string;
    pow: (nb: number | Fraction) => this;
    primitive: (letter?: string) => Monom;
    reduce: () => this;
    removeVariable(letter: string): void;
    root: () => this;
    setLetter: (letter: string, pow: InputValue<Fraction>) => this;
    sqrt: () => this;
    subtract: (...M: InputAlgebra<Fraction>[]) => this;
    get tex(): string;
    get variables(): string[];
    zero: () => this;
    private _cloneLiteral;
    private _evaluateAsNumeric;
    private _getLiteralDividers;
    private _shutingYardToReducedMonom;
    private _shutingYard_AddToken;
}
//# sourceMappingURL=monom.d.ts.map