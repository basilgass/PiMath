{"version":3,"file":"pi.js","mappings":"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","sources":["webpack://pimath/./src/maths/algebra/equation.ts","webpack://pimath/./src/maths/algebra/index.ts","webpack://pimath/./src/maths/algebra/linearSystem.ts","webpack://pimath/./src/maths/algebra/logicalset.ts","webpack://pimath/./src/maths/algebra/monom.ts","webpack://pimath/./src/maths/algebra/polynom.ts","webpack://pimath/./src/maths/algebra/rational.ts","webpack://pimath/./src/maths/coefficients/fraction.ts","webpack://pimath/./src/maths/coefficients/index.ts","webpack://pimath/./src/maths/coefficients/nthroot.ts","webpack://pimath/./src/maths/geometry/circle.ts","webpack://pimath/./src/maths/geometry/index.ts","webpack://pimath/./src/maths/geometry/line.ts","webpack://pimath/./src/maths/geometry/point.ts","webpack://pimath/./src/maths/geometry/triangle.ts","webpack://pimath/./src/maths/geometry/vector.ts","webpack://pimath/./src/maths/numeric.ts","webpack://pimath/./src/maths/numexp.ts","webpack://pimath/./src/maths/random/index.ts","webpack://pimath/./src/maths/random/randomCore.ts","webpack://pimath/./src/maths/random/rndFraction.ts","webpack://pimath/./src/maths/random/rndHelpers.ts","webpack://pimath/./src/maths/random/rndMonom.ts","webpack://pimath/./src/maths/random/rndPolynom.ts","webpack://pimath/./src/maths/shutingyard.ts","webpack://pimath/webpack/bootstrap","webpack://pimath/./src/main.ts"],"sourcesContent":["import {Polynom} from \"./polynom\";\r\nimport {Monom} from \"./monom\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Fraction, Nthroot} from \"../coefficients\";\r\n\r\n/**\r\n * Equation is a class to manage equations...\r\n */\r\ninterface ISolution {\r\n    tex: string,\r\n    value: number,\r\n    exact: unknown\r\n}\r\n\r\nexport class Equation {\r\n    private _left: Polynom;  // Left part of the equation\r\n    private _right: Polynom; // Right part of the equation\r\n    private _sign: string;   // Signe of the equation, by default =\r\n\r\n    private _polynom: Polynom;  // Used to solve the equation // TODO: remove the private value ?\r\n    private _solutions: ISolution[]\r\n\r\n    // Undetermined texSolutions.\r\n    private _varnothing: string = '\\\\varnothing';\r\n    private _real: string = '\\\\mathbb{R}';\r\n\r\n    /**\r\n     * Create an Equation using two polynoms.\r\n     * Markdown *support* is cool\r\n     * @param equations\r\n     */\r\n    constructor(...equations: unknown[]) {\r\n        // Default equation\r\n        this._left = new Polynom().zero();\r\n        this._right = new Polynom().zero();\r\n        this._sign = '=';\r\n\r\n        if (equations.length === 1) {\r\n            if(equations[0] instanceof Equation) {\r\n                return equations[0].clone();\r\n            } else if(typeof equations[0] === 'string') {\r\n                this.parse(equations[0]);\r\n            }\r\n        } else if (equations.length === 2) {\r\n            if(equations[0] instanceof Polynom){\r\n                this.left = equations[0].clone()\r\n            }else if(typeof equations[0] === 'string'){\r\n                this.left = new Polynom(equations[0])\r\n            }\r\n\r\n            if(equations[1] instanceof Polynom){\r\n                this.right = equations[1].clone()\r\n            }else if(typeof equations[1] === 'string'){\r\n                this.right = new Polynom(equations[1])\r\n            }\r\n        } else {\r\n            // Return default empty equation\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isEquation() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get solutions(): ISolution[] {\r\n        return this._solutions\r\n    }\r\n    get solution(): string {\r\n        if (this._solutions.length === 1\r\n            &&\r\n            (\r\n                this._solutions[0].tex === this._real\r\n                || this._solutions[0].tex === this._varnothing\r\n                || this._solutions[0].tex.includes('\\\\left')\r\n            )\r\n        ) {\r\n            return `S = ${this._solutions[0]}`;\r\n        }\r\n        return `S = \\\\left{ ${this._solutions.map(x => x.tex).join(';')} \\\\right}`;\r\n    }\r\n\r\n    get isReal(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0].tex === this._real;\r\n    }\r\n\r\n    get isVarnothing(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0].tex === this._varnothing;\r\n    }\r\n\r\n    get signAsTex(): string {\r\n        if (this._sign === '>=' || this._sign === '=>' || this._sign === 'geq') {\r\n            return '\\\\geq';\r\n        }\r\n        if (this._sign === '<=' || this._sign === '=<' || this._sign === 'leq') {\r\n            return '\\\\leq';\r\n        }\r\n        return this._sign;\r\n    }\r\n\r\n    get tex(): string {\r\n        return `${this._left.tex}${this.signAsTex}${this._right.tex}`;\r\n    }\r\n\r\n    get display(): string {\r\n        return `${this._left.display}${this.signAsTex}${this._right.display}`;\r\n    }\r\n\r\n\r\n    get raw(): string {\r\n        return `${this._left.raw}${this.signAsTex}${this._right.raw}`;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        return [...new Set(this._right.variables.concat(this._left.variables))];\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    get left(): Polynom {\r\n        return this._left;\r\n    }\r\n\r\n    set left(value: Polynom) {\r\n        this._left = value;\r\n    }\r\n\r\n    get right(): Polynom {\r\n        return this._right;\r\n    }\r\n\r\n    set right(value: Polynom) {\r\n        this._right = value;\r\n    }\r\n\r\n    get sign(): string {\r\n        return this._sign;\r\n    }\r\n\r\n    set sign(value: string) {\r\n        // Set the sign value as formatted.\r\n        this._sign = this._formatSign(value);\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (equationString: string): Equation => {\r\n        let pStr: string[], strSign: string | false;\r\n        // Find the string separator\r\n        strSign = this._findSign(equationString);\r\n\r\n        if (strSign === false) {\r\n            console.log('The equation is not valid (no sign found)');\r\n            return;\r\n        }\r\n\r\n        // The StrSign is found\r\n        pStr = equationString.split(strSign);\r\n\r\n        return this.create(new Polynom(pStr[0]), new Polynom(pStr[1]), this._formatSign(strSign));\r\n    };\r\n\r\n    private _findSign = (equationString: string): string | false => {\r\n        let strSign: string = '';\r\n\r\n        if (equationString.includes('geq')) {\r\n            return (equationString.includes('\\\\geq')) ? '\\\\geq' : 'geq';\r\n        } else if (equationString.includes('leq')) {\r\n            return (equationString.includes('\\\\leq')) ? '\\\\leq' : 'leq';\r\n        } else if (equationString.includes('>=')) {\r\n            return '>=';\r\n        } else if (equationString.includes('=>')) {\r\n            return '=>';\r\n        } else if (equationString.includes('>')) {\r\n            return '>';\r\n        } else if (equationString.includes('<=')) {\r\n            return '<=';\r\n        } else if (equationString.includes('=<')) {\r\n            return '=<';\r\n        } else if (equationString.includes('<')) {\r\n            return '<';\r\n        } else if (equationString.includes('=')) {\r\n            return '='\r\n        }\r\n        if (strSign === '') {\r\n            console.log('Equation: parse string : sign not found');\r\n            return false;\r\n        }\r\n    };\r\n\r\n    private _formatSign = (signStr: string): string => {\r\n        if (signStr === undefined) {\r\n            return '=';\r\n        }\r\n\r\n        if (signStr.includes('geq')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>=')) {\r\n            return '>=';\r\n        } else if (signStr.includes('=>')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>')) {\r\n            return '>';\r\n        } else if (signStr.includes('leq')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<=')) {\r\n            return '<=';\r\n        } else if (signStr.includes('=<')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<')) {\r\n            return '<';\r\n        } else {\r\n            return '='\r\n        }\r\n    };\r\n\r\n    private _reverseSign = (): Equation => {\r\n        if (this._sign === '=') {\r\n            return this;\r\n        }\r\n\r\n        if (this._sign.includes('<')) {\r\n            this._sign.replace('<', '>');\r\n            return this;\r\n        }\r\n        if (this._sign.includes('>')) {\r\n            this._sign.replace('>', '<');\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    create = (left: Polynom, right: Polynom, sign?: string): Equation => {\r\n        this._left = left;\r\n        this._right = right;\r\n        this._sign = this._formatSign(sign);\r\n        return this;\r\n    };\r\n\r\n    clone = (): Equation => {\r\n        return new Equation().create(this._left.clone(), this._right.clone(), this._sign + '');\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n    // -----------------------------------------------\r\n    private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n        degree: 2\r\n    };\r\n    get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n        return this._randomizeDefaults;\r\n    }\r\n\r\n    set randomizeDefaults(value) {\r\n        this._randomizeDefaults = value;\r\n    }\r\n\r\n    randomize = (opts?: {}, sign?: string): Equation => {\r\n        // TODO: Generate equations randomly, using config.\r\n        return new Equation().create(new Polynom(), new Polynom(), sign);\r\n    };\r\n\r\n\r\n    // -----------------------------------------------\r\n    // Equations operations\r\n    // -----------------------------------------------\r\n    /**\r\n     * Reorder will move all monoms containing a letter on the left, all the other on the right.\r\n     */\r\n    moveLeft = (): Equation => {\r\n        this._left = this._left.clone().subtract(this._right)\r\n        this._right.zero()\r\n        return this;\r\n    }\r\n    reorder = (allLeft?: boolean): Equation => {\r\n        // Move all monoms of degree greater than 0 to the left.\r\n        // and all zero degree monoms to the right.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n\r\n        if (allLeft) {\r\n            return this.moveLeft()\r\n        }\r\n        let mMove: Monom;\r\n        for (let m of this._left.monoms) {\r\n            if (m.degree().isZero()) {\r\n                mMove = m.clone();\r\n                this._left.subtract(mMove);\r\n                this._right.subtract(mMove);\r\n            }\r\n        }\r\n\r\n        // Reorder the left and right polynoms\r\n        this._left.reorder();\r\n        this._right.reorder();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiply by the lcm denominator and divide by the gcm numerators.\r\n     */\r\n    simplify = (): Equation => {\r\n        this.multiply(Numeric.lcm(...this._left.getDenominators(), ...this._right.getDenominators()));\r\n        this.divide(Numeric.gcd(...this._left.getNumerators(), ...this._right.getNumerators()));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Reorder the polynom to have only one letter on the left, the rest on the right.\r\n     * @param letter\r\n     */\r\n    isolate = (letter?: string): Equation | false => {\r\n        // Determine if we can isolate the variables.\r\n\r\n        // Both part of the equations must be of the first degree.\r\n        //TODO: handle equations of degree two or more ?\r\n        if (!this.degree(letter).isOne()) {\r\n            return false;\r\n        }\r\n\r\n        // Modify the equation to isolate the asked variable.\r\n        // TODO: must handle equations like 3xy+5y=4 => y = 4/(3x-5)\r\n        if (this.isMultiVariable()) {\r\n            return false;\r\n        }\r\n\r\n        // Isolate the letter.\r\n        let mMove: Monom, cMove: Fraction;\r\n        // Start by moving everything to the left.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n        for (let m of this._left.monoms) {\r\n            if (!m.hasLetter(letter)) {\r\n                mMove = m.clone();\r\n                this._left.add(mMove.clone().opposed());\r\n                this._right.add(mMove.clone().opposed());\r\n            }\r\n        }\r\n\r\n        // In theory, we should have only one item on the left.\r\n        if (this._left.length !== 1) {\r\n            return false;\r\n        }\r\n        cMove = this._left.monoms[0].coefficient.clone();\r\n        this._left.divide(cMove);\r\n        this._right.divide(cMove);\r\n        return this;\r\n    };\r\n\r\n    replaceBy = (letter: string, P: Polynom): Equation => {\r\n        this._left.replaceBy(letter, P)\r\n        this._right.replaceBy(letter, P)\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiple an equation by a fraction value.\r\n     * @param value\r\n     */\r\n    multiply = (value: unknown): Equation => {\r\n\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        // Multiply each part of the equation by the fraction\r\n        this._left.multiply(F);\r\n        this._right.multiply(F);\r\n\r\n        // The sign of the inequation must be changed.\r\n        if (this._sign !== '=' && F.sign() === -1) {\r\n            this._reverseSign();\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * divide an equation by a given value (transformed as a fraction)\r\n     *\r\n     * ```\r\n     * 8x+10=6x \\vert 2\r\n     * 4x+5=3x\r\n     * ```\r\n     *\r\n     * |>Alternatively with $3x-4$ maybe it's working ?\r\n     * $$\\frac{3x}{5}$$\r\n     *\r\n     * @param value\r\n     * @returns {Equation}\r\n     */\r\n    divide = (value: unknown): Equation => {\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        if (F.isZero()) {\r\n            return this;\r\n        } else {\r\n            return this.multiply(F.invert());\r\n        }\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations helpers\r\n    // -----------------------------------------------\r\n\r\n    /**\r\n     * Get the degree of the equation\r\n     * @param letter\r\n     */\r\n    degree = (letter?: string): Fraction => {\r\n        return Fraction.max(this._left.degree(letter), this._right.degree(letter));\r\n    };\r\n\r\n    /**\r\n     * Determine if the equation contains more than one letter/variable.\r\n     */\r\n    isMultiVariable = (): boolean => {\r\n        return this._left.isMultiVariable || this._right.isMultiVariable;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        // @ts-ignore\r\n        return [...new Set([...this._left.letters(), ...this._right.letters()])];\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations solving algorithms\r\n    // -----------------------------------------------\r\n    solve = (): Equation => {\r\n        // Initialise the variables:\r\n        this._solutions = [];\r\n\r\n        // TODO: consolidate solving equations (inequations vs equations)\r\n        // TODO: work with not natural degrees ?\r\n        this._polynom = this._left.clone().subtract(this._right);\r\n\r\n        switch (this._polynom.degree().value) {\r\n            case 0:\r\n            case 1:\r\n                this._solveDegree1();\r\n                break;\r\n            case 2:\r\n                this._solveDegree2();\r\n                break;\r\n            default:\r\n                this._solveDegree3plus();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    private isGreater = (): boolean => {\r\n        if (this._sign.indexOf('>') !== -1) {\r\n            return true;\r\n        }\r\n        return this._sign.indexOf('geq') !== -1;\r\n\r\n    };\r\n    private isStrictEqual = (): boolean => {\r\n        return this._sign === '=';\r\n    };\r\n    private isAlsoEqual = (): boolean => {\r\n        if (this._sign.indexOf('=') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('geq') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('leq') !== -1) {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    private _solveDegree1 = (letter?: string): ISolution[] => {\r\n        const m1 = this._polynom.monomByDegree(1, letter).coefficient,\r\n            m0 = this._polynom.monomByDegree(0, letter).coefficient,\r\n            v = m0.clone().opposed().divide(m1);\r\n        let s: string;\r\n\r\n        if (this.isStrictEqual()) {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0) {\r\n                    this._solutions = [{\r\n                        tex: this._real,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                } else {\r\n                    this._solutions = [{\r\n                        tex: this._varnothing,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                }\r\n            } else {\r\n                this._solutions = [{\r\n                    tex: v.display,\r\n                    value: v.value,\r\n                    exact: v\r\n                }]\r\n            }\r\n        } else {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0 && this.isAlsoEqual()) {\r\n                    s = '\\\\mathbb{R}';\r\n                } else {\r\n                    if (m0.value > 0) {\r\n                        s = this.isGreater() ? this._real : this._varnothing;\r\n                    } else {\r\n                        s = !this.isGreater() ? this._real : this._varnothing;\r\n                    }\r\n                }\r\n            } else {\r\n                // Must handle the case if the m1 monom is negative.\r\n                if ((this.isGreater() && m1.sign() === 1) || (!this.isGreater() && m1.sign() === -1)) {\r\n                    s = `\\\\left${this.isAlsoEqual() ? '\\\\[' : '\\\\]'}${v};+\\\\infty\\\\right\\\\[`;\r\n                } else {\r\n                    s = `\\\\left\\\\]-\\\\infty;${v} \\\\right\\\\${this.isAlsoEqual() ? '\\\\]' : '\\\\['}`;\r\n                }\r\n            }\r\n            this._solutions = [{\r\n                tex: s,\r\n                value: NaN,\r\n                exact: false\r\n            }];\r\n        }\r\n\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree2 = (letter?: string): ISolution[] => {\r\n        let aF = this._polynom.monomByDegree(2, letter).coefficient,\r\n            bF = this._polynom.monomByDegree(1, letter).coefficient,\r\n            cF = this._polynom.monomByDegree(0, letter).coefficient,\r\n            delta: number, nthDelta: Nthroot,\r\n            lcm = Numeric.lcm(aF.denominator, bF.denominator, cF.denominator),\r\n            a = aF.multiply(lcm).value,\r\n            b = bF.multiply(lcm).value,\r\n            c = cF.multiply(lcm).value,\r\n            realX1: number, realX2: number,\r\n            sX1: string, sX2: string;\r\n\r\n        delta = b * b - 4 * a * c;\r\n\r\n        if (delta > 0) {\r\n            realX1 = (-b - Math.sqrt(delta)) / (2 * a);\r\n            realX2 = (-b + Math.sqrt(delta)) / (2 * a);\r\n\r\n            if (delta > 1.0e5) {\r\n                // The delta is too big to be parsed !\r\n                this._solutions = [\r\n                    {\r\n                        tex: ((-b - Math.sqrt(delta)) / (2 * a)).toFixed(5),\r\n                        value: realX1,\r\n                        exact: false\r\n                    },\r\n                    {\r\n                        tex: ((-b + Math.sqrt(delta)) / (2 * a)).toFixed(5),\r\n                        value: realX2,\r\n                        exact: false\r\n                    }\r\n                ]\r\n            } else {\r\n                nthDelta = new Nthroot(delta).reduce();\r\n                if (nthDelta.hasRadical()) {\r\n                    // -b +- coeff\\sqrt{radical}\r\n                    // -------------------------\r\n                    //           2a\r\n                    let gcd = Numeric.gcd(b, 2 * a, nthDelta.coefficient);\r\n                    nthDelta.coefficient = nthDelta.coefficient / gcd;\r\n\r\n                    // TODO: Can i delete the next line ?\r\n                    // let deltaC = nthDelta.coefficient, deltaR = nthDelta.radical;\r\n                    if (b !== 0) {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                {\r\n                                    tex: `${-b / gcd} - ${nthDelta.tex}`,\r\n                                    value: realX1,\r\n                                    exact: false // TODO: implement exact value with nthroot\r\n                                },\r\n                                {\r\n                                    tex: `${-b / gcd} + ${nthDelta.tex}`,\r\n                                    value: realX2,\r\n                                    exact: false\r\n                                },\r\n\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                {\r\n                                    tex: `\\\\dfrac{${-b / gcd} - ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                    value: realX1,\r\n                                    exact: false\r\n                                },\r\n                                {\r\n                                    tex: `\\\\dfrac{${-b / gcd} + ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                    value: realX2,\r\n                                    exact: false\r\n                                },\r\n                            ]\r\n                        }\r\n                    } else {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                {\r\n                                    tex: `- ${nthDelta.tex}`,\r\n                                    value: realX1,\r\n                                    exact: false\r\n                                },\r\n                                {\r\n                                    tex: `${nthDelta.tex}`,\r\n                                    value: realX2,\r\n                                    exact: false\r\n                                },\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                {\r\n                                    tex: `\\\\dfrac{- ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                    value: realX1,\r\n                                    exact: false\r\n                                },\r\n                                {\r\n                                    tex: `\\\\dfrac{${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                    value: realX2,\r\n                                    exact: false\r\n                                },\r\n                            ]\r\n                        }\r\n                    }\r\n                } else {\r\n                    // -b +- d / 2a\r\n                    const S1 = new Fraction(-b - nthDelta.coefficient, 2 * a).reduce(),\r\n                        S2 = new Fraction(-b + nthDelta.coefficient, 2 * a).reduce()\r\n                    this._solutions = [\r\n                        {\r\n                            tex: S1.dfrac,\r\n                            value: realX1,\r\n                            exact: S1\r\n                        },\r\n                        {\r\n                            tex: S2.dfrac,\r\n                            value: realX2,\r\n                            exact: S2\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n\r\n        } else if (delta === 0) {\r\n            const sol = new Fraction(-b, 2 * a).reduce()\r\n            this._solutions = [{\r\n                tex: sol.dfrac,\r\n                value: sol.value,\r\n                exact: sol\r\n            }];\r\n        } else {\r\n            this._solutions = [{\r\n                tex: this._varnothing,\r\n                value: NaN,\r\n                exact: false\r\n            }];\r\n        }\r\n\r\n\r\n        // Handle now the inequations.\r\n        if (!this.isStrictEqual()) {\r\n            if (this._solutions.length === 2) {\r\n                sX1 = (realX1 < realX2) ? this._solutions[0].tex : this._solutions[1].tex;\r\n                sX2 = (realX1 < realX2) ? this._solutions[1].tex : this._solutions[0].tex;\r\n\r\n                if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                    this._solutions = [{\r\n                        tex: `\\\\left]-\\\\infty ; ${sX1}\\\\right${this.isAlsoEqual() ? ']' : '['} \\\\cup \\\\left${this.isAlsoEqual() ? '[' : ']'}${sX2};+\\\\infty\\\\right[`,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }\r\n                    ];\r\n                } else {\r\n                    this._solutions = [{\r\n                        tex: `\\\\left${this.isAlsoEqual() ? '[' : ']'}${sX1} ; ${sX2}\\\\right${this.isAlsoEqual() ? ']' : '['}`,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }]\r\n                }\r\n            } else if (this._solutions.length === 1 && this._solutions[0].tex !== this._varnothing) {\r\n                if (!this.isAlsoEqual()) {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [{\r\n                            tex: `\\\\left]-\\\\infty ; ${this._solutions[0].tex}\\\\right[ \\\\cup \\\\left]${this._solutions[0].tex};+\\\\infty\\\\right[`,\r\n                            value: NaN,\r\n                            exact: false\r\n                        }\r\n                        ];\r\n                    } else {\r\n                        this._solutions = [{\r\n                            tex: this._varnothing,\r\n                            value: NaN,\r\n                            exact: false\r\n                        }];\r\n                    }\r\n                } else {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [{\r\n                            tex: this._real,\r\n                            value: NaN,\r\n                            exact: false\r\n                        }];\r\n                    } else {\r\n                        // this._texSolutions = [ this._texSolutions[0] ];\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.isGreater()) {\r\n                    this._solutions = [{\r\n                        tex: aF.sign() === 1 ? this._real : this._varnothing,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                } else {\r\n                    this._solutions = [{\r\n                        tex: aF.sign() === -1 ? this._real : this._varnothing,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                }\r\n            }\r\n        }\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree3plus = (): ISolution[] => {\r\n        // TODO: try to resolve equations with a degree superior than 2.\r\n        this._solutions = [{tex: 'solve x - not yet handled', value: NaN, exact: false}];  // ESLint remove system :(\r\n        return this._solutions;\r\n    };\r\n\r\n}","export * from \"./equation\"\r\nexport * from \"./linearSystem\"\r\nexport * from \"./logicalset\"\r\nexport * from \"./monom\"\r\nexport * from \"./polynom\"\r\nexport * from \"./rational\"","import {Fraction} from \"../coefficients\";\r\nimport {Equation} from \"./equation\";\r\nimport {Polynom} from \"./polynom\";\r\nimport {Monom} from \"./monom\";\r\nimport {Random} from \"../random\";\r\n\r\n// TODO: Must check and rework\r\nexport class LinearSystem {\r\n    private _solutions: { [letter: string]: { value: Fraction, isReal: boolean, isVarnothing: boolean } };\r\n    private _resolutionSteps: LinearSystem[];\r\n    private _equations: Equation[];\r\n    private _letters: string[];\r\n\r\n    constructor(...equationStrings: string[]) {\r\n        this._equations = [];\r\n        this._letters = 'xy'.split('');\r\n\r\n        if (equationStrings !== undefined && equationStrings.length > 0) {\r\n            this.parse(...equationStrings);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equations(): Equation[] {\r\n        return this._equations;\r\n    }\r\n\r\n    set equations(value) {\r\n        this._equations = value;\r\n    }\r\n\r\n    get letters(): string {\r\n        return this._letters.join('')\r\n    }\r\n\r\n    set letters(value: string) {\r\n        this._letters = value.split('');\r\n    }\r\n\r\n    get isSolvable(): boolean {\r\n        let V = this.variables;\r\n\r\n        // TODO: in some case, it is possible to resolve systems if there isn't the isSame number of vars and equations\r\n        if (V.length !== this._equations.length) {\r\n            return false;\r\n        }\r\n\r\n        //TODO: Must check if two equations isn't a linear combination of the others ?\r\n\r\n        return true;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n        for (let E of this._equations) {\r\n            V = V.concat(E.variables);\r\n        }\r\n        return [...new Set(V)].sort();\r\n    }\r\n\r\n    get tex(): string {\r\n        // Build the array of values.\r\n        // Reorder\r\n        // This clone the system :!!!\r\n        //TODO: Avoid cloning this linear system\r\n        let LS = this.clone().reorder(),\r\n            letters = LS.variables,\r\n            equStr: string[],\r\n            equArray: string[] = [],\r\n            m: Monom;\r\n\r\n        // TODO: Manage tex output of linear equations\r\n        for (let equ of LS.equations) {\r\n            equStr = [];\r\n            for (let L of letters) {\r\n                m = equ.left.monomByLetter(L);\r\n\r\n                if (equStr.length === 0) {\r\n                    equStr.push(m.isZero() ? '' : m.tex);\r\n                } else {\r\n                    equStr.push(m.isZero() ? '' : ((m.coefficient.sign() === 1) ? '+' : '') + m.tex);\r\n                }\r\n            }\r\n\r\n            // Add the equal sign\r\n            equStr.push('=');\r\n\r\n            // Add the right hand part of the equation (should be only a number, because it has been reordered)\r\n            equStr.push(equ.right.tex);\r\n\r\n            // Add to the list.\r\n            equArray.push(equStr.join('&'));\r\n        }\r\n\r\n\r\n        return `\\\\left\\\\{\\\\begin{array}{${\"r\".repeat(letters.length)}cl}${equArray.join('\\\\\\\\\\ ')}\\\\end{array}\\\\right.`;\r\n        //return `\\\\left\\\\{\\\\begin{array}{rrrcl}${this._equations.map(equ => `${equ.tex}`).join('\\\\\\\\\\ \\n')}\\\\end{array}\\\\right.`;\r\n    }\r\n\r\n    get solution(): string {\r\n        let tex: string[] = [];\r\n\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n\r\n        for (let letter in this._solutions) {\r\n            if (this._solutions[letter].isReal) {\r\n                console.log(`Undetermined (letter ${letter})`);\r\n                return;\r\n            }\r\n            if (this._solutions[letter].isVarnothing) {\r\n                console.log(`Undefined (letter ${letter})`);\r\n                return;\r\n            }\r\n\r\n            tex.push(this._solutions[letter].value.dfrac);\r\n        }\r\n        return `(${tex.join(';')})`;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...equations: unknown[]): LinearSystem => {\r\n        this._equations = equations.map(value => new Equation(value));\r\n        this._findLetters();\r\n        return this;\r\n    };\r\n\r\n    setCoefficient = (...coefficients: string[]): LinearSystem => {\r\n        // Reset the equations list\r\n        this._equations = [];\r\n\r\n        let i = 0;\r\n        while (i < coefficients.length - this._letters.length) {\r\n            let left = new Polynom().parse(this._letters.join(''), ...coefficients.slice(i, i + this._letters.length)),\r\n                right = new Polynom(coefficients[i + this._letters.length].toString()),\r\n                equ = new Equation().create(left, right);\r\n            this._equations.push(equ.clone());\r\n\r\n            i = i + this._letters.length + 1;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): LinearSystem => {\r\n        return new LinearSystem().parse(...this._equations.map(equ => equ.clone()));\r\n    };\r\n\r\n    setLetters = (...letters: string[]): LinearSystem => {\r\n        this._letters = letters;\r\n        return this\r\n    }\r\n    private _findLetters = (): LinearSystem => {\r\n        // Find all letters used.\r\n        let variables = new Set();\r\n\r\n        for (let equ of this._equations) {\r\n            variables = new Set([...variables, ...equ.variables]);\r\n        }\r\n\r\n        // TODO: How to transform (Set of string) to string[]\r\n        // @ts-ignore\r\n        this._letters = [...variables];\r\n        return this;\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n    // -----------------------------------------------\r\n    generate = (...solutions: Fraction[] | number[]): LinearSystem => {\r\n        let solutionsF: Fraction[] = [];\r\n\r\n        // Convert the numbers to fractions if necessary\r\n        for (let s of solutions) {\r\n            if (typeof s === \"number\") {\r\n                solutionsF.push(new Fraction(s.toString()));\r\n            } else {\r\n                solutionsF.push(s.clone());\r\n            }\r\n        }\r\n\r\n        // Create the equations and make sure they are not linear combined.\r\n        this._equations = [];\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            this._equations.push(this._generateOneEquation(...solutionsF));\r\n        }\r\n        return this;\r\n    };\r\n    private _generateOneEquation = (...solutions: Fraction[]): Equation => {\r\n        let coeff: number[] = [], leftValue: Fraction = new Fraction().zero(),\r\n            letters: string[] = ['x', 'y', 'z', 't', 'u', 'v', 'w', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],\r\n            equString: string = '', equ: Equation;\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            coeff.push(Random.numberSym(5));\r\n            leftValue.add(solutions[i].clone().multiply(coeff[i]));\r\n            equString += `${(coeff[i] < 0) ? coeff[i] : '+' + coeff[i]}${letters[i]}`\r\n        }\r\n\r\n        // LeftValue contains the left part oof the equation - and is then the isSame as the right part.\r\n        // It might be a Fraction.\r\n\r\n        // Must check if it's not a linear combination\r\n        equ = new Equation(`${equString}=${leftValue.display}`);\r\n        if (equ.right.monoms[0].coefficient.denominator != 1) {\r\n            equ.multiply(new Fraction(equ.right.monoms[0].coefficient.denominator, 1));\r\n        }\r\n        if (this._checkIfLinerCombination(equ)) {\r\n            return equ;\r\n        } else {\r\n            return this._generateOneEquation(...solutions);\r\n        }\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    private _linearReduction(eq1: Equation, eq2: Equation, letter: string): Equation {\r\n        // TODO: handle other signs for equations ?\r\n        // Get the monom for the particular letter.\r\n        let c1 = eq1.left.monomByDegree(1, letter).coefficient.clone(),\r\n            c2 = eq2.left.monomByDegree(1, letter).coefficient.clone().opposed();\r\n\r\n        return this.mergeEquations(eq1, eq2, c2, c1);\r\n    }\r\n\r\n    mergeEquations = (eq1: Equation, eq2: Equation, factor1: unknown, factor2: unknown): Equation => {\r\n        // Set and clone the equations.\r\n\r\n        let eq1multiplied = eq1.clone().multiply(new Fraction(factor1)),\r\n            eq2multiplied = eq2.clone().multiply(new Fraction(factor2));\r\n\r\n        // Add both equations together.\r\n        eq1multiplied.left.add(eq2multiplied.left);\r\n        eq1multiplied.right.add(eq2multiplied.right);\r\n\r\n        return eq1multiplied;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Solvers algorithm\r\n    // ------------------------------------------\r\n    reorder = (): LinearSystem => {\r\n        for (let E of this._equations) {\r\n            E.reorder();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    solve = (): LinearSystem => {\r\n        // Solve it by linear\r\n        this._solutions = {};\r\n        this._resolutionSteps = [];\r\n\r\n        // Reorder all equations.\r\n        this.reorder();\r\n\r\n        // Get all variables in the linear system\r\n        let V = this.variables.sort();\r\n\r\n        for (let letter of V) {\r\n            this._solutions[letter] = this._solveOneLetter(letter, V)\r\n        }\r\n\r\n        // TODO: LinearSystem - solve: optimization and handle undetermined and undefined systems.\r\n        return this;\r\n    };\r\n\r\n    private _checkIfLinerCombination = (equ: Equation): boolean => {\r\n\r\n        return true;\r\n    };\r\n\r\n    private _solveOneLetter(letter: string, V: string[]): { value: Fraction, isReal: boolean, isVarnothing: boolean } {\r\n        // list of equations.\r\n        let LE: Equation[] = this.clone().equations,\r\n            reducedEquations: Equation[] = [];\r\n\r\n        // Reduce the equations.\r\n        // Do it as long as there is more than one step, but no more than the number of equations.\r\n        for (let L of V) {\r\n            // remove the setLetter from all equations using linear combinations\r\n            if (L === letter) {\r\n                continue;\r\n            }\r\n\r\n            // Linear reduction.\r\n            // TODO: Search for better association\r\n            for (let i = 0; i < LE.length - 1; i++) {\r\n                reducedEquations.push(this._linearReduction(LE[i], LE[i + 1], L));\r\n            }\r\n\r\n            // Keep track of each steps.\r\n            this._resolutionSteps.push(new LinearSystem().parse(...reducedEquations));\r\n\r\n            // Set the list of equations to the new version.\r\n            LE = this._resolutionSteps[this._resolutionSteps.length - 1].clone().equations;\r\n\r\n            // Reset the stack\r\n            reducedEquations = [];\r\n        }\r\n\r\n        // Solve the equations\r\n        let E = this._resolutionSteps[this._resolutionSteps.length - 1].equations[0];\r\n        E.solve();\r\n\r\n        return {\r\n            value: new Fraction(E.solutions[0].value),\r\n            isReal: E.isReal,\r\n            isVarnothing: E.isVarnothing\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Helpers\r\n    // ------------------------------------------\r\n    log = (): string => {\r\n        let str: string = '';\r\n\r\n        for (let E of this._equations) {\r\n            console.log(E.tex);\r\n            str += `${E.tex}\\\\n}`;\r\n        }\r\n\r\n        return str;\r\n    };\r\n}\r\n","/**\r\n * Polynom module contains everything necessary to handle polynoms.\r\n * @module Logicalset\r\n */\r\n\r\nimport {Shutingyard, ShutingyardMode} from '../shutingyard';\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n */\r\n    export class Logicalset {\r\n        private _rawString: string;\r\n        private _rpn: { token: string, tokenType: string }[]\r\n\r\n        /**\r\n         *\r\n         * @param {string} value (optional) Default polynom to parse on class creation\r\n         */\r\n        constructor(value: string) {\r\n            this._rawString = value\r\n            this.parse(value)\r\n            return this;\r\n        }\r\n\r\n        get isLogicalset() {\r\n            return true;\r\n        };\r\n\r\n        private parse = (value: string): Logicalset => {\r\n            // TODO: Must format the value string to convert some items...\r\n\r\n            // Parse the updated value to the shutingyard algorithm\r\n            this._rpn = new Shutingyard(ShutingyardMode.SET).parse(value).rpn;\r\n\r\n            return this;\r\n        }\r\n\r\n        evaluate(tokenSets: { [key: string]: unknown[] }, reference?: unknown[]): unknown[] {\r\n            let varStack: (Set<unknown>)[] = []\r\n\r\n            let referenceSet: Set<unknown>\r\n            if (reference === undefined) {\r\n                referenceSet = new Set()\r\n                for (let key in tokenSets) {\r\n                    referenceSet = new Set([...referenceSet, ...tokenSets[key]])\r\n                }\r\n            } else {\r\n                referenceSet = new Set(reference)\r\n            }\r\n\r\n            for (let token of this._rpn) {\r\n                if (token.tokenType === 'variable') {\r\n                    // The variable has no token - assume it's empty.\r\n                    if (tokenSets[token.token] === undefined) {\r\n                        varStack.push(new Set())\r\n                    } else {\r\n                        varStack.push(new Set(tokenSets[token.token]));\r\n                    }\r\n\r\n                } else {\r\n                    switch (token.token) {\r\n                        case '&':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                varStack.push(new Set([...first].filter(x => second.has(x))))\r\n                            }\r\n                            break\r\n                        case '|':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n                                varStack.push(new Set([...first, ...second]))\r\n                            }\r\n                            break\r\n                        case '-':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n                                varStack.push(new Set([...first].filter(x => !second.has(x))))\r\n                            }\r\n                            break\r\n                        case '!':\r\n                            if (varStack.length >= 1) {\r\n                                let first = varStack.pop()\r\n\r\n                                varStack.push(new Set([...referenceSet].filter(x => !first.has(x))))\r\n                            }\r\n                            break\r\n                    }\r\n                }\r\n            }\r\n\r\n            return [...varStack[0]].sort();\r\n        }\r\n\r\n        vennAB(): any[] {\r\n            return this.evaluate({\r\n                    A: ['A', 'AB'],\r\n                    B: ['B', 'AB']\r\n                },\r\n                ['A', 'B', 'AB', 'E']\r\n            )\r\n        }\r\n\r\n        vennABC(): any[] {\r\n            return this.evaluate({\r\n                    A: ['A', 'AB', 'AC', 'ABC'],\r\n                    B: ['B', 'AB', 'BC', 'ABC'],\r\n                    C: ['C', 'AC', 'BC', 'ABC']\r\n                },\r\n                ['A', 'B', 'C', 'AB', 'AC', 'BC', 'E']\r\n            )\r\n        }\r\n\r\n        get rpn(): { token: string, tokenType: string }[] {\r\n            return this._rpn\r\n        }\r\n\r\n        get tex(): string {\r\n            let varStack: { token: string, tokenType: string } [] = []\r\n\r\n            for (let token of this._rpn) {\r\n                if (token.tokenType === 'variable') {\r\n                    varStack.push(token);\r\n                } else {\r\n                    switch (token.token) {\r\n                        case '&':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\cap ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '|':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\cup ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '-':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\setminus ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '!':\r\n                            if (varStack.length >= 1) {\r\n                                let first = varStack.pop()\r\n                                varStack.push({token: `\\\\overline{ ${first.token} }`, tokenType: 'variable'})\r\n                            }\r\n                            break\r\n                    }\r\n                }\r\n            }\r\n\r\n            return varStack[0].token\r\n        }\r\n    }","/***\r\n * Monom class\r\n */\r\nimport {Fraction} from \"../coefficients\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Shutingyard} from \"../shutingyard\";\r\n\r\nexport type literalType = {\r\n    [Key: string]: Fraction\r\n}\r\n\r\nexport class Monom {\r\n    private _coefficient: Fraction;\r\n    private _literal: literalType;\r\n\r\n    /**\r\n     * Create a Monom\r\n     * Defined as \\\\(k \\\\cdot x^{n}\\\\), where \\\\( k,n \\in \\\\mathbb{Q}\\\\).\r\n     * Examples: \\\\(3x^2\\\\) or \\\\(3/5x^2\\\\)\r\n     * @param value (optional) string The value that should be parse. Can be a Monom, a Fraction, a string or a number. If nothing is provided, it will return the trivial monom (0).\r\n     */\r\n    constructor(value?: unknown) {\r\n        this.zero();\r\n\r\n        if (value !== undefined) {\r\n            // A string is given - try to parse the value.\r\n            this.parse(value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    /**\r\n     * Get the coefficient \\\\(k\\\\) of the Monom \\\\(k\\\\cdot x^{n}\\\\)\r\n     * @returns {Fraction}\r\n     */\r\n    get coefficient(): Fraction {\r\n        return this._coefficient;\r\n    }\r\n\r\n    /**\r\n     * Set the coefficient \\\\(k\\\\) value of the monom\r\n     * @param {Fraction | number | string} F\r\n     */\r\n    set coefficient(F: Fraction | number | string) {\r\n        this._coefficient = new Fraction(F);\r\n    }\r\n\r\n    /**\r\n     * Get the literal part of \\\\(x^{n_1}y^{n_2}\\\\) as dictionary \\\\[\\\\begin{array}{ll}x&=n_1\\\\\\\\y&=n_2\\\\end{array}\\\\]\r\n     * @returns {literalType}\r\n     */\r\n    get literal(): literalType {\r\n        return this._literal;\r\n    }\r\n\r\n    /**\r\n     * Get the literal square roots of the Monom.\r\n     * TODO: remove this getter ? Is it used and is it correct ?\r\n     * @returns {literalType}\r\n     */\r\n    get literalSqrt(): literalType {\r\n        if (this.isLiteralSquare()) {\r\n            let L: literalType = {}\r\n            for (let key in this._literal) {\r\n                L[key] = this._literal[key].clone().sqrt()\r\n            }\r\n            return L;\r\n        } else {\r\n            return this._literal;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom. Must be a dictionary {x: Fraction, y: Fraction, ...}\r\n     * @param {literalType} L\r\n     */\r\n    set literal(L: literalType) {\r\n        this._literal = L;\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom from a string\r\n     * @param inputStr  String like x^2y^3\r\n     */\r\n    set literalStr(inputStr: string) {\r\n        // TODO : parse using shutingyard tree !\r\n\r\n        // Match all x^n\r\n        for (const v of [...inputStr.matchAll(/([a-z])\\^([+-]?[0-9]+)/g)]) {\r\n            // Create the default letter entry if necessary.\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = new Fraction().zero();\r\n            }\r\n\r\n            // Add the new value.\r\n            // TODO: actually, it adds only numeric value\r\n            this._literal[v[1]].add(+v[2]);\r\n        }\r\n\r\n        // Match all x\r\n        for (const v of [...inputStr.matchAll(/([a-z](?!\\^))/g)]) {\r\n            // Match all single letters\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = new Fraction().zero();\r\n            }\r\n\r\n            // Add one to the value.\r\n            this._literal[v[1]].add(1)\r\n        }\r\n    }\r\n\r\n    // Getter helpers.\r\n    /**\r\n     * Get the variables letters\r\n     */\r\n    get variables(): string[] {\r\n        this.clone().clean();\r\n        return Object.keys(this._literal)\r\n    }\r\n\r\n    // Display getter\r\n    /**\r\n     * This display getter is to be used in the polynom display getter\r\n     */\r\n    get display(): string {\r\n        let L: string = '',\r\n            letters = Object.keys(this._literal).sort()\r\n        for (let letter of letters) {\r\n            if (this._literal[letter].isNotZero()) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter].isNotEqual(1)) {\r\n                    L += `^${this._literal[letter].display}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.display}`;\r\n            } else {\r\n                return '';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.display}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    get dividers(): Monom[] {\r\n        // Decompose only if the coefficient is a natural number\r\n        if (this.coefficient.denominator !== 1) {\r\n            return [this.clone()]\r\n        }\r\n        // Decompose only if the power values are natural numbers.\r\n        if (this.hasFractionCoefficient) {\r\n            return [this.clone()]\r\n        }\r\n\r\n        // Security : do not do this if greater than 10000\r\n        if (this.coefficient.numerator > 10000) {\r\n            return [this.clone()]\r\n        }\r\n        const dividers = Numeric.dividers(Math.abs(this.coefficient.numerator))\r\n\r\n        // Decompose the literals parts.\r\n        let literals: literalType[] = [];\r\n        for (let L in this.literal) {\r\n            // L is the letter.\r\n            literals = this._getLiteralDividers(literals, L)\r\n        }\r\n\r\n        const monomDividers: Monom[] = [];\r\n        if (literals.length > 0 && dividers.length > 0) {\r\n            for (let N of dividers) {\r\n                for (let L of literals) {\r\n                    let M = new Monom();\r\n                    M.coefficient = new Fraction(N)\r\n                    M.literal = L\r\n                    monomDividers.push(M)\r\n                }\r\n            }\r\n        } else if (dividers.length === 0) {\r\n            for (let L of literals) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction().one()\r\n                M.literal = L\r\n                monomDividers.push(M)\r\n            }\r\n        } else {\r\n            for (let N of dividers) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction(N)\r\n                monomDividers.push(M)\r\n            }\r\n        }\r\n\r\n        return monomDividers.length === 0 ? [new Monom().one()] : monomDividers;\r\n    }\r\n\r\n    private _getLiteralDividers(arr: literalType[], letter: string): literalType[] {\r\n        let tmpList: { [key: string]: Fraction }[] = [];\r\n\r\n        // Be default, this.literal[letter] should be a rational number.\r\n        for (let d = 0; d <= this.literal[letter].value; d++) {\r\n            if (arr.length === 0) {\r\n                let litt: literalType = {}\r\n                litt[letter] = new Fraction(d)\r\n                tmpList.push(litt)\r\n            } else {\r\n                for (let item of arr) {\r\n                    let litt: literalType = {}\r\n                    for (let currentLetter in item) {\r\n                        litt[currentLetter] = item[currentLetter]\r\n                    }\r\n                    litt[letter] = new Fraction(d)\r\n                    tmpList.push(litt)\r\n                }\r\n            }\r\n        }\r\n        return tmpList;\r\n    }\r\n\r\n    /**\r\n     * Display the monom, forcing the '+' sign to appear\r\n     */\r\n    get displayWithSign(): string {\r\n        let d: String = this.display;\r\n        return (d[0] !== '-' ? '+' : '') + d;\r\n    }\r\n\r\n    get texWithSign(): string {\r\n        if (this.coefficient.isStrictlyPositive()) {\r\n            return '+' + this.tex\r\n        }\r\n\r\n        return this.tex\r\n    }\r\n\r\n    /**\r\n     * Get the tex output of the monom\r\n     */\r\n    get tex(): string {\r\n        // TODO: display with square root !\r\n        let L: string = '',\r\n            letters = Object.keys(this._literal).sort()\r\n\r\n        for (let letter of letters) {\r\n            if (this._literal[letter].isNotZero()) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter].isNotEqual(1)) {\r\n                    L += `^{${this._literal[letter].display}}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.dfrac}`;\r\n            } else {\r\n                return '0';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.dfrac}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // -----------------------------------------\r\n    /**\r\n     * Parse a string to a monom. The string may include fraction.\r\n     * @param inputStr\r\n     */\r\n    parse = (inputStr: unknown): Monom => {\r\n\r\n        if (typeof inputStr === 'string') {\r\n            this._shutingYardToReducedMonom(inputStr)\r\n        } else if (typeof inputStr === 'number') {\r\n            this._coefficient = new Fraction(inputStr)\r\n            this._literal = {}\r\n        } else if (inputStr instanceof Fraction) {\r\n            this._coefficient = inputStr.clone()\r\n            this._literal = {}\r\n        } else if (inputStr instanceof Monom) {\r\n            this._coefficient = inputStr._coefficient.clone()\r\n            this._literal = this.copyLiterals(inputStr.literal)\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    private _shutingYardToReducedMonom = (inputStr: string): Monom => {\r\n        // Get the RPN array of the current expression\r\n        const SY: Shutingyard = new Shutingyard().parse(inputStr);\r\n        const rpn: { token: string, tokenType: string }[] = SY.rpn;\r\n\r\n        let stack: Monom[] = [], m, pow, letter, q1, q2\r\n\r\n        if (rpn.length === 0) {\r\n            this.zero()\r\n            return this\r\n        } else if (rpn.length === 1) {\r\n            const element = rpn[0]\r\n\r\n            this.one()\r\n            if (element.tokenType === 'coefficient') {\r\n                this.coefficient = new Fraction(element.token)\r\n            } else if (element.tokenType === 'variable') {\r\n                this.setLetter(element.token, 1)\r\n            }\r\n            return this\r\n        } else {\r\n            // Reset the monom\r\n            for (const element of rpn) {\r\n                if (element.tokenType === 'coefficient') {\r\n                    let M = new Monom().one()\r\n                    M.coefficient = new Fraction(element.token)\r\n                    stack.push(M.clone())\r\n                } else if (element.tokenType === 'variable') {\r\n                    let M = new Monom().one()\r\n                    M.setLetter(element.token, 1)\r\n                    stack.push(M.clone())\r\n                } else if (element.tokenType === 'operation') {\r\n                    switch (element.token) {\r\n                        case '-':\r\n                            // this should only happen for negative powers or for negative coefficient.\r\n                            q2 = (stack.pop()) || new Monom().zero()\r\n                            q1 = (stack.pop()) || new Monom().zero()\r\n\r\n                            stack.push(q1.subtract(q2))\r\n\r\n                            break;\r\n                        case '*':\r\n                            // Get the last element in the stack\r\n                            q2 = (stack.pop()) || new Monom().one()\r\n                            q1 = (stack.pop()) || new Monom().one()\r\n\r\n                            stack.push(q1.multiply(q2))\r\n                            break\r\n                        case '^':\r\n                            // get the two last elements in the stack\r\n                            pow = (stack.pop().coefficient) || new Fraction().one()\r\n                            m = (stack.pop()) || new Monom().one()\r\n\r\n                            letter = m.variables[0]\r\n\r\n                            if (letter !== undefined) {\r\n                                m.setLetter(letter, pow)\r\n                            }\r\n\r\n                            stack.push(m)\r\n                            // this.multiply(m.clone())\r\n                            break\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.one()\r\n        this.multiply(stack[0])\r\n        return this\r\n    }\r\n    /**\r\n     * Clone the current Monom.\r\n     */\r\n    clone = (): Monom => {\r\n        let F: Monom = new Monom();\r\n\r\n        F.coefficient = this._coefficient.clone();\r\n\r\n        // Copy the literal parts.\r\n        for (let k in this._literal) {\r\n            F.setLetter(k, this._literal[k].clone());\r\n        }\r\n        return F;\r\n    };\r\n\r\n    copyLiterals = (literal: literalType): literalType => {\r\n        let L: literalType = {}\r\n\r\n        for (let k in literal) {\r\n            L[k] = literal[k].clone()\r\n        }\r\n        return L\r\n    }\r\n\r\n    makeSame = (M: Monom): Monom => {\r\n        // Copy the literal parts.\r\n        for (let k in M._literal) {\r\n            this.setLetter(k, M._literal[k].clone());\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Create a zero value monom\r\n     */\r\n    zero = (): Monom => {\r\n        this._coefficient = new Fraction().zero();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Create a one value monom\r\n     */\r\n    one = (): Monom => {\r\n        this._coefficient = new Fraction().one();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Clean the monom by removing each letters with a power of zero.\r\n     */\r\n    clean = (): Monom => {\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter].isZero()) {\r\n                delete this._literal[letter];\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Get the opposed\r\n     * Returns a monom.\r\n     */\r\n    opposed = (): Monom => {\r\n        this._coefficient.opposed();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Add all similar monoms. If they aren't similar, they are simply skipped.\r\n     * @param M (Monom[]) The monoms to add.\r\n     */\r\n    add = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                if (this.isZero()) {\r\n                    this.makeSame(m)\r\n                }\r\n                this._coefficient.add(m.coefficient);\r\n            } else {\r\n                console.log('Add: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Subtract multiple monoms\r\n     * @param M (Monom[]) The monoms to subtract\r\n     */\r\n    subtract = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                if (this.isZero()) {\r\n                    this.makeSame(m)\r\n                }\r\n                this._coefficient.add(m.clone().coefficient.opposed());\r\n            } else {\r\n                console.log('Subtract: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiple multiple monoms to the current monom\r\n     * @param M (Monom[]) The monoms to multiply to.\r\n     */\r\n    multiply = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            // Multiply the coefficient.\r\n            this._coefficient.multiply(m.coefficient);\r\n\r\n            // Multiply the literal parts.\r\n            for (let letter in m.literal) {\r\n                if (this._literal[letter] === undefined) {\r\n                    this._literal[letter] = m.literal[letter].clone()\r\n                } else {\r\n                    this._literal[letter].add(m.literal[letter])\r\n                }\r\n\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiplyByNumber = (F: Fraction | number): Monom => {\r\n        this._coefficient.multiply(F);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divide the current monoms by multiple monoms\r\n     * @param M (Monom[])\r\n     */\r\n    divide = (...M: Monom[]): Monom => {\r\n        // Depending on the given value, choose the current item\r\n        for (let v of M) {\r\n            // Divide the coefficient\r\n            this._coefficient.divide(v.coefficient);\r\n\r\n            // Subtract the power values\r\n            for (let letter in v.literal) {\r\n                this._literal[letter] = (this._literal[letter] === undefined) ? v.literal[letter].clone().opposed() : this._literal[letter].subtract(v.literal[letter])\r\n\r\n                // If the power of a particular setLetter is zero, delete it from the literal part..\r\n                if (this._literal[letter].isZero()) {\r\n                    delete this._literal[letter];\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the pow of a monom.\r\n     * @param nb (number) : Mathematical pow\r\n     */\r\n    pow = (nb: number): Monom => {\r\n        this._coefficient.pow(nb);\r\n        for (let letter in this._literal) {\r\n            this._literal[letter].pow(nb)\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the nth-root of the monom\r\n     * @param p\r\n     */\r\n    root = (p: number): Monom => {\r\n        // TODO: determiner the nth root of a monom\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Return the square root of a monom\r\n     */\r\n    sqrt = (): Monom => {\r\n        if (this.isSquare()) {\r\n            this._coefficient.sqrt();\r\n            for (let letter in this._literal) {\r\n                this._literal[letter].clone().divide(2)\r\n            }\r\n        }\r\n        return this.root(2);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    compare = (M: Monom, sign?: string): boolean => {\r\n        // TODO: Build the compare systems.\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // To be equal, they must be the isSame\r\n                if (!this.compare(M, 'same')) {\r\n                    return false;\r\n                }\r\n\r\n                // The literal parts are the isSame. The coefficient must be equal\r\n                return this._coefficient.isEqual(M.coefficient);\r\n            case 'same':\r\n                // Get the list of all variables from both monoms.\r\n                let M1: string[] = this.variables,\r\n                    M2: string[] = M.variables,\r\n                    K: string[] = M1.concat(M2.filter((item) => M1.indexOf(item) < 0));\r\n\r\n                // To compare, both must be different than zero.\r\n                if (!this.isZero() && !M.isZero()) {\r\n                    for (let key of K) {\r\n                        // The setLetter is not available in one of the monom\r\n                        if (this._literal[key] === undefined || M.literal[key] === undefined) {\r\n                            return false;\r\n                        }\r\n                        // The setLetter does not have the isSame power in each monoms.\r\n                        if (!this._literal[key].isEqual(M.literal[key])) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // All are positive check - the monoms are the sames.\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is null\r\n     */\r\n    isZero(): boolean {\r\n        return this._coefficient.value === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is one\r\n     */\r\n    isOne(): boolean {\r\n        return this._coefficient.value === 1 && this.variables.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if two monoms are equals\r\n     * @param M\r\n     */\r\n    isEqual = (M: Monom): boolean => {\r\n        return this.compare(M, '=');\r\n    };\r\n\r\n    /**\r\n     * Determine if two monoms are similar\r\n     * @param M\r\n     */\r\n    isSameAs = (M: Monom): boolean => {\r\n        return this.compare(M, 'same');\r\n    };\r\n\r\n    isSquare = (): boolean => {\r\n        if (!this.coefficient.isSquare()) {\r\n            return false;\r\n        }\r\n        return this.isLiteralSquare();\r\n    }\r\n\r\n    isLiteralSquare = (): boolean => {\r\n        for (let letter in this.literal) {\r\n            // A literal square must have a natural power\r\n            if (this.literal[letter].isRational()) {\r\n                return false\r\n            }\r\n\r\n            // The natural power must be be even\r\n            if (this.literal[letter].isEven()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    hasFractionCoefficient = (): boolean => {\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter].isRational()) {\r\n                return true\r\n            }\r\n        }\r\n\r\n        return false\r\n    }\r\n    // ------------------------------------------\r\n    // Misc monoms functions\r\n    // -------------------------------------\r\n    /**\r\n     * Determine if a monom contains a setLetter in it's literal part\r\n     * @param letter\r\n     */\r\n    hasLetter = (letter?: string): boolean => {\r\n        // The letter was not found\r\n        if (this._literal[letter === undefined ? 'x' : letter] === undefined) {\r\n            return false\r\n        }\r\n\r\n        // The letter is found and is not zero !\r\n        return this._literal[letter === undefined ? 'x' : letter].isNotZero();\r\n    };\r\n\r\n    /**\r\n     * Set the power of a particular setLetter\r\n     * @param letter (string) Letter to change\r\n     * @param pow (number) Power of the setLetter (must be positive integer.\r\n     */\r\n    setLetter = (letter: string, pow: Fraction | number): void => {\r\n        if (pow instanceof Fraction) {\r\n            // Set the power of the letter to zero => remove it\r\n            if (this.hasLetter(letter) && pow.isZero()) {\r\n                delete this._literal[letter]\r\n            }\r\n\r\n            this._literal[letter] = pow.clone()\r\n        } else {\r\n            this.setLetter(letter, new Fraction(pow))\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the degree of a monom. If no setLetter is given, the result will be the global degree.\r\n     * @param letter (string) Letter to get to degree (power)\r\n     */\r\n    degree = (letter?: string): Fraction => {\r\n        if (this.variables.length === 0) {\r\n            return new Fraction().zero();\r\n        }\r\n        if (letter === undefined) {\r\n            // Not setLetter given -> we get the global monom degree (sum of all the letters).\r\n            return Object.values(this._literal).reduce((t, n) => t.clone().add(n));\r\n        } else {\r\n            // A setLetter is given -> get the corresponding power.\r\n            return this._literal[letter] === undefined ? new Fraction().zero() : this._literal[letter].clone();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Evaluate a monom. Each setLetter must be assigned to a Fraction.\r\n     * @param values    Dictionary of <setLetter: Fraction>\r\n     */\r\n    evaluate = (values: literalType | Fraction | number): Fraction => {\r\n        let r = this.coefficient.clone();\r\n\r\n        if (typeof values === 'number' || values instanceof Fraction) {\r\n            let tmpValues: literalType = {}\r\n\r\n            tmpValues[this.variables[0]] = new Fraction(values)\r\n            return this.evaluate(tmpValues);\r\n        }\r\n\r\n        if (typeof values === 'object') {\r\n            for (let L in this._literal) {\r\n                if (values[L] === undefined) {\r\n                    return new Fraction().zero();\r\n                }\r\n\r\n                let value = new Fraction(values[L])\r\n                r.multiply(value.pow(this._literal[L]))\r\n            }\r\n        }\r\n        return r;\r\n    };\r\n\r\n    /**\r\n     * Derivative the monom\r\n     * @param letter\r\n     */\r\n    derivative = (letter?: string): Monom => {\r\n        // No setLetter given - assume it's the setLetter 'x'\r\n        if (letter === undefined) {\r\n            letter = 'x';\r\n        }\r\n\r\n        if (this.hasLetter(letter)) {\r\n            let d = this._literal[letter].clone(),\r\n                dM = this.clone();\r\n\r\n            // Subtract one to the degree.\r\n            dM._literal[letter].subtract(1)\r\n\r\n            // Multiply the coefficient by the previous degree\r\n            dM._coefficient.multiply(new Fraction(d.clone()));\r\n            return dM;\r\n        } else {\r\n            return new Monom().zero();\r\n        }\r\n    };\r\n\r\n    primitive = (letter?: string): Monom => {\r\n        // TODO: derivative including the ln value => implies creating different monom system ?\r\n        if (letter === undefined) {\r\n            letter = 'x'\r\n        }\r\n\r\n        // Zero monom\r\n        let M = this.clone(), degree\r\n\r\n        if (M.hasLetter(letter)) {\r\n            degree = M.degree(letter).clone().add(1)\r\n            M.coefficient = M.coefficient.clone().divide(degree)\r\n            M.setLetter(letter, degree)\r\n        } else {\r\n            // There is no letter.\r\n\r\n            // The coefficient might be zero (=> x) or a number a (=> ax)\r\n            if (M.coefficient.isZero()) {\r\n                M.coefficient = new Fraction().one()\r\n            }\r\n            M.setLetter(letter, 1)\r\n        }\r\n        return M\r\n    }\r\n    // ----------------------------------------\r\n    // Static functions\r\n    // ----------------------------------------\r\n\r\n    /**\r\n     * Get the least common multiple of monoms\r\n     * @param monoms    Array of monoms\r\n     */\r\n    static lcm = (...monoms: Monom[]): Monom => {\r\n        // All the monoms must be with natural powers...\r\n        for (let m of monoms) {\r\n            if (m.hasFractionCoefficient()) {\r\n                return new Monom().zero()\r\n            }\r\n        }\r\n\r\n\r\n        let M = new Monom(),\r\n            coeffN: number[] = monoms.map(value => value.coefficient.numerator),\r\n            coeffD: number[] = monoms.map(value => value.coefficient.denominator),\r\n            n = Numeric.gcd(...coeffN),\r\n            d = Numeric.lcm(...coeffD);\r\n\r\n        // Get the coefficient.\r\n        M.coefficient = new Fraction(n, d).reduce();\r\n\r\n        // Set the literal parts - go through each monoms literal parts and get only the lowest degree of each letters.\r\n        for (let m of monoms) {\r\n            // Remove the inexistant letters from the resulting monom\r\n            for (let letter in M.literal) {\r\n                if (!(letter in m.literal)) {\r\n                    M.literal[letter].zero();\r\n                }\r\n            }\r\n            for (let letter in m.literal) {\r\n                if (M.literal[letter] === undefined && m.literal[letter].isStrictlyPositive()) {\r\n                    M.literal[letter] = m.literal[letter].clone();\r\n                } else {\r\n                    M.literal[letter] = new Fraction(Math.min(m.literal[letter].value, M.literal[letter].value))\r\n                }\r\n            }\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n    /**\r\n     * Multiply two monoms and return a NEW monom.\r\n     * @param monoms\r\n     */\r\n    static xmultiply = (...monoms: Monom[]): Monom => {\r\n        let M = new Monom().one();\r\n\r\n        for (let m of monoms) {\r\n            M.multiply(m);\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Determine if multiple monoms are similar\r\n     * @param M\r\n     */\r\n    areSameAs = (...M: Monom[]): boolean => {\r\n        let result: boolean = true;\r\n\r\n        // Check all monoms if they are the isSame as the \"this\" one.\r\n        for (let i = 0; i < M.length; i++) {\r\n            if (!this.isSameAs(M[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All check passed -> all the monoms are similar.\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Determine if multiple monoms are equals\r\n     * @param M\r\n     */\r\n    areEquals = (...M: Monom[]): boolean => {\r\n        // They are not similar.\r\n        if (!this.areSameAs(...M)) {\r\n            return false;\r\n        }\r\n\r\n        // Check all coefficient. They must be equals.\r\n        for (let m of M) {\r\n            if (!this._coefficient.isEqual(m.coefficient)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All checks passed.\r\n        return true;\r\n    };\r\n\r\n}\r\n","/**\r\n * Polynom module contains everything necessary to handle polynoms.*\r\n */\r\n\r\nimport {literalType, Monom} from './monom';\r\nimport {Shutingyard} from '../shutingyard';\r\nimport {Numeric} from '../numeric';\r\nimport {Random, randomPolynomConfig} from \"../random\";\r\nimport {Fraction} from \"../coefficients\";\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n * ```\r\n * let P = new Polynom('3x-4')\r\n * ```\r\n */\r\nexport class Polynom {\r\n    private _rawString: string;\r\n    private _monoms: Monom[];\r\n    private _factors: Polynom[];\r\n    private _texString: string;\r\n\r\n    /**\r\n     *\r\n     * @param {string} polynomString (optional) Default polynom to parse on class creation\r\n     * @param values\r\n     */\r\n    constructor(polynomString?: string, ...values: unknown[]) {\r\n        this._monoms = [];\r\n        this._factors = [];\r\n        if (polynomString !== undefined) {\r\n            this.parse(polynomString, ...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get monoms() {\r\n        return this._monoms;\r\n    }\r\n\r\n    set monoms(M: Monom[]) {\r\n        this._monoms = M;\r\n    }\r\n\r\n    get factors(): Polynom[] {\r\n        return this._factors;\r\n    }\r\n\r\n    set factors(value: Polynom[]) {\r\n        this._factors = value;\r\n    }\r\n\r\n    get texFactors(): string {\r\n        this.factorize()\r\n\r\n        let tex = ''\r\n        for (let f of this.factors) {\r\n            if (f.monoms.length > 1) {\r\n                tex += `(${f.tex})`\r\n            } else {\r\n                tex = f.tex + tex;\r\n            }\r\n        }\r\n        return tex;\r\n    }\r\n\r\n    get texString(): string {\r\n        return this._texString;\r\n    }\r\n\r\n    get length() {\r\n        // TODO: Must reduce the monoms list to remove the zero coefficient.\r\n        return this._monoms.length;\r\n    }\r\n\r\n    get display(): string {\r\n        return this.genDisplay();\r\n    }\r\n\r\n    get raw(): string {\r\n        return this._rawString\r\n    }\r\n\r\n    get tex(): string {\r\n        return this.genDisplay('tex');\r\n    }\r\n\r\n    get isMultiVariable(): boolean {\r\n        const B = false;\r\n        for (const m of this._monoms) {\r\n            if (m.variables.length > 1) {\r\n                return true;\r\n            }\r\n        }\r\n        return B;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            V = V.concat(m.variables);\r\n        }\r\n\r\n        // Remove duplicates.\r\n        V = [...new Set(V)];\r\n\r\n        return V;\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    private genDisplay = (output?: string, forceSign?: boolean, wrapParentheses?: boolean): string => {\r\n        let P: string = '';\r\n\r\n        for (const k of this._monoms) {\r\n            if (k.coefficient.value === 0) {\r\n                continue;\r\n            }\r\n\r\n            P += `${(k.coefficient.sign() === 1 && (P !== '' || forceSign === true)) ? '+' : ''}${(output === 'tex') ? k.tex : k.display}`;\r\n        }\r\n\r\n        if (wrapParentheses === true && this.length > 1) {\r\n            if (output === 'tex') {\r\n                P = `\\\\left( ${P} \\\\right)`;\r\n            } else {\r\n                P = `(${P})`;\r\n            }\r\n        }\r\n\r\n        if (P === '') {\r\n            P = '0';\r\n        }\r\n        return P;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse a string to a polynom.\r\n     * @param inputStr\r\n     * @param values: as string, numbers or fractions\r\n     */\r\n    parse = (inputStr: string, ...values: unknown[]): Polynom => {\r\n\r\n        if (values === undefined || values.length === 0) {\r\n            inputStr = '' + inputStr;\r\n            this._rawString = inputStr;\r\n\r\n            // Parse the polynom using the shuting yard algorithm\r\n            if (inputStr !== '' && !isNaN(Number(inputStr))) {\r\n                this.empty();\r\n                // It's a simple number.\r\n                let m = new Monom(inputStr);\r\n                // m.coefficient = new Fraction(inputStr);\r\n                // m.literalStr = '';\r\n                this.add(m);\r\n                return this;\r\n            }\r\n\r\n            // Parse the string.\r\n            return this.shutingYardToReducedPolynom(inputStr);\r\n        } else if (/^[a-z]/.test(inputStr)) {\r\n            // We assume the inputStr contains only letters.\r\n            this.empty();\r\n\r\n            let fractions = values.map(x => new Fraction(x));\r\n            // Multiple setLetter version\r\n            if (inputStr.length > 1) {\r\n                // TODO: check that the number of values given correspond to the letters (+1 eventually)\r\n                let letters = inputStr.split(''),\r\n                    i = 0;\r\n                for (let F of fractions) {\r\n                    let m = new Monom();\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = letters[i] || '';\r\n                    this.add(m);\r\n                    i++;\r\n                }\r\n            }\r\n            // Single setLetter version\r\n            else {\r\n                let n = fractions.length - 1;\r\n                for (let F of fractions) {\r\n                    let m = new Monom()\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = `${inputStr}^${n}`\r\n                    this.add(m);\r\n                    n--;\r\n                }\r\n            }\r\n            return this;\r\n        } else {\r\n            return this.zero();\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * Main parse using a shutting yard class\r\n     * @param inputStr\r\n     */\r\n    private shutingYardToReducedPolynom = (inputStr: string): Polynom => {\r\n        // Get the RPN array of the current expression\r\n        const SY: Shutingyard = new Shutingyard().parse(inputStr);\r\n        const rpn: { token: string, tokenType: string }[] = SY.rpn;\r\n        let m1: Polynom;\r\n        let m2: Polynom;\r\n\r\n        let stack: Polynom[] = [],\r\n            previousToken: string = null,\r\n            tempPolynom\r\n\r\n        for (const element of rpn) {\r\n            if (element.tokenType === 'coefficient' || element.tokenType === 'variable') {\r\n                tempPolynom = new Polynom().zero();\r\n                tempPolynom.monoms = [new Monom(element.token)]\r\n                stack.push(tempPolynom.clone())\r\n            } else if (element.tokenType === 'operation') {\r\n                m2 = (stack.pop()) || new Polynom().zero();\r\n                m1 = (stack.pop()) || new Polynom().zero();\r\n                switch (element.token) {\r\n                    case '+':\r\n                        stack.push(m1.add(m2))\r\n                        break;\r\n                    case '-':\r\n                        stack.push(m1.subtract(m2))\r\n                        break;\r\n                    case '*':\r\n                        stack.push(m1.multiply(m2))\r\n                        break;\r\n                    case '^':\r\n                        stack.push(m1.pow(+previousToken))\r\n                }\r\n            }\r\n            previousToken = element.token;\r\n        }\r\n\r\n        this._monoms = stack[0].monoms;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the polynom\r\n     */\r\n    clone = (): Polynom => {\r\n        const P = new Polynom();\r\n        const M: Monom[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            M.push(m.clone());\r\n        }\r\n\r\n        P.monoms = M;\r\n        return P;\r\n    };\r\n\r\n    /**\r\n     * Set the polynom to zero.\r\n     * @returns {this}\r\n     */\r\n    zero = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().zero());\r\n        this._rawString = '0';\r\n        return this;\r\n    };\r\n\r\n    one = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().one());\r\n        this._rawString = '1';\r\n        return this;\r\n    }\r\n\r\n    empty = (): Polynom => {\r\n        this._monoms = [];\r\n        this._rawString = '';\r\n        return this;\r\n    };\r\n\r\n    // // -----------------------------------------------\r\n    // // Polynom generators and randomizers\r\n    // // -----------------------------------------------\r\n    // random(config?: randomPolynomConfig) {\r\n    //     return Random.polynom(config);\r\n    // }\r\n    //\r\n    // private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n    //     degree: 2,\r\n    //     unit: true,\r\n    //     fractions: false,\r\n    //     factorable: false,\r\n    //     letters: 'x',\r\n    //     allowNullMonom: false,\r\n    //     numberOfMonoms: false\r\n    // };\r\n    // get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n    //     return this._randomizeDefaults;\r\n    // }\r\n    //\r\n    // set randomizeDefaults(value) {\r\n    //     this._randomizeDefaults = value;\r\n    // }\r\n    //\r\n    // randomize = (config: { [key: string]: number | string | boolean }): Polynom => {\r\n    //     let P = new Polynom();\r\n    //\r\n    //     // Check the config file and use the default values.\r\n    //     if (config === undefined) {\r\n    //         config = {};\r\n    //     }\r\n    //     for (let k in this._randomizeDefaults) {\r\n    //         if (config[k] === undefined) {\r\n    //             config[k] = this._randomizeDefaults[k];\r\n    //         }\r\n    //     }\r\n    //\r\n    //     // TODO: Build a more robust randomize function\r\n    //     return P;\r\n    // }\r\n    //\r\n    // rndFactorable = (degree: number = 2, unit: boolean | number = false, letters: string = 'x'): Polynom => {\r\n    //     // TODO: Make rndFactorable polynom generator more user friendly\r\n    //     this._factors = [];\r\n    //     for (let i = 0; i < degree; i++) {\r\n    //         let factorUnit = unit === true || i >= unit,\r\n    //             p = Random.polynom({\r\n    //                 degree: 1,\r\n    //                 unit: factorUnit,\r\n    //                 fraction: false,\r\n    //                 letters\r\n    //             });\r\n    //         this._factors.push(p);\r\n    //     }\r\n    //\r\n    //     this.empty().monoms = this._factors[0].monoms;\r\n    //     for (let i = 1; i < this._factors.length; i++) {\r\n    //         this.multiply(this._factors[i]);\r\n    //     }\r\n    //     return this;\r\n    // };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Polynom => {\r\n        this._monoms = this._monoms.map(m => m.opposed());\r\n        return this;\r\n    };\r\n\r\n    add = (...values: unknown[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value instanceof Polynom) {\r\n                this._monoms = this._monoms.concat(value.monoms);\r\n            } else if (value instanceof Monom) {\r\n                this._monoms.push(value.clone());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()));\r\n            } else {\r\n                this._monoms.push(new Monom(value));\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (...values: unknown[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value instanceof Polynom) {\r\n                this._monoms = this._monoms.concat(value.clone().opposed().monoms);\r\n            } else if (value instanceof Monom) {\r\n                this._monoms.push(value.clone().opposed());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()).opposed());\r\n            } else {\r\n                this._monoms.push(new Monom(value).opposed());\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    multiply = (value: unknown): Polynom => {\r\n        if (value instanceof Polynom) {\r\n            return this.multiplyByPolynom(value);\r\n        } else if (value instanceof Fraction) {\r\n            return this.multiplyByFraction(value);\r\n        } else if (value instanceof Monom) {\r\n            return this.multiplyByMonom(value);\r\n        } else if (Number.isSafeInteger(value) && typeof value==='number') {\r\n            return this.multiplyByInteger(value);\r\n        }\r\n\r\n        // Something went wrong...\r\n        return this;\r\n    }\r\n\r\n    private multiplyByPolynom = (P: Polynom): Polynom => {\r\n        const M: Monom[] = [];\r\n        for (const m1 of this._monoms) {\r\n            for (const m2 of P.monoms) {\r\n                M.push(Monom.xmultiply(m1, m2));\r\n            }\r\n        }\r\n\r\n        this._monoms = M;\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.multiply(F);\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByInteger = (nb: number): Polynom => {\r\n        return this.multiplyByFraction(new Fraction(nb));\r\n    };\r\n\r\n    private multiplyByMonom = (M: Monom): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.multiply(M)\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n    /**\r\n     * Divide the current polynom by another polynom.\r\n     * @param P\r\n     * returns {quotient: Polynom, reminder: Polynom}\r\n     */\r\n    euclidian = (P: Polynom): { quotient: Polynom, reminder: Polynom } => {\r\n        const letter: string = P.variables[0];\r\n        const quotient: Polynom = new Polynom().zero();\r\n        const reminder: Polynom = this.clone().reorder(letter);\r\n\r\n        // There is no variable !\r\n        if (P.variables.length === 0) {\r\n            return {quotient, reminder}\r\n        }\r\n\r\n        // Get at least a letter\r\n\r\n        const maxMP: Monom = P.monomByDegree(undefined, letter);\r\n        const degreeP: Fraction = P.degree(letter);\r\n\r\n        let newM: Monom;\r\n\r\n        // Make the euclidian division of the two polynoms.\r\n        let MaxIteration = this.degree(letter).clone().multiply(2);\r\n        while (reminder.degree(letter).geq(degreeP) && MaxIteration.isPositive()) {\r\n            MaxIteration.subtract(1)\r\n\r\n            // Get the greatest monom divided by the max monom of the divider\r\n            newM = reminder.monomByDegree(undefined, letter).clone().divide(maxMP);\r\n\r\n            if (newM.isZero()) {\r\n                break;\r\n            }\r\n\r\n            // Get the new quotient and reminder.\r\n            quotient.add(newM);\r\n            reminder.subtract(P.clone().multiply(newM));\r\n        }\r\n\r\n        return {quotient, reminder};\r\n    };\r\n\r\n    divide = (value: unknown): Polynom => {\r\n        if (value instanceof Fraction) {\r\n            this.divideByFraction(value);\r\n        } else if (typeof value==='number' && Number.isSafeInteger(value)) {\r\n            return this.divideByInteger(value);\r\n        }\r\n    }\r\n\r\n    private divideByInteger = (nb: number): Polynom => {\r\n        const nbF = new Fraction(nb);\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(nbF);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    private divideByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(F);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    pow = (nb: number): Polynom => {\r\n        if (!Number.isSafeInteger(nb)) {\r\n            return this.zero();\r\n        }\r\n        if (nb < 0) {\r\n            return this.zero();\r\n        }\r\n        if (nb === 0) {\r\n            return new Polynom();\r\n        }\r\n\r\n        const P = this.clone();\r\n        for (let i = 1; i < nb; i++) {\r\n            this.multiply(P);\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param P\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (P: Polynom, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '='\r\n        }\r\n\r\n        // Create clone version to reduce them without altering the original polynoms.\r\n        const cP1 = this.clone().reduce().reorder();\r\n        const cP2 = P.clone().reduce().reorder();\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree().isNotEqual(cP2.degree())) {\r\n                    return false;\r\n                }\r\n\r\n                // Check if the coefficients are the isSame.\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isEqual(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            case 'same':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree() !== cP2.degree()) {\r\n                    return false;\r\n                }\r\n\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isSameAs(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    isZero(): boolean {\r\n        return (this._monoms.length === 1 && this._monoms[0].coefficient.isZero()) || this._monoms.length === 0;\r\n    }\r\n\r\n    isOne(): boolean {\r\n        return this._monoms.length === 1 && this._monoms[0].coefficient.isOne();\r\n    }\r\n\r\n    isEqual = (P: Polynom): boolean => {\r\n        return this.compare(P, '=');\r\n    };\r\n\r\n    isSameAs = (P: Polynom): boolean => {\r\n        return this.compare(P, 'same');\r\n    };\r\n\r\n    isOpposedAt = (P: Polynom): boolean => {\r\n        return this.compare(P.clone().opposed(), '=');\r\n    };\r\n\r\n    isFactorized = (polynomString: string): boolean => {\r\n        let P;\r\n\r\n        // Check if polynom is complete...\r\n        if (polynomString.match(/\\(/g).length !== polynomString.match(/\\)/g).length) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check if the provided (string) version is fully factorized.\r\n        // Run a regex on the string.\r\n        let polynomStringNormalized = polynomString.replaceAll('*', ''),\r\n            polynomStringReduced = '' + polynomStringNormalized,\r\n            factors: string[] = [];\r\n\r\n        for (let x of polynomStringNormalized.matchAll(/\\(([a-z0-9+\\-]+)\\)(\\^[0-9]*)?/g)) {\r\n            if (x[2] !== undefined) {\r\n                for (let i = 0; i < +x[2].substr(1); i++) {\r\n                    factors.push(x[1])\r\n                }\r\n            } else {\r\n                factors.push(x[1]);\r\n            }\r\n            polynomStringReduced = polynomStringReduced.replaceAll(x[0], '');\r\n        }\r\n        if (polynomStringReduced !== '') {\r\n            factors.push(polynomStringReduced);\r\n        }\r\n        let polyFactors = factors.map(x => new Polynom(x));\r\n\r\n        // Factorize the current polynom.\r\n        this.factorize();\r\n\r\n        // Compare the given factors with the generated factors\r\n        let sign = 1;\r\n        for (let f of this.factors) {\r\n            for (let i = 0; i < polyFactors.length; i++) {\r\n                if (f.isEqual(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    break;\r\n                } else if (f.isOpposedAt(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    sign = -sign;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // The polyfactors must be empty and the cumulative opposite factors must be 1.\r\n        return (polyFactors.length === 0 && sign === 1);\r\n    }\r\n\r\n    isDeveloped = (polynomString: string): Boolean => {\r\n        let P: Polynom;\r\n\r\n        // There is at least one parenthese - it is not developed.\r\n        if (polynomString.match(/\\(/g).length + polynomString.match(/\\)/g).length) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            // Build the polynom\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check that everything is completely developed. Actually, there are no parentheses... so it is fully developed\r\n\r\n        // maybe it wasn't reduced and not ordered...\r\n        // compare polynom string.\r\n\r\n        // normalize the string\r\n        let polynomStringNormalized = polynomString.replaceAll('[*\\s]', '')\r\n\r\n        // Determine if it's the exact same string.\r\n        // TODO: Maybe it's enough to just make this test !\r\n        return polynomStringNormalized === P.reduce().reorder().display\r\n    }\r\n    // ------------------------------------------\r\n    // Misc polynoms functions\r\n    // -------------------------------------\r\n    reduce = (): Polynom => {\r\n        for (let i = 0; i < this._monoms.length; i++) {\r\n            for (let j = i + 1; j < this._monoms.length; j++) {\r\n                if (this._monoms[i].isSameAs(this.monoms[j])) {\r\n                    this._monoms[i].add(this.monoms[j]);\r\n                    this._monoms.splice(j, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Remove all null monoms\r\n        this._monoms = this._monoms.filter((m) => {\r\n            return m.coefficient.value !== 0\r\n        });\r\n\r\n        // Reduce all monoms coefficient.\r\n        for (const m of this._monoms) {\r\n            m.coefficient.reduce();\r\n        }\r\n\r\n        if (this.length === 0) {\r\n            return new Polynom().zero();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    reorder = (letter: string = 'x'): Polynom => {\r\n        // TODO: Must handle multiple setLetter reorder system\r\n        this._monoms.sort(function (a, b) {\r\n            return b.degree(letter).clone().subtract(a.degree(letter)).value\r\n        });\r\n        return this.reduce();\r\n    };\r\n\r\n    degree = (letter?: string): Fraction => {\r\n        let d: Fraction = new Fraction().zero();\r\n        for (const m of this._monoms) {\r\n            d = Fraction.max(m.degree(letter).value, d);\r\n        }\r\n        return d;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        let L: string[] = [], S = new Set();\r\n\r\n        for (let m of this._monoms) {\r\n            S = new Set([...S, ...m.variables]);\r\n        }\r\n\r\n        // @ts-ignore\r\n        return [...S];\r\n    }\r\n\r\n    /**\r\n     * Replace a variable (letter) by a polynom.\r\n     * @param letter\r\n     * @param P\r\n     */\r\n    replaceBy = (letter: string, P: Polynom): Polynom => {\r\n        let pow: Fraction;\r\n        const resultPolynom: Polynom = new Polynom().zero();\r\n\r\n        for (const m of this.monoms) {\r\n            if (m.literal[letter] === undefined || m.literal[letter].isZero()) {\r\n                resultPolynom.add(m.clone());\r\n            } else {\r\n                // We have found a setLetter.\r\n                // Get the power and reset it.\r\n                pow = m.literal[letter].clone();\r\n                delete m.literal[letter];\r\n\r\n                // TODO: replaceBy works only with positive and natural pow\r\n                resultPolynom.add(P.clone().pow(Math.abs(pow.numerator)).multiply(m));\r\n            }\r\n        }\r\n\r\n        this._monoms = resultPolynom.reduce().reorder().monoms;\r\n        return this;\r\n    };\r\n\r\n    // Evaluate a polynom.\r\n    evaluate = (values: literalType | Fraction | number): Fraction => {\r\n        const r = new Fraction().zero();\r\n\r\n        this._monoms.forEach(monom => {\r\n            //console.log('Evaluate polynom: ', monom.display, values, monom.evaluate(values).display);\r\n            r.add(monom.evaluate(values));\r\n        });\r\n        return r;\r\n    };\r\n\r\n    derivative = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.derivative(letter));\r\n        }\r\n        return dP;\r\n\r\n    }\r\n\r\n    primitive = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.primitive(letter))\r\n        }\r\n        return dP\r\n    }\r\n\r\n    integrate = (a: Fraction | number, b: Fraction | number, letter?: string): Fraction => {\r\n        const primitive = this.primitive(letter)\r\n\r\n        if (letter === undefined) {\r\n            letter = 'x'\r\n        }\r\n\r\n        let valuesA: literalType = {},\r\n            valuesB: literalType = {}\r\n        valuesA[letter] = new Fraction(a);\r\n        valuesB[letter] = new Fraction(b);\r\n\r\n        return primitive.evaluate(valuesB).subtract(primitive.evaluate(valuesA))\r\n    }\r\n    // ------------------------------------------\r\n    // Polynoms factorization functions\r\n    // -------------------------------------\r\n    /**\r\n     * Factorize a polynom and store the best results in factors.\r\n     * @param maxValue Defines the greatest value to search to (default is 20).\r\n     */\r\n    factorize = (letter?: string): Polynom[] => {\r\n        let factors: Polynom[] = [];\r\n\r\n        // Extract the common monom\r\n        let P = this.clone().reorder(),\r\n            M = P.commonMonom(),\r\n            tempPolynom: Polynom\r\n        // It has a common monom.\r\n        if (!M.isOne()) {\r\n            tempPolynom = new Polynom()\r\n            tempPolynom.monoms = [M]\r\n            factors = [tempPolynom.clone()]\r\n            P = P.euclidian(tempPolynom).quotient;\r\n        }\r\n\r\n        let securityLoop = P.degree().clone().multiply(2).value\r\n        // securityLoop = 0\r\n        while (securityLoop >= 0) {\r\n            securityLoop--\r\n\r\n\r\n            if (P.monoms.length < 2) {\r\n                if (!P.isOne()) {\r\n                    factors.push(P.clone());\r\n                }\r\n                break;\r\n            } else {\r\n                // Get the first and last monom.\r\n                let m1 = P.monoms[0].dividers,\r\n                    m2 = P.monoms[P.monoms.length - 1].dividers\r\n\r\n                // console.log('CURRENT VALUE')\r\n                // console.log(P.tex)\r\n                // console.log('---------------------')\r\n                for (let m1d of m1) {\r\n                    for (let m2d of m2) {\r\n                        // if(m1d.degree()===m2d.degree()){continue}\r\n                        let dividerPolynom = new Polynom(),\r\n                            result\r\n                        dividerPolynom.monoms = [m1d.clone(), m2d.clone()]\r\n                        result = P.euclidian(dividerPolynom)\r\n\r\n                        // console.log(dividerPolynom.tex, '=>', result.reminder.tex, '|||||', result.quotient.tex)\r\n                        if (result.reminder.isZero()) {\r\n                            P = result.quotient.clone();\r\n                            factors.push(dividerPolynom)\r\n                            continue;\r\n                        }\r\n\r\n                        dividerPolynom.monoms = [m1d.clone(), m2d.clone().opposed()]\r\n                        result = P.euclidian(dividerPolynom)\r\n                        if (result.reminder.isZero()) {\r\n                            P = result.quotient.clone();\r\n                            factors.push(dividerPolynom)\r\n                        }\r\n                        // console.log(dividerPolynom.tex, '=>', result.reminder.tex)\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        this.factors = factors\r\n        return factors;\r\n    }\r\n\r\n    private _factorize2ndDegree = (letter: string): Polynom[] => {\r\n        let P1: Polynom, P2: Polynom,\r\n            a, b, c, delta, x1, x2, factor;\r\n\r\n        // One variable only\r\n        if (this.numberOfVars === 1) {\r\n            a = this.monomByDegree(2, letter).coefficient;\r\n            b = this.monomByDegree(1, letter).coefficient;\r\n            c = this.monomByDegree(0, letter).coefficient;\r\n            delta = b.clone().pow(2).subtract(a.clone().multiply(c).multiply(4));\r\n\r\n            if (delta.isZero()) {\r\n                x1 = b.clone().opposed().divide(a.clone().multiply(2))\r\n                P1 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                P2 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                factor = a.divide(x1.denominator).divide(x1.denominator);\r\n\r\n                if (!factor.isOne()) {\r\n                    // TODO: Update new Polynom to accept anything...\r\n                    return [new Polynom(factor.display), P1, P2]\r\n                } else {\r\n                    return [P1, P2]\r\n                }\r\n            } else if (delta.isPositive() && delta.isSquare()) {\r\n                x1 = b.clone().opposed()\r\n                    .add(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n                x2 = b.clone().opposed()\r\n                    .subtract(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n\r\n                // (2x+5)(3x-2)\r\n                // 6x^2+11x-10\r\n                // a = 6, b = 11, c = -10\r\n                // delta = 121-4*6*(-10) = 361= 19^2\r\n                // x1 = (-11 + 19)  / 12 = 8/12 = 2/3\r\n                // x2 = (-11 - 19)  / 12 = -30/12 = -5/2\r\n                factor = a.divide(x1.denominator).divide(x2.denominator);\r\n                if (factor.isOne()) {\r\n                    return [\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n                } else {\r\n                    return [\r\n                        new Polynom(factor.display),\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n\r\n                }\r\n            } else {\r\n                // No solution possible - return the complete value.\r\n                return [this.clone()]\r\n            }\r\n        } else {\r\n            // If multiple variables, only handle perfect squares...\r\n            a = this.monomByDegree(2, letter);\r\n            b = this.monomByDegree(1, letter);\r\n            c = this.monomByDegree(0, letter);\r\n\r\n\r\n            if (a.isLiteralSquare() && c.isLiteralSquare()) {\r\n                // Check the middle item is same as...\r\n                if (b.clone().pow(2).isSameAs(a.clone().multiply(c))) {\r\n                    // Determine if the coefficient values matches.\r\n\r\n                    // Search 4 values (r, s, t, u) that matches:\r\n                    // (r X + s Y)(t X + u Y) = rt X^2 + (ru + st) XY + su Y^2\r\n\r\n                    let xPolynom = new Polynom('x', a.coefficient, b.coefficient, c.coefficient);\r\n                    let xFactors = xPolynom._factorize2ndDegree('x');\r\n\r\n                    let factors = [], xyzPolynom: Polynom;\r\n\r\n                    if (xFactors.length >= 2) {\r\n                        for (let p of xFactors) {\r\n                            if (p.degree().isZero()) {\r\n                                factors.push(p.clone())\r\n                            } else {\r\n                                xyzPolynom = p.clone();\r\n                                xyzPolynom.monoms[0].literal = a.literalSqrt\r\n                                xyzPolynom.monoms[1].literal = c.literalSqrt\r\n                                factors.push(xyzPolynom.clone())\r\n                            }\r\n                        }\r\n                        return factors\r\n                    }\r\n                }\r\n            }\r\n\r\n            return [this.clone()]\r\n            //\r\n            // console.log(a.tex, b.tex, c.tex)\r\n            // if (a.isSquare() && c.isSquare()) {\r\n            //     console.log('A C squares')\r\n            //     if (a.clone().sqrt().multiply(c.clone().sqrt()).multiplyByNumber(2).isSameAs(b)) {\r\n            //         console.log('HERE')\r\n            //         if (a.coefficient.sign() === b.coefficient.sign()) {\r\n            //             return []\r\n            //         }else{\r\n            //             return []\r\n            //         }\r\n            //     }\r\n            // } else if(a.isLiteralSquare() && c.isLiteralSquare()) {\r\n            //     console.log('A C litteral SQUARES')\r\n            //     // Check that the middle element is the product of a and c.\r\n            //\r\n            //     if(b.clone().pow(2).isSameAs(a.clone().multiply(c))){\r\n            //         console.log('SAME')\r\n            //\r\n            //     }else{\r\n            //         console.log('NOT SAME')\r\n            //     }\r\n            //\r\n            //     return [this.clone()]\r\n            // } else {\r\n            //     console.log('NOT SQUARES AT ALL !!!!')\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    private _factorizeByGroups = (): Polynom[] => {\r\n        // TODO: Factorize by groups.\r\n        return [];\r\n    }\r\n    // ------------------------------------------\r\n    // Polynoms helpers functions\r\n    // -------------------------------------\r\n    // TODO: get zeroes for more than first degree and for more than natural degrees\r\n    getZeroes = (): (Fraction | boolean)[] => {\r\n        const Z: Fraction[] = [];\r\n\r\n        switch (this.degree().value) {\r\n            case 0:\r\n                if (this._monoms[0].coefficient.value === 0) {\r\n                    return [true];\r\n                } else {\r\n                    return [false];\r\n                }\r\n            case 1:\r\n                // There is only one monoms,\r\n                if (this._monoms.length === 1) {\r\n                    return [new Fraction().zero()];\r\n                } else {\r\n                    const P = this.clone().reduce().reorder();\r\n                    return [P.monoms[1].coefficient.opposed().divide(P.monoms[0].coefficient)];\r\n                }\r\n            // TODO: Determine the zeros of an equation of second degree.\r\n            //case 2:\r\n            default:\r\n                // Make sure the polynom is factorized.\r\n                if (this._factors.length === 0) {\r\n                    this.factorize()\r\n                }\r\n\r\n                let zeroes = [], zeroesAsTex = [];\r\n                for (let P of this._factors) {\r\n                    if (P.degree().greater(2)) {\r\n                        // TODO: Handle other polynom.\r\n\r\n                    } else if (P.degree().value === 2) {\r\n                        let A = P.monomByDegree(2).coefficient,\r\n                            B = P.monomByDegree(1).coefficient,\r\n                            C = P.monomByDegree(0).coefficient,\r\n                            D = B.clone().pow(2).subtract(A.clone().multiply(C).multiply(4));\r\n\r\n                        if (D.value > 0) {\r\n                            /*console.log('Two zeroes for ', P.tex); */\r\n                            let x1 = (-(B.value) + Math.sqrt(D.value)) / (2 * A.value),\r\n                                x2 = (-(B.value) - Math.sqrt(D.value)) / (2 * A.value);\r\n\r\n                            zeroes.push(new Fraction(x1.toFixed(3)).reduce());\r\n                            zeroes.push(new Fraction(x2.toFixed(3)).reduce());\r\n                        } else if (D.value === 0) {\r\n                            /*console.log('One zero for ', P.tex); */\r\n\r\n                        } else {\r\n                            console.log('No zero for ', P.tex);\r\n                        }\r\n                    } else {\r\n                        for (let z of P.getZeroes()) {\r\n                            // Check if the zero is already in the list.\r\n                            if (z === false || z === true) {\r\n                                continue;\r\n                            }\r\n                            if (zeroesAsTex.indexOf(z.frac) === -1) {\r\n                                zeroes.push(z);\r\n                                zeroesAsTex.push(z.frac);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return zeroes;\r\n        }\r\n        return Z;\r\n    };\r\n\r\n\r\n    // TODO: analyse the next functions to determine if they are useful or not...\r\n    monomByDegree = (degree?: Fraction|number, letter?: string): Monom => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomByDegree(this.degree(letter), letter);\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter).isEqual(degree)) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        // Nothing was found - return the null monom.\r\n        return new Monom().zero();\r\n    };\r\n\r\n    monomsByDegree = (degree?: number|Fraction, letter?: string): Monom[] => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomsByDegree(this.degree(letter));\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        let Ms: Monom[] = [];\r\n\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter) === degree) {\r\n                Ms.push(m.clone())\r\n            }\r\n        }\r\n\r\n        return Ms\r\n        // Nothing was found - retur\r\n    }\r\n\r\n    // Used in LinearSystem.tex\r\n    monomByLetter = (letter: string): Monom => {\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.hasLetter(letter)) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        return new Monom().zero();\r\n    };\r\n\r\n\r\n    // Next functions are used for for commonMonom, which is used in the factorize method.\r\n    getDenominators = (): number[] => {\r\n        const denominators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            denominators.push(m.coefficient.denominator);\r\n        }\r\n        return denominators;\r\n    };\r\n\r\n    getNumerators = (): number[] => {\r\n        const numerators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            numerators.push(m.coefficient.numerator);\r\n        }\r\n        return numerators;\r\n    };\r\n\r\n    lcmDenominator = (): number => {\r\n        return Numeric.lcm(...this.getDenominators());\r\n    };\r\n\r\n    gcdDenominator = (): number => {\r\n        return Numeric.gcd(...this.getDenominators());\r\n    };\r\n\r\n    lcmNumerator = (): number => {\r\n        return Numeric.lcm(...this.getNumerators());\r\n    };\r\n\r\n    gcdNumerator = (): number => {\r\n        return Numeric.gcd(...this.getNumerators());\r\n    };\r\n\r\n    commonMonom = (): Monom => {\r\n        let M = new Monom().one(), numerator: number, denominator: number, degree = this.degree();\r\n\r\n        numerator = this.gcdNumerator();\r\n        denominator = this.gcdDenominator();\r\n\r\n        M.coefficient = new Fraction(numerator, denominator);\r\n        for (let L of this.variables) {\r\n            // Initialize the setLetter with the max degree\r\n            M.setLetter(L, degree);\r\n            for (let m of this._monoms) {\r\n                M.setLetter(L, Fraction.min(m.degree(L), M.degree(L)));\r\n                if (M.degree(L).isZero()) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return M;\r\n    }\r\n}\r\n","/**\r\n * Rational polynom module contains everything necessary to handle rational polynoms.\r\n * @module Polynom\r\n */\r\n\r\nimport {Polynom} from \"./polynom\";\r\nimport {Fraction} from \"../coefficients\";\r\n\r\n/**\r\n * Rational class can handle rational polynoms\r\n */\r\n    export class Rational {\r\n        private _rawString: string;\r\n        private _numerator: Polynom;\r\n        private _denominator: Polynom;\r\n\r\n        /**\r\n         *\r\n         * @param numerator\r\n         * @param denominator\r\n         */\r\n        constructor(numerator?: Polynom, denominator?: Polynom) {\r\n            this._numerator = numerator ? numerator.clone() : new Polynom();\r\n            this._denominator = denominator ? denominator.clone() : new Polynom();\r\n        }\r\n\r\n        clone = (): Rational => {\r\n            this._numerator = this._numerator.clone()\r\n            this._denominator = this._denominator.clone()\r\n\r\n            return this;\r\n        }\r\n\r\n        get tex(): string {\r\n            return `\\\\dfrac{ ${this._numerator.tex} }{ ${this._denominator.tex} }`;\r\n        }\r\n\r\n        get texFactors(): string {\r\n            this._numerator.factorize()\r\n            this._denominator.factorize()\r\n\r\n            return `\\\\dfrac{ ${this._numerator.texFactors} }{ ${this._denominator.texFactors} }`\r\n        }\r\n\r\n        get numerator(): Polynom {\r\n            return this._numerator\r\n        }\r\n\r\n        get denominator(): Polynom {\r\n            return this._denominator\r\n        }\r\n\r\n        domain = (): string => {\r\n            let zeroes = this._denominator.getZeroes();\r\n            if (zeroes.length === 0 || zeroes[0] === false) {\r\n                return '\\\\mathbb{R}'\r\n            } else if (zeroes[0] === true) {\r\n                return '\\\\varnothing'\r\n            } else {\r\n                return '\\\\mathbb{R}\\\\setminus\\\\left{' +\r\n                    zeroes.map(x => {\r\n                        return (typeof x === 'boolean') ? '' : x.frac\r\n                    })\r\n                        .join(';') + '\\\\right}'\r\n            }\r\n        }\r\n\r\n        amplify = (P: Polynom): Rational => {\r\n            this._numerator.multiply(P);\r\n            this._denominator.multiply(P);\r\n\r\n            return this;\r\n        }\r\n\r\n        simplify = (P: Polynom): Rational => {\r\n            let NumeratorEuclidien = this._numerator.euclidian(P);\r\n            if (!NumeratorEuclidien.reminder.isZero()) {\r\n                return this;\r\n            }\r\n\r\n            let DenominatorEuclidien = this._denominator.euclidian(P);\r\n            if (!DenominatorEuclidien.reminder.isZero()) {\r\n                return this;\r\n            }\r\n\r\n            this._numerator = NumeratorEuclidien.quotient;\r\n            this._denominator = DenominatorEuclidien.quotient;\r\n            return this;\r\n        }\r\n\r\n        reduce = (): Rational => {\r\n            console.log(this._numerator.tex)\r\n            this._numerator.factorize();\r\n            console.log(this._numerator.factors.map(x => x.tex))\r\n            for (let f of this._numerator.factors) {\r\n                this.simplify(f);\r\n            }\r\n\r\n            return this;\r\n        }\r\n\r\n        opposed = (): Rational => {\r\n            this._numerator.opposed();\r\n            return this;\r\n        }\r\n        add = (R: Rational): Rational => {\r\n            // 1. Make sure both rational are at the same denominator\r\n            // 2. Add the numerators.\r\n            // 3. Simplify\r\n\r\n            // Store the adding denominator\r\n            let denominator = this._denominator.clone()\r\n\r\n            // Amplif the main rational polynom by the adding denominator\r\n            this.amplify(R._denominator)\r\n\r\n            // Add to the numerator the adding value...\r\n            this._numerator.add(R._numerator.clone().multiply(denominator));\r\n\r\n            return this;\r\n        }\r\n\r\n        subtract = (R: Rational): Rational => {\r\n            return this.add(R.clone().opposed())\r\n        }\r\n\r\n        limits = (value: Fraction | number, letter?: string): Fraction | number => {\r\n            if (value === Infinity || value === -Infinity) {\r\n                let N = this._numerator.monomByDegree(this._numerator.degree(letter), letter),\r\n                    D = this._denominator.monomByDegree(this._denominator.degree(letter), letter)\r\n\r\n                N.divide(D)\r\n\r\n                if (N.degree(letter).isStrictlyPositive()) {\r\n                    return N.coefficient.sign() * (Math.pow((value > 0 ? 1 : -1), N.degree(letter).value % 2)) === 1 ? Infinity : -Infinity\r\n                }\r\n                if (N.degree(letter).isZero()) {\r\n                    return N.coefficient\r\n                }\r\n                if (N.degree(letter).isStrictlyPositive()) {\r\n                    return N.coefficient.sign() * (Math.pow(-1, N.degree(letter).value % 2)) === 1 ? 0 : -0\r\n                }\r\n            } else {\r\n                return this._numerator.evaluate({letter: new Fraction(value)}).divide(this._denominator.evaluate({letter: new Fraction(value)}))\r\n            }\r\n        }\r\n    }\r\n","import {Numeric} from \"../numeric\";\r\n\r\n/**\r\n * The fraction class make possible to handle\r\n * TODO: Write the documentation correctly.\r\n * \\\\(\\frac{a}{b}\\\\) or \\\\[\\frac{a}{b}\\\\]  values.\r\n */\r\nexport class Fraction {\r\n    private _numerator: number;\r\n    private _denominator: number;\r\n\r\n    constructor(value?: unknown, denominatorOrPeriodic?: number) {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n\r\n        if (value !== undefined) {\r\n            this.parse(value, denominatorOrPeriodic);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isFraction() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n\r\n    get numerator(): number {\r\n        return this._numerator;\r\n    }\r\n\r\n    set numerator(value: number) {\r\n        this._numerator = value;\r\n    }\r\n\r\n    get denominator(): number {\r\n        return this._denominator;\r\n    }\r\n\r\n    set denominator(value: number) {\r\n        this._denominator = value;\r\n    }\r\n\r\n    get value(): number {\r\n        return this._numerator / this._denominator;\r\n    }\r\n\r\n    // Display getter\r\n    get tex(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else if (this._numerator < 0) {\r\n            return `-\\\\frac{ ${-this._numerator} }{ ${this._denominator} }`;\r\n        } else {\r\n            return `\\\\frac{ ${this._numerator} }{ ${this._denominator} }`;\r\n        }\r\n    }\r\n\r\n    get display(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else {\r\n            return `${this._numerator}/${this._denominator}`;\r\n        }\r\n    }\r\n\r\n    // Helper function to display fractions\r\n    get frac(): string {\r\n        return this.tex;\r\n    }\r\n\r\n    get dfrac(): string {\r\n        return this.tex.replace('\\\\frac', '\\\\dfrac');\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse the value to get the numerator and denominator\r\n     * @param value : number or string to parse to get the fraction\r\n     * @param denominatorOrPeriodic (optional|number) : length of the periodic part: 2.333333 => 1 or denominator value\r\n     */\r\n    parse = (value: unknown, denominatorOrPeriodic?: number): Fraction => {\r\n        let S: string[];\r\n\r\n        // A null value means a zero fraction.\r\n        if (value === null || value === \"\") {\r\n            this._numerator = 0;\r\n            this._denominator = 1;\r\n            return this;\r\n        }\r\n\r\n        switch (typeof value) {\r\n            case \"string\":\r\n                // Split the sting value in two parts: Numerator/Denominator\r\n                S = value.split('/');\r\n\r\n                // Security checks\r\n                if (S.length > 2) throw \"Two many divide signs\";\r\n                if (S.map(x => x === '' || isNaN(Number(x))).includes(true)) throw \"Not a number\"\r\n\r\n\r\n                if (S.length === 1) {\r\n                    // No divide sign\r\n                    return this.parse(+S[0]);\r\n                } else if (S.length === 2) {\r\n                    // One divide signe\r\n                    // We check if the denominator is zero\r\n                    if (S[1] === '0') {\r\n                        this._numerator = NaN;\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._numerator = +S[0];\r\n                        this._denominator = +S[1];\r\n                    }\r\n                } else {\r\n                    // More than one divide sign ?\r\n                    this._numerator = NaN;\r\n                    this._denominator = 1;\r\n                }\r\n                break;\r\n            case \"number\":\r\n                if (Number.isSafeInteger(value)) {\r\n                    // The given value is an integer\r\n                    this._numerator = +value;\r\n\r\n                    if (denominatorOrPeriodic === undefined || !Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._denominator = +denominatorOrPeriodic;\r\n                    }\r\n                } else {\r\n                    // The given value is a float number\r\n\r\n                    // Get the number of decimals after the float sign\r\n                    let p: number = (value.toString()).split('.')[1].length;\r\n\r\n                    // Transform the float number in two integer\r\n                    if (denominatorOrPeriodic === undefined) {\r\n                        this._numerator = value * Math.pow(10, p);\r\n                        this._denominator = Math.pow(10, p);\r\n                    } else if (Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._numerator = value * Math.pow(10, p) - Math.floor(value * Math.pow(10, p - denominatorOrPeriodic));\r\n                        this.denominator = Math.pow(10, p) - Math.pow(10, p - denominatorOrPeriodic)\r\n                    }\r\n                }\r\n                break;\r\n            case \"object\":\r\n                if (value instanceof Fraction) {\r\n                    this._numerator = +value.numerator;\r\n                    this._denominator = +value.denominator;\r\n                }\r\n                break;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): Fraction => {\r\n        let F = new Fraction();\r\n        F.numerator = +this._numerator;\r\n        F.denominator = +this._denominator;\r\n        return F;\r\n    };\r\n\r\n    zero = (): Fraction => {\r\n        this._numerator = 0;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    one = (): Fraction => {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    infinite = (): Fraction => {\r\n        this._numerator = Infinity;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    invalid = (): Fraction => {\r\n        this._numerator = NaN;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Fraction => {\r\n        this._numerator = -this._numerator;\r\n        return this;\r\n    };\r\n\r\n    add = (F: Fraction | number): Fraction => {\r\n        if (F instanceof Fraction) {\r\n            let N: number = this._numerator,\r\n                D: number = this._denominator;\r\n\r\n            this._numerator = N * F.denominator + F.numerator * D;\r\n            this._denominator = D * F.denominator;\r\n        } else {\r\n            return this.add(new Fraction(F))\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (F: Fraction | number): Fraction => {\r\n        if (F instanceof Fraction) {\r\n            return this.add(F.clone().opposed());\r\n        } else {\r\n            return this.add(-F)\r\n        }\r\n    };\r\n\r\n    multiply = (F: Fraction | number): Fraction => {\r\n        // Parse the value.\r\n        // If it's a fraction, return a clone of it\r\n        // If it's an integer, return the fraction F/1\r\n        let Q = new Fraction(F);\r\n\r\n        this._numerator = this._numerator * Q.numerator;\r\n        this._denominator = this._denominator * Q.denominator;\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    divide = (F: Fraction | number): Fraction => {\r\n        let Q = new Fraction(F);\r\n\r\n        if (Q.numerator === 0) {\r\n            return new Fraction().infinite();\r\n        }\r\n\r\n        let N: number = +this._numerator,\r\n            D: number = +this._denominator;\r\n\r\n        this._numerator = N * Q.denominator;\r\n        this._denominator = D * Q.numerator;\r\n        return this.reduce();\r\n    };\r\n\r\n    invert = (): Fraction => {\r\n        let n = +this._numerator, d = +this._denominator;\r\n        this._numerator = d;\r\n        this._denominator = n;\r\n\r\n        return this;\r\n    }\r\n    pow = (p: number | Fraction): Fraction => {\r\n        // TODO: Fraction.pow with a value different than a safe integer ?\r\n        if (p instanceof Fraction) {\r\n            return this.pow(p.value)\r\n        }\r\n\r\n        if (!Number.isSafeInteger(p)) {\r\n            return this.invalid();\r\n        }\r\n\r\n        this.reduce();\r\n\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        this._numerator = this._numerator ** Math.abs(p);\r\n        this._denominator = this._denominator ** Math.abs(p);\r\n        return this;\r\n    };\r\n\r\n    root = (p: number): Fraction => {\r\n        // TODO: nth - root of a fraction => this will return another type of coefficient.\r\n\r\n        // Check if they are perfect roots..\r\n        if (p === 0) {\r\n            return this;\r\n        }\r\n\r\n        // If negative, invert the fraction\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        let n = Math.pow(this._numerator, Math.abs(1 / p)),\r\n            d = Math.pow(this._denominator, Math.abs(1 / p));\r\n\r\n        this._numerator = Math.pow(this._numerator, Math.abs(1 / p));\r\n        this._denominator = Math.pow(this._denominator, Math.abs(1 / p));\r\n        return this;\r\n    }\r\n\r\n    sqrt = (): Fraction => {\r\n        return this.root(2);\r\n    }\r\n\r\n    abs = (): Fraction => {\r\n        this._numerator = Math.abs(this._numerator);\r\n        this._denominator = Math.abs(this._denominator);\r\n        return this;\r\n    };\r\n\r\n\r\n    static max = (...fractions: (Fraction | number)[]): Fraction => {\r\n        let M = new Fraction(fractions[0])\r\n\r\n        for (let m of fractions) {\r\n            let compare = new Fraction(m)\r\n            if (compare.greater(M)) {\r\n                M = compare.clone()\r\n            }\r\n        }\r\n\r\n        return M\r\n    }\r\n    static min = (...fractions: (Fraction | number)[]): Fraction => {\r\n        let M = new Fraction(fractions[0])\r\n\r\n        for (let m of fractions) {\r\n            let compare = new Fraction(m)\r\n            if (compare.lesser(M)) {\r\n                M = compare.clone()\r\n            }\r\n        }\r\n\r\n        return M\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations specific to fractions\r\n    // ------------------------------------------\r\n    reduce = (): Fraction => {\r\n        let g = Numeric.gcd(this._numerator, this._denominator);\r\n        this._numerator = this._numerator / g;\r\n        this._denominator = this._denominator / g;\r\n\r\n        if (this._denominator < 0) {\r\n            this._denominator = -this._denominator;\r\n            this._numerator = -this._numerator;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    amplify = (k: number): Fraction => {\r\n        if (Number.isSafeInteger(k)) {\r\n            this._numerator *= k;\r\n            this._denominator *= k;\r\n        }\r\n        return this;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param F (Coefficient) The coefficient to compare\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (F: unknown, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n        let compareFraction: Fraction\r\n        if (F instanceof Fraction) {\r\n            compareFraction = F.clone()\r\n        } else {\r\n            compareFraction = new Fraction(F)\r\n        }\r\n\r\n        switch (sign) {\r\n            case '>':\r\n                return this.value > compareFraction.value;\r\n            case \">=\" || \"=>\" || \"geq\":\r\n                return this.value >= compareFraction.value;\r\n            case \"<\":\r\n                return this.value < compareFraction.value;\r\n            case \"<=\" || \"=>\" || \"leq\":\r\n                return this.value <= compareFraction.value;\r\n            case \"=\":\r\n                // let F2: Fraction = compareFraction.clone().reduce(),\r\n                //     F1: Fraction = this.clone().reduce();\r\n                // return (F1.numerator === F2.numerator && F1.denominator === F2.denominator);\r\n                return this.value === compareFraction.value;\r\n            case \"<>\":\r\n                return this.value !== compareFraction.value;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n    /* Compare shortcuts */\r\n    lesser = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '<');\r\n    };\r\n    leq = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '<=');\r\n    };\r\n    greater = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '>');\r\n    };\r\n    geq = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '>=');\r\n    };\r\n    isEqual = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '=');\r\n    }\r\n    isNotEqual = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '<>');\r\n    }\r\n    isOpposed = (p: Fraction): boolean => {\r\n        return this.isEqual(p.clone().opposed());\r\n    }\r\n    isInverted = (p: Fraction): boolean => {\r\n        return this.isEqual(new Fraction().one().divide(p.clone()));\r\n    }\r\n    isZero = (): boolean => {\r\n        return this._numerator === 0;\r\n    }\r\n    isNotZero = (): boolean => {\r\n        return this._numerator !== 0;\r\n    }\r\n    isOne = (): boolean => {\r\n        return this._numerator === 1 && this._denominator === 1;\r\n    }\r\n    isNegativeOne = (): boolean => {\r\n        return this._numerator === -1 && this._denominator === 1;\r\n    }\r\n    isPositive = (): boolean => {\r\n        return this.sign() === 1;\r\n    }\r\n    isNegative = (): boolean => {\r\n        return this.sign() === -1;\r\n    }\r\n    isStrictlyPositive = (): boolean => {\r\n        return this.value > 0\r\n    }\r\n    isStrictlyNegative = (): Boolean => {\r\n        return this.value < 0\r\n    }\r\n    isNaN = (): boolean => {\r\n        return isNaN(this._numerator);\r\n    }\r\n    isInfinity = (): boolean => {\r\n        return this._numerator === Infinity;\r\n    }\r\n    isFinite = (): boolean => {\r\n        return !this.isInfinity();\r\n    }\r\n    isSquare = (): boolean => {\r\n        return Math.sqrt(this._numerator) % 1 === 0 && Math.sqrt(this._denominator) % 1 === 0\r\n    }\r\n    isReduced = (): boolean => {\r\n        return Math.abs(Numeric.gcd(this._numerator, this._denominator)) === 1\r\n    }\r\n    isNatural = (): boolean => {\r\n        return this.clone().reduce().denominator === 1\r\n    }\r\n    isRational = (): boolean => {\r\n        return !this.isNatural()\r\n    }\r\n    isEven = (): boolean => {\r\n        return this.isNatural() && this.value % 2 === 0\r\n    }\r\n    isOdd = (): boolean => {\r\n        return this.isNatural() && this.value % 2 === 1\r\n    }\r\n    sign = (): number => {\r\n        return (this._numerator * this._denominator >= 0) ? 1 : -1;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Simple function to determine if it's a fraction\r\n     */\r\n    areEquals = (...F: Fraction[]): boolean => {\r\n        for (let i = 0; i < F.length; i++) {\r\n            if (!this.isEqual(F[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n}","export * from \"./fraction\"\r\nexport * from \"./nthroot\"","/**\r\n * Nthroot is something like \"a+b\\sqrt{3}\r\n */\r\nexport class Nthroot {\r\n    private _radical: number;\r\n    private _nth: number;\r\n    private _coefficient: number;\r\n    private _isValid:boolean;\r\n\r\n    constructor(...values: number[]) {\r\n        this._radical = 1;\r\n        this._coefficient = 1;\r\n        this._nth = 2;\r\n        this._isValid = true;\r\n\r\n        if(values !== undefined){\r\n            this.parse(values[0], values[1], values[2])\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get radical(): number {\r\n        return this._radical;\r\n    }\r\n\r\n    set radical(value: number) {\r\n        this._radical = value;\r\n    }\r\n\r\n    get nth(): number {\r\n        return this._nth;\r\n    }\r\n\r\n    set nth(value: number) {\r\n        if (Number.isSafeInteger(value) && value >= 2) {\r\n            this._nth = value;\r\n        } else {\r\n            // Error setting the nth root.\r\n            console.log('Error setting the nth root');\r\n            this._nth = 2;\r\n        }\r\n    }\r\n\r\n    get coefficient(): number {\r\n        return this._coefficient;\r\n    }\r\n\r\n    set coefficient(value: number) {\r\n        this._coefficient = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let C: string;\r\n\r\n        if (this._coefficient === 1) {\r\n            C = '';\r\n        } else if (this._coefficient === -1) {\r\n            C = '-';\r\n        } else {\r\n            C = this._coefficient.toString();\r\n        }\r\n\r\n        if (this._radical === 1) {\r\n            return `${this._coefficient}`;\r\n        } else {\r\n            if (this._nth === 2) {\r\n                return `${C}\\\\sqrt{${this._radical}}`\r\n            } else {\r\n                return `${C}\\\\sqrt[${this._nth}]{${this._radical}}`\r\n            }\r\n        }\r\n    }\r\n\r\n    get value(): number {\r\n        return this._coefficient * Math.pow(this._radical, 1 / this._nth);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (radical: number, nthroot?: number, coefficient?: number): Nthroot => {\r\n        this._coefficient = (coefficient === undefined) ? 1 : coefficient;\r\n        this._nth = (nthroot === undefined) ? 2 : nthroot;\r\n        this._radical = (radical === undefined) ? 1 : radical;\r\n\r\n        if(this._nth%2===0 && this._radical<0){\r\n            this._isValid = false;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    reduce = (): Nthroot => {\r\n        // Max value to test.\r\n        let V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n        while (V > 1) {\r\n            if (this._radical % Math.pow(V, this._nth) === 0) {\r\n                // It's dividable by V^n\r\n                this._coefficient *= V;\r\n                this._radical = this._radical / Math.pow(V, this._nth);\r\n\r\n                // Redifine the new testing value (this is optimization)\r\n                V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n                continue;\r\n            }\r\n            V--;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiply = (N: Nthroot): Nthroot => {\r\n        this._radical *= N.radical;\r\n        return this.reduce();\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Help functions\r\n    // ------------------------------------------\r\n    hasRadical = ():boolean => {\r\n        return !(this._radical===1 || this._radical===0 || this._isValid===false)\r\n    };\r\n}","import {Point} from \"./point\";\r\nimport {Fraction} from \"../coefficients\";\r\nimport {Equation, Monom, Polynom} from \"../algebra\";\r\nimport {Line} from \"./line\";\r\nimport {Vector} from \"./vector\";\r\nimport {Triangle} from \"./triangle\";\r\n\r\nexport class Circle {\r\n    private _center: Point;\r\n    private _squareRadius: Fraction;\r\n    private _cartesian: Equation;\r\n    private _exists: boolean;\r\n\r\n    constructor(...values: unknown[]) {\r\n        this._exists = false\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values)\r\n        }\r\n    }\r\n\r\n\r\n    get center(): Point {\r\n        return this._center;\r\n    }\r\n\r\n\r\n    get exists(): boolean {\r\n        return this._exists;\r\n    }\r\n\r\n    get squareRadius(): Fraction {\r\n        return this._squareRadius\r\n    }\r\n\r\n    get radius(): { tex: string, display: string } {\r\n        if (this._squareRadius.isSquare()) {\r\n            return {\r\n                tex: this._squareRadius.clone().sqrt().tex,\r\n                display: this._squareRadius.clone().sqrt().display,\r\n            }\r\n        } else {\r\n            return {\r\n                tex: `\\\\sqrt{${this._squareRadius.tex}}`,\r\n                display: `sqrt(${this._squareRadius.display})`\r\n            }\r\n        }\r\n        return this._squareRadius\r\n    }\r\n\r\n    get tex(): string {\r\n\r\n        if (this._exists) {\r\n            let cx, cy\r\n            if (this._center.x.isZero()) {\r\n                cx = 'x^2'\r\n            } else {\r\n                cx = `\\\\left(x${this._center.x.isNegative() ? '+' : '-'}${this._center.x.clone().abs().tex}\\\\right)^2`\r\n            }\r\n            if (this._center.y.isZero()) {\r\n                cy = 'y^2'\r\n            } else {\r\n                cy = `\\\\left(y${this._center.y.isNegative() ? '+' : '-'}${this._center.y.clone().abs().tex}\\\\right)^2`\r\n            }\r\n            return `${cx}+${cy}=${this._squareRadius.tex}`\r\n        } else {\r\n            return `\\\\text{le cercle n'existe pas.}`\r\n        }\r\n    }\r\n\r\n    get developed(): string {\r\n        return this._cartesian.tex\r\n    }\r\n\r\n\r\n    // TODO: reformat code for better display.\r\n    get display(): string {\r\n        return this._cartesian.display\r\n    }\r\n\r\n    get cartesian(): Equation {\r\n        return this._cartesian\r\n    }\r\n\r\n    clone(): Circle {\r\n        this._center = this._center.clone()\r\n        this._squareRadius = this._squareRadius.clone()\r\n        this._calculateCartesian()\r\n        return this\r\n    }\r\n\r\n    private _reset(): Circle {\r\n        this._center = null\r\n        this._squareRadius = null\r\n        this._cartesian = null\r\n        this._exists = false\r\n\r\n        return this\r\n    }\r\n\r\n    private parse(...values: unknown[]): Circle {\r\n        // Data can be given in these formats:\r\n        // one value, a string -> make it an Equation\r\n        // one value, an Equation\r\n        // one value, a circle -> clone it\r\n        // two values: two points (center and pointThrough)\r\n        // two values: point and Fraction (center and radius)\r\n        // three values: Point, Fraction, Boolean (center, square radius, true)\r\n\r\n        this._reset()\r\n\r\n        if (typeof values[0] === 'string') {\r\n            this._parseEquation(new Equation(values[0]))\r\n        } else if (values[0] instanceof Equation) {\r\n            this._parseEquation(values[0])\r\n        } else if (values[0] instanceof Circle) {\r\n            this._parseCopyCircle(values[0])\r\n        } else if (values[0] instanceof Point && values.length > 1) {\r\n            if (values[1] instanceof Point) {\r\n                if (values[2] instanceof Point) {\r\n                    this._parseThroughtThreePoints(values[0], values[1], values[2])\r\n                } else {\r\n                    this._parseCenterAndPointThrough(values[0], values[1])\r\n                }\r\n            } else if (values[1] instanceof Fraction || typeof values[1] === 'number') {\r\n                this._parseCenterAndRadius(values[0], values[1], (typeof values[2] === \"boolean\") ? values[2] : false)\r\n            }\r\n        }\r\n\r\n        // Calculate once the different values.\r\n        if(this._exists) {\r\n            this._calculateCartesian()\r\n\r\n            // If the square radius is zero or positive, the circle exists.\r\n            if (this._squareRadius !== undefined && this._squareRadius.isNegative()) {\r\n                this._exists = false\r\n            }\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    private _calculateCartesian() {\r\n        this._cartesian = (new Equation(\r\n            new Polynom(`(x-(${this._center.x.display}))^2+(y-(${this._center.y.display}))^2`),\r\n            new Polynom(`${this._squareRadius.display}`)\r\n        )).moveLeft()\r\n    }\r\n\r\n    private _parseCopyCircle(circle: Circle): Circle {\r\n        this._center = circle.center.clone()\r\n        this._squareRadius = circle.squareRadius.clone()\r\n        this._calculateCartesian()\r\n        this._exists = circle.exists\r\n        return this\r\n    }\r\n\r\n    private _parseCenterAndRadius(center: Point, radius: Fraction | number, square?: boolean): Circle {\r\n        this._center = center.clone()\r\n\r\n        if (square) {\r\n            this._squareRadius = (new Fraction(radius))\r\n        } else {\r\n            this._squareRadius = new Fraction(radius).pow(2)\r\n        }\r\n\r\n        this._exists = true\r\n        return this\r\n    }\r\n\r\n    private _parseCenterAndPointThrough(center: Point, pointThrough: Point): Circle {\r\n        this._center = center.clone()\r\n        this._squareRadius = new Vector(this._center, pointThrough).normSquare\r\n        this._exists = true\r\n        return this\r\n    }\r\n\r\n    private _parseEquation(equ: Equation): Circle {\r\n        this._exists = false\r\n\r\n        // Move everything to the left.\r\n        equ.moveLeft()\r\n\r\n        if (equ.degree('x').value === 2 && equ.degree('y').value === 2) {\r\n            // Both must be of degree 2.\r\n            let x2 = equ.left.monomByDegree(2, 'x'),\r\n                y2 = equ.left.monomByDegree(2, 'y'),\r\n                x1: Monom, y1: Monom, c: Monom\r\n\r\n            // Both square monoms must have the same coefficient.\r\n            if (x2.coefficient.isEqual(y2.coefficient)) {\r\n                equ.divide(x2.coefficient)\r\n\r\n                x1 = equ.left.monomByDegree(1, 'x')\r\n                y1 = equ.left.monomByDegree(1, 'y')\r\n\r\n                c = equ.left.monomByDegree(0)\r\n\r\n                this._center = new Point(\r\n                    x1.coefficient.clone().divide(2).opposed(),\r\n                    y1.coefficient.clone().divide(2).opposed()\r\n                )\r\n\r\n                this._squareRadius = c.coefficient.clone().opposed()\r\n                    .add(this._center.x.clone().pow(2))\r\n                    .add(this._center.y.clone().pow(2))\r\n\r\n                this._calculateCartesian()\r\n                this._exists = true\r\n            }else{\r\n                // The circle is not a valid circle\r\n                this._center = null\r\n                this._squareRadius = null\r\n                this._exists = false\r\n            }\r\n        }\r\n        return this\r\n    }\r\n\r\n    private _parseThroughtThreePoints(A: Point, B: Point, C: Point): Circle {\r\n        let T = new Triangle(A, B, C),\r\n            mAB = T.remarquables.mediators.AB.clone(),\r\n            mAC = T.remarquables.mediators.AC.clone()\r\n        this.parse(mAB.intersection(mAC).point, A)\r\n\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Get the relative position between circle and line. It corresponds to the number of intersection.\r\n     * @param {Line} L\r\n     * @returns {number}\r\n     */\r\n    relativePosition = (L: Line): number => {\r\n        let distance = L.distanceTo(this.center),\r\n            radius = Math.sqrt(this._squareRadius.value)\r\n\r\n        if (distance.value - radius > 0.0000000001) {\r\n            return 0 // external\r\n        } else if (Math.abs(distance.value - radius) < 0.0000000001) {\r\n            return 1 // tangent\r\n        } else {\r\n            return 2 // external\r\n        }\r\n    }\r\n\r\n    lineIntersection = (L: Line): Point[] => {\r\n        let intersectionPoints: Point[] = [], solX: Fraction\r\n\r\n        if(this._cartesian===null){return []}\r\n        const equX = this._cartesian.clone(),\r\n            lineX = L.equation.clone().isolate('x'),\r\n            lineY = L.equation.clone().isolate('y')\r\n\r\n        if (lineX instanceof Equation && lineY instanceof Equation) {\r\n            equX.replaceBy('y', lineY.right).simplify()\r\n            equX.solve()\r\n\r\n            for(let x of equX.solutions){\r\n                if(x.exact===false && isNaN(x.value)){continue}\r\n\r\n                solX = new Fraction(x.exact===false?x.value:x.exact)\r\n                intersectionPoints.push(\r\n                    new Point(\r\n                        solX.clone(),\r\n                        lineY.right.evaluate(solX)\r\n                    )\r\n                )\r\n            }\r\n        }\r\n\r\n        return intersectionPoints\r\n    }\r\n}","export * from \"./vector\"\r\nexport * from \"./triangle\"\r\nexport * from \"./point\"\r\nexport * from \"./circle\"\r\nexport * from \"./line\"\r\n","/**\r\n * This class works for 2d line in a plane.\r\n */\r\n\r\nimport {Fraction} from \"../coefficients\";\r\nimport {Vector} from \"./vector\";\r\nimport {Point} from \"./point\";\r\nimport {Equation, Polynom} from \"../algebra\";\r\nimport {Numeric} from \"../numeric\";\r\n\r\nenum LinePropriety {\r\n    None,\r\n    Parallel,\r\n    Perpendicular\r\n}\r\n\r\nexport class Line {\r\n    // A line is defined as the canonical form\r\n    // ax + by + c = 0\r\n    private _a: Fraction;\r\n    private _b: Fraction;\r\n    private _c: Fraction;\r\n    private _OA: Point;\r\n    private _d: Vector;\r\n    private _n: Vector;\r\n    private _exists: boolean\r\n\r\n    private _referencePropriety: LinePropriety\r\n    private _referenceLine: Line\r\n\r\n    static PERPENDICULAR = LinePropriety.Perpendicular\r\n    static PARALLEL = LinePropriety.Parallel\r\n\r\n    constructor(...values: unknown[]) {\r\n\r\n        this._exists = false;\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get exists(): boolean {\r\n        return this._exists;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equation(): Equation {\r\n        return new Equation(new Polynom().parse('xy', this._a, this._b, this._c), new Polynom('0')).simplify();\r\n    }\r\n\r\n    get tex(): { canonical: string, mxh: string, parametric: string } {\r\n        // canonical    =>  ax + by + c = 0\r\n        // mxh          =>  y = -a/b x - c/b\r\n        // parametric   =>  (xy) = OA + k*d\r\n\r\n        let canonical = this.equation;\r\n        // Make sur the first item is positive.\r\n        if (this._a.isNegative()) {\r\n            canonical.multiply(-1);\r\n        }\r\n\r\n        return {\r\n            canonical: canonical.tex,\r\n            mxh: this.slope.isInfinity() ? 'x=' + this.OA.x.tex : 'y=' + new Polynom().parse('x', this.slope, this.height).tex,\r\n            parametric: `${Point.pmatrix('x', 'y')} = ${Point.pmatrix(this._OA.x, this._OA.y)} + k\\\\cdot ${Point.pmatrix(this._d.x, this._d.y)}`\r\n        }\r\n    }\r\n\r\n    get a(): Fraction {\r\n        return this._a;\r\n    }\r\n\r\n    set a(value: Fraction) {\r\n        this._a = value;\r\n    }\r\n\r\n    get b(): Fraction {\r\n        return this._b;\r\n    }\r\n\r\n    set b(value: Fraction) {\r\n        this._b = value;\r\n    }\r\n\r\n    get c(): Fraction {\r\n        return this._c;\r\n    }\r\n\r\n    set c(value: Fraction) {\r\n        this._c = value;\r\n    }\r\n\r\n    get OA(): Point {\r\n        return this._OA;\r\n    }\r\n\r\n    set OA(value: Point) {\r\n        this._OA = value;\r\n    }\r\n\r\n    get d(): Vector {\r\n        return this._d;\r\n    }\r\n\r\n    get n(): Vector {\r\n        return this._n;\r\n    }\r\n\r\n    get normal(): Vector {\r\n        return new Vector(this._a, this._b);\r\n    }\r\n\r\n    get director(): Vector {\r\n        return this._d.clone()\r\n    }\r\n\r\n    set d(value: Vector) {\r\n        this._d = value;\r\n    }\r\n\r\n    get slope(): Fraction {\r\n        return this._a.clone().opposed().divide(this._b);\r\n    }\r\n\r\n    get height(): Fraction {\r\n        return this._c.clone().opposed().divide(this._b);\r\n    }\r\n\r\n// ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse data to a line\r\n     * @param {any} values\r\n     * @returns {Line}\r\n     */\r\n    parse = (...values: unknown[]): Line => {\r\n        this._exists = false;\r\n\r\n        // Nothing is given...\r\n        if (values.length === 0) {\r\n            return this\r\n        }\r\n\r\n        // One value only: already a line (clone it), an Equation, a string (as Equation)\r\n        if (values.length === 1) {\r\n            if (values[0] instanceof Line) {\r\n                // Already a Line\r\n                return values[0].clone()\r\n            } else if (values[0] instanceof Equation) {\r\n                // It's an Equation\r\n                return this.parseEquation(values[0])\r\n            } else if (typeof values[0] === \"string\") {\r\n                // It's a string - create an Equation from it.\r\n                try {\r\n                    let E = new Equation(values[0])\r\n                    return this.parse(E)\r\n                } catch (e) {\r\n                    return this\r\n                }\r\n            }\r\n        }\r\n\r\n        if (values.length === 2) {\r\n            if (values[0] instanceof Point && values[1] instanceof Vector) {\r\n                return this.parseByPointAndVector(values[0], values[1]);\r\n            } else if (values[0] instanceof Point && values[1] instanceof Point) {\r\n                return this.parseByPointAndVector(values[0], new Vector(values[0], values[1]));\r\n            } else if (values[0] instanceof Vector && values[1] instanceof Point) {\r\n                return this.parseByPointAndNormal(values[1], values[0])\r\n            }\r\n        }\r\n\r\n        if (values.length === 3) {\r\n            if (\r\n                (values[0] instanceof Fraction || typeof values[0] === 'number')\r\n                &&\r\n                (values[1] instanceof Fraction || typeof values[1] === 'number')\r\n                &&\r\n                (values[2] instanceof Fraction || typeof values[2] === 'number')\r\n            ) {\r\n                return this.parseByCoefficient(values[0], values[1], values[2]);\r\n            }else if (\r\n                values[0] instanceof Point && values[1] instanceof Vector\r\n            ){\r\n                if(values[2] === LinePropriety.Perpendicular){\r\n                    return this.parseByPointAndNormal(values[0], values[1])\r\n                }else if (values[2] === LinePropriety.Parallel){\r\n                    return this.parseByPointAndVector(values[0], values[1])\r\n                }\r\n            }\r\n        }\r\n\r\n        // TODO: Add the ability to create line from a normal vector\r\n        console.log('Someting wrong happend while creating the line')\r\n        return this;\r\n    }\r\n\r\n    parseEquation = (equ: Equation): Line => {\r\n        // Reorder the eequation\r\n        equ.reorder(true)\r\n\r\n        // It must contain either x, y or both.\r\n        let letters = new Set(equ.letters());\r\n\r\n        // No 'x', no 'y' in the equations\r\n        if (!(letters.has('x') || letters.has('y'))) {\r\n            return this\r\n        }\r\n\r\n        // Another letter in the equation ?\r\n        for (let elem of ['x', 'y']) {\r\n            if (letters.has(elem)) {\r\n                letters.delete(elem)\r\n            }\r\n        }\r\n\r\n        if (letters.size > 0) {\r\n            return this\r\n        }\r\n\r\n        // Everything should be ok now...\r\n        return this.parseByCoefficient(equ.left.monomByLetter('x').coefficient, equ.left.monomByLetter('y').coefficient, equ.left.monomByDegree(0).coefficient)\r\n    }\r\n    parseByCoefficient = (a: Fraction | number, b: Fraction | number, c: Fraction | number): Line => {\r\n        this._a = new Fraction(a);\r\n        this._b = new Fraction(b);\r\n        this._c = new Fraction(c);\r\n\r\n        this._d = new Vector(this._b.clone(), this._a.clone().opposed());\r\n        this._OA = new Point(new Fraction().zero(), this._c.clone());\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    parseByPointAndVector = (P: Point, d: Vector): Line => {\r\n        // OX = OP + k*d\r\n        // x = px + kdx     * dy\r\n        // y = py + kdy     * dx\r\n        // ------------------\r\n        // dy * x = px * dy + kdxdy\r\n        // dx * y = py * dx + kdxdy\r\n        // ------------------\r\n        // dy * x - dx * y = px * dy - py * dx\r\n        // dy * x - dx * y - (px * dy - py * dx) = 0\r\n        this.parseByCoefficient(\r\n            d.y,\r\n            d.x.clone().opposed(),\r\n            P.x.clone().multiply(d.y).subtract(P.y.clone().multiply(d.x)).opposed()\r\n        )\r\n\r\n        // Choose the current values as point and direction vector instead of the automatic version.\r\n        this._OA = P.clone();\r\n        this._d = d.clone();\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    parseByPointAndNormal = (P: Point, n: Vector): Line => {\r\n        return this.parseByCoefficient(\r\n            n.x,\r\n            n.y,\r\n            P.x.clone().multiply(n.x)\r\n                .add(P.y.clone().multiply(n.y)).opposed()\r\n        )\r\n    }\r\n\r\n    parseByPointAndLine = (P: Point, L: Line, orientation?: LinePropriety): Line => {\r\n\r\n        if (orientation === undefined) {\r\n            orientation = LinePropriety.Parallel\r\n        }\r\n\r\n        if (orientation === LinePropriety.Parallel) {\r\n            return this.parseByPointAndNormal(P, L.normal)\r\n        } else if (orientation === LinePropriety.Perpendicular) {\r\n            return this.parseByPointAndNormal(P, L.director)\r\n        }\r\n\r\n        this._exists = false\r\n        return this\r\n    }\r\n\r\n    clone = (): Line => {\r\n        this._a = this._a.clone();\r\n        this._b = this._b.clone();\r\n        this._c = this._c.clone();\r\n\r\n        this._d = this._d.clone();\r\n        this._OA = this._OA.clone();\r\n        this._n = this._n.clone();\r\n\r\n        this._exists = this.exists\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    isParellelTo = (line: Line): Boolean => {\r\n        // Do they have the isSame direction ?\r\n        return this.slope.isEqual(line.slope) && this.height.isNotEqual(line.height);\r\n    }\r\n    isSameAs = (line: Line): Boolean => {\r\n        return this.slope.isEqual(line.slope) && this.height.isEqual(line.height);\r\n    }\r\n    isVertical = (): Boolean => {\r\n        return this.slope.isInfinity()\r\n    }\r\n    simplify = (): Line => {\r\n        let lcm = Numeric.lcm(this._a.denominator, this._b.denominator, this._c.denominator),\r\n            gcd = Numeric.gcd(this._a.numerator, this._b.numerator, this._c.numerator);\r\n\r\n        this.parseByCoefficient(\r\n            this._a.clone().multiply(lcm).divide(gcd),\r\n            this._b.clone().multiply(lcm).divide(gcd),\r\n            this._c.clone().multiply(lcm).divide(gcd),\r\n        )\r\n\r\n        return this\r\n    }\r\n\r\n    simplifyDirection = (): Line => {\r\n        let lcm = Numeric.lcm(this._d.x.denominator, this._d.y.denominator),\r\n            gcd = Numeric.gcd(this._d.x.numerator, this._d.y.numerator);\r\n\r\n        this._d.x.multiply(lcm).divide(gcd);\r\n        this._d.y.multiply(lcm).divide(gcd);\r\n        return this;\r\n    }\r\n    intersection = (line: Line): { point: Point, hasIntersection: boolean, isParallel: boolean, isSame: boolean } => {\r\n        let Pt = new Point(), isParallel = false, isSame = false, hasIntersection = true;\r\n\r\n        // this         => ax+by+c = 0\r\n        // line         => dx+ey+f = 0\r\n        //\r\n        //  aex + bey + ce = 0\r\n        //  dbx + bey + bf = 0\r\n        // (ae-db)x + ce-bf = 0\r\n        //\r\n        //  adx + bdy + cd = 0\r\n        //  adx + aey + af = 0\r\n        // (bd-ae)y + (cd-af)\r\n        //\r\n        // x = (bf-ce)/(ae-db)\r\n        // y = (af-cd)/(bd-ae)\r\n\r\n\r\n        // Theres is no 'y'\r\n        if (this._b.isZero() || line.b.isZero()) {\r\n            // TODO : handle no y in the line canonical form\r\n        }\r\n\r\n        if (this.isParellelTo(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isParallel = true;\r\n        } else if (this.isSameAs(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isSame = true;\r\n        } else {\r\n            Pt.x = this._b.clone().multiply(line.c).subtract(this._c.clone().multiply(line.b))\r\n                .divide(this._a.clone().multiply(line.b).subtract(this._b.clone().multiply(line.a)));\r\n            Pt.y = this._a.clone().multiply(line.c).subtract(this._c.clone().multiply(line.a))\r\n                .divide(this._b.clone().multiply(line.a).subtract(this._a.clone().multiply(line.b)));\r\n        }\r\n\r\n        return {\r\n            point: Pt,\r\n            hasIntersection: !(isParallel || isSame),\r\n            isParallel,\r\n            isSame\r\n        };\r\n    }\r\n\r\n    distanceTo(pt: Point): { value: number, fraction: Fraction, tex: string } {\r\n        let numerator = pt.x.clone().multiply(this._a)\r\n                .add(pt.y.clone().multiply(this._b))\r\n                .add(this._c).abs(),\r\n            d2 = this.normal.normSquare;\r\n\r\n        // The denominator is null - shouldn't be possible\r\n        if (d2.isZero()) {\r\n            return {\r\n                value: NaN,\r\n                tex: 'Not a line',\r\n                fraction: new Fraction().infinite()\r\n            }\r\n        }\r\n        // The denominator is a perfect square - simplify the tex result\r\n        let value = numerator.value / Math.sqrt(d2.value),\r\n            F = numerator.clone().divide(d2.clone().sqrt());\r\n\r\n        // The denominator is a perfect square.\r\n        if (d2.isSquare()) {\r\n            return {\r\n                value,\r\n                tex: F.tex,\r\n                fraction: F\r\n            }\r\n        }\r\n        // Complete answer...\r\n        return {\r\n            value,\r\n            tex: `\\\\frac{${numerator.tex}}{\\\\sqrt{${d2.tex}}}`,\r\n            fraction: F\r\n        };\r\n    }\r\n\r\n    hitSegment(A: Point, B: Point): boolean {\r\n        let iPt = this.intersection(\r\n            new Line(A, B)\r\n        )\r\n\r\n        // There is an intersection point\r\n        if (iPt.hasIntersection) {\r\n            return iPt.point.x.value >= Math.min(A.x.value, B.x.value)\r\n                && iPt.point.x.value <= Math.max(A.x.value, B.x.value)\r\n                && iPt.point.y.value >= Math.min(A.y.value, B.y.value)\r\n                && iPt.point.y.value <= Math.max(A.y.value, B.y.value)\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getValueAtX = (value: Fraction|number): Fraction => {\r\n        const equ = this.equation.clone().isolate('y'),\r\n            F = new Fraction(value)\r\n\r\n        if(equ instanceof Equation){\r\n            return equ.right.evaluate({x: F})\r\n        }\r\n        return\r\n    }\r\n    getValueAtY = (value: Fraction|number): Fraction => {\r\n        const equ = this.equation.clone().isolate('x'),\r\n            F = new Fraction(value)\r\n\r\n        if(equ instanceof Equation){\r\n            return equ.right.evaluate({y: F})\r\n        }\r\n        return\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Special functions\r\n    // ------------------------------------------\r\n    canonicalAsFloatCoefficient(decimals: number): string {\r\n        if (decimals === undefined) {\r\n            decimals = 2;\r\n        }\r\n\r\n        let ca = this._a.value,\r\n            cb = this._b.value,\r\n            cc = this._c.value,\r\n            canonical = '';\r\n\r\n        if (!this._a.isZero()) {\r\n            if (this._a.isOne()) {\r\n                canonical = 'x'\r\n            } else if (this._a.clone().opposed().isOne()) {\r\n                canonical = '-x'\r\n            } else {\r\n                canonical = this._a.value.toFixed(decimals) + 'x'\r\n            }\r\n        }\r\n\r\n        if (!this._b.isZero()) {\r\n            if (this._b.isPositive()) {\r\n                canonical += '+'\r\n            }\r\n            canonical += this._b.value.toFixed(decimals) + 'y'\r\n        }\r\n\r\n        if (!this._c.isZero()) {\r\n            if (this._c.isPositive()) {\r\n                canonical += '+'\r\n            }\r\n            canonical += this._c.value.toFixed(decimals)\r\n        }\r\n\r\n\r\n        return canonical + '=0';\r\n    }\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Fraction} from \"../coefficients\"\r\n\r\n/**\r\n * Helper class - a way to identify an object {x: number, y: number}\r\n */\r\nclass PointXY {\r\n    public x: number\r\n    public y: number\r\n}\r\n\r\nexport class Point {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n    private _exist: Boolean;\r\n\r\n    constructor(...values: unknown[]) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.tex);\r\n        pts.push(this._y.tex);\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n\r\n    get display(): string {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.tex);\r\n        pts.push(this._y.tex);\r\n\r\n        return `(${pts.join(';')})`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n\r\n    parse = (...values: unknown[]): Point => {\r\n        // Initialize the value.\r\n        this.zero();\r\n\r\n        // Nothing is given\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        // One element is given - might be already a point !\r\n        if (values.length === 1) {\r\n            // it's already a point - clone it\r\n            if (values[0] instanceof Point) {\r\n                this._x = values[0].x.clone()\r\n                this._y = values[0].y.clone()\r\n                return this\r\n            }\r\n\r\n            // Value is given as string, comma separated.\r\n            if (typeof values[0] === 'string') {\r\n                let xy = values[0].split(',')\r\n                if (xy.length === 2) {\r\n                    this._x = new Fraction(xy[0]).reduce()\r\n                    this._y = new Fraction(xy[1]).reduce()\r\n                    return this\r\n                }\r\n            }\r\n\r\n            // Value given as an object with {x: value, y: value}\r\n            if(values[0] instanceof PointXY){\r\n                    this._x = new Fraction(values[0].x).reduce()\r\n                    this._y = new Fraction(values[0].y).reduce()\r\n                return this\r\n            } else {\r\n                return this.zero()\r\n            }\r\n        }\r\n\r\n        if (values.length === 2) {\r\n            this._x = new Fraction(values[0]).reduce()\r\n            this._y = new Fraction(values[1]).reduce()\r\n            return this\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Point => {\r\n        this._x = this._x.clone()\r\n        this._y = this._y.clone()\r\n\r\n        return this\r\n    }\r\n\r\n    zero = (): Point => {\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    origin = (): Point => {\r\n        this.zero();\r\n        return this;\r\n    }\r\n\r\n    middleOf = (P1: Point, P2: Point): Point => {\r\n        this._x = P1.x.clone().add(P2.x).divide(2);\r\n        this._y = P1.y.clone().add(P2.y).divide(2);\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Display functions\r\n    // ------------------------------------------\r\n    texValues = (numberOfDigits: number): string => {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.value.toFixed(numberOfDigits === undefined ? 2 : numberOfDigits));\r\n        pts.push(this._y.value.toFixed(numberOfDigits === undefined ? 2 : numberOfDigits));\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Static functions\r\n    // ------------------------------------------\r\n    static pmatrix = (a: any, b: any, c?: any): string => {\r\n        if (c === undefined) {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\end{pmatrix}`;\r\n        } else {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\\\\\ ${c.tex ? c.tex : c} \\\\end{pmatrix}`;\r\n        }\r\n    };\r\n\r\n}\r\n","import {Point} from \"./point\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Vector} from \"./vector\";\r\nimport {Line} from \"./line\";\r\nimport {Equation} from \"../algebra/equation\";\r\n\r\nexport interface remarquableLines {\r\n    'medians': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'mediators': {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line,\r\n        'intersection': Point\r\n    },\r\n    'heights': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'bisectors': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    }\r\n}\r\n\r\nexport class Triangle {\r\n    private _A: Point;\r\n    private _B: Point;\r\n    private _C: Point;\r\n    private _lines: {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line\r\n    };\r\n    private _middles: {\r\n        'AB': Point,\r\n        'AC': Point,\r\n        'BC': Point\r\n    };\r\n    private _remarquables: remarquableLines;\r\n\r\n\r\n    constructor(...values: any) {\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setters\r\n    // ------------------------------------------\r\n\r\n    get A(): Point {\r\n        return this._A;\r\n    }\r\n\r\n    get B(): Point {\r\n        return this._B;\r\n    }\r\n\r\n    get C(): Point {\r\n        return this._C;\r\n    }\r\n\r\n    get AB(): Vector {\r\n        return this.getSegment('A', 'B');\r\n    }\r\n\r\n    get BA(): Vector {\r\n        return this.getSegment('B', 'A');\r\n    }\r\n\r\n    get BC(): Vector {\r\n        return this.getSegment('B', 'C');\r\n    }\r\n\r\n    get CB(): Vector {\r\n        return this.getSegment('C', 'B');\r\n    }\r\n\r\n    get AC(): Vector {\r\n        return this.getSegment('A', 'C');\r\n    }\r\n\r\n    get CA(): Vector {\r\n        return this.getSegment('C', 'A');\r\n    }\r\n\r\n    get isRectangle(): boolean {\r\n        if (this.AB.isNormalTo(this.BC)) {\r\n            return true;\r\n        }\r\n        if (this.AB.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n        if (this.BC.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    get isEquilateral(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) &&\r\n            this.AB.normSquare.isEqual(this.AC.normSquare);\r\n    }\r\n\r\n    get isIsocele(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) ||\r\n            this.AB.normSquare.isEqual(this.AC.normSquare) ||\r\n            this.BC.normSquare.isEqual(this.AC.normSquare)\r\n    }\r\n\r\n    get lines(): { 'AB': Line, 'BC': Line, 'AC': Line } {\r\n        return this._lines;\r\n    }\r\n\r\n    get remarquables(): remarquableLines {\r\n        return this._remarquables;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Parse values to a triangle. Supported formats:\r\n     * Point, Point, Point\r\n     * x1, y1, x2, y2, x3, y3\r\n     * TODO: Something else ?\r\n     * @param values\r\n     */\r\n    parse = (...values: any): Triangle => {\r\n        if (values.length === 6) {\r\n            // Check if all values are number or fractions.\r\n            let v = values.map((x: any) => new Fraction(x));\r\n            return this.parse(\r\n                new Point(v[0], v[1]),\r\n                new Point(v[2], v[3]),\r\n                new Point(v[4], v[5]),\r\n            )\r\n        } else if (values.length === 3) {\r\n            // Possibilities:\r\n            // - Three points (or part of points, only dict for example, or array (TODO: Add the array syntax for point)\r\n            // - Three lines\r\n            // - Three lines as text.\r\n            if(values.filter((x:any) => typeof x === 'string').length===3) {\r\n                return this.parse( ...values.map((x:string) => new Line(x)) )\r\n            }else if(values.filter((x:any) => x instanceof Line).length===3) {\r\n                // We have three lines\r\n                this._lines = {\r\n                    'AB': values[0],\r\n                    'BC': values[1],\r\n                    'AC': values[2]\r\n                };\r\n\r\n                // Get the intersection points -> build the triangle using these intersection points.\r\n                let intersect = values[0].intersection(values[1]);\r\n                if (intersect.hasIntersection) {\r\n                    this._B = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[1].intersection(values[2]);\r\n                if (intersect.hasIntersection) {\r\n                    this._C = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[2].intersection(values[0]);\r\n                if (intersect.hasIntersection) {\r\n                    this._A = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n            }else {\r\n                // At least, one of the value is not a point.\r\n                if (values.filter((x: any) => (x instanceof Point)).length < 3) {\r\n                    return this.parse(\r\n                        new Point(values[0]),\r\n                        new Point(values[1]),\r\n                        new Point(values[2])\r\n                    )\r\n                }\r\n\r\n                // We have three points.\r\n                this._A = values[0].clone();\r\n                this._B = values[1].clone();\r\n                this._C = values[2].clone();\r\n\r\n                this._lines = {\r\n                    'AB': new Line(this._A, this._B),\r\n                    'BC': new Line(this._B, this._C),\r\n                    'AC': new Line(this._A, this._C)\r\n                };\r\n            }\r\n        } else if (values.length === 1) {\r\n            if (values[0] instanceof Triangle) {\r\n                return values[0].clone();\r\n            }\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the Triangle class\r\n     */\r\n    clone = (): Triangle => {\r\n        this._A = this._A.clone();\r\n        this._B = this._B.clone();\r\n        this._C = this._C.clone();\r\n\r\n        this._lines = {\r\n            'AB': this._lines.AB.clone(),\r\n            'BC': this._lines.BC.clone(),\r\n            'AC': this._lines.AC.clone()\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Triangle operations and properties\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Generate the Line object for the three segments of the triangle\r\n     */\r\n    private _updateTriangle = () => {\r\n        this._middles = {\r\n            'AB': new Point().middleOf(this._A, this._B),\r\n            'AC': new Point().middleOf(this._A, this._C),\r\n            'BC': new Point().middleOf(this._B, this._C)\r\n        }\r\n\r\n        this._remarquables = this._calculateRemarquableLines();\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the Point class for the given name\r\n     * @param ptName\r\n     */\r\n    private getPointByName = (ptName: string): Point => {\r\n        switch (ptName.toUpperCase()) {\r\n            case 'A':\r\n                return this._A;\r\n            case 'B':\r\n                return this._B;\r\n            case 'C':\r\n                return this._C;\r\n        }\r\n\r\n        // Something went wrong ! Return the first point\r\n        return this._A;\r\n    }\r\n    /**\r\n     * Get the vector for the segment given by name.\r\n     * @param ptName1\r\n     * @param ptName2\r\n     */\r\n    private getSegment = (ptName1: string, ptName2: string): Vector => {\r\n        return new Vector(\r\n            this.getPointByName(ptName1),\r\n            this.getPointByName(ptName2)\r\n        );\r\n    }\r\n\r\n    private _calculateRemarquableLines = (): remarquableLines => {\r\n        let remarquables: remarquableLines = {\r\n            'medians': {\r\n                'A': new Line(this._A, this._middles.BC),\r\n                'B': new Line(this._B, this._middles.AC),\r\n                'C': new Line(this._C, this._middles.AB),\r\n                'intersection': null\r\n            },\r\n            'mediators': {\r\n                'AB': new Line(this._middles.AB, new Vector(this._A, this._B).normal()),\r\n                'AC': new Line(this._middles.AC, new Vector(this._A, this._C).normal()),\r\n                'BC': new Line(this._middles.BC, new Vector(this._B, this._C).normal()),\r\n                'intersection': null\r\n            },\r\n            'heights': {\r\n                'A': new Line(this._A, new Vector(this._B, this._C).normal()),\r\n                'B': new Line(this._B, new Vector(this._A, this._C).normal()),\r\n                'C': new Line(this._C, new Vector(this._A, this._B).normal()),\r\n                'intersection': null\r\n            },\r\n            'bisectors': {\r\n                'A': this._calculateBisectors('A'),\r\n                'B': this._calculateBisectors('B'),\r\n                'C': this._calculateBisectors('C'),\r\n                'intersection': null\r\n            }\r\n        }\r\n\r\n        // As it's a triangle, we assume the lines are intersecting and aren't parallel or superposed.\r\n        remarquables.medians.intersection = remarquables.medians.A.intersection(remarquables.medians.B).point;\r\n        remarquables.mediators.intersection = remarquables.mediators.AB.intersection(remarquables.mediators.BC).point;\r\n        remarquables.heights.intersection = remarquables.heights.A.intersection(remarquables.heights.B).point;\r\n        remarquables.bisectors.intersection = remarquables.bisectors.A.intersection(remarquables.bisectors.B).point;\r\n\r\n        // Everything was calculated for the remarquable lines.\r\n        return remarquables;\r\n    }\r\n\r\n    private _calculateBisectors = (pt: string): Line => {\r\n        let tlines = this.lines, d1, d2;\r\n\r\n        if(pt==='A'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.AC;\r\n        }else if(pt==='B'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.BC;\r\n        }else if(pt==='C'){\r\n            d1 = tlines.BC;\r\n            d2 = tlines.AC;\r\n        }\r\n\r\n        let b1 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm)).reorder(true).simplify()),\r\n            b2 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm).opposed()).reorder(true).simplify());\r\n\r\n        // Must determine which bisectors is in the triangle\r\n        if(pt==='A'){\r\n            return b1.hitSegment(this.B, this.C)?b1:b2;\r\n        }\r\n        if(pt==='B'){\r\n            return b1.hitSegment(this.A, this.C)?b1:b2;\r\n        }\r\n        if(pt==='C'){\r\n            return b1.hitSegment(this.B, this.A)?b1:b2;\r\n        }\r\n\r\n        // Default returns the first bisector\r\n        return b1;\r\n    }\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Point} from \"./point\";\r\n\r\nexport class Vector {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n\r\n    constructor(...values: any) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get normSquare(): Fraction {\r\n        return this._x.clone().pow(2).add(this._y.clone().pow(2));\r\n    }\r\n\r\n    get norm(): number {\r\n        return Math.sqrt(this.normSquare.value);\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\begin{pmatrix}${this._x.tex} \\\\\\\\\\ ${this._y.tex} \\\\end{pmatrix}`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Vector => {\r\n        // TODO: Must be more strict about what is given and limit to two dimensional vectors.p\r\n        // Maybe more than one value was given...\r\n        // Initialize the vector\r\n        this.zero();\r\n\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        if (values.length === 1) {\r\n            if (values[0] instanceof Vector) {\r\n                return values[0].clone()\r\n            } else {\r\n                return this._parseString(values[0])\r\n            }\r\n        }\r\n\r\n        if (values.length >= 2) {\r\n            // Two points are given - skip the third value.\r\n            if (values[0] instanceof Point && values[1] instanceof Point) {\r\n                this._x = values[1].x.clone().subtract(values[0].x)\r\n                this._y = values[1].y.clone().subtract(values[0].y)\r\n                return this;\r\n            }\r\n\r\n            // Fractions or a number are give\r\n            if (values[0] instanceof Fraction || !isNaN(values[0])) {\r\n                this._x = new Fraction(values[0])\r\n            }\r\n            if (values[1] instanceof Fraction || !isNaN(values[1])) {\r\n                this._y = new Fraction(values[1])\r\n            }\r\n\r\n            if(\r\n                (typeof values[0] === 'object' && !isNaN(values[0].x) && !isNaN(values[0].x)) &&\r\n                (typeof values[1] === 'object' && !isNaN(values[1].x) && !isNaN(values[1].x))\r\n            ){\r\n                this._x = new Fraction(+values[1].x-values[0].x)\r\n                this._y = new Fraction(+values[1].y-values[0].y)\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Vector => {\r\n        let V = new Vector();\r\n\r\n        if (this._x !== null) {\r\n            V.x = this._x.clone();\r\n        }\r\n        if (this._y !== null) {\r\n            V.y = this._y.clone();\r\n        }\r\n        return V;\r\n    }\r\n\r\n    reset = (): Vector => {\r\n        this._x = null;\r\n        this._y = null;\r\n        return this;\r\n    }\r\n\r\n    zero = (): Vector => {\r\n        this.reset();\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    one = (): Vector => {\r\n        this._x = new Fraction();\r\n        this._y = new Fraction();\r\n        return this;\r\n    }\r\n\r\n    private _parseString = (value: string): Vector => {\r\n        // Split comma, semi colon or single space.\r\n        let components = value.split(/[,;\\s]/g);\r\n\r\n        // Validate the fraction values.\r\n        this.x = new Fraction(components[0] || null);\r\n        this.y = new Fraction(components[1] || null);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Vector => {\r\n        this._x.opposed();\r\n        this._y.opposed();\r\n        return this;\r\n    }\r\n\r\n    add = (V: Vector): Vector => {\r\n        this._x.add(V.x);\r\n        this._y.add(V.y);\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (V: Vector): Vector => {\r\n        return this.add(V.clone().opposed());\r\n    }\r\n\r\n    scalarProductWithVector = (V: Vector): Fraction => {\r\n        // TODO: Add the scalar factor !!!!\r\n        return this._x.clone().multiply(V.x).add(this._y.clone().multiply(V.y));\r\n    }\r\n\r\n    static scalarProduct = (v1: Vector, v2: Vector): number => {\r\n        // TODO: Transform to fraction with nthroot.\r\n        return v1.x.value * v2.x.value + v1.y.value * v2.y.value;\r\n    };\r\n\r\n    normal = (): Vector => {\r\n        let x = this.x.clone().opposed(), y = this.y.clone();\r\n        this._x = y;\r\n        this._y = x;\r\n        return this;\r\n    }\r\n\r\n    isNormalTo = (v: Vector): boolean => {\r\n        return this.scalarProductWithVector(v).isZero()\r\n    }\r\n\r\n    multiplyByScalar = (k: any): Vector => {\r\n        let scalar = new Fraction(k);\r\n        this._x.multiply(scalar);\r\n        this._y.multiply(scalar);\r\n        return this;\r\n    }\r\n\r\n    divideByScalar = (k: any): Vector => {\r\n        return this.multiplyByScalar(new Fraction(k).invert());\r\n    }\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    simplify = (): Vector => {\r\n        // Multiply by the lcm of denominators.\r\n        return this.multiplyByScalar(Numeric.lcm(this._x.denominator, this._y.denominator))\r\n            .divideByScalar(Numeric.gcd(this._x.numerator, this._y.numerator));\r\n    }\r\n\r\n    angleWith = (V: Vector, sharp?: Boolean, radian?: Boolean): number => {\r\n        let scalar = this.scalarProductWithVector(V).value,\r\n            toDegree = radian ? 1 : 180 / Math.PI;\r\n        if (sharp) {\r\n            scalar = Math.abs(scalar);\r\n        }\r\n\r\n        return toDegree * Math.acos(scalar / (this.norm * V.norm));\r\n    }\r\n}\r\n","export class Numeric{\r\n    static round(value:number, decimals:number=2):number {\r\n        return Number(Math.round(Number(value+'e'+decimals))+'e-'+decimals);\r\n    }\r\n\r\n    /**\r\n     * Get the list of the nth first prime numbers.\r\n     * @param nb : number of primes to choose from\r\n     */\r\n    static prime(nb?:number):number[]{\r\n        let primes:number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973];\r\n        if(nb === undefined){\r\n            return primes;\r\n        }else{\r\n            return primes.slice(0,Math.max(primes.length,nb));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the list of all dividers of a number.\r\n     * @param value\r\n     */\r\n    static dividers(value:number):number[]{\r\n        let D: number[];\r\n        const maxV = Math.sqrt(Math.abs(value));\r\n\r\n        // Initialize the list of dividers.\r\n        D = [];\r\n\r\n        for(let i=1; i<=maxV; i++){\r\n            if(value%i===0){\r\n                D.push(i);\r\n                D.push(value/i);\r\n            }\r\n        }\r\n\r\n        // Order numbers.\r\n        D.sort(function(a, b){return a-b;});\r\n\r\n        // Make sure the array of value is unique.\r\n        return [...new Set(D)];\r\n    }\r\n    /**\r\n     * Great Common Divisor\r\n     * @param values : number values\r\n     */\r\n    static gcd(...values:number[]):number{\r\n        // Define the gcd for two number\r\n        let gcd2 = function(a:number,b:number):number{\r\n            if(b===0){return a;}\r\n            return gcd2(b, a%b);\r\n        };\r\n\r\n        let g:number = 1,\r\n            i:number = 2;\r\n\r\n        // Nothing is given\r\n        if(values.length===0){return 1;}\r\n        // Only one number is given\r\n        if(values.length===1){\r\n            // The first number is zero\r\n            if(values[0]===0){return 1;}\r\n            // Return the number\r\n            return values[0];\r\n        }\r\n\r\n        // We have at least 2 numbers.\r\n        g = gcd2(values[0],values[1]);\r\n\r\n        // The gcd of the two first value is one ? It's already finished.\r\n        if(g===1){return 1;}\r\n\r\n        // The current gcd isn't one. Continue with all next values.\r\n        for(i=2; i<values.length; i++){\r\n            g = gcd2(g, values[i]);\r\n            // Escape if gcd is already one.\r\n            if(g===1){break;}\r\n        }\r\n\r\n        return Math.abs(g);\r\n    }\r\n\r\n    /**\r\n     * Least Common Multiple\r\n     * @param values: list of numbers\r\n     */\r\n    static lcm(...values:number[]):number{\r\n        return values.reduce(function(a,b){\r\n            return Math.abs(a * b / Numeric.gcd(a, b));\r\n        });\r\n    }\r\n}","import {Shutingyard, ShutingyardMode, ShutingyardType, tokenConstant} from \"./shutingyard\";\r\nimport {Fraction} from \"./coefficients\";\r\n\r\nexport class NumExp {\r\n    private _rpn: { token: string, tokenType: string }[]\r\n    private _expression: string\r\n\r\n    constructor(value: string) {\r\n        this._expression = value\r\n        this._rpn = new Shutingyard(ShutingyardMode.NUMERIC).parse(value).rpn\r\n    }\r\n\r\n    get rpn(): { token: string; tokenType: string }[] {\r\n        return this._rpn;\r\n    }\r\n\r\n    get expression(): string {\r\n        return this._expression;\r\n    }\r\n\r\n    private _extractDecimalPart(value: number): string {\r\n        let decimal = value.toString()\r\n\r\n        if (!decimal.includes('.')) {\r\n            return ''\r\n        }\r\n\r\n        decimal = decimal.split('.')[1]\r\n\r\n        return decimal.substring(0, decimal.length - 2)\r\n    }\r\n\r\n    private _numberCorrection(value: number): number {\r\n        // Must modify the number if it's like:\r\n        // a: 3.0000000000000003\r\n        // b: 3.9999999999999994\r\n        // remove the last character\r\n        // check if around n last characters are either 0 or 9\r\n        // if it is, 'round' the number.\r\n\r\n        const epsilon = 0.00000000000001,\r\n            number_of_digits = 6\r\n\r\n        let decimal = this._extractDecimalPart(value)\r\n        if(decimal===''){return value}\r\n\r\n        const n9 = decimal.match(/9+$/g)\r\n        const n0 = decimal.match(/0+$/g)\r\n\r\n        if (n9 && n9[0].length >= number_of_digits) {\r\n            // New tested values.\r\n            let mod = this._extractDecimalPart(value + epsilon),\r\n                mod0 = mod.match(/0+$/g)\r\n\r\n            if(mod0 && mod0[0].length>= number_of_digits){\r\n                // The value can be changed. Remove all zeros!\r\n                return +((value+epsilon).toString().split(mod0[0])[0])\r\n            }\r\n        }\r\n\r\n        if (n0 && n0[0].length >= number_of_digits) {\r\n            // New tested values.\r\n            let mod = this._extractDecimalPart(value - epsilon),\r\n                mod9 = mod.match(/9+$/g)\r\n\r\n            if(mod9 && mod9[0].length>= number_of_digits){\r\n                // The value can be changed. Remove all nines!\r\n                return +(value.toString().split(n0[0])[0])\r\n            }\r\n        }\r\n\r\n        return value\r\n    }\r\n\r\n    private _addToStack(stack:number[], value: number): void {\r\n        stack.push(this._numberCorrection(value))\r\n    }\r\n\r\n    evaluate(values: { [Key: string]: number }): number {\r\n        let stack: number[] = []\r\n        for (const element of this._rpn) {\r\n            if (element.tokenType === ShutingyardType.COEFFICIENT) {\r\n                // May be a numeric value or a Fraction.\r\n                if (!isNaN(+element.token)) {\r\n                    this._addToStack(stack, +element.token)\r\n                } else {\r\n                    this._addToStack(stack, new Fraction(element.token).value)\r\n                }\r\n            } else if (element.tokenType === ShutingyardType.VARIABLE) {\r\n                if (values[element.token] !== undefined) {\r\n                    this._addToStack(stack, +values[element.token])\r\n                }\r\n            } else if (element.tokenType === ShutingyardType.CONSTANT) {\r\n                this._addToStack(stack, tokenConstant[element.token])\r\n            } else if (element.tokenType === ShutingyardType.OPERATION) {\r\n                if (element.token === '*') {\r\n                    const b = +stack.pop(),\r\n                        a = +stack.pop()\r\n                    this._addToStack(stack, a * b)\r\n                } else if (element.token === '/') {\r\n                    const b = +stack.pop(),\r\n                        a = +stack.pop()\r\n                    this._addToStack(stack, a / b)\r\n                } else if (element.token === '+') {\r\n                    const b = +stack.pop(),\r\n                        a = +stack.pop()\r\n                    this._addToStack(stack, a + b)\r\n                } else if (element.token === '-') {\r\n                    const b = +stack.pop(),\r\n                        a = +stack.pop()\r\n                    this._addToStack(stack, a - b)\r\n                } else if (element.token === '^') {\r\n                    const b = +stack.pop(),\r\n                        a = +stack.pop()\r\n                    this._addToStack(stack, Math.pow(a, b))\r\n                }\r\n            } else if (element.tokenType === ShutingyardType.FUNCTION) {\r\n                const a = +stack.pop()\r\n                if (element.token === 'sin') {\r\n                    this._addToStack(stack, Math.sin(a))\r\n                } else if (element.token === 'cos') {\r\n                    this._addToStack(stack, Math.cos(a))\r\n                } else if (element.token === 'tan') {\r\n                    this._addToStack(stack, Math.tan(a))\r\n                } else if(element.token === 'sqrt') {\r\n                    this._addToStack(stack, Math.sqrt(a))\r\n                }\r\n            }\r\n        }\r\n\r\n        if (stack.length === 1) {\r\n            return stack[0]\r\n        } else {\r\n            console.error('There was a problem parsing', this._expression, '. The RPN array is', this._rpn)\r\n            return 0\r\n        }\r\n    }\r\n}\r\n","import {rndPolynom} from \"./rndPolynom\";\r\nimport {rndMonom} from \"./rndMonom\";\r\nimport {rndHelpers} from \"./rndHelpers\";\r\nimport {randomCoefficientConfig, randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {Monom, Polynom} from \"../algebra\";\r\nimport {Fraction} from \"../coefficients\";\r\nimport {rndFraction} from \"./rndFraction\";\r\n\r\nexport * from \"./rndTypes\"\r\n\r\nexport namespace Random {\r\n    export function polynom(config?: randomPolynomConfig): Polynom {\r\n        return (new rndPolynom(config)).generate()\r\n    }\r\n\r\n    export function monom(config?: randomMonomConfig): Monom {\r\n        return (new rndMonom(config)).generate()\r\n    }\r\n\r\n    export function fraction(config?: randomCoefficientConfig): Fraction {\r\n        return (new rndFraction(config)).generate()\r\n    }\r\n\r\n    export function number(from: number, to: number): number {\r\n        return rndHelpers.randomInt(from, to)\r\n    }\r\n\r\n    export function numberSym(max: number, allowZero?: boolean): number {\r\n        return rndHelpers.randomIntSym(max, allowZero)\r\n    }\r\n\r\n    export function bool(percent?: number): boolean {\r\n        return rndHelpers.randomBool(percent)\r\n    }\r\n\r\n    export function array(arr: any[], number?: number): any[] {\r\n        return rndHelpers.randomArray(arr, number)\r\n    }\r\n\r\n    export function item(arr: any[]): any {\r\n        return rndHelpers.randomItem(arr)\r\n    }\r\n\r\n    export function shuffle(arr: any[]): any {\r\n        rndHelpers.shuffleArray(arr)\r\n    }\r\n}","export class randomCore {\r\n    protected _config: Object\r\n    protected _defaultConfig: Object\r\n    mergeConfig = (config: Object, defaultConfig: Object): Object => {\r\n        if (config !== undefined) {\r\n            return {...defaultConfig, ...config}\r\n        }\r\n        return defaultConfig\r\n    }\r\n\r\n    generate = (): unknown => {\r\n        return undefined\r\n    }\r\n\r\n    config = (config: Object): randomCore => {\r\n        this._config = this.mergeConfig(config, this._defaultConfig)\r\n        return this\r\n    }\r\n}","import {randomCore} from \"./randomCore\";\r\nimport {randomCoefficientConfig, randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {Fraction} from \"../coefficients\";\r\nimport {Random} from \"./index\";\r\n\r\n/**\r\n * Create a random monom based on a based configuration\r\n */\r\nexport class rndFraction extends randomCore {\r\n    declare protected _config: randomCoefficientConfig\r\n    declare protected _defaultConfig: randomCoefficientConfig\r\n\r\n    constructor(userConfig?: randomCoefficientConfig) {\r\n        super();\r\n\r\n        this._defaultConfig = {\r\n            negative: true,\r\n            max: 10,\r\n            reduced: true,\r\n            zero: true,\r\n            natural: false\r\n        }\r\n\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Fraction => {\r\n        let Q = new Fraction()\r\n\r\n        if(this._config.negative){\r\n            Q.numerator = Random.numberSym(this._config.max, this._config.zero)\r\n        }else {\r\n            Q.numerator = Random.number(this._config.zero ? 0 : 1, this._config.max)\r\n        }\r\n        if(this._config.natural){\r\n            Q.denominator = 1\r\n        }else {\r\n            Q.denominator = Random.number(1, this._config.max)\r\n        }\r\n\r\n        return this._config.reduced?Q.reduce():Q\r\n    }\r\n}\r\n","/**\r\n * Random helpers\r\n */\r\nexport class rndHelpers {\r\n\r\n    /**\r\n     * Random boolean with a percent ratio\r\n     * @param percent\r\n     */\r\n    static randomBool(percent:number=0.5):boolean{\r\n        return Math.random()<percent;\r\n    }\r\n\r\n    /**\r\n     * Random integer between two values.\r\n     * @param a (number) : From this value to the second value. If the second is ommited, this value is the max value.\r\n     * @param b (number) : To this value. If this is ommited.\r\n     */\r\n    static randomInt(a:number, b?:number):number{\r\n        if(b===undefined){return this.randomInt(0,a);}\r\n\r\n        return Math.floor(Math.random() * (b - a + 1) + a);\r\n    }\r\n\r\n    /**\r\n     * Random integer between -max and max value.\r\n     * @param max (number) : determine the limits.\r\n     * @param zero (bool) : determine if zero is allowed or not.\r\n     */\r\n    static randomIntSym(max:number, zero?:boolean):number{\r\n        if(zero===false){\r\n            return this.randomBool()?this.randomInt(1,max):-this.randomInt(1,max);\r\n        }else{\r\n            return this.randomInt(-max, max);\r\n        }\r\n    }\r\n\r\n    static randomArray(arr: any[], number?:number):any[]{\r\n        if(number===undefined){number = 1}\r\n\r\n        // Return a clone array\r\n        if(arr.length<=0){return Object.values(arr)}\r\n\r\n        // Randomize the array and return the n first elements.\r\n        return rndHelpers.shuffleArray(arr).slice(0,number);\r\n    }\r\n\r\n    static randomItem(arr: any[]): any{\r\n        if(arr.length===0){return ''}\r\n        return this.randomArray(arr, 1)[0]\r\n    }\r\n\r\n    static shuffleArray(arr: any[]): any[] {\r\n        // The Fisher-Yates algorithm\r\n        let shuffleArray = Object.values(arr)\r\n        for (let i = shuffleArray.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            const temp = shuffleArray[i];\r\n            shuffleArray[i] = shuffleArray[j];\r\n            shuffleArray[j] = temp;\r\n        }\r\n\r\n        return shuffleArray;\r\n    }\r\n\r\n}","import {randomCore} from \"./randomCore\";\r\nimport {randomMonomConfig} from \"./rndTypes\";\r\nimport {Random} from \"./index\";\r\nimport {Monom} from \"../algebra\";\r\n\r\n/**\r\n * Create a random monom based on a based configuration\r\n */\r\nexport class rndMonom extends randomCore {\r\n    declare protected _config: randomMonomConfig\r\n    declare protected _defaultConfig: randomMonomConfig\r\n\r\n    constructor(userConfig?: randomMonomConfig) {\r\n        super();\r\n\r\n        this._defaultConfig = {\r\n            letters: 'x',\r\n            degree: 2,\r\n            fraction: true,\r\n            zero: false\r\n        }\r\n\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Monom => {\r\n        // Create a monom instance\r\n        let M = new Monom()\r\n\r\n        // Generate the coefficient\r\n        if (typeof this._config.fraction === \"boolean\") {\r\n            M.coefficient = Random.fraction({\r\n                zero: this._config.zero,\r\n                reduced: true,\r\n                natural: !this._config.fraction\r\n            })\r\n        } else {\r\n            M.coefficient = Random.fraction(this._config.fraction)\r\n        }\r\n\r\n        // Calculate the degree of the monom\r\n        if (this._config.letters.length > 1) {\r\n            // Initialise each items...\r\n            for (let L of this._config.letters.split('')) {\r\n                M.setLetter(L, 0);\r\n            }\r\n            for (let i = 0; i < this._config.degree; i++) {\r\n                const L = Random.item(this._config.letters.split(\"\"))\r\n                M.setLetter(L, M.degree(L).clone().add(1))\r\n            }\r\n        } else {\r\n            M.setLetter(this._config.letters, this._config.degree)\r\n        }\r\n\r\n        return M\r\n    }\r\n}\r\n","import {randomCore} from \"./randomCore\";\r\nimport {randomPolynomConfig} from \"./rndTypes\";\r\nimport {rndMonom} from \"./rndMonom\";\r\nimport {Random} from \"./index\";\r\nimport {Polynom} from \"../algebra\";\r\nimport {Monom} from \"../algebra\";\r\n\r\n/**\r\n * Random polynoms\r\n */\r\nexport class rndPolynom extends randomCore {\r\n    declare protected _config: randomPolynomConfig\r\n    declare protected _defaultConfig: randomPolynomConfig\r\n\r\n    constructor(userConfig?: randomPolynomConfig) {\r\n        super();\r\n\r\n        // Default config for a random polynom\r\n        this._defaultConfig = {\r\n            letters: 'x',\r\n            degree: 2,\r\n            fraction: false,\r\n            zero: false,\r\n            unit: false,\r\n            factorable: false,\r\n            allowNullMonom: true,\r\n            numberOfMonoms: 0,\r\n            positive: true\r\n        }\r\n\r\n        // Merge config with initialiser\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Polynom => {\r\n        if(this._config.factorable && this._config.degree>1){\r\n            return this.factorable()\r\n        }\r\n\r\n        // Create the polynom\r\n        let P = new Polynom().empty(),\r\n            M: Monom\r\n\r\n        for (let i = this._config.degree; i >= 0; i--) {\r\n            // Create monom of corresponding degree.\r\n            M = new rndMonom({\r\n                letters: this._config.letters,\r\n                degree: i,\r\n                fraction: this._config.fraction,\r\n                zero: (i === this._config.degree) ? false : this._config.allowNullMonom\r\n            }).generate()\r\n\r\n            // If degree is the greatest and unit is true, set the monom value to one.\r\n            if (this._config.unit && this._config.degree === i) {\r\n                M.coefficient.one()\r\n            }\r\n\r\n            // Add to the polynom\r\n            P.add(M)\r\n        }\r\n\r\n        // Make sure the first monom is positive.\r\n        if(this._config.positive && P.monomByDegree().coefficient.isNegative()){\r\n            P.monomByDegree().coefficient.opposed()\r\n        }\r\n\r\n        // If the number of monoms is greater than the allowed value, remove some of them... except the first one !\r\n        if (this._config.numberOfMonoms > 0 && this._config.numberOfMonoms < P.length) {\r\n            // Get the greatest degree monom\r\n            let M = P.monomByDegree().clone()\r\n            P.monoms = Random.array(P.monoms.slice(1), this._config.numberOfMonoms-1)\r\n            P.add(M).reorder().reduce()\r\n        }\r\n        return P\r\n    }\r\n\r\n    factorable = (): Polynom => {\r\n        let P = new Polynom().one()\r\n\r\n        let _factorableConfig = {...this._config}\r\n        _factorableConfig.degree = 1\r\n        _factorableConfig.factorable = false\r\n\r\n        for(let i=0; i<this._config.degree;i++){\r\n            P.multiply(Random.polynom(_factorableConfig))\r\n        }\r\n\r\n        return P\r\n    }\r\n}","import {loadHighlighter} from \"typedoc/dist/lib/utils/highlighter\";\r\nimport exp = require(\"constants\");\r\n\r\ntype tokenType = {\r\n    [key: string]: {\r\n        precedence: number,\r\n        associative: string,\r\n        type: string\r\n    }\r\n}\r\n\r\nexport const tokenConstant:{[Key:string]:number} = {\r\n    pi: Math.PI,\r\n    e: Math.exp(1)\r\n}\r\nexport enum ShutingyardType {\r\n    VARIABLE='variable',\r\n    COEFFICIENT='coefficient',\r\n    OPERATION = 'operation',\r\n    CONSTANT = 'constant',\r\n    FUNCTION = 'function',\r\n    MONOM = 'monom'\r\n}\r\nexport enum ShutingyardMode {\r\n    POLYNOM= 'polynom',\r\n    SET = 'set',\r\n    NUMERIC = 'numeric'\r\n}\r\n\r\nexport class Shutingyard {\r\n    private _rpn: { token: string, tokenType: string }[] = [];\r\n    readonly _mode: ShutingyardMode;\r\n    private _tokenConfig: tokenType;\r\n    private _tokenConstant: {[Key:string]: number}\r\n    private _uniformize: boolean;\r\n    private _tokenKeys: string[]\r\n\r\n    constructor(mode?: ShutingyardMode ) {\r\n        this._mode = typeof mode === 'undefined' ? ShutingyardMode.POLYNOM : mode;\r\n        this.tokenConfigInitialization()\r\n    }\r\n\r\n    /**\r\n     * Determin if the token is a defined operation\r\n     * Defined operations: + - * / ^ sin cos tan\r\n     * @param token\r\n     */\r\n    // isOperation(token: string): boolean {\r\n    //     if (token[0].match(/[+\\-*/^]/g)) {\r\n    //         return true;\r\n    //     }\r\n    //     //\r\n    //     // if (token.match(/^sin|cos|tan/g)) {\r\n    //     //     return true;\r\n    //     // }\r\n    //\r\n    //     return false;\r\n    // }\r\n\r\n    tokenConfigInitialization(): tokenType {\r\n        if (this._mode === ShutingyardMode.SET) {\r\n            this._tokenConfig = {\r\n                '&': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '|': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '!': {precedence: 4, associative: 'right', type: ShutingyardType.OPERATION},\r\n                '-': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION}\r\n            }\r\n            this._uniformize = false;\r\n        }else if (this._mode === ShutingyardMode.NUMERIC){\r\n            this._tokenConfig = {\r\n                '^': {precedence: 4, associative: 'right', type: ShutingyardType.OPERATION},\r\n                '*': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '/': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '+': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '-': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '%': {precedence: 3, associative: 'right', type: ShutingyardType.OPERATION},\r\n                'sin': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'cos': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'tan': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'sqrt': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n            }\r\n            this._uniformize = false\r\n        } else {\r\n            this._tokenConfig = {\r\n                '^': {precedence: 4, associative: 'right', type: ShutingyardType.OPERATION},\r\n                '*': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '/': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '+': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '-': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '%': {precedence: 3, associative: 'right', type: ShutingyardType.OPERATION},\r\n                'sin': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'cos': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'tan': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n            }\r\n            this._uniformize = true\r\n        }\r\n\r\n        this._tokenKeys = Object.keys(this._tokenConfig).sort((a,b)=>b.length-a.length)\r\n        return this._tokenConfig\r\n    }\r\n\r\n    /**\r\n     * Get the next token to analyse.\r\n     * @param expr (string) Expression to analyse\r\n     * @param start (number) CUrrent position in the expr string.\r\n     */\r\n    NextToken(expr: string, start: number): [string, number, string] {\r\n        let token: string, tokenType: string;\r\n        token = '';\r\n        tokenType = '';\r\n        // Case of parenthesis or comma (generic items)\r\n        if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        } else{\r\n            // Order token keys by token characters length (descending)\r\n            // TODO: this is done each time ! SHould be done once !\r\n            // const keys = Object.keys(this._tokenConfig).sort((a,b)=>b.length-a.length)\r\n\r\n            // Extract operation and function tokens\r\n            for(let key of this._tokenKeys){\r\n                if(expr.substring(start, start+key.length) === key){\r\n                    token += key;\r\n                    tokenType = this._tokenConfig[key].type\r\n                    break\r\n                }\r\n            }\r\n\r\n            // Extract constant\r\n            for(let key in tokenConstant){\r\n                if(expr.substring(start, start+key.length) === key){\r\n                    token += key;\r\n                    tokenType = ShutingyardType.CONSTANT\r\n                    break\r\n                }\r\n            }\r\n\r\n            if(token===''){\r\n                // No function found ! Might be a coefficient !\r\n                if( expr[start].match(/[0-9]/) ) {\r\n                    if(this._mode === ShutingyardMode.POLYNOM) {\r\n                        token = expr.substring(start).match(/^([0-9.,/]+)/)[0]\r\n                    }else{\r\n                        token = expr.substring(start).match(/^([0-9.,]+)/)[0]\r\n                    }\r\n                    tokenType = ShutingyardType.COEFFICIENT\r\n                }else if (expr[start].match(/[a-zA-Z]/)) {\r\n                    token = expr.substring(start).match(/^([a-zA-Z])/)[0]\r\n                    tokenType = ShutingyardType.VARIABLE\r\n                }else{\r\n                    console.log('Unidentified token', expr[start], expr, start)\r\n                    token = expr[start]\r\n                    tokenType = ShutingyardType.MONOM\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    /**\r\n     * Sanitize an expression by adding missing common operation (multiplication between parentheseses)\r\n     * @param expr\r\n     * @constructor\r\n     */\r\n    Uniformizer(expr: string): string {\r\n        // Determiner if need to be uniformized\r\n        if(!this._uniformize){return expr}\r\n\r\n        let expr2;\r\n        // Replace missing multiplication between two parenthese\r\n        expr2 = expr.replace(/\\)\\(/g, ')*(');\r\n\r\n        // Replace missing multiplication between number or setLetter and parenthese.\r\n\r\n        // 3x(x-4) => 3x*(x-4)\r\n        expr2 = expr2.replace(/([\\da-zA-Z])(\\()/g, \"$1*$2\");\r\n\r\n        // (x-4)3x => (x-4)*3x\r\n        expr2 = expr2.replace(/(\\))([\\da-zA-Z])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between number and letters.\r\n        // 3x => 3*x\r\n        expr2 = expr2.replace(/([0-9])([a-zA-Z])/g, \"$1*$2\");\r\n        expr2 = expr2.replace(/([a-zA-Z])([0-9])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between letters ?\r\n        // TODO: More robust solution to handle all letters ?\r\n        expr2 = expr2.replace(/([abcxyz])([abcxyz])/g, \"$1*$2\");\r\n\r\n        // Restore operation auto formating (prevent adding the mutliplcation star)\r\n        // TODO: Accept list of functions\r\n        let fnToken = ['sin', 'cos', 'tan']\r\n        for (let token of fnToken) {\r\n            expr2 = expr2.replace(new RegExp(token + '\\\\*', 'g'), token);\r\n        }\r\n\r\n        return expr2;\r\n    }\r\n\r\n    /**\r\n     * Parse an expression using the shutting yard tree algorithms\r\n     * @param expr (string) Expression to analyse\r\n     * Returns a RPN list of items.\r\n     * @param operators\r\n     */\r\n    parse(expr: string, operators?: string[]): Shutingyard {\r\n        let outQueue: {token:string, tokenType: string}[] = [],    // Output queue\r\n            opStack: {token:string, tokenType: string}[] = [],     // Operation queue\r\n            token: string = '',\r\n            tokenPos: number = 0,\r\n            tokenType: string = '',\r\n            previousOpStatckLength = 0\r\n\r\n        expr = this.Uniformizer(expr);\r\n\r\n        let securityLoopLvl1 = 50,\r\n            securityLoopLvl2_default = 50,\r\n            securityLoopLvl2;\r\n\r\n        while (tokenPos < expr.length) {\r\n            securityLoopLvl1--;\r\n            if (securityLoopLvl1 === 0) {\r\n                console.log('SECURITY LEVEL 1 EXIT');\r\n                break;\r\n            }\r\n\r\n            // Get the next token and the corresponding new (ending) position\r\n            [token, tokenPos, tokenType] = this.NextToken(expr, tokenPos);\r\n\r\n            switch (tokenType) {\r\n                case 'monom':\r\n                case 'coefficient':\r\n                case 'variable':\r\n                case 'constant':\r\n                    outQueue.push({\r\n                        token,\r\n                        tokenType\r\n                    });\r\n                    // if(previousOpStatckLength == opStack.length && outQueue.length>=2){\r\n                    //     console.log('opStatckLength', outQueue, opStack.length)\r\n                    //     outQueue.push('*')\r\n                    // }\r\n                    break;\r\n                case 'operation':\r\n                    previousOpStatckLength = opStack.length;\r\n                    //If the token is an operator, o1, then:\r\n                    if (opStack.length > 0) {\r\n                        let opTop = opStack[opStack.length - 1];\r\n\r\n\r\n                        securityLoopLvl2 = +securityLoopLvl2_default;\r\n\r\n                        //while there is an operator token o2, at the top of the operator stack and\r\n                        while (opTop.token in this._tokenConfig && (\r\n                                //either o1 is left-associative and its precedence is less than or equal to that of o2,\r\n                                (this._tokenConfig[token].associative === 'left' && this._tokenConfig[token].precedence <= this._tokenConfig[opTop.token].precedence)\r\n                                ||\r\n                                //or o1 is right associative, and has precedence less than that of o2,\r\n                                (this._tokenConfig[token].associative === 'right' && this._tokenConfig[token].precedence < this._tokenConfig[opTop.token].precedence)\r\n                            )\r\n                            ) {\r\n\r\n                            /* Security exit ! */\r\n                            securityLoopLvl2--;\r\n                            if (securityLoopLvl2 === 0) {\r\n                                console.log('SECURITY LEVEL 2 OPERATION EXIT');\r\n                                break;\r\n                            }\r\n\r\n                            // Add the operation to the queue\r\n                            outQueue.push((opStack.pop()) || {token: '', tokenType: 'operation'});\r\n\r\n                            // Get the next operation on top of the Stack.\r\n                            if(opStack.length===0){break;}\r\n                            opTop = opStack[opStack.length - 1];\r\n                        }\r\n                    }\r\n                    //at the end of iteration push o1 onto the operator stack\r\n                    opStack.push({token,tokenType});\r\n                    break;\r\n                case 'function-argument':\r\n                    // TODO: check if the opStack exist.\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 0) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 FUNCTION ARGUMENT EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n                    break;\r\n                case '(':\r\n                    opStack.push({token,tokenType});\r\n                    // Add an empty value if next element is negative.\r\n                    if (expr[tokenPos] === '-') {\r\n                        outQueue.push({token: '0', tokenType: 'coefficient'});\r\n                    }\r\n                    break;\r\n                case ')':\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    //Until the token at the top of the stack is a left parenthesis, pop operators off the stack onto the output queue.\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 1 /*Maybe zero !? */) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 CLOSING PARENTHESE EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n\r\n                    //Pop the left parenthesis from the stack, but not onto the output queue.\r\n                    opStack.pop();\r\n                    break;\r\n                case 'function':\r\n                    opStack.push({token, tokenType});\r\n                    break;\r\n                default:\r\n                    // In theory, everything should be handled.\r\n                    console.log(`SHUTING YARD: ${tokenType} : ${token} `);\r\n            }\r\n\r\n            // Output\r\n            // console.log(outQueue.concat(opStack.reverse()).join(\" \"));\r\n        }\r\n\r\n        // console.log(outQueue.concat(opStack.reverse()));\r\n        this._rpn = outQueue.concat(opStack.reverse());\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    // Getter\r\n    get rpn() {\r\n        // console.log(this._rpn)\r\n        return this._rpn;\r\n    }\r\n\r\n\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import {Numeric} from \"./maths/numeric\";\r\nimport {NumExp} from \"./maths/numexp\";\r\nimport {Shutingyard} from \"./maths/shutingyard\";\r\nimport {Random} from \"./maths/random\";\r\nimport {Fraction, Nthroot} from \"./maths/coefficients\";\r\nimport {Monom, Polynom, Equation, LinearSystem, Rational, Logicalset} from \"./maths/algebra\";\r\nimport {Line, Circle, Triangle, Point, Vector} from \"./maths/geometry\";\r\n\r\n// Expose as global\r\n// export let Pi = {\r\n(<any>window).Pi = {\r\n    ShutingYard: Shutingyard,\r\n    Numeric: Numeric,\r\n    NumExp: NumExp,\r\n    Fraction: Fraction,\r\n    Root: Nthroot,\r\n    Monom: Monom,\r\n    Polynom: Polynom,\r\n    Equation: Equation,\r\n    LinearSystem: LinearSystem,\r\n    Rational: Rational,\r\n    Logicalset: Logicalset,\r\n    Random: Random,\r\n    Geometry: {\r\n        Vector: Vector,\r\n        Point: Point,\r\n        Line: Line,\r\n        Triangle: Triangle,\r\n        Circle: Circle\r\n    }\r\n};\r\n"],"names":["Equation","_left","_right","_sign","_polynom","_solutions","_varnothing","_real","constructor","equations","this","Polynom","zero","length","clone","parse","left","right","isEquation","solutions","solution","tex","includes","map","x","join","isReal","undefined","solve","isVarnothing","signAsTex","display","raw","variables","Set","concat","numberOfVars","value","sign","_formatSign","equationString","pStr","strSign","_findSign","split","create","console","log","signStr","_reverseSign","replace","_randomizeDefaults","degree","randomizeDefaults","randomize","opts","moveLeft","subtract","reorder","allLeft","mMove","m","monoms","isZero","simplify","multiply","Numeric","lcm","getDenominators","divide","gcd","getNumerators","isolate","letter","isOne","isMultiVariable","cMove","hasLetter","add","opposed","coefficient","replaceBy","P","F","Fraction","invert","max","letters","_solveDegree1","_solveDegree2","_solveDegree3plus","isGreater","indexOf","isStrictEqual","isAlsoEqual","m1","monomByDegree","m0","v","s","NaN","exact","delta","nthDelta","realX1","realX2","sX1","sX2","aF","bF","cF","denominator","a","b","Math","sqrt","toFixed","Nthroot","reduce","hasRadical","S1","S2","dfrac","sol","LinearSystem","_resolutionSteps","_equations","_letters","equationStrings","isSolvable","V","E","sort","equStr","LS","equArray","equ","L","monomByLetter","push","repeat","_findLetters","setCoefficient","coefficients","i","slice","toString","setLetters","generate","solutionsF","_generateOneEquation","coeff","leftValue","equString","Random","numberSym","_checkIfLinerCombination","_linearReduction","eq1","eq2","c1","c2","mergeEquations","factor1","factor2","eq1multiplied","eq2multiplied","_solveOneLetter","LE","reducedEquations","str","_rawString","_rpn","isLogicalset","Shutingyard","ShutingyardMode","SET","rpn","evaluate","tokenSets","reference","referenceSet","varStack","key","token","tokenType","second","pop","first","filter","has","vennAB","A","B","vennABC","C","Monom","_coefficient","_literal","literal","literalSqrt","isLiteralSquare","literalStr","inputStr","matchAll","clean","Object","keys","isNotZero","isNotEqual","dividers","hasFractionCoefficient","numerator","abs","literals","_getLiteralDividers","monomDividers","N","M","one","arr","tmpList","d","litt","item","currentLetter","displayWithSign","texWithSign","isStrictlyPositive","_shutingYardToReducedMonom","copyLiterals","pow","q1","q2","stack","element","setLetter","k","makeSame","isSameAs","multiplyByNumber","nb","root","p","isSquare","compare","isEqual","M1","M2","K","isRational","isEven","values","t","n","r","tmpValues","derivative","dM","primitive","static","coeffN","coeffD","min","areSameAs","areEquals","_monoms","_factors","_texString","polynomString","factors","texFactors","factorize","f","texString","genDisplay","output","forceSign","wrapParentheses","isNaN","Number","empty","shutingYardToReducedPolynom","test","fractions","m2","tempPolynom","previousToken","isSafeInteger","multiplyByPolynom","multiplyByFraction","multiplyByMonom","multiplyByInteger","xmultiply","euclidian","quotient","reminder","maxMP","degreeP","newM","MaxIteration","geq","isPositive","divideByFraction","divideByInteger","nbF","cP1","cP2","isOpposedAt","isFactorized","match","e","polynomStringNormalized","replaceAll","polynomStringReduced","substr","polyFactors","splice","isDeveloped","j","S","resultPolynom","forEach","monom","dP","integrate","valuesA","valuesB","commonMonom","securityLoop","m1d","m2d","result","dividerPolynom","_factorize2ndDegree","P1","P2","c","x1","x2","factor","xyzPolynom","xFactors","_factorizeByGroups","getZeroes","zeroes","zeroesAsTex","greater","D","z","frac","monomsByDegree","Ms","denominators","numerators","lcmDenominator","gcdDenominator","lcmNumerator","gcdNumerator","_numerator","_denominator","domain","amplify","NumeratorEuclidien","DenominatorEuclidien","R","limits","Infinity","denominatorOrPeriodic","isFraction","floor","infinite","invalid","Q","lesser","g","compareFraction","than","leq","isOpposed","isInverted","isNegativeOne","isNegative","isStrictlyNegative","isInfinity","isFinite","isReduced","isNatural","isOdd","_radical","_nth","_isValid","radical","nth","nthroot","Circle","_center","_squareRadius","_cartesian","_exists","center","exists","squareRadius","radius","cx","cy","y","developed","cartesian","_calculateCartesian","_reset","_parseEquation","_parseCopyCircle","Point","_parseThroughtThreePoints","_parseCenterAndPointThrough","_parseCenterAndRadius","circle","square","pointThrough","Vector","normSquare","y1","y2","T","Triangle","mAB","remarquables","mediators","AB","mAC","AC","intersection","point","relativePosition","distance","distanceTo","lineIntersection","solX","intersectionPoints","equX","lineX","equation","lineY","LinePropriety","Line","_a","_b","_c","_OA","_d","_n","_referencePropriety","_referenceLine","Perpendicular","Parallel","canonical","mxh","slope","OA","height","parametric","pmatrix","normal","director","parseEquation","parseByPointAndVector","parseByPointAndNormal","parseByCoefficient","elem","delete","size","parseByPointAndLine","orientation","isParellelTo","line","isVertical","simplifyDirection","Pt","isParallel","isSame","hasIntersection","pt","d2","fraction","hitSegment","iPt","getValueAtX","getValueAtY","canonicalAsFloatCoefficient","decimals","_x","_y","_exist","pts","xy","origin","middleOf","texValues","numberOfDigits","_A","_B","_C","_lines","_middles","_remarquables","getSegment","BA","BC","CB","CA","isRectangle","isNormalTo","isEquilateral","isIsocele","lines","intersect","_updateTriangle","_calculateRemarquableLines","getPointByName","ptName","toUpperCase","ptName1","ptName2","_calculateBisectors","medians","heights","bisectors","d1","tlines","b1","norm","b2","_parseString","reset","components","scalarProductWithVector","v1","v2","multiplyByScalar","scalar","divideByScalar","angleWith","sharp","radian","toDegree","PI","acos","round","primes","maxV","gcd2","_expression","NUMERIC","expression","_extractDecimalPart","decimal","substring","_numberCorrection","epsilon","n9","n0","mod0","mod9","_addToStack","ShutingyardType","COEFFICIENT","VARIABLE","CONSTANT","tokenConstant","OPERATION","FUNCTION","sin","cos","tan","error","polynom","config","rndPolynom","rndMonom","rndFraction","number","from","to","rndHelpers","randomInt","allowZero","randomIntSym","bool","percent","randomBool","array","randomArray","randomItem","shuffle","shuffleArray","_config","_defaultConfig","mergeConfig","defaultConfig","randomCore","userConfig","super","negative","reduced","natural","random","temp","unit","factorable","allowNullMonom","numberOfMonoms","positive","_factorableConfig","pi","exp","_mode","_tokenConfig","_tokenConstant","_uniformize","_tokenKeys","mode","POLYNOM","tokenConfigInitialization","precedence","associative","type","NextToken","expr","start","MONOM","Uniformizer","expr2","fnToken","RegExp","operators","outQueue","opStack","tokenPos","previousOpStatckLength","securityLoopLvl2","securityLoopLvl1","opTop","reverse","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","window","Pi","ShutingYard","NumExp","Root","Rational","Logicalset","Geometry"],"sourceRoot":""}