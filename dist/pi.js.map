{"version":3,"file":"pi.js","mappings":"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","sources":["webpack://pimath/./src/maths/numeric.ts","webpack://pimath/./src/maths/shutingyard.ts","webpack://pimath/./src/maths/coefficients/fraction.ts","webpack://pimath/./src/maths/coefficients/nthroot.ts","webpack://pimath/./src/maths/algebra/monom.ts","webpack://pimath/./src/maths/random/randomCore.ts","webpack://pimath/./src/maths/random/rndMonom.ts","webpack://pimath/./src/maths/random/rndPolynom.ts","webpack://pimath/./src/maths/random/rndHelpers.ts","webpack://pimath/./src/maths/random/random.ts","webpack://pimath/./src/maths/algebra/polynom.ts","webpack://pimath/./src/maths/algebra/equation.ts","webpack://pimath/./src/maths/algebra/linearSystem.ts","webpack://pimath/./src/maths/geometry/vector.ts","webpack://pimath/./src/maths/geometry/point.ts","webpack://pimath/./src/maths/geometry/line.ts","webpack://pimath/./src/main.ts","webpack://pimath/./src/maths/algebra/rational.ts","webpack://pimath/./src/maths/algebra/logicalset.ts","webpack://pimath/./src/maths/geometry/triangle.ts","webpack://pimath/./src/maths/geometry/circle.ts"],"sourcesContent":["export default class Numeric{\r\n    static round(value:number, decimals:number=2):number {\r\n        return Number(Math.round(Number(value+'e'+decimals))+'e-'+decimals);\r\n    }\r\n\r\n    /**\r\n     * Get the list of the nth first prime numbers.\r\n     * @param nb : number of primes to choose from\r\n     */\r\n    static prime(nb?:number):number[]{\r\n        let primes:number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973];\r\n        if(nb === undefined){\r\n            return primes;\r\n        }else{\r\n            return primes.slice(0,Math.max(primes.length,nb));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the list of all dividers of a number.\r\n     * @param value\r\n     */\r\n    static dividers(value:number):number[]{\r\n        let D: number[];\r\n        const maxV = Math.sqrt(Math.abs(value));\r\n\r\n        // Initialize the list of dividers.\r\n        D = [];\r\n\r\n        for(let i=1; i<=maxV; i++){\r\n            if(value%i===0){\r\n                D.push(i);\r\n                D.push(value/i);\r\n            }\r\n        }\r\n\r\n        // Order numbers.\r\n        D.sort(function(a, b){return a-b;});\r\n\r\n        // Make sure the array of value is unique.\r\n        return [...new Set(D)];\r\n    }\r\n    /**\r\n     * Great Common Divisor\r\n     * @param values : number values\r\n     */\r\n    static gcd(...values:number[]):number{\r\n        // Define the gcd for two number\r\n        let gcd2 = function(a:number,b:number):number{\r\n            if(b===0){return a;}\r\n            return gcd2(b, a%b);\r\n        };\r\n\r\n        let g:number = 1,\r\n            i:number = 2;\r\n\r\n        // Nothing is given\r\n        if(values.length===0){return 1;}\r\n        // Only one number is given\r\n        if(values.length===1){\r\n            // The first number is zero\r\n            if(values[0]===0){return 1;}\r\n            // Return the number\r\n            return values[0];\r\n        }\r\n\r\n        // We have at least 2 numbers.\r\n        g = gcd2(values[0],values[1]);\r\n\r\n        // The gcd of the two first value is one ? It's already finished.\r\n        if(g===1){return 1;}\r\n\r\n        // The current gcd isn't one. Continue with all next values.\r\n        for(i=2; i<values.length; i++){\r\n            g = gcd2(g, values[i]);\r\n            // Escape if gcd is already one.\r\n            if(g===1){break;}\r\n        }\r\n\r\n        return Math.abs(g);\r\n    }\r\n\r\n    /**\r\n     * Least Common Multiple\r\n     * @param values: list of numbers\r\n     */\r\n    static lcm(...values:number[]):number{\r\n        return values.reduce(function(a,b){\r\n            return Math.abs(a * b / Numeric.gcd(a, b));\r\n        });\r\n    }\r\n}","type tokenType = {\r\n    [key: string]: {\r\n        precedence: number,\r\n        associative: string\r\n    }\r\n}\r\n\r\nexport default class Shutingyard {\r\n    private _rpn: { token: string, tokenType: string }[] = [];\r\n    readonly _mode: 'polynom' | 'set';\r\n    private _tokenConfig: tokenType;\r\n    private _uniformize: boolean;\r\n\r\n    constructor(mode?: 'polynom' | 'set') {\r\n        this._mode = typeof mode === 'undefined' ? 'polynom' : mode;\r\n        this.tokenConfigInitialization()\r\n    }\r\n\r\n    /**\r\n     * Determin if the token is a defined operation\r\n     * Defined operations: + - * / ^ sin cos tan\r\n     * @param token\r\n     */\r\n    isOperation(token: string): boolean {\r\n        if (token[0].match(/[+\\-*/^]/g)) {\r\n            return true;\r\n        }\r\n        //\r\n        // if (token.match(/^sin|cos|tan/g)) {\r\n        //     return true;\r\n        // }\r\n\r\n        return false;\r\n    }\r\n\r\n    tokenConfigInitialization(): tokenType {\r\n        if (this._mode === 'set') {\r\n            this._tokenConfig = {\r\n                '&': {precedence: 3, associative: 'left'},\r\n                '|': {precedence: 3, associative: 'left'},\r\n                '!': {precedence: 4, associative: 'right'},\r\n                '-': {precedence: 2, associative: 'left'}\r\n            }\r\n            this._uniformize = false;\r\n        } else {\r\n            this._tokenConfig = {\r\n                '^': {precedence: 4, associative: 'right'},\r\n                '*': {precedence: 3, associative: 'left'},\r\n                '/': {precedence: 3, associative: 'left'},\r\n                '+': {precedence: 2, associative: 'left'},\r\n                '-': {precedence: 2, associative: 'left'},\r\n                '%': {precedence: 3, associative: 'right'},\r\n                'sin': {precedence: 4, associative: 'right'},\r\n                'cos': {precedence: 4, associative: 'right'},\r\n                'tab': {precedence: 4, associative: 'right'},\r\n            }\r\n            this._uniformize = true\r\n        }\r\n        return this._tokenConfig\r\n    }\r\n\r\n    /**\r\n     * Get the next token to analyse.\r\n     * @param expr (string) Expression to analyse\r\n     * @param start (number) CUrrent position in the expr string.\r\n     */\r\n    NextToken2(expr: string, start: number): [string, number, string] {\r\n        let token: string, tokenType: string;\r\n        token = '';\r\n        tokenType = '';\r\n        // Case of parenthesis or comma (generic items)\r\n        if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        } else{\r\n            // Order token keys by token characters length (descending)\r\n            const keys = Object.keys(this._tokenConfig).sort((a,b)=>b.length-a.length)\r\n\r\n            for(let key of keys){\r\n                if(expr.substr(start, key.length) === key){\r\n                    token += key;\r\n                    tokenType = 'operation'\r\n                    break\r\n                }\r\n            }\r\n\r\n            if(token===''){\r\n                // No function found ! Might be a coefficient !\r\n                if( expr[start].match(/[0-9]/) ) {\r\n                    token = expr.substr(start).match(/^([0-9.,/]+)/)[0]\r\n                    tokenType = 'coefficient'\r\n                }else if (expr[start].match(/[a-zA-Z]/)) {\r\n                    token = expr.substr(start).match(/^([a-zA-Z])/)[0]\r\n                    tokenType = 'variable'\r\n                }else{\r\n                    console.log('Unidentified token', expr[start], expr, start)\r\n                    token = expr[start]\r\n                    tokenType = 'monom'\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n\r\n        // console.log(token, tokenType)\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    NextToken(expr: string, start: number): [string, number, string] {\r\n        let tokenMatch: string[], token: string, tokenType: string;\r\n\r\n        this.NextToken2(expr, start)\r\n        // Detect a fraction monoms or return empty array\r\n        tokenMatch = (expr.substr(start).match(/^[0-9/a-zA-Z^]+/g)) || [];\r\n\r\n        if (expr.substr(start, start + 3).match(/^(sin|cos|tan)/g)) {\r\n            token = expr.substr(start, 3)\r\n            tokenType = 'function'\r\n        } else if (tokenMatch.length > 0) {\r\n            token = tokenMatch[0];\r\n            tokenType = 'monom';\r\n        }\r\n        // It's an operation !\r\n        else if (expr[start].match(/[+\\-*/^]/g)) {\r\n            token = expr[start];\r\n            tokenType = 'operation';\r\n        } else if (expr[start].match(/[&|!]/g)) {\r\n            token = expr[start];\r\n            tokenType = 'operation';\r\n        }\r\n        // It's an opening parenthese\r\n        else if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        }\r\n        // It's a monom.\r\n        else {\r\n            // TODO: Actually, negative exposant aren't supported.\r\n            // token = (expr.substr(start).match(/^[\\da-z\\^]+/g)[0])||'';\r\n            token = tokenMatch[0];\r\n            tokenType = 'monom';\r\n\r\n            if (token === '') {\r\n                token = expr[start];\r\n                tokenType = 'monom';\r\n                console.log('SHUTING YARD - NEXT TOKEN: error at ', start);\r\n            }\r\n        }\r\n\r\n        // console.log(token, start + token.length, tokenType);\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    /**\r\n     * Sanitize an expression by adding missing common operation (multiplication between parentheseses)\r\n     * @param expr\r\n     * @constructor\r\n     */\r\n    Uniformizer(expr: string): string {\r\n        // Determiner if need to be uniformized\r\n        if(!this._uniformize){return expr}\r\n\r\n        let expr2;\r\n        // Replace missing multiplication between two parenthese\r\n        expr2 = expr.replace(/\\)\\(/g, ')*(');\r\n\r\n        // Replace missing multiplication between number or setLetter and parenthese.\r\n\r\n        // 3x(x-4) => 3x*(x-4)\r\n        expr2 = expr2.replace(/([\\da-zA-Z])(\\()/g, \"$1*$2\");\r\n\r\n        // (x-4)3x => (x-4)*3x\r\n        expr2 = expr2.replace(/(\\))([\\da-zA-Z])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between number and letters.\r\n        // 3x => 3*x\r\n        expr2 = expr2.replace(/([0-9])([a-zA-Z])/g, \"$1*$2\");\r\n        expr2 = expr2.replace(/([a-zA-Z])([0-9])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between letters ?\r\n        // TODO: More robust solution to handle all letters ?\r\n        expr2 = expr2.replace(/([abcxyz])([abcxyz])/g, \"$1*$2\");\r\n\r\n        // Restore operation auto formating (prevent adding the mutliplcation star)\r\n        // TODO: Accept list of functions\r\n        let fnToken = ['sin', 'cos', 'tan']\r\n        for (let token of fnToken) {\r\n            expr2 = expr2.replace(new RegExp(token + '\\\\*', 'g'), token);\r\n        }\r\n\r\n        return expr2;\r\n    }\r\n\r\n    /**\r\n     * Parse an expression using the shutting yard tree algorithms\r\n     * @param expr (string) Expression to analyse\r\n     * Returns a RPN list of items.\r\n     * @param operators\r\n     */\r\n    parse(expr: string, operators?: string[]): Shutingyard {\r\n        let outQueue: {token:string, tokenType: string}[] = [],    // Output queue\r\n            opStack: {token:string, tokenType: string}[] = [],     // Operation queue\r\n            token: string = '',\r\n            tokenPos: number = 0,\r\n            tokenType: string = '',\r\n            previousOpStatckLength = 0\r\n\r\n        expr = this.Uniformizer(expr);\r\n\r\n        let securityLoopLvl1 = 50,\r\n            securityLoopLvl2_default = 50,\r\n            securityLoopLvl2;\r\n\r\n        while (tokenPos < expr.length) {\r\n            securityLoopLvl1--;\r\n            if (securityLoopLvl1 === 0) {\r\n                console.log('SECURITY LEVEL 1 EXIT');\r\n                break;\r\n            }\r\n\r\n            // Get the next token and the corresponding new (ending) position\r\n            [token, tokenPos, tokenType] = this.NextToken2(expr, tokenPos);\r\n\r\n            switch (tokenType) {\r\n                case 'monom':\r\n                case 'coefficient':\r\n                case 'variable':\r\n                    outQueue.push({\r\n                        token,\r\n                        tokenType\r\n                    });\r\n                    // if(previousOpStatckLength == opStack.length && outQueue.length>=2){\r\n                    //     console.log('opStatckLength', outQueue, opStack.length)\r\n                    //     outQueue.push('*')\r\n                    // }\r\n                    break;\r\n                case 'operation':\r\n                    previousOpStatckLength = opStack.length;\r\n                    //If the token is an operator, o1, then:\r\n                    if (opStack.length > 0) {\r\n                        let opTop = opStack[opStack.length - 1];\r\n\r\n\r\n                        securityLoopLvl2 = +securityLoopLvl2_default;\r\n\r\n                        //while there is an operator token o2, at the top of the operator stack and\r\n                        while (opTop.token in this._tokenConfig && (\r\n                                //either o1 is left-associative and its precedence is less than or equal to that of o2,\r\n                                (this._tokenConfig[token].associative === 'left' && this._tokenConfig[token].precedence <= this._tokenConfig[opTop.token].precedence)\r\n                                ||\r\n                                //or o1 is right associative, and has precedence less than that of o2,\r\n                                (this._tokenConfig[token].associative === 'right' && this._tokenConfig[token].precedence < this._tokenConfig[opTop.token].precedence)\r\n                            )\r\n                            ) {\r\n\r\n                            /* Security exit ! */\r\n                            securityLoopLvl2--;\r\n                            if (securityLoopLvl2 === 0) {\r\n                                console.log('SECURITY LEVEL 2 OPERATION EXIT');\r\n                                break;\r\n                            }\r\n\r\n                            // Add the operation to the queue\r\n                            outQueue.push((opStack.pop()) || {token: '', tokenType: 'operation'});\r\n\r\n                            // Get the next operation on top of the Stack.\r\n                            if(opStack.length===0){break;}\r\n                            opTop = opStack[opStack.length - 1];\r\n                        }\r\n                    }\r\n                    //at the end of iteration push o1 onto the operator stack\r\n                    opStack.push({token,tokenType});\r\n                    break;\r\n                case 'function-argument':\r\n                    // TODO: check if the opStack exist.\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 0) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 FUNCTION ARGUMENT EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n                    break;\r\n                case '(':\r\n                    opStack.push({token,tokenType});\r\n                    // Add an empty value if next element is negative.\r\n                    if (expr[tokenPos] === '-') {\r\n                        outQueue.push({token: '0', tokenType: 'coefficient'});\r\n                    }\r\n                    break;\r\n                case ')':\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    //Until the token at the top of the stack is a left parenthesis, pop operators off the stack onto the output queue.\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 1 /*Maybe zero !? */) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 CLOSING PARENTHESE EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n\r\n                    //Pop the left parenthesis from the stack, but not onto the output queue.\r\n                    opStack.pop();\r\n                    break;\r\n                case 'function':\r\n                    opStack.push({token, tokenType});\r\n                    break;\r\n                default:\r\n                    // In theory, everything should be handled.\r\n                    console.log(`SHUTING YARD: ${tokenType} : ${token} `);\r\n            }\r\n\r\n            // Output\r\n            // console.log(outQueue.concat(opStack.reverse()).join(\" \"));\r\n        }\r\n\r\n        // console.log(outQueue.concat(opStack.reverse()));\r\n        this._rpn = outQueue.concat(opStack.reverse());\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    // Getter\r\n    get rpn() {\r\n        // console.log(this._rpn)\r\n        return this._rpn;\r\n    }\r\n\r\n\r\n}\r\n","import Numeric from \"../numeric\";\r\n\r\nexport default class Fraction {\r\n    private _numerator: number;\r\n    private _denominator: number;\r\n\r\n    constructor(value?: any, denominatorOrPeriodic?: number) {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n\r\n        if (value !== undefined) {\r\n            this.parse(value, denominatorOrPeriodic);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isFraction() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n\r\n    get numerator(): number {\r\n        return this._numerator;\r\n    }\r\n\r\n    set numerator(value: number) {\r\n        this._numerator = value;\r\n    }\r\n\r\n    get denominator(): number {\r\n        return this._denominator;\r\n    }\r\n\r\n    set denominator(value: number) {\r\n        this._denominator = value;\r\n    }\r\n\r\n    get value(): number {\r\n        return this._numerator / this._denominator;\r\n    }\r\n\r\n    // Display getter\r\n    get tex(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else if (this._numerator < 0) {\r\n            return `-\\\\frac{ ${-this._numerator} }{ ${this._denominator} }`;\r\n        } else {\r\n            return `\\\\frac{ ${this._numerator} }{ ${this._denominator} }`;\r\n        }\r\n    }\r\n\r\n    get display(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else {\r\n            return `${this._numerator}/${this._denominator}`;\r\n        }\r\n    }\r\n\r\n    // Helper function to display fractions\r\n    get frac(): string {\r\n        return this.tex;\r\n    }\r\n\r\n    get dfrac(): string {\r\n        return this.tex.replace('\\\\frac', '\\\\dfrac');\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse the value to get the numerator and denominator\r\n     * @param value : number or string to parse to get the fraction\r\n     * @param denominatorOrPeriodic (optional|number) : length of the periodic part: 2.333333 => 1 or denominator value\r\n     */\r\n    parse = (value: any, denominatorOrPeriodic?: number): Fraction => {\r\n        let S: string[];\r\n\r\n        // A null value means a zero fraction.\r\n        if (value === null || value === \"\") {\r\n            this._numerator = 0;\r\n            this._denominator = 1;\r\n            return this;\r\n        }\r\n\r\n        switch (typeof value) {\r\n            case \"string\":\r\n                // Split the sting value in two parts: Numerator/Denominator\r\n                S = value.split('/');\r\n\r\n                // Security checks\r\n                    if (S.length > 2) throw \"Two many divide signs\";\r\n                    if (S.map(x => x === '' || isNaN(Number(x))).includes(true)) throw \"Not a number\"\r\n\r\n\r\n                if (S.length === 1) {\r\n                    // No divide sign\r\n                    return this.parse(+S[0]);\r\n                } else if (S.length === 2) {\r\n                    // One divide signe\r\n                    // We check if the denominator is zero\r\n                    if (S[1] === '0') {\r\n                        this._numerator = NaN;\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._numerator = +S[0];\r\n                        this._denominator = +S[1];\r\n                    }\r\n                } else {\r\n                    // More than one divide sign ?\r\n                    this._numerator = NaN;\r\n                    this._denominator = 1;\r\n                }\r\n                break;\r\n            case \"number\":\r\n                if (Number.isSafeInteger(value)) {\r\n                    // The given value is an integer\r\n                    this._numerator = +value;\r\n\r\n                    if (denominatorOrPeriodic === undefined || !Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._denominator = +denominatorOrPeriodic;\r\n                    }\r\n                } else {\r\n                    // The given value is a float number\r\n\r\n                    // Get the number of decimals after the float sign\r\n                    let p: number = (value.toString()).split('.')[1].length;\r\n\r\n                    // Transform the float number in two integer\r\n                    if (denominatorOrPeriodic === undefined) {\r\n                        this._numerator = value * Math.pow(10, p);\r\n                        this._denominator = Math.pow(10, p);\r\n                    } else if (Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._numerator = value * Math.pow(10, p) - Math.floor(value * Math.pow(10, p - denominatorOrPeriodic));\r\n                        this.denominator = Math.pow(10, p) - Math.pow(10, p - denominatorOrPeriodic)\r\n                    }\r\n                }\r\n                break;\r\n            case \"object\":\r\n                if (value.isFraction) {\r\n                    this._numerator = +value.numerator;\r\n                    this._denominator = +value.denominator;\r\n                }\r\n                break;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): Fraction => {\r\n        let F = new Fraction();\r\n        F.numerator = +this._numerator;\r\n        F.denominator = +this._denominator;\r\n        return F;\r\n    };\r\n\r\n    zero = (): Fraction => {\r\n        this._numerator = 0;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    one = (): Fraction => {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    infinite = (): Fraction => {\r\n        this._numerator = Infinity;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    invalid = (): Fraction => {\r\n        this._numerator = NaN;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Fraction => {\r\n        this._numerator = -this._numerator;\r\n        return this;\r\n    };\r\n\r\n    add = (F: Fraction): Fraction => {\r\n        let N: number = this._numerator,\r\n            D: number = this._denominator;\r\n\r\n        this._numerator = N * F.denominator + F.numerator * D;\r\n        this._denominator = D * F.denominator;\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (F: Fraction): Fraction => {\r\n        return this.add(F.clone().opposed());\r\n    };\r\n\r\n    multiply = (F: Fraction | number): Fraction => {\r\n        // Parse the value.\r\n        // If it's a fraction, return a clone of it\r\n        // If it's an integer, return the fraction F/1\r\n        let Q = new Fraction(F);\r\n\r\n        this._numerator = this._numerator * Q.numerator;\r\n        this._denominator = this._denominator * Q.denominator;\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    divide = (F: Fraction | number): Fraction => {\r\n        let Q = new Fraction(F);\r\n\r\n        if (Q.numerator === 0) {\r\n            return new Fraction().infinite();\r\n        }\r\n\r\n        let N: number = +this._numerator,\r\n            D: number = +this._denominator;\r\n\r\n        this._numerator = N * Q.denominator;\r\n        this._denominator = D * Q.numerator;\r\n        return this.reduce();\r\n    };\r\n\r\n    invert = (): Fraction => {\r\n        let n = +this._numerator, d = +this._denominator;\r\n        this._numerator = d;\r\n        this._denominator = n;\r\n\r\n        return this;\r\n    }\r\n    pow = (p: number): Fraction => {\r\n        if (!Number.isSafeInteger(p)) {\r\n            return this.invalid();\r\n        }\r\n        this.reduce();\r\n\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        this._numerator = this._numerator ** Math.abs(p);\r\n        this._denominator = this._denominator ** Math.abs(p);\r\n        return this;\r\n    };\r\n\r\n    root = (p: number): Fraction => {\r\n        // TODO: nth - root of a fraction => this will return another type of coefficient.\r\n\r\n        // Check if they are perfect roots..\r\n        if (p === 0) {\r\n            return this;\r\n        }\r\n\r\n        // If negative, invert the fraction\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        let n = Math.pow(this._numerator, Math.abs(1 / p)),\r\n            d = Math.pow(this._denominator, Math.abs(1 / p));\r\n\r\n        this._numerator = Math.pow(this._numerator, Math.abs(1 / p));\r\n        this._denominator = Math.pow(this._denominator, Math.abs(1 / p));\r\n        return this;\r\n    }\r\n\r\n    sqrt = (): Fraction => {\r\n        return this.root(2);\r\n    }\r\n\r\n    abs = (): Fraction => {\r\n        this._numerator = Math.abs(this._numerator);\r\n        this._denominator = Math.abs(this._denominator);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations specific to fractions\r\n    // ------------------------------------------\r\n    reduce = (): Fraction => {\r\n        let g = Numeric.gcd(this._numerator, this._denominator);\r\n        this._numerator = this._numerator / g;\r\n        this._denominator = this._denominator / g;\r\n\r\n        if (this._denominator < 0) {\r\n            this._denominator = -this._denominator;\r\n            this._numerator = -this._numerator;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    amplify = (k: number): Fraction => {\r\n        if (Number.isSafeInteger(k)) {\r\n            this._numerator *= k;\r\n            this._denominator *= k;\r\n        }\r\n        return this;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param F (Coefficient) The coefficient to compare\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (F: Fraction, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n\r\n        switch (sign) {\r\n            case '>':\r\n                return this.value > F.value;\r\n            case \">=\" || \"=>\" || \"geq\":\r\n                return this.value >= F.value;\r\n            case \"<\":\r\n                return this.value < F.value;\r\n            case \"<=\" || \"=>\" || \"leq\":\r\n                return this.value <= F.value;\r\n            case \"=\":\r\n                // let F2: Fraction = F.clone().reduce(),\r\n                //     F1: Fraction = this.clone().reduce();\r\n                // return (F1.numerator === F2.numerator && F1.denominator === F2.denominator);\r\n                return this.value === F.value;\r\n            case \"<>\":\r\n                return this.value !== F.value;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n    /* Compare shortcuts */\r\n    lesser = (than: Fraction): Boolean => {\r\n        return this.compare(than, '<');\r\n    };\r\n    leq = (than: Fraction): Boolean => {\r\n        return this.compare(than, '<=');\r\n    };\r\n    greater = (than: Fraction): Boolean => {\r\n        return this.compare(than, '>');\r\n    };\r\n    geq = (than: Fraction): Boolean => {\r\n        return this.compare(than, '>=');\r\n    };\r\n    isEqual = (than: Fraction): boolean => {\r\n        return this.compare(than, '=');\r\n    }\r\n    isDifferent = (than: Fraction): boolean => {\r\n        return this.compare(than, '<>');\r\n    }\r\n    isOpposed = (p: Fraction): boolean => {\r\n        return this.isEqual(p.clone().opposed());\r\n    }\r\n    isInverted = (p: Fraction): boolean => {\r\n        return this.isEqual(new Fraction().one().divide(p.clone()));\r\n    }\r\n    isZero = (): boolean => {\r\n        return this._numerator === 0;\r\n    }\r\n    isOne = (): boolean => {\r\n        return this._numerator === 1 && this._denominator === 1;\r\n    }\r\n    isPositive = (): boolean => {\r\n        return this.sign()===1;\r\n    }\r\n    isNegative = (): boolean => {\r\n        return this.sign()===-1;\r\n    }\r\n    isNaN = (): boolean => {\r\n        return isNaN(this._numerator);\r\n    }\r\n    isInfinity = (): boolean => {\r\n        return this._numerator === Infinity;\r\n    }\r\n    isFinite = (): boolean => {\r\n        return !this.isInfinity();\r\n    }\r\n    isSquare = (): boolean => {\r\n        return Math.sqrt(this._numerator) % 1 === 0 && Math.sqrt(this._denominator) % 1 === 0\r\n    }\r\n    isReduced = (): boolean => {\r\n        return Math.abs(Numeric.gcd(this._numerator, this._denominator))===1\r\n    }\r\n    sign = (): number => {\r\n        return (this._numerator * this._denominator >= 0) ? 1 : -1;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Simple function to determine if it's a fraction\r\n     */\r\n    areEquals = (...F: Fraction[]): boolean => {\r\n        for (let i = 0; i < F.length; i++) {\r\n            if (!this.isEqual(F[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n}","export default class Nthroot {\r\n    private _radical: number;\r\n    private _nth: number;\r\n    private _coefficient: number;\r\n    private _isValid:boolean;\r\n\r\n    constructor() {\r\n        this._radical = 1;\r\n        this._coefficient = 1;\r\n        this._nth = 2;\r\n        this._isValid = true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get radical(): number {\r\n        return this._radical;\r\n    }\r\n\r\n    set radical(value: number) {\r\n        this._radical = value;\r\n    }\r\n\r\n    get nth(): number {\r\n        return this._nth;\r\n    }\r\n\r\n    set nth(value: number) {\r\n        if (Number.isSafeInteger(value) && value >= 2) {\r\n            this._nth = value;\r\n        } else {\r\n            // Error setting the nth root.\r\n            console.log('Error setting the nth root');\r\n            this._nth = 2;\r\n        }\r\n    }\r\n\r\n    get coefficient(): number {\r\n        return this._coefficient;\r\n    }\r\n\r\n    set coefficient(value: number) {\r\n        this._coefficient = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let C: string;\r\n\r\n        if (this._coefficient === 1) {\r\n            C = '';\r\n        } else if (this._coefficient === -1) {\r\n            C = '-';\r\n        } else {\r\n            C = this._coefficient.toString();\r\n        }\r\n\r\n        if (this._radical === 1) {\r\n            return `${this._coefficient}`;\r\n        } else {\r\n            if (this._nth === 2) {\r\n                return `${C}\\\\sqrt{${this._radical}}`\r\n            } else {\r\n                return `${C}\\\\sqrt[${this._nth}]{${this._radical}}`\r\n            }\r\n        }\r\n    }\r\n\r\n    get value(): number {\r\n        return this._coefficient * Math.pow(this._radical, 1 / this._nth);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (radical: number, nthroot?: number, coefficient?: number): Nthroot => {\r\n        this._coefficient = (coefficient === undefined) ? 1 : coefficient;\r\n        this._nth = (nthroot === undefined) ? 2 : nthroot;\r\n        this._radical = (radical === undefined) ? 1 : radical;\r\n\r\n        if(this._nth%2===0 && this._radical<0){\r\n            this._isValid = false;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    reduce = (): Nthroot => {\r\n        // Max value to test.\r\n        let V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n        while (V > 1) {\r\n            if (this._radical % Math.pow(V, this._nth) === 0) {\r\n                // It's dividable by V^n\r\n                this._coefficient *= V;\r\n                this._radical = this._radical / Math.pow(V, this._nth);\r\n\r\n                // Redifine the new testing value (this is optimization)\r\n                V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n                continue;\r\n            }\r\n            V--;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiply = (N: Nthroot): Nthroot => {\r\n        this._radical *= N.radical;\r\n        return this.reduce();\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Help functions\r\n    // ------------------------------------------\r\n    hasRadical = ():boolean => {\r\n        return !(this._radical===1 || this._radical===0 || this._isValid===false)\r\n    };\r\n}","/***\r\n * Monom class\r\n * Defined as coefficient * literal\r\n * Examples: 3x^2, 3/5x^2, ...\r\n */\r\nimport Fraction from \"../coefficients/fraction\";\r\nimport Numeric from \"../numeric\";\r\n\r\nexport default class Monom {\r\n    private _coefficient: Fraction;\r\n    private _literal: { [Key: string]: number };\r\n\r\n    /**\r\n     * Create the monom object.\r\n     * @param value (optional) string\r\n     */\r\n    constructor(value?: string) {\r\n        this.zero();\r\n\r\n        if (value !== undefined) {\r\n            // A string is given - try to parse the value.\r\n            this.parse(value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get isMonom() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Get the coefficient as fraction\r\n     */\r\n    get coefficient(): Fraction {\r\n        return this._coefficient;\r\n    }\r\n\r\n    /**\r\n     * Set the coefficient value of the monom\r\n     * @param F     Fraction\r\n     */\r\n    set coefficient(F: Fraction) {\r\n        this._coefficient = F;\r\n    }\r\n\r\n    /**\r\n     * Get the literal part, as dictionary\r\n     */\r\n    get literal(): { [Key: string]: number } {\r\n        return this._literal;\r\n    }\r\n\r\n    get literalSqrt(): { [Key: string]: number } {\r\n\r\n        if (this.isLitteralSquare()) {\r\n            let L: { [Key: string]: number } = {}\r\n            for (let key in this._literal) {\r\n                L[key] = this._literal[key] / 2\r\n            }\r\n            return L;\r\n        } else {\r\n            return this._literal;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom\r\n     * @param L     Literal part as dictionary: <setLetter: exposant>\r\n     */\r\n    set literal(L: { [Key: string]: number }) {\r\n        this._literal = L;\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom from a string\r\n     * @param inputStr  String like x^2y^3\r\n     */\r\n    set literalStr(inputStr: string) {\r\n        // Match all x^n\r\n        for (const v of [...inputStr.matchAll(/([a-z])\\^([+-]?[0-9]+)/g)]) {\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = 0;\r\n            }\r\n            this._literal[v[1]] += +v[2];\r\n        }\r\n        for (const v of [...inputStr.matchAll(/([a-z](?!\\^))/g)]) {\r\n            // Match all single letters\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = 0;\r\n            }\r\n            this._literal[v[1]] += 1;\r\n        }\r\n    }\r\n\r\n    // Getter heplers.\r\n    /**\r\n     * Get the variables letters\r\n     */\r\n    get variables(): string[] {\r\n        this.clone().clean();\r\n        return Object.keys(this._literal)\r\n    }\r\n\r\n    // Display getter\r\n    /**\r\n     * This display getter is to be used in the polynom display getter\r\n     */\r\n    get display(): string {\r\n        let L: string = '';\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter] !== 0) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter] > 1) {\r\n                    L += `^${this._literal[letter]}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.display}`;\r\n            } else {\r\n                return '';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.display}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    get dividers(): Monom[] {\r\n        // Decompose only if the coefficient it a complet value\r\n        if (this.coefficient.denominator !== 1) {\r\n            return [this.clone()]\r\n        }\r\n\r\n        // Security : do not do this if greater than 10000\r\n        if (this.coefficient.numerator > 10000) {\r\n            return [this.clone()]\r\n        }\r\n        const dividers = Numeric.dividers(Math.abs(this.coefficient.numerator))\r\n\r\n        // Decompose the litterals parts.\r\n        let litterals: { [key: string]: number }[] = [];\r\n        for (let L in this.literal) {\r\n            // L is the letter.\r\n            litterals = this._getLitteralDividers(litterals, L)\r\n        }\r\n\r\n        const monomDividers: Monom[] = [];\r\n        if (litterals.length > 0 && dividers.length>0) {\r\n            for (let N of dividers) {\r\n                for (let L of litterals) {\r\n                    let M = new Monom();\r\n                    M.coefficient = new Fraction(N)\r\n                    M.literal = L\r\n                    monomDividers.push(M)\r\n                }\r\n            }\r\n        }else if (dividers.length===0) {\r\n            for (let L of litterals) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction().one()\r\n                M.literal = L\r\n                monomDividers.push(M)\r\n            }\r\n        } else {\r\n            for (let N of dividers) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction(N)\r\n                monomDividers.push(M)\r\n            }\r\n        }\r\n\r\n        return monomDividers.length===0? [new Monom().one()]: monomDividers;\r\n    }\r\n\r\n    private _getLitteralDividers(arr: { [key: string]: number }[], letter: string): { [key: string]: number }[] {\r\n        let tmpList: { [key: string]: number }[] = [];\r\n\r\n        for (let d = 0; d <= this.literal[letter]; d++) {\r\n            if (arr.length === 0) {\r\n                let litt: { [key: string]: number } = {}\r\n                litt[letter] = d\r\n                tmpList.push(litt)\r\n            } else {\r\n                for (let item of arr) {\r\n                    let litt: { [key: string]: number } = {}\r\n                    for(let currentLetter in item){\r\n                        litt[currentLetter] = item[currentLetter]\r\n                    }\r\n                    litt[letter] = d\r\n                    tmpList.push(litt)\r\n                }\r\n            }\r\n        }\r\n        return tmpList;\r\n    }\r\n\r\n    /**\r\n     * Display the monom, forcing the '+' sign to appear\r\n     */\r\n    get displayWithSign(): string {\r\n        // TODO: Rename or remove this getter ?\r\n        let d: String = this.display;\r\n        return (d[0] !== '-' ? '+' : '') + d;\r\n    }\r\n\r\n    /**\r\n     * Get the tex output of the monom\r\n     */\r\n    get tex(): string {\r\n        let L: string = '';\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter] !== 0) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter] > 1) {\r\n                    L += `^${this._literal[letter]}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.dfrac}`;\r\n            } else {\r\n                return '0';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.dfrac}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // -----------------------------------------\r\n    /**\r\n     * Parse a string to a monom. The string may include fraction.\r\n     * @param inputStr\r\n     */\r\n    parse = (inputStr: string): Monom => {\r\n        // Set the literal part.\r\n        this.literalStr = inputStr;\r\n\r\n        // Get the coefficient\r\n        this._coefficient = new Fraction();\r\n\r\n        for (const v of [...inputStr.replace(/([a-z])|(\\^[+-]?[0-9]+)/g, ',').split(',')]) {\r\n            // The value is empty.\r\n            if (v.trim() === '') {\r\n                continue;\r\n            }\r\n\r\n            // Multiple the current coefficient by the new found value.\r\n            this._coefficient.multiply(new Fraction(v.trim()));\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Clone the current Monom.\r\n     */\r\n    clone = (): Monom => {\r\n        let F: Monom = new Monom();\r\n\r\n        F.coefficient = this._coefficient.clone();\r\n\r\n        // Copy the literal parts.\r\n        for (let k in this._literal) {\r\n            F.setLetter(k, this._literal[k]);\r\n        }\r\n        return F;\r\n    };\r\n\r\n    /**\r\n     * Create a zero value monom\r\n     */\r\n    zero = (): Monom => {\r\n        this._coefficient = new Fraction().zero();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Create a one value monom\r\n     */\r\n    one = (): Monom => {\r\n        this._coefficient = new Fraction().one();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Clean the monom by removing each letters with a power of zero.\r\n     */\r\n    clean = (): Monom => {\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter] === 0) {\r\n                delete this._literal[letter];\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Get the opposed\r\n     * Returns a monom.\r\n     */\r\n    opposed = (): Monom => {\r\n        this._coefficient.opposed();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Add all similar monoms. If they aren't similar, they are simply skipped.\r\n     * @param M (Monom[]) The monoms to add.\r\n     */\r\n    add = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                this._coefficient.add(m.coefficient);\r\n            } else {\r\n                console.log('Add: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Subtract multiple monoms\r\n     * @param M (Monom[]) The monoms to subtract\r\n     */\r\n    subtract = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                this._coefficient.add(m.coefficient.clone().opposed());\r\n            } else {\r\n                console.log('Subtract: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiple multiple monoms to the current monom\r\n     * @param M (Monom[]) The monoms to multiply to.\r\n     */\r\n    multiply = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            // Multiply the coefficient.\r\n            this._coefficient.multiply(m.coefficient);\r\n            // Multiply the literal parts.\r\n            for (let letter in m.literal) {\r\n                this._literal[letter] = (this._literal[letter] === undefined) ? m.literal[letter] : this._literal[letter] + m.literal[letter];\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiplyByNumber = (F: Fraction | number): Monom => {\r\n        this._coefficient.multiply(F);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divide the current monoms by multiple monoms\r\n     * @param M (Monom[])\r\n     */\r\n    divide = (...M: Monom[]): Monom => {\r\n        // Depending on the given value, choose the current item\r\n        for (let v of M) {\r\n            // Divide the coefficient\r\n            this._coefficient.divide(v.coefficient);\r\n\r\n            // Subtract the power values\r\n            for (let letter in v.literal) {\r\n                this._literal[letter] = (this._literal[letter] === undefined) ? -v.literal[letter] : this._literal[letter] - v.literal[letter];\r\n\r\n                // If the power of a particular setLetter is zero, delete it from the literal part..\r\n                if (this._literal[letter] === 0) {\r\n                    delete this._literal[letter];\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the pow of a monom.\r\n     * @param nb (number) : Mathematical pow\r\n     */\r\n    pow = (nb: number): Monom => {\r\n        this._coefficient.pow(nb);\r\n        for (let letter in this._literal) {\r\n            this._literal[letter] *= nb;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the nth-root of the monom\r\n     * @param p\r\n     */\r\n    root = (p: number): Monom => {\r\n        // TODO: determiner the nth root of a monom\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Return the square root of a monom\r\n     */\r\n    sqrt = (): Monom => {\r\n        if (this.isSquare()) {\r\n            this._coefficient.sqrt();\r\n            for (let letter in this._literal) {\r\n                this._literal[letter] /= 2;\r\n            }\r\n        }\r\n        return this.root(2);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    compare = (M: Monom, sign?: string): boolean => {\r\n        // TODO: Build the compare systems.\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // To be equal, they must be the isSame\r\n                if (!this.compare(M, 'same')) {\r\n                    return false;\r\n                }\r\n\r\n                // The litteral parts are the isSame. The coefficient must be equal\r\n                return this._coefficient.isEqual(M.coefficient);\r\n            case 'same':\r\n                // Get the list of all variables from both monoms.\r\n                let M1: string[] = this.variables,\r\n                    M2: string[] = M.variables,\r\n                    K: string[] = M1.concat(M2.filter((item) => M1.indexOf(item) < 0));\r\n\r\n                for (let key of K) {\r\n                    // The setLetter is not available in one of the monom\r\n                    if (this._literal[key] === undefined || M.literal[key] === undefined) {\r\n                        return false;\r\n                    }\r\n                    // The setLetter does not have the isSame power in each monoms.\r\n                    if (this._literal[key] !== M.literal[key]) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                // All are positive check - the monoms are the sames.\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is null\r\n     */\r\n    isZero(): boolean {\r\n        return this._coefficient.value === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is one\r\n     */\r\n    isOne(): boolean {\r\n        return this._coefficient.value === 1 && this.variables.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if two monoms are equals\r\n     * @param M\r\n     */\r\n    isEqual = (M: Monom): boolean => {\r\n        return this.compare(M, '=');\r\n    };\r\n\r\n    /**\r\n     * Determine if two monoms are similar\r\n     * @param M\r\n     */\r\n    isSameAs = (M: Monom): boolean => {\r\n        return this.compare(M, 'same');\r\n    };\r\n\r\n    isSquare = (): boolean => {\r\n        if (!this.coefficient.isSquare()) {\r\n            return false;\r\n        }\r\n        return this.isLitteralSquare();\r\n    }\r\n\r\n    isLitteralSquare = (): boolean => {\r\n        for (let letter in this.literal) {\r\n            if (this.literal[letter] % 2 !== 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    // ------------------------------------------\r\n    // Misc monoms functions\r\n    // -------------------------------------\r\n    /**\r\n     * Determine if a monom contains a setLetter in it's literal part\r\n     * @param letter\r\n     */\r\n    hasLetter = (letter?: string): boolean => {\r\n        return this._literal[letter === undefined ? 'x' : letter] > 0;\r\n    };\r\n\r\n    /**\r\n     * Set the power of a particular setLetter\r\n     * @param letter (string) Letter to change\r\n     * @param pow (number) Power of the setLetter (must be positive integer.\r\n     */\r\n    setLetter = (letter: string, pow: number): void => {\r\n        // If the power is not legal or is zero, remove the setLetter from the dict\r\n        if (pow <= 0 || !Number.isSafeInteger(pow)) {\r\n            if (this._literal[letter] !== undefined) {\r\n                delete this._literal[letter];\r\n            }\r\n        } else {\r\n            this._literal[letter] = pow;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the degree of a monom. If no setLetter is given, the result will be the global degree.\r\n     * @param letter (string) Letter to get to degree (power)\r\n     */\r\n    degree = (letter?: string): number => {\r\n        if (this.variables.length === 0) {\r\n            return 0;\r\n        }\r\n        if (letter === undefined) {\r\n            // Not setLetter given -> we get the global monom degree (sum of all the letters).\r\n            return Object.values(this._literal).reduce((t, n) => t + n);\r\n        } else {\r\n            // A setLetter is given -> get the corresponding power.\r\n            return this._literal[letter] === undefined ? 0 : this._literal[letter];\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Evaluate a monom. Each setLetter must be assigned to a Fraction.\r\n     * @param values    Dictionary of <setLetter: Fraction>\r\n     */\r\n    evaluate = (values: { [key: string]: Fraction|number }|Fraction|number): Fraction => {\r\n        let r = this.coefficient.clone();\r\n\r\n        if(typeof values === 'number' || values instanceof Fraction){\r\n            let tmpValues:{ [key: string]: Fraction|number } = {}\r\n\r\n            tmpValues[this.variables[0]] = new Fraction(values)\r\n            return this.evaluate(tmpValues);\r\n        }\r\n\r\n        if(typeof values === 'object') {\r\n            for (let L in this._literal) {\r\n                if (values[L] === undefined) {\r\n                    return new Fraction().zero();\r\n                }\r\n                let value = new Fraction(values[L])\r\n                r.multiply(value.pow(this._literal[L]));\r\n            }\r\n        }\r\n        return r;\r\n    };\r\n\r\n    /**\r\n     * Derivative the monom\r\n     * @param letter\r\n     */\r\n    derivative = (letter?: string): Monom => {\r\n        // No setLetter given - assume it's the setLetter 'x'\r\n        if (letter === undefined) {\r\n            letter = 'x';\r\n        }\r\n        if (this.hasLetter(letter)) {\r\n            let d = +this._literal[letter],\r\n                dM = this.clone();\r\n\r\n            // Subtract one to the degree.\r\n            dM._literal[letter] -= 1;\r\n\r\n            // Multiply the coefficient by the previous degree\r\n            dM._coefficient.multiply(new Fraction('' + d));\r\n            return dM;\r\n        } else {\r\n            return new Monom().zero();\r\n        }\r\n    };\r\n\r\n    primitive = (letter?: string): Monom => {\r\n        if(letter===undefined){letter = 'x'}\r\n\r\n        // Zero monom\r\n        let M = this.clone()\r\n\r\n        if(M.hasLetter(letter)){\r\n            M.coefficient = M.coefficient.clone().divide(M.degree(letter)+1)\r\n            M.setLetter(letter, M.degree(letter)+1)\r\n        }else{\r\n            // There is no letter.\r\n\r\n            // The coefficient might be zero (=> x) or a number a (=> ax)\r\n            if(M.coefficient.isZero()){\r\n                M.coefficient = new Fraction().one()\r\n            }\r\n            M.setLetter(letter, 1)\r\n        }\r\n        return M\r\n    }\r\n    // ----------------------------------------\r\n    // Static functions\r\n    // ----------------------------------------\r\n\r\n    /**\r\n     * Get the least common multiple of monoms\r\n     * @param monoms    Array of monoms\r\n     */\r\n    static lcm = (...monoms: Monom[]): Monom => {\r\n        let M = new Monom(),\r\n            coeffN: number[] = monoms.map(value => value.coefficient.numerator),\r\n            coeffD: number[] = monoms.map(value => value.coefficient.denominator),\r\n            n = Numeric.gcd(...coeffN),\r\n            d = Numeric.lcm(...coeffD);\r\n\r\n        // Get the coefficient.\r\n        M.coefficient = new Fraction(n, d).reduce();\r\n\r\n        // Set the literal parts - go through each monoms literal parts and get only the lowest degree of each letters.\r\n        for (let m of monoms) {\r\n            // Remove the inexistant letters from the resulting monom\r\n            for (let letter in M.literal) {\r\n                if (!(letter in m.literal)) {\r\n                    M.literal[letter] = 0;\r\n                }\r\n            }\r\n            for (let letter in m.literal) {\r\n                if (M.literal[letter] === undefined && m.literal[letter] > 0) {\r\n                    M.literal[letter] = m.literal[letter];\r\n                } else {\r\n                    M.literal[letter] = Math.min(m.literal[letter], M.literal[letter]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n    /**\r\n     * Multiply two monoms and return a NEW monom.\r\n     * @param monoms\r\n     */\r\n    static xmultiply = (...monoms: Monom[]): Monom => {\r\n        let M = new Monom().one();\r\n\r\n        for (let m of monoms) {\r\n            M.multiply(m);\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Determine if multiple monoms are similar\r\n     * @param M\r\n     */\r\n    areSameAs = (...M: Monom[]): boolean => {\r\n        let result: boolean = true;\r\n\r\n        // Check all monoms if they are the isSame as the \"this\" one.\r\n        for (let i = 0; i < M.length; i++) {\r\n            if (!this.isSameAs(M[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All check passed -> all the monoms are similar.\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Determine if multiple monoms are equals\r\n     * @param M\r\n     */\r\n    areEquals = (...M: Monom[]): boolean => {\r\n        // They are not similar.\r\n        if (!this.areSameAs(...M)) {\r\n            return false;\r\n        }\r\n\r\n        // Check all coefficient. They must be equals.\r\n        for (let m of M) {\r\n            if (!this._coefficient.isEqual(m.coefficient)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All checks passed.\r\n        return true;\r\n    };\r\n\r\n}","export default class randomCore {\r\n    protected _config: Object\r\n    protected _defaultConfig: Object\r\n    mergeConfig = (config: Object, defaultConfig: Object): Object => {\r\n        if (config !== undefined) {\r\n            return {...defaultConfig, ...config}\r\n        }\r\n        return defaultConfig\r\n    }\r\n\r\n    generate = (): unknown => {\r\n        return undefined\r\n    }\r\n\r\n    config = (config: Object): randomCore => {\r\n        this._config = this.mergeConfig(config, this._defaultConfig)\r\n        return this\r\n    }\r\n}","import randomCore from \"./randomCore\";\r\nimport {randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {Random} from \"./random\";\r\nimport Monom from \"../algebra/monom\";\r\n\r\n/**\r\n * Create a random monom based on a based configuration\r\n */\r\n    export default class rndMonom extends randomCore {\r\n        declare protected _config: randomMonomConfig\r\n        declare protected _defaultConfig: randomPolynomConfig\r\n\r\n        constructor(userConfig?: randomMonomConfig) {\r\n            super();\r\n\r\n            this._defaultConfig = {\r\n                letters: 'x',\r\n                degree: 2,\r\n                fraction: true,\r\n                zero: false\r\n            }\r\n\r\n            this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n        }\r\n\r\n        generate = (): Monom => {\r\n            // Create a monom instance\r\n            let M = new Monom()\r\n\r\n            // Generate the coefficient\r\n            M.coefficient.parse(Random.numberSym(10, this._config.zero), (this._config.fraction) ? Random.number(1, 10) : 1).reduce();\r\n\r\n            // Calculate the degree of the monom\r\n            if (this._config.letters.length > 1) {\r\n                // Initialise each items...\r\n                for (let L of this._config.letters.split('')) {\r\n                    M.setLetter(L, 0);\r\n                }\r\n                for (let i = 0; i < this._config.degree; i++) {\r\n                    const L = Random.item(this._config.letters.split(\"\"))\r\n                    M.setLetter(L, M.degree(L) + 1)\r\n                }\r\n            } else {\r\n                M.setLetter(this._config.letters, this._config.degree)\r\n            }\r\n\r\n            return M\r\n        }\r\n    }\r\n","import randomCore from \"./randomCore\";\r\nimport {randomPolynomConfig} from \"./rndTypes\";\r\nimport rndMonom from \"./rndMonom\";\r\nimport {Random} from \"./random\";\r\nimport Polynom from \"../algebra/polynom\";\r\nimport Monom from \"../algebra/monom\";\r\n\r\n/**\r\n * Random polynoms\r\n */\r\nexport default class rndPolynom extends randomCore {\r\n    declare protected _config: randomPolynomConfig\r\n    declare protected _defaultConfig: randomPolynomConfig\r\n\r\n    constructor(userConfig?: randomPolynomConfig) {\r\n        super();\r\n\r\n        // Default config for a random polynom\r\n        this._defaultConfig = {\r\n            letters: 'x',\r\n            degree: 2,\r\n            fraction: false,\r\n            zero: false,\r\n            unit: false,\r\n            factorable: false,\r\n            allowNullMonom: true,\r\n            numberOfMonoms: 0\r\n        }\r\n\r\n        // Merge config with initialiser\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Polynom => {\r\n        // Create the polynom\r\n        let P = new Polynom().empty(),\r\n            M: Monom\r\n\r\n        for (let i = this._config.degree; i >= 0; i--) {\r\n            // Create monom of corresponding degree.\r\n            M = new rndMonom({\r\n                letters: this._config.letters,\r\n                degree: i,\r\n                fraction: this._config.fraction,\r\n                zero: (i === this._config.degree) ? false : this._config.allowNullMonom\r\n            }).generate()\r\n\r\n            // If degree is the greatest and unit is true, set the monom value to one.\r\n            if (this._config.unit && this._config.degree === i) {\r\n                M.coefficient.one()\r\n            }\r\n\r\n            // Add to the polynom\r\n            P.add(M)\r\n        }\r\n\r\n        // If the number of monoms is greater than the allowed value, remove some of them...\r\n        if (this._config.numberOfMonoms > 0 && this._config.numberOfMonoms < P.length) {\r\n            console.log(P.monoms.length)\r\n            P.monoms = Random.array(P.monoms, this._config.numberOfMonoms)\r\n        }\r\n        return P\r\n    }\r\n\r\n    factorable = (): Polynom => {\r\n        let P = new Polynom()\r\n\r\n        return P\r\n    }\r\n}","/**\r\n * Random helpers\r\n */\r\nexport default class rndHelpers {\r\n\r\n    /**\r\n     * Random boolean with a percent ratio\r\n     * @param percent\r\n     */\r\n    static randomBool(percent:number=0.5):boolean{\r\n        return Math.random()<percent;\r\n    }\r\n\r\n    /**\r\n     * Random integer between two values.\r\n     * @param a (number) : From this value to the second value. If the second is ommited, this value is the max value.\r\n     * @param b (number) : To this value. If this is ommited.\r\n     */\r\n    static randomInt(a:number, b?:number):number{\r\n        if(b===undefined){return this.randomInt(0,a);}\r\n\r\n        return Math.floor(Math.random() * (b - a + 1) + a);\r\n    }\r\n\r\n    /**\r\n     * Random integer between -max and max value.\r\n     * @param max (number) : determine the limits.\r\n     * @param zero (bool) : determine if zero is allowed or not.\r\n     */\r\n    static randomIntSym(max:number, zero?:boolean):number{\r\n        if(zero===false){\r\n            return this.randomBool()?this.randomInt(1,max):-this.randomInt(1,max);\r\n        }else{\r\n            return this.randomInt(-max, max);\r\n        }\r\n    }\r\n\r\n    static randomArray(arr: any[], number?:number):any[]{\r\n        if(number===undefined){number = 1}\r\n\r\n        // Return a clone array\r\n        if(arr.length<=0){return Object.values(arr)}\r\n\r\n        // Randomize the array and return the n first elements.\r\n        return rndHelpers.shuffleArray(arr).slice(0,number);\r\n    }\r\n\r\n    static randomItem(arr: any[]): any{\r\n        if(arr.length===0){return ''}\r\n        return this.randomArray(arr, 1)[0]\r\n    }\r\n\r\n    static shuffleArray(arr: any[]): any[] {\r\n        // The Fisher-Yates algorithm\r\n        let shuffleArray = Object.values(arr)\r\n        for (let i = shuffleArray.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            const temp = shuffleArray[i];\r\n            shuffleArray[i] = shuffleArray[j];\r\n            shuffleArray[j] = temp;\r\n        }\r\n\r\n        return shuffleArray;\r\n    }\r\n\r\n}","import rndPolynom from \"./rndPolynom\";\r\nimport rndMonom from \"./rndMonom\";\r\nimport rndHelpers from \"./rndHelpers\";\r\nimport {randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport Monom from \"../algebra/monom\";\r\nimport Polynom from \"../algebra/polynom\";\r\n\r\n// export var Random = {\r\n//     monom: rndMonom,\r\n//     polynom: rndPolynom,\r\n//     number: rndHelpers.randomInt,\r\n//     numberSym: rndHelpers.randomIntSym,\r\n//     bool: rndHelpers.randomBool,\r\n//     array: rndHelpers.randomArray,\r\n//     item: rndHelpers.randomItem,\r\n//     shuffle: rndHelpers.shuffleArray\r\n// }\r\n\r\nexport namespace Random {\r\n    export function polynom(config?: randomPolynomConfig): Polynom {\r\n        return new rndPolynom(config).generate()\r\n    }\r\n\r\n    export function monom(config?: randomMonomConfig): Monom {\r\n        return new rndMonom(config).generate()\r\n    }\r\n\r\n    export function number(from:number, to:number):number { return rndHelpers.randomInt(from,to)}\r\n    export function numberSym(max:number, allowZero?:boolean):number { return rndHelpers.randomIntSym(max, allowZero)}\r\n    export function bool(percent?:number):boolean { return rndHelpers.randomBool(percent)}\r\n    export function array(arr:any[], number?:number):any[] { return rndHelpers.randomArray(arr, number)}\r\n    export function item(arr:any[]):any { return rndHelpers.randomItem(arr)}\r\n    export function shuffle(arr:any[]):any { rndHelpers.shuffleArray(arr)}\r\n\r\n\r\n}","/**\r\n * Polynom module contains everything necessary to handle polynoms.*\r\n * @module Polynom\r\n */\r\n\r\nimport Monom from './monom';\r\nimport Shutingyard from '../shutingyard';\r\nimport Numeric from '../numeric';\r\nimport {Random} from \"../random/random\";\r\nimport Fraction from \"../coefficients/fraction\";\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n * ```\r\n * let P = new Polynom('3x-4')\r\n * ```\r\n */\r\nexport default class Polynom {\r\n    private _rawString: string;\r\n    private _monoms: Monom[];\r\n    private _factors: Polynom[];\r\n    private _texString: string;\r\n\r\n    /**\r\n     *\r\n     * @param {string} polynomString (optional) Default polynom to parse on class creation\r\n     * @param values\r\n     */\r\n    constructor(polynomString?: string, ...values: any[]) {\r\n        this._monoms = [];\r\n        this._factors = [];\r\n        if (polynomString !== undefined) {\r\n            this.parse(polynomString, ...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    get isPolynom() {\r\n        return true;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get monoms() {\r\n        return this._monoms;\r\n    }\r\n\r\n    set monoms(M: Monom[]) {\r\n        this._monoms = M;\r\n    }\r\n\r\n    get factors(): Polynom[] {\r\n        return this._factors;\r\n    }\r\n\r\n    set factors(value: Polynom[]) {\r\n        this._factors = value;\r\n    }\r\n\r\n    get texFactors(): string {\r\n        this.factorize()\r\n\r\n        let tex = ''\r\n        for (let f of this.factors) {\r\n            if (f.monoms.length > 1) {\r\n                tex += `(${f.tex})`\r\n            } else {\r\n                tex = f.tex + tex;\r\n            }\r\n        }\r\n        return tex;\r\n    }\r\n\r\n    get texString(): string {\r\n        return this._texString;\r\n    }\r\n\r\n    get length() {\r\n        // TODO: Must reduce the monoms list to remove the zero coefficient.\r\n        return this._monoms.length;\r\n    }\r\n\r\n    get display(): string {\r\n        return this.genDisplay();\r\n    }\r\n\r\n    get raw(): string {\r\n        return this._rawString\r\n    }\r\n\r\n    get tex(): string {\r\n        return this.genDisplay('tex');\r\n    }\r\n\r\n    get isMultiVariable(): boolean {\r\n        const B = false;\r\n        for (const m of this._monoms) {\r\n            if (m.variables.length > 1) {\r\n                return true;\r\n            }\r\n        }\r\n        return B;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            V = V.concat(m.variables);\r\n        }\r\n\r\n        // Remove duplicates.\r\n        V = [...new Set(V)];\r\n\r\n        return V;\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    private genDisplay = (output?: string, forceSign?: boolean, wrapParentheses?: boolean): string => {\r\n        let P: string = '';\r\n\r\n        for (const k of this._monoms) {\r\n            if (k.coefficient.value === 0) {\r\n                continue;\r\n            }\r\n\r\n            P += `${(k.coefficient.sign() === 1 && (P !== '' || forceSign === true)) ? '+' : ''}${(output === 'tex') ? k.tex : k.display}`;\r\n        }\r\n\r\n        if (wrapParentheses === true && this.length > 1) {\r\n            if (output === 'tex') {\r\n                P = `\\\\left( ${P} \\\\right)`;\r\n            } else {\r\n                P = `(${P})`;\r\n            }\r\n        }\r\n\r\n        if (P === '') {\r\n            P = '0';\r\n        }\r\n        return P;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse a string to a polynom.\r\n     * @param inputStr\r\n     * @param values: as string, numbers or fractions\r\n     */\r\n    parse = (inputStr: string, ...values: any[]): Polynom => {\r\n        if (values === undefined || values.length === 0) {\r\n            inputStr = '' + inputStr;\r\n            this._rawString = inputStr;\r\n\r\n            // Parse the polynom using the shuting yard algorithm\r\n            if (inputStr !== '' && !isNaN(Number(inputStr))) {\r\n                this.empty();\r\n                // It's a simple number.\r\n                let m = new Monom();\r\n                m.coefficient = new Fraction(inputStr);\r\n                m.literalStr = '';\r\n                this.add(m);\r\n                return this;\r\n            }\r\n\r\n            // Parse the string.\r\n            return this.shutingYardToReducedPolynom(inputStr);\r\n        } else if (/^[a-z]/.test(inputStr)) {\r\n            // We assume the inputStr contains only letters.\r\n            this.empty();\r\n\r\n            let fractions = values.map(x => new Fraction(x));\r\n            // Multiple setLetter version\r\n            if (inputStr.length > 1) {\r\n                // TODO: check that the number of values given correspond to the letters (+1 eventually)\r\n                let letters = inputStr.split(''),\r\n                    i = 0;\r\n                for (let F of fractions) {\r\n                    let m = new Monom();\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = letters[i] || '';\r\n                    this.add(m);\r\n                    i++;\r\n                }\r\n            }\r\n            // Single setLetter version\r\n            else {\r\n                let n = fractions.length - 1;\r\n                for (let F of fractions) {\r\n                    let m = new Monom()\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = `${inputStr}^${n}`\r\n                    this.add(m);\r\n                    n--;\r\n                }\r\n            }\r\n            return this;\r\n        } else {\r\n            return this.zero();\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * Main parse using a shutting yard class\r\n     * @param inputStr\r\n     */\r\n    private shutingYardToReducedPolynom = (inputStr: string): Polynom => {\r\n        // Get the RPN array of the current expression\r\n        const SY: Shutingyard = new Shutingyard().parse(inputStr);\r\n        const rpn: { token: string, tokenType: string }[] = SY.rpn;\r\n        let m1: Polynom;\r\n        let m2: Polynom;\r\n\r\n        let stack: Polynom[] = [],\r\n            previousToken: string = null,\r\n            tempPolynom\r\n        for (const element of rpn) {\r\n            if (element.tokenType === 'coefficient' || element.tokenType === 'variable') {\r\n                tempPolynom = new Polynom().zero();\r\n                tempPolynom.monoms = [new Monom(element.token)]\r\n                stack.push(tempPolynom.clone())\r\n            } else if (element.tokenType === 'operation') {\r\n                m2 = (stack.pop()) || new Polynom().zero();\r\n                m1 = (stack.pop()) || new Polynom().zero();\r\n                switch (element.token) {\r\n                    case '+':\r\n                        stack.push(m1.add(m2))\r\n                        break;\r\n                    case '-':\r\n                        stack.push(m1.subtract(m2))\r\n                        break;\r\n                    case '*':\r\n                        stack.push(m1.multiply(m2))\r\n                        break;\r\n                    case '^':\r\n                        stack.push(m1.pow(+previousToken))\r\n                }\r\n            }\r\n            previousToken = element.token;\r\n        }\r\n\r\n        this._monoms = stack[0].monoms;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the polynom\r\n     */\r\n    clone = (): Polynom => {\r\n        const P = new Polynom();\r\n        const M: Monom[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            M.push(m.clone());\r\n        }\r\n\r\n        P.monoms = M;\r\n        return P;\r\n    };\r\n\r\n    /**\r\n     * Set the polynom to zero.\r\n     * @returns {this}\r\n     */\r\n    zero = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().zero());\r\n        this._rawString = '0';\r\n        return this;\r\n    };\r\n\r\n    one = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().one());\r\n        this._rawString = '1';\r\n        return this;\r\n    }\r\n\r\n    empty = (): Polynom => {\r\n        this._monoms = [];\r\n        this._rawString = '';\r\n        return this;\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Polynom generators and randomizers\r\n    // -----------------------------------------------\r\n    private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n        degree: 2,\r\n        unit: true,\r\n        fractions: false,\r\n        factorable: false,\r\n        letters: 'x',\r\n        allowNullMonom: false,\r\n        numberOfMonoms: false\r\n    };\r\n    get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n        return this._randomizeDefaults;\r\n    }\r\n\r\n    set randomizeDefaults(value) {\r\n        this._randomizeDefaults = value;\r\n    }\r\n\r\n    randomize = (config: { [key: string]: number | string | boolean }): Polynom => {\r\n        let P = new Polynom();\r\n\r\n        // Check the config file and use the default values.\r\n        if (config === undefined) {\r\n            config = {};\r\n        }\r\n        for (let k in this._randomizeDefaults) {\r\n            if (config[k] === undefined) {\r\n                config[k] = this._randomizeDefaults[k];\r\n            }\r\n        }\r\n\r\n        // TODO: Build a more robust randomize function\r\n        return P;\r\n    }\r\n\r\n    rndFactorable = (degree: number = 2, unit: boolean | number = false, letters: string = 'x'): Polynom => {\r\n        // TODO: Make rndFactorable polynom generator more user friendly\r\n        this._factors = [];\r\n        for (let i = 0; i < degree; i++) {\r\n            let factorUnit = unit === true || i >= unit,\r\n                p = Random.polynom({\r\n                    degree: 1,\r\n                    unit: factorUnit,\r\n                    fraction: false,\r\n                    letters\r\n                });\r\n            this._factors.push(p);\r\n        }\r\n\r\n        this.empty().monoms = this._factors[0].monoms;\r\n        for (let i = 1; i < this._factors.length; i++) {\r\n            this.multiply(this._factors[i]);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Polynom => {\r\n        this._monoms = this._monoms.map(m => m.opposed());\r\n        return this;\r\n    };\r\n\r\n    add = (...values: any[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value.isPolynom) {\r\n                this._monoms = this._monoms.concat(value.monoms);\r\n            } else if (value.isMonom) {\r\n                this._monoms.push(value.clone());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()));\r\n            } else {\r\n                this._monoms.push(new Monom(value));\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (...values: any[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value.isPolynom) {\r\n                this._monoms = this._monoms.concat(value.clone().opposed().monoms);\r\n            } else if (value.isMonom) {\r\n                this._monoms.push(value.clone().opposed());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()).opposed());\r\n            } else {\r\n                this._monoms.push(new Monom(value).opposed());\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    multiply = (value: any): Polynom => {\r\n        if (value.isPolynom) {\r\n            return this.multiplyByPolynom(value);\r\n        } else if (value.isFraction) {\r\n            return this.multiplyByFraction(value);\r\n        } else if (value.isMonom) {\r\n            return this.multiplyByMonom(value);\r\n        } else if (Number.isSafeInteger(value)) {\r\n            return this.multiplyByInteger(value);\r\n        }\r\n\r\n        // Something went wrong...\r\n        return this;\r\n    }\r\n\r\n    private multiplyByPolynom = (P: Polynom): Polynom => {\r\n        const M: Monom[] = [];\r\n        for (const m1 of this._monoms) {\r\n            for (const m2 of P.monoms) {\r\n                M.push(Monom.xmultiply(m1, m2));\r\n            }\r\n        }\r\n\r\n        this._monoms = M;\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.multiply(F);\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByInteger = (nb: number): Polynom => {\r\n        return this.multiplyByFraction(new Fraction(nb));\r\n    };\r\n\r\n    private multiplyByMonom = (M: Monom): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.multiply(M)\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n    /**\r\n     * Divide the current polynom by another polynom.\r\n     * @param P\r\n     * returns {quotient: Polynom, reminder: Polynom}\r\n     */\r\n    euclidian = (P: Polynom): { quotient: Polynom, reminder: Polynom } => {\r\n        const letter: string = P.variables[0];\r\n        const quotient: Polynom = new Polynom().zero();\r\n        const reminder: Polynom = this.clone().reorder(letter);\r\n\r\n        // There is no variable !\r\n        if (P.variables.length === 0) {\r\n            return {quotient, reminder}\r\n        }\r\n\r\n        // Get at least a letter\r\n\r\n        const maxMP: Monom = P.monomByDegree(undefined, letter);\r\n        const degreeP: number = P.degree(letter);\r\n\r\n        let newM: Monom;\r\n\r\n        // Make the euclidian division of the two polynoms.\r\n        let MaxIteration = this.degree(letter) * 2;\r\n        while (reminder.degree(letter) >= degreeP && MaxIteration >= 0) {\r\n            // console.log('EUCLIDE Q', quotient.degree(letter), quotient.tex)\r\n            // console.log('EUCLIDE R', reminder.degree(letter), reminder.tex)\r\n            // console.log('ITERATION', MaxIteration)\r\n            MaxIteration--\r\n\r\n            // Get the greatest monom divided by the max monom of the divider\r\n            newM = reminder.monomByDegree(undefined, letter).clone().divide(maxMP);\r\n\r\n            if (newM.isZero()) {\r\n                break;\r\n            }\r\n\r\n            // Get the new quotient and reminder.\r\n            quotient.add(newM);\r\n            reminder.subtract(P.clone().multiply(newM));\r\n        }\r\n\r\n        return {quotient, reminder};\r\n    };\r\n\r\n    divide = (value: any): Polynom => {\r\n        if (value.isFraction) {\r\n            this.divideByFraction(value);\r\n        } else if (Number.isSafeInteger(value)) {\r\n            return this.divideByInteger(value);\r\n        }\r\n    }\r\n\r\n    private divideByInteger = (nb: number): Polynom => {\r\n        const nbF = new Fraction(nb);\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(nbF);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    private divideByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(F);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    pow = (nb: number): Polynom => {\r\n        if (!Number.isSafeInteger(nb)) {\r\n            return this.zero();\r\n        }\r\n        if (nb < 0) {\r\n            return this.zero();\r\n        }\r\n        if (nb === 0) {\r\n            return new Polynom();\r\n        }\r\n\r\n        const P = this.clone();\r\n        for (let i = 1; i < nb; i++) {\r\n            this.multiply(P);\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param P\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (P: Polynom, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '='\r\n        }\r\n\r\n        // Create clone version to reduce them without altering the original polynoms.\r\n        const cP1 = this.clone().reduce().reorder();\r\n        const cP2 = P.clone().reduce().reorder();\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree() !== cP2.degree()) {\r\n                    return false;\r\n                }\r\n\r\n                // Check if the coefficients are the isSame.\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isEqual(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            case 'same':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree() !== cP2.degree()) {\r\n                    return false;\r\n                }\r\n\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isSameAs(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    isZero(): boolean {\r\n        return (this._monoms.length === 1 && this._monoms[0].coefficient.isZero()) || this._monoms.length === 0;\r\n    }\r\n\r\n    isOne(): boolean {\r\n        return this._monoms.length === 1 && this._monoms[0].coefficient.isOne();\r\n    }\r\n\r\n    isEqual = (P: Polynom): boolean => {\r\n        return this.compare(P, '=');\r\n    };\r\n\r\n    isSameAs = (P: Polynom): boolean => {\r\n        return this.compare(P, 'same');\r\n    };\r\n\r\n    isOpposedAt = (P: Polynom): boolean => {\r\n        return this.compare(P.clone().opposed(), '=');\r\n    };\r\n\r\n    isFactorized = (polynomString: string): boolean => {\r\n        let P;\r\n\r\n        // Check if polynom is complete...\r\n        if (polynomString.match(/\\(/g).length !== polynomString.match(/\\)/g).length) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check if the provided (string) version is fully factorized.\r\n        // Run a regex on the string.\r\n        let polynomStringNormalized = polynomString.replaceAll('*', ''),\r\n            polynomStringReduced = '' + polynomStringNormalized,\r\n            factors: string[] = [];\r\n\r\n        for (let x of polynomStringNormalized.matchAll(/\\(([a-z0-9+\\-]+)\\)(\\^[0-9]*)?/g)) {\r\n            if (x[2] !== undefined) {\r\n                for (let i = 0; i < +x[2].substr(1); i++) {\r\n                    factors.push(x[1])\r\n                }\r\n            } else {\r\n                factors.push(x[1]);\r\n            }\r\n            polynomStringReduced = polynomStringReduced.replaceAll(x[0], '');\r\n        }\r\n        if (polynomStringReduced !== '') {\r\n            factors.push(polynomStringReduced);\r\n        }\r\n        let polyFactors = factors.map(x => new Polynom(x));\r\n\r\n        // Factorize the current polynom.\r\n        this.factorize();\r\n\r\n        // Compare the given factors with the generated factors\r\n        let sign = 1;\r\n        for (let f of this.factors) {\r\n            for (let i = 0; i < polyFactors.length; i++) {\r\n                if (f.isEqual(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    break;\r\n                } else if (f.isOpposedAt(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    sign = -sign;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // The polyfactors must be empty and the cumulative opposite factors must be 1.\r\n        return (polyFactors.length === 0 && sign === 1);\r\n    }\r\n\r\n    isDeveloped = (polynomString: string): Boolean => {\r\n        let P: Polynom;\r\n\r\n        // There is at least one parenthese - it is not developed.\r\n        if (polynomString.match(/\\(/g).length + polynomString.match(/\\)/g).length) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            // Build the polynom\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check that everything is completely developed. Actually, there are no parentheses... so it is fully developed\r\n\r\n        // maybe it wasn't reduced and not ordered...\r\n        // compare polynom string.\r\n\r\n        // normalize the string\r\n        let polynomStringNormalized = polynomString.replaceAll('[*\\s]', '')\r\n\r\n        // Determine if it's the exact same string.\r\n        // TODO: Maybe it's enough to just make this test !\r\n        return polynomStringNormalized === P.reduce().reorder().display\r\n    }\r\n    // ------------------------------------------\r\n    // Misc polynoms functions\r\n    // -------------------------------------\r\n    reduce = (): Polynom => {\r\n        for (let i = 0; i < this._monoms.length; i++) {\r\n            for (let j = i + 1; j < this._monoms.length; j++) {\r\n                if (this._monoms[i].isSameAs(this.monoms[j])) {\r\n                    this._monoms[i].add(this.monoms[j]);\r\n                    this._monoms.splice(j, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Remove all null monoms\r\n        this._monoms = this._monoms.filter((m) => {\r\n            return m.coefficient.value !== 0\r\n        });\r\n\r\n        // Reduce all monoms coefficient.\r\n        for (const m of this._monoms) {\r\n            m.coefficient.reduce();\r\n        }\r\n\r\n        if (this.length === 0) {\r\n            return new Polynom().zero();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    reorder = (letter: string = 'x'): Polynom => {\r\n        // TODO: Must handle multiple setLetter reorder system\r\n        this._monoms.sort(function (a, b) {\r\n            return b.degree(letter) - a.degree(letter)\r\n        });\r\n        return this.reduce();\r\n    };\r\n\r\n    degree = (letter?: string): number => {\r\n        let d: number = 0;\r\n        for (const m of this._monoms) {\r\n            d = Math.max(m.degree(letter), d);\r\n        }\r\n        return d;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        let L: string[] = [], S = new Set();\r\n\r\n        for (let m of this._monoms) {\r\n            S = new Set([...S, ...m.variables]);\r\n        }\r\n\r\n        // @ts-ignore\r\n        return [...S];\r\n    }\r\n\r\n    /**\r\n     * Replace a variable (letter) by a polynom.\r\n     * @param letter\r\n     * @param P\r\n     */\r\n    replaceBy = (letter: string, P: Polynom): Polynom => {\r\n        let pow: number;\r\n        const resultPolynom: Polynom = new Polynom().zero();\r\n\r\n        for (const m of this.monoms) {\r\n            if (m.literal[letter] === undefined || m.literal[letter] === 0) {\r\n                resultPolynom.add(m.clone());\r\n            } else {\r\n                // We have found a setLetter.\r\n                // Get the power and reset it.\r\n                pow = +m.literal[letter];\r\n                delete m.literal[letter];\r\n\r\n                resultPolynom.add(P.clone().pow(pow).multiply(m));\r\n            }\r\n        }\r\n\r\n        this._monoms = resultPolynom.reduce().reorder().monoms;\r\n        return this;\r\n    };\r\n\r\n    // Evaluate a polynom.\r\n    evaluate = (values: { [key: string]: Fraction | number } | Fraction | number): Fraction => {\r\n        const r = new Fraction().zero();\r\n\r\n        this._monoms.forEach(monom => {\r\n            //console.log('Evaluate polynom: ', monom.display, values, monom.evaluate(values).display);\r\n            r.add(monom.evaluate(values));\r\n        });\r\n        return r;\r\n    };\r\n\r\n    derivative = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.derivative(letter));\r\n        }\r\n        return dP;\r\n\r\n    }\r\n\r\n    primitive = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.primitive(letter))\r\n        }\r\n        return dP\r\n    }\r\n\r\n    integrate = (a: Fraction | number, b: Fraction | number, letter?: string): Fraction => {\r\n        const primitive = this.primitive(letter)\r\n\r\n        if (letter === undefined) {\r\n            letter = 'x'\r\n        }\r\n\r\n        let valuesA: { [key: string]: Fraction | number } = {},\r\n            valuesB: { [key: string]: Fraction | number } = {}\r\n        valuesA[letter] = a;\r\n        valuesB[letter] = b;\r\n\r\n        return primitive.evaluate(valuesB).subtract(primitive.evaluate(valuesA))\r\n    }\r\n    // ------------------------------------------\r\n    // Polynoms factorization functions\r\n    // -------------------------------------\r\n    /**\r\n     * Factorize a polynom and store the best results in factors.\r\n     * @param maxValue Defines the greatest value to search to (default is 20).\r\n     */\r\n    factorize_OLD = (maxValue?: number): Polynom => {\r\n        // TODO: Must handle other letters than 'x'\r\n        this._factors = [];\r\n\r\n        // Duplicate the polynom\r\n        let P = this.clone(),\r\n            nbFactorsFound = 0;\r\n\r\n        // Determine if the polynom is \"negative\", eg has a max monom degree with a negative coefficient.\r\n        if (P.monomByDegree().coefficient.numerator < 0) {\r\n            this._factors.push(new Polynom('-1'));\r\n        }\r\n\r\n        // Determine if there is a 'common' monom\r\n        let M = P.commonMonom();\r\n        if (!M.isOne()) {\r\n            let commonPolynom = new Polynom()\r\n            commonPolynom.monoms = [M]\r\n            if (this._factors.length === 0) {\r\n                this._factors.push(commonPolynom);\r\n            } else {\r\n                this._factors = [];\r\n                this._factors.push(commonPolynom.opposed());\r\n            }\r\n            P = P.euclidian(commonPolynom).quotient;\r\n\r\n            nbFactorsFound = commonPolynom.degree();\r\n        }\r\n\r\n        // Main loop.\r\n        //\r\n        // Do it only if degree is equal or less than one.\r\n        if (P.degree() <= 1) {\r\n            this._factors.push(P.clone());\r\n        } else {\r\n            // Force test.\r\n            let Q = new Fraction(),\r\n                F,\r\n                degree = P.degree();\r\n\r\n            maxValue = maxValue === undefined ? 20 : maxValue;\r\n\r\n            // Test all polynom similar to ax+b\r\n            for (let a = 1; a <= maxValue; a++) {\r\n                // Skip a coefficient of 0\r\n                for (let b = -maxValue; b <= maxValue; b++) {\r\n\r\n                    Q.parse(-b, a);\r\n\r\n                    if (P.evaluate({x: Q})) {\r\n                        F = new Polynom(`${a}x+${b}`);\r\n                        while (P.evaluate({x: Q}).value === 0) {\r\n                            this._factors.push(F.clone());\r\n                            nbFactorsFound++;\r\n\r\n                            // Means it can be divided without reminders.\r\n                            P = P.euclidian(F).quotient;\r\n                        }\r\n                    }\r\n\r\n                    // Continue if the numbers of factors found equals the degree.\r\n                    if (nbFactorsFound > degree) {\r\n                        return this;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (P.degree() > 1) {\r\n                this._factors.push(P.clone());\r\n                return this;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    factorize = (letter?: string): Polynom[] => {\r\n        let factors: Polynom[] = [];\r\n\r\n        // Extract the common monom\r\n        let P = this.clone().reorder(),\r\n            M = P.commonMonom(),\r\n            tempPolynom: Polynom\r\n        // It has a common monom.\r\n        if (!M.isOne()) {\r\n            tempPolynom = new Polynom()\r\n            tempPolynom.monoms = [M]\r\n            factors = [tempPolynom.clone()]\r\n            P = P.euclidian(tempPolynom).quotient;\r\n        }\r\n\r\n        let securityLoop = P.degree() * 2\r\n        // securityLoop = 0\r\n        while (securityLoop >= 0) {\r\n            securityLoop--\r\n\r\n\r\n            if (P.monoms.length < 2) {\r\n                if (!P.isOne()) {\r\n                    factors.push(P.clone());\r\n                }\r\n                break;\r\n            } else {\r\n                // Get the first and last monom.\r\n                let m1 = P.monoms[0].dividers,\r\n                    m2 = P.monoms[P.monoms.length - 1].dividers\r\n\r\n                // console.log('CURRENT VALUE')\r\n                // console.log(P.tex)\r\n                // console.log('---------------------')\r\n                for (let m1d of m1) {\r\n                    for (let m2d of m2) {\r\n                        // if(m1d.degree()===m2d.degree()){continue}\r\n                        let dividerPolynom = new Polynom(),\r\n                            result\r\n                        dividerPolynom.monoms = [m1d.clone(), m2d.clone()]\r\n                        result = P.euclidian(dividerPolynom)\r\n\r\n                        // console.log(dividerPolynom.tex, '=>', result.reminder.tex, '|||||', result.quotient.tex)\r\n                        if (result.reminder.isZero()) {\r\n                            P = result.quotient.clone();\r\n                            factors.push(dividerPolynom)\r\n                            continue;\r\n                        }\r\n\r\n                        dividerPolynom.monoms = [m1d.clone(), m2d.clone().opposed()]\r\n                        result = P.euclidian(dividerPolynom)\r\n                        if (result.reminder.isZero()) {\r\n                            P = result.quotient.clone();\r\n                            factors.push(dividerPolynom)\r\n                        }\r\n                        // console.log(dividerPolynom.tex, '=>', result.reminder.tex)\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        this.factors = factors\r\n        return factors;\r\n    }\r\n\r\n    private _factorize2ndDegree = (letter: string): Polynom[] => {\r\n        let P1: Polynom, P2: Polynom,\r\n            a, b, c, delta, x1, x2, factor;\r\n\r\n        // One variable only\r\n        if (this.numberOfVars === 1) {\r\n            a = this.monomByDegree(2, letter).coefficient;\r\n            b = this.monomByDegree(1, letter).coefficient;\r\n            c = this.monomByDegree(0, letter).coefficient;\r\n            delta = b.clone().pow(2).subtract(a.clone().multiply(c).multiply(4));\r\n\r\n            if (delta.isZero()) {\r\n                x1 = b.clone().opposed().divide(a.clone().multiply(2))\r\n                P1 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                P2 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                factor = a.divide(x1.denominator).divide(x1.denominator);\r\n\r\n                if (!factor.isOne()) {\r\n                    // TODO: Update new Polynom to accept anything...\r\n                    return [new Polynom(factor.display), P1, P2]\r\n                } else {\r\n                    return [P1, P2]\r\n                }\r\n            } else if (delta.isPositive() && delta.isSquare()) {\r\n                x1 = b.clone().opposed()\r\n                    .add(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n                x2 = b.clone().opposed()\r\n                    .subtract(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n\r\n                // (2x+5)(3x-2)\r\n                // 6x^2+11x-10\r\n                // a = 6, b = 11, c = -10\r\n                // delta = 121-4*6*(-10) = 361= 19^2\r\n                // x1 = (-11 + 19)  / 12 = 8/12 = 2/3\r\n                // x2 = (-11 - 19)  / 12 = -30/12 = -5/2\r\n                factor = a.divide(x1.denominator).divide(x2.denominator);\r\n                if (factor.isOne()) {\r\n                    return [\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n                } else {\r\n                    return [\r\n                        new Polynom(factor.display),\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n\r\n                }\r\n            } else {\r\n                // No solution possible - return the complete value.\r\n                return [this.clone()]\r\n            }\r\n        } else {\r\n            // If multiple variables, only handle perfect squares...\r\n            a = this.monomByDegree(2, letter);\r\n            b = this.monomByDegree(1, letter);\r\n            c = this.monomByDegree(0, letter);\r\n\r\n\r\n            if (a.isLitteralSquare() && c.isLitteralSquare()) {\r\n                // Check the middle item is same as...\r\n                if (b.clone().pow(2).isSameAs(a.clone().multiply(c))) {\r\n                    // Determine if the coefficient values matches.\r\n\r\n                    // Search 4 values (r, s, t, u) that matches:\r\n                    // (r X + s Y)(t X + u Y) = rt X^2 + (ru + st) XY + su Y^2\r\n\r\n                    let xPolynom = new Polynom('x', a.coefficient, b.coefficient, c.coefficient);\r\n                    let xFactors = xPolynom._factorize2ndDegree('x');\r\n\r\n                    let factors = [], xyzPolynom: Polynom;\r\n\r\n                    if (xFactors.length >= 2) {\r\n                        for (let p of xFactors) {\r\n                            if (p.degree() === 0) {\r\n                                factors.push(p.clone())\r\n                            } else {\r\n                                xyzPolynom = p.clone();\r\n                                xyzPolynom.monoms[0].literal = a.literalSqrt\r\n                                xyzPolynom.monoms[1].literal = c.literalSqrt\r\n                                factors.push(xyzPolynom.clone())\r\n                            }\r\n                        }\r\n                        return factors\r\n                    }\r\n                }\r\n            }\r\n\r\n            return [this.clone()]\r\n            //\r\n            // console.log(a.tex, b.tex, c.tex)\r\n            // if (a.isSquare() && c.isSquare()) {\r\n            //     console.log('A C squares')\r\n            //     if (a.clone().sqrt().multiply(c.clone().sqrt()).multiplyByNumber(2).isSameAs(b)) {\r\n            //         console.log('HERE')\r\n            //         if (a.coefficient.sign() === b.coefficient.sign()) {\r\n            //             return []\r\n            //         }else{\r\n            //             return []\r\n            //         }\r\n            //     }\r\n            // } else if(a.isLitteralSquare() && c.isLitteralSquare()) {\r\n            //     console.log('A C litteral SQUARES')\r\n            //     // Check that the middle element is the product of a and c.\r\n            //\r\n            //     if(b.clone().pow(2).isSameAs(a.clone().multiply(c))){\r\n            //         console.log('SAME')\r\n            //\r\n            //     }else{\r\n            //         console.log('NOT SAME')\r\n            //     }\r\n            //\r\n            //     return [this.clone()]\r\n            // } else {\r\n            //     console.log('NOT SQUARES AT ALL !!!!')\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    private _factorizeByGroups = (): Polynom[] => {\r\n        // TODO: Factorize by groups.\r\n        return [];\r\n    }\r\n    // ------------------------------------------\r\n    // Polynoms helpers functions\r\n    // -------------------------------------\r\n    // TODO: get zeroes for more than first degree\r\n    getZeroes = (): (Fraction | boolean)[] => {\r\n        const Z: Fraction[] = [];\r\n\r\n        switch (this.degree()) {\r\n            case 0:\r\n                if (this._monoms[0].coefficient.value === 0) {\r\n                    return [true];\r\n                } else {\r\n                    return [false];\r\n                }\r\n            case 1:\r\n                // There is only one monoms,\r\n                if (this._monoms.length === 1) {\r\n                    return [new Fraction().zero()];\r\n                } else {\r\n                    const P = this.clone().reduce().reorder();\r\n                    return [P.monoms[1].coefficient.opposed().divide(P.monoms[0].coefficient)];\r\n                }\r\n            // TODO: Determine the zeros of an equation of second degree.\r\n            //case 2:\r\n            default:\r\n                // Make sure the polynom is factorized.\r\n                if (this._factors.length === 0) {\r\n                    this.factorize()\r\n                }\r\n\r\n                let zeroes = [], zeroesAsTex = [];\r\n                for (let P of this._factors) {\r\n                    if (P.degree() > 2) {\r\n                        // TODO: Handle other polynom.\r\n\r\n                    } else if (P.degree() === 2) {\r\n                        let A = P.monomByDegree(2).coefficient,\r\n                            B = P.monomByDegree(1).coefficient,\r\n                            C = P.monomByDegree(0).coefficient,\r\n                            D = B.clone().pow(2).subtract(A.clone().multiply(C).multiply(4));\r\n\r\n                        if (D.value > 0) {\r\n                            /*console.log('Two zeroes for ', P.tex); */\r\n                            let x1 = (-(B.value) + Math.sqrt(D.value)) / (2 * A.value),\r\n                                x2 = (-(B.value) - Math.sqrt(D.value)) / (2 * A.value);\r\n\r\n                            zeroes.push(new Fraction(x1.toFixed(3)).reduce());\r\n                            zeroes.push(new Fraction(x2.toFixed(3)).reduce());\r\n                        } else if (D.value === 0) {\r\n                            /*console.log('One zero for ', P.tex); */\r\n\r\n                        } else {\r\n                            console.log('No zero for ', P.tex);\r\n                        }\r\n                    } else {\r\n                        for (let z of P.getZeroes()) {\r\n                            // Check if the zero is already in the list.\r\n                            if (z === false || z === true) {\r\n                                continue;\r\n                            }\r\n                            if (zeroesAsTex.indexOf(z.frac) === -1) {\r\n                                zeroes.push(z);\r\n                                zeroesAsTex.push(z.frac);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return zeroes;\r\n        }\r\n        return Z;\r\n    };\r\n\r\n\r\n    // TODO: analyse the next functions to determine if they are useful or not...\r\n    monomByDegree = (degree?: number, letter?: string): Monom => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomByDegree(this.degree(letter), letter);\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter) === degree) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        // Nothing was found - return the null monom.\r\n        return new Monom().zero();\r\n    };\r\n\r\n    monomsByDegree = (degree?: number, letter?: string): Monom[] => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomsByDegree(this.degree(letter));\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        let Ms: Monom[] = [];\r\n\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter) === degree) {\r\n                Ms.push(m.clone())\r\n            }\r\n        }\r\n\r\n        return Ms\r\n        // Nothing was found - retur\r\n    }\r\n\r\n    // Used in LinearSystem.tex\r\n    monomByLetter = (letter: string): Monom => {\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.hasLetter(letter)) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        return new Monom().zero();\r\n    };\r\n\r\n\r\n    // Next functions are used for for commonMonom, which is used in the factorize method.\r\n    getDenominators = (): number[] => {\r\n        const denominators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            denominators.push(m.coefficient.denominator);\r\n        }\r\n        return denominators;\r\n    };\r\n\r\n    getNumerators = (): number[] => {\r\n        const numerators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            numerators.push(m.coefficient.numerator);\r\n        }\r\n        return numerators;\r\n    };\r\n\r\n    lcmDenominator = (): number => {\r\n        return Numeric.lcm(...this.getDenominators());\r\n    };\r\n\r\n    gcdDenominator = (): number => {\r\n        return Numeric.gcd(...this.getDenominators());\r\n    };\r\n\r\n    lcmNumerator = (): number => {\r\n        return Numeric.lcm(...this.getNumerators());\r\n    };\r\n\r\n    gcdNumerator = (): number => {\r\n        return Numeric.gcd(...this.getNumerators());\r\n    };\r\n\r\n    commonMonom = (): Monom => {\r\n        let M = new Monom().one(), numerator: number, denominator: number, degree = this.degree();\r\n\r\n        numerator = this.gcdNumerator();\r\n        denominator = this.gcdDenominator();\r\n\r\n        M.coefficient = new Fraction(numerator, denominator);\r\n        for (let L of this.variables) {\r\n            // Initialize the setLetter with the max degree\r\n            M.setLetter(L, degree);\r\n            for (let m of this._monoms) {\r\n                M.setLetter(L, Math.min(m.degree(L), M.degree(L)));\r\n                if (M.degree(L) === 0) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return M;\r\n    }\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * This will generate a not reduced tex string of the polynom.\r\n     * @param complexity : Number of iteration to increase the complexity.\r\n     */\r\n    makeItComplicate = (complexity: number = 1): Polynom => {\r\n        this._texString = '';\r\n\r\n        // The polynom must be at least of the first degree.\r\n        if (this.degree() < 1) {\r\n            return this;\r\n        }\r\n\r\n        // TODO: update this function !\r\n\r\n        const mDegree = Random.number(0, this.degree() - 1);\r\n        // const A = new Polynom().rndSimple(mDegree, false, complexity > 1, 'x', false, complexity > 1 ? -1 : 1);\r\n        // const B = new Polynom().rndSimple(1, false, complexity > 1);\r\n        // const C = this.clone().subtract(A.clone().multiply(B));\r\n\r\n        // Try to factorize a little bit the C polynom.\r\n        // C.factorizePartial(true);\r\n        // this._texString = `${A.genDisplay('tex', false, true)} \\\\cdot ${B.genDisplay('tex', false, true)} ${C.texString} `;\r\n        //\r\n        return this;\r\n    };\r\n    factorizePartial = (forceSign?: boolean): Polynom => {\r\n        this._texString = '';\r\n        // Try to find two monoms with a common coefficient.\r\n        if (this.length <= 1) {\r\n            return this;\r\n        }\r\n\r\n        let mMain: Monom,\r\n            mCheck: Monom,\r\n            mFactor: Monom,\r\n            pFactor: Polynom,\r\n            // pRemain: Polynom,\r\n            g: number, sign: string;\r\n\r\n        for (let i = 0; i < this.length; i++) {\r\n            mMain = this._monoms[i].clone();\r\n            // We factorize only if the main coefficient isn't a fraction\r\n            // if(mMain.coefficient.denominator!==1){continue;}\r\n            for (let j = i + 1; j < this.length; j++) {\r\n                mCheck = this._monoms[j].clone();\r\n                // if(mCheck.coefficient.denominator!==1){continue;}\r\n\r\n                g = Numeric.gcd(mMain.coefficient.numerator, mCheck.coefficient.numerator);\r\n                if (g !== 1) {\r\n                    // mFactor = mMain.clone().divide(mCheck); // This gets the literal part.\r\n                    // mFactor.coefficient = new Fraction(g); // Set the coefficient to the gcd.\r\n                    mFactor = Monom.lcm(mMain, mCheck);\r\n                    sign = mMain.coefficient.sign() === 1 ? '+' : '-';\r\n                    this._texString = `${forceSign === true ? sign : (sign === '+' ? '' : sign)}${mFactor.tex}`;\r\n\r\n                    pFactor = new Polynom().add(mMain.divide(mFactor)).add(mCheck.divide(mFactor));\r\n                    this._texString += pFactor.genDisplay('tex', false, true);\r\n\r\n                    this._texString += this.clone().subtract(pFactor.clone().multiply(mFactor)).genDisplay('tex', true, false);\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._texString = this.genDisplay('tex', forceSign);\r\n\r\n        return this;\r\n    };\r\n    /**\r\n     * reduce the coefficient value as if the polynom was equal to zero.\r\n     */\r\n    minify = (): Polynom => {\r\n        // First multiply by the common denominator.\r\n        this.multiply(this.lcmDenominator()).divide(this.gcdNumerator()).reduce();\r\n        return this.reduce();\r\n    };\r\n    /**\r\n     * Determine if the current polynom is divisible by P\r\n     * TODO: should work with any polynom, not only first degree polynoms and the setLetter should disappear\r\n     * @param P\r\n     * @param letter - default setLetter\r\n     */\r\n    canDivide = (P: Polynom, letter: string = 'x'): boolean => {\r\n        const d = P.degree();\r\n\r\n        const evalValue: { [key: string]: Fraction } = {};\r\n        // A zero degree polynom can always divide, except if it's the zero polynom.\r\n        if (d === 0) {\r\n            return !P.isZero;\r\n        }\r\n\r\n        // The polynom is of degree one.\r\n        if (d === 1) {\r\n            const z = P.getZeroes();\r\n            // The zero is an undefined zero.\r\n            if (z[0] === true || z[0] === false) {\r\n                return false;\r\n            }\r\n\r\n            evalValue[letter] = z[0];\r\n            return this.evaluate(evalValue).value === 0;\r\n        }\r\n\r\n        // The polynom is of degree 2 or more...\r\n        if (d > 1) {\r\n            console.log('Currently, only first degree polynom are supported');\r\n            return false;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n\r\n}\r\n","/**\r\n * Equation is a class to manage equations...\r\n */\r\nimport Polynom from \"./polynom\";\r\nimport Monom from \"./monom\";\r\nimport Numeric from \"../numeric\";\r\nimport Fraction from \"../coefficients/fraction\";\r\nimport Nthroot from \"../coefficients/nthroot\";\r\n\r\nexport default class Equation {\r\n    private _left: Polynom;  // Left part of the equation\r\n    private _right: Polynom; // Right part of the equation\r\n    private _sign: string;   // Signe of the equation, by default =\r\n\r\n    private _polynom: Polynom;  // Used to solve the equation // TODO: remove the private value ?\r\n    private _solutions: string[];    // Array of the solutions\r\n\r\n    // Undetermined solutions.\r\n    private _varnothing: string = '\\\\varnothing';\r\n    private _real: string = '\\\\mathbb{R}';\r\n\r\n    /**\r\n     * Create an Equation using two polynoms.\r\n     * @param equations\r\n     */\r\n    constructor(...equations: any) {\r\n        // Default equation\r\n        this._left = new Polynom().zero();\r\n        this._right = new Polynom().zero();\r\n        this._sign = '=';\r\n\r\n        if (equations.length === 1) {\r\n            if (equations[0].isEquation === true) {\r\n                return equations[0].clone();\r\n            } else {\r\n                this.parse(equations[0]);\r\n            }\r\n        } else if (equations.length === 2) {\r\n            this.left = equations[0].isPolynom ? equations[0].clone() : new Polynom(equations[0]);\r\n            this.right = equations[1].isPolynom ? equations[1].clone() : new Polynom(equations[1]);\r\n        } else {\r\n            // Return default empty equation\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isEquation() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    // TODO: Check the getters and setters.\r\n    get solutions(): string[] {\r\n        return this._solutions;\r\n    }\r\n\r\n    get solution(): string {\r\n        if (this._solutions.length === 1\r\n            &&\r\n            (\r\n                this._solutions[0] === this._real\r\n                || this._solutions[0] === this._varnothing\r\n                || this._solutions[0].includes('\\\\left')\r\n            )\r\n        ) {\r\n            return `S = ${this._solutions[0]}`;\r\n        }\r\n        return `S = \\\\left{ ${this._solutions.join(';')} \\\\right}`;\r\n    }\r\n\r\n    get isReal(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0] === this._real;\r\n    }\r\n\r\n    get isVarnothing(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0] === this._varnothing;\r\n    }\r\n\r\n    get signAsTex(): string {\r\n        if (this._sign === '>=' || this._sign === '=>' || this._sign === 'geq') {\r\n            return '\\\\geq';\r\n        }\r\n        if (this._sign === '<=' || this._sign === '=<' || this._sign === 'leq') {\r\n            return '\\\\leq';\r\n        }\r\n        return this._sign;\r\n    }\r\n\r\n    get tex(): string {\r\n        return `${this._left.tex}${this.signAsTex}${this._right.tex}`;\r\n    }\r\n\r\n    get raw(): string {\r\n        return `${this._left.raw}${this.signAsTex}${this._right.raw}`;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        return [...new Set(this._right.variables.concat(this._left.variables))];\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    get left(): Polynom {\r\n        return this._left;\r\n    }\r\n\r\n    set left(value: Polynom) {\r\n        this._left = value;\r\n    }\r\n\r\n    get right(): Polynom {\r\n        return this._right;\r\n    }\r\n\r\n    set right(value: Polynom) {\r\n        this._right = value;\r\n    }\r\n\r\n    get sign(): string {\r\n        return this._sign;\r\n    }\r\n\r\n    set sign(value: string) {\r\n        // Set the sign value as formatted.\r\n        this._sign = this._formatSign(value);\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (equationString: string): Equation => {\r\n        let pStr: string[], strSign: string | false;\r\n        // Find the string separator\r\n        strSign = this._findSign(equationString);\r\n\r\n        if (strSign === false) {\r\n            console.log('The equation is not valid (no sign found)');\r\n            return;\r\n        }\r\n\r\n        // The StrSign is found\r\n        pStr = equationString.split(strSign);\r\n\r\n        return this.create(new Polynom(pStr[0]), new Polynom(pStr[1]), this._formatSign(strSign));\r\n    };\r\n\r\n    private _findSign = (equationString: string): string | false => {\r\n        let strSign: string = '';\r\n\r\n        if (equationString.includes('geq')) {\r\n            return (equationString.includes('\\\\geq')) ? '\\\\geq' : 'geq';\r\n        } else if (equationString.includes('leq')) {\r\n            return (equationString.includes('\\\\leq')) ? '\\\\leq' : 'leq';\r\n        } else if (equationString.includes('>=')) {\r\n            return '>=';\r\n        } else if (equationString.includes('=>')) {\r\n            return '=>';\r\n        } else if (equationString.includes('>')) {\r\n            return '>';\r\n        } else if (equationString.includes('<=')) {\r\n            return '<=';\r\n        } else if (equationString.includes('=<')) {\r\n            return '=<';\r\n        } else if (equationString.includes('<')) {\r\n            return '<';\r\n        } else if (equationString.includes('=')) {\r\n            return '='\r\n        }\r\n        if (strSign === '') {\r\n            console.log('Equation: parse string : sign not found');\r\n            return false;\r\n        }\r\n    };\r\n\r\n    private _formatSign = (signStr: string): string => {\r\n        if (signStr === undefined) {\r\n            return '=';\r\n        }\r\n\r\n        if (signStr.includes('geq')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>=')) {\r\n            return '>=';\r\n        } else if (signStr.includes('=>')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>')) {\r\n            return '>';\r\n        } else if (signStr.includes('leq')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<=')) {\r\n            return '<=';\r\n        } else if (signStr.includes('=<')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<')) {\r\n            return '<';\r\n        } else {\r\n            return '='\r\n        }\r\n    };\r\n\r\n    private _reverseSign = (): Equation => {\r\n        if (this._sign === '=') {\r\n            return this;\r\n        }\r\n\r\n        if (this._sign.includes('<')) {\r\n            this._sign.replace('<', '>');\r\n            return this;\r\n        }\r\n        if (this._sign.includes('>')) {\r\n            this._sign.replace('>', '<');\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    create = (left: Polynom, right: Polynom, sign?: string): Equation => {\r\n        this._left = left;\r\n        this._right = right;\r\n        this._sign = this._formatSign(sign);\r\n        return this;\r\n    };\r\n\r\n    clone = (): Equation => {\r\n        return new Equation().create(this._left.clone(), this._right.clone(), this._sign + '');\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n    // -----------------------------------------------\r\n    private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n        degree: 2\r\n    };\r\n    get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n        return this._randomizeDefaults;\r\n    }\r\n\r\n    set randomizeDefaults(value) {\r\n        this._randomizeDefaults = value;\r\n    }\r\n\r\n    randomize = (opts?: {}, sign?: string): Equation => {\r\n        // TODO: Generate equations randomly, using config.\r\n        return new Equation().create(new Polynom(), new Polynom(), sign);\r\n    };\r\n\r\n\r\n    // -----------------------------------------------\r\n    // Equations operations\r\n    // -----------------------------------------------\r\n    /**\r\n     * Reorder will move all monoms containing a letter on the left, all the other on the right.\r\n     */\r\n    moveLeft = (): Equation => {\r\n        this._left = this._left.clone().subtract(this._right)\r\n        this._right.zero()\r\n        return this;\r\n    }\r\n    reorder = (allLeft?: boolean): Equation => {\r\n        // Move all monoms of degree greater than 0 to the left.\r\n        // and all zero degree monoms to the right.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n\r\n        if (allLeft) {\r\n            return this.moveLeft()\r\n        }\r\n        let mMove: Monom;\r\n        for (let m of this._left.monoms) {\r\n            if (m.degree() === 0) {\r\n                mMove = m.clone();\r\n                this._left.subtract(mMove);\r\n                this._right.subtract(mMove);\r\n            }\r\n        }\r\n\r\n        // Reorder the left and right polynoms\r\n        this._left.reorder();\r\n        this._right.reorder();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiply by the lcm denominator and divide by the gcm numerators.\r\n     */\r\n    simplify = (): Equation => {\r\n        this.multiply(Numeric.lcm(...this._left.getDenominators(),...this._right.getDenominators()));\r\n        this.divide(Numeric.gcd(...this._left.getNumerators(),...this._right.getNumerators()));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Reorder the polynom to have only one letter on the left, the rest on the right.\r\n     * @param letter\r\n     */\r\n    isolate = (letter?: string): Equation | false => {\r\n        // Determine if we can isolate the variables.\r\n\r\n        // Both part of the equations must be of the first degree.\r\n        //TODO: handle equations of degree two or more ?\r\n        if (this.degree(letter) !== 1) {\r\n            return false;\r\n        }\r\n\r\n        // Modify the equation to isolate the asked variable.\r\n        // TODO: must handle equations like 3xy+5y=4 => y = 4/(3x-5)\r\n        if (this.isMultiVariable()) {\r\n            return false;\r\n        }\r\n\r\n        // Isolate the letter.\r\n        let mMove: Monom, cMove: Fraction;\r\n        // Start by moving everything to the left.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n        for (let m of this._left.monoms) {\r\n            if (!m.hasLetter(letter)) {\r\n                mMove = m.clone();\r\n                this._left.add(mMove.clone().opposed());\r\n                this._right.add(mMove.clone().opposed());\r\n            }\r\n        }\r\n\r\n        // In theory, we should have only one item on the left.\r\n        if (this._left.length !== 1) {\r\n            return false;\r\n        }\r\n        cMove = this._left.monoms[0].coefficient.clone();\r\n        this._left.divide(cMove);\r\n        this._right.divide(cMove);\r\n        return this;\r\n    };\r\n\r\n    replaceBy = (letter: string, P: Polynom): Equation => {\r\n        this._left.replaceBy(letter, P)\r\n        this._right.replaceBy(letter, P)\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiple an equation by a fraction value.\r\n     * @param value\r\n     */\r\n    multiply = (value: any): Equation => {\r\n\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        // Multiply each part of the equation by the fraction\r\n        this._left.multiply(F);\r\n        this._right.multiply(F);\r\n\r\n        // The sign of the inequation must be changed.\r\n        if (this._sign !== '=' && F.sign() === -1) {\r\n            this._reverseSign();\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    divide = (value: any): Equation => {\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        if(F.isZero()){\r\n            return this;\r\n        }else {\r\n            return this.multiply(F.invert());\r\n        }\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations helpers\r\n    // -----------------------------------------------\r\n\r\n    /**\r\n     * Get the degree of the equation\r\n     * @param letter\r\n     */\r\n    degree = (letter?: string): number => {\r\n        return Math.max(this._left.degree(letter), this._right.degree(letter));\r\n    };\r\n\r\n    /**\r\n     * Determine if the equation contains more than one letter/variable.\r\n     */\r\n    isMultiVariable = (): boolean => {\r\n        return this._left.isMultiVariable || this._right.isMultiVariable;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        // @ts-ignore\r\n        return [...new Set([...this._left.letters(), ...this._right.letters()])];\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations solving algorithms\r\n    // -----------------------------------------------\r\n    solve = (letter?: string): Equation => {\r\n        // Initialise the variables:\r\n        this._solutions = [];\r\n\r\n        // TODO: this._polynom could be removed.\r\n        // TODO: consolidate solving equations (inequations vs equations)\r\n        this._polynom = this._left.clone().subtract(this._right);\r\n\r\n        switch (this._polynom.degree(letter)) {\r\n            case 0:\r\n            case 1:\r\n                this._solveDegree1(letter);\r\n                break;\r\n            case 2:\r\n                this._solveDegree2(letter);\r\n                break;\r\n            default:\r\n                this._solveDegree3plus(letter);\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    private isGreater = (): boolean => {\r\n        if (this._sign.indexOf('>') !== -1) {\r\n            return true;\r\n        }\r\n        return this._sign.indexOf('geq') !== -1;\r\n\r\n    };\r\n    private isStrictEqual = (): boolean => {\r\n        return this._sign === '=';\r\n    };\r\n    private isAlsoEqual = (): boolean => {\r\n        if (this._sign.indexOf('=') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('geq') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('leq') !== -1) {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    private _solveDegree1 = (letter?: string): string[] => {\r\n        const m1 = this._polynom.monomByDegree(1, letter).coefficient,\r\n            m0 = this._polynom.monomByDegree(0, letter).coefficient,\r\n            v = m0.clone().opposed().divide(m1).display;\r\n        let s: string;\r\n\r\n        if (this.isStrictEqual()) {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0) {\r\n                    this._solutions = [this._real];\r\n                } else {\r\n                    this._solutions = [this._varnothing];\r\n                }\r\n            } else {\r\n                this._solutions = [v];\r\n            }\r\n        } else {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0 && this.isAlsoEqual()) {\r\n                    s = '\\\\mathbb{R}';\r\n                } else {\r\n                    if (m0.value > 0) {\r\n                        s = this.isGreater() ? this._real : this._varnothing;\r\n                    } else {\r\n                        s = !this.isGreater() ? this._real : this._varnothing;\r\n                    }\r\n                }\r\n            } else {\r\n                // Must handle the case if the m1 monom is negative.\r\n                if ((this.isGreater() && m1.sign() === 1) || (!this.isGreater() && m1.sign() === -1)) {\r\n                    s = `\\\\left${this.isAlsoEqual() ? '\\\\[' : '\\\\]'}${v};+\\\\infty\\\\right\\\\[`;\r\n                } else {\r\n                    s = `\\\\left\\\\]-\\\\infty;${v} \\\\right\\\\${this.isAlsoEqual() ? '\\\\]' : '\\\\['}`;\r\n                }\r\n            }\r\n            this._solutions = [s];\r\n        }\r\n\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree2 = (letter?: string): string[] => {\r\n        let aF = this._polynom.monomByDegree(2, letter).coefficient,\r\n            bF = this._polynom.monomByDegree(1, letter).coefficient,\r\n            cF = this._polynom.monomByDegree(0, letter).coefficient,\r\n            delta: number, nthDelta: Nthroot,\r\n            lcm = Numeric.lcm(aF.denominator, bF.denominator, cF.denominator),\r\n            a = aF.multiply(lcm).value,\r\n            b = bF.multiply(lcm).value,\r\n            c = cF.multiply(lcm).value,\r\n            realX1: number, realX2: number,\r\n            sX1: string, sX2: string;\r\n\r\n        delta = b * b - 4 * a * c;\r\n\r\n        if (delta > 0) {\r\n            realX1 = (-b - Math.sqrt(delta)) / (2 * a);\r\n            realX2 = (-b + Math.sqrt(delta)) / (2 * a);\r\n\r\n            if(delta>1.0e5){\r\n                // The delta is too big to be parsed !\r\n                this._solutions = [\r\n                    ((-b - Math.sqrt(delta))/(2 * a)).toFixed(5),\r\n                    ((-b + Math.sqrt(delta))/(2 * a)).toFixed(5)\r\n                ]\r\n            }else {\r\n                nthDelta = new Nthroot().parse(delta).reduce();\r\n                if (nthDelta.hasRadical()) {\r\n                    // -b +- coeff\\sqrt{radical}\r\n                    // -------------------------\r\n                    //           2a\r\n                    let gcd = Numeric.gcd(b, 2 * a, nthDelta.coefficient);\r\n                    nthDelta.coefficient = nthDelta.coefficient / gcd;\r\n\r\n                    // TODO: Can i delete the next line ?\r\n                    // let deltaC = nthDelta.coefficient, deltaR = nthDelta.radical;\r\n                    if (b !== 0) {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                `${-b / gcd} - ${nthDelta.tex}`,\r\n                                `${-b / gcd} + ${nthDelta.tex}`,\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                `\\\\dfrac{${-b / gcd} - ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                `\\\\dfrac{${-b / gcd} + ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                            ]\r\n                        }\r\n                    } else {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                `- ${nthDelta.tex}`,\r\n                                `${nthDelta.tex}`,\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                `\\\\dfrac{- ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                `\\\\dfrac{${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                            ]\r\n                        }\r\n                    }\r\n                } else {\r\n                    // -b +- d / 2a\r\n                    this._solutions = [\r\n                        new Fraction(-b - nthDelta.coefficient, 2 * a).reduce().dfrac,\r\n                        new Fraction(-b + nthDelta.coefficient, 2 * a).reduce().dfrac\r\n                    ]\r\n                }\r\n            }\r\n\r\n        } else if (delta === 0) {\r\n            this._solutions = [new Fraction(-b, 2 * a).reduce().dfrac];\r\n        } else {\r\n            this._solutions = [this._varnothing];\r\n        }\r\n\r\n\r\n        // Handle now the inequations.\r\n        if (!this.isStrictEqual()) {\r\n            if (this._solutions.length === 2) {\r\n                sX1 = (realX1 < realX2) ? this._solutions[0] : this._solutions[1];\r\n                sX2 = (realX1 < realX2) ? this._solutions[1] : this._solutions[0];\r\n\r\n                if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                    this._solutions = [\r\n                        `\\\\left]-\\\\infty ; ${sX1}\\\\right${this.isAlsoEqual() ? ']' : '['} \\\\cup \\\\left${this.isAlsoEqual() ? '[' : ']'}${sX2};+\\\\infty\\\\right[`\r\n                    ];\r\n                } else {\r\n                    this._solutions = [\r\n                        `\\\\left${this.isAlsoEqual() ? '[' : ']'}${sX1} ; ${sX2}\\\\right${this.isAlsoEqual() ? ']' : '['}`\r\n                    ]\r\n                }\r\n            } else if (this._solutions.length === 1 && this._solutions[0] !== this._varnothing) {\r\n                if (!this.isAlsoEqual()) {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [\r\n                            `\\\\left]-\\\\infty ; ${this._solutions[0]}\\\\right[ \\\\cup \\\\left]${this._solutions[0]};+\\\\infty\\\\right[`\r\n                        ];\r\n                    } else {\r\n                        this._solutions = [this._varnothing];\r\n                    }\r\n                } else {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [this._real];\r\n                    } else {\r\n                        // this._solutions = [ this._solutions[0] ];\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.isGreater()) {\r\n                    this._solutions = [aF.sign() === 1 ? this._real : this._varnothing];\r\n                } else {\r\n                    this._solutions = [aF.sign() === -1 ? this._real : this._varnothing];\r\n                }\r\n            }\r\n        }\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree3plus = (letter?: string): string[] => {\r\n        // TODO: try to resolve equations with a degree superior than 2.\r\n        this._solutions = [letter];  // ESLint remove system :(\r\n        return this._solutions;\r\n    };\r\n\r\n}","import Fraction from \"../coefficients/fraction\";\r\nimport Equation from \"./equation\";\r\nimport Polynom from \"./polynom\";\r\nimport Monom from \"./monom\";\r\nimport {Random} from \"../random/random\";\r\n\r\nexport default class LinearSystem {\r\n    private _solutions: { [letter: string]: { value: Fraction, isReal: boolean, isVarnothing: boolean } };\r\n    private _resolutionSteps: LinearSystem[];\r\n    private _equations: Equation[];\r\n    private _letters: string[];\r\n\r\n    constructor(...equationStrings: string[]) {\r\n        this._equations = [];\r\n        this._letters = 'xy'.split('');\r\n\r\n        if (equationStrings !== undefined && equationStrings.length > 0) {\r\n            this.parse(...equationStrings);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isLinerarSystem() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equations(): Equation[] {\r\n        return this._equations;\r\n    }\r\n\r\n    set equations(value) {\r\n        this._equations = value;\r\n    }\r\n\r\n    get letters(): string {\r\n        return this._letters.join('')\r\n    }\r\n\r\n    set letters(value: string) {\r\n        this._letters = value.split('');\r\n    }\r\n\r\n    get isSolvable(): boolean {\r\n        let V = this.variables;\r\n\r\n        // TODO: in some case, it is possible to resolve systems if there isn't the isSame number of vars and equations\r\n        if (V.length !== this._equations.length) {\r\n            return false;\r\n        }\r\n\r\n        //TOOD: Must check if two equations isn't a linear combination of the others ?\r\n\r\n        return true;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n        for (let E of this._equations) {\r\n            V = V.concat(E.variables);\r\n        }\r\n        return [...new Set(V)].sort();\r\n    }\r\n\r\n    get tex(): string {\r\n        // Build the array of values.\r\n        // Reorder\r\n        // This clone the system :!!!\r\n        //TODO: Avoid cloning this linear system\r\n        let LS = this.clone().reorder(),\r\n            letters = LS.variables,\r\n            equStr: string[],\r\n            equArray: string[] = [],\r\n            m: Monom;\r\n\r\n        // TODO: Manage tex output of linear equations\r\n        for (let equ of LS.equations) {\r\n            equStr = [];\r\n            for (let L of letters) {\r\n                m = equ.left.monomByLetter(L);\r\n\r\n                if (equStr.length === 0) {\r\n                    equStr.push(m.isZero() ? '' : m.tex);\r\n                } else {\r\n                    equStr.push(m.isZero() ? '' : ((m.coefficient.sign() === 1) ? '+' : '') + m.tex);\r\n                }\r\n            }\r\n\r\n            // Add the equal sign\r\n            equStr.push('=');\r\n\r\n            // Add the right hand part of the equation (should be only a number, because it has been reorderd)\r\n            equStr.push(equ.right.tex);\r\n\r\n            // Add to the list.\r\n            equArray.push(equStr.join('&'));\r\n        }\r\n\r\n\r\n        return `\\\\left\\\\{\\\\begin{array}{${\"r\".repeat(letters.length)}cl}${equArray.join('\\\\\\\\\\ ')}\\\\end{array}\\\\right.`;\r\n        //return `\\\\left\\\\{\\\\begin{array}{rrrcl}${this._equations.map(equ => `${equ.tex}`).join('\\\\\\\\\\ \\n')}\\\\end{array}\\\\right.`;\r\n    }\r\n\r\n    get texSolution(): string {\r\n        let tex: string[] = [];\r\n\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n\r\n        for (let letter in this._solutions) {\r\n            if (this._solutions[letter].isReal) {\r\n                console.log(`Undetermined (letter ${letter})`);\r\n                return;\r\n            }\r\n            if (this._solutions[letter].isVarnothing) {\r\n                console.log(`Undefined (letter ${letter})`);\r\n                return;\r\n            }\r\n\r\n            tex.push(this._solutions[letter].value.dfrac);\r\n        }\r\n        return `(${tex.join(';')})`;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...equations: any[]): LinearSystem => {\r\n        this._equations = equations.map(value => new Equation(value));\r\n        this._findLetters();\r\n        return this;\r\n    };\r\n\r\n    setCoefficient = (...coefficients: string[]): LinearSystem => {\r\n        // Reset the equations list\r\n        this._equations = [];\r\n\r\n        let i = 0;\r\n        while (i < coefficients.length - this._letters.length) {\r\n            let left = new Polynom().parse(this._letters.join(''), ...coefficients.slice(i, i + this._letters.length)),\r\n                right = new Polynom(coefficients[i + this._letters.length].toString()),\r\n                equ = new Equation().create(left, right);\r\n            this._equations.push(equ.clone());\r\n\r\n            i = i + this._letters.length + 1;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): LinearSystem => {\r\n        return new LinearSystem().parse(...this._equations.map(equ => equ.clone()));\r\n    };\r\n\r\n    setLetters = (...letters: string[]): LinearSystem => {\r\n        this._letters = letters;\r\n        return this\r\n    }\r\n    private _findLetters = (): LinearSystem => {\r\n        // Find all letters used.\r\n        let variables = new Set();\r\n\r\n        for (let equ of this._equations) {\r\n            variables = new Set([...variables, ...equ.variables]);\r\n        }\r\n\r\n        // TODO: How to transform (Set of string) to string[]\r\n        // @ts-ignore\r\n        this._letters = [...variables];\r\n        return this;\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n    // -----------------------------------------------\r\n    generate = (...solutions: Fraction[] | number[]): LinearSystem => {\r\n        let solutionsF: Fraction[] = [];\r\n\r\n        // Convert the numbers to fractions if necessary\r\n        for (let s of solutions) {\r\n            if (typeof s === \"number\") {\r\n                solutionsF.push(new Fraction(s.toString()));\r\n            } else {\r\n                solutionsF.push(s.clone());\r\n            }\r\n        }\r\n\r\n        // Create the equations and make sure they are not linear combined.\r\n        this._equations = [];\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            this._equations.push(this._generateOneEquation(...solutionsF));\r\n        }\r\n        return this;\r\n    };\r\n    private _generateOneEquation = (...solutions: Fraction[]): Equation => {\r\n        let coeff: number[] = [], leftValue: Fraction = new Fraction().zero(),\r\n            letters: string[] = ['x', 'y', 'z', 't', 'u', 'v', 'w', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],\r\n            equString: string = '', equ: Equation;\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            coeff.push(Random.numberSym(5));\r\n            leftValue.add(solutions[i].clone().multiply(coeff[i]));\r\n            equString += `${(coeff[i] < 0) ? coeff[i] : '+' + coeff[i]}${letters[i]}`\r\n        }\r\n\r\n        // LeftValue contains the left part oof the equation - and is then the isSame as the right part.\r\n        // It might be a Fraction.\r\n\r\n        // Must check if it's not a linear combination\r\n        equ = new Equation(`${equString}=${leftValue.display}`);\r\n        if (equ.right.monoms[0].coefficient.denominator != 1) {\r\n            equ.multiply(new Fraction(equ.right.monoms[0].coefficient.denominator, 1));\r\n        }\r\n        if (this._checkIfLinerCombination(equ)) {\r\n            return equ;\r\n        } else {\r\n            return this._generateOneEquation(...solutions);\r\n        }\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    private _linearReduction(eq1: Equation, eq2: Equation, letter: string): Equation {\r\n        // TODO: handle other signs for equations ?\r\n        // Get the monom for the particular letter.\r\n        let c1 = eq1.left.monomByDegree(1, letter).coefficient.clone(),\r\n            c2 = eq2.left.monomByDegree(1, letter).coefficient.clone().opposed();\r\n\r\n        return this.mergeEquations(eq1, eq2, c2, c1);\r\n    }\r\n\r\n    mergeEquations = (eq1: Equation, eq2: Equation, factor1: any, factor2: any): Equation => {\r\n        // Set and clone the equations.\r\n\r\n        let eq1multiplied = eq1.clone().multiply(new Fraction(factor1)),\r\n            eq2multiplied = eq2.clone().multiply(new Fraction(factor2));\r\n\r\n        // Add both equations together.\r\n        eq1multiplied.left.add(eq2multiplied.left);\r\n        eq1multiplied.right.add(eq2multiplied.right);\r\n\r\n        return eq1multiplied;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Solvers algorithm\r\n    // ------------------------------------------\r\n    reorder = (): LinearSystem => {\r\n        for (let E of this._equations) {\r\n            E.reorder();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    solve = (): LinearSystem => {\r\n        // Solve it by linear\r\n        this._solutions = {};\r\n        this._resolutionSteps = [];\r\n\r\n        // Reorder all equations.\r\n        this.reorder();\r\n\r\n        // Get all variables in the linear system\r\n        let V = this.variables.sort();\r\n\r\n        for (let letter of V) {\r\n            this._solutions[letter] = this._solveOneLetter(letter, V)\r\n        }\r\n\r\n        // TODO: LinearSystem - solve: optimization and handle undetermined and undefined systems.\r\n        return this;\r\n    };\r\n\r\n    private _checkIfLinerCombination = (equ: Equation): boolean => {\r\n\r\n        return true;\r\n    };\r\n\r\n    private _solveOneLetter(letter: string, V: string[]): { value: Fraction, isReal: boolean, isVarnothing: boolean } {\r\n        // list of equations.\r\n        let LE: Equation[] = this.clone().equations,\r\n            reducedEquations: Equation[] = [];\r\n\r\n        // Reduce the equations.\r\n        // Do it as long as there is more than one step, but no more than the number of equations.\r\n        for (let L of V) {\r\n            // remove the setLetter from all equations using linear combinations\r\n            if (L === letter) {\r\n                continue;\r\n            }\r\n\r\n            // Linear reduction.\r\n            // TODO: Search for better association\r\n            for (let i = 0; i < LE.length - 1; i++) {\r\n                reducedEquations.push(this._linearReduction(LE[i], LE[i + 1], L));\r\n            }\r\n\r\n            // Keep track of each steps.\r\n            this._resolutionSteps.push(new LinearSystem().parse(...reducedEquations));\r\n\r\n            // Set the list of equations to the new version.\r\n            LE = this._resolutionSteps[this._resolutionSteps.length - 1].clone().equations;\r\n\r\n            // Reset the stack\r\n            reducedEquations = [];\r\n        }\r\n\r\n        // Solve the equations\r\n        let E = this._resolutionSteps[this._resolutionSteps.length - 1].equations[0];\r\n        E.solve();\r\n\r\n        return {\r\n            value: new Fraction(E.solutions[0]),\r\n            isReal: E.isReal,\r\n            isVarnothing: E.isVarnothing\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Helpers\r\n    // ------------------------------------------\r\n    log = (): string => {\r\n        let str: string = '';\r\n\r\n        for (let E of this._equations) {\r\n            console.log(E.tex);\r\n            str += `${E.tex}\\\\n}`;\r\n        }\r\n\r\n        return str;\r\n    };\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport Fraction from \"../coefficients/fraction\";\r\nimport Numeric from \"../numeric\";\r\n\r\nexport default class Vector {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n\r\n    constructor(...values: any) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n    };\r\n\r\n    get isVector() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get normSquare(): Fraction {\r\n        return this._x.clone().pow(2).add(this._y.clone().pow(2));\r\n    }\r\n\r\n    get norm(): number {\r\n        return Math.sqrt(this.normSquare.value);\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\begin{pmatrix}${this._x.tex} \\\\\\\\\\ ${this._y.tex} \\\\end{pmatrix}`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Vector => {\r\n        // TODO: Must be more strict about what is given and limit to two dimensional vectors.p\r\n        // Maybe more than one value was given...\r\n        // Initialize the vector\r\n        this.zero();\r\n\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        if (values.length === 1) {\r\n            if (values[0].isVector) {\r\n                return values[0].clone()\r\n            } else {\r\n                return this._parseString(values[0])\r\n            }\r\n        }\r\n\r\n        if (values.length >= 2) {\r\n            // Two points are given - skip the third value.\r\n            if (values[0].isPoint && values[1].isPoint) {\r\n                this._x = values[1].x.clone().subtract(values[0].x)\r\n                this._y = values[1].y.clone().subtract(values[0].y)\r\n                return this;\r\n            }\r\n\r\n            // Fractions or a number are give\r\n            if (values[0].isFraction || !isNaN(values[0])) {\r\n                this._x = new Fraction(values[0])\r\n            }\r\n            if (values[1].isFraction || !isNaN(values[1])) {\r\n                this._y = new Fraction(values[1])\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Vector => {\r\n        let V = new Vector();\r\n\r\n        if (this._x !== null) {\r\n            V.x = this._x.clone();\r\n        }\r\n        if (this._y !== null) {\r\n            V.y = this._y.clone();\r\n        }\r\n        return V;\r\n    }\r\n\r\n    reset = (): Vector => {\r\n        this._x = null;\r\n        this._y = null;\r\n        return this;\r\n    }\r\n\r\n    zero = (): Vector => {\r\n        this.reset();\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    one = (): Vector => {\r\n        this._x = new Fraction();\r\n        this._y = new Fraction();\r\n        return this;\r\n    }\r\n\r\n    private _parseString = (value: string): Vector => {\r\n        // Split comma, semi colon or single space.\r\n        let components = value.split(/[,;\\s]/g);\r\n\r\n        // Validate the fraction values.\r\n        this.x = new Fraction(components[0] || null);\r\n        this.y = new Fraction(components[1] || null);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Vector => {\r\n        this._x.opposed();\r\n        this._y.opposed();\r\n        return this;\r\n    }\r\n\r\n    add = (V: Vector): Vector => {\r\n        this._x.add(V.x);\r\n        this._y.add(V.y);\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (V: Vector): Vector => {\r\n        return this.add(V.clone().opposed());\r\n    }\r\n\r\n    scalarProductWithVector = (V: Vector): Fraction => {\r\n        // TODO: Add the scalar factor !!!!\r\n        return this._x.clone().multiply(V.x).add(this._y.clone().multiply(V.y));\r\n    }\r\n\r\n    static scalarProduct = (v1: Vector, v2: Vector): number => {\r\n        // TODO: Transform to fraction with nthroot.\r\n        return  v1.x.value * v2.x.value + v1.y.value * v2.y.value;\r\n    };\r\n\r\n    normal = (): Vector => {\r\n        let x = this.x.clone().opposed(), y = this.y.clone();\r\n        this._x = y;\r\n        this._y = x;\r\n        return this;\r\n    }\r\n\r\n    isNormalTo = (v: Vector): boolean => {\r\n        return this.scalarProductWithVector(v).isZero()\r\n    }\r\n\r\n    multiplyByScalar = (k: any): Vector => {\r\n        let scalar = new Fraction(k);\r\n        this._x.multiply(scalar);\r\n        this._y.multiply(scalar);\r\n        return this;\r\n    }\r\n\r\n    divideByScalar = (k:any): Vector => {\r\n        return this.multiplyByScalar(new Fraction(k).invert());\r\n    }\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    simplify = (): Vector => {\r\n        // Multiply by the lcm of denominators.\r\n        return this.multiplyByScalar(Numeric.lcm(this._x.denominator, this._y.denominator))\r\n            .divideByScalar(Numeric.gcd(this._x.numerator, this._y.numerator));\r\n    }\r\n\r\n    angleWith = (V: Vector, sharp?: Boolean, radian?: Boolean): number => {\r\n        let scalar = this.scalarProductWithVector(V).value,\r\n            toDegree = radian ? 1 : 180 / Math.PI;\r\n        if (sharp) {\r\n            scalar = Math.abs(scalar);\r\n        }\r\n\r\n        return toDegree * Math.acos(scalar / (this.norm * V.norm));\r\n    }\r\n}\r\n","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport Fraction from \"../coefficients/fraction\";\r\n\r\n//TODO: Ajouter une vérification si la droite existe.\r\nexport default class Point {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n    private _exist: Boolean;\r\n\r\n    constructor(...values: any) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this\r\n    };\r\n\r\n    get isPoint() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.tex);\r\n        pts.push(this._y.tex);\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Point => {\r\n        // Initialize the value.\r\n        this.zero();\r\n\r\n        // Nothing is given\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        // One element is given - might be already a point !\r\n        if (values.length === 1) {\r\n            // it's already a point - clone it\r\n            if (values[0] instanceof Point) {\r\n                this._x = values[0].x.clone()\r\n                this._y = values[0].y.clone()\r\n                return this;\r\n            }\r\n\r\n            // Value is given as string, comma separated.\r\n            if(typeof values[0] === 'string'){\r\n                let xy = values[0].split(',')\r\n                if(xy.length===2){\r\n                    this._x = new Fraction(xy[0]).reduce()\r\n                    this._y = new Fraction(xy[1]).reduce()\r\n                    return this;\r\n                }\r\n            }\r\n\r\n            // Value given as an object with {x: value, y: value}\r\n            if (values[0].x !== undefined && values[0].y !== undefined) {\r\n                this._x = new Fraction(values[0].x).reduce()\r\n                this._y = new Fraction(values[0].y).reduce()\r\n            } else {\r\n                return this.zero();\r\n            }\r\n        }\r\n        if (values.length === 2) {\r\n            this._x = new Fraction(values[0]).reduce()\r\n            this._y = new Fraction(values[1]).reduce()\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Point => {\r\n        this._x = this._x.clone()\r\n        this._y = this._y.clone()\r\n\r\n        return this\r\n    }\r\n\r\n    zero = (): Point => {\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    origin = (): Point => {\r\n        this.zero();\r\n        return this;\r\n    }\r\n\r\n    middleOf = (P1: Point, P2: Point): Point => {\r\n        this._x = P1.x.clone().add(P2.x).divide(2);\r\n        this._y = P1.y.clone().add(P2.y).divide(2);\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Display functions\r\n    // ------------------------------------------\r\n    texValues = (numberOfDigits: number): string => {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.value.toFixed(numberOfDigits===undefined?2:numberOfDigits));\r\n        pts.push(this._y.value.toFixed(numberOfDigits===undefined?2:numberOfDigits));\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Static functions\r\n    // ------------------------------------------\r\n    static pmatrix = (a: any, b: any, c?: any): string => {\r\n        if (c === undefined) {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\end{pmatrix}`;\r\n        } else {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\\\\\ ${c.tex ? c.tex : c} \\\\end{pmatrix}`;\r\n        }\r\n    };\r\n\r\n}\r\n","/**\r\n * This class works for 2d line in a plane.\r\n */\r\n\r\nimport Fraction from \"../coefficients/fraction\";\r\nimport Vector from \"./vector\";\r\nimport Point from \"./point\";\r\nimport Polynom from \"../algebra/polynom\";\r\nimport Numeric from \"../numeric\";\r\nimport Equation from \"../algebra/equation\";\r\n\r\nexport default class Line {\r\n    // A line is defined as the canonical form\r\n    // ax + by + c = 0\r\n    private _a: Fraction;\r\n    private _b: Fraction;\r\n    private _c: Fraction;\r\n    private _OA: Point;\r\n    private _d: Vector;\r\n    private _n: Vector;\r\n    private _exists: boolean\r\n\r\n    constructor(...values: any) {\r\n\r\n        this._exists = false;\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isLine():boolean {return true;}\r\n    get exists(): boolean {return this._exists; }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equation(): Equation {\r\n        return new Equation(new Polynom().parse('xy', this._a, this._b, this._c), new Polynom('0')).simplify();\r\n    }\r\n    get tex(): { canonical: string, mxh: string, parametric: string } {\r\n        // canonical    =>  ax + by + c = 0\r\n        // mxh          =>  y = -a/b x - c/b\r\n        // parametric   =>  (xy) = OA + k*d\r\n\r\n        let canonical = this.equation;\r\n        // Make sur the first item is positive.\r\n        if(this._a.isNegative()){\r\n            canonical.multiply(-1);\r\n        }\r\n\r\n        return {\r\n            canonical: canonical.tex,\r\n            mxh: this.slope.isInfinity() ? 'x=' + this.OA.x.tex : 'y=' + new Polynom().parse('x', this.slope, this.height).tex,\r\n            parametric: `${Point.pmatrix('x', 'y')} = ${Point.pmatrix(this._OA.x, this._OA.y)} + k\\\\cdot ${Point.pmatrix(this._d.x, this._d.y)}`\r\n        }\r\n    }\r\n\r\n    get a(): Fraction {\r\n        return this._a;\r\n    }\r\n\r\n    set a(value: Fraction) {\r\n        this._a = value;\r\n    }\r\n\r\n    get b(): Fraction {\r\n        return this._b;\r\n    }\r\n\r\n    set b(value: Fraction) {\r\n        this._b = value;\r\n    }\r\n\r\n    get c(): Fraction {\r\n        return this._c;\r\n    }\r\n\r\n    set c(value: Fraction) {\r\n        this._c = value;\r\n    }\r\n\r\n    get OA(): Point {\r\n        return this._OA;\r\n    }\r\n\r\n    set OA(value: Point) {\r\n        this._OA = value;\r\n    }\r\n\r\n    get d(): Vector {\r\n        return this._d;\r\n    }\r\n\r\n    get n(): Vector {\r\n        return this._n;\r\n    }\r\n\r\n    get normal(): Vector {\r\n        return new Vector(this._a, this._b);\r\n    }\r\n\r\n    set d(value: Vector) {\r\n        this._d = value;\r\n    }\r\n\r\n    get slope(): Fraction {\r\n        return this._a.clone().opposed().divide(this._b);\r\n    }\r\n\r\n    get height(): Fraction {\r\n        return this._c.clone().opposed().divide(this._b);\r\n    }\r\n\r\n// ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...values: any): Line => {\r\n        this._exists = false;\r\n\r\n        if (values.length === 3) {\r\n            return this.parseByCoefficient(values[0], values[1], values[2]);\r\n        } else if (values.length === 2) {\r\n            if (values[0].isPoint && values[1].isVector) {\r\n                return this.parseByPointAndVector(values[0], values[1]);\r\n            } else if (values[0].isPoint && values[1].isPoint) {\r\n                return this.parseByPointAndVector(values[0], new Vector(values[0], values[1]));\r\n            }\r\n        } else if (values.length === 1){\r\n            // It's a already a line - clone it !\r\n            if(values[0].isLine){\r\n                return values[0].clone();\r\n            }\r\n\r\n            // Maybe it's a string or an equation\r\n            let equ = new Equation(values[0]);\r\n            if(equ.isEquation){\r\n                // Check if it's a valid equation.\r\n                equ.reorder(true)\r\n\r\n                // It must contain either x, y or both.\r\n                let letters = new Set(equ.letters());\r\n\r\n                // No 'x', no 'y' in the equations\r\n                if(!(letters.has('x') || letters.has('y'))){return;}\r\n\r\n                // Another letter in the equation.\r\n                for(let elem of ['x', 'y']){\r\n                    if(letters.has(elem)){\r\n                        letters.delete(elem)}\r\n                }\r\n\r\n                if(letters.size>0){\r\n                    console.log('Extra variable in the equation.')\r\n                    return this;\r\n                }\r\n\r\n                // Everything should be ok now...\r\n                return this.parseByCoefficient(equ.left.monomByLetter('x').coefficient, equ.left.monomByLetter('y').coefficient, equ.left.monomByDegree(0).coefficient)\r\n            }\r\n        }\r\n        // TODO: Add the ability to create line from a normal vector\r\n        console.log('Someting wrong happend while creating the line')\r\n        return this;\r\n    }\r\n\r\n    parseByCoefficient = (a: Fraction, b: Fraction, c: Fraction): Line => {\r\n        this._a = new Fraction(a);\r\n        this._b = new Fraction(b);\r\n        this._c = new Fraction(c);\r\n\r\n        // TODO: initialize direction and reference point\r\n        this._d = new Vector(this._b.clone(), this._a.clone().opposed());\r\n        this._OA = new Point(new Fraction().zero(), this._c.clone());\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    parseByPointAndVector = (P: Point, d: Vector): Line => {\r\n        // OX = OP + k*d\r\n        // x = px + kdx     * dy\r\n        // y = py + kdy     * dx\r\n        // ------------------\r\n        // dy * x = px * dy + kdxdy\r\n        // dx * y = py * dx + kdxdy\r\n        // ------------------\r\n        // dy * x - dx * y = px * dy - py * dx\r\n        // dy * x - dx * y - (px * dy - py * dx) = 0\r\n        this.parseByCoefficient(\r\n            d.y,\r\n            d.x.clone().opposed(),\r\n            P.x.clone().multiply(d.y).subtract(P.y.clone().multiply(d.x)).opposed()\r\n        )\r\n\r\n        // Choose the current values as point and direction vector instead of the automatic version.\r\n        this._OA = P.clone();\r\n        this._d = d.clone();\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    clone = (): Line => {\r\n        this._a = this._a.clone();\r\n        this._b = this._b.clone();\r\n        this._c = this._c.clone();\r\n\r\n        this._d = this._d.clone();\r\n        this._OA = this._OA.clone();\r\n        this._n = this._n.clone();\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    isParellelTo = (line: Line): Boolean => {\r\n        // Do they have the isSame direction ?\r\n        return this.slope.isEqual(line.slope) && this.height.isDifferent(line.height);\r\n    }\r\n    isSameAs = (line: Line): Boolean => {\r\n        return this.slope.isEqual(line.slope) && this.height.isEqual(line.height);\r\n    }\r\n    simplifyDirection = (): Line => {\r\n        let lcm = Numeric.lcm(this._d.x.denominator, this._d.y.denominator),\r\n            gcd = Numeric.gcd(this._d.x.numerator, this._d.y.numerator);\r\n\r\n        this._d.x.multiply(lcm).divide(gcd);\r\n        this._d.y.multiply(lcm).divide(gcd);\r\n        return this;\r\n    }\r\n    intersection = (line: Line): { point: Point, hasIntersection: boolean, isParallel: boolean, isSame: boolean } => {\r\n        let Pt = new Point(), isParallel = false, isSame = false, hasIntersection = true;\r\n\r\n        // this         => ax+by+c = 0\r\n        // line         => dx+ey+f = 0\r\n        //\r\n        //  aex + bey + ce = 0\r\n        //  dbx + bey + bf = 0\r\n        // (ae-db)x + ce-bf = 0\r\n        //\r\n        //  adx + bdy + cd = 0\r\n        //  adx + aey + af = 0\r\n        // (bd-ae)y + (cd-af)\r\n        //\r\n        // x = (bf-ce)/(ae-db)\r\n        // y = (af-cd)/(bd-ae)\r\n\r\n\r\n        // Theres is no 'y'\r\n        if (this._b.isZero() || line.b.isZero()) {\r\n            // TODO : handle no y in the line canonical form\r\n        }\r\n\r\n        if (this.isParellelTo(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isParallel = true;\r\n        } else if (this.isSameAs(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isSame = true;\r\n        } else {\r\n            Pt.x = this._b.clone().multiply(line.c).subtract(this._c.clone().multiply(line.b))\r\n                .divide(this._a.clone().multiply(line.b).subtract(this._b.clone().multiply(line.a)));\r\n            Pt.y = this._a.clone().multiply(line.c).subtract(this._c.clone().multiply(line.a))\r\n                .divide(this._b.clone().multiply(line.a).subtract(this._a.clone().multiply(line.b)));\r\n        }\r\n\r\n        return {\r\n            point: Pt,\r\n            hasIntersection: !(isParallel || isSame),\r\n            isParallel,\r\n            isSame\r\n        };\r\n    }\r\n\r\n    distanceTo(pt: Point): { value: number, fraction: Fraction, tex: string } {\r\n        let numerator = pt.x.clone().multiply(this._a)\r\n                .add(pt.y.clone().multiply(this._b))\r\n                .add(this._c).abs(),\r\n            d2 = this.normal.normSquare;\r\n\r\n        // The denominator is null - shouldn't be possible\r\n        if (d2.isZero()) {\r\n            return {\r\n                value: NaN,\r\n                tex: 'Not a line',\r\n                fraction: new Fraction().infinite()\r\n            }\r\n        }\r\n        // The denominator is a perfect square - simplify the tex result\r\n        let value = numerator.value / Math.sqrt(d2.value),\r\n            F = numerator.clone().divide(d2.clone().sqrt());\r\n\r\n        // The denominator is a perfect square.\r\n        if (d2.isSquare()) {\r\n            return {\r\n                value,\r\n                tex: F.tex,\r\n                fraction: F\r\n            }\r\n        }\r\n        // Complete answer...\r\n        return {\r\n            value,\r\n            tex: `\\\\frac{${numerator.tex}}{\\\\sqrt{${d2.tex}}}`,\r\n            fraction: F\r\n        };\r\n    }\r\n\r\n    hitSegment(A: Point, B: Point): boolean {\r\n        let iPt = this.intersection(\r\n            new Line(A, B)\r\n        )\r\n\r\n        // There is an intersection point\r\n        if(iPt.hasIntersection) {\r\n            return iPt.point.x.value >= Math.min(A.x.value, B.x.value)\r\n                && iPt.point.x.value <= Math.max(A.x.value, B.x.value)\r\n                && iPt.point.y.value >= Math.min(A.y.value, B.y.value)\r\n                && iPt.point.y.value <= Math.max(A.y.value, B.y.value)\r\n        }\r\n        return false;\r\n    }\r\n    // ------------------------------------------\r\n    // Special functions\r\n    // ------------------------------------------\r\n    canonicalAsFloatCoefficient(decimals: number): string{\r\n        if(decimals===undefined){\r\n            decimals = 2;\r\n        }\r\n\r\n        let ca = this._a.value,\r\n            cb = this._b.value,\r\n            cc= this._c.value,\r\n            canonical = '';\r\n\r\n        if(!this._a.isZero()){\r\n            if(this._a.isOne()){\r\n                canonical = 'x'\r\n            }else if(this._a.clone().opposed().isOne()){\r\n                canonical = '-x'\r\n            }else{\r\n                canonical = this._a.value.toFixed(decimals)+'x'\r\n            }\r\n        }\r\n\r\n        if(!this._b.isZero()){\r\n            if(this._b.isPositive()){canonical+='+'}\r\n            canonical += this._b.value.toFixed(decimals) + 'y'\r\n        }\r\n\r\n        if(!this._c.isZero()){\r\n            if(this._c.isPositive()){canonical+='+'}\r\n            canonical += this._c.value.toFixed(decimals)\r\n        }\r\n\r\n\r\n        return canonical + '=0';\r\n    }\r\n}","import Numeric from \"./maths/numeric\";\r\nimport Shutingyard from \"./maths/shutingyard\";\r\nimport Fraction from \"./maths/coefficients/fraction\";\r\nimport Nthroot from \"./maths/coefficients/nthroot\";\r\nimport Monom from \"./maths/algebra/monom\";\r\nimport Polynom from \"./maths/algebra/polynom\";\r\nimport Equation from \"./maths/algebra/equation\";\r\nimport LinearSystem from \"./maths/algebra/linearSystem\";\r\nimport Line from \"./maths/geometry/line\";\r\nimport Circle from \"./maths/geometry/circle\";\r\nimport Logicalset from \"./maths/algebra/logicalset\";\r\nimport Rational from \"./maths/algebra/rational\";\r\nimport {Random} from \"./maths/random/random\";\r\nimport Triangle from \"./maths/geometry/triangle\";\r\nimport Point from \"./maths/geometry/point\";\r\nimport Vector from \"./maths/geometry/vector\";\r\n\r\n// Expose as global\r\n// export let Pi = {\r\n(<any>window).Pi = {\r\n    ShutingYard: Shutingyard,\r\n    Numeric: Numeric,\r\n    Fraction: Fraction,\r\n    Root: Nthroot,\r\n    Monom: Monom,\r\n    Polynom: Polynom,\r\n    Equation: Equation,\r\n    LinearSystem: LinearSystem,\r\n    Rational: Rational,\r\n    Logicalset: Logicalset,\r\n    Random: Random,\r\n    Geometry: {\r\n        Vector: Vector,\r\n        Point: Point,\r\n        Line: Line,\r\n        Triangle: Triangle,\r\n        Circle: Circle\r\n    }\r\n};\r\n","/**\r\n * Rational polynom module contains everything necessary to handle rational polynoms.\r\n * @module Polynom\r\n */\r\n\r\nimport Polynom from \"./polynom\";\r\nimport Fraction from \"../coefficients/fraction\";\r\n\r\n/**\r\n * Rational class can handle rational polynoms\r\n */\r\nexport default class Rational {\r\n    private _rawString: string;\r\n    private _numerator: Polynom;\r\n    private _denominator: Polynom;\r\n\r\n    /**\r\n     *\r\n     * @param numerator\r\n     * @param denominator\r\n     */\r\n    constructor(numerator?: Polynom, denominator?: Polynom) {\r\n        this._numerator = numerator?numerator.clone():new Polynom();\r\n        this._denominator = denominator?denominator.clone():new Polynom();\r\n    }\r\n\r\n    clone = (): Rational => {\r\n        this._numerator = this._numerator.clone()\r\n        this._denominator = this._denominator.clone()\r\n\r\n        return this;\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\dfrac{ ${this._numerator.tex} }{ ${this._denominator.tex} }`;\r\n    }\r\n\r\n    get texFactors(): string {\r\n        this._numerator.factorize()\r\n        this._denominator.factorize()\r\n\r\n        return `\\\\dfrac{ ${this._numerator.texFactors} }{ ${this._denominator.texFactors} }`\r\n    }\r\n\r\n    get numerator(): Polynom {\r\n        return this._numerator\r\n    }\r\n    get denominator(): Polynom {\r\n        return this._denominator\r\n    }\r\n\r\n    domain = (): string => {\r\n        let zeroes = this._denominator.getZeroes();\r\n        if( zeroes.length===0 || zeroes[0]===false){\r\n            return '\\\\mathbb{R}'\r\n        }else if(zeroes[0]===true){\r\n            return '\\\\varnothing'\r\n        }else{\r\n            return '\\\\mathbb{R}\\\\setminus\\\\left{'+\r\n                zeroes.map(x=> {\r\n                    return (typeof x === 'boolean')?'':x.frac\r\n                    })\r\n                    .join(';')+'\\\\right}'\r\n        }\r\n    }\r\n\r\n    amplify = (P: Polynom): Rational => {\r\n        this._numerator.multiply(P);\r\n        this._denominator.multiply(P);\r\n\r\n        return this;\r\n    }\r\n\r\n    simplify = (P: Polynom): Rational => {\r\n        let NumeratorEuclidien = this._numerator.euclidian(P);\r\n        if(!NumeratorEuclidien.reminder.isZero()){return this;}\r\n\r\n        let DenominatorEuclidien = this._denominator.euclidian(P);\r\n        if(!DenominatorEuclidien.reminder.isZero()){return this;}\r\n\r\n        this._numerator = NumeratorEuclidien.quotient;\r\n        this._denominator = DenominatorEuclidien.quotient;\r\n        return this;\r\n    }\r\n\r\n    reduce = (): Rational => {\r\n        console.log(this._numerator.tex)\r\n        this._numerator.factorize();\r\n        console.log(this._numerator.factors.map(x => x.tex))\r\n        for(let f of this._numerator.factors){\r\n            this.simplify(f);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    opposed = (): Rational => {\r\n        this._numerator.opposed();\r\n        return this;\r\n    }\r\n    add = (R: Rational): Rational => {\r\n        // 1. Make sure both rational are at the same denominator\r\n        // 2. Add the numerators.\r\n        // 3. Simplify\r\n\r\n        // Store the adding denominator\r\n        let denominator = this._denominator.clone()\r\n\r\n        // Amplif the main rational polynom by the adding denominator\r\n        this.amplify(R._denominator)\r\n\r\n        // Add to the numerator the adding value...\r\n        this._numerator.add(R._numerator.clone().multiply(denominator));\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (R: Rational): Rational => {\r\n        return this.add(R.clone().opposed())\r\n    }\r\n\r\n    limits = (value: Fraction|number, letter?: string):Fraction|number => {\r\n        if(value===Infinity || value===-Infinity){\r\n            let N = this._numerator.monomByDegree(this._numerator.degree(letter), letter),\r\n                D = this._denominator.monomByDegree(this._denominator.degree(letter), letter)\r\n\r\n            N.divide(D)\r\n\r\n            if(N.degree(letter)>0){return N.coefficient.sign()*(Math.pow((value>0?1:-1),N.degree(letter)%2))===1?Infinity:-Infinity}\r\n            if(N.degree(letter)===0){return N.coefficient}\r\n            if(N.degree(letter)>0){return N.coefficient.sign()*(Math.pow(-1,N.degree(letter)%2))===1?0:-0}\r\n        }else{\r\n            return this._numerator.evaluate({letter: value}).divide(this._denominator.evaluate({letter: value}))\r\n        }\r\n    }\r\n}","/**\r\n * Polynom module contains everything necessary to handle polynoms.\r\n * @module Logicalset\r\n */\r\n\r\nimport Shutingyard from '../shutingyard';\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n */\r\nexport default class Logicalset {\r\n    private _rawString: string;\r\n    private _rpn: { token: string, tokenType: string }[]\r\n\r\n    /**\r\n     *\r\n     * @param {string} value (optional) Default polynom to parse on class creation\r\n     */\r\n    constructor(value: string) {\r\n        this._rawString = value\r\n        this.parse(value)\r\n        return this;\r\n    }\r\n\r\n    get isLogicalset() {\r\n        return true;\r\n    };\r\n\r\n    private parse = (value: string): Logicalset => {\r\n        // TODO: Must format the value string to convert some items...\r\n\r\n        // Parse the updated value to the shutingyard algorithm\r\n        this._rpn = new Shutingyard('set').parse(value).rpn;\r\n\r\n        return this;\r\n    }\r\n\r\n    evaluate(tokenSets: { [key: string]: any[] }, reference?: any[]): any[] {\r\n        let varStack: (Set<unknown>)[] = []\r\n\r\n        let referenceSet: Set<unknown>\r\n        if (reference === undefined) {\r\n            referenceSet = new Set()\r\n            for (let key in tokenSets) {\r\n                referenceSet = new Set([...referenceSet, ...tokenSets[key]])\r\n            }\r\n        } else {\r\n            referenceSet = new Set(reference)\r\n        }\r\n\r\n        for (let token of this._rpn) {\r\n            if (token.tokenType === 'variable') {\r\n                // The variable has no token - assume it's empty.\r\n                if (tokenSets[token.token] === undefined) {\r\n                    varStack.push(new Set())\r\n                } else {\r\n                    varStack.push(new Set(tokenSets[token.token]));\r\n                }\r\n\r\n            } else {\r\n                switch (token.token) {\r\n                    case '&':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            varStack.push(new Set([...first].filter(x => second.has(x))))\r\n                        }\r\n                        break\r\n                    case '|':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n                            varStack.push(new Set([...first, ...second]))\r\n                        }\r\n                        break\r\n                    case '-':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n                            varStack.push(new Set([...first].filter(x => !second.has(x))))\r\n                        }\r\n                        break\r\n                    case '!':\r\n                        if (varStack.length >= 1) {\r\n                            let first = varStack.pop()\r\n\r\n                            varStack.push(new Set([...referenceSet].filter(x => !first.has(x))))\r\n                        }\r\n                        break\r\n                }\r\n            }\r\n        }\r\n\r\n        return [...varStack[0]].sort();\r\n    }\r\n\r\n    vennAB(): any[] {\r\n        return this.evaluate({\r\n                A: ['A', 'AB'],\r\n                B: ['B', 'AB']\r\n            },\r\n            ['A', 'B', 'AB', 'E']\r\n        )\r\n    }\r\n\r\n    vennABC(): any[] {\r\n        return this.evaluate({\r\n                A: ['A', 'AB', 'AC', 'ABC'],\r\n                B: ['B', 'AB', 'BC', 'ABC'],\r\n                C: ['C', 'AC', 'BC', 'ABC']\r\n            },\r\n            ['A', 'B', 'C', 'AB', 'AC', 'BC', 'E']\r\n        )\r\n    }\r\n\r\n    get rpn(): { token: string, tokenType: string }[] {\r\n        return this._rpn\r\n    }\r\n\r\n    get tex(): string {\r\n        let varStack: { token:string, tokenType: string } [] = []\r\n\r\n        for (let token of this._rpn) {\r\n            if (token.tokenType === 'variable') {\r\n                varStack.push(token);\r\n            } else {\r\n                switch (token.token) {\r\n                    case '&':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if(first.tokenType==='mix'){first.token = `( ${first.token} )`}\r\n                            if(second.tokenType==='mix'){second.token = `( ${second.token} )`}\r\n                            varStack.push({token: `${first.token} \\\\cap ${second.token}`, tokenType: 'mix'})\r\n                        }\r\n                        break\r\n                    case '|':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if(first.tokenType==='mix'){first.token = `( ${first.token} )`}\r\n                            if(second.tokenType==='mix'){second.token = `( ${second.token} )`}\r\n                            varStack.push({token: `${first.token} \\\\cup ${second.token}`, tokenType: 'mix'})\r\n                        }\r\n                        break\r\n                    case '-':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if(first.tokenType==='mix'){first.token = `( ${first.token} )`}\r\n                            if(second.tokenType==='mix'){second.token = `( ${second.token} )`}\r\n                            varStack.push({token: `${first.token} \\\\setminus ${second.token}`, tokenType: 'mix'})\r\n                        }\r\n                        break\r\n                    case '!':\r\n                        if (varStack.length >= 1) {\r\n                            let first = varStack.pop()\r\n                            varStack.push({token: `\\\\overline{ ${first.token} }`, tokenType: 'variable'})\r\n                        }\r\n                        break\r\n                }\r\n            }\r\n        }\r\n\r\n        return varStack[0].token\r\n    }\r\n}\r\n","import Point from \"./point\";\r\nimport Fraction from \"../coefficients/fraction\";\r\nimport Vector from \"./vector\";\r\nimport Line from \"./line\";\r\nimport Equation from \"../algebra/equation\";\r\n\r\ninterface remarquableLines {\r\n    'medians': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'mediators': {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line,\r\n        'intersection': Point\r\n    },\r\n    'heights': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'bisectors': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    }\r\n}\r\n\r\nexport default class Triangle {\r\n    private _A: Point;\r\n    private _B: Point;\r\n    private _C: Point;\r\n    private _lines: {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line\r\n    };\r\n    private _middles: {\r\n        'AB': Point,\r\n        'AC': Point,\r\n        'BC': Point\r\n    };\r\n    private _remarquables: remarquableLines;\r\n\r\n\r\n    constructor(...values: any) {\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    get isTriangle():boolean {return true;}\r\n\r\n    // ------------------------------------------\r\n    // Getter and setters\r\n    // ------------------------------------------\r\n\r\n    get A(): Point {\r\n        return this._A;\r\n    }\r\n\r\n    get B(): Point {\r\n        return this._B;\r\n    }\r\n\r\n    get C(): Point {\r\n        return this._C;\r\n    }\r\n\r\n    get AB(): Vector {\r\n        return this.getSegment('A', 'B');\r\n    }\r\n\r\n    get BA(): Vector {\r\n        return this.getSegment('B', 'A');\r\n    }\r\n\r\n    get BC(): Vector {\r\n        return this.getSegment('B', 'C');\r\n    }\r\n\r\n    get CB(): Vector {\r\n        return this.getSegment('C', 'B');\r\n    }\r\n\r\n    get AC(): Vector {\r\n        return this.getSegment('A', 'C');\r\n    }\r\n\r\n    get CA(): Vector {\r\n        return this.getSegment('C', 'A');\r\n    }\r\n\r\n    get isRectangle(): boolean {\r\n        if (this.AB.isNormalTo(this.BC)) {\r\n            return true;\r\n        }\r\n        if (this.AB.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n        if (this.BC.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    get isEquilateral(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) &&\r\n            this.AB.normSquare.isEqual(this.AC.normSquare);\r\n    }\r\n\r\n    get isIsocele(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) ||\r\n            this.AB.normSquare.isEqual(this.AC.normSquare) ||\r\n            this.BC.normSquare.isEqual(this.AC.normSquare)\r\n    }\r\n\r\n    get lines(): { 'AB': Line, 'BC': Line, 'AC': Line } {\r\n        return this._lines;\r\n    }\r\n\r\n    get remarquables(): remarquableLines {\r\n        return this._remarquables;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Parse values to a triangle. Supported formats:\r\n     * Point, Point, Point\r\n     * x1, y1, x2, y2, x3, y3\r\n     * TODO: Something else ?\r\n     * @param values\r\n     */\r\n    parse = (...values: any): Triangle => {\r\n        if (values.length === 6) {\r\n            // Check if all values are number or fractions.\r\n            let v = values.map((x: any) => new Fraction(x));\r\n            return this.parse(\r\n                new Point(v[0], v[1]),\r\n                new Point(v[2], v[3]),\r\n                new Point(v[4], v[5]),\r\n            )\r\n        } else if (values.length === 3) {\r\n            // Possibilities:\r\n            // - Three points (or part of points, only dict for example, or array (TODO: Add the array syntax for point)\r\n            // - Three lines\r\n            // - Three lines as text.\r\n            if(values.filter((x:any) => typeof x === 'string').length===3) {\r\n                return this.parse( ...values.map((x:string) => new Line(x)) )\r\n            }else if(values.filter((x:any) => x.isLine === true).length===3) {\r\n                // We have three lines\r\n                this._lines = {\r\n                    'AB': values[0],\r\n                    'BC': values[1],\r\n                    'AC': values[2]\r\n                };\r\n\r\n                // Get the intersection points -> build the triangle using these intersection points.\r\n                let intersect = values[0].intersection(values[1]);\r\n                if (intersect.hasIntersection) {\r\n                    this._B = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[1].intersection(values[2]);\r\n                if (intersect.hasIntersection) {\r\n                    this._C = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[2].intersection(values[0]);\r\n                if (intersect.hasIntersection) {\r\n                    this._A = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n            }else {\r\n                // At least, one of the value is not a point.\r\n                if (values.filter((x: any) => x.isPoint === true).length < 3) {\r\n                    return this.parse(\r\n                        new Point(values[0]),\r\n                        new Point(values[1]),\r\n                        new Point(values[2])\r\n                    )\r\n                }\r\n\r\n                // We have three points.\r\n                this._A = values[0].clone();\r\n                this._B = values[1].clone();\r\n                this._C = values[2].clone();\r\n\r\n                this._lines = {\r\n                    'AB': new Line(this._A, this._B),\r\n                    'BC': new Line(this._B, this._C),\r\n                    'AC': new Line(this._A, this._C)\r\n                };\r\n            }\r\n        } else if (values.length === 1) {\r\n            if (values[0].isTriangle === true) {\r\n                return values[0].clone();\r\n            }\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the Triangle class\r\n     */\r\n    clone = (): Triangle => {\r\n        this._A = this._A.clone();\r\n        this._B = this._B.clone();\r\n        this._C = this._C.clone();\r\n\r\n        this._lines = {\r\n            'AB': this._lines.AB.clone(),\r\n            'BC': this._lines.BC.clone(),\r\n            'AC': this._lines.AC.clone()\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Triangle operations and properties\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Generate the Line object for the three segments of the triangle\r\n     */\r\n    private _updateTriangle = () => {\r\n        this._middles = {\r\n            'AB': new Point().middleOf(this._A, this._B),\r\n            'AC': new Point().middleOf(this._A, this._C),\r\n            'BC': new Point().middleOf(this._B, this._C)\r\n        }\r\n\r\n        this._remarquables = this._calculateRemarquableLines();\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the Point class for the given name\r\n     * @param ptName\r\n     */\r\n    private getPointByName = (ptName: string): Point => {\r\n        switch (ptName.toUpperCase()) {\r\n            case 'A':\r\n                return this._A;\r\n            case 'B':\r\n                return this._B;\r\n            case 'C':\r\n                return this._C;\r\n        }\r\n\r\n        // Something went wrong ! Return the first point\r\n        return this._A;\r\n    }\r\n    /**\r\n     * Get the vector for the segment given by name.\r\n     * @param ptName1\r\n     * @param ptName2\r\n     */\r\n    private getSegment = (ptName1: string, ptName2: string): Vector => {\r\n        return new Vector(\r\n            this.getPointByName(ptName1),\r\n            this.getPointByName(ptName2)\r\n        );\r\n    }\r\n\r\n    private _calculateRemarquableLines = (): remarquableLines => {\r\n        let remarquables: remarquableLines = {\r\n            'medians': {\r\n                'A': new Line(this._A, this._middles.BC),\r\n                'B': new Line(this._B, this._middles.AC),\r\n                'C': new Line(this._C, this._middles.AB),\r\n                'intersection': null\r\n            },\r\n            'mediators': {\r\n                'AB': new Line(this._middles.AB, new Vector(this._A, this._B).normal()),\r\n                'AC': new Line(this._middles.AC, new Vector(this._A, this._C).normal()),\r\n                'BC': new Line(this._middles.BC, new Vector(this._B, this._C).normal()),\r\n                'intersection': null\r\n            },\r\n            'heights': {\r\n                'A': new Line(this._A, new Vector(this._B, this._C).normal()),\r\n                'B': new Line(this._B, new Vector(this._A, this._C).normal()),\r\n                'C': new Line(this._C, new Vector(this._A, this._B).normal()),\r\n                'intersection': null\r\n            },\r\n            'bisectors': {\r\n                'A': this._calculateBisectors('A'),\r\n                'B': this._calculateBisectors('B'),\r\n                'C': this._calculateBisectors('C'),\r\n                'intersection': null\r\n            }\r\n        }\r\n\r\n        // As it's a triangle, we assume the lines are intersecting and aren't parallel or superposed.\r\n        remarquables.medians.intersection = remarquables.medians.A.intersection(remarquables.medians.B).point;\r\n        remarquables.mediators.intersection = remarquables.mediators.AB.intersection(remarquables.mediators.BC).point;\r\n        remarquables.heights.intersection = remarquables.heights.A.intersection(remarquables.heights.B).point;\r\n        remarquables.bisectors.intersection = remarquables.bisectors.A.intersection(remarquables.bisectors.B).point;\r\n\r\n        // Everything was calculated for the remarquable lines.\r\n        return remarquables;\r\n    }\r\n\r\n    private _calculateBisectors = (pt: string): Line => {\r\n        let tlines = this.lines, d1, d2;\r\n\r\n        if(pt==='A'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.AC;\r\n        }else if(pt==='B'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.BC;\r\n        }else if(pt==='C'){\r\n            d1 = tlines.BC;\r\n            d2 = tlines.AC;\r\n        }\r\n\r\n        let b1 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm)).reorder(true).simplify()),\r\n            b2 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm).opposed()).reorder(true).simplify());\r\n\r\n        // Must determine which bisectors is in the triangle\r\n        if(pt==='A'){\r\n            return b1.hitSegment(this.B, this.C)?b1:b2;\r\n        }\r\n        if(pt==='B'){\r\n            return b1.hitSegment(this.A, this.C)?b1:b2;\r\n        }\r\n        if(pt==='C'){\r\n            return b1.hitSegment(this.B, this.A)?b1:b2;\r\n        }\r\n\r\n        // Default returns the first bisector\r\n        return b1;\r\n    }\r\n}","import Point from \"./point\";\r\nimport Fraction from \"../coefficients/fraction\";\r\nimport Equation from \"../algebra/equation\";\r\nimport Polynom from \"../algebra/polynom\";\r\n\r\n\r\nexport default class Circle {\r\n    private _center: Point;\r\n    private _radius: Fraction;\r\n    private _exists: boolean;\r\n    constructor(...values: any) {\r\n        this._exists = false\r\n\r\n        if(values!==undefined){this.parse(...values)}\r\n    }\r\n\r\n    private parse(...values: any) {\r\n        if(values.length===2){\r\n            this._center = new Point(values[0])\r\n            this._radius = new Fraction(values[1])\r\n        }\r\n    }\r\n\r\n    get tex(): string {\r\n        let cx, cy\r\n        if(this._center.x.isZero()){\r\n            cx = 'x^2'\r\n        }else{\r\n            cx = `\\\\left(x-${this._center.x.tex}\\\\right)^2`\r\n        }\r\n        if(this._center.y.isZero()){\r\n            cy = 'y^2'\r\n        }else{\r\n            cy = `\\\\left(y-${this._center.y.tex}\\\\right)^2`\r\n        }\r\n        return `${cx}+${cy}=${this._radius.pow(2).tex}`\r\n    }\r\n\r\n    get developed():string {\r\n        let equ = new Equation(\r\n            new Polynom(`(x-(${this._center.x.display}))^2+(y-(${this._center.y.display}))^2`),\r\n            new Polynom(`${this._radius.pow(2).display}`)\r\n        )\r\n\r\n        return equ.moveLeft().tex;\r\n    }\r\n}"],"names":["Numeric","static","value","decimals","Number","Math","round","nb","primes","undefined","slice","max","length","D","maxV","sqrt","abs","i","push","sort","a","b","Set","values","gcd2","g","reduce","gcd","Shutingyard","_rpn","_mode","_tokenConfig","_uniformize","constructor","mode","this","tokenConfigInitialization","isOperation","token","match","precedence","associative","NextToken2","expr","start","tokenType","keys","Object","key","substr","console","log","NextToken","tokenMatch","Uniformizer","expr2","replace","fnToken","RegExp","parse","operators","outQueue","opStack","tokenPos","previousOpStatckLength","securityLoopLvl2","securityLoopLvl1","opTop","pop","concat","reverse","rpn","Fraction","_numerator","_denominator","denominatorOrPeriodic","isFraction","numerator","denominator","tex","display","frac","dfrac","S","split","map","x","isNaN","includes","NaN","isSafeInteger","p","toString","pow","floor","clone","F","zero","one","infinite","Infinity","invalid","opposed","add","N","subtract","multiply","Q","divide","invert","n","d","root","amplify","k","compare","sign","lesser","than","leq","greater","geq","isEqual","isDifferent","isOpposed","isInverted","isZero","isOne","isPositive","isNegative","isInfinity","isFinite","isSquare","isReduced","areEquals","Nthroot","_radical","_nth","_coefficient","_isValid","radical","nth","coefficient","C","nthroot","V","hasRadical","Monom","_literal","isMonom","literal","literalSqrt","isLitteralSquare","L","literalStr","inputStr","v","matchAll","variables","clean","letter","dividers","litterals","_getLitteralDividers","monomDividers","M","arr","tmpList","litt","item","currentLetter","displayWithSign","trim","setLetter","m","isSameAs","multiplyByNumber","M1","M2","K","filter","indexOf","hasLetter","degree","t","evaluate","r","tmpValues","derivative","dM","primitive","monoms","coeffN","coeffD","lcm","min","areSameAs","randomCore","_config","_defaultConfig","mergeConfig","config","defaultConfig","generate","rndMonom","userConfig","super","letters","fraction","Random","numberSym","number","rndPolynom","unit","factorable","allowNullMonom","numberOfMonoms","P","Polynom","empty","array","rndHelpers","percent","random","randomInt","randomBool","shuffleArray","randomArray","j","temp","polynom","monom","from","to","allowZero","randomIntSym","bool","randomItem","shuffle","_rawString","_monoms","_factors","_texString","polynomString","isPolynom","factors","texFactors","factorize","f","texString","genDisplay","raw","isMultiVariable","numberOfVars","output","forceSign","wrapParentheses","shutingYardToReducedPolynom","test","fractions","m1","m2","tempPolynom","stack","previousToken","element","_randomizeDefaults","randomizeDefaults","randomize","rndFactorable","factorUnit","multiplyByPolynom","multiplyByFraction","multiplyByMonom","multiplyByInteger","xmultiply","euclidian","quotient","reminder","reorder","maxMP","monomByDegree","degreeP","newM","MaxIteration","divideByFraction","divideByInteger","nbF","cP1","cP2","isOpposedAt","isFactorized","e","polynomStringNormalized","replaceAll","polynomStringReduced","polyFactors","splice","isDeveloped","replaceBy","resultPolynom","forEach","dP","integrate","valuesA","valuesB","factorize_OLD","maxValue","nbFactorsFound","commonMonom","commonPolynom","securityLoop","m1d","m2d","result","dividerPolynom","_factorize2ndDegree","P1","P2","c","delta","x1","x2","factor","xyzPolynom","xFactors","_factorizeByGroups","getZeroes","zeroes","zeroesAsTex","A","B","toFixed","z","monomsByDegree","Ms","monomByLetter","getDenominators","denominators","getNumerators","numerators","lcmDenominator","gcdDenominator","lcmNumerator","gcdNumerator","makeItComplicate","complexity","factorizePartial","mMain","mCheck","mFactor","pFactor","minify","canDivide","evalValue","Equation","_left","_right","_sign","_polynom","_solutions","_varnothing","_real","equations","isEquation","left","right","solutions","solution","join","isReal","solve","isVarnothing","signAsTex","_formatSign","equationString","pStr","strSign","_findSign","create","signStr","_reverseSign","opts","moveLeft","allLeft","mMove","simplify","isolate","cMove","_solveDegree1","_solveDegree2","_solveDegree3plus","isGreater","isStrictEqual","isAlsoEqual","m0","s","nthDelta","realX1","realX2","sX1","sX2","aF","bF","cF","LinearSystem","_resolutionSteps","_equations","_letters","equationStrings","isLinerarSystem","isSolvable","E","equStr","LS","equArray","equ","repeat","texSolution","_findLetters","setCoefficient","coefficients","setLetters","solutionsF","_generateOneEquation","coeff","leftValue","equString","_checkIfLinerCombination","_linearReduction","eq1","eq2","c1","c2","mergeEquations","factor1","factor2","eq1multiplied","eq2multiplied","_solveOneLetter","LE","reducedEquations","str","Vector","_x","_y","isVector","y","normSquare","norm","_parseString","isPoint","reset","components","scalarProductWithVector","v1","v2","normal","isNormalTo","multiplyByScalar","scalar","divideByScalar","angleWith","sharp","radian","toDegree","PI","acos","Point","_exist","pts","xy","origin","middleOf","texValues","numberOfDigits","Line","_a","_b","_c","_OA","_d","_n","_exists","isLine","exists","equation","canonical","mxh","slope","OA","height","parametric","pmatrix","parseByCoefficient","parseByPointAndVector","has","elem","delete","size","isParellelTo","line","simplifyDirection","intersection","Pt","isParallel","isSame","point","hasIntersection","distanceTo","pt","d2","hitSegment","iPt","canonicalAsFloatCoefficient","window","Pi","ShutingYard","Root","Rational","domain","NumeratorEuclidien","DenominatorEuclidien","R","limits","Logicalset","isLogicalset","tokenSets","reference","referenceSet","varStack","second","first","vennAB","vennABC","Geometry","Triangle","_A","_B","_C","_lines","_middles","_remarquables","isTriangle","AB","getSegment","BA","BC","CB","AC","CA","isRectangle","isEquilateral","isIsocele","lines","remarquables","intersect","_updateTriangle","_calculateRemarquableLines","getPointByName","ptName","toUpperCase","ptName1","ptName2","_calculateBisectors","medians","mediators","heights","bisectors","d1","tlines","b1","b2","Circle","_center","_radius","cx","cy","developed"],"sourceRoot":""}