{"version":3,"file":"pi.js","mappings":"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","sources":["webpack://pimath/./src/maths/algebra/equation.ts","webpack://pimath/./src/maths/algebra/index.ts","webpack://pimath/./src/maths/algebra/linearSystem.ts","webpack://pimath/./src/maths/algebra/logicalset.ts","webpack://pimath/./src/maths/algebra/monom.ts","webpack://pimath/./src/maths/algebra/polynom.ts","webpack://pimath/./src/maths/algebra/rational.ts","webpack://pimath/./src/maths/coefficients/fraction.ts","webpack://pimath/./src/maths/coefficients/index.ts","webpack://pimath/./src/maths/coefficients/nthroot.ts","webpack://pimath/./src/maths/geometry/circle.ts","webpack://pimath/./src/maths/geometry/index.ts","webpack://pimath/./src/maths/geometry/line.ts","webpack://pimath/./src/maths/geometry/point.ts","webpack://pimath/./src/maths/geometry/triangle.ts","webpack://pimath/./src/maths/geometry/vector.ts","webpack://pimath/./src/maths/numeric.ts","webpack://pimath/./src/maths/random/index.ts","webpack://pimath/./src/maths/random/randomCore.ts","webpack://pimath/./src/maths/random/rndFraction.ts","webpack://pimath/./src/maths/random/rndHelpers.ts","webpack://pimath/./src/maths/random/rndMonom.ts","webpack://pimath/./src/maths/random/rndPolynom.ts","webpack://pimath/./src/maths/shutingyard.ts","webpack://pimath/webpack/bootstrap","webpack://pimath/./src/main.ts"],"sourcesContent":["import {Polynom} from \"./polynom\";\r\nimport {Monom} from \"./monom\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Fraction} from \"../coefficients\";\r\nimport {Nthroot} from \"../coefficients\";\r\n\r\n/**\r\n * Equation is a class to manage equations...\r\n */\r\nexport class Equation {\r\n    private _left: Polynom;  // Left part of the equation\r\n    private _right: Polynom; // Right part of the equation\r\n    private _sign: string;   // Signe of the equation, by default =\r\n\r\n    private _polynom: Polynom;  // Used to solve the equation // TODO: remove the private value ?\r\n    private _solutions: string[];    // Array of the solutions\r\n\r\n    // Undetermined solutions.\r\n    private _varnothing: string = '\\\\varnothing';\r\n    private _real: string = '\\\\mathbb{R}';\r\n\r\n    /**\r\n     * Create an Equation using two polynoms.\r\n     * Markdown *support* is cool\r\n     * @param equations\r\n     */\r\n    constructor(...equations: any) {\r\n        // Default equation\r\n        this._left = new Polynom().zero();\r\n        this._right = new Polynom().zero();\r\n        this._sign = '=';\r\n\r\n        if (equations.length === 1) {\r\n            if (equations[0].isEquation === true) {\r\n                return equations[0].clone();\r\n            } else {\r\n                this.parse(equations[0]);\r\n            }\r\n        } else if (equations.length === 2) {\r\n            this.left = (equations[0] instanceof Polynom) ? equations[0].clone() : new Polynom(equations[0]);\r\n            this.right = (equations[1] instanceof Polynom) ? equations[1].clone() : new Polynom(equations[1]);\r\n        } else {\r\n            // Return default empty equation\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isEquation() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    // TODO: Check the getters and setters.\r\n    get solutions(): string[] {\r\n        return this._solutions;\r\n    }\r\n\r\n    get solution(): string {\r\n        if (this._solutions.length === 1\r\n            &&\r\n            (\r\n                this._solutions[0] === this._real\r\n                || this._solutions[0] === this._varnothing\r\n                || this._solutions[0].includes('\\\\left')\r\n            )\r\n        ) {\r\n            return `S = ${this._solutions[0]}`;\r\n        }\r\n        return `S = \\\\left{ ${this._solutions.join(';')} \\\\right}`;\r\n    }\r\n\r\n    get isReal(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0] === this._real;\r\n    }\r\n\r\n    get isVarnothing(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0] === this._varnothing;\r\n    }\r\n\r\n    get signAsTex(): string {\r\n        if (this._sign === '>=' || this._sign === '=>' || this._sign === 'geq') {\r\n            return '\\\\geq';\r\n        }\r\n        if (this._sign === '<=' || this._sign === '=<' || this._sign === 'leq') {\r\n            return '\\\\leq';\r\n        }\r\n        return this._sign;\r\n    }\r\n\r\n    get tex(): string {\r\n        return `${this._left.tex}${this.signAsTex}${this._right.tex}`;\r\n    }\r\n\r\n    get raw(): string {\r\n        return `${this._left.raw}${this.signAsTex}${this._right.raw}`;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        return [...new Set(this._right.variables.concat(this._left.variables))];\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    get left(): Polynom {\r\n        return this._left;\r\n    }\r\n\r\n    set left(value: Polynom) {\r\n        this._left = value;\r\n    }\r\n\r\n    get right(): Polynom {\r\n        return this._right;\r\n    }\r\n\r\n    set right(value: Polynom) {\r\n        this._right = value;\r\n    }\r\n\r\n    get sign(): string {\r\n        return this._sign;\r\n    }\r\n\r\n    set sign(value: string) {\r\n        // Set the sign value as formatted.\r\n        this._sign = this._formatSign(value);\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (equationString: string): Equation => {\r\n        let pStr: string[], strSign: string | false;\r\n        // Find the string separator\r\n        strSign = this._findSign(equationString);\r\n\r\n        if (strSign === false) {\r\n            console.log('The equation is not valid (no sign found)');\r\n            return;\r\n        }\r\n\r\n        // The StrSign is found\r\n        pStr = equationString.split(strSign);\r\n\r\n        return this.create(new Polynom(pStr[0]), new Polynom(pStr[1]), this._formatSign(strSign));\r\n    };\r\n\r\n    private _findSign = (equationString: string): string | false => {\r\n        let strSign: string = '';\r\n\r\n        if (equationString.includes('geq')) {\r\n            return (equationString.includes('\\\\geq')) ? '\\\\geq' : 'geq';\r\n        } else if (equationString.includes('leq')) {\r\n            return (equationString.includes('\\\\leq')) ? '\\\\leq' : 'leq';\r\n        } else if (equationString.includes('>=')) {\r\n            return '>=';\r\n        } else if (equationString.includes('=>')) {\r\n            return '=>';\r\n        } else if (equationString.includes('>')) {\r\n            return '>';\r\n        } else if (equationString.includes('<=')) {\r\n            return '<=';\r\n        } else if (equationString.includes('=<')) {\r\n            return '=<';\r\n        } else if (equationString.includes('<')) {\r\n            return '<';\r\n        } else if (equationString.includes('=')) {\r\n            return '='\r\n        }\r\n        if (strSign === '') {\r\n            console.log('Equation: parse string : sign not found');\r\n            return false;\r\n        }\r\n    };\r\n\r\n    private _formatSign = (signStr: string): string => {\r\n        if (signStr === undefined) {\r\n            return '=';\r\n        }\r\n\r\n        if (signStr.includes('geq')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>=')) {\r\n            return '>=';\r\n        } else if (signStr.includes('=>')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>')) {\r\n            return '>';\r\n        } else if (signStr.includes('leq')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<=')) {\r\n            return '<=';\r\n        } else if (signStr.includes('=<')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<')) {\r\n            return '<';\r\n        } else {\r\n            return '='\r\n        }\r\n    };\r\n\r\n    private _reverseSign = (): Equation => {\r\n        if (this._sign === '=') {\r\n            return this;\r\n        }\r\n\r\n        if (this._sign.includes('<')) {\r\n            this._sign.replace('<', '>');\r\n            return this;\r\n        }\r\n        if (this._sign.includes('>')) {\r\n            this._sign.replace('>', '<');\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    create = (left: Polynom, right: Polynom, sign?: string): Equation => {\r\n        this._left = left;\r\n        this._right = right;\r\n        this._sign = this._formatSign(sign);\r\n        return this;\r\n    };\r\n\r\n    clone = (): Equation => {\r\n        return new Equation().create(this._left.clone(), this._right.clone(), this._sign + '');\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n    // -----------------------------------------------\r\n    private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n        degree: 2\r\n    };\r\n    get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n        return this._randomizeDefaults;\r\n    }\r\n\r\n    set randomizeDefaults(value) {\r\n        this._randomizeDefaults = value;\r\n    }\r\n\r\n    randomize = (opts?: {}, sign?: string): Equation => {\r\n        // TODO: Generate equations randomly, using config.\r\n        return new Equation().create(new Polynom(), new Polynom(), sign);\r\n    };\r\n\r\n\r\n    // -----------------------------------------------\r\n    // Equations operations\r\n    // -----------------------------------------------\r\n    /**\r\n     * Reorder will move all monoms containing a letter on the left, all the other on the right.\r\n     */\r\n    moveLeft = (): Equation => {\r\n        this._left = this._left.clone().subtract(this._right)\r\n        this._right.zero()\r\n        return this;\r\n    }\r\n    reorder = (allLeft?: boolean): Equation => {\r\n        // Move all monoms of degree greater than 0 to the left.\r\n        // and all zero degree monoms to the right.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n\r\n        if (allLeft) {\r\n            return this.moveLeft()\r\n        }\r\n        let mMove: Monom;\r\n        for (let m of this._left.monoms) {\r\n            if (m.degree().isZero()) {\r\n                mMove = m.clone();\r\n                this._left.subtract(mMove);\r\n                this._right.subtract(mMove);\r\n            }\r\n        }\r\n\r\n        // Reorder the left and right polynoms\r\n        this._left.reorder();\r\n        this._right.reorder();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiply by the lcm denominator and divide by the gcm numerators.\r\n     */\r\n    simplify = (): Equation => {\r\n        this.multiply(Numeric.lcm(...this._left.getDenominators(),...this._right.getDenominators()));\r\n        this.divide(Numeric.gcd(...this._left.getNumerators(),...this._right.getNumerators()));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Reorder the polynom to have only one letter on the left, the rest on the right.\r\n     * @param letter\r\n     */\r\n    isolate = (letter?: string): Equation | false => {\r\n        // Determine if we can isolate the variables.\r\n\r\n        // Both part of the equations must be of the first degree.\r\n        //TODO: handle equations of degree two or more ?\r\n        if (!this.degree(letter).isOne()) {\r\n            return false;\r\n        }\r\n\r\n        // Modify the equation to isolate the asked variable.\r\n        // TODO: must handle equations like 3xy+5y=4 => y = 4/(3x-5)\r\n        if (this.isMultiVariable()) {\r\n            return false;\r\n        }\r\n\r\n        // Isolate the letter.\r\n        let mMove: Monom, cMove: Fraction;\r\n        // Start by moving everything to the left.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n        for (let m of this._left.monoms) {\r\n            if (!m.hasLetter(letter)) {\r\n                mMove = m.clone();\r\n                this._left.add(mMove.clone().opposed());\r\n                this._right.add(mMove.clone().opposed());\r\n            }\r\n        }\r\n\r\n        // In theory, we should have only one item on the left.\r\n        if (this._left.length !== 1) {\r\n            return false;\r\n        }\r\n        cMove = this._left.monoms[0].coefficient.clone();\r\n        this._left.divide(cMove);\r\n        this._right.divide(cMove);\r\n        return this;\r\n    };\r\n\r\n    replaceBy = (letter: string, P: Polynom): Equation => {\r\n        this._left.replaceBy(letter, P)\r\n        this._right.replaceBy(letter, P)\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiple an equation by a fraction value.\r\n     * @param value\r\n     */\r\n    multiply = (value: any): Equation => {\r\n\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        // Multiply each part of the equation by the fraction\r\n        this._left.multiply(F);\r\n        this._right.multiply(F);\r\n\r\n        // The sign of the inequation must be changed.\r\n        if (this._sign !== '=' && F.sign() === -1) {\r\n            this._reverseSign();\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * divide an equation by a given value (transformed as a fraction)\r\n     *\r\n     * ```\r\n     * 8x+10=6x \\vert 2\r\n     * 4x+5=3x\r\n     * ```\r\n     *\r\n     * |>Alternatively with $3x-4$ maybe it's working ?\r\n     * $$\\frac{3x}{5}$$\r\n     *\r\n     * @param value\r\n     * @returns {Equation}\r\n     */\r\n    divide = (value: any): Equation => {\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        if(F.isZero()){\r\n            return this;\r\n        }else {\r\n            return this.multiply(F.invert());\r\n        }\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations helpers\r\n    // -----------------------------------------------\r\n\r\n    /**\r\n     * Get the degree of the equation\r\n     * @param letter\r\n     */\r\n    degree = (letter?: string): Fraction => {\r\n        return Fraction.max(this._left.degree(letter), this._right.degree(letter));\r\n    };\r\n\r\n    /**\r\n     * Determine if the equation contains more than one letter/variable.\r\n     */\r\n    isMultiVariable = (): boolean => {\r\n        return this._left.isMultiVariable || this._right.isMultiVariable;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        // @ts-ignore\r\n        return [...new Set([...this._left.letters(), ...this._right.letters()])];\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations solving algorithms\r\n    // -----------------------------------------------\r\n    solve = (letter?: string): Equation => {\r\n        // Initialise the variables:\r\n        this._solutions = [];\r\n\r\n        // TODO: this._polynom could be removed.\r\n        // TODO: consolidate solving equations (inequations vs equations)\r\n        // TODO: work with not natural degrees ?\r\n        this._polynom = this._left.clone().subtract(this._right);\r\n\r\n        switch (this._polynom.degree(letter).value) {\r\n            case 0:\r\n            case 1:\r\n                this._solveDegree1(letter);\r\n                break;\r\n            case 2:\r\n                this._solveDegree2(letter);\r\n                break;\r\n            default:\r\n                this._solveDegree3plus(letter);\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    private isGreater = (): boolean => {\r\n        if (this._sign.indexOf('>') !== -1) {\r\n            return true;\r\n        }\r\n        return this._sign.indexOf('geq') !== -1;\r\n\r\n    };\r\n    private isStrictEqual = (): boolean => {\r\n        return this._sign === '=';\r\n    };\r\n    private isAlsoEqual = (): boolean => {\r\n        if (this._sign.indexOf('=') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('geq') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('leq') !== -1) {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    private _solveDegree1 = (letter?: string): string[] => {\r\n        const m1 = this._polynom.monomByDegree(1, letter).coefficient,\r\n            m0 = this._polynom.monomByDegree(0, letter).coefficient,\r\n            v = m0.clone().opposed().divide(m1).display;\r\n        let s: string;\r\n\r\n        if (this.isStrictEqual()) {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0) {\r\n                    this._solutions = [this._real];\r\n                } else {\r\n                    this._solutions = [this._varnothing];\r\n                }\r\n            } else {\r\n                this._solutions = [v];\r\n            }\r\n        } else {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0 && this.isAlsoEqual()) {\r\n                    s = '\\\\mathbb{R}';\r\n                } else {\r\n                    if (m0.value > 0) {\r\n                        s = this.isGreater() ? this._real : this._varnothing;\r\n                    } else {\r\n                        s = !this.isGreater() ? this._real : this._varnothing;\r\n                    }\r\n                }\r\n            } else {\r\n                // Must handle the case if the m1 monom is negative.\r\n                if ((this.isGreater() && m1.sign() === 1) || (!this.isGreater() && m1.sign() === -1)) {\r\n                    s = `\\\\left${this.isAlsoEqual() ? '\\\\[' : '\\\\]'}${v};+\\\\infty\\\\right\\\\[`;\r\n                } else {\r\n                    s = `\\\\left\\\\]-\\\\infty;${v} \\\\right\\\\${this.isAlsoEqual() ? '\\\\]' : '\\\\['}`;\r\n                }\r\n            }\r\n            this._solutions = [s];\r\n        }\r\n\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree2 = (letter?: string): string[] => {\r\n        let aF = this._polynom.monomByDegree(2, letter).coefficient,\r\n            bF = this._polynom.monomByDegree(1, letter).coefficient,\r\n            cF = this._polynom.monomByDegree(0, letter).coefficient,\r\n            delta: number, nthDelta: Nthroot,\r\n            lcm = Numeric.lcm(aF.denominator, bF.denominator, cF.denominator),\r\n            a = aF.multiply(lcm).value,\r\n            b = bF.multiply(lcm).value,\r\n            c = cF.multiply(lcm).value,\r\n            realX1: number, realX2: number,\r\n            sX1: string, sX2: string;\r\n\r\n        delta = b * b - 4 * a * c;\r\n\r\n        if (delta > 0) {\r\n            realX1 = (-b - Math.sqrt(delta)) / (2 * a);\r\n            realX2 = (-b + Math.sqrt(delta)) / (2 * a);\r\n\r\n            if(delta>1.0e5){\r\n                // The delta is too big to be parsed !\r\n                this._solutions = [\r\n                    ((-b - Math.sqrt(delta))/(2 * a)).toFixed(5),\r\n                    ((-b + Math.sqrt(delta))/(2 * a)).toFixed(5)\r\n                ]\r\n            }else {\r\n                nthDelta = new Nthroot().parse(delta).reduce();\r\n                if (nthDelta.hasRadical()) {\r\n                    // -b +- coeff\\sqrt{radical}\r\n                    // -------------------------\r\n                    //           2a\r\n                    let gcd = Numeric.gcd(b, 2 * a, nthDelta.coefficient);\r\n                    nthDelta.coefficient = nthDelta.coefficient / gcd;\r\n\r\n                    // TODO: Can i delete the next line ?\r\n                    // let deltaC = nthDelta.coefficient, deltaR = nthDelta.radical;\r\n                    if (b !== 0) {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                `${-b / gcd} - ${nthDelta.tex}`,\r\n                                `${-b / gcd} + ${nthDelta.tex}`,\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                `\\\\dfrac{${-b / gcd} - ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                `\\\\dfrac{${-b / gcd} + ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                            ]\r\n                        }\r\n                    } else {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                `- ${nthDelta.tex}`,\r\n                                `${nthDelta.tex}`,\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                `\\\\dfrac{- ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                `\\\\dfrac{${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                            ]\r\n                        }\r\n                    }\r\n                } else {\r\n                    // -b +- d / 2a\r\n                    this._solutions = [\r\n                        new Fraction(-b - nthDelta.coefficient, 2 * a).reduce().dfrac,\r\n                        new Fraction(-b + nthDelta.coefficient, 2 * a).reduce().dfrac\r\n                    ]\r\n                }\r\n            }\r\n\r\n        } else if (delta === 0) {\r\n            this._solutions = [new Fraction(-b, 2 * a).reduce().dfrac];\r\n        } else {\r\n            this._solutions = [this._varnothing];\r\n        }\r\n\r\n\r\n        // Handle now the inequations.\r\n        if (!this.isStrictEqual()) {\r\n            if (this._solutions.length === 2) {\r\n                sX1 = (realX1 < realX2) ? this._solutions[0] : this._solutions[1];\r\n                sX2 = (realX1 < realX2) ? this._solutions[1] : this._solutions[0];\r\n\r\n                if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                    this._solutions = [\r\n                        `\\\\left]-\\\\infty ; ${sX1}\\\\right${this.isAlsoEqual() ? ']' : '['} \\\\cup \\\\left${this.isAlsoEqual() ? '[' : ']'}${sX2};+\\\\infty\\\\right[`\r\n                    ];\r\n                } else {\r\n                    this._solutions = [\r\n                        `\\\\left${this.isAlsoEqual() ? '[' : ']'}${sX1} ; ${sX2}\\\\right${this.isAlsoEqual() ? ']' : '['}`\r\n                    ]\r\n                }\r\n            } else if (this._solutions.length === 1 && this._solutions[0] !== this._varnothing) {\r\n                if (!this.isAlsoEqual()) {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [\r\n                            `\\\\left]-\\\\infty ; ${this._solutions[0]}\\\\right[ \\\\cup \\\\left]${this._solutions[0]};+\\\\infty\\\\right[`\r\n                        ];\r\n                    } else {\r\n                        this._solutions = [this._varnothing];\r\n                    }\r\n                } else {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [this._real];\r\n                    } else {\r\n                        // this._solutions = [ this._solutions[0] ];\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.isGreater()) {\r\n                    this._solutions = [aF.sign() === 1 ? this._real : this._varnothing];\r\n                } else {\r\n                    this._solutions = [aF.sign() === -1 ? this._real : this._varnothing];\r\n                }\r\n            }\r\n        }\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree3plus = (letter?: string): string[] => {\r\n        // TODO: try to resolve equations with a degree superior than 2.\r\n        this._solutions = [letter];  // ESLint remove system :(\r\n        return this._solutions;\r\n    };\r\n\r\n}","export * from \"./equation\"\r\nexport * from \"./linearSystem\"\r\nexport * from \"./logicalset\"\r\nexport * from \"./monom\"\r\nexport * from \"./polynom\"\r\nexport * from \"./rational\"","import {Fraction} from \"../coefficients\";\r\nimport {Equation} from \"./equation\";\r\nimport {Polynom} from \"./polynom\";\r\nimport {Monom} from \"./monom\";\r\nimport {Random} from \"../random\";\r\n\r\n    export class LinearSystem {\r\n        private _solutions: { [letter: string]: { value: Fraction, isReal: boolean, isVarnothing: boolean } };\r\n        private _resolutionSteps: LinearSystem[];\r\n        private _equations: Equation[];\r\n        private _letters: string[];\r\n\r\n        constructor(...equationStrings: string[]) {\r\n            this._equations = [];\r\n            this._letters = 'xy'.split('');\r\n\r\n            if (equationStrings !== undefined && equationStrings.length > 0) {\r\n                this.parse(...equationStrings);\r\n            }\r\n\r\n            return this;\r\n        }\r\n\r\n        get isLinearSystem() {\r\n            return true;\r\n        }\r\n\r\n        // ------------------------------------------\r\n        // Getter and setter\r\n        // ------------------------------------------\r\n        get equations(): Equation[] {\r\n            return this._equations;\r\n        }\r\n\r\n        set equations(value) {\r\n            this._equations = value;\r\n        }\r\n\r\n        get letters(): string {\r\n            return this._letters.join('')\r\n        }\r\n\r\n        set letters(value: string) {\r\n            this._letters = value.split('');\r\n        }\r\n\r\n        get isSolvable(): boolean {\r\n            let V = this.variables;\r\n\r\n            // TODO: in some case, it is possible to resolve systems if there isn't the isSame number of vars and equations\r\n            if (V.length !== this._equations.length) {\r\n                return false;\r\n            }\r\n\r\n            //TODO: Must check if two equations isn't a linear combination of the others ?\r\n\r\n            return true;\r\n        }\r\n\r\n        get variables(): string[] {\r\n            let V: string[] = [];\r\n            for (let E of this._equations) {\r\n                V = V.concat(E.variables);\r\n            }\r\n            return [...new Set(V)].sort();\r\n        }\r\n\r\n        get tex(): string {\r\n            // Build the array of values.\r\n            // Reorder\r\n            // This clone the system :!!!\r\n            //TODO: Avoid cloning this linear system\r\n            let LS = this.clone().reorder(),\r\n                letters = LS.variables,\r\n                equStr: string[],\r\n                equArray: string[] = [],\r\n                m: Monom;\r\n\r\n            // TODO: Manage tex output of linear equations\r\n            for (let equ of LS.equations) {\r\n                equStr = [];\r\n                for (let L of letters) {\r\n                    m = equ.left.monomByLetter(L);\r\n\r\n                    if (equStr.length === 0) {\r\n                        equStr.push(m.isZero() ? '' : m.tex);\r\n                    } else {\r\n                        equStr.push(m.isZero() ? '' : ((m.coefficient.sign() === 1) ? '+' : '') + m.tex);\r\n                    }\r\n                }\r\n\r\n                // Add the equal sign\r\n                equStr.push('=');\r\n\r\n                // Add the right hand part of the equation (should be only a number, because it has been reordered)\r\n                equStr.push(equ.right.tex);\r\n\r\n                // Add to the list.\r\n                equArray.push(equStr.join('&'));\r\n            }\r\n\r\n\r\n            return `\\\\left\\\\{\\\\begin{array}{${\"r\".repeat(letters.length)}cl}${equArray.join('\\\\\\\\\\ ')}\\\\end{array}\\\\right.`;\r\n            //return `\\\\left\\\\{\\\\begin{array}{rrrcl}${this._equations.map(equ => `${equ.tex}`).join('\\\\\\\\\\ \\n')}\\\\end{array}\\\\right.`;\r\n        }\r\n\r\n        get texSolution(): string {\r\n            let tex: string[] = [];\r\n\r\n            if (this._solutions === undefined) {\r\n                this.solve();\r\n            }\r\n\r\n            for (let letter in this._solutions) {\r\n                if (this._solutions[letter].isReal) {\r\n                    console.log(`Undetermined (letter ${letter})`);\r\n                    return;\r\n                }\r\n                if (this._solutions[letter].isVarnothing) {\r\n                    console.log(`Undefined (letter ${letter})`);\r\n                    return;\r\n                }\r\n\r\n                tex.push(this._solutions[letter].value.dfrac);\r\n            }\r\n            return `(${tex.join(';')})`;\r\n        }\r\n\r\n        // ------------------------------------------\r\n        // Creation / parsing functions\r\n        // ------------------------------------------\r\n        parse = (...equations: any[]): LinearSystem => {\r\n            this._equations = equations.map(value => new Equation(value));\r\n            this._findLetters();\r\n            return this;\r\n        };\r\n\r\n        setCoefficient = (...coefficients: string[]): LinearSystem => {\r\n            // Reset the equations list\r\n            this._equations = [];\r\n\r\n            let i = 0;\r\n            while (i < coefficients.length - this._letters.length) {\r\n                let left = new Polynom().parse(this._letters.join(''), ...coefficients.slice(i, i + this._letters.length)),\r\n                    right = new Polynom(coefficients[i + this._letters.length].toString()),\r\n                    equ = new Equation().create(left, right);\r\n                this._equations.push(equ.clone());\r\n\r\n                i = i + this._letters.length + 1;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        clone = (): LinearSystem => {\r\n            return new LinearSystem().parse(...this._equations.map(equ => equ.clone()));\r\n        };\r\n\r\n        setLetters = (...letters: string[]): LinearSystem => {\r\n            this._letters = letters;\r\n            return this\r\n        }\r\n        private _findLetters = (): LinearSystem => {\r\n            // Find all letters used.\r\n            let variables = new Set();\r\n\r\n            for (let equ of this._equations) {\r\n                variables = new Set([...variables, ...equ.variables]);\r\n            }\r\n\r\n            // TODO: How to transform (Set of string) to string[]\r\n            // @ts-ignore\r\n            this._letters = [...variables];\r\n            return this;\r\n        }\r\n\r\n        // -----------------------------------------------\r\n        // Equations generators and randomizers\r\n        // -----------------------------------------------\r\n        generate = (...solutions: Fraction[] | number[]): LinearSystem => {\r\n            let solutionsF: Fraction[] = [];\r\n\r\n            // Convert the numbers to fractions if necessary\r\n            for (let s of solutions) {\r\n                if (typeof s === \"number\") {\r\n                    solutionsF.push(new Fraction(s.toString()));\r\n                } else {\r\n                    solutionsF.push(s.clone());\r\n                }\r\n            }\r\n\r\n            // Create the equations and make sure they are not linear combined.\r\n            this._equations = [];\r\n            for (let i = 0; i < solutions.length; i++) {\r\n                this._equations.push(this._generateOneEquation(...solutionsF));\r\n            }\r\n            return this;\r\n        };\r\n        private _generateOneEquation = (...solutions: Fraction[]): Equation => {\r\n            let coeff: number[] = [], leftValue: Fraction = new Fraction().zero(),\r\n                letters: string[] = ['x', 'y', 'z', 't', 'u', 'v', 'w', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],\r\n                equString: string = '', equ: Equation;\r\n            for (let i = 0; i < solutions.length; i++) {\r\n                coeff.push(Random.numberSym(5));\r\n                leftValue.add(solutions[i].clone().multiply(coeff[i]));\r\n                equString += `${(coeff[i] < 0) ? coeff[i] : '+' + coeff[i]}${letters[i]}`\r\n            }\r\n\r\n            // LeftValue contains the left part oof the equation - and is then the isSame as the right part.\r\n            // It might be a Fraction.\r\n\r\n            // Must check if it's not a linear combination\r\n            equ = new Equation(`${equString}=${leftValue.display}`);\r\n            if (equ.right.monoms[0].coefficient.denominator != 1) {\r\n                equ.multiply(new Fraction(equ.right.monoms[0].coefficient.denominator, 1));\r\n            }\r\n            if (this._checkIfLinerCombination(equ)) {\r\n                return equ;\r\n            } else {\r\n                return this._generateOneEquation(...solutions);\r\n            }\r\n        };\r\n\r\n\r\n        // ------------------------------------------\r\n        // Mathematical operations\r\n        // ------------------------------------------\r\n        private _linearReduction(eq1: Equation, eq2: Equation, letter: string): Equation {\r\n            // TODO: handle other signs for equations ?\r\n            // Get the monom for the particular letter.\r\n            let c1 = eq1.left.monomByDegree(1, letter).coefficient.clone(),\r\n                c2 = eq2.left.monomByDegree(1, letter).coefficient.clone().opposed();\r\n\r\n            return this.mergeEquations(eq1, eq2, c2, c1);\r\n        }\r\n\r\n        mergeEquations = (eq1: Equation, eq2: Equation, factor1: any, factor2: any): Equation => {\r\n            // Set and clone the equations.\r\n\r\n            let eq1multiplied = eq1.clone().multiply(new Fraction(factor1)),\r\n                eq2multiplied = eq2.clone().multiply(new Fraction(factor2));\r\n\r\n            // Add both equations together.\r\n            eq1multiplied.left.add(eq2multiplied.left);\r\n            eq1multiplied.right.add(eq2multiplied.right);\r\n\r\n            return eq1multiplied;\r\n        }\r\n\r\n\r\n        // ------------------------------------------\r\n        // Solvers algorithm\r\n        // ------------------------------------------\r\n        reorder = (): LinearSystem => {\r\n            for (let E of this._equations) {\r\n                E.reorder();\r\n            }\r\n            return this;\r\n        };\r\n\r\n        solve = (): LinearSystem => {\r\n            // Solve it by linear\r\n            this._solutions = {};\r\n            this._resolutionSteps = [];\r\n\r\n            // Reorder all equations.\r\n            this.reorder();\r\n\r\n            // Get all variables in the linear system\r\n            let V = this.variables.sort();\r\n\r\n            for (let letter of V) {\r\n                this._solutions[letter] = this._solveOneLetter(letter, V)\r\n            }\r\n\r\n            // TODO: LinearSystem - solve: optimization and handle undetermined and undefined systems.\r\n            return this;\r\n        };\r\n\r\n        private _checkIfLinerCombination = (equ: Equation): boolean => {\r\n\r\n            return true;\r\n        };\r\n\r\n        private _solveOneLetter(letter: string, V: string[]): { value: Fraction, isReal: boolean, isVarnothing: boolean } {\r\n            // list of equations.\r\n            let LE: Equation[] = this.clone().equations,\r\n                reducedEquations: Equation[] = [];\r\n\r\n            // Reduce the equations.\r\n            // Do it as long as there is more than one step, but no more than the number of equations.\r\n            for (let L of V) {\r\n                // remove the setLetter from all equations using linear combinations\r\n                if (L === letter) {\r\n                    continue;\r\n                }\r\n\r\n                // Linear reduction.\r\n                // TODO: Search for better association\r\n                for (let i = 0; i < LE.length - 1; i++) {\r\n                    reducedEquations.push(this._linearReduction(LE[i], LE[i + 1], L));\r\n                }\r\n\r\n                // Keep track of each steps.\r\n                this._resolutionSteps.push(new LinearSystem().parse(...reducedEquations));\r\n\r\n                // Set the list of equations to the new version.\r\n                LE = this._resolutionSteps[this._resolutionSteps.length - 1].clone().equations;\r\n\r\n                // Reset the stack\r\n                reducedEquations = [];\r\n            }\r\n\r\n            // Solve the equations\r\n            let E = this._resolutionSteps[this._resolutionSteps.length - 1].equations[0];\r\n            E.solve();\r\n\r\n            return {\r\n                value: new Fraction(E.solutions[0]),\r\n                isReal: E.isReal,\r\n                isVarnothing: E.isVarnothing\r\n            }\r\n        }\r\n\r\n        // ------------------------------------------\r\n        // Helpers\r\n        // ------------------------------------------\r\n        log = (): string => {\r\n            let str: string = '';\r\n\r\n            for (let E of this._equations) {\r\n                console.log(E.tex);\r\n                str += `${E.tex}\\\\n}`;\r\n            }\r\n\r\n            return str;\r\n        };\r\n    }\r\n","/**\r\n * Polynom module contains everything necessary to handle polynoms.\r\n * @module Logicalset\r\n */\r\n\r\nimport {Shutingyard} from '../shutingyard';\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n */\r\n    export class Logicalset {\r\n        private _rawString: string;\r\n        private _rpn: { token: string, tokenType: string }[]\r\n\r\n        /**\r\n         *\r\n         * @param {string} value (optional) Default polynom to parse on class creation\r\n         */\r\n        constructor(value: string) {\r\n            this._rawString = value\r\n            this.parse(value)\r\n            return this;\r\n        }\r\n\r\n        get isLogicalset() {\r\n            return true;\r\n        };\r\n\r\n        private parse = (value: string): Logicalset => {\r\n            // TODO: Must format the value string to convert some items...\r\n\r\n            // Parse the updated value to the shutingyard algorithm\r\n            this._rpn = new Shutingyard('set').parse(value).rpn;\r\n\r\n            return this;\r\n        }\r\n\r\n        evaluate(tokenSets: { [key: string]: any[] }, reference?: any[]): any[] {\r\n            let varStack: (Set<unknown>)[] = []\r\n\r\n            let referenceSet: Set<unknown>\r\n            if (reference === undefined) {\r\n                referenceSet = new Set()\r\n                for (let key in tokenSets) {\r\n                    referenceSet = new Set([...referenceSet, ...tokenSets[key]])\r\n                }\r\n            } else {\r\n                referenceSet = new Set(reference)\r\n            }\r\n\r\n            for (let token of this._rpn) {\r\n                if (token.tokenType === 'variable') {\r\n                    // The variable has no token - assume it's empty.\r\n                    if (tokenSets[token.token] === undefined) {\r\n                        varStack.push(new Set())\r\n                    } else {\r\n                        varStack.push(new Set(tokenSets[token.token]));\r\n                    }\r\n\r\n                } else {\r\n                    switch (token.token) {\r\n                        case '&':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                varStack.push(new Set([...first].filter(x => second.has(x))))\r\n                            }\r\n                            break\r\n                        case '|':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n                                varStack.push(new Set([...first, ...second]))\r\n                            }\r\n                            break\r\n                        case '-':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n                                varStack.push(new Set([...first].filter(x => !second.has(x))))\r\n                            }\r\n                            break\r\n                        case '!':\r\n                            if (varStack.length >= 1) {\r\n                                let first = varStack.pop()\r\n\r\n                                varStack.push(new Set([...referenceSet].filter(x => !first.has(x))))\r\n                            }\r\n                            break\r\n                    }\r\n                }\r\n            }\r\n\r\n            return [...varStack[0]].sort();\r\n        }\r\n\r\n        vennAB(): any[] {\r\n            return this.evaluate({\r\n                    A: ['A', 'AB'],\r\n                    B: ['B', 'AB']\r\n                },\r\n                ['A', 'B', 'AB', 'E']\r\n            )\r\n        }\r\n\r\n        vennABC(): any[] {\r\n            return this.evaluate({\r\n                    A: ['A', 'AB', 'AC', 'ABC'],\r\n                    B: ['B', 'AB', 'BC', 'ABC'],\r\n                    C: ['C', 'AC', 'BC', 'ABC']\r\n                },\r\n                ['A', 'B', 'C', 'AB', 'AC', 'BC', 'E']\r\n            )\r\n        }\r\n\r\n        get rpn(): { token: string, tokenType: string }[] {\r\n            return this._rpn\r\n        }\r\n\r\n        get tex(): string {\r\n            let varStack: { token: string, tokenType: string } [] = []\r\n\r\n            for (let token of this._rpn) {\r\n                if (token.tokenType === 'variable') {\r\n                    varStack.push(token);\r\n                } else {\r\n                    switch (token.token) {\r\n                        case '&':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\cap ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '|':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\cup ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '-':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\setminus ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '!':\r\n                            if (varStack.length >= 1) {\r\n                                let first = varStack.pop()\r\n                                varStack.push({token: `\\\\overline{ ${first.token} }`, tokenType: 'variable'})\r\n                            }\r\n                            break\r\n                    }\r\n                }\r\n            }\r\n\r\n            return varStack[0].token\r\n        }\r\n    }","/***\r\n * Monom class\r\n * Defined as coefficient * literal\r\n * Examples: 3x^2, 3/5x^2, ...\r\n */\r\nimport {Fraction} from \"../coefficients\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Shutingyard} from \"../shutingyard\";\r\n\r\nexport type literalType = {\r\n    [Key: string]: Fraction\r\n}\r\n\r\nexport class Monom {\r\n    private _coefficient: Fraction;\r\n    private _literal: literalType;\r\n\r\n    /**\r\n     * Create the monom object.\r\n     * @param value (optional) string\r\n     */\r\n    constructor(value?: string) {\r\n        this.zero();\r\n\r\n        if (value !== undefined) {\r\n            // A string is given - try to parse the value.\r\n            this.parse(value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    /**\r\n     * Get the coefficient as fraction\r\n     */\r\n    get coefficient(): Fraction {\r\n        return this._coefficient;\r\n    }\r\n\r\n    /**\r\n     * Set the coefficient value of the monom\r\n     * @param F     Fraction\r\n     */\r\n    set coefficient(F: Fraction) {\r\n        this._coefficient = F;\r\n    }\r\n\r\n    /**\r\n     * Get the literal part, as dictionary\r\n     */\r\n    get literal(): literalType {\r\n        return this._literal;\r\n    }\r\n\r\n    get literalSqrt(): literalType {\r\n\r\n        if (this.isLiteralSquare()) {\r\n            let L: literalType = {}\r\n            for (let key in this._literal) {\r\n                L[key] = this._literal[key].clone().sqrt()\r\n            }\r\n            return L;\r\n        } else {\r\n            return this._literal;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom\r\n     * @param L     Literal part as dictionary: <setLetter: exposant>\r\n     */\r\n    set literal(L: literalType) {\r\n        this._literal = L;\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom from a string\r\n     * @param inputStr  String like x^2y^3\r\n     */\r\n    set literalStr(inputStr: string) {\r\n        // TODO : parse using shutingyard tree !\r\n\r\n        // Match all x^n\r\n        for (const v of [...inputStr.matchAll(/([a-z])\\^([+-]?[0-9]+)/g)]) {\r\n            // Create the default letter entry if necessary.\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = new Fraction().zero();\r\n            }\r\n\r\n            // Add the new value.\r\n            // TODO: actually, it adds only numeric value\r\n            this._literal[v[1]].add(+v[2]);\r\n        }\r\n\r\n        // Match all x\r\n        for (const v of [...inputStr.matchAll(/([a-z](?!\\^))/g)]) {\r\n            // Match all single letters\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = new Fraction().zero();\r\n            }\r\n\r\n            // Add one to the value.\r\n            this._literal[v[1]].add(1)\r\n        }\r\n    }\r\n\r\n    // Getter helpers.\r\n    /**\r\n     * Get the variables letters\r\n     */\r\n    get variables(): string[] {\r\n        this.clone().clean();\r\n        return Object.keys(this._literal)\r\n    }\r\n\r\n    // Display getter\r\n    /**\r\n     * This display getter is to be used in the polynom display getter\r\n     */\r\n    get display(): string {\r\n        let L: string = '',\r\n            letters = Object.keys(this._literal).sort()\r\n        for (let letter of letters) {\r\n            if (this._literal[letter].isNotZero()) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter].isNotEqual(1)) {\r\n                    L += `^${this._literal[letter].display}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.display}`;\r\n            } else {\r\n                return '';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.display}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    get dividers(): Monom[] {\r\n        // Decompose only if the coefficient is a natural number\r\n        if (this.coefficient.denominator !== 1) {\r\n            return [this.clone()]\r\n        }\r\n        // Decompose only if the power values are natural numbers.\r\n        if (this.hasFractionCoefficient) {\r\n            return [this.clone()]\r\n        }\r\n\r\n        // Security : do not do this if greater than 10000\r\n        if (this.coefficient.numerator > 10000) {\r\n            return [this.clone()]\r\n        }\r\n        const dividers = Numeric.dividers(Math.abs(this.coefficient.numerator))\r\n\r\n        // Decompose the literals parts.\r\n        let literals: literalType[] = [];\r\n        for (let L in this.literal) {\r\n            // L is the letter.\r\n            literals = this._getLiteralDividers(literals, L)\r\n        }\r\n\r\n        const monomDividers: Monom[] = [];\r\n        if (literals.length > 0 && dividers.length > 0) {\r\n            for (let N of dividers) {\r\n                for (let L of literals) {\r\n                    let M = new Monom();\r\n                    M.coefficient = new Fraction(N)\r\n                    M.literal = L\r\n                    monomDividers.push(M)\r\n                }\r\n            }\r\n        } else if (dividers.length === 0) {\r\n            for (let L of literals) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction().one()\r\n                M.literal = L\r\n                monomDividers.push(M)\r\n            }\r\n        } else {\r\n            for (let N of dividers) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction(N)\r\n                monomDividers.push(M)\r\n            }\r\n        }\r\n\r\n        return monomDividers.length === 0 ? [new Monom().one()] : monomDividers;\r\n    }\r\n\r\n    private _getLiteralDividers(arr: literalType[], letter: string): literalType[] {\r\n        let tmpList: { [key: string]: Fraction }[] = [];\r\n\r\n        // Be default, this.literal[letter] should be a rational number.\r\n        for (let d = 0; d <= this.literal[letter].value; d++) {\r\n            if (arr.length === 0) {\r\n                let litt: literalType = {}\r\n                litt[letter] = new Fraction(d)\r\n                tmpList.push(litt)\r\n            } else {\r\n                for (let item of arr) {\r\n                    let litt: literalType = {}\r\n                    for (let currentLetter in item) {\r\n                        litt[currentLetter] = item[currentLetter]\r\n                    }\r\n                    litt[letter] = new Fraction(d)\r\n                    tmpList.push(litt)\r\n                }\r\n            }\r\n        }\r\n        return tmpList;\r\n    }\r\n\r\n    /**\r\n     * Display the monom, forcing the '+' sign to appear\r\n     */\r\n    get displayWithSign(): string {\r\n        // TODO: Rename or remove this getter ?\r\n        let d: String = this.display;\r\n        return (d[0] !== '-' ? '+' : '') + d;\r\n    }\r\n\r\n    /**\r\n     * Get the tex output of the monom\r\n     */\r\n    get tex(): string {\r\n        // TODO: display with square root !\r\n        let L: string = '',\r\n            letters = Object.keys(this._literal).sort()\r\n\r\n        for (let letter of letters) {\r\n            if (this._literal[letter].isNotZero()) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter].isNotEqual(1)) {\r\n                    L += `^{${this._literal[letter].display}}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.dfrac}`;\r\n            } else {\r\n                return '0';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.dfrac}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // -----------------------------------------\r\n    /**\r\n     * Parse a string to a monom. The string may include fraction.\r\n     * @param inputStr\r\n     */\r\n    parse = (inputStr: string): Monom => {\r\n        this._shutingYardToReducedMonom(inputStr)\r\n        //\r\n        // // Set the literal part.\r\n        // this.literalStr = inputStr;\r\n        //\r\n        // // Get the coefficient\r\n        // this._coefficient = new Fraction();\r\n        // for (const v of [...inputStr.replace(/([a-z])|(\\^[+-]?[0-9]+)/g, ',').split(',')]) {\r\n        //     // The value is empty.\r\n        //     if (v.trim() === '') {\r\n        //         continue;\r\n        //     }\r\n        //\r\n        //     // Multiply the current coefficient by the new found value.\r\n        //     this._coefficient.multiply(new Fraction(v.trim()));\r\n        // }\r\n\r\n        return this;\r\n    };\r\n\r\n    private _shutingYardToReducedMonom = (inputStr: string): Monom => {\r\n        // Get the RPN array of the current expression\r\n        const SY: Shutingyard = new Shutingyard().parse(inputStr);\r\n        const rpn: { token: string, tokenType: string }[] = SY.rpn;\r\n\r\n        let stack: Monom[] = [], m, pow, letter, q1, q2\r\n\r\n        if (rpn.length === 0) {\r\n            this.zero()\r\n            return this\r\n        } else if (rpn.length === 1) {\r\n            const element = rpn[0]\r\n\r\n            this.one()\r\n            if (element.tokenType === 'coefficient') {\r\n                this.coefficient = new Fraction(element.token)\r\n            } else if (element.tokenType === 'variable') {\r\n                this.setLetter(element.token, 1)\r\n            }\r\n            return this\r\n        } else {\r\n            // Reset the monom\r\n            for (const element of rpn) {\r\n                if (element.tokenType === 'coefficient') {\r\n                    let M = new Monom().one()\r\n                    M.coefficient = new Fraction(element.token)\r\n                    stack.push(M.clone())\r\n                } else if (element.tokenType === 'variable') {\r\n                    let M = new Monom().one()\r\n                    M.setLetter(element.token, 1)\r\n                    stack.push(M.clone())\r\n                } else if (element.tokenType === 'operation') {\r\n                    switch (element.token) {\r\n                        case '-':\r\n                            // this should only happen for negative powers or for negative coefficient.\r\n                            q2 = (stack.pop()) || new Monom().zero()\r\n                            q1 = (stack.pop()) || new Monom().zero()\r\n\r\n                            stack.push(q1.subtract(q2))\r\n\r\n                            break;\r\n                        case '*':\r\n                            // Get the last element in the stack\r\n                            q2 = (stack.pop()) || new Monom().one()\r\n                            q1 = (stack.pop()) || new Monom().one()\r\n\r\n                            stack.push(q1.multiply(q2))\r\n                            break\r\n                        case '^':\r\n                            // get the two last elements in the stack\r\n                            pow = (stack.pop().coefficient) || new Fraction().one()\r\n                            m = (stack.pop()) || new Monom().one()\r\n\r\n                            letter = m.variables[0]\r\n\r\n                            if (letter !== undefined) {\r\n                                m.setLetter(letter, pow)\r\n                            }\r\n\r\n                            stack.push(m)\r\n                            // this.multiply(m.clone())\r\n                            break\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.one()\r\n        this.multiply(stack[0])\r\n        return this\r\n    }\r\n    /**\r\n     * Clone the current Monom.\r\n     */\r\n    clone = (): Monom => {\r\n        let F: Monom = new Monom();\r\n\r\n        F.coefficient = this._coefficient.clone();\r\n\r\n        // Copy the literal parts.\r\n        for (let k in this._literal) {\r\n            F.setLetter(k, this._literal[k].clone());\r\n        }\r\n        return F;\r\n    };\r\n\r\n    makeSame = (M: Monom):Monom => {\r\n        // Copy the literal parts.\r\n        for (let k in M._literal) {\r\n            this.setLetter(k, M._literal[k].clone());\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Create a zero value monom\r\n     */\r\n    zero = (): Monom => {\r\n        this._coefficient = new Fraction().zero();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Create a one value monom\r\n     */\r\n    one = (): Monom => {\r\n        this._coefficient = new Fraction().one();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Clean the monom by removing each letters with a power of zero.\r\n     */\r\n    clean = (): Monom => {\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter].isZero()) {\r\n                delete this._literal[letter];\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Get the opposed\r\n     * Returns a monom.\r\n     */\r\n    opposed = (): Monom => {\r\n        this._coefficient.opposed();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Add all similar monoms. If they aren't similar, they are simply skipped.\r\n     * @param M (Monom[]) The monoms to add.\r\n     */\r\n    add = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                if(this.isZero()){\r\n                    this.makeSame(m)\r\n                }\r\n                this._coefficient.add(m.coefficient);\r\n            } else {\r\n                console.log('Add: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Subtract multiple monoms\r\n     * @param M (Monom[]) The monoms to subtract\r\n     */\r\n    subtract = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                if(this.isZero()){\r\n                    this.makeSame(m)\r\n                }\r\n                this._coefficient.add(m.clone().coefficient.opposed());\r\n            } else {\r\n                console.log('Subtract: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiple multiple monoms to the current monom\r\n     * @param M (Monom[]) The monoms to multiply to.\r\n     */\r\n    multiply = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            // Multiply the coefficient.\r\n            this._coefficient.multiply(m.coefficient);\r\n\r\n            // Multiply the literal parts.\r\n            for (let letter in m.literal) {\r\n                if (this._literal[letter] === undefined) {\r\n                    this._literal[letter] = m.literal[letter].clone()\r\n                } else {\r\n                    this._literal[letter].add(m.literal[letter])\r\n                }\r\n\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiplyByNumber = (F: Fraction | number): Monom => {\r\n        this._coefficient.multiply(F);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divide the current monoms by multiple monoms\r\n     * @param M (Monom[])\r\n     */\r\n    divide = (...M: Monom[]): Monom => {\r\n        // Depending on the given value, choose the current item\r\n        for (let v of M) {\r\n            // Divide the coefficient\r\n            this._coefficient.divide(v.coefficient);\r\n\r\n            // Subtract the power values\r\n            for (let letter in v.literal) {\r\n                this._literal[letter] = (this._literal[letter] === undefined) ? v.literal[letter].clone().opposed() : this._literal[letter].subtract(v.literal[letter])\r\n\r\n                // If the power of a particular setLetter is zero, delete it from the literal part..\r\n                if (this._literal[letter].isZero()) {\r\n                    delete this._literal[letter];\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the pow of a monom.\r\n     * @param nb (number) : Mathematical pow\r\n     */\r\n    pow = (nb: number): Monom => {\r\n        this._coefficient.pow(nb);\r\n        for (let letter in this._literal) {\r\n            this._literal[letter].pow(nb)\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the nth-root of the monom\r\n     * @param p\r\n     */\r\n    root = (p: number): Monom => {\r\n        // TODO: determiner the nth root of a monom\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Return the square root of a monom\r\n     */\r\n    sqrt = (): Monom => {\r\n        if (this.isSquare()) {\r\n            this._coefficient.sqrt();\r\n            for (let letter in this._literal) {\r\n                this._literal[letter].clone().divide(2)\r\n            }\r\n        }\r\n        return this.root(2);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    compare = (M: Monom, sign?: string): boolean => {\r\n        // TODO: Build the compare systems.\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // To be equal, they must be the isSame\r\n                if (!this.compare(M, 'same')) {\r\n                    return false;\r\n                }\r\n\r\n                // The literal parts are the isSame. The coefficient must be equal\r\n                return this._coefficient.isEqual(M.coefficient);\r\n            case 'same':\r\n                // Get the list of all variables from both monoms.\r\n                let M1: string[] = this.variables,\r\n                    M2: string[] = M.variables,\r\n                    K: string[] = M1.concat(M2.filter((item) => M1.indexOf(item) < 0));\r\n\r\n                // To compare, both must be different than zero.\r\n                if (!this.isZero() && !M.isZero()) {\r\n                    for (let key of K) {\r\n                        // The setLetter is not available in one of the monom\r\n                        if (this._literal[key] === undefined || M.literal[key] === undefined) {\r\n                            return false;\r\n                        }\r\n                        // The setLetter does not have the isSame power in each monoms.\r\n                        if (!this._literal[key].isEqual(M.literal[key])) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // All are positive check - the monoms are the sames.\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is null\r\n     */\r\n    isZero(): boolean {\r\n        return this._coefficient.value === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is one\r\n     */\r\n    isOne(): boolean {\r\n        return this._coefficient.value === 1 && this.variables.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if two monoms are equals\r\n     * @param M\r\n     */\r\n    isEqual = (M: Monom): boolean => {\r\n        return this.compare(M, '=');\r\n    };\r\n\r\n    /**\r\n     * Determine if two monoms are similar\r\n     * @param M\r\n     */\r\n    isSameAs = (M: Monom): boolean => {\r\n        return this.compare(M, 'same');\r\n    };\r\n\r\n    isSquare = (): boolean => {\r\n        if (!this.coefficient.isSquare()) {\r\n            return false;\r\n        }\r\n        return this.isLiteralSquare();\r\n    }\r\n\r\n    isLiteralSquare = (): boolean => {\r\n        for (let letter in this.literal) {\r\n            // A literal square must have a natural power\r\n            if (this.literal[letter].isRational()) {\r\n                return false\r\n            }\r\n\r\n            // The natural power must be be even\r\n            if (this.literal[letter].isEven()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    hasFractionCoefficient = (): boolean => {\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter].isRational()) {\r\n                return true\r\n            }\r\n        }\r\n\r\n        return false\r\n    }\r\n    // ------------------------------------------\r\n    // Misc monoms functions\r\n    // -------------------------------------\r\n    /**\r\n     * Determine if a monom contains a setLetter in it's literal part\r\n     * @param letter\r\n     */\r\n    hasLetter = (letter?: string): boolean => {\r\n        // The letter was not found\r\n        if (this._literal[letter === undefined ? 'x' : letter] === undefined) {\r\n            return false\r\n        }\r\n\r\n        // The letter is found and is not zero !\r\n        return this._literal[letter === undefined ? 'x' : letter].isNotZero();\r\n    };\r\n\r\n    /**\r\n     * Set the power of a particular setLetter\r\n     * @param letter (string) Letter to change\r\n     * @param pow (number) Power of the setLetter (must be positive integer.\r\n     */\r\n    setLetter = (letter: string, pow: Fraction | number): void => {\r\n        if (pow instanceof Fraction) {\r\n            // Set the power of the letter to zero => remove it\r\n            if (this.hasLetter(letter) && pow.isZero()) {\r\n                delete this._literal[letter]\r\n            }\r\n\r\n            this._literal[letter] = pow.clone()\r\n        } else {\r\n            this.setLetter(letter, new Fraction(pow))\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the degree of a monom. If no setLetter is given, the result will be the global degree.\r\n     * @param letter (string) Letter to get to degree (power)\r\n     */\r\n    degree = (letter?: string): Fraction => {\r\n        if (this.variables.length === 0) {\r\n            return new Fraction().zero();\r\n        }\r\n        if (letter === undefined) {\r\n            // Not setLetter given -> we get the global monom degree (sum of all the letters).\r\n            return Object.values(this._literal).reduce((t, n) => t.clone().add(n));\r\n        } else {\r\n            // A setLetter is given -> get the corresponding power.\r\n            return this._literal[letter] === undefined ? new Fraction().zero() : this._literal[letter].clone();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Evaluate a monom. Each setLetter must be assigned to a Fraction.\r\n     * @param values    Dictionary of <setLetter: Fraction>\r\n     */\r\n    evaluate = (values: literalType | Fraction | number): Fraction => {\r\n        let r = this.coefficient.clone();\r\n\r\n        if (typeof values === 'number' || values instanceof Fraction) {\r\n            let tmpValues: literalType = {}\r\n\r\n            tmpValues[this.variables[0]] = new Fraction(values)\r\n            return this.evaluate(tmpValues);\r\n        }\r\n\r\n        if (typeof values === 'object') {\r\n            for (let L in this._literal) {\r\n                if (values[L] === undefined) {\r\n                    return new Fraction().zero();\r\n                }\r\n\r\n                let value = new Fraction(values[L])\r\n                r.multiply(value.pow(this._literal[L]))\r\n            }\r\n        }\r\n        return r;\r\n    };\r\n\r\n    /**\r\n     * Derivative the monom\r\n     * @param letter\r\n     */\r\n    derivative = (letter?: string): Monom => {\r\n        // No setLetter given - assume it's the setLetter 'x'\r\n        if (letter === undefined) {\r\n            letter = 'x';\r\n        }\r\n\r\n        if (this.hasLetter(letter)) {\r\n            let d = this._literal[letter].clone(),\r\n                dM = this.clone();\r\n\r\n            // Subtract one to the degree.\r\n            dM._literal[letter].subtract(1)\r\n\r\n            // Multiply the coefficient by the previous degree\r\n            dM._coefficient.multiply(new Fraction(d.clone()));\r\n            return dM;\r\n        } else {\r\n            return new Monom().zero();\r\n        }\r\n    };\r\n\r\n    primitive = (letter?: string): Monom => {\r\n        // TODO: derivative including the ln value => implies creating different monom system ?\r\n        if (letter === undefined) {\r\n            letter = 'x'\r\n        }\r\n\r\n        // Zero monom\r\n        let M = this.clone(), degree\r\n\r\n        if (M.hasLetter(letter)) {\r\n            degree = M.degree(letter).clone().add(1)\r\n            M.coefficient = M.coefficient.clone().divide(degree)\r\n            M.setLetter(letter, degree)\r\n        } else {\r\n            // There is no letter.\r\n\r\n            // The coefficient might be zero (=> x) or a number a (=> ax)\r\n            if (M.coefficient.isZero()) {\r\n                M.coefficient = new Fraction().one()\r\n            }\r\n            M.setLetter(letter, 1)\r\n        }\r\n        return M\r\n    }\r\n    // ----------------------------------------\r\n    // Static functions\r\n    // ----------------------------------------\r\n\r\n    /**\r\n     * Get the least common multiple of monoms\r\n     * @param monoms    Array of monoms\r\n     */\r\n    static lcm = (...monoms: Monom[]): Monom => {\r\n        // All the monoms must be with natural powers...\r\n        for (let m of monoms) {\r\n            if (m.hasFractionCoefficient()) {\r\n                return new Monom().zero()\r\n            }\r\n        }\r\n\r\n\r\n        let M = new Monom(),\r\n            coeffN: number[] = monoms.map(value => value.coefficient.numerator),\r\n            coeffD: number[] = monoms.map(value => value.coefficient.denominator),\r\n            n = Numeric.gcd(...coeffN),\r\n            d = Numeric.lcm(...coeffD);\r\n\r\n        // Get the coefficient.\r\n        M.coefficient = new Fraction(n, d).reduce();\r\n\r\n        // Set the literal parts - go through each monoms literal parts and get only the lowest degree of each letters.\r\n        for (let m of monoms) {\r\n            // Remove the inexistant letters from the resulting monom\r\n            for (let letter in M.literal) {\r\n                if (!(letter in m.literal)) {\r\n                    M.literal[letter].zero();\r\n                }\r\n            }\r\n            for (let letter in m.literal) {\r\n                if (M.literal[letter] === undefined && m.literal[letter].isStrictlyPositive()) {\r\n                    M.literal[letter] = m.literal[letter].clone();\r\n                } else {\r\n                    M.literal[letter] = new Fraction(Math.min(m.literal[letter].value, M.literal[letter].value))\r\n                }\r\n            }\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n    /**\r\n     * Multiply two monoms and return a NEW monom.\r\n     * @param monoms\r\n     */\r\n    static xmultiply = (...monoms: Monom[]): Monom => {\r\n        let M = new Monom().one();\r\n\r\n        for (let m of monoms) {\r\n            M.multiply(m);\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Determine if multiple monoms are similar\r\n     * @param M\r\n     */\r\n    areSameAs = (...M: Monom[]): boolean => {\r\n        let result: boolean = true;\r\n\r\n        // Check all monoms if they are the isSame as the \"this\" one.\r\n        for (let i = 0; i < M.length; i++) {\r\n            if (!this.isSameAs(M[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All check passed -> all the monoms are similar.\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Determine if multiple monoms are equals\r\n     * @param M\r\n     */\r\n    areEquals = (...M: Monom[]): boolean => {\r\n        // They are not similar.\r\n        if (!this.areSameAs(...M)) {\r\n            return false;\r\n        }\r\n\r\n        // Check all coefficient. They must be equals.\r\n        for (let m of M) {\r\n            if (!this._coefficient.isEqual(m.coefficient)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All checks passed.\r\n        return true;\r\n    };\r\n\r\n}\r\n","/**\r\n * Polynom module contains everything necessary to handle polynoms.*\r\n */\r\n\r\nimport {literalType, Monom} from './monom';\r\nimport {Shutingyard} from '../shutingyard';\r\nimport {Numeric} from '../numeric';\r\nimport {Random, randomPolynomConfig} from \"../random\";\r\nimport {Fraction} from \"../coefficients\";\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n * ```\r\n * let P = new Polynom('3x-4')\r\n * ```\r\n */\r\nexport class Polynom {\r\n    private _rawString: string;\r\n    private _monoms: Monom[];\r\n    private _factors: Polynom[];\r\n    private _texString: string;\r\n\r\n    /**\r\n     *\r\n     * @param {string} polynomString (optional) Default polynom to parse on class creation\r\n     * @param values\r\n     */\r\n    constructor(polynomString?: string, ...values: any[]) {\r\n        this._monoms = [];\r\n        this._factors = [];\r\n        if (polynomString !== undefined) {\r\n            this.parse(polynomString, ...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get monoms() {\r\n        return this._monoms;\r\n    }\r\n\r\n    set monoms(M: Monom[]) {\r\n        this._monoms = M;\r\n    }\r\n\r\n    get factors(): Polynom[] {\r\n        return this._factors;\r\n    }\r\n\r\n    set factors(value: Polynom[]) {\r\n        this._factors = value;\r\n    }\r\n\r\n    get texFactors(): string {\r\n        this.factorize()\r\n\r\n        let tex = ''\r\n        for (let f of this.factors) {\r\n            if (f.monoms.length > 1) {\r\n                tex += `(${f.tex})`\r\n            } else {\r\n                tex = f.tex + tex;\r\n            }\r\n        }\r\n        return tex;\r\n    }\r\n\r\n    get texString(): string {\r\n        return this._texString;\r\n    }\r\n\r\n    get length() {\r\n        // TODO: Must reduce the monoms list to remove the zero coefficient.\r\n        return this._monoms.length;\r\n    }\r\n\r\n    get display(): string {\r\n        return this.genDisplay();\r\n    }\r\n\r\n    get raw(): string {\r\n        return this._rawString\r\n    }\r\n\r\n    get tex(): string {\r\n        return this.genDisplay('tex');\r\n    }\r\n\r\n    get isMultiVariable(): boolean {\r\n        const B = false;\r\n        for (const m of this._monoms) {\r\n            if (m.variables.length > 1) {\r\n                return true;\r\n            }\r\n        }\r\n        return B;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            V = V.concat(m.variables);\r\n        }\r\n\r\n        // Remove duplicates.\r\n        V = [...new Set(V)];\r\n\r\n        return V;\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    private genDisplay = (output?: string, forceSign?: boolean, wrapParentheses?: boolean): string => {\r\n        let P: string = '';\r\n\r\n        for (const k of this._monoms) {\r\n            if (k.coefficient.value === 0) {\r\n                continue;\r\n            }\r\n\r\n            P += `${(k.coefficient.sign() === 1 && (P !== '' || forceSign === true)) ? '+' : ''}${(output === 'tex') ? k.tex : k.display}`;\r\n        }\r\n\r\n        if (wrapParentheses === true && this.length > 1) {\r\n            if (output === 'tex') {\r\n                P = `\\\\left( ${P} \\\\right)`;\r\n            } else {\r\n                P = `(${P})`;\r\n            }\r\n        }\r\n\r\n        if (P === '') {\r\n            P = '0';\r\n        }\r\n        return P;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse a string to a polynom.\r\n     * @param inputStr\r\n     * @param values: as string, numbers or fractions\r\n     */\r\n    parse = (inputStr: string, ...values: any[]): Polynom => {\r\n\r\n        if (values === undefined || values.length === 0) {\r\n            inputStr = '' + inputStr;\r\n            this._rawString = inputStr;\r\n\r\n            // Parse the polynom using the shuting yard algorithm\r\n            if (inputStr !== '' && !isNaN(Number(inputStr))) {\r\n                this.empty();\r\n                // It's a simple number.\r\n                let m = new Monom(inputStr);\r\n                // m.coefficient = new Fraction(inputStr);\r\n                // m.literalStr = '';\r\n                this.add(m);\r\n                return this;\r\n            }\r\n\r\n            // Parse the string.\r\n            return this.shutingYardToReducedPolynom(inputStr);\r\n        } else if (/^[a-z]/.test(inputStr)) {\r\n            // We assume the inputStr contains only letters.\r\n            this.empty();\r\n\r\n            let fractions = values.map(x => new Fraction(x));\r\n            // Multiple setLetter version\r\n            if (inputStr.length > 1) {\r\n                // TODO: check that the number of values given correspond to the letters (+1 eventually)\r\n                let letters = inputStr.split(''),\r\n                    i = 0;\r\n                for (let F of fractions) {\r\n                    let m = new Monom();\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = letters[i] || '';\r\n                    this.add(m);\r\n                    i++;\r\n                }\r\n            }\r\n            // Single setLetter version\r\n            else {\r\n                let n = fractions.length - 1;\r\n                for (let F of fractions) {\r\n                    let m = new Monom()\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = `${inputStr}^${n}`\r\n                    this.add(m);\r\n                    n--;\r\n                }\r\n            }\r\n            return this;\r\n        } else {\r\n            return this.zero();\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * Main parse using a shutting yard class\r\n     * @param inputStr\r\n     */\r\n    private shutingYardToReducedPolynom = (inputStr: string): Polynom => {\r\n        // Get the RPN array of the current expression\r\n        const SY: Shutingyard = new Shutingyard().parse(inputStr);\r\n        const rpn: { token: string, tokenType: string }[] = SY.rpn;\r\n        let m1: Polynom;\r\n        let m2: Polynom;\r\n\r\n        let stack: Polynom[] = [],\r\n            previousToken: string = null,\r\n            tempPolynom\r\n\r\n        for (const element of rpn) {\r\n            if (element.tokenType === 'coefficient' || element.tokenType === 'variable') {\r\n                tempPolynom = new Polynom().zero();\r\n                tempPolynom.monoms = [new Monom(element.token)]\r\n                stack.push(tempPolynom.clone())\r\n            } else if (element.tokenType === 'operation') {\r\n                m2 = (stack.pop()) || new Polynom().zero();\r\n                m1 = (stack.pop()) || new Polynom().zero();\r\n                switch (element.token) {\r\n                    case '+':\r\n                        stack.push(m1.add(m2))\r\n                        break;\r\n                    case '-':\r\n                        stack.push(m1.subtract(m2))\r\n                        break;\r\n                    case '*':\r\n                        stack.push(m1.multiply(m2))\r\n                        break;\r\n                    case '^':\r\n                        stack.push(m1.pow(+previousToken))\r\n                }\r\n            }\r\n            previousToken = element.token;\r\n        }\r\n\r\n        this._monoms = stack[0].monoms;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the polynom\r\n     */\r\n    clone = (): Polynom => {\r\n        const P = new Polynom();\r\n        const M: Monom[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            M.push(m.clone());\r\n        }\r\n\r\n        P.monoms = M;\r\n        return P;\r\n    };\r\n\r\n    /**\r\n     * Set the polynom to zero.\r\n     * @returns {this}\r\n     */\r\n    zero = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().zero());\r\n        this._rawString = '0';\r\n        return this;\r\n    };\r\n\r\n    one = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().one());\r\n        this._rawString = '1';\r\n        return this;\r\n    }\r\n\r\n    empty = (): Polynom => {\r\n        this._monoms = [];\r\n        this._rawString = '';\r\n        return this;\r\n    };\r\n\r\n    // // -----------------------------------------------\r\n    // // Polynom generators and randomizers\r\n    // // -----------------------------------------------\r\n    // random(config?: randomPolynomConfig) {\r\n    //     return Random.polynom(config);\r\n    // }\r\n    //\r\n    // private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n    //     degree: 2,\r\n    //     unit: true,\r\n    //     fractions: false,\r\n    //     factorable: false,\r\n    //     letters: 'x',\r\n    //     allowNullMonom: false,\r\n    //     numberOfMonoms: false\r\n    // };\r\n    // get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n    //     return this._randomizeDefaults;\r\n    // }\r\n    //\r\n    // set randomizeDefaults(value) {\r\n    //     this._randomizeDefaults = value;\r\n    // }\r\n    //\r\n    // randomize = (config: { [key: string]: number | string | boolean }): Polynom => {\r\n    //     let P = new Polynom();\r\n    //\r\n    //     // Check the config file and use the default values.\r\n    //     if (config === undefined) {\r\n    //         config = {};\r\n    //     }\r\n    //     for (let k in this._randomizeDefaults) {\r\n    //         if (config[k] === undefined) {\r\n    //             config[k] = this._randomizeDefaults[k];\r\n    //         }\r\n    //     }\r\n    //\r\n    //     // TODO: Build a more robust randomize function\r\n    //     return P;\r\n    // }\r\n    //\r\n    // rndFactorable = (degree: number = 2, unit: boolean | number = false, letters: string = 'x'): Polynom => {\r\n    //     // TODO: Make rndFactorable polynom generator more user friendly\r\n    //     this._factors = [];\r\n    //     for (let i = 0; i < degree; i++) {\r\n    //         let factorUnit = unit === true || i >= unit,\r\n    //             p = Random.polynom({\r\n    //                 degree: 1,\r\n    //                 unit: factorUnit,\r\n    //                 fraction: false,\r\n    //                 letters\r\n    //             });\r\n    //         this._factors.push(p);\r\n    //     }\r\n    //\r\n    //     this.empty().monoms = this._factors[0].monoms;\r\n    //     for (let i = 1; i < this._factors.length; i++) {\r\n    //         this.multiply(this._factors[i]);\r\n    //     }\r\n    //     return this;\r\n    // };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Polynom => {\r\n        this._monoms = this._monoms.map(m => m.opposed());\r\n        return this;\r\n    };\r\n\r\n    add = (...values: any[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value instanceof Polynom) {\r\n                this._monoms = this._monoms.concat(value.monoms);\r\n            } else if (value instanceof Monom) {\r\n                this._monoms.push(value.clone());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()));\r\n            } else {\r\n                this._monoms.push(new Monom(value));\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (...values: any[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value instanceof Polynom) {\r\n                this._monoms = this._monoms.concat(value.clone().opposed().monoms);\r\n            } else if (value instanceof Monom) {\r\n                this._monoms.push(value.clone().opposed());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()).opposed());\r\n            } else {\r\n                this._monoms.push(new Monom(value).opposed());\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    multiply = (value: any): Polynom => {\r\n        if (value instanceof Polynom) {\r\n            return this.multiplyByPolynom(value);\r\n        } else if (value instanceof Fraction) {\r\n            return this.multiplyByFraction(value);\r\n        } else if (value instanceof Monom) {\r\n            return this.multiplyByMonom(value);\r\n        } else if (Number.isSafeInteger(value)) {\r\n            return this.multiplyByInteger(value);\r\n        }\r\n\r\n        // Something went wrong...\r\n        return this;\r\n    }\r\n\r\n    private multiplyByPolynom = (P: Polynom): Polynom => {\r\n        const M: Monom[] = [];\r\n        for (const m1 of this._monoms) {\r\n            for (const m2 of P.monoms) {\r\n                M.push(Monom.xmultiply(m1, m2));\r\n            }\r\n        }\r\n\r\n        this._monoms = M;\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.multiply(F);\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByInteger = (nb: number): Polynom => {\r\n        return this.multiplyByFraction(new Fraction(nb));\r\n    };\r\n\r\n    private multiplyByMonom = (M: Monom): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.multiply(M)\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n    /**\r\n     * Divide the current polynom by another polynom.\r\n     * @param P\r\n     * returns {quotient: Polynom, reminder: Polynom}\r\n     */\r\n    euclidian = (P: Polynom): { quotient: Polynom, reminder: Polynom } => {\r\n        const letter: string = P.variables[0];\r\n        const quotient: Polynom = new Polynom().zero();\r\n        const reminder: Polynom = this.clone().reorder(letter);\r\n\r\n        // There is no variable !\r\n        if (P.variables.length === 0) {\r\n            return {quotient, reminder}\r\n        }\r\n\r\n        // Get at least a letter\r\n\r\n        const maxMP: Monom = P.monomByDegree(undefined, letter);\r\n        const degreeP: Fraction = P.degree(letter);\r\n\r\n        let newM: Monom;\r\n\r\n        // Make the euclidian division of the two polynoms.\r\n        let MaxIteration = this.degree(letter).clone().multiply(2);\r\n        while (reminder.degree(letter) >= degreeP && MaxIteration.isPositive()) {\r\n            MaxIteration.subtract(1)\r\n\r\n            // Get the greatest monom divided by the max monom of the divider\r\n            newM = reminder.monomByDegree(undefined, letter).clone().divide(maxMP);\r\n\r\n            if (newM.isZero()) {\r\n                break;\r\n            }\r\n\r\n            // Get the new quotient and reminder.\r\n            quotient.add(newM);\r\n            reminder.subtract(P.clone().multiply(newM));\r\n        }\r\n\r\n        return {quotient, reminder};\r\n    };\r\n\r\n    divide = (value: any): Polynom => {\r\n        if (value.isFraction) {\r\n            this.divideByFraction(value);\r\n        } else if (Number.isSafeInteger(value)) {\r\n            return this.divideByInteger(value);\r\n        }\r\n    }\r\n\r\n    private divideByInteger = (nb: number): Polynom => {\r\n        const nbF = new Fraction(nb);\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(nbF);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    private divideByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(F);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    pow = (nb: number): Polynom => {\r\n        if (!Number.isSafeInteger(nb)) {\r\n            return this.zero();\r\n        }\r\n        if (nb < 0) {\r\n            return this.zero();\r\n        }\r\n        if (nb === 0) {\r\n            return new Polynom();\r\n        }\r\n\r\n        const P = this.clone();\r\n        for (let i = 1; i < nb; i++) {\r\n            this.multiply(P);\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param P\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (P: Polynom, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '='\r\n        }\r\n\r\n        // Create clone version to reduce them without altering the original polynoms.\r\n        const cP1 = this.clone().reduce().reorder();\r\n        const cP2 = P.clone().reduce().reorder();\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree().isNotEqual(cP2.degree())) {\r\n                    return false;\r\n                }\r\n\r\n                // Check if the coefficients are the isSame.\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isEqual(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            case 'same':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree() !== cP2.degree()) {\r\n                    return false;\r\n                }\r\n\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isSameAs(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    isZero(): boolean {\r\n        return (this._monoms.length === 1 && this._monoms[0].coefficient.isZero()) || this._monoms.length === 0;\r\n    }\r\n\r\n    isOne(): boolean {\r\n        return this._monoms.length === 1 && this._monoms[0].coefficient.isOne();\r\n    }\r\n\r\n    isEqual = (P: Polynom): boolean => {\r\n        return this.compare(P, '=');\r\n    };\r\n\r\n    isSameAs = (P: Polynom): boolean => {\r\n        return this.compare(P, 'same');\r\n    };\r\n\r\n    isOpposedAt = (P: Polynom): boolean => {\r\n        return this.compare(P.clone().opposed(), '=');\r\n    };\r\n\r\n    isFactorized = (polynomString: string): boolean => {\r\n        let P;\r\n\r\n        // Check if polynom is complete...\r\n        if (polynomString.match(/\\(/g).length !== polynomString.match(/\\)/g).length) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check if the provided (string) version is fully factorized.\r\n        // Run a regex on the string.\r\n        let polynomStringNormalized = polynomString.replaceAll('*', ''),\r\n            polynomStringReduced = '' + polynomStringNormalized,\r\n            factors: string[] = [];\r\n\r\n        for (let x of polynomStringNormalized.matchAll(/\\(([a-z0-9+\\-]+)\\)(\\^[0-9]*)?/g)) {\r\n            if (x[2] !== undefined) {\r\n                for (let i = 0; i < +x[2].substr(1); i++) {\r\n                    factors.push(x[1])\r\n                }\r\n            } else {\r\n                factors.push(x[1]);\r\n            }\r\n            polynomStringReduced = polynomStringReduced.replaceAll(x[0], '');\r\n        }\r\n        if (polynomStringReduced !== '') {\r\n            factors.push(polynomStringReduced);\r\n        }\r\n        let polyFactors = factors.map(x => new Polynom(x));\r\n\r\n        // Factorize the current polynom.\r\n        this.factorize();\r\n\r\n        // Compare the given factors with the generated factors\r\n        let sign = 1;\r\n        for (let f of this.factors) {\r\n            for (let i = 0; i < polyFactors.length; i++) {\r\n                if (f.isEqual(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    break;\r\n                } else if (f.isOpposedAt(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    sign = -sign;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // The polyfactors must be empty and the cumulative opposite factors must be 1.\r\n        return (polyFactors.length === 0 && sign === 1);\r\n    }\r\n\r\n    isDeveloped = (polynomString: string): Boolean => {\r\n        let P: Polynom;\r\n\r\n        // There is at least one parenthese - it is not developed.\r\n        if (polynomString.match(/\\(/g).length + polynomString.match(/\\)/g).length) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            // Build the polynom\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check that everything is completely developed. Actually, there are no parentheses... so it is fully developed\r\n\r\n        // maybe it wasn't reduced and not ordered...\r\n        // compare polynom string.\r\n\r\n        // normalize the string\r\n        let polynomStringNormalized = polynomString.replaceAll('[*\\s]', '')\r\n\r\n        // Determine if it's the exact same string.\r\n        // TODO: Maybe it's enough to just make this test !\r\n        return polynomStringNormalized === P.reduce().reorder().display\r\n    }\r\n    // ------------------------------------------\r\n    // Misc polynoms functions\r\n    // -------------------------------------\r\n    reduce = (): Polynom => {\r\n        for (let i = 0; i < this._monoms.length; i++) {\r\n            for (let j = i + 1; j < this._monoms.length; j++) {\r\n                if (this._monoms[i].isSameAs(this.monoms[j])) {\r\n                    this._monoms[i].add(this.monoms[j]);\r\n                    this._monoms.splice(j, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Remove all null monoms\r\n        this._monoms = this._monoms.filter((m) => {\r\n            return m.coefficient.value !== 0\r\n        });\r\n\r\n        // Reduce all monoms coefficient.\r\n        for (const m of this._monoms) {\r\n            m.coefficient.reduce();\r\n        }\r\n\r\n        if (this.length === 0) {\r\n            return new Polynom().zero();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    reorder = (letter: string = 'x'): Polynom => {\r\n        // TODO: Must handle multiple setLetter reorder system\r\n        this._monoms.sort(function (a, b) {\r\n            return b.degree(letter).clone().subtract(a.degree(letter)).value\r\n        });\r\n        return this.reduce();\r\n    };\r\n\r\n    degree = (letter?: string): Fraction => {\r\n        let d: Fraction = new Fraction().zero();\r\n        for (const m of this._monoms) {\r\n            d = Fraction.max(m.degree(letter).value, d);\r\n        }\r\n        return d;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        let L: string[] = [], S = new Set();\r\n\r\n        for (let m of this._monoms) {\r\n            S = new Set([...S, ...m.variables]);\r\n        }\r\n\r\n        // @ts-ignore\r\n        return [...S];\r\n    }\r\n\r\n    /**\r\n     * Replace a variable (letter) by a polynom.\r\n     * @param letter\r\n     * @param P\r\n     */\r\n    replaceBy = (letter: string, P: Polynom): Polynom => {\r\n        let pow: number;\r\n        const resultPolynom: Polynom = new Polynom().zero();\r\n\r\n        for (const m of this.monoms) {\r\n            if (m.literal[letter] === undefined || m.literal[letter].isZero()) {\r\n                resultPolynom.add(m.clone());\r\n            } else {\r\n                // We have found a setLetter.\r\n                // Get the power and reset it.\r\n                pow = +m.literal[letter];\r\n                delete m.literal[letter];\r\n\r\n                resultPolynom.add(P.clone().pow(pow).multiply(m));\r\n            }\r\n        }\r\n\r\n        this._monoms = resultPolynom.reduce().reorder().monoms;\r\n        return this;\r\n    };\r\n\r\n    // Evaluate a polynom.\r\n    evaluate = (values: literalType | Fraction | number): Fraction => {\r\n        const r = new Fraction().zero();\r\n\r\n        this._monoms.forEach(monom => {\r\n            //console.log('Evaluate polynom: ', monom.display, values, monom.evaluate(values).display);\r\n            r.add(monom.evaluate(values));\r\n        });\r\n        return r;\r\n    };\r\n\r\n    derivative = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.derivative(letter));\r\n        }\r\n        return dP;\r\n\r\n    }\r\n\r\n    primitive = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.primitive(letter))\r\n        }\r\n        return dP\r\n    }\r\n\r\n    integrate = (a: Fraction | number, b: Fraction | number, letter?: string): Fraction => {\r\n        const primitive = this.primitive(letter)\r\n\r\n        if (letter === undefined) {\r\n            letter = 'x'\r\n        }\r\n\r\n        let valuesA: literalType = {},\r\n            valuesB: literalType = {}\r\n        valuesA[letter] = new Fraction(a);\r\n        valuesB[letter] = new Fraction(b);\r\n\r\n        return primitive.evaluate(valuesB).subtract(primitive.evaluate(valuesA))\r\n    }\r\n    // ------------------------------------------\r\n    // Polynoms factorization functions\r\n    // -------------------------------------\r\n    /**\r\n     * Factorize a polynom and store the best results in factors.\r\n     * @param maxValue Defines the greatest value to search to (default is 20).\r\n     */\r\n    factorize = (letter?: string): Polynom[] => {\r\n        let factors: Polynom[] = [];\r\n\r\n        // Extract the common monom\r\n        let P = this.clone().reorder(),\r\n            M = P.commonMonom(),\r\n            tempPolynom: Polynom\r\n        // It has a common monom.\r\n        if (!M.isOne()) {\r\n            tempPolynom = new Polynom()\r\n            tempPolynom.monoms = [M]\r\n            factors = [tempPolynom.clone()]\r\n            P = P.euclidian(tempPolynom).quotient;\r\n        }\r\n\r\n        let securityLoop = P.degree().clone().multiply(2).value\r\n        // securityLoop = 0\r\n        while (securityLoop >= 0) {\r\n            securityLoop--\r\n\r\n\r\n            if (P.monoms.length < 2) {\r\n                if (!P.isOne()) {\r\n                    factors.push(P.clone());\r\n                }\r\n                break;\r\n            } else {\r\n                // Get the first and last monom.\r\n                let m1 = P.monoms[0].dividers,\r\n                    m2 = P.monoms[P.monoms.length - 1].dividers\r\n\r\n                // console.log('CURRENT VALUE')\r\n                // console.log(P.tex)\r\n                // console.log('---------------------')\r\n                for (let m1d of m1) {\r\n                    for (let m2d of m2) {\r\n                        // if(m1d.degree()===m2d.degree()){continue}\r\n                        let dividerPolynom = new Polynom(),\r\n                            result\r\n                        dividerPolynom.monoms = [m1d.clone(), m2d.clone()]\r\n                        result = P.euclidian(dividerPolynom)\r\n\r\n                        // console.log(dividerPolynom.tex, '=>', result.reminder.tex, '|||||', result.quotient.tex)\r\n                        if (result.reminder.isZero()) {\r\n                            P = result.quotient.clone();\r\n                            factors.push(dividerPolynom)\r\n                            continue;\r\n                        }\r\n\r\n                        dividerPolynom.monoms = [m1d.clone(), m2d.clone().opposed()]\r\n                        result = P.euclidian(dividerPolynom)\r\n                        if (result.reminder.isZero()) {\r\n                            P = result.quotient.clone();\r\n                            factors.push(dividerPolynom)\r\n                        }\r\n                        // console.log(dividerPolynom.tex, '=>', result.reminder.tex)\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        this.factors = factors\r\n        return factors;\r\n    }\r\n\r\n    private _factorize2ndDegree = (letter: string): Polynom[] => {\r\n        let P1: Polynom, P2: Polynom,\r\n            a, b, c, delta, x1, x2, factor;\r\n\r\n        // One variable only\r\n        if (this.numberOfVars === 1) {\r\n            a = this.monomByDegree(2, letter).coefficient;\r\n            b = this.monomByDegree(1, letter).coefficient;\r\n            c = this.monomByDegree(0, letter).coefficient;\r\n            delta = b.clone().pow(2).subtract(a.clone().multiply(c).multiply(4));\r\n\r\n            if (delta.isZero()) {\r\n                x1 = b.clone().opposed().divide(a.clone().multiply(2))\r\n                P1 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                P2 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                factor = a.divide(x1.denominator).divide(x1.denominator);\r\n\r\n                if (!factor.isOne()) {\r\n                    // TODO: Update new Polynom to accept anything...\r\n                    return [new Polynom(factor.display), P1, P2]\r\n                } else {\r\n                    return [P1, P2]\r\n                }\r\n            } else if (delta.isPositive() && delta.isSquare()) {\r\n                x1 = b.clone().opposed()\r\n                    .add(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n                x2 = b.clone().opposed()\r\n                    .subtract(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n\r\n                // (2x+5)(3x-2)\r\n                // 6x^2+11x-10\r\n                // a = 6, b = 11, c = -10\r\n                // delta = 121-4*6*(-10) = 361= 19^2\r\n                // x1 = (-11 + 19)  / 12 = 8/12 = 2/3\r\n                // x2 = (-11 - 19)  / 12 = -30/12 = -5/2\r\n                factor = a.divide(x1.denominator).divide(x2.denominator);\r\n                if (factor.isOne()) {\r\n                    return [\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n                } else {\r\n                    return [\r\n                        new Polynom(factor.display),\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n\r\n                }\r\n            } else {\r\n                // No solution possible - return the complete value.\r\n                return [this.clone()]\r\n            }\r\n        } else {\r\n            // If multiple variables, only handle perfect squares...\r\n            a = this.monomByDegree(2, letter);\r\n            b = this.monomByDegree(1, letter);\r\n            c = this.monomByDegree(0, letter);\r\n\r\n\r\n            if (a.isLiteralSquare() && c.isLiteralSquare()) {\r\n                // Check the middle item is same as...\r\n                if (b.clone().pow(2).isSameAs(a.clone().multiply(c))) {\r\n                    // Determine if the coefficient values matches.\r\n\r\n                    // Search 4 values (r, s, t, u) that matches:\r\n                    // (r X + s Y)(t X + u Y) = rt X^2 + (ru + st) XY + su Y^2\r\n\r\n                    let xPolynom = new Polynom('x', a.coefficient, b.coefficient, c.coefficient);\r\n                    let xFactors = xPolynom._factorize2ndDegree('x');\r\n\r\n                    let factors = [], xyzPolynom: Polynom;\r\n\r\n                    if (xFactors.length >= 2) {\r\n                        for (let p of xFactors) {\r\n                            if (p.degree().isZero()) {\r\n                                factors.push(p.clone())\r\n                            } else {\r\n                                xyzPolynom = p.clone();\r\n                                xyzPolynom.monoms[0].literal = a.literalSqrt\r\n                                xyzPolynom.monoms[1].literal = c.literalSqrt\r\n                                factors.push(xyzPolynom.clone())\r\n                            }\r\n                        }\r\n                        return factors\r\n                    }\r\n                }\r\n            }\r\n\r\n            return [this.clone()]\r\n            //\r\n            // console.log(a.tex, b.tex, c.tex)\r\n            // if (a.isSquare() && c.isSquare()) {\r\n            //     console.log('A C squares')\r\n            //     if (a.clone().sqrt().multiply(c.clone().sqrt()).multiplyByNumber(2).isSameAs(b)) {\r\n            //         console.log('HERE')\r\n            //         if (a.coefficient.sign() === b.coefficient.sign()) {\r\n            //             return []\r\n            //         }else{\r\n            //             return []\r\n            //         }\r\n            //     }\r\n            // } else if(a.isLiteralSquare() && c.isLiteralSquare()) {\r\n            //     console.log('A C litteral SQUARES')\r\n            //     // Check that the middle element is the product of a and c.\r\n            //\r\n            //     if(b.clone().pow(2).isSameAs(a.clone().multiply(c))){\r\n            //         console.log('SAME')\r\n            //\r\n            //     }else{\r\n            //         console.log('NOT SAME')\r\n            //     }\r\n            //\r\n            //     return [this.clone()]\r\n            // } else {\r\n            //     console.log('NOT SQUARES AT ALL !!!!')\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    private _factorizeByGroups = (): Polynom[] => {\r\n        // TODO: Factorize by groups.\r\n        return [];\r\n    }\r\n    // ------------------------------------------\r\n    // Polynoms helpers functions\r\n    // -------------------------------------\r\n    // TODO: get zeroes for more than first degree and for more than natural degrees\r\n    getZeroes = (): (Fraction | boolean)[] => {\r\n        const Z: Fraction[] = [];\r\n\r\n        switch (this.degree().value) {\r\n            case 0:\r\n                if (this._monoms[0].coefficient.value === 0) {\r\n                    return [true];\r\n                } else {\r\n                    return [false];\r\n                }\r\n            case 1:\r\n                // There is only one monoms,\r\n                if (this._monoms.length === 1) {\r\n                    return [new Fraction().zero()];\r\n                } else {\r\n                    const P = this.clone().reduce().reorder();\r\n                    return [P.monoms[1].coefficient.opposed().divide(P.monoms[0].coefficient)];\r\n                }\r\n            // TODO: Determine the zeros of an equation of second degree.\r\n            //case 2:\r\n            default:\r\n                // Make sure the polynom is factorized.\r\n                if (this._factors.length === 0) {\r\n                    this.factorize()\r\n                }\r\n\r\n                let zeroes = [], zeroesAsTex = [];\r\n                for (let P of this._factors) {\r\n                    if (P.degree().greater(2)) {\r\n                        // TODO: Handle other polynom.\r\n\r\n                    } else if (P.degree().value === 2) {\r\n                        let A = P.monomByDegree(2).coefficient,\r\n                            B = P.monomByDegree(1).coefficient,\r\n                            C = P.monomByDegree(0).coefficient,\r\n                            D = B.clone().pow(2).subtract(A.clone().multiply(C).multiply(4));\r\n\r\n                        if (D.value > 0) {\r\n                            /*console.log('Two zeroes for ', P.tex); */\r\n                            let x1 = (-(B.value) + Math.sqrt(D.value)) / (2 * A.value),\r\n                                x2 = (-(B.value) - Math.sqrt(D.value)) / (2 * A.value);\r\n\r\n                            zeroes.push(new Fraction(x1.toFixed(3)).reduce());\r\n                            zeroes.push(new Fraction(x2.toFixed(3)).reduce());\r\n                        } else if (D.value === 0) {\r\n                            /*console.log('One zero for ', P.tex); */\r\n\r\n                        } else {\r\n                            console.log('No zero for ', P.tex);\r\n                        }\r\n                    } else {\r\n                        for (let z of P.getZeroes()) {\r\n                            // Check if the zero is already in the list.\r\n                            if (z === false || z === true) {\r\n                                continue;\r\n                            }\r\n                            if (zeroesAsTex.indexOf(z.frac) === -1) {\r\n                                zeroes.push(z);\r\n                                zeroesAsTex.push(z.frac);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return zeroes;\r\n        }\r\n        return Z;\r\n    };\r\n\r\n\r\n    // TODO: analyse the next functions to determine if they are useful or not...\r\n    monomByDegree = (degree?: Fraction|number, letter?: string): Monom => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomByDegree(this.degree(letter), letter);\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter).isEqual(degree)) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        // Nothing was found - return the null monom.\r\n        return new Monom().zero();\r\n    };\r\n\r\n    monomsByDegree = (degree?: number|Fraction, letter?: string): Monom[] => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomsByDegree(this.degree(letter));\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        let Ms: Monom[] = [];\r\n\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter) === degree) {\r\n                Ms.push(m.clone())\r\n            }\r\n        }\r\n\r\n        return Ms\r\n        // Nothing was found - retur\r\n    }\r\n\r\n    // Used in LinearSystem.tex\r\n    monomByLetter = (letter: string): Monom => {\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.hasLetter(letter)) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        return new Monom().zero();\r\n    };\r\n\r\n\r\n    // Next functions are used for for commonMonom, which is used in the factorize method.\r\n    getDenominators = (): number[] => {\r\n        const denominators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            denominators.push(m.coefficient.denominator);\r\n        }\r\n        return denominators;\r\n    };\r\n\r\n    getNumerators = (): number[] => {\r\n        const numerators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            numerators.push(m.coefficient.numerator);\r\n        }\r\n        return numerators;\r\n    };\r\n\r\n    lcmDenominator = (): number => {\r\n        return Numeric.lcm(...this.getDenominators());\r\n    };\r\n\r\n    gcdDenominator = (): number => {\r\n        return Numeric.gcd(...this.getDenominators());\r\n    };\r\n\r\n    lcmNumerator = (): number => {\r\n        return Numeric.lcm(...this.getNumerators());\r\n    };\r\n\r\n    gcdNumerator = (): number => {\r\n        return Numeric.gcd(...this.getNumerators());\r\n    };\r\n\r\n    commonMonom = (): Monom => {\r\n        let M = new Monom().one(), numerator: number, denominator: number, degree = this.degree();\r\n\r\n        numerator = this.gcdNumerator();\r\n        denominator = this.gcdDenominator();\r\n\r\n        M.coefficient = new Fraction(numerator, denominator);\r\n        for (let L of this.variables) {\r\n            // Initialize the setLetter with the max degree\r\n            M.setLetter(L, degree);\r\n            for (let m of this._monoms) {\r\n                M.setLetter(L, Fraction.min(m.degree(L), M.degree(L)));\r\n                if (M.degree(L).isZero()) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return M;\r\n    }\r\n}\r\n","/**\r\n * Rational polynom module contains everything necessary to handle rational polynoms.\r\n * @module Polynom\r\n */\r\n\r\nimport {Polynom} from \"./polynom\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\n/**\r\n * Rational class can handle rational polynoms\r\n */\r\n    export class Rational {\r\n        private _rawString: string;\r\n        private _numerator: Polynom;\r\n        private _denominator: Polynom;\r\n\r\n        /**\r\n         *\r\n         * @param numerator\r\n         * @param denominator\r\n         */\r\n        constructor(numerator?: Polynom, denominator?: Polynom) {\r\n            this._numerator = numerator ? numerator.clone() : new Polynom();\r\n            this._denominator = denominator ? denominator.clone() : new Polynom();\r\n        }\r\n\r\n        clone = (): Rational => {\r\n            this._numerator = this._numerator.clone()\r\n            this._denominator = this._denominator.clone()\r\n\r\n            return this;\r\n        }\r\n\r\n        get tex(): string {\r\n            return `\\\\dfrac{ ${this._numerator.tex} }{ ${this._denominator.tex} }`;\r\n        }\r\n\r\n        get texFactors(): string {\r\n            this._numerator.factorize()\r\n            this._denominator.factorize()\r\n\r\n            return `\\\\dfrac{ ${this._numerator.texFactors} }{ ${this._denominator.texFactors} }`\r\n        }\r\n\r\n        get numerator(): Polynom {\r\n            return this._numerator\r\n        }\r\n\r\n        get denominator(): Polynom {\r\n            return this._denominator\r\n        }\r\n\r\n        domain = (): string => {\r\n            let zeroes = this._denominator.getZeroes();\r\n            if (zeroes.length === 0 || zeroes[0] === false) {\r\n                return '\\\\mathbb{R}'\r\n            } else if (zeroes[0] === true) {\r\n                return '\\\\varnothing'\r\n            } else {\r\n                return '\\\\mathbb{R}\\\\setminus\\\\left{' +\r\n                    zeroes.map(x => {\r\n                        return (typeof x === 'boolean') ? '' : x.frac\r\n                    })\r\n                        .join(';') + '\\\\right}'\r\n            }\r\n        }\r\n\r\n        amplify = (P: Polynom): Rational => {\r\n            this._numerator.multiply(P);\r\n            this._denominator.multiply(P);\r\n\r\n            return this;\r\n        }\r\n\r\n        simplify = (P: Polynom): Rational => {\r\n            let NumeratorEuclidien = this._numerator.euclidian(P);\r\n            if (!NumeratorEuclidien.reminder.isZero()) {\r\n                return this;\r\n            }\r\n\r\n            let DenominatorEuclidien = this._denominator.euclidian(P);\r\n            if (!DenominatorEuclidien.reminder.isZero()) {\r\n                return this;\r\n            }\r\n\r\n            this._numerator = NumeratorEuclidien.quotient;\r\n            this._denominator = DenominatorEuclidien.quotient;\r\n            return this;\r\n        }\r\n\r\n        reduce = (): Rational => {\r\n            console.log(this._numerator.tex)\r\n            this._numerator.factorize();\r\n            console.log(this._numerator.factors.map(x => x.tex))\r\n            for (let f of this._numerator.factors) {\r\n                this.simplify(f);\r\n            }\r\n\r\n            return this;\r\n        }\r\n\r\n        opposed = (): Rational => {\r\n            this._numerator.opposed();\r\n            return this;\r\n        }\r\n        add = (R: Rational): Rational => {\r\n            // 1. Make sure both rational are at the same denominator\r\n            // 2. Add the numerators.\r\n            // 3. Simplify\r\n\r\n            // Store the adding denominator\r\n            let denominator = this._denominator.clone()\r\n\r\n            // Amplif the main rational polynom by the adding denominator\r\n            this.amplify(R._denominator)\r\n\r\n            // Add to the numerator the adding value...\r\n            this._numerator.add(R._numerator.clone().multiply(denominator));\r\n\r\n            return this;\r\n        }\r\n\r\n        subtract = (R: Rational): Rational => {\r\n            return this.add(R.clone().opposed())\r\n        }\r\n\r\n        limits = (value: Fraction | number, letter?: string): Fraction | number => {\r\n            if (value === Infinity || value === -Infinity) {\r\n                let N = this._numerator.monomByDegree(this._numerator.degree(letter), letter),\r\n                    D = this._denominator.monomByDegree(this._denominator.degree(letter), letter)\r\n\r\n                N.divide(D)\r\n\r\n                if (N.degree(letter).isStrictlyPositive()) {\r\n                    return N.coefficient.sign() * (Math.pow((value > 0 ? 1 : -1), N.degree(letter).value % 2)) === 1 ? Infinity : -Infinity\r\n                }\r\n                if (N.degree(letter).isZero()) {\r\n                    return N.coefficient\r\n                }\r\n                if (N.degree(letter).isStrictlyPositive()) {\r\n                    return N.coefficient.sign() * (Math.pow(-1, N.degree(letter).value % 2)) === 1 ? 0 : -0\r\n                }\r\n            } else {\r\n                return this._numerator.evaluate({letter: new Fraction(value)}).divide(this._denominator.evaluate({letter: new Fraction(value)}))\r\n            }\r\n        }\r\n    }\r\n","import {Numeric} from \"../numeric\";\r\nimport {Random} from \"../random\";\r\n\r\nexport class Fraction {\r\n    private _numerator: number;\r\n    private _denominator: number;\r\n\r\n    constructor(value?: any, denominatorOrPeriodic?: number) {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n\r\n        if (value !== undefined) {\r\n            this.parse(value, denominatorOrPeriodic);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isFraction() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n\r\n    get numerator(): number {\r\n        return this._numerator;\r\n    }\r\n\r\n    set numerator(value: number) {\r\n        this._numerator = value;\r\n    }\r\n\r\n    get denominator(): number {\r\n        return this._denominator;\r\n    }\r\n\r\n    set denominator(value: number) {\r\n        this._denominator = value;\r\n    }\r\n\r\n    get value(): number {\r\n        return this._numerator / this._denominator;\r\n    }\r\n\r\n    // Display getter\r\n    get tex(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else if (this._numerator < 0) {\r\n            return `-\\\\frac{ ${-this._numerator} }{ ${this._denominator} }`;\r\n        } else {\r\n            return `\\\\frac{ ${this._numerator} }{ ${this._denominator} }`;\r\n        }\r\n    }\r\n\r\n    get display(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else {\r\n            return `${this._numerator}/${this._denominator}`;\r\n        }\r\n    }\r\n\r\n    // Helper function to display fractions\r\n    get frac(): string {\r\n        return this.tex;\r\n    }\r\n\r\n    get dfrac(): string {\r\n        return this.tex.replace('\\\\frac', '\\\\dfrac');\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse the value to get the numerator and denominator\r\n     * @param value : number or string to parse to get the fraction\r\n     * @param denominatorOrPeriodic (optional|number) : length of the periodic part: 2.333333 => 1 or denominator value\r\n     */\r\n    parse = (value: any, denominatorOrPeriodic?: number): Fraction => {\r\n        let S: string[];\r\n\r\n        // A null value means a zero fraction.\r\n        if (value === null || value === \"\") {\r\n            this._numerator = 0;\r\n            this._denominator = 1;\r\n            return this;\r\n        }\r\n\r\n        switch (typeof value) {\r\n            case \"string\":\r\n                // Split the sting value in two parts: Numerator/Denominator\r\n                S = value.split('/');\r\n\r\n                // Security checks\r\n                if (S.length > 2) throw \"Two many divide signs\";\r\n                if (S.map(x => x === '' || isNaN(Number(x))).includes(true)) throw \"Not a number\"\r\n\r\n\r\n                if (S.length === 1) {\r\n                    // No divide sign\r\n                    return this.parse(+S[0]);\r\n                } else if (S.length === 2) {\r\n                    // One divide signe\r\n                    // We check if the denominator is zero\r\n                    if (S[1] === '0') {\r\n                        this._numerator = NaN;\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._numerator = +S[0];\r\n                        this._denominator = +S[1];\r\n                    }\r\n                } else {\r\n                    // More than one divide sign ?\r\n                    this._numerator = NaN;\r\n                    this._denominator = 1;\r\n                }\r\n                break;\r\n            case \"number\":\r\n                if (Number.isSafeInteger(value)) {\r\n                    // The given value is an integer\r\n                    this._numerator = +value;\r\n\r\n                    if (denominatorOrPeriodic === undefined || !Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._denominator = +denominatorOrPeriodic;\r\n                    }\r\n                } else {\r\n                    // The given value is a float number\r\n\r\n                    // Get the number of decimals after the float sign\r\n                    let p: number = (value.toString()).split('.')[1].length;\r\n\r\n                    // Transform the float number in two integer\r\n                    if (denominatorOrPeriodic === undefined) {\r\n                        this._numerator = value * Math.pow(10, p);\r\n                        this._denominator = Math.pow(10, p);\r\n                    } else if (Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._numerator = value * Math.pow(10, p) - Math.floor(value * Math.pow(10, p - denominatorOrPeriodic));\r\n                        this.denominator = Math.pow(10, p) - Math.pow(10, p - denominatorOrPeriodic)\r\n                    }\r\n                }\r\n                break;\r\n            case \"object\":\r\n                if (value.isFraction) {\r\n                    this._numerator = +value.numerator;\r\n                    this._denominator = +value.denominator;\r\n                }\r\n                break;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): Fraction => {\r\n        let F = new Fraction();\r\n        F.numerator = +this._numerator;\r\n        F.denominator = +this._denominator;\r\n        return F;\r\n    };\r\n\r\n    zero = (): Fraction => {\r\n        this._numerator = 0;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    one = (): Fraction => {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    infinite = (): Fraction => {\r\n        this._numerator = Infinity;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    invalid = (): Fraction => {\r\n        this._numerator = NaN;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Fraction => {\r\n        this._numerator = -this._numerator;\r\n        return this;\r\n    };\r\n\r\n    add = (F: Fraction | number): Fraction => {\r\n        if (F instanceof Fraction) {\r\n            let N: number = this._numerator,\r\n                D: number = this._denominator;\r\n\r\n            this._numerator = N * F.denominator + F.numerator * D;\r\n            this._denominator = D * F.denominator;\r\n        }else{\r\n            return this.add(new Fraction(F))\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (F: Fraction | number): Fraction => {\r\n        if (F instanceof Fraction) {\r\n            return this.add(F.clone().opposed());\r\n        } else {\r\n            return this.add(-F)\r\n        }\r\n    };\r\n\r\n    multiply = (F: Fraction | number): Fraction => {\r\n        // Parse the value.\r\n        // If it's a fraction, return a clone of it\r\n        // If it's an integer, return the fraction F/1\r\n        let Q = new Fraction(F);\r\n\r\n        this._numerator = this._numerator * Q.numerator;\r\n        this._denominator = this._denominator * Q.denominator;\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    divide = (F: Fraction | number): Fraction => {\r\n        let Q = new Fraction(F);\r\n\r\n        if (Q.numerator === 0) {\r\n            return new Fraction().infinite();\r\n        }\r\n\r\n        let N: number = +this._numerator,\r\n            D: number = +this._denominator;\r\n\r\n        this._numerator = N * Q.denominator;\r\n        this._denominator = D * Q.numerator;\r\n        return this.reduce();\r\n    };\r\n\r\n    invert = (): Fraction => {\r\n        let n = +this._numerator, d = +this._denominator;\r\n        this._numerator = d;\r\n        this._denominator = n;\r\n\r\n        return this;\r\n    }\r\n    pow = (p: number | Fraction): Fraction => {\r\n        // TODO: Fraction.pow with a value different than a safe integer ?\r\n        if (p instanceof Fraction) {\r\n            return this.pow(p.value)\r\n        }\r\n\r\n        if (!Number.isSafeInteger(p)) {\r\n            return this.invalid();\r\n        }\r\n\r\n        this.reduce();\r\n\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        this._numerator = this._numerator ** Math.abs(p);\r\n        this._denominator = this._denominator ** Math.abs(p);\r\n        return this;\r\n    };\r\n\r\n    root = (p: number): Fraction => {\r\n        // TODO: nth - root of a fraction => this will return another type of coefficient.\r\n\r\n        // Check if they are perfect roots..\r\n        if (p === 0) {\r\n            return this;\r\n        }\r\n\r\n        // If negative, invert the fraction\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        let n = Math.pow(this._numerator, Math.abs(1 / p)),\r\n            d = Math.pow(this._denominator, Math.abs(1 / p));\r\n\r\n        this._numerator = Math.pow(this._numerator, Math.abs(1 / p));\r\n        this._denominator = Math.pow(this._denominator, Math.abs(1 / p));\r\n        return this;\r\n    }\r\n\r\n    sqrt = (): Fraction => {\r\n        return this.root(2);\r\n    }\r\n\r\n    abs = (): Fraction => {\r\n        this._numerator = Math.abs(this._numerator);\r\n        this._denominator = Math.abs(this._denominator);\r\n        return this;\r\n    };\r\n\r\n\r\n    static max = (...fractions: (Fraction|number)[]): Fraction => {\r\n        let M = new Fraction(fractions[0])\r\n\r\n        for (let m of fractions) {\r\n            let compare = new Fraction(m)\r\n            if (compare.greater(M)) {\r\n                M = compare.clone()\r\n            }\r\n        }\r\n\r\n        return M\r\n    }\r\n    static min = (...fractions: (Fraction|number)[]): Fraction => {\r\n        let M = new Fraction(fractions[0])\r\n\r\n        for (let m of fractions) {\r\n            let compare = new Fraction(m)\r\n            if (compare.lesser(M)) {\r\n                M = compare.clone()\r\n            }\r\n        }\r\n\r\n        return M\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations specific to fractions\r\n    // ------------------------------------------\r\n    reduce = (): Fraction => {\r\n        let g = Numeric.gcd(this._numerator, this._denominator);\r\n        this._numerator = this._numerator / g;\r\n        this._denominator = this._denominator / g;\r\n\r\n        if (this._denominator < 0) {\r\n            this._denominator = -this._denominator;\r\n            this._numerator = -this._numerator;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    amplify = (k: number): Fraction => {\r\n        if (Number.isSafeInteger(k)) {\r\n            this._numerator *= k;\r\n            this._denominator *= k;\r\n        }\r\n        return this;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param F (Coefficient) The coefficient to compare\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (F: unknown, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n        let compareFraction: Fraction\r\n        if (F instanceof Fraction) {\r\n            compareFraction = F.clone()\r\n        } else {\r\n            compareFraction = new Fraction(F)\r\n        }\r\n\r\n        switch (sign) {\r\n            case '>':\r\n                return this.value > compareFraction.value;\r\n            case \">=\" || \"=>\" || \"geq\":\r\n                return this.value >= compareFraction.value;\r\n            case \"<\":\r\n                return this.value < compareFraction.value;\r\n            case \"<=\" || \"=>\" || \"leq\":\r\n                return this.value <= compareFraction.value;\r\n            case \"=\":\r\n                // let F2: Fraction = compareFraction.clone().reduce(),\r\n                //     F1: Fraction = this.clone().reduce();\r\n                // return (F1.numerator === F2.numerator && F1.denominator === F2.denominator);\r\n                return this.value === compareFraction.value;\r\n            case \"<>\":\r\n                return this.value !== compareFraction.value;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n    /* Compare shortcuts */\r\n    lesser = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '<');\r\n    };\r\n    leq = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '<=');\r\n    };\r\n    greater = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '>');\r\n    };\r\n    geq = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '>=');\r\n    };\r\n    isEqual = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '=');\r\n    }\r\n    isNotEqual = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '<>');\r\n    }\r\n    isOpposed = (p: Fraction): boolean => {\r\n        return this.isEqual(p.clone().opposed());\r\n    }\r\n    isInverted = (p: Fraction): boolean => {\r\n        return this.isEqual(new Fraction().one().divide(p.clone()));\r\n    }\r\n    isZero = (): boolean => {\r\n        return this._numerator === 0;\r\n    }\r\n    isNotZero = (): boolean => {\r\n        return this._numerator !== 0;\r\n    }\r\n    isOne = (): boolean => {\r\n        return this._numerator === 1 && this._denominator === 1;\r\n    }\r\n    isNegativeOne = (): boolean => {\r\n        return this._numerator === -1 && this._denominator === 1;\r\n    }\r\n    isPositive = (): boolean => {\r\n        return this.sign() === 1;\r\n    }\r\n    isNegative = (): boolean => {\r\n        return this.sign() === -1;\r\n    }\r\n    isStrictlyPositive = (): boolean => {\r\n        return this.value > 0\r\n    }\r\n    isStrictlyNegative = (): Boolean => {\r\n        return this.value < 0\r\n    }\r\n    isNaN = (): boolean => {\r\n        return isNaN(this._numerator);\r\n    }\r\n    isInfinity = (): boolean => {\r\n        return this._numerator === Infinity;\r\n    }\r\n    isFinite = (): boolean => {\r\n        return !this.isInfinity();\r\n    }\r\n    isSquare = (): boolean => {\r\n        return Math.sqrt(this._numerator) % 1 === 0 && Math.sqrt(this._denominator) % 1 === 0\r\n    }\r\n    isReduced = (): boolean => {\r\n        return Math.abs(Numeric.gcd(this._numerator, this._denominator)) === 1\r\n    }\r\n    isNatural = (): boolean => {\r\n        return this.clone().reduce().denominator === 1\r\n    }\r\n    isRational = (): boolean => {\r\n        return !this.isNatural()\r\n    }\r\n    isEven = (): boolean => {\r\n        return this.isNatural() && this.value % 2 === 0\r\n    }\r\n    isOdd = (): boolean => {\r\n        return this.isNatural() && this.value % 2 === 1\r\n    }\r\n    sign = (): number => {\r\n        return (this._numerator * this._denominator >= 0) ? 1 : -1;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Simple function to determine if it's a fraction\r\n     */\r\n    areEquals = (...F: Fraction[]): boolean => {\r\n        for (let i = 0; i < F.length; i++) {\r\n            if (!this.isEqual(F[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n}","export * from \"./fraction\"\r\nexport * from \"./nthroot\"","export class Nthroot {\r\n    private _radical: number;\r\n    private _nth: number;\r\n    private _coefficient: number;\r\n    private _isValid:boolean;\r\n\r\n    constructor() {\r\n        this._radical = 1;\r\n        this._coefficient = 1;\r\n        this._nth = 2;\r\n        this._isValid = true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get radical(): number {\r\n        return this._radical;\r\n    }\r\n\r\n    set radical(value: number) {\r\n        this._radical = value;\r\n    }\r\n\r\n    get nth(): number {\r\n        return this._nth;\r\n    }\r\n\r\n    set nth(value: number) {\r\n        if (Number.isSafeInteger(value) && value >= 2) {\r\n            this._nth = value;\r\n        } else {\r\n            // Error setting the nth root.\r\n            console.log('Error setting the nth root');\r\n            this._nth = 2;\r\n        }\r\n    }\r\n\r\n    get coefficient(): number {\r\n        return this._coefficient;\r\n    }\r\n\r\n    set coefficient(value: number) {\r\n        this._coefficient = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let C: string;\r\n\r\n        if (this._coefficient === 1) {\r\n            C = '';\r\n        } else if (this._coefficient === -1) {\r\n            C = '-';\r\n        } else {\r\n            C = this._coefficient.toString();\r\n        }\r\n\r\n        if (this._radical === 1) {\r\n            return `${this._coefficient}`;\r\n        } else {\r\n            if (this._nth === 2) {\r\n                return `${C}\\\\sqrt{${this._radical}}`\r\n            } else {\r\n                return `${C}\\\\sqrt[${this._nth}]{${this._radical}}`\r\n            }\r\n        }\r\n    }\r\n\r\n    get value(): number {\r\n        return this._coefficient * Math.pow(this._radical, 1 / this._nth);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (radical: number, nthroot?: number, coefficient?: number): Nthroot => {\r\n        this._coefficient = (coefficient === undefined) ? 1 : coefficient;\r\n        this._nth = (nthroot === undefined) ? 2 : nthroot;\r\n        this._radical = (radical === undefined) ? 1 : radical;\r\n\r\n        if(this._nth%2===0 && this._radical<0){\r\n            this._isValid = false;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    reduce = (): Nthroot => {\r\n        // Max value to test.\r\n        let V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n        while (V > 1) {\r\n            if (this._radical % Math.pow(V, this._nth) === 0) {\r\n                // It's dividable by V^n\r\n                this._coefficient *= V;\r\n                this._radical = this._radical / Math.pow(V, this._nth);\r\n\r\n                // Redifine the new testing value (this is optimization)\r\n                V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n                continue;\r\n            }\r\n            V--;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiply = (N: Nthroot): Nthroot => {\r\n        this._radical *= N.radical;\r\n        return this.reduce();\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Help functions\r\n    // ------------------------------------------\r\n    hasRadical = ():boolean => {\r\n        return !(this._radical===1 || this._radical===0 || this._isValid===false)\r\n    };\r\n}","import {Point} from \"./point\";\r\nimport {Fraction} from \"../coefficients\";\r\nimport {Equation, Monom, Polynom} from \"../algebra\";\r\nimport {Line} from \"./line\";\r\nimport {Vector} from \"./vector\";\r\n\r\n\r\nexport class Circle {\r\n    private _center: Point;\r\n    private _radius: Fraction;\r\n    private _squareRadius: Fraction;\r\n    private _cartesian: Equation;\r\n    private _exists: boolean;\r\n\r\n    constructor(...values: any) {\r\n        this._exists = false\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values)\r\n        }\r\n    }\r\n\r\n\r\n    get center(): Point {\r\n        return this._center;\r\n    }\r\n\r\n    private parse(...values: any) {\r\n        if (values.length === 1 && typeof values[0] === 'string') {\r\n            this.checkCircle(new Equation(values[0]))\r\n        } else if (values.length >= 2) {\r\n            this._center = new Point(values[0])\r\n\r\n            if(values[1] instanceof Point){\r\n                // Go through this point\r\n                this._squareRadius = new Vector(this._center, values[1]).normSquare\r\n            }else {\r\n                if (values[2] === true) {\r\n                    this._squareRadius = new Fraction(values[1])\r\n                } else {\r\n                    this._radius = new Fraction(values[1])\r\n                    this._squareRadius = this._radius.clone().pow(2)\r\n                }\r\n            }\r\n            this._cartesian = (new Equation(\r\n                new Polynom(`(x-(${this._center.x.display}))^2+(y-(${this._center.y.display}))^2`),\r\n                new Polynom(`${this._squareRadius.display}`)\r\n            )).moveLeft()\r\n        }\r\n    }\r\n\r\n    get radius(): { tex: string, display: string } {\r\n        if (this._squareRadius.isSquare()) {\r\n            return {\r\n                tex: this._squareRadius.clone().sqrt().tex,\r\n                display: this._squareRadius.clone().sqrt().display,\r\n            }\r\n        } else {\r\n            return {\r\n                tex: `\\\\sqrt{${this._squareRadius.tex}}`,\r\n                display: `sqrt(${this._squareRadius.display})`\r\n            }\r\n        }\r\n        return this._squareRadius\r\n    }\r\n\r\n    get tex(): string {\r\n        let cx, cy\r\n        if (this._center.x.isZero()) {\r\n            cx = 'x^2'\r\n        } else {\r\n            cx = `\\\\left(x${this._center.x.isNegative()?'+':'-'}${this._center.x.clone().abs().tex}\\\\right)^2`\r\n        }\r\n        if (this._center.y.isZero()) {\r\n            cy = 'y^2'\r\n        } else {\r\n            cy = `\\\\left(y${this._center.y.isNegative()?'+':'-'}${this._center.y.clone().abs().tex}\\\\right)^2`\r\n        }\r\n        return `${cx}+${cy}=${this._squareRadius.tex}`\r\n    }\r\n\r\n    get developed(): string {\r\n        return this._cartesian.tex\r\n    }\r\n\r\n    checkCircle = (P: Equation): boolean => {\r\n        if (P.degree('x').value === 2 && P.degree('y').value === 2) {\r\n            // Both must be of degree 2.\r\n            let x2 = P.left.monomByDegree(2, 'x'),\r\n                y2 = P.left.monomByDegree(2, 'y'),\r\n                x1: Monom, y1: Monom, c: Monom\r\n\r\n            // Both square monoms must have the same coefficient.\r\n            if (x2.coefficient.isEqual(y2.coefficient)) {\r\n                P.divide(x2.coefficient)\r\n\r\n                x1 = P.left.monomByDegree(1, 'x')\r\n                y1 = P.left.monomByDegree(1, 'y')\r\n\r\n                c = P.left.monomByDegree(0)\r\n\r\n                this._center = new Point(\r\n                    x1.coefficient.clone().divide(2).opposed(),\r\n                    y1.coefficient.clone().divide(2).opposed()\r\n                )\r\n\r\n                this._squareRadius = c.coefficient.clone().opposed()\r\n                    .add(this._center.x.clone().pow(2))\r\n                    .add(this._center.y.clone().pow(2))\r\n\r\n            }\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * Get the relative position between circle and line. It corresponds to the number of intersection.\r\n     * @param {Line} L\r\n     * @returns {number}\r\n     */\r\n    relativePosition = (L: Line): number => {\r\n        let distance = L.distanceTo(this.center),\r\n            radius = Math.sqrt(this._squareRadius.value)\r\n\r\n        if (distance.value-radius>0.0000000001) {\r\n            return 0 // external\r\n        } else if (Math.abs(distance.value-radius)<0.0000000001) {\r\n            return 1 // tangent\r\n        } else {\r\n            return 2 // external\r\n        }\r\n    }\r\n}","export * from \"./vector\"\r\nexport * from \"./triangle\"\r\nexport * from \"./point\"\r\nexport * from \"./circle\"\r\nexport * from \"./line\"\r\n","/**\r\n * This class works for 2d line in a plane.\r\n */\r\n\r\nimport {Fraction} from \"../coefficients\";\r\nimport {Vector} from \"./vector\";\r\nimport {Point} from \"./point\";\r\nimport {Equation, Polynom} from \"../algebra\";\r\nimport {Numeric} from \"../numeric\";\r\n\r\nenum LinePropriety {\r\n    None,\r\n    Parallel,\r\n    Perpendicular\r\n}\r\n\r\nexport class Line {\r\n    // A line is defined as the canonical form\r\n    // ax + by + c = 0\r\n    private _a: Fraction;\r\n    private _b: Fraction;\r\n    private _c: Fraction;\r\n    private _OA: Point;\r\n    private _d: Vector;\r\n    private _n: Vector;\r\n    private _exists: boolean\r\n\r\n    private _referencePropriety: LinePropriety\r\n    private _referenceLine: Line\r\n\r\n    static PERPENDICULAR = LinePropriety.Perpendicular\r\n    static PARALLEL = LinePropriety.Parallel\r\n\r\n    constructor(...values: any) {\r\n\r\n        this._exists = false;\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isLine(): boolean {\r\n        return true;\r\n    }\r\n\r\n    get exists(): boolean {\r\n        return this._exists;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equation(): Equation {\r\n        return new Equation(new Polynom().parse('xy', this._a, this._b, this._c), new Polynom('0')).simplify();\r\n    }\r\n\r\n    get tex(): { canonical: string, mxh: string, parametric: string } {\r\n        // canonical    =>  ax + by + c = 0\r\n        // mxh          =>  y = -a/b x - c/b\r\n        // parametric   =>  (xy) = OA + k*d\r\n\r\n        let canonical = this.equation;\r\n        // Make sur the first item is positive.\r\n        if (this._a.isNegative()) {\r\n            canonical.multiply(-1);\r\n        }\r\n\r\n        return {\r\n            canonical: canonical.tex,\r\n            mxh: this.slope.isInfinity() ? 'x=' + this.OA.x.tex : 'y=' + new Polynom().parse('x', this.slope, this.height).tex,\r\n            parametric: `${Point.pmatrix('x', 'y')} = ${Point.pmatrix(this._OA.x, this._OA.y)} + k\\\\cdot ${Point.pmatrix(this._d.x, this._d.y)}`\r\n        }\r\n    }\r\n\r\n    get a(): Fraction {\r\n        return this._a;\r\n    }\r\n\r\n    set a(value: Fraction) {\r\n        this._a = value;\r\n    }\r\n\r\n    get b(): Fraction {\r\n        return this._b;\r\n    }\r\n\r\n    set b(value: Fraction) {\r\n        this._b = value;\r\n    }\r\n\r\n    get c(): Fraction {\r\n        return this._c;\r\n    }\r\n\r\n    set c(value: Fraction) {\r\n        this._c = value;\r\n    }\r\n\r\n    get OA(): Point {\r\n        return this._OA;\r\n    }\r\n\r\n    set OA(value: Point) {\r\n        this._OA = value;\r\n    }\r\n\r\n    get d(): Vector {\r\n        return this._d;\r\n    }\r\n\r\n    get n(): Vector {\r\n        return this._n;\r\n    }\r\n\r\n    get normal(): Vector {\r\n        return new Vector(this._a, this._b);\r\n    }\r\n\r\n    get director(): Vector {\r\n        return this._d.clone()\r\n    }\r\n\r\n    set d(value: Vector) {\r\n        this._d = value;\r\n    }\r\n\r\n    get slope(): Fraction {\r\n        return this._a.clone().opposed().divide(this._b);\r\n    }\r\n\r\n    get height(): Fraction {\r\n        return this._c.clone().opposed().divide(this._b);\r\n    }\r\n\r\n// ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse data to a line\r\n     * @param {any} values\r\n     * @returns {Line}\r\n     */\r\n    parse = (...values: unknown[]): Line => {\r\n        this._exists = false;\r\n\r\n        // Nothing is given...\r\n        if (values.length === 0) {\r\n            return this\r\n        }\r\n\r\n        // One value only: already a line (clone it), an Equation, a string (as Equation)\r\n        if (values.length === 1) {\r\n            if (values[0] instanceof Line) {\r\n                // Already a Line\r\n                return values[0].clone()\r\n            } else if (values[0] instanceof Equation) {\r\n                // It's an Equation\r\n                return this.parseEquation(values[0])\r\n            } else if (typeof values[0] === \"string\") {\r\n                // It's a string - create an Equation from it.\r\n                try {\r\n                    let E = new Equation(values[0])\r\n                    return this.parse(E)\r\n                } catch (e) {\r\n                    return this\r\n                }\r\n            }\r\n        }\r\n\r\n        if (values.length === 2) {\r\n            if (values[0] instanceof Point && values[1] instanceof Vector) {\r\n                return this.parseByPointAndVector(values[0], values[1]);\r\n            } else if (values[0] instanceof Point && values[1] instanceof Point) {\r\n                return this.parseByPointAndVector(values[0], new Vector(values[0], values[1]));\r\n            } else if (values[0] instanceof Vector && values[1] instanceof Point) {\r\n                return this.parseByPointAndNormal(values[1], values[0])\r\n            }\r\n        }\r\n\r\n        if (values.length === 3) {\r\n            if (\r\n                (values[0] instanceof Fraction || typeof values[0] === 'number')\r\n                &&\r\n                (values[1] instanceof Fraction || typeof values[1] === 'number')\r\n                &&\r\n                (values[2] instanceof Fraction || typeof values[2] === 'number')\r\n            ) {\r\n                return this.parseByCoefficient(values[0], values[1], values[2]);\r\n            }\r\n        }\r\n\r\n        // TODO: Add the ability to create line from a normal vector\r\n        console.log('Someting wrong happend while creating the line')\r\n        return this;\r\n    }\r\n\r\n    parseEquation = (equ: Equation): Line => {\r\n        // Reorder the eequation\r\n        equ.reorder(true)\r\n\r\n        // It must contain either x, y or both.\r\n        let letters = new Set(equ.letters());\r\n\r\n        // No 'x', no 'y' in the equations\r\n        if (!(letters.has('x') || letters.has('y'))) {\r\n            return this\r\n        }\r\n\r\n        // Another letter in the equation ?\r\n        for (let elem of ['x', 'y']) {\r\n            if (letters.has(elem)) {\r\n                letters.delete(elem)\r\n            }\r\n        }\r\n\r\n        if (letters.size > 0) {\r\n            return this\r\n        }\r\n\r\n        // Everything should be ok now...\r\n        return this.parseByCoefficient(equ.left.monomByLetter('x').coefficient, equ.left.monomByLetter('y').coefficient, equ.left.monomByDegree(0).coefficient)\r\n    }\r\n    parseByCoefficient = (a: Fraction | number, b: Fraction | number, c: Fraction | number): Line => {\r\n        this._a = new Fraction(a);\r\n        this._b = new Fraction(b);\r\n        this._c = new Fraction(c);\r\n\r\n        this._d = new Vector(this._b.clone(), this._a.clone().opposed());\r\n        this._OA = new Point(new Fraction().zero(), this._c.clone());\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    parseByPointAndVector = (P: Point, d: Vector): Line => {\r\n        // OX = OP + k*d\r\n        // x = px + kdx     * dy\r\n        // y = py + kdy     * dx\r\n        // ------------------\r\n        // dy * x = px * dy + kdxdy\r\n        // dx * y = py * dx + kdxdy\r\n        // ------------------\r\n        // dy * x - dx * y = px * dy - py * dx\r\n        // dy * x - dx * y - (px * dy - py * dx) = 0\r\n        this.parseByCoefficient(\r\n            d.y,\r\n            d.x.clone().opposed(),\r\n            P.x.clone().multiply(d.y).subtract(P.y.clone().multiply(d.x)).opposed()\r\n        )\r\n\r\n        // Choose the current values as point and direction vector instead of the automatic version.\r\n        this._OA = P.clone();\r\n        this._d = d.clone();\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    parseByPointAndNormal = (P: Point, n: Vector): Line => {\r\n        return this.parseByCoefficient(\r\n            n.x,\r\n            n.y,\r\n            P.x.clone().multiply(n.x)\r\n                .add(P.y.clone().multiply(n.y)).opposed()\r\n        )\r\n    }\r\n\r\n    parseByPointAndLine = (P: Point, L: Line, orientation?: LinePropriety): Line => {\r\n\r\n        if (orientation === undefined) {\r\n            orientation = LinePropriety.Parallel\r\n        }\r\n\r\n        if (orientation === LinePropriety.Parallel) {\r\n            return this.parseByPointAndNormal(P, L.normal)\r\n        } else if (orientation === LinePropriety.Perpendicular) {\r\n            return this.parseByPointAndNormal(P, L.director)\r\n        }\r\n\r\n        this._exists = false\r\n        return this\r\n    }\r\n\r\n    clone = (): Line => {\r\n        this._a = this._a.clone();\r\n        this._b = this._b.clone();\r\n        this._c = this._c.clone();\r\n\r\n        this._d = this._d.clone();\r\n        this._OA = this._OA.clone();\r\n        this._n = this._n.clone();\r\n\r\n        this._exists = this.exists\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    isParellelTo = (line: Line): Boolean => {\r\n        // Do they have the isSame direction ?\r\n        return this.slope.isEqual(line.slope) && this.height.isNotEqual(line.height);\r\n    }\r\n    isSameAs = (line: Line): Boolean => {\r\n        return this.slope.isEqual(line.slope) && this.height.isEqual(line.height);\r\n    }\r\n    simplifyDirection = (): Line => {\r\n        let lcm = Numeric.lcm(this._d.x.denominator, this._d.y.denominator),\r\n            gcd = Numeric.gcd(this._d.x.numerator, this._d.y.numerator);\r\n\r\n        this._d.x.multiply(lcm).divide(gcd);\r\n        this._d.y.multiply(lcm).divide(gcd);\r\n        return this;\r\n    }\r\n    intersection = (line: Line): { point: Point, hasIntersection: boolean, isParallel: boolean, isSame: boolean } => {\r\n        let Pt = new Point(), isParallel = false, isSame = false, hasIntersection = true;\r\n\r\n        // this         => ax+by+c = 0\r\n        // line         => dx+ey+f = 0\r\n        //\r\n        //  aex + bey + ce = 0\r\n        //  dbx + bey + bf = 0\r\n        // (ae-db)x + ce-bf = 0\r\n        //\r\n        //  adx + bdy + cd = 0\r\n        //  adx + aey + af = 0\r\n        // (bd-ae)y + (cd-af)\r\n        //\r\n        // x = (bf-ce)/(ae-db)\r\n        // y = (af-cd)/(bd-ae)\r\n\r\n\r\n        // Theres is no 'y'\r\n        if (this._b.isZero() || line.b.isZero()) {\r\n            // TODO : handle no y in the line canonical form\r\n        }\r\n\r\n        if (this.isParellelTo(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isParallel = true;\r\n        } else if (this.isSameAs(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isSame = true;\r\n        } else {\r\n            Pt.x = this._b.clone().multiply(line.c).subtract(this._c.clone().multiply(line.b))\r\n                .divide(this._a.clone().multiply(line.b).subtract(this._b.clone().multiply(line.a)));\r\n            Pt.y = this._a.clone().multiply(line.c).subtract(this._c.clone().multiply(line.a))\r\n                .divide(this._b.clone().multiply(line.a).subtract(this._a.clone().multiply(line.b)));\r\n        }\r\n\r\n        return {\r\n            point: Pt,\r\n            hasIntersection: !(isParallel || isSame),\r\n            isParallel,\r\n            isSame\r\n        };\r\n    }\r\n\r\n    distanceTo(pt: Point): { value: number, fraction: Fraction, tex: string } {\r\n        let numerator = pt.x.clone().multiply(this._a)\r\n                .add(pt.y.clone().multiply(this._b))\r\n                .add(this._c).abs(),\r\n            d2 = this.normal.normSquare;\r\n\r\n        // The denominator is null - shouldn't be possible\r\n        if (d2.isZero()) {\r\n            return {\r\n                value: NaN,\r\n                tex: 'Not a line',\r\n                fraction: new Fraction().infinite()\r\n            }\r\n        }\r\n        // The denominator is a perfect square - simplify the tex result\r\n        let value = numerator.value / Math.sqrt(d2.value),\r\n            F = numerator.clone().divide(d2.clone().sqrt());\r\n\r\n        // The denominator is a perfect square.\r\n        if (d2.isSquare()) {\r\n            return {\r\n                value,\r\n                tex: F.tex,\r\n                fraction: F\r\n            }\r\n        }\r\n        // Complete answer...\r\n        return {\r\n            value,\r\n            tex: `\\\\frac{${numerator.tex}}{\\\\sqrt{${d2.tex}}}`,\r\n            fraction: F\r\n        };\r\n    }\r\n\r\n    hitSegment(A: Point, B: Point): boolean {\r\n        let iPt = this.intersection(\r\n            new Line(A, B)\r\n        )\r\n\r\n        // There is an intersection point\r\n        if (iPt.hasIntersection) {\r\n            return iPt.point.x.value >= Math.min(A.x.value, B.x.value)\r\n                && iPt.point.x.value <= Math.max(A.x.value, B.x.value)\r\n                && iPt.point.y.value >= Math.min(A.y.value, B.y.value)\r\n                && iPt.point.y.value <= Math.max(A.y.value, B.y.value)\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Special functions\r\n    // ------------------------------------------\r\n    canonicalAsFloatCoefficient(decimals: number): string {\r\n        if (decimals === undefined) {\r\n            decimals = 2;\r\n        }\r\n\r\n        let ca = this._a.value,\r\n            cb = this._b.value,\r\n            cc = this._c.value,\r\n            canonical = '';\r\n\r\n        if (!this._a.isZero()) {\r\n            if (this._a.isOne()) {\r\n                canonical = 'x'\r\n            } else if (this._a.clone().opposed().isOne()) {\r\n                canonical = '-x'\r\n            } else {\r\n                canonical = this._a.value.toFixed(decimals) + 'x'\r\n            }\r\n        }\r\n\r\n        if (!this._b.isZero()) {\r\n            if (this._b.isPositive()) {\r\n                canonical += '+'\r\n            }\r\n            canonical += this._b.value.toFixed(decimals) + 'y'\r\n        }\r\n\r\n        if (!this._c.isZero()) {\r\n            if (this._c.isPositive()) {\r\n                canonical += '+'\r\n            }\r\n            canonical += this._c.value.toFixed(decimals)\r\n        }\r\n\r\n\r\n        return canonical + '=0';\r\n    }\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\n//TODO: Ajouter une vérification si la droite existe.\r\nexport class Point {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n    private _exist: Boolean;\r\n\r\n    constructor(...values: any) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this\r\n    };\r\n\r\n    get isPoint() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.tex);\r\n        pts.push(this._y.tex);\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n\r\n    get display(): string {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.tex);\r\n        pts.push(this._y.tex);\r\n\r\n        return `(${pts.join(';')})`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Point => {\r\n        // Initialize the value.\r\n        this.zero();\r\n\r\n        // Nothing is given\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        // One element is given - might be already a point !\r\n        if (values.length === 1) {\r\n            // it's already a point - clone it\r\n            if (values[0] instanceof Point) {\r\n                this._x = values[0].x.clone()\r\n                this._y = values[0].y.clone()\r\n                return this;\r\n            }\r\n\r\n            // Value is given as string, comma separated.\r\n            if(typeof values[0] === 'string'){\r\n                let xy = values[0].split(',')\r\n                if(xy.length===2){\r\n                    this._x = new Fraction(xy[0]).reduce()\r\n                    this._y = new Fraction(xy[1]).reduce()\r\n                    return this;\r\n                }\r\n            }\r\n\r\n            // Value given as an object with {x: value, y: value}\r\n            if (values[0].x !== undefined && values[0].y !== undefined) {\r\n                this._x = new Fraction(values[0].x).reduce()\r\n                this._y = new Fraction(values[0].y).reduce()\r\n            } else {\r\n                return this.zero();\r\n            }\r\n        }\r\n        if (values.length === 2) {\r\n            this._x = new Fraction(values[0]).reduce()\r\n            this._y = new Fraction(values[1]).reduce()\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Point => {\r\n        this._x = this._x.clone()\r\n        this._y = this._y.clone()\r\n\r\n        return this\r\n    }\r\n\r\n    zero = (): Point => {\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    origin = (): Point => {\r\n        this.zero();\r\n        return this;\r\n    }\r\n\r\n    middleOf = (P1: Point, P2: Point): Point => {\r\n        this._x = P1.x.clone().add(P2.x).divide(2);\r\n        this._y = P1.y.clone().add(P2.y).divide(2);\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Display functions\r\n    // ------------------------------------------\r\n    texValues = (numberOfDigits: number): string => {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.value.toFixed(numberOfDigits===undefined?2:numberOfDigits));\r\n        pts.push(this._y.value.toFixed(numberOfDigits===undefined?2:numberOfDigits));\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Static functions\r\n    // ------------------------------------------\r\n    static pmatrix = (a: any, b: any, c?: any): string => {\r\n        if (c === undefined) {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\end{pmatrix}`;\r\n        } else {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\\\\\ ${c.tex ? c.tex : c} \\\\end{pmatrix}`;\r\n        }\r\n    };\r\n\r\n}\r\n","import {Point} from \"./point\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Vector} from \"./vector\";\r\nimport {Line} from \"./line\";\r\nimport {Equation} from \"../algebra/equation\";\r\n\r\nexport interface remarquableLines {\r\n    'medians': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'mediators': {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line,\r\n        'intersection': Point\r\n    },\r\n    'heights': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'bisectors': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    }\r\n}\r\n\r\nexport class Triangle {\r\n    private _A: Point;\r\n    private _B: Point;\r\n    private _C: Point;\r\n    private _lines: {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line\r\n    };\r\n    private _middles: {\r\n        'AB': Point,\r\n        'AC': Point,\r\n        'BC': Point\r\n    };\r\n    private _remarquables: remarquableLines;\r\n\r\n\r\n    constructor(...values: any) {\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    get isTriangle():boolean {return true;}\r\n\r\n    // ------------------------------------------\r\n    // Getter and setters\r\n    // ------------------------------------------\r\n\r\n    get A(): Point {\r\n        return this._A;\r\n    }\r\n\r\n    get B(): Point {\r\n        return this._B;\r\n    }\r\n\r\n    get C(): Point {\r\n        return this._C;\r\n    }\r\n\r\n    get AB(): Vector {\r\n        return this.getSegment('A', 'B');\r\n    }\r\n\r\n    get BA(): Vector {\r\n        return this.getSegment('B', 'A');\r\n    }\r\n\r\n    get BC(): Vector {\r\n        return this.getSegment('B', 'C');\r\n    }\r\n\r\n    get CB(): Vector {\r\n        return this.getSegment('C', 'B');\r\n    }\r\n\r\n    get AC(): Vector {\r\n        return this.getSegment('A', 'C');\r\n    }\r\n\r\n    get CA(): Vector {\r\n        return this.getSegment('C', 'A');\r\n    }\r\n\r\n    get isRectangle(): boolean {\r\n        if (this.AB.isNormalTo(this.BC)) {\r\n            return true;\r\n        }\r\n        if (this.AB.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n        if (this.BC.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    get isEquilateral(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) &&\r\n            this.AB.normSquare.isEqual(this.AC.normSquare);\r\n    }\r\n\r\n    get isIsocele(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) ||\r\n            this.AB.normSquare.isEqual(this.AC.normSquare) ||\r\n            this.BC.normSquare.isEqual(this.AC.normSquare)\r\n    }\r\n\r\n    get lines(): { 'AB': Line, 'BC': Line, 'AC': Line } {\r\n        return this._lines;\r\n    }\r\n\r\n    get remarquables(): remarquableLines {\r\n        return this._remarquables;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Parse values to a triangle. Supported formats:\r\n     * Point, Point, Point\r\n     * x1, y1, x2, y2, x3, y3\r\n     * TODO: Something else ?\r\n     * @param values\r\n     */\r\n    parse = (...values: any): Triangle => {\r\n        if (values.length === 6) {\r\n            // Check if all values are number or fractions.\r\n            let v = values.map((x: any) => new Fraction(x));\r\n            return this.parse(\r\n                new Point(v[0], v[1]),\r\n                new Point(v[2], v[3]),\r\n                new Point(v[4], v[5]),\r\n            )\r\n        } else if (values.length === 3) {\r\n            // Possibilities:\r\n            // - Three points (or part of points, only dict for example, or array (TODO: Add the array syntax for point)\r\n            // - Three lines\r\n            // - Three lines as text.\r\n            if(values.filter((x:any) => typeof x === 'string').length===3) {\r\n                return this.parse( ...values.map((x:string) => new Line(x)) )\r\n            }else if(values.filter((x:any) => x.isLine === true).length===3) {\r\n                // We have three lines\r\n                this._lines = {\r\n                    'AB': values[0],\r\n                    'BC': values[1],\r\n                    'AC': values[2]\r\n                };\r\n\r\n                // Get the intersection points -> build the triangle using these intersection points.\r\n                let intersect = values[0].intersection(values[1]);\r\n                if (intersect.hasIntersection) {\r\n                    this._B = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[1].intersection(values[2]);\r\n                if (intersect.hasIntersection) {\r\n                    this._C = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[2].intersection(values[0]);\r\n                if (intersect.hasIntersection) {\r\n                    this._A = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n            }else {\r\n                // At least, one of the value is not a point.\r\n                if (values.filter((x: any) => x.isPoint === true).length < 3) {\r\n                    return this.parse(\r\n                        new Point(values[0]),\r\n                        new Point(values[1]),\r\n                        new Point(values[2])\r\n                    )\r\n                }\r\n\r\n                // We have three points.\r\n                this._A = values[0].clone();\r\n                this._B = values[1].clone();\r\n                this._C = values[2].clone();\r\n\r\n                this._lines = {\r\n                    'AB': new Line(this._A, this._B),\r\n                    'BC': new Line(this._B, this._C),\r\n                    'AC': new Line(this._A, this._C)\r\n                };\r\n            }\r\n        } else if (values.length === 1) {\r\n            if (values[0].isTriangle === true) {\r\n                return values[0].clone();\r\n            }\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the Triangle class\r\n     */\r\n    clone = (): Triangle => {\r\n        this._A = this._A.clone();\r\n        this._B = this._B.clone();\r\n        this._C = this._C.clone();\r\n\r\n        this._lines = {\r\n            'AB': this._lines.AB.clone(),\r\n            'BC': this._lines.BC.clone(),\r\n            'AC': this._lines.AC.clone()\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Triangle operations and properties\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Generate the Line object for the three segments of the triangle\r\n     */\r\n    private _updateTriangle = () => {\r\n        this._middles = {\r\n            'AB': new Point().middleOf(this._A, this._B),\r\n            'AC': new Point().middleOf(this._A, this._C),\r\n            'BC': new Point().middleOf(this._B, this._C)\r\n        }\r\n\r\n        this._remarquables = this._calculateRemarquableLines();\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the Point class for the given name\r\n     * @param ptName\r\n     */\r\n    private getPointByName = (ptName: string): Point => {\r\n        switch (ptName.toUpperCase()) {\r\n            case 'A':\r\n                return this._A;\r\n            case 'B':\r\n                return this._B;\r\n            case 'C':\r\n                return this._C;\r\n        }\r\n\r\n        // Something went wrong ! Return the first point\r\n        return this._A;\r\n    }\r\n    /**\r\n     * Get the vector for the segment given by name.\r\n     * @param ptName1\r\n     * @param ptName2\r\n     */\r\n    private getSegment = (ptName1: string, ptName2: string): Vector => {\r\n        return new Vector(\r\n            this.getPointByName(ptName1),\r\n            this.getPointByName(ptName2)\r\n        );\r\n    }\r\n\r\n    private _calculateRemarquableLines = (): remarquableLines => {\r\n        let remarquables: remarquableLines = {\r\n            'medians': {\r\n                'A': new Line(this._A, this._middles.BC),\r\n                'B': new Line(this._B, this._middles.AC),\r\n                'C': new Line(this._C, this._middles.AB),\r\n                'intersection': null\r\n            },\r\n            'mediators': {\r\n                'AB': new Line(this._middles.AB, new Vector(this._A, this._B).normal()),\r\n                'AC': new Line(this._middles.AC, new Vector(this._A, this._C).normal()),\r\n                'BC': new Line(this._middles.BC, new Vector(this._B, this._C).normal()),\r\n                'intersection': null\r\n            },\r\n            'heights': {\r\n                'A': new Line(this._A, new Vector(this._B, this._C).normal()),\r\n                'B': new Line(this._B, new Vector(this._A, this._C).normal()),\r\n                'C': new Line(this._C, new Vector(this._A, this._B).normal()),\r\n                'intersection': null\r\n            },\r\n            'bisectors': {\r\n                'A': this._calculateBisectors('A'),\r\n                'B': this._calculateBisectors('B'),\r\n                'C': this._calculateBisectors('C'),\r\n                'intersection': null\r\n            }\r\n        }\r\n\r\n        // As it's a triangle, we assume the lines are intersecting and aren't parallel or superposed.\r\n        remarquables.medians.intersection = remarquables.medians.A.intersection(remarquables.medians.B).point;\r\n        remarquables.mediators.intersection = remarquables.mediators.AB.intersection(remarquables.mediators.BC).point;\r\n        remarquables.heights.intersection = remarquables.heights.A.intersection(remarquables.heights.B).point;\r\n        remarquables.bisectors.intersection = remarquables.bisectors.A.intersection(remarquables.bisectors.B).point;\r\n\r\n        // Everything was calculated for the remarquable lines.\r\n        return remarquables;\r\n    }\r\n\r\n    private _calculateBisectors = (pt: string): Line => {\r\n        let tlines = this.lines, d1, d2;\r\n\r\n        if(pt==='A'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.AC;\r\n        }else if(pt==='B'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.BC;\r\n        }else if(pt==='C'){\r\n            d1 = tlines.BC;\r\n            d2 = tlines.AC;\r\n        }\r\n\r\n        let b1 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm)).reorder(true).simplify()),\r\n            b2 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm).opposed()).reorder(true).simplify());\r\n\r\n        // Must determine which bisectors is in the triangle\r\n        if(pt==='A'){\r\n            return b1.hitSegment(this.B, this.C)?b1:b2;\r\n        }\r\n        if(pt==='B'){\r\n            return b1.hitSegment(this.A, this.C)?b1:b2;\r\n        }\r\n        if(pt==='C'){\r\n            return b1.hitSegment(this.B, this.A)?b1:b2;\r\n        }\r\n\r\n        // Default returns the first bisector\r\n        return b1;\r\n    }\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Numeric} from \"../numeric\";\r\n\r\nexport class Vector {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n\r\n    constructor(...values: any) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get normSquare(): Fraction {\r\n        return this._x.clone().pow(2).add(this._y.clone().pow(2));\r\n    }\r\n\r\n    get norm(): number {\r\n        return Math.sqrt(this.normSquare.value);\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\begin{pmatrix}${this._x.tex} \\\\\\\\\\ ${this._y.tex} \\\\end{pmatrix}`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Vector => {\r\n        // TODO: Must be more strict about what is given and limit to two dimensional vectors.p\r\n        // Maybe more than one value was given...\r\n        // Initialize the vector\r\n        this.zero();\r\n\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        if (values.length === 1) {\r\n            if (values[0] instanceof Vector) {\r\n                return values[0].clone()\r\n            } else {\r\n                return this._parseString(values[0])\r\n            }\r\n        }\r\n\r\n        if (values.length >= 2) {\r\n            // Two points are given - skip the third value.\r\n            if (values[0].isPoint && values[1].isPoint) {\r\n                this._x = values[1].x.clone().subtract(values[0].x)\r\n                this._y = values[1].y.clone().subtract(values[0].y)\r\n                return this;\r\n            }\r\n\r\n            // Fractions or a number are give\r\n            if (values[0].isFraction || !isNaN(values[0])) {\r\n                this._x = new Fraction(values[0])\r\n            }\r\n            if (values[1].isFraction || !isNaN(values[1])) {\r\n                this._y = new Fraction(values[1])\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Vector => {\r\n        let V = new Vector();\r\n\r\n        if (this._x !== null) {\r\n            V.x = this._x.clone();\r\n        }\r\n        if (this._y !== null) {\r\n            V.y = this._y.clone();\r\n        }\r\n        return V;\r\n    }\r\n\r\n    reset = (): Vector => {\r\n        this._x = null;\r\n        this._y = null;\r\n        return this;\r\n    }\r\n\r\n    zero = (): Vector => {\r\n        this.reset();\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    one = (): Vector => {\r\n        this._x = new Fraction();\r\n        this._y = new Fraction();\r\n        return this;\r\n    }\r\n\r\n    private _parseString = (value: string): Vector => {\r\n        // Split comma, semi colon or single space.\r\n        let components = value.split(/[,;\\s]/g);\r\n\r\n        // Validate the fraction values.\r\n        this.x = new Fraction(components[0] || null);\r\n        this.y = new Fraction(components[1] || null);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Vector => {\r\n        this._x.opposed();\r\n        this._y.opposed();\r\n        return this;\r\n    }\r\n\r\n    add = (V: Vector): Vector => {\r\n        this._x.add(V.x);\r\n        this._y.add(V.y);\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (V: Vector): Vector => {\r\n        return this.add(V.clone().opposed());\r\n    }\r\n\r\n    scalarProductWithVector = (V: Vector): Fraction => {\r\n        // TODO: Add the scalar factor !!!!\r\n        return this._x.clone().multiply(V.x).add(this._y.clone().multiply(V.y));\r\n    }\r\n\r\n    static scalarProduct = (v1: Vector, v2: Vector): number => {\r\n        // TODO: Transform to fraction with nthroot.\r\n        return  v1.x.value * v2.x.value + v1.y.value * v2.y.value;\r\n    };\r\n\r\n    normal = (): Vector => {\r\n        let x = this.x.clone().opposed(), y = this.y.clone();\r\n        this._x = y;\r\n        this._y = x;\r\n        return this;\r\n    }\r\n\r\n    isNormalTo = (v: Vector): boolean => {\r\n        return this.scalarProductWithVector(v).isZero()\r\n    }\r\n\r\n    multiplyByScalar = (k: any): Vector => {\r\n        let scalar = new Fraction(k);\r\n        this._x.multiply(scalar);\r\n        this._y.multiply(scalar);\r\n        return this;\r\n    }\r\n\r\n    divideByScalar = (k:any): Vector => {\r\n        return this.multiplyByScalar(new Fraction(k).invert());\r\n    }\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    simplify = (): Vector => {\r\n        // Multiply by the lcm of denominators.\r\n        return this.multiplyByScalar(Numeric.lcm(this._x.denominator, this._y.denominator))\r\n            .divideByScalar(Numeric.gcd(this._x.numerator, this._y.numerator));\r\n    }\r\n\r\n    angleWith = (V: Vector, sharp?: Boolean, radian?: Boolean): number => {\r\n        let scalar = this.scalarProductWithVector(V).value,\r\n            toDegree = radian ? 1 : 180 / Math.PI;\r\n        if (sharp) {\r\n            scalar = Math.abs(scalar);\r\n        }\r\n\r\n        return toDegree * Math.acos(scalar / (this.norm * V.norm));\r\n    }\r\n}\r\n","export class Numeric{\r\n    static round(value:number, decimals:number=2):number {\r\n        return Number(Math.round(Number(value+'e'+decimals))+'e-'+decimals);\r\n    }\r\n\r\n    /**\r\n     * Get the list of the nth first prime numbers.\r\n     * @param nb : number of primes to choose from\r\n     */\r\n    static prime(nb?:number):number[]{\r\n        let primes:number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973];\r\n        if(nb === undefined){\r\n            return primes;\r\n        }else{\r\n            return primes.slice(0,Math.max(primes.length,nb));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the list of all dividers of a number.\r\n     * @param value\r\n     */\r\n    static dividers(value:number):number[]{\r\n        let D: number[];\r\n        const maxV = Math.sqrt(Math.abs(value));\r\n\r\n        // Initialize the list of dividers.\r\n        D = [];\r\n\r\n        for(let i=1; i<=maxV; i++){\r\n            if(value%i===0){\r\n                D.push(i);\r\n                D.push(value/i);\r\n            }\r\n        }\r\n\r\n        // Order numbers.\r\n        D.sort(function(a, b){return a-b;});\r\n\r\n        // Make sure the array of value is unique.\r\n        return [...new Set(D)];\r\n    }\r\n    /**\r\n     * Great Common Divisor\r\n     * @param values : number values\r\n     */\r\n    static gcd(...values:number[]):number{\r\n        // Define the gcd for two number\r\n        let gcd2 = function(a:number,b:number):number{\r\n            if(b===0){return a;}\r\n            return gcd2(b, a%b);\r\n        };\r\n\r\n        let g:number = 1,\r\n            i:number = 2;\r\n\r\n        // Nothing is given\r\n        if(values.length===0){return 1;}\r\n        // Only one number is given\r\n        if(values.length===1){\r\n            // The first number is zero\r\n            if(values[0]===0){return 1;}\r\n            // Return the number\r\n            return values[0];\r\n        }\r\n\r\n        // We have at least 2 numbers.\r\n        g = gcd2(values[0],values[1]);\r\n\r\n        // The gcd of the two first value is one ? It's already finished.\r\n        if(g===1){return 1;}\r\n\r\n        // The current gcd isn't one. Continue with all next values.\r\n        for(i=2; i<values.length; i++){\r\n            g = gcd2(g, values[i]);\r\n            // Escape if gcd is already one.\r\n            if(g===1){break;}\r\n        }\r\n\r\n        return Math.abs(g);\r\n    }\r\n\r\n    /**\r\n     * Least Common Multiple\r\n     * @param values: list of numbers\r\n     */\r\n    static lcm(...values:number[]):number{\r\n        return values.reduce(function(a,b){\r\n            return Math.abs(a * b / Numeric.gcd(a, b));\r\n        });\r\n    }\r\n}","import {rndPolynom} from \"./rndPolynom\";\r\nimport {rndMonom} from \"./rndMonom\";\r\nimport {rndHelpers} from \"./rndHelpers\";\r\nimport {randomCoefficientConfig, randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {Monom, Polynom} from \"../algebra\";\r\nimport {Fraction} from \"../coefficients\";\r\nimport {rndFraction} from \"./rndFraction\";\r\n\r\nexport * from \"./rndTypes\"\r\nexport namespace Random {\r\n    export function polynom(config?: randomPolynomConfig): Polynom {\r\n        return (new rndPolynom(config)).generate()\r\n    }\r\n\r\n    export function monom(config?: randomMonomConfig): Monom {\r\n        return (new rndMonom(config)).generate()\r\n    }\r\n\r\n    export function fraction(config?: randomCoefficientConfig): Fraction {\r\n        return (new rndFraction(config)).generate()\r\n    }\r\n\r\n    export function number(from:number, to:number):number { return rndHelpers.randomInt(from,to)}\r\n    export function numberSym(max:number, allowZero?:boolean):number { return rndHelpers.randomIntSym(max, allowZero)}\r\n    export function bool(percent?:number):boolean { return rndHelpers.randomBool(percent)}\r\n    export function array(arr:any[], number?:number):any[] { return rndHelpers.randomArray(arr, number)}\r\n    export function item(arr:any[]):any { return rndHelpers.randomItem(arr)}\r\n    export function shuffle(arr:any[]):any { rndHelpers.shuffleArray(arr)}\r\n}","export class randomCore {\r\n    protected _config: Object\r\n    protected _defaultConfig: Object\r\n    mergeConfig = (config: Object, defaultConfig: Object): Object => {\r\n        if (config !== undefined) {\r\n            return {...defaultConfig, ...config}\r\n        }\r\n        return defaultConfig\r\n    }\r\n\r\n    generate = (): unknown => {\r\n        return undefined\r\n    }\r\n\r\n    config = (config: Object): randomCore => {\r\n        this._config = this.mergeConfig(config, this._defaultConfig)\r\n        return this\r\n    }\r\n}","import {randomCore} from \"./randomCore\";\r\nimport {randomCoefficientConfig, randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {Fraction} from \"../coefficients\";\r\nimport {Random} from \"./index\";\r\n\r\n/**\r\n * Create a random monom based on a based configuration\r\n */\r\nexport class rndFraction extends randomCore {\r\n    declare protected _config: randomCoefficientConfig\r\n    declare protected _defaultConfig: randomCoefficientConfig\r\n\r\n    constructor(userConfig?: randomCoefficientConfig) {\r\n        super();\r\n\r\n        this._defaultConfig = {\r\n            negative: true,\r\n            reduced: true,\r\n            zero: true\r\n        }\r\n\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Fraction => {\r\n        let Q = new Fraction()\r\n\r\n        if(this._config.negative){\r\n            Q.numerator = Random.numberSym(10, this._config.zero)\r\n        }else {\r\n            Q.numerator = Random.number(this._config.zero ? 0 : 1, 10)\r\n        }\r\n        Q.denominator = Random.number(1, 10)\r\n\r\n        return this._config.reduced?Q.reduce():Q\r\n    }\r\n}\r\n","/**\r\n * Random helpers\r\n */\r\nexport class rndHelpers {\r\n\r\n    /**\r\n     * Random boolean with a percent ratio\r\n     * @param percent\r\n     */\r\n    static randomBool(percent:number=0.5):boolean{\r\n        return Math.random()<percent;\r\n    }\r\n\r\n    /**\r\n     * Random integer between two values.\r\n     * @param a (number) : From this value to the second value. If the second is ommited, this value is the max value.\r\n     * @param b (number) : To this value. If this is ommited.\r\n     */\r\n    static randomInt(a:number, b?:number):number{\r\n        if(b===undefined){return this.randomInt(0,a);}\r\n\r\n        return Math.floor(Math.random() * (b - a + 1) + a);\r\n    }\r\n\r\n    /**\r\n     * Random integer between -max and max value.\r\n     * @param max (number) : determine the limits.\r\n     * @param zero (bool) : determine if zero is allowed or not.\r\n     */\r\n    static randomIntSym(max:number, zero?:boolean):number{\r\n        if(zero===false){\r\n            return this.randomBool()?this.randomInt(1,max):-this.randomInt(1,max);\r\n        }else{\r\n            return this.randomInt(-max, max);\r\n        }\r\n    }\r\n\r\n    static randomArray(arr: any[], number?:number):any[]{\r\n        if(number===undefined){number = 1}\r\n\r\n        // Return a clone array\r\n        if(arr.length<=0){return Object.values(arr)}\r\n\r\n        // Randomize the array and return the n first elements.\r\n        return rndHelpers.shuffleArray(arr).slice(0,number);\r\n    }\r\n\r\n    static randomItem(arr: any[]): any{\r\n        if(arr.length===0){return ''}\r\n        return this.randomArray(arr, 1)[0]\r\n    }\r\n\r\n    static shuffleArray(arr: any[]): any[] {\r\n        // The Fisher-Yates algorithm\r\n        let shuffleArray = Object.values(arr)\r\n        for (let i = shuffleArray.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            const temp = shuffleArray[i];\r\n            shuffleArray[i] = shuffleArray[j];\r\n            shuffleArray[j] = temp;\r\n        }\r\n\r\n        return shuffleArray;\r\n    }\r\n\r\n}","import {randomCore} from \"./randomCore\";\r\nimport {randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {Random} from \"./index\";\r\nimport {Monom} from \"../algebra/monom\";\r\n\r\n/**\r\n * Create a random monom based on a based configuration\r\n */\r\n    export class rndMonom extends randomCore {\r\n        declare protected _config: randomMonomConfig\r\n        declare protected _defaultConfig: randomMonomConfig\r\n\r\n        constructor(userConfig?: randomMonomConfig) {\r\n            super();\r\n\r\n            this._defaultConfig = {\r\n                letters: 'x',\r\n                degree: 2,\r\n                fraction: true,\r\n                zero: false\r\n            }\r\n\r\n            this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n        }\r\n\r\n        generate = (): Monom => {\r\n            // Create a monom instance\r\n            let M = new Monom()\r\n\r\n            // Generate the coefficient\r\n            M.coefficient = Random.fraction({\r\n                zero: this._config.zero,\r\n                reduced: true\r\n            })\r\n\r\n            // Calculate the degree of the monom\r\n            if (this._config.letters.length > 1) {\r\n                // Initialise each items...\r\n                for (let L of this._config.letters.split('')) {\r\n                    M.setLetter(L, 0);\r\n                }\r\n                for (let i = 0; i < this._config.degree; i++) {\r\n                    const L = Random.item(this._config.letters.split(\"\"))\r\n                    M.setLetter(L, M.degree(L).clone().add(1))\r\n                }\r\n            } else {\r\n                M.setLetter(this._config.letters, this._config.degree)\r\n            }\r\n\r\n            return M\r\n        }\r\n    }\r\n","import {randomCore} from \"./randomCore\";\r\nimport {randomPolynomConfig} from \"./rndTypes\";\r\nimport {rndMonom} from \"./rndMonom\";\r\nimport {Random} from \"./index\";\r\nimport {Polynom} from \"../algebra\";\r\nimport {Monom} from \"../algebra\";\r\n\r\n/**\r\n * Random polynoms\r\n */\r\nexport class rndPolynom extends randomCore {\r\n    declare protected _config: randomPolynomConfig\r\n    declare protected _defaultConfig: randomPolynomConfig\r\n\r\n    constructor(userConfig?: randomPolynomConfig) {\r\n        super();\r\n\r\n        // Default config for a random polynom\r\n        this._defaultConfig = {\r\n            letters: 'x',\r\n            degree: 2,\r\n            fraction: false,\r\n            zero: false,\r\n            unit: false,\r\n            factorable: false,\r\n            allowNullMonom: true,\r\n            numberOfMonoms: 0\r\n        }\r\n\r\n        // Merge config with initialiser\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Polynom => {\r\n        if(this._config.factorable && this._config.degree>1){\r\n            return this.factorable()\r\n        }\r\n\r\n        // Create the polynom\r\n        let P = new Polynom().empty(),\r\n            M: Monom\r\n        for (let i = this._config.degree; i >= 0; i--) {\r\n            // Create monom of corresponding degree.\r\n            M = new rndMonom({\r\n                letters: this._config.letters,\r\n                degree: i,\r\n                fraction: this._config.fraction,\r\n                zero: (i === this._config.degree) ? false : this._config.allowNullMonom\r\n            }).generate()\r\n\r\n            // If degree is the greatest and unit is true, set the monom value to one.\r\n            if (this._config.unit && this._config.degree === i) {\r\n                M.coefficient.one()\r\n            }\r\n\r\n            // Add to the polynom\r\n            P.add(M)\r\n        }\r\n\r\n        // If the number of monoms is greater than the allowed value, remove some of them...\r\n        if (this._config.numberOfMonoms > 0 && this._config.numberOfMonoms < P.length) {\r\n            P.monoms = Random.array(P.monoms, this._config.numberOfMonoms)\r\n        }\r\n        return P\r\n    }\r\n\r\n    factorable = (): Polynom => {\r\n        let P = new Polynom().one()\r\n\r\n        let _factorableConfig = {...this._config}\r\n        _factorableConfig.degree = 1\r\n        _factorableConfig.factorable = false\r\n\r\n        for(let i=0; i<this._config.degree;i++){\r\n            P.multiply(Random.polynom(_factorableConfig))\r\n        }\r\n\r\n        return P\r\n    }\r\n}","import {loadHighlighter} from \"typedoc/dist/lib/utils/highlighter\";\r\n\r\ntype tokenType = {\r\n    [key: string]: {\r\n        precedence: number,\r\n        associative: string\r\n    }\r\n}\r\n\r\nexport class Shutingyard {\r\n    private _rpn: { token: string, tokenType: string }[] = [];\r\n    readonly _mode: 'polynom' | 'set';\r\n    private _tokenConfig: tokenType;\r\n    private _uniformize: boolean;\r\n\r\n    constructor(mode?: 'polynom' | 'set') {\r\n        this._mode = typeof mode === 'undefined' ? 'polynom' : mode;\r\n        this.tokenConfigInitialization()\r\n    }\r\n\r\n    /**\r\n     * Determin if the token is a defined operation\r\n     * Defined operations: + - * / ^ sin cos tan\r\n     * @param token\r\n     */\r\n    isOperation(token: string): boolean {\r\n        if (token[0].match(/[+\\-*/^]/g)) {\r\n            return true;\r\n        }\r\n        //\r\n        // if (token.match(/^sin|cos|tan/g)) {\r\n        //     return true;\r\n        // }\r\n\r\n        return false;\r\n    }\r\n\r\n    tokenConfigInitialization(): tokenType {\r\n        if (this._mode === 'set') {\r\n            this._tokenConfig = {\r\n                '&': {precedence: 3, associative: 'left'},\r\n                '|': {precedence: 3, associative: 'left'},\r\n                '!': {precedence: 4, associative: 'right'},\r\n                '-': {precedence: 2, associative: 'left'}\r\n            }\r\n            this._uniformize = false;\r\n        } else {\r\n            this._tokenConfig = {\r\n                '^': {precedence: 4, associative: 'right'},\r\n                '*': {precedence: 3, associative: 'left'},\r\n                '/': {precedence: 3, associative: 'left'},\r\n                '+': {precedence: 2, associative: 'left'},\r\n                '-': {precedence: 2, associative: 'left'},\r\n                '%': {precedence: 3, associative: 'right'},\r\n                'sin': {precedence: 4, associative: 'right'},\r\n                'cos': {precedence: 4, associative: 'right'},\r\n                'tab': {precedence: 4, associative: 'right'},\r\n            }\r\n            this._uniformize = true\r\n        }\r\n        return this._tokenConfig\r\n    }\r\n\r\n    /**\r\n     * Get the next token to analyse.\r\n     * @param expr (string) Expression to analyse\r\n     * @param start (number) CUrrent position in the expr string.\r\n     */\r\n    NextToken2(expr: string, start: number): [string, number, string] {\r\n        let token: string, tokenType: string;\r\n        token = '';\r\n        tokenType = '';\r\n        // Case of parenthesis or comma (generic items)\r\n        if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        } else{\r\n            // Order token keys by token characters length (descending)\r\n            const keys = Object.keys(this._tokenConfig).sort((a,b)=>b.length-a.length)\r\n\r\n            for(let key of keys){\r\n                if(expr.substr(start, key.length) === key){\r\n                    token += key;\r\n                    tokenType = 'operation'\r\n                    break\r\n                }\r\n            }\r\n\r\n            if(token===''){\r\n                // No function found ! Might be a coefficient !\r\n                if( expr[start].match(/[0-9]/) ) {\r\n                    token = expr.substr(start).match(/^([0-9.,/]+)/)[0]\r\n                    tokenType = 'coefficient'\r\n                }else if (expr[start].match(/[a-zA-Z]/)) {\r\n                    token = expr.substr(start).match(/^([a-zA-Z])/)[0]\r\n                    tokenType = 'variable'\r\n                }else{\r\n                    console.log('Unidentified token', expr[start], expr, start)\r\n                    token = expr[start]\r\n                    tokenType = 'monom'\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n\r\n        // console.log(token, tokenType)\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    NextToken(expr: string, start: number): [string, number, string] {\r\n        let tokenMatch: string[], token: string, tokenType: string;\r\n\r\n        this.NextToken2(expr, start)\r\n        // Detect a fraction monoms or return empty array\r\n        tokenMatch = (expr.substr(start).match(/^[0-9/a-zA-Z^]+/g)) || [];\r\n\r\n        if (expr.substr(start, start + 3).match(/^(sin|cos|tan)/g)) {\r\n            token = expr.substr(start, 3)\r\n            tokenType = 'function'\r\n        } else if (tokenMatch.length > 0) {\r\n            token = tokenMatch[0];\r\n            tokenType = 'monom';\r\n        }\r\n        // It's an operation !\r\n        else if (expr[start].match(/[+\\-*/^]/g)) {\r\n            token = expr[start];\r\n            tokenType = 'operation';\r\n        } else if (expr[start].match(/[&|!]/g)) {\r\n            token = expr[start];\r\n            tokenType = 'operation';\r\n        }\r\n        // It's an opening parenthese\r\n        else if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        }\r\n        // It's a monom.\r\n        else {\r\n            // TODO: Actually, negative exposant aren't supported.\r\n            // token = (expr.substr(start).match(/^[\\da-z\\^]+/g)[0])||'';\r\n            token = tokenMatch[0];\r\n            tokenType = 'monom';\r\n\r\n            if (token === '') {\r\n                token = expr[start];\r\n                tokenType = 'monom';\r\n                console.log('SHUTING YARD - NEXT TOKEN: error at ', start);\r\n            }\r\n        }\r\n\r\n        // console.log(token, start + token.length, tokenType);\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    /**\r\n     * Sanitize an expression by adding missing common operation (multiplication between parentheseses)\r\n     * @param expr\r\n     * @constructor\r\n     */\r\n    Uniformizer(expr: string): string {\r\n        // Determiner if need to be uniformized\r\n        if(!this._uniformize){return expr}\r\n\r\n        let expr2;\r\n        // Replace missing multiplication between two parenthese\r\n        expr2 = expr.replace(/\\)\\(/g, ')*(');\r\n\r\n        // Replace missing multiplication between number or setLetter and parenthese.\r\n\r\n        // 3x(x-4) => 3x*(x-4)\r\n        expr2 = expr2.replace(/([\\da-zA-Z])(\\()/g, \"$1*$2\");\r\n\r\n        // (x-4)3x => (x-4)*3x\r\n        expr2 = expr2.replace(/(\\))([\\da-zA-Z])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between number and letters.\r\n        // 3x => 3*x\r\n        expr2 = expr2.replace(/([0-9])([a-zA-Z])/g, \"$1*$2\");\r\n        expr2 = expr2.replace(/([a-zA-Z])([0-9])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between letters ?\r\n        // TODO: More robust solution to handle all letters ?\r\n        expr2 = expr2.replace(/([abcxyz])([abcxyz])/g, \"$1*$2\");\r\n\r\n        // Restore operation auto formating (prevent adding the mutliplcation star)\r\n        // TODO: Accept list of functions\r\n        let fnToken = ['sin', 'cos', 'tan']\r\n        for (let token of fnToken) {\r\n            expr2 = expr2.replace(new RegExp(token + '\\\\*', 'g'), token);\r\n        }\r\n\r\n        return expr2;\r\n    }\r\n\r\n    /**\r\n     * Parse an expression using the shutting yard tree algorithms\r\n     * @param expr (string) Expression to analyse\r\n     * Returns a RPN list of items.\r\n     * @param operators\r\n     */\r\n    parse(expr: string, operators?: string[]): Shutingyard {\r\n        let outQueue: {token:string, tokenType: string}[] = [],    // Output queue\r\n            opStack: {token:string, tokenType: string}[] = [],     // Operation queue\r\n            token: string = '',\r\n            tokenPos: number = 0,\r\n            tokenType: string = '',\r\n            previousOpStatckLength = 0\r\n\r\n        expr = this.Uniformizer(expr);\r\n\r\n        let securityLoopLvl1 = 50,\r\n            securityLoopLvl2_default = 50,\r\n            securityLoopLvl2;\r\n\r\n        while (tokenPos < expr.length) {\r\n            securityLoopLvl1--;\r\n            if (securityLoopLvl1 === 0) {\r\n                console.log('SECURITY LEVEL 1 EXIT');\r\n                break;\r\n            }\r\n\r\n            // Get the next token and the corresponding new (ending) position\r\n            [token, tokenPos, tokenType] = this.NextToken2(expr, tokenPos);\r\n\r\n            switch (tokenType) {\r\n                case 'monom':\r\n                case 'coefficient':\r\n                case 'variable':\r\n                    outQueue.push({\r\n                        token,\r\n                        tokenType\r\n                    });\r\n                    // if(previousOpStatckLength == opStack.length && outQueue.length>=2){\r\n                    //     console.log('opStatckLength', outQueue, opStack.length)\r\n                    //     outQueue.push('*')\r\n                    // }\r\n                    break;\r\n                case 'operation':\r\n                    previousOpStatckLength = opStack.length;\r\n                    //If the token is an operator, o1, then:\r\n                    if (opStack.length > 0) {\r\n                        let opTop = opStack[opStack.length - 1];\r\n\r\n\r\n                        securityLoopLvl2 = +securityLoopLvl2_default;\r\n\r\n                        //while there is an operator token o2, at the top of the operator stack and\r\n                        while (opTop.token in this._tokenConfig && (\r\n                                //either o1 is left-associative and its precedence is less than or equal to that of o2,\r\n                                (this._tokenConfig[token].associative === 'left' && this._tokenConfig[token].precedence <= this._tokenConfig[opTop.token].precedence)\r\n                                ||\r\n                                //or o1 is right associative, and has precedence less than that of o2,\r\n                                (this._tokenConfig[token].associative === 'right' && this._tokenConfig[token].precedence < this._tokenConfig[opTop.token].precedence)\r\n                            )\r\n                            ) {\r\n\r\n                            /* Security exit ! */\r\n                            securityLoopLvl2--;\r\n                            if (securityLoopLvl2 === 0) {\r\n                                console.log('SECURITY LEVEL 2 OPERATION EXIT');\r\n                                break;\r\n                            }\r\n\r\n                            // Add the operation to the queue\r\n                            outQueue.push((opStack.pop()) || {token: '', tokenType: 'operation'});\r\n\r\n                            // Get the next operation on top of the Stack.\r\n                            if(opStack.length===0){break;}\r\n                            opTop = opStack[opStack.length - 1];\r\n                        }\r\n                    }\r\n                    //at the end of iteration push o1 onto the operator stack\r\n                    opStack.push({token,tokenType});\r\n                    break;\r\n                case 'function-argument':\r\n                    // TODO: check if the opStack exist.\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 0) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 FUNCTION ARGUMENT EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n                    break;\r\n                case '(':\r\n                    opStack.push({token,tokenType});\r\n                    // Add an empty value if next element is negative.\r\n                    if (expr[tokenPos] === '-') {\r\n                        outQueue.push({token: '0', tokenType: 'coefficient'});\r\n                    }\r\n                    break;\r\n                case ')':\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    //Until the token at the top of the stack is a left parenthesis, pop operators off the stack onto the output queue.\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 1 /*Maybe zero !? */) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 CLOSING PARENTHESE EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n\r\n                    //Pop the left parenthesis from the stack, but not onto the output queue.\r\n                    opStack.pop();\r\n                    break;\r\n                case 'function':\r\n                    opStack.push({token, tokenType});\r\n                    break;\r\n                default:\r\n                    // In theory, everything should be handled.\r\n                    console.log(`SHUTING YARD: ${tokenType} : ${token} `);\r\n            }\r\n\r\n            // Output\r\n            // console.log(outQueue.concat(opStack.reverse()).join(\" \"));\r\n        }\r\n\r\n        // console.log(outQueue.concat(opStack.reverse()));\r\n        this._rpn = outQueue.concat(opStack.reverse());\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    // Getter\r\n    get rpn() {\r\n        // console.log(this._rpn)\r\n        return this._rpn;\r\n    }\r\n\r\n\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import {Numeric} from \"./maths/numeric\";\r\nimport {Shutingyard} from \"./maths/shutingyard\";\r\nimport {Random} from \"./maths/random\";\r\nimport {Fraction, Nthroot} from \"./maths/coefficients\";\r\nimport {Monom, Polynom, Equation, LinearSystem, Rational, Logicalset} from \"./maths/algebra\";\r\nimport {Line, Circle, Triangle, Point, Vector} from \"./maths/geometry\";\r\n\r\n// Expose as global\r\n// export let Pi = {\r\n(<any>window).Pi = {\r\n    ShutingYard: Shutingyard,\r\n    Numeric: Numeric,\r\n    Fraction: Fraction,\r\n    Root: Nthroot,\r\n    Monom: Monom,\r\n    Polynom: Polynom,\r\n    Equation: Equation,\r\n    LinearSystem: LinearSystem,\r\n    Rational: Rational,\r\n    Logicalset: Logicalset,\r\n    Random: Random,\r\n    Geometry: {\r\n        Vector: Vector,\r\n        Point: Point,\r\n        Line: Line,\r\n        Triangle: Triangle,\r\n        Circle: Circle\r\n    }\r\n};\r\n"],"names":["Equation","_left","_right","_sign","_polynom","_solutions","_varnothing","_real","constructor","equations","this","Polynom","zero","length","isEquation","clone","parse","left","right","solutions","solution","includes","join","isReal","undefined","solve","isVarnothing","signAsTex","tex","raw","variables","Set","concat","numberOfVars","value","sign","_formatSign","equationString","pStr","strSign","_findSign","split","create","console","log","signStr","_reverseSign","replace","_randomizeDefaults","degree","randomizeDefaults","randomize","opts","moveLeft","subtract","reorder","allLeft","mMove","m","monoms","isZero","simplify","multiply","Numeric","lcm","getDenominators","divide","gcd","getNumerators","isolate","letter","isOne","isMultiVariable","cMove","hasLetter","add","opposed","coefficient","replaceBy","P","F","Fraction","invert","max","letters","_solveDegree1","_solveDegree2","_solveDegree3plus","isGreater","indexOf","isStrictEqual","isAlsoEqual","m1","monomByDegree","m0","v","display","s","delta","nthDelta","realX1","realX2","sX1","sX2","aF","bF","cF","denominator","a","b","Math","sqrt","toFixed","Nthroot","reduce","hasRadical","dfrac","LinearSystem","_resolutionSteps","_equations","_letters","equationStrings","isLinearSystem","isSolvable","V","E","sort","equStr","LS","equArray","equ","L","monomByLetter","push","repeat","texSolution","map","_findLetters","setCoefficient","coefficients","i","slice","toString","setLetters","generate","solutionsF","_generateOneEquation","coeff","leftValue","equString","Random","numberSym","_checkIfLinerCombination","_linearReduction","eq1","eq2","c1","c2","mergeEquations","factor1","factor2","eq1multiplied","eq2multiplied","_solveOneLetter","LE","reducedEquations","str","_rawString","_rpn","isLogicalset","Shutingyard","rpn","evaluate","tokenSets","reference","referenceSet","varStack","key","token","tokenType","second","pop","first","filter","x","has","vennAB","A","B","vennABC","C","Monom","_coefficient","_literal","literal","literalSqrt","isLiteralSquare","literalStr","inputStr","matchAll","clean","Object","keys","isNotZero","isNotEqual","dividers","hasFractionCoefficient","numerator","abs","literals","_getLiteralDividers","monomDividers","N","M","one","arr","tmpList","d","litt","item","currentLetter","displayWithSign","_shutingYardToReducedMonom","pow","q1","q2","stack","element","setLetter","k","makeSame","isSameAs","multiplyByNumber","nb","root","p","isSquare","compare","isEqual","M1","M2","K","isRational","isEven","values","t","n","r","tmpValues","derivative","dM","primitive","static","coeffN","coeffD","isStrictlyPositive","min","areSameAs","areEquals","_monoms","_factors","_texString","polynomString","factors","texFactors","factorize","f","texString","genDisplay","output","forceSign","wrapParentheses","isNaN","Number","empty","shutingYardToReducedPolynom","test","fractions","m2","tempPolynom","previousToken","isSafeInteger","multiplyByPolynom","multiplyByFraction","multiplyByMonom","multiplyByInteger","xmultiply","euclidian","quotient","reminder","maxMP","degreeP","newM","MaxIteration","isPositive","isFraction","divideByFraction","divideByInteger","nbF","cP1","cP2","isOpposedAt","isFactorized","match","e","polynomStringNormalized","replaceAll","polynomStringReduced","substr","polyFactors","splice","isDeveloped","j","S","resultPolynom","forEach","monom","dP","integrate","valuesA","valuesB","commonMonom","securityLoop","m1d","m2d","result","dividerPolynom","_factorize2ndDegree","P1","P2","c","x1","x2","factor","xyzPolynom","xFactors","_factorizeByGroups","getZeroes","zeroes","zeroesAsTex","greater","D","z","frac","monomsByDegree","Ms","denominators","numerators","lcmDenominator","gcdDenominator","lcmNumerator","gcdNumerator","_numerator","_denominator","domain","amplify","NumeratorEuclidien","DenominatorEuclidien","R","limits","Infinity","denominatorOrPeriodic","NaN","floor","infinite","invalid","Q","lesser","g","compareFraction","than","leq","geq","isOpposed","isInverted","isNegativeOne","isNegative","isStrictlyNegative","isInfinity","isFinite","isReduced","isNatural","isOdd","_radical","_nth","_isValid","radical","nth","nthroot","_center","_radius","_squareRadius","_cartesian","_exists","center","checkCircle","Point","Vector","normSquare","y","radius","cx","cy","developed","y1","y2","relativePosition","distance","distanceTo","LinePropriety","Line","_a","_b","_c","_OA","_d","_n","_referencePropriety","_referenceLine","Perpendicular","Parallel","isLine","exists","equation","canonical","mxh","slope","OA","height","parametric","pmatrix","normal","director","parseEquation","parseByPointAndVector","parseByPointAndNormal","parseByCoefficient","elem","delete","size","parseByPointAndLine","orientation","isParellelTo","line","simplifyDirection","intersection","Pt","isParallel","isSame","point","hasIntersection","pt","d2","fraction","hitSegment","iPt","canonicalAsFloatCoefficient","decimals","_x","_y","_exist","isPoint","pts","xy","origin","middleOf","texValues","numberOfDigits","_A","_B","_C","_lines","_middles","_remarquables","isTriangle","AB","getSegment","BA","BC","CB","AC","CA","isRectangle","isNormalTo","isEquilateral","isIsocele","lines","remarquables","intersect","_updateTriangle","_calculateRemarquableLines","getPointByName","ptName","toUpperCase","ptName1","ptName2","_calculateBisectors","medians","mediators","heights","bisectors","d1","tlines","b1","norm","b2","_parseString","reset","components","scalarProductWithVector","v1","v2","multiplyByScalar","scalar","divideByScalar","angleWith","sharp","radian","toDegree","PI","acos","round","primes","maxV","gcd2","polynom","config","rndPolynom","rndMonom","rndFraction","number","from","to","rndHelpers","randomInt","allowZero","randomIntSym","bool","percent","randomBool","array","randomArray","randomItem","shuffle","shuffleArray","_config","_defaultConfig","mergeConfig","defaultConfig","randomCore","userConfig","super","negative","reduced","random","temp","unit","factorable","allowNullMonom","numberOfMonoms","_factorableConfig","_mode","_tokenConfig","_uniformize","mode","tokenConfigInitialization","isOperation","precedence","associative","NextToken2","expr","start","NextToken","tokenMatch","Uniformizer","expr2","fnToken","RegExp","operators","outQueue","opStack","tokenPos","previousOpStatckLength","securityLoopLvl2","securityLoopLvl1","opTop","reverse","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","window","Pi","ShutingYard","Root","Rational","Logicalset","Geometry","Triangle","Circle"],"sourceRoot":""}