{"version":3,"file":"pi.js","mappings":"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","sources":["webpack://pimath/./src/maths/algebra/equation.ts","webpack://pimath/./src/maths/algebra/index.ts","webpack://pimath/./src/maths/algebra/linearSystem.ts","webpack://pimath/./src/maths/algebra/logicalset.ts","webpack://pimath/./src/maths/algebra/monom.ts","webpack://pimath/./src/maths/algebra/polynom.ts","webpack://pimath/./src/maths/algebra/rational.ts","webpack://pimath/./src/maths/coefficients/fraction.ts","webpack://pimath/./src/maths/coefficients/index.ts","webpack://pimath/./src/maths/coefficients/nthroot.ts","webpack://pimath/./src/maths/expressions/numexp.ts","webpack://pimath/./src/maths/expressions/polynomexp.ts","webpack://pimath/./src/maths/geometry/circle.ts","webpack://pimath/./src/maths/geometry/index.ts","webpack://pimath/./src/maths/geometry/line.ts","webpack://pimath/./src/maths/geometry/point.ts","webpack://pimath/./src/maths/geometry/triangle.ts","webpack://pimath/./src/maths/geometry/vector.ts","webpack://pimath/./src/maths/numeric.ts","webpack://pimath/./src/maths/random/index.ts","webpack://pimath/./src/maths/random/randomCore.ts","webpack://pimath/./src/maths/random/rndFraction.ts","webpack://pimath/./src/maths/random/rndHelpers.ts","webpack://pimath/./src/maths/random/rndMonom.ts","webpack://pimath/./src/maths/random/rndPolynom.ts","webpack://pimath/./src/maths/shutingyard.ts","webpack://pimath/webpack/bootstrap","webpack://pimath/./src/main.ts"],"sourcesContent":["import {Polynom} from \"./polynom\";\r\nimport {Monom} from \"./monom\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Fraction, Nthroot} from \"../coefficients\";\r\n\r\n/**\r\n * Equation is a class to manage equations...\r\n */\r\ninterface ISolution {\r\n    tex: string,\r\n    value: number,\r\n    exact: unknown\r\n}\r\n\r\nexport class Equation {\r\n    private _left: Polynom;  // Left part of the equation\r\n    private _right: Polynom; // Right part of the equation\r\n    private _sign: string;   // Signe of the equation, by default =\r\n\r\n    private _polynom: Polynom;  // Used to solve the equation // TODO: remove the private value ?\r\n    private _solutions: ISolution[]\r\n\r\n    // Undetermined texSolutions.\r\n    private _varnothing: string = '\\\\varnothing';\r\n    private _real: string = '\\\\mathbb{R}';\r\n\r\n    /**\r\n     * Create an Equation using two polynoms.\r\n     * Markdown *support* is cool\r\n     * @param equations\r\n     */\r\n    constructor(...equations: unknown[]) {\r\n        // Default equation\r\n        this._left = new Polynom().zero();\r\n        this._right = new Polynom().zero();\r\n        this._sign = '=';\r\n\r\n        if (equations.length === 1) {\r\n            if(equations[0] instanceof Equation) {\r\n                return equations[0].clone();\r\n            } else if(typeof equations[0] === 'string') {\r\n                this.parse(equations[0]);\r\n            }\r\n        } else if (equations.length === 2) {\r\n            if(equations[0] instanceof Polynom){\r\n                this.left = equations[0].clone()\r\n            }else if(typeof equations[0] === 'string'){\r\n                this.left = new Polynom(equations[0])\r\n            }\r\n\r\n            if(equations[1] instanceof Polynom){\r\n                this.right = equations[1].clone()\r\n            }else if(typeof equations[1] === 'string'){\r\n                this.right = new Polynom(equations[1])\r\n            }\r\n        } else {\r\n            // Return default empty equation\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isEquation() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get solutions(): ISolution[] {\r\n        return this._solutions\r\n    }\r\n    get solution(): string {\r\n        if (this._solutions.length === 1\r\n            &&\r\n            (\r\n                this._solutions[0].tex === this._real\r\n                || this._solutions[0].tex === this._varnothing\r\n                || this._solutions[0].tex.includes('\\\\left')\r\n            )\r\n        ) {\r\n            return `S = ${this._solutions[0]}`;\r\n        }\r\n        return `S = \\\\left{ ${this._solutions.map(x => x.tex).join(';')} \\\\right}`;\r\n    }\r\n\r\n    get isReal(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0].tex === this._real;\r\n    }\r\n\r\n    get isVarnothing(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0].tex === this._varnothing;\r\n    }\r\n\r\n    get signAsTex(): string {\r\n        if (this._sign === '>=' || this._sign === '=>' || this._sign === 'geq') {\r\n            return '\\\\geq';\r\n        }\r\n        if (this._sign === '<=' || this._sign === '=<' || this._sign === 'leq') {\r\n            return '\\\\leq';\r\n        }\r\n        return this._sign;\r\n    }\r\n\r\n    get tex(): string {\r\n        return `${this._left.tex}${this.signAsTex}${this._right.tex}`;\r\n    }\r\n\r\n    get display(): string {\r\n        return `${this._left.display}${this.signAsTex}${this._right.display}`;\r\n    }\r\n\r\n\r\n    get raw(): string {\r\n        return `${this._left.raw}${this.signAsTex}${this._right.raw}`;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        return [...new Set(this._right.variables.concat(this._left.variables))];\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    get left(): Polynom {\r\n        return this._left;\r\n    }\r\n\r\n    set left(value: Polynom) {\r\n        this._left = value;\r\n    }\r\n\r\n    get right(): Polynom {\r\n        return this._right;\r\n    }\r\n\r\n    set right(value: Polynom) {\r\n        this._right = value;\r\n    }\r\n\r\n    get sign(): string {\r\n        return this._sign;\r\n    }\r\n\r\n    set sign(value: string) {\r\n        // Set the sign value as formatted.\r\n        this._sign = this._formatSign(value);\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (equationString: string): Equation => {\r\n        let pStr: string[], strSign: string | false;\r\n        // Find the string separator\r\n        strSign = this._findSign(equationString);\r\n\r\n        if (strSign === false) {\r\n            console.error('The equation is not valid (no sign found)');\r\n            return;\r\n        }\r\n\r\n        // The StrSign is found\r\n        pStr = equationString.split(strSign);\r\n\r\n        return this.create(new Polynom(pStr[0]), new Polynom(pStr[1]), this._formatSign(strSign));\r\n    };\r\n\r\n    private _findSign = (equationString: string): string | false => {\r\n        let strSign: string = '';\r\n\r\n        if (equationString.includes('geq')) {\r\n            return (equationString.includes('\\\\geq')) ? '\\\\geq' : 'geq';\r\n        } else if (equationString.includes('leq')) {\r\n            return (equationString.includes('\\\\leq')) ? '\\\\leq' : 'leq';\r\n        } else if (equationString.includes('>=')) {\r\n            return '>=';\r\n        } else if (equationString.includes('=>')) {\r\n            return '=>';\r\n        } else if (equationString.includes('>')) {\r\n            return '>';\r\n        } else if (equationString.includes('<=')) {\r\n            return '<=';\r\n        } else if (equationString.includes('=<')) {\r\n            return '=<';\r\n        } else if (equationString.includes('<')) {\r\n            return '<';\r\n        } else if (equationString.includes('=')) {\r\n            return '='\r\n        }\r\n        if (strSign === '') {\r\n            console.log('Equation: parse string : sign not found');\r\n            return false;\r\n        }\r\n    };\r\n\r\n    private _formatSign = (signStr: string): string => {\r\n        if (signStr === undefined) {\r\n            return '=';\r\n        }\r\n\r\n        if (signStr.includes('geq')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>=')) {\r\n            return '>=';\r\n        } else if (signStr.includes('=>')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>')) {\r\n            return '>';\r\n        } else if (signStr.includes('leq')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<=')) {\r\n            return '<=';\r\n        } else if (signStr.includes('=<')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<')) {\r\n            return '<';\r\n        } else {\r\n            return '='\r\n        }\r\n    };\r\n\r\n    private _reverseSign = (): Equation => {\r\n        if (this._sign === '=') {\r\n            return this;\r\n        }\r\n\r\n        if (this._sign.includes('<')) {\r\n            this._sign.replace('<', '>');\r\n            return this;\r\n        }\r\n        if (this._sign.includes('>')) {\r\n            this._sign.replace('>', '<');\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    create = (left: Polynom, right: Polynom, sign?: string): Equation => {\r\n        this._left = left;\r\n        this._right = right;\r\n        this._sign = this._formatSign(sign);\r\n        return this;\r\n    };\r\n\r\n    clone = (): Equation => {\r\n        return new Equation().create(this._left.clone(), this._right.clone(), this._sign + '');\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n    // -----------------------------------------------\r\n    private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n        degree: 2\r\n    };\r\n    get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n        return this._randomizeDefaults;\r\n    }\r\n\r\n    set randomizeDefaults(value) {\r\n        this._randomizeDefaults = value;\r\n    }\r\n\r\n    randomize = (opts?: {}, sign?: string): Equation => {\r\n        // TODO: Generate equations randomly, using config.\r\n        return new Equation().create(new Polynom(), new Polynom(), sign);\r\n    };\r\n\r\n\r\n    // -----------------------------------------------\r\n    // Equations operations\r\n    // -----------------------------------------------\r\n    /**\r\n     * Reorder will move all monoms containing a letter on the left, all the other on the right.\r\n     */\r\n    moveLeft = (): Equation => {\r\n        this._left = this._left.clone().subtract(this._right)\r\n        this._right.zero()\r\n        return this;\r\n    }\r\n    reorder = (allLeft?: boolean): Equation => {\r\n        // Move all monoms of degree greater than 0 to the left.\r\n        // and all zero degree monoms to the right.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n\r\n        if (allLeft) {\r\n            return this.moveLeft()\r\n        }\r\n        let mMove: Monom;\r\n        for (let m of this._left.monoms) {\r\n            if (m.degree().isZero()) {\r\n                mMove = m.clone();\r\n                this._left.subtract(mMove);\r\n                this._right.subtract(mMove);\r\n            }\r\n        }\r\n\r\n        // Reorder the left and right polynoms\r\n        this._left.reorder();\r\n        this._right.reorder();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiply by the lcm denominator and divide by the gcm numerators.\r\n     */\r\n    simplify = (): Equation => {\r\n        this.multiply(Numeric.lcm(...this._left.getDenominators(), ...this._right.getDenominators()));\r\n        this.divide(Numeric.gcd(...this._left.getNumerators(), ...this._right.getNumerators()));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Reorder the polynom to have only one letter on the left, the rest on the right.\r\n     * @param letter\r\n     */\r\n    isolate = (letter?: string): Equation | false => {\r\n        // Determine if we can isolate the variables.\r\n\r\n        // Both part of the equations must be of the first degree.\r\n        //TODO: handle equations of degree two or more ?\r\n        if (!this.degree(letter).isOne()) {\r\n            return false;\r\n        }\r\n\r\n        // Modify the equation to isolate the asked variable.\r\n        // TODO: must handle equations like 3xy+5y=4 => y = 4/(3x-5)\r\n        if (this.isMultiVariable()) {\r\n            return false;\r\n        }\r\n\r\n        // Isolate the letter.\r\n        let mMove: Monom, cMove: Fraction;\r\n        // Start by moving everything to the left.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n        for (let m of this._left.monoms) {\r\n            if (!m.hasLetter(letter)) {\r\n                mMove = m.clone();\r\n                this._left.add(mMove.clone().opposed());\r\n                this._right.add(mMove.clone().opposed());\r\n            }\r\n        }\r\n\r\n        // In theory, we should have only one item on the left.\r\n        if (this._left.length !== 1) {\r\n            return false;\r\n        }\r\n        cMove = this._left.monoms[0].coefficient.clone();\r\n        this._left.divide(cMove);\r\n        this._right.divide(cMove);\r\n        return this;\r\n    };\r\n\r\n    replaceBy = (letter: string, P: Polynom): Equation => {\r\n        this._left.replaceBy(letter, P)\r\n        this._right.replaceBy(letter, P)\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiple an equation by a fraction value.\r\n     * @param value\r\n     */\r\n    multiply = (value: unknown): Equation => {\r\n\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        // Multiply each part of the equation by the fraction\r\n        this._left.multiply(F);\r\n        this._right.multiply(F);\r\n\r\n        // The sign of the inequation must be changed.\r\n        if (this._sign !== '=' && F.sign() === -1) {\r\n            this._reverseSign();\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * divide an equation by a given value (transformed as a fraction)\r\n     *\r\n     * ```\r\n     * 8x+10=6x \\vert 2\r\n     * 4x+5=3x\r\n     * ```\r\n     *\r\n     * |>Alternatively with $3x-4$ maybe it's working ?\r\n     * $$\\frac{3x}{5}$$\r\n     *\r\n     * @param value\r\n     * @returns {Equation}\r\n     */\r\n    divide = (value: unknown): Equation => {\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        if (F.isZero()) {\r\n            return this;\r\n        } else {\r\n            return this.multiply(F.invert());\r\n        }\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations helpers\r\n    // -----------------------------------------------\r\n\r\n    /**\r\n     * Get the degree of the equation\r\n     * @param letter\r\n     */\r\n    degree = (letter?: string): Fraction => {\r\n        return Fraction.max(this._left.degree(letter), this._right.degree(letter));\r\n    };\r\n\r\n    /**\r\n     * Determine if the equation contains more than one letter/variable.\r\n     */\r\n    isMultiVariable = (): boolean => {\r\n        return this._left.isMultiVariable || this._right.isMultiVariable;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        // @ts-ignore\r\n        return [...new Set([...this._left.letters(), ...this._right.letters()])];\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations solving algorithms\r\n    // -----------------------------------------------\r\n    solve = (): Equation => {\r\n        // Initialise the variables:\r\n        this._solutions = [];\r\n\r\n        // TODO: consolidate solving equations (inequations vs equations)\r\n        // TODO: work with not natural degrees ?\r\n        this._polynom = this._left.clone().subtract(this._right);\r\n\r\n        switch (this._polynom.degree().value) {\r\n            case 0:\r\n            case 1:\r\n                this._solveDegree1();\r\n                break;\r\n            case 2:\r\n                this._solveDegree2();\r\n                break;\r\n            default:\r\n                this._solveDegree3plus();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    private isGreater = (): boolean => {\r\n        if (this._sign.indexOf('>') !== -1) {\r\n            return true;\r\n        }\r\n        return this._sign.indexOf('geq') !== -1;\r\n\r\n    };\r\n    private isStrictEqual = (): boolean => {\r\n        return this._sign === '=';\r\n    };\r\n    private isAlsoEqual = (): boolean => {\r\n        if (this._sign.indexOf('=') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('geq') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('leq') !== -1) {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    private _solveDegree1 = (letter?: string): ISolution[] => {\r\n        const m1 = this._polynom.monomByDegree(1, letter).coefficient,\r\n            m0 = this._polynom.monomByDegree(0, letter).coefficient,\r\n            v = m0.clone().opposed().divide(m1);\r\n        let s: string;\r\n\r\n        if (this.isStrictEqual()) {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0) {\r\n                    this._solutions = [{\r\n                        tex: this._real,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                } else {\r\n                    this._solutions = [{\r\n                        tex: this._varnothing,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                }\r\n            } else {\r\n                this._solutions = [{\r\n                    tex: v.display,\r\n                    value: v.value,\r\n                    exact: v\r\n                }]\r\n            }\r\n        } else {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0 && this.isAlsoEqual()) {\r\n                    s = '\\\\mathbb{R}';\r\n                } else {\r\n                    if (m0.value > 0) {\r\n                        s = this.isGreater() ? this._real : this._varnothing;\r\n                    } else {\r\n                        s = !this.isGreater() ? this._real : this._varnothing;\r\n                    }\r\n                }\r\n            } else {\r\n                // Must handle the case if the m1 monom is negative.\r\n                if ((this.isGreater() && m1.sign() === 1) || (!this.isGreater() && m1.sign() === -1)) {\r\n                    s = `\\\\left${this.isAlsoEqual() ? '\\\\[' : '\\\\]'}${v};+\\\\infty\\\\right\\\\[`;\r\n                } else {\r\n                    s = `\\\\left\\\\]-\\\\infty;${v} \\\\right\\\\${this.isAlsoEqual() ? '\\\\]' : '\\\\['}`;\r\n                }\r\n            }\r\n            this._solutions = [{\r\n                tex: s,\r\n                value: NaN,\r\n                exact: false\r\n            }];\r\n        }\r\n\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree2 = (letter?: string): ISolution[] => {\r\n        let aF = this._polynom.monomByDegree(2, letter).coefficient,\r\n            bF = this._polynom.monomByDegree(1, letter).coefficient,\r\n            cF = this._polynom.monomByDegree(0, letter).coefficient,\r\n            delta: number, nthDelta: Nthroot,\r\n            lcm = Numeric.lcm(aF.denominator, bF.denominator, cF.denominator),\r\n            a = aF.multiply(lcm).value,\r\n            b = bF.multiply(lcm).value,\r\n            c = cF.multiply(lcm).value,\r\n            realX1: number, realX2: number,\r\n            sX1: string, sX2: string;\r\n\r\n        delta = b * b - 4 * a * c;\r\n\r\n        if (delta > 0) {\r\n            realX1 = (-b - Math.sqrt(delta)) / (2 * a);\r\n            realX2 = (-b + Math.sqrt(delta)) / (2 * a);\r\n\r\n            if (delta > 1.0e5) {\r\n                // The delta is too big to be parsed !\r\n                this._solutions = [\r\n                    {\r\n                        tex: ((-b - Math.sqrt(delta)) / (2 * a)).toFixed(5),\r\n                        value: realX1,\r\n                        exact: false\r\n                    },\r\n                    {\r\n                        tex: ((-b + Math.sqrt(delta)) / (2 * a)).toFixed(5),\r\n                        value: realX2,\r\n                        exact: false\r\n                    }\r\n                ]\r\n            } else {\r\n                nthDelta = new Nthroot(delta).reduce();\r\n                if (nthDelta.hasRadical()) {\r\n                    // -b +- coeff\\sqrt{radical}\r\n                    // -------------------------\r\n                    //           2a\r\n                    let gcd = Numeric.gcd(b, 2 * a, nthDelta.coefficient);\r\n                    nthDelta.coefficient = nthDelta.coefficient / gcd;\r\n\r\n                    // TODO: Can i delete the next line ?\r\n                    // let deltaC = nthDelta.coefficient, deltaR = nthDelta.radical;\r\n                    if (b !== 0) {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                {\r\n                                    tex: `${-b / gcd} - ${nthDelta.tex}`,\r\n                                    value: realX1,\r\n                                    exact: false // TODO: implement exact value with nthroot\r\n                                },\r\n                                {\r\n                                    tex: `${-b / gcd} + ${nthDelta.tex}`,\r\n                                    value: realX2,\r\n                                    exact: false\r\n                                },\r\n\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                {\r\n                                    tex: `\\\\dfrac{${-b / gcd} - ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                    value: realX1,\r\n                                    exact: false\r\n                                },\r\n                                {\r\n                                    tex: `\\\\dfrac{${-b / gcd} + ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                    value: realX2,\r\n                                    exact: false\r\n                                },\r\n                            ]\r\n                        }\r\n                    } else {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                {\r\n                                    tex: `- ${nthDelta.tex}`,\r\n                                    value: realX1,\r\n                                    exact: false\r\n                                },\r\n                                {\r\n                                    tex: `${nthDelta.tex}`,\r\n                                    value: realX2,\r\n                                    exact: false\r\n                                },\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                {\r\n                                    tex: `\\\\dfrac{- ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                    value: realX1,\r\n                                    exact: false\r\n                                },\r\n                                {\r\n                                    tex: `\\\\dfrac{${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                    value: realX2,\r\n                                    exact: false\r\n                                },\r\n                            ]\r\n                        }\r\n                    }\r\n                } else {\r\n                    // -b +- d / 2a\r\n                    const S1 = new Fraction(-b - nthDelta.coefficient, 2 * a).reduce(),\r\n                        S2 = new Fraction(-b + nthDelta.coefficient, 2 * a).reduce()\r\n                    this._solutions = [\r\n                        {\r\n                            tex: S1.dfrac,\r\n                            value: realX1,\r\n                            exact: S1\r\n                        },\r\n                        {\r\n                            tex: S2.dfrac,\r\n                            value: realX2,\r\n                            exact: S2\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n\r\n        } else if (delta === 0) {\r\n            const sol = new Fraction(-b, 2 * a).reduce()\r\n            this._solutions = [{\r\n                tex: sol.dfrac,\r\n                value: sol.value,\r\n                exact: sol\r\n            }];\r\n        } else {\r\n            this._solutions = [{\r\n                tex: this._varnothing,\r\n                value: NaN,\r\n                exact: false\r\n            }];\r\n        }\r\n\r\n\r\n        // Handle now the inequations.\r\n        if (!this.isStrictEqual()) {\r\n            if (this._solutions.length === 2) {\r\n                sX1 = (realX1 < realX2) ? this._solutions[0].tex : this._solutions[1].tex;\r\n                sX2 = (realX1 < realX2) ? this._solutions[1].tex : this._solutions[0].tex;\r\n\r\n                if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                    this._solutions = [{\r\n                        tex: `\\\\left]-\\\\infty ; ${sX1}\\\\right${this.isAlsoEqual() ? ']' : '['} \\\\cup \\\\left${this.isAlsoEqual() ? '[' : ']'}${sX2};+\\\\infty\\\\right[`,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }\r\n                    ];\r\n                } else {\r\n                    this._solutions = [{\r\n                        tex: `\\\\left${this.isAlsoEqual() ? '[' : ']'}${sX1} ; ${sX2}\\\\right${this.isAlsoEqual() ? ']' : '['}`,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }]\r\n                }\r\n            } else if (this._solutions.length === 1 && this._solutions[0].tex !== this._varnothing) {\r\n                if (!this.isAlsoEqual()) {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [{\r\n                            tex: `\\\\left]-\\\\infty ; ${this._solutions[0].tex}\\\\right[ \\\\cup \\\\left]${this._solutions[0].tex};+\\\\infty\\\\right[`,\r\n                            value: NaN,\r\n                            exact: false\r\n                        }\r\n                        ];\r\n                    } else {\r\n                        this._solutions = [{\r\n                            tex: this._varnothing,\r\n                            value: NaN,\r\n                            exact: false\r\n                        }];\r\n                    }\r\n                } else {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [{\r\n                            tex: this._real,\r\n                            value: NaN,\r\n                            exact: false\r\n                        }];\r\n                    } else {\r\n                        // this._texSolutions = [ this._texSolutions[0] ];\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.isGreater()) {\r\n                    this._solutions = [{\r\n                        tex: aF.sign() === 1 ? this._real : this._varnothing,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                } else {\r\n                    this._solutions = [{\r\n                        tex: aF.sign() === -1 ? this._real : this._varnothing,\r\n                        value: NaN,\r\n                        exact: false\r\n                    }];\r\n                }\r\n            }\r\n        }\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree3plus = (): ISolution[] => {\r\n        // TODO: try to resolve equations with a degree superior than 2.\r\n        this._solutions = [{tex: 'solve x - not yet handled', value: NaN, exact: false}];  // ESLint remove system :(\r\n        return this._solutions;\r\n    };\r\n\r\n}","export * from \"./equation\"\r\nexport * from \"./linearSystem\"\r\nexport * from \"./logicalset\"\r\nexport * from \"./monom\"\r\nexport * from \"./polynom\"\r\nexport * from \"./rational\"\r\nexport * from \"./../expressions/polynomexp\"","import {Fraction} from \"../coefficients\";\r\nimport {Equation} from \"./equation\";\r\nimport {Polynom} from \"./polynom\";\r\nimport {Monom} from \"./monom\";\r\nimport {Random} from \"../random\";\r\n\r\n// TODO: Must check and rework\r\nexport class LinearSystem {\r\n    private _solutions: { [letter: string]: { value: Fraction, isReal: boolean, isVarnothing: boolean } };\r\n    private _resolutionSteps: LinearSystem[];\r\n    private _equations: Equation[];\r\n    private _letters: string[];\r\n\r\n    constructor(...equationStrings: string[]) {\r\n        this._equations = [];\r\n        this._letters = 'xy'.split('');\r\n\r\n        if (equationStrings !== undefined && equationStrings.length > 0) {\r\n            this.parse(...equationStrings);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equations(): Equation[] {\r\n        return this._equations;\r\n    }\r\n\r\n    set equations(value) {\r\n        this._equations = value;\r\n    }\r\n\r\n    get letters(): string {\r\n        return this._letters.join('')\r\n    }\r\n\r\n    set letters(value: string) {\r\n        this._letters = value.split('');\r\n    }\r\n\r\n    get isSolvable(): boolean {\r\n        let V = this.variables;\r\n\r\n        // TODO: in some case, it is possible to resolve systems if there isn't the isSame number of vars and equations\r\n        if (V.length !== this._equations.length) {\r\n            return false;\r\n        }\r\n\r\n        //TODO: Must check if two equations isn't a linear combination of the others ?\r\n\r\n        return true;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n        for (let E of this._equations) {\r\n            V = V.concat(E.variables);\r\n        }\r\n        return [...new Set(V)].sort();\r\n    }\r\n\r\n    get tex(): string {\r\n        // Build the array of values.\r\n        // Reorder\r\n        // This clone the system :!!!\r\n        //TODO: Avoid cloning this linear system\r\n        let LS = this.clone().reorder(),\r\n            letters = LS.variables,\r\n            equStr: string[],\r\n            equArray: string[] = [],\r\n            m: Monom;\r\n\r\n        // TODO: Manage tex output of linear equations\r\n        for (let equ of LS.equations) {\r\n            equStr = [];\r\n            for (let L of letters) {\r\n                m = equ.left.monomByLetter(L);\r\n\r\n                if (equStr.length === 0) {\r\n                    equStr.push(m.isZero() ? '' : m.tex);\r\n                } else {\r\n                    equStr.push(m.isZero() ? '' : ((m.coefficient.sign() === 1) ? '+' : '') + m.tex);\r\n                }\r\n            }\r\n\r\n            // Add the equal sign\r\n            equStr.push('=');\r\n\r\n            // Add the right hand part of the equation (should be only a number, because it has been reordered)\r\n            equStr.push(equ.right.tex);\r\n\r\n            // Add to the list.\r\n            equArray.push(equStr.join('&'));\r\n        }\r\n\r\n\r\n        return `\\\\left\\\\{\\\\begin{array}{${\"r\".repeat(letters.length)}cl}${equArray.join('\\\\\\\\\\ ')}\\\\end{array}\\\\right.`;\r\n        //return `\\\\left\\\\{\\\\begin{array}{rrrcl}${this._equations.map(equ => `${equ.tex}`).join('\\\\\\\\\\ \\n')}\\\\end{array}\\\\right.`;\r\n    }\r\n\r\n    get solution(): string {\r\n        let tex: string[] = [];\r\n\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n\r\n        for (let letter in this._solutions) {\r\n            if (this._solutions[letter].isReal) {\r\n                console.log(`Undetermined (letter ${letter})`);\r\n                return;\r\n            }\r\n            if (this._solutions[letter].isVarnothing) {\r\n                console.log(`Undefined (letter ${letter})`);\r\n                return;\r\n            }\r\n\r\n            tex.push(this._solutions[letter].value.dfrac);\r\n        }\r\n        return `(${tex.join(';')})`;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...equations: unknown[]): LinearSystem => {\r\n        this._equations = equations.map(value => new Equation(value));\r\n        this._findLetters();\r\n        return this;\r\n    };\r\n\r\n    setCoefficient = (...coefficients: string[]): LinearSystem => {\r\n        // Reset the equations list\r\n        this._equations = [];\r\n\r\n        let i = 0;\r\n        while (i < coefficients.length - this._letters.length) {\r\n            let left = new Polynom().parse(this._letters.join(''), ...coefficients.slice(i, i + this._letters.length)),\r\n                right = new Polynom(coefficients[i + this._letters.length].toString()),\r\n                equ = new Equation().create(left, right);\r\n            this._equations.push(equ.clone());\r\n\r\n            i = i + this._letters.length + 1;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): LinearSystem => {\r\n        return new LinearSystem().parse(...this._equations.map(equ => equ.clone()));\r\n    };\r\n\r\n    setLetters = (...letters: string[]): LinearSystem => {\r\n        this._letters = letters;\r\n        return this\r\n    }\r\n    private _findLetters = (): LinearSystem => {\r\n        // Find all letters used.\r\n        let variables = new Set();\r\n\r\n        for (let equ of this._equations) {\r\n            variables = new Set([...variables, ...equ.variables]);\r\n        }\r\n\r\n        // TODO: How to transform (Set of string) to string[]\r\n        // @ts-ignore\r\n        this._letters = [...variables];\r\n        return this;\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n    // -----------------------------------------------\r\n    generate = (...solutions: Fraction[] | number[]): LinearSystem => {\r\n        let solutionsF: Fraction[] = [];\r\n\r\n        // Convert the numbers to fractions if necessary\r\n        for (let s of solutions) {\r\n            if (typeof s === \"number\") {\r\n                solutionsF.push(new Fraction(s.toString()));\r\n            } else {\r\n                solutionsF.push(s.clone());\r\n            }\r\n        }\r\n\r\n        // Create the equations and make sure they are not linear combined.\r\n        this._equations = [];\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            this._equations.push(this._generateOneEquation(...solutionsF));\r\n        }\r\n        return this;\r\n    };\r\n    private _generateOneEquation = (...solutions: Fraction[]): Equation => {\r\n        let coeff: number[] = [], leftValue: Fraction = new Fraction().zero(),\r\n            letters: string[] = ['x', 'y', 'z', 't', 'u', 'v', 'w', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],\r\n            equString: string = '', equ: Equation;\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            coeff.push(Random.numberSym(5));\r\n            leftValue.add(solutions[i].clone().multiply(coeff[i]));\r\n            equString += `${(coeff[i] < 0) ? coeff[i] : '+' + coeff[i]}${letters[i]}`\r\n        }\r\n\r\n        // LeftValue contains the left part oof the equation - and is then the isSame as the right part.\r\n        // It might be a Fraction.\r\n\r\n        // Must check if it's not a linear combination\r\n        equ = new Equation(`${equString}=${leftValue.display}`);\r\n        if (equ.right.monoms[0].coefficient.denominator != 1) {\r\n            equ.multiply(new Fraction(equ.right.monoms[0].coefficient.denominator, 1));\r\n        }\r\n        if (this._checkIfLinerCombination(equ)) {\r\n            return equ;\r\n        } else {\r\n            return this._generateOneEquation(...solutions);\r\n        }\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    private _linearReduction(eq1: Equation, eq2: Equation, letter: string): Equation {\r\n        // TODO: handle other signs for equations ?\r\n        // Get the monom for the particular letter.\r\n        let c1 = eq1.left.monomByDegree(1, letter).coefficient.clone(),\r\n            c2 = eq2.left.monomByDegree(1, letter).coefficient.clone().opposed();\r\n\r\n        return this.mergeEquations(eq1, eq2, c2, c1);\r\n    }\r\n\r\n    mergeEquations = (eq1: Equation, eq2: Equation, factor1: unknown, factor2: unknown): Equation => {\r\n        // Set and clone the equations.\r\n\r\n        let eq1multiplied = eq1.clone().multiply(new Fraction(factor1)),\r\n            eq2multiplied = eq2.clone().multiply(new Fraction(factor2));\r\n\r\n        // Add both equations together.\r\n        eq1multiplied.left.add(eq2multiplied.left);\r\n        eq1multiplied.right.add(eq2multiplied.right);\r\n\r\n        return eq1multiplied;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Solvers algorithm\r\n    // ------------------------------------------\r\n    reorder = (): LinearSystem => {\r\n        for (let E of this._equations) {\r\n            E.reorder();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    solve = (): LinearSystem => {\r\n        // Solve it by linear\r\n        this._solutions = {};\r\n        this._resolutionSteps = [];\r\n\r\n        // Reorder all equations.\r\n        this.reorder();\r\n\r\n        // Get all variables in the linear system\r\n        let V = this.variables.sort();\r\n\r\n        for (let letter of V) {\r\n            this._solutions[letter] = this._solveOneLetter(letter, V)\r\n        }\r\n\r\n        // TODO: LinearSystem - solve: optimization and handle undetermined and undefined systems.\r\n        return this;\r\n    };\r\n\r\n    private _checkIfLinerCombination = (equ: Equation): boolean => {\r\n\r\n        return true;\r\n    };\r\n\r\n    private _solveOneLetter(letter: string, V: string[]): { value: Fraction, isReal: boolean, isVarnothing: boolean } {\r\n        // list of equations.\r\n        let LE: Equation[] = this.clone().equations,\r\n            reducedEquations: Equation[] = [];\r\n\r\n        // Reduce the equations.\r\n        // Do it as long as there is more than one step, but no more than the number of equations.\r\n        for (let L of V) {\r\n            // remove the setLetter from all equations using linear combinations\r\n            if (L === letter) {\r\n                continue;\r\n            }\r\n\r\n            // Linear reduction.\r\n            // TODO: Search for better association\r\n            for (let i = 0; i < LE.length - 1; i++) {\r\n                reducedEquations.push(this._linearReduction(LE[i], LE[i + 1], L));\r\n            }\r\n\r\n            // Keep track of each steps.\r\n            this._resolutionSteps.push(new LinearSystem().parse(...reducedEquations));\r\n\r\n            // Set the list of equations to the new version.\r\n            LE = this._resolutionSteps[this._resolutionSteps.length - 1].clone().equations;\r\n\r\n            // Reset the stack\r\n            reducedEquations = [];\r\n        }\r\n\r\n        // Solve the equations\r\n        let E = this._resolutionSteps[this._resolutionSteps.length - 1].equations[0];\r\n        E.solve();\r\n\r\n        return {\r\n            value: new Fraction(E.solutions[0].value),\r\n            isReal: E.isReal,\r\n            isVarnothing: E.isVarnothing\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Helpers\r\n    // ------------------------------------------\r\n    log = (): string => {\r\n        let str: string = '';\r\n\r\n        for (let E of this._equations) {\r\n            console.log(E.tex);\r\n            str += `${E.tex}\\\\n}`;\r\n        }\r\n\r\n        return str;\r\n    };\r\n}\r\n","/**\r\n * Polynom module contains everything necessary to handle polynoms.\r\n * @module Logicalset\r\n */\r\n\r\nimport {Shutingyard, ShutingyardMode} from '../shutingyard';\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n */\r\n    export class Logicalset {\r\n        private _rawString: string;\r\n        private _rpn: { token: string, tokenType: string }[]\r\n\r\n        /**\r\n         *\r\n         * @param {string} value (optional) Default polynom to parse on class creation\r\n         */\r\n        constructor(value: string) {\r\n            this._rawString = value\r\n            this.parse(value)\r\n            return this;\r\n        }\r\n\r\n        get isLogicalset() {\r\n            return true;\r\n        };\r\n\r\n        private parse = (value: string): Logicalset => {\r\n            // TODO: Must format the value string to convert some items...\r\n\r\n            // Parse the updated value to the shutingyard algorithm\r\n            this._rpn = new Shutingyard(ShutingyardMode.SET).parse(value).rpn;\r\n\r\n            return this;\r\n        }\r\n\r\n        evaluate(tokenSets: { [key: string]: unknown[] }, reference?: unknown[]): unknown[] {\r\n            let varStack: (Set<unknown>)[] = []\r\n\r\n            let referenceSet: Set<unknown>\r\n            if (reference === undefined) {\r\n                referenceSet = new Set()\r\n                for (let key in tokenSets) {\r\n                    referenceSet = new Set([...referenceSet, ...tokenSets[key]])\r\n                }\r\n            } else {\r\n                referenceSet = new Set(reference)\r\n            }\r\n\r\n            for (let token of this._rpn) {\r\n                if (token.tokenType === 'variable') {\r\n                    // The variable has no token - assume it's empty.\r\n                    if (tokenSets[token.token] === undefined) {\r\n                        varStack.push(new Set())\r\n                    } else {\r\n                        varStack.push(new Set(tokenSets[token.token]));\r\n                    }\r\n\r\n                } else {\r\n                    switch (token.token) {\r\n                        case '&':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                varStack.push(new Set([...first].filter(x => second.has(x))))\r\n                            }\r\n                            break\r\n                        case '|':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n                                varStack.push(new Set([...first, ...second]))\r\n                            }\r\n                            break\r\n                        case '-':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n                                varStack.push(new Set([...first].filter(x => !second.has(x))))\r\n                            }\r\n                            break\r\n                        case '!':\r\n                            if (varStack.length >= 1) {\r\n                                let first = varStack.pop()\r\n\r\n                                varStack.push(new Set([...referenceSet].filter(x => !first.has(x))))\r\n                            }\r\n                            break\r\n                    }\r\n                }\r\n            }\r\n\r\n            return [...varStack[0]].sort();\r\n        }\r\n\r\n        vennAB(): any[] {\r\n            return this.evaluate({\r\n                    A: ['A', 'AB'],\r\n                    B: ['B', 'AB']\r\n                },\r\n                ['A', 'B', 'AB', 'E']\r\n            )\r\n        }\r\n\r\n        vennABC(): any[] {\r\n            return this.evaluate({\r\n                    A: ['A', 'AB', 'AC', 'ABC'],\r\n                    B: ['B', 'AB', 'BC', 'ABC'],\r\n                    C: ['C', 'AC', 'BC', 'ABC']\r\n                },\r\n                ['A', 'B', 'C', 'AB', 'AC', 'BC', 'E']\r\n            )\r\n        }\r\n\r\n        get rpn(): { token: string, tokenType: string }[] {\r\n            return this._rpn\r\n        }\r\n\r\n        get tex(): string {\r\n            let varStack: { token: string, tokenType: string } [] = []\r\n\r\n            for (let token of this._rpn) {\r\n                if (token.tokenType === 'variable') {\r\n                    varStack.push(token);\r\n                } else {\r\n                    switch (token.token) {\r\n                        case '&':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\cap ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '|':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\cup ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '-':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\setminus ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '!':\r\n                            if (varStack.length >= 1) {\r\n                                let first = varStack.pop()\r\n                                varStack.push({token: `\\\\overline{ ${first.token} }`, tokenType: 'variable'})\r\n                            }\r\n                            break\r\n                    }\r\n                }\r\n            }\r\n\r\n            return varStack[0].token\r\n        }\r\n    }","/***\r\n * Monom class\r\n */\r\nimport {Fraction} from \"../coefficients\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Shutingyard, ShutingyardType, Token, tokenType} from \"../shutingyard\";\r\nimport {log} from \"util\";\r\n\r\nexport type literalType = {\r\n    [Key: string]: Fraction\r\n}\r\n\r\nexport class Monom {\r\n    private _coefficient: Fraction;\r\n    private _literal: literalType;\r\n\r\n    /**\r\n     * Create a Monom\r\n     * Defined as \\\\(k \\\\cdot x^{n}\\\\), where \\\\( k,n \\in \\\\mathbb{Q}\\\\).\r\n     * Examples: \\\\(3x^2\\\\) or \\\\(3/5x^2\\\\)\r\n     * @param value (optional) string The value that should be parse. Can be a Monom, a Fraction, a string or a number. If nothing is provided, it will return the trivial monom (0).\r\n     */\r\n    constructor(value?: unknown) {\r\n        this.zero();\r\n\r\n        if (value !== undefined) {\r\n            // A string is given - try to parse the value.\r\n            this.parse(value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    /**\r\n     * Get the coefficient \\\\(k\\\\) of the Monom \\\\(k\\\\cdot x^{n}\\\\)\r\n     * @returns {Fraction}\r\n     */\r\n    get coefficient(): Fraction {\r\n        return this._coefficient;\r\n    }\r\n\r\n    /**\r\n     * Set the coefficient \\\\(k\\\\) value of the monom\r\n     * @param {Fraction | number | string} F\r\n     */\r\n    set coefficient(F: Fraction | number | string) {\r\n        this._coefficient = new Fraction(F);\r\n    }\r\n\r\n    /**\r\n     * Get the literal part of \\\\(x^{n_1}y^{n_2}\\\\) as dictionary \\\\[\\\\begin{array}{ll}x&=n_1\\\\\\\\y&=n_2\\\\end{array}\\\\]\r\n     * @returns {literalType}\r\n     */\r\n    get literal(): literalType {\r\n        return this._literal;\r\n    }\r\n\r\n    /**\r\n     * Get the literal square roots of the Monom.\r\n     * TODO: remove this getter ? Is it used and is it correct ?\r\n     * @returns {literalType}\r\n     */\r\n    get literalSqrt(): literalType {\r\n        if (this.isLiteralSquare()) {\r\n            let L: literalType = {}\r\n            for (let key in this._literal) {\r\n                L[key] = this._literal[key].clone().sqrt()\r\n            }\r\n            return L;\r\n        } else {\r\n            return this._literal;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom. Must be a dictionary {x: Fraction, y: Fraction, ...}\r\n     * @param {literalType} L\r\n     */\r\n    set literal(L: literalType) {\r\n        this._literal = L;\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom from a string\r\n     * @param inputStr  String like x^2y^3\r\n     */\r\n    set literalStr(inputStr: string) {\r\n        // TODO : parse using shutingyard tree !\r\n\r\n        // Match all x^n\r\n        for (const v of [...inputStr.matchAll(/([a-z])\\^([+-]?[0-9]+)/g)]) {\r\n            // Create the default letter entry if necessary.\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = new Fraction().zero();\r\n            }\r\n\r\n            // Add the new value.\r\n            // TODO: actually, it adds only numeric value\r\n            this._literal[v[1]].add(+v[2]);\r\n        }\r\n\r\n        // Match all x\r\n        for (const v of [...inputStr.matchAll(/([a-z](?!\\^))/g)]) {\r\n            // Match all single letters\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = new Fraction().zero();\r\n            }\r\n\r\n            // Add one to the value.\r\n            this._literal[v[1]].add(1)\r\n        }\r\n    }\r\n\r\n    // Getter helpers.\r\n    /**\r\n     * Get the variables letters\r\n     */\r\n    get variables(): string[] {\r\n        let M = this.clone().clean();\r\n        return Object.keys(M.literal)\r\n    }\r\n\r\n    // Display getter\r\n    /**\r\n     * This display getter is to be used in the polynom display getter\r\n     */\r\n    get display(): string {\r\n        let L: string = '',\r\n            letters = Object.keys(this._literal).sort()\r\n        for (let letter of letters) {\r\n            if (this._literal[letter].isNotZero()) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter].isNotEqual(1)) {\r\n                    L += `^${this._literal[letter].display}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.display}`;\r\n            } else {\r\n                return '';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.display}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    get dividers(): Monom[] {\r\n        // Decompose only if the coefficient is a natural number\r\n        if (this.coefficient.denominator !== 1) {\r\n            return [this.clone()]\r\n        }\r\n        // Decompose only if the power values are natural numbers.\r\n        if (this.hasFractionCoefficient) {\r\n            return [this.clone()]\r\n        }\r\n\r\n        // Security : do not do this if greater than 10000\r\n        if (this.coefficient.numerator > 10000) {\r\n            return [this.clone()]\r\n        }\r\n        const dividers = Numeric.dividers(Math.abs(this.coefficient.numerator))\r\n\r\n        // Decompose the literals parts.\r\n        let literals: literalType[] = [];\r\n        for (let L in this.literal) {\r\n            // L is the letter.\r\n            literals = this._getLiteralDividers(literals, L)\r\n        }\r\n\r\n        const monomDividers: Monom[] = [];\r\n        if (literals.length > 0 && dividers.length > 0) {\r\n            for (let N of dividers) {\r\n                for (let L of literals) {\r\n                    let M = new Monom();\r\n                    M.coefficient = new Fraction(N)\r\n                    M.literal = L\r\n                    monomDividers.push(M)\r\n                }\r\n            }\r\n        } else if (dividers.length === 0) {\r\n            for (let L of literals) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction().one()\r\n                M.literal = L\r\n                monomDividers.push(M)\r\n            }\r\n        } else {\r\n            for (let N of dividers) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction(N)\r\n                monomDividers.push(M)\r\n            }\r\n        }\r\n\r\n        return monomDividers.length === 0 ? [new Monom().one()] : monomDividers;\r\n    }\r\n\r\n    private _getLiteralDividers(arr: literalType[], letter: string): literalType[] {\r\n        let tmpList: { [key: string]: Fraction }[] = [];\r\n\r\n        // Be default, this.literal[letter] should be a rational number.\r\n        for (let d = 0; d <= this.literal[letter].value; d++) {\r\n            if (arr.length === 0) {\r\n                let litt: literalType = {}\r\n                litt[letter] = new Fraction(d)\r\n                tmpList.push(litt)\r\n            } else {\r\n                for (let item of arr) {\r\n                    let litt: literalType = {}\r\n                    for (let currentLetter in item) {\r\n                        litt[currentLetter] = item[currentLetter]\r\n                    }\r\n                    litt[letter] = new Fraction(d)\r\n                    tmpList.push(litt)\r\n                }\r\n            }\r\n        }\r\n        return tmpList;\r\n    }\r\n\r\n    /**\r\n     * Display the monom, forcing the '+' sign to appear\r\n     */\r\n    get displayWithSign(): string {\r\n        let d: String = this.display;\r\n        return (d[0] !== '-' ? '+' : '') + d;\r\n    }\r\n\r\n    get texWithSign(): string {\r\n        if (this.coefficient.isStrictlyPositive()) {\r\n            return '+' + this.tex\r\n        }\r\n\r\n        return this.tex\r\n    }\r\n\r\n    /**\r\n     * Get the tex output of the monom\r\n     */\r\n    get tex(): string {\r\n        // TODO: display with square root !\r\n        let L: string = '',\r\n            letters = Object.keys(this._literal).sort()\r\n\r\n        for (let letter of letters) {\r\n            if (this._literal[letter].isNotZero()) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter].isNotEqual(1)) {\r\n                    L += `^{${this._literal[letter].tfrac}}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.dfrac}`;\r\n            } else {\r\n                return '0';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.dfrac}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // -----------------------------------------\r\n    /**\r\n     * Parse a string to a monom. The string may include fraction.\r\n     * @param inputStr\r\n     */\r\n    parse = (inputStr: unknown): Monom => {\r\n\r\n        if (typeof inputStr === 'string') {\r\n            this._shutingYardToReducedMonom(inputStr)\r\n        } else if (typeof inputStr === 'number') {\r\n            this._coefficient = new Fraction(inputStr)\r\n            this._literal = {}\r\n        } else if (inputStr instanceof Fraction) {\r\n            this._coefficient = inputStr.clone()\r\n            this._literal = {}\r\n        } else if (inputStr instanceof Monom) {\r\n            this._coefficient = inputStr._coefficient.clone()\r\n            this._literal = this.copyLiterals(inputStr.literal)\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    static addToken = (stack: Monom[], element: Token): void => {\r\n\r\n        let q1: Monom, q2: Monom, m: Monom, letter: string, pow: Fraction\r\n\r\n        if (element.tokenType === ShutingyardType.COEFFICIENT) {\r\n            stack.push(new Monom(new Fraction(element.token)))\r\n\r\n        } else if (element.tokenType === ShutingyardType.VARIABLE) {\r\n            let M = new Monom().one()\r\n            M.setLetter(element.token, 1)\r\n            stack.push(M.clone())\r\n\r\n        } else if (element.tokenType === ShutingyardType.OPERATION) {\r\n            switch (element.token) {\r\n                case '-':\r\n                    // this should only happen for negative powers or for negative coefficient.\r\n                    q2 = (stack.pop()) || new Monom().zero()\r\n                    q1 = (stack.pop()) || new Monom().zero()\r\n\r\n                    stack.push(q1.subtract(q2))\r\n\r\n                    break;\r\n                case '*':\r\n                    // Get the last element in the stack\r\n                    q2 = (stack.pop()) || new Monom().one()\r\n                    q1 = (stack.pop()) || new Monom().one()\r\n\r\n                    stack.push(q1.multiply(q2))\r\n                    break\r\n                case '/':\r\n                    // Get the last element in the stack\r\n                    q2 = (stack.pop()) || new Monom().one()\r\n                    q1 = (stack.pop()) || new Monom().one()\r\n\r\n                    stack.push(q1.divide(q2))\r\n                    break\r\n                case '^':\r\n                    // get the two last elements in the stack\r\n                    pow = (stack.pop().coefficient) || new Fraction().one()\r\n                    m = (stack.pop()) || new Monom().one()\r\n\r\n                    letter = m.variables[0]\r\n\r\n                    if (letter !== undefined) {\r\n                        m.setLetter(letter, pow)\r\n                    }\r\n\r\n                    stack.push(m)\r\n                    // this.multiply(m.clone())\r\n                    break\r\n            }\r\n        }\r\n    }\r\n    private _shutingYardToReducedMonom = (inputStr: string): Monom => {\r\n        // Get the RPN array of the current expression\r\n        const SY: Shutingyard = new Shutingyard().parse(inputStr);\r\n        const rpn: { token: string, tokenType: string }[] = SY.rpn;\r\n\r\n        let stack: Monom[] = [], m, pow, letter, q1, q2\r\n\r\n        if (rpn.length === 0) {\r\n            this.zero()\r\n            return this\r\n        } else if (rpn.length === 1) {\r\n            const element = rpn[0]\r\n\r\n            this.one()\r\n            if (element.tokenType === 'coefficient') {\r\n                this.coefficient = new Fraction(element.token)\r\n            } else if (element.tokenType === 'variable') {\r\n                this.setLetter(element.token, 1)\r\n            }\r\n            return this\r\n        } else {\r\n            // Reset the monom\r\n            for (const element of rpn) {\r\n                Monom.addToken(stack, element)\r\n            }\r\n        }\r\n\r\n        this.one()\r\n        this.multiply(stack[0])\r\n        return this\r\n    }\r\n    /**\r\n     * Clone the current Monom.\r\n     */\r\n    clone = (): Monom => {\r\n        let F: Monom = new Monom();\r\n\r\n        F.coefficient = this._coefficient.clone();\r\n\r\n        // Copy the literal parts.\r\n        for (let k in this._literal) {\r\n            F.setLetter(k, this._literal[k].clone());\r\n        }\r\n        return F;\r\n    };\r\n\r\n    copyLiterals = (literal: literalType): literalType => {\r\n        let L: literalType = {}\r\n\r\n        for (let k in literal) {\r\n            L[k] = literal[k].clone()\r\n        }\r\n        return L\r\n    }\r\n\r\n    makeSame = (M: Monom): Monom => {\r\n        // Copy the literal parts.\r\n        for (let k in M._literal) {\r\n            this.setLetter(k, M._literal[k].clone());\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Create a zero value monom\r\n     */\r\n    zero = (): Monom => {\r\n        this._coefficient = new Fraction().zero();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Create a one value monom\r\n     */\r\n    one = (): Monom => {\r\n        this._coefficient = new Fraction().one();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Clean the monom by removing each letters with a power of zero.\r\n     */\r\n    clean = (): Monom => {\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter].isZero()) {\r\n                delete this._literal[letter];\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    reduce = (): Monom => {\r\n        this.clean()\r\n        this.coefficient.reduce()\r\n        return this\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Get the opposed\r\n     * Returns a monom.\r\n     */\r\n    opposed = (): Monom => {\r\n        this._coefficient.opposed();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Add all similar monoms. If they aren't similar, they are simply skipped.\r\n     * @param M (Monom[]) The monoms to add.\r\n     */\r\n    add = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                if (this.isZero()) {\r\n                    this.makeSame(m)\r\n                }\r\n                this._coefficient.add(m.coefficient);\r\n            } else {\r\n                console.log('Add: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Subtract multiple monoms\r\n     * @param M (Monom[]) The monoms to subtract\r\n     */\r\n    subtract = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                if (this.isZero()) {\r\n                    this.makeSame(m)\r\n                }\r\n                this._coefficient.add(m.clone().coefficient.opposed());\r\n            } else {\r\n                console.log('Subtract: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiple multiple monoms to the current monom\r\n     * @param M (Monom[]) The monoms to multiply to.\r\n     */\r\n    multiply = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            // Multiply the coefficient.\r\n            this._coefficient.multiply(m.coefficient);\r\n\r\n            // Multiply the literal parts.\r\n            for (let letter in m.literal) {\r\n                if (this._literal[letter] === undefined) {\r\n                    this._literal[letter] = m.literal[letter].clone()\r\n                } else {\r\n                    this._literal[letter].add(m.literal[letter])\r\n                }\r\n\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiplyByNumber = (F: Fraction | number): Monom => {\r\n        this._coefficient.multiply(F);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divide the current monoms by multiple monoms\r\n     * @param M (Monom[])\r\n     */\r\n    divide = (...M: Monom[]): Monom => {\r\n        // Depending on the given value, choose the current item\r\n        for (let v of M) {\r\n            // Divide the coefficient\r\n            this._coefficient.divide(v.coefficient);\r\n\r\n            // Subtract the power values\r\n            for (let letter in v.literal) {\r\n                this._literal[letter] = (this._literal[letter] === undefined) ? v.literal[letter].clone().opposed() : this._literal[letter].subtract(v.literal[letter])\r\n\r\n                // If the power of a particular setLetter is zero, delete it from the literal part..\r\n                if (this._literal[letter].isZero()) {\r\n                    delete this._literal[letter];\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the pow of a monom.\r\n     * @param nb (number) : Mathematical pow\r\n     */\r\n    pow = (nb: number|Fraction): Monom => {\r\n        this._coefficient.pow(nb);\r\n        for (let letter in this._literal) {\r\n            this._literal[letter].multiply(nb)\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the nth-root of the monom\r\n     * @param p\r\n     */\r\n    root = (p: number): Monom => {\r\n        // TODO: determiner the nth root of a monom\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Return the square root of a monom\r\n     */\r\n    sqrt = (): Monom => {\r\n        if (this.isSquare()) {\r\n            this._coefficient.sqrt();\r\n            for (let letter in this._literal) {\r\n                this._literal[letter].clone().divide(2)\r\n            }\r\n        }\r\n        return this.root(2);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    compare = (M: Monom, sign?: string): boolean => {\r\n        // TODO: Build the compare systems.\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // To be equal, they must be the isSame\r\n                if (!this.compare(M, 'same')) {\r\n                    return false;\r\n                }\r\n\r\n                // The literal parts are the isSame. The coefficient must be equal\r\n                return this._coefficient.isEqual(M.coefficient);\r\n            case 'same':\r\n                // Get the list of all variables from both monoms.\r\n                let M1: string[] = this.variables,\r\n                    M2: string[] = M.variables,\r\n                    K: string[] = M1.concat(M2.filter((item) => M1.indexOf(item) < 0));\r\n\r\n                if(M1.length===0 && M2.length===0){return true}\r\n                // To compare, both must be different than zero.\r\n                if (!this.isZero() && !M.isZero()) {\r\n                    for (let key of K) {\r\n                        // The setLetter is not available in one of the monom\r\n                        if (this._literal[key] === undefined || M.literal[key] === undefined) {\r\n                            return false;\r\n                        }\r\n                        // The setLetter does not have the isSame power in each monoms.\r\n                        if (!this._literal[key].isEqual(M.literal[key])) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // All are positive check - the monoms are the sames.\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is null\r\n     */\r\n    isZero(): boolean {\r\n        return this._coefficient.value === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is one\r\n     */\r\n    isOne(): boolean {\r\n        return this._coefficient.value === 1 && this.variables.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if two monoms are equals\r\n     * @param M\r\n     */\r\n    isEqual = (M: Monom): boolean => {\r\n        return this.compare(M, '=');\r\n    };\r\n\r\n    /**\r\n     * Determine if two monoms are similar\r\n     * @param M\r\n     */\r\n    isSameAs = (M: Monom): boolean => {\r\n        return this.compare(M, 'same');\r\n    };\r\n\r\n    isSquare = (): boolean => {\r\n        if (!this.coefficient.isSquare()) {\r\n            return false;\r\n        }\r\n        return this.isLiteralSquare();\r\n    }\r\n\r\n    isLiteralSquare = (): boolean => {\r\n        for (let letter in this.literal) {\r\n            // A literal square must have a natural power\r\n            if (this.literal[letter].isRational()) {\r\n                return false\r\n            }\r\n\r\n            // The natural power must be be even\r\n            if (this.literal[letter].isEven()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    hasFractionCoefficient = (): boolean => {\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter].isRational()) {\r\n                return true\r\n            }\r\n        }\r\n\r\n        return false\r\n    }\r\n    // ------------------------------------------\r\n    // Misc monoms functions\r\n    // -------------------------------------\r\n    /**\r\n     * Determine if a monom contains a setLetter in it's literal part\r\n     * @param letter\r\n     */\r\n    hasLetter = (letter?: string): boolean => {\r\n        // The letter was not found\r\n        if (this._literal[letter === undefined ? 'x' : letter] === undefined) {\r\n            return false\r\n        }\r\n\r\n        // The letter is found and is not zero !\r\n        return this._literal[letter === undefined ? 'x' : letter].isNotZero();\r\n    };\r\n\r\n    /**\r\n     * Set the power of a particular setLetter\r\n     * @param letter (string) Letter to change\r\n     * @param pow (number) Power of the setLetter (must be positive integer.\r\n     */\r\n    setLetter = (letter: string, pow: Fraction | number): void => {\r\n        if (pow instanceof Fraction) {\r\n            // Set the power of the letter to zero => remove it\r\n            if (this.hasLetter(letter) && pow.isZero()) {\r\n                delete this._literal[letter]\r\n            }\r\n\r\n            this._literal[letter] = pow.clone()\r\n        } else {\r\n            this.setLetter(letter, new Fraction(pow))\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the degree of a monom. If no setLetter is given, the result will be the global degree.\r\n     * @param letter (string) Letter to get to degree (power)\r\n     */\r\n    degree = (letter?: string): Fraction => {\r\n        if (this.variables.length === 0) {\r\n            return new Fraction().zero();\r\n        }\r\n        if (letter === undefined) {\r\n            // Not setLetter given -> we get the global monom degree (sum of all the letters).\r\n            return Object.values(this._literal).reduce((t, n) => t.clone().add(n));\r\n        } else {\r\n            // A setLetter is given -> get the corresponding power.\r\n            return this._literal[letter] === undefined ? new Fraction().zero() : this._literal[letter].clone();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Evaluate a monom. Each setLetter must be assigned to a Fraction.\r\n     * @param values    Dictionary of <setLetter: Fraction>\r\n     */\r\n    evaluate = (values: literalType | Fraction | number): Fraction => {\r\n        let r = this.coefficient.clone();\r\n\r\n        if (typeof values === 'number' || values instanceof Fraction) {\r\n            let tmpValues: literalType = {}\r\n            tmpValues[this.variables[0]] = new Fraction(values)\r\n            return this.evaluate(tmpValues);\r\n        }\r\n\r\n        if (typeof values === 'object') {\r\n            for (let L in this._literal) {\r\n                if (values[L] === undefined) {\r\n                    return new Fraction().zero();\r\n                }\r\n\r\n                let value = new Fraction(values[L])\r\n\r\n                r.multiply(value.pow(this._literal[L]))\r\n            }\r\n        }\r\n\r\n        return r;\r\n    };\r\n\r\n    /**\r\n     * Derivative the monom\r\n     * @param letter\r\n     */\r\n    derivative = (letter?: string): Monom => {\r\n        // No setLetter given - assume it's the setLetter 'x'\r\n        if (letter === undefined) {\r\n            letter = 'x';\r\n        }\r\n\r\n        if (this.hasLetter(letter)) {\r\n            let d = this._literal[letter].clone(),\r\n                dM = this.clone();\r\n\r\n            // Subtract one to the degree.\r\n            dM._literal[letter].subtract(1)\r\n\r\n            // Multiply the coefficient by the previous degree\r\n            dM._coefficient.multiply(new Fraction(d.clone()));\r\n            return dM;\r\n        } else {\r\n            return new Monom().zero();\r\n        }\r\n    };\r\n\r\n    primitive = (letter?: string): Monom => {\r\n        // TODO: derivative including the ln value => implies creating different monom system ?\r\n        if (letter === undefined) {\r\n            letter = 'x'\r\n        }\r\n\r\n        // Zero monom\r\n        let M = this.clone(), degree\r\n\r\n        if (M.hasLetter(letter)) {\r\n            degree = M.degree(letter).clone().add(1)\r\n            M.coefficient = M.coefficient.clone().divide(degree)\r\n            M.setLetter(letter, degree)\r\n        } else {\r\n            // There is no letter.\r\n\r\n            // The coefficient might be zero (=> x) or a number a (=> ax)\r\n            if (M.coefficient.isZero()) {\r\n                M.coefficient = new Fraction().one()\r\n            }\r\n            M.setLetter(letter, 1)\r\n        }\r\n\r\n        return M\r\n    }\r\n    // ----------------------------------------\r\n    // Static functions\r\n    // ----------------------------------------\r\n\r\n    /**\r\n     * Get the least common multiple of monoms\r\n     * @param monoms    Array of monoms\r\n     */\r\n    static lcm = (...monoms: Monom[]): Monom => {\r\n        // All the monoms must be with natural powers...\r\n        for (let m of monoms) {\r\n            if (m.hasFractionCoefficient()) {\r\n                return new Monom().zero()\r\n            }\r\n        }\r\n\r\n\r\n        let M = new Monom(),\r\n            coeffN: number[] = monoms.map(value => value.coefficient.numerator),\r\n            coeffD: number[] = monoms.map(value => value.coefficient.denominator),\r\n            n = Numeric.gcd(...coeffN),\r\n            d = Numeric.lcm(...coeffD);\r\n\r\n        // Get the coefficient.\r\n        M.coefficient = new Fraction(n, d).reduce();\r\n\r\n        // Set the literal parts - go through each monoms literal parts and get only the lowest degree of each letters.\r\n        for (let m of monoms) {\r\n            // Remove the inexistant letters from the resulting monom\r\n            for (let letter in M.literal) {\r\n                if (!(letter in m.literal)) {\r\n                    M.literal[letter].zero();\r\n                }\r\n            }\r\n            for (let letter in m.literal) {\r\n                if (M.literal[letter] === undefined && m.literal[letter].isStrictlyPositive()) {\r\n                    M.literal[letter] = m.literal[letter].clone();\r\n                } else {\r\n                    M.literal[letter] = new Fraction(Math.min(m.literal[letter].value, M.literal[letter].value))\r\n                }\r\n            }\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n    /**\r\n     * Multiply two monoms and return a NEW monom.\r\n     * @param monoms\r\n     */\r\n    static xmultiply = (...monoms: Monom[]): Monom => {\r\n        let M = new Monom().one();\r\n\r\n        for (let m of monoms) {\r\n            M.multiply(m);\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Determine if multiple monoms are similar\r\n     * @param M\r\n     */\r\n    areSameAs = (...M: Monom[]): boolean => {\r\n        let result: boolean = true;\r\n\r\n        // Check all monoms if they are the isSame as the \"this\" one.\r\n        for (let i = 0; i < M.length; i++) {\r\n            if (!this.isSameAs(M[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All check passed -> all the monoms are similar.\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Determine if multiple monoms are equals\r\n     * @param M\r\n     */\r\n    areEquals = (...M: Monom[]): boolean => {\r\n        // They are not similar.\r\n        if (!this.areSameAs(...M)) {\r\n            return false;\r\n        }\r\n\r\n        // Check all coefficient. They must be equals.\r\n        for (let m of M) {\r\n            if (!this._coefficient.isEqual(m.coefficient)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All checks passed.\r\n        return true;\r\n    };\r\n\r\n}\r\n","/**\r\n * Polynom module contains everything necessary to handle polynoms.*\r\n */\r\n\r\nimport {literalType, Monom} from './monom';\r\nimport {Shutingyard, ShutingyardType, Token} from '../shutingyard';\r\nimport {Numeric} from '../numeric';\r\nimport {Fraction} from \"../coefficients\";\r\nimport {log} from \"util\";\r\n\r\nexport type PolynomParsingType = string|Polynom|number|Fraction|Monom\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n * ```\r\n * let P = new Polynom('3x-4')\r\n * ```\r\n */\r\nexport class Polynom {\r\n    private _rawString: string;\r\n\r\n    /**\r\n     *\r\n     * @param {string} polynomString (optional) Default polynom to parse on class creation\r\n     * @param values\r\n     */\r\n    constructor(polynomString?: PolynomParsingType, ...values: unknown[]) {\r\n        this._monoms = [];\r\n        this._factors = [];\r\n        if (polynomString !== undefined) {\r\n            this.parse(polynomString, ...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    private _monoms: Monom[];\r\n\r\n    // ------------------------------------------\r\n    get monoms() {\r\n        return this._monoms;\r\n    }\r\n\r\n    set monoms(M: Monom[]) {\r\n        this._monoms = M;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n\r\n    private _factors: Polynom[];\r\n\r\n    get factors(): Polynom[] {\r\n        return this._factors;\r\n    }\r\n\r\n    set factors(value: Polynom[]) {\r\n        this._factors = value;\r\n    }\r\n\r\n    private _texString: string;\r\n\r\n    get texString(): string {\r\n        return this._texString;\r\n    }\r\n\r\n    get texFactors(): string {\r\n        this.factorize()\r\n\r\n        let tex = ''\r\n        for (let f of this.factors) {\r\n            if (f.monoms.length > 1) {\r\n                tex += `(${f.tex})`\r\n            } else {\r\n                tex = f.tex + tex;\r\n            }\r\n        }\r\n        return tex;\r\n    }\r\n\r\n    get length() {\r\n        // TODO: Must reduce the monoms list to remove the zero coefficient.\r\n        return this._monoms.length;\r\n    }\r\n\r\n    get display(): string {\r\n        return this.genDisplay();\r\n    }\r\n\r\n    get raw(): string {\r\n        return this._rawString\r\n    }\r\n\r\n    get tex(): string {\r\n        return this.genDisplay('tex');\r\n    }\r\n\r\n    get isMultiVariable(): boolean {\r\n        const B = false;\r\n        for (const m of this._monoms) {\r\n            if (m.variables.length > 1) {\r\n                return true;\r\n            }\r\n        }\r\n        return B;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            V = V.concat(m.variables);\r\n        }\r\n\r\n        // Remove duplicates.\r\n        V = [...new Set(V)];\r\n\r\n        return V;\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse a string to a polynom.\r\n     * @param inputStr\r\n     * @param values: as string, numbers or fractions\r\n     */\r\n    parse = (inputStr: PolynomParsingType, ...values: unknown[]): Polynom => {\r\n        // Reset the main variables.\r\n        this._monoms = []\r\n        this._factors = []\r\n\r\n        if(typeof inputStr === 'string') {\r\n            return this._parseString(inputStr, ...values)\r\n        }else if(typeof inputStr === 'number' || inputStr instanceof Fraction || inputStr instanceof Monom){\r\n            this._monoms.push(new Monom(inputStr))\r\n        }else if(inputStr instanceof Polynom){\r\n            for(const m of inputStr.monoms){\r\n                this._monoms.push(m.clone())\r\n            }\r\n        }\r\n\r\n        return this\r\n    };\r\n\r\n    private _parseString(inputStr: string, ...values:unknown[]): Polynom{\r\n        if (values === undefined || values.length === 0) {\r\n            inputStr = '' + inputStr;\r\n            this._rawString = inputStr;\r\n\r\n            // Parse the polynom using the shutting yard algorithm\r\n            if (inputStr !== '' && !isNaN(Number(inputStr))) {\r\n                this.empty();\r\n                // It's a simple number.\r\n                let m = new Monom(inputStr);\r\n                // m.coefficient = new Fraction(inputStr);\r\n                // m.literalStr = '';\r\n                this.add(m);\r\n                return this;\r\n            }\r\n\r\n            // Parse the string.\r\n            return this.shutingYardToReducedPolynom(inputStr);\r\n        } else if (/^[a-z]/.test(inputStr)) {\r\n            // We assume the inputStr contains only letters.\r\n            this.empty();\r\n\r\n            let fractions = values.map(x => new Fraction(x));\r\n            // Multiple setLetter version\r\n            if (inputStr.length > 1) {\r\n                // TODO: check that the number of values given correspond to the letters (+1 eventually)\r\n                let letters = inputStr.split(''),\r\n                    i = 0;\r\n                for (let F of fractions) {\r\n                    let m = new Monom();\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = letters[i] || '';\r\n                    this.add(m);\r\n                    i++;\r\n                }\r\n            }\r\n            // Single setLetter version\r\n            else {\r\n                let n = fractions.length - 1;\r\n                for (let F of fractions) {\r\n                    let m = new Monom()\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = `${inputStr}^${n}`\r\n                    this.add(m);\r\n                    n--;\r\n                }\r\n            }\r\n            return this;\r\n        } else {\r\n            return this.zero();\r\n        }\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n\r\n    /**\r\n     * Clone the polynom\r\n     */\r\n    clone = (): Polynom => {\r\n        const P = new Polynom();\r\n        const M: Monom[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            M.push(m.clone());\r\n        }\r\n\r\n        P.monoms = M;\r\n        return P;\r\n    };\r\n\r\n    /**\r\n     * Set the polynom to zero.\r\n     * @returns {this}\r\n     */\r\n    zero = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().zero());\r\n        this._rawString = '0';\r\n        return this;\r\n    };\r\n\r\n    one = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().one());\r\n        this._rawString = '1';\r\n        return this;\r\n    }\r\n\r\n    empty = (): Polynom => {\r\n        this._monoms = [];\r\n        this._rawString = '';\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    opposed = (): Polynom => {\r\n        this._monoms = this._monoms.map(m => m.opposed());\r\n        return this;\r\n    };\r\n\r\n    add = (...values: unknown[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value instanceof Polynom) {\r\n                this._monoms = this._monoms.concat(value.monoms);\r\n            } else if (value instanceof Monom) {\r\n                this._monoms.push(value.clone());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()));\r\n            } else {\r\n                this._monoms.push(new Monom(value));\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    // // -----------------------------------------------\r\n    // // Polynom generators and randomizers\r\n    // // -----------------------------------------------\r\n    // random(config?: randomPolynomConfig) {\r\n    //     return Random.polynom(config);\r\n    // }\r\n    //\r\n    // private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n    //     degree: 2,\r\n    //     unit: true,\r\n    //     fractions: false,\r\n    //     factorable: false,\r\n    //     letters: 'x',\r\n    //     allowNullMonom: false,\r\n    //     numberOfMonoms: false\r\n    // };\r\n    // get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n    //     return this._randomizeDefaults;\r\n    // }\r\n    //\r\n    // set randomizeDefaults(value) {\r\n    //     this._randomizeDefaults = value;\r\n    // }\r\n    //\r\n    // randomize = (config: { [key: string]: number | string | boolean }): Polynom => {\r\n    //     let P = new Polynom();\r\n    //\r\n    //     // Check the config file and use the default values.\r\n    //     if (config === undefined) {\r\n    //         config = {};\r\n    //     }\r\n    //     for (let k in this._randomizeDefaults) {\r\n    //         if (config[k] === undefined) {\r\n    //             config[k] = this._randomizeDefaults[k];\r\n    //         }\r\n    //     }\r\n    //\r\n    //     // TODO: Build a more robust randomize function\r\n    //     return P;\r\n    // }\r\n    //\r\n    // rndFactorable = (degree: number = 2, unit: boolean | number = false, letters: string = 'x'): Polynom => {\r\n    //     // TODO: Make rndFactorable polynom generator more user friendly\r\n    //     this._factors = [];\r\n    //     for (let i = 0; i < degree; i++) {\r\n    //         let factorUnit = unit === true || i >= unit,\r\n    //             p = Random.polynom({\r\n    //                 degree: 1,\r\n    //                 unit: factorUnit,\r\n    //                 fraction: false,\r\n    //                 letters\r\n    //             });\r\n    //         this._factors.push(p);\r\n    //     }\r\n    //\r\n    //     this.empty().monoms = this._factors[0].monoms;\r\n    //     for (let i = 1; i < this._factors.length; i++) {\r\n    //         this.multiply(this._factors[i]);\r\n    //     }\r\n    //     return this;\r\n    // };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n\r\n    subtract = (...values: unknown[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value instanceof Polynom) {\r\n                this._monoms = this._monoms.concat(value.clone().opposed().monoms);\r\n            } else if (value instanceof Monom) {\r\n                this._monoms.push(value.clone().opposed());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()).opposed());\r\n            } else {\r\n                this._monoms.push(new Monom(value).opposed());\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    multiply = (value: unknown): Polynom => {\r\n        if (value instanceof Polynom) {\r\n            return this.multiplyByPolynom(value);\r\n        } else if (value instanceof Fraction) {\r\n            return this.multiplyByFraction(value);\r\n        } else if (value instanceof Monom) {\r\n            return this.multiplyByMonom(value);\r\n        } else if (Number.isSafeInteger(value) && typeof value === 'number') {\r\n            return this.multiplyByInteger(value);\r\n        }\r\n\r\n        // Something went wrong...\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divide the current polynom by another polynom.\r\n     * @param P\r\n     * returns {quotient: Polynom, reminder: Polynom}\r\n     */\r\n    euclidian = (P: Polynom): { quotient: Polynom, reminder: Polynom } => {\r\n        const letter: string = P.variables[0];\r\n        const quotient: Polynom = new Polynom().zero();\r\n        const reminder: Polynom = this.clone().reorder(letter);\r\n\r\n        // There is no variable !\r\n        if (P.variables.length === 0) {\r\n            return {quotient, reminder}\r\n        }\r\n\r\n        // Get at least a letter\r\n\r\n        const maxMP: Monom = P.monomByDegree(undefined, letter);\r\n        const degreeP: Fraction = P.degree(letter);\r\n\r\n        let newM: Monom;\r\n\r\n        // Make the euclidian division of the two polynoms.\r\n        let MaxIteration = this.degree(letter).clone().multiply(2);\r\n        while (reminder.degree(letter).geq(degreeP) && MaxIteration.isPositive()) {\r\n            MaxIteration.subtract(1)\r\n\r\n            // Get the greatest monom divided by the max monom of the divider\r\n            newM = reminder.monomByDegree(undefined, letter).clone().divide(maxMP);\r\n\r\n            if (newM.isZero()) {\r\n                break;\r\n            }\r\n\r\n            // Get the new quotient and reminder.\r\n            quotient.add(newM);\r\n            reminder.subtract(P.clone().multiply(newM));\r\n        }\r\n\r\n        quotient.reduce()\r\n        reminder.reduce()\r\n        return {quotient, reminder};\r\n    };\r\n\r\n    divide = (value: unknown): Polynom => {\r\n        if (value instanceof Fraction) {\r\n            return this.divideByFraction(value);\r\n        } else if (typeof value === 'number' && Number.isSafeInteger(value)) {\r\n            return this.divideByInteger(value);\r\n        }\r\n\r\n    }\r\n\r\n    pow = (nb: number): Polynom => {\r\n        if (!Number.isSafeInteger(nb)) {\r\n            return this.zero();\r\n        }\r\n        if (nb < 0) {\r\n            return this.zero();\r\n        }\r\n        if (nb === 0) {\r\n            return new Polynom();\r\n        }\r\n\r\n        const P = this.clone();\r\n        for (let i = 1; i < nb; i++) {\r\n            this.multiply(P);\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param P\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (P: Polynom, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '='\r\n        }\r\n\r\n        // Create clone version to reduce them without altering the original polynoms.\r\n        const cP1 = this.clone().reduce().reorder();\r\n        const cP2 = P.clone().reduce().reorder();\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree().isNotEqual(cP2.degree())) {\r\n                    return false;\r\n                }\r\n\r\n                // Check if the coefficients are the isSame.\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isEqual(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            case 'same':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree() !== cP2.degree()) {\r\n                    return false;\r\n                }\r\n\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isSameAs(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    isZero(): boolean {\r\n        return (this._monoms.length === 1 && this._monoms[0].coefficient.isZero()) || this._monoms.length === 0;\r\n    }\r\n\r\n    isOne(): boolean {\r\n        return this._monoms.length === 1 && this._monoms[0].coefficient.isOne();\r\n    }\r\n\r\n    isEqual = (P: Polynom): boolean => {\r\n        return this.compare(P, '=');\r\n    };\r\n\r\n    isSameAs = (P: Polynom): boolean => {\r\n        return this.compare(P, 'same');\r\n    };\r\n\r\n    isOpposedAt = (P: Polynom): boolean => {\r\n        return this.compare(P.clone().opposed(), '=');\r\n    };\r\n\r\n    isFactorized = (polynomString: string): boolean => {\r\n        let P;\r\n\r\n        // Check if polynom is complete...\r\n        if (polynomString.match(/\\(/g).length !== polynomString.match(/\\)/g).length) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check if the provided (string) version is fully factorized.\r\n        // Run a regex on the string.\r\n        let polynomStringNormalized = polynomString.replaceAll('*', ''),\r\n            polynomStringReduced = '' + polynomStringNormalized,\r\n            factors: string[] = [];\r\n\r\n        for (let x of polynomStringNormalized.matchAll(/\\(([a-z0-9+\\-]+)\\)(\\^[0-9]*)?/g)) {\r\n            if (x[2] !== undefined) {\r\n                for (let i = 0; i < +x[2].substr(1); i++) {\r\n                    factors.push(x[1])\r\n                }\r\n            } else {\r\n                factors.push(x[1]);\r\n            }\r\n            polynomStringReduced = polynomStringReduced.replaceAll(x[0], '');\r\n        }\r\n        if (polynomStringReduced !== '') {\r\n            factors.push(polynomStringReduced);\r\n        }\r\n        let polyFactors = factors.map(x => new Polynom(x));\r\n\r\n        // Factorize the current polynom.\r\n        this.factorize();\r\n\r\n        // Compare the given factors with the generated factors\r\n        let sign = 1;\r\n        for (let f of this.factors) {\r\n            for (let i = 0; i < polyFactors.length; i++) {\r\n                if (f.isEqual(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    break;\r\n                } else if (f.isOpposedAt(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    sign = -sign;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // The polyfactors must be empty and the cumulative opposite factors must be 1.\r\n        return (polyFactors.length === 0 && sign === 1);\r\n    }\r\n\r\n    isDeveloped = (polynomString: string): Boolean => {\r\n        let P: Polynom;\r\n\r\n        // There is at least one parenthese - it is not developed.\r\n        if (polynomString.match(/\\(/g).length + polynomString.match(/\\)/g).length) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            // Build the polynom\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check that everything is completely developed. Actually, there are no parentheses... so it is fully developed\r\n\r\n        // maybe it wasn't reduced and not ordered...\r\n        // compare polynom string.\r\n\r\n        // normalize the string\r\n        let polynomStringNormalized = polynomString.replaceAll('[*\\s]', '')\r\n\r\n        // Determine if it's the exact same string.\r\n        // TODO: Maybe it's enough to just make this test !\r\n        return polynomStringNormalized === P.reduce().reorder().display\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n\r\n    // -------------------------------------\r\n    reduce = (): Polynom => {\r\n        for (let i = 0; i < this._monoms.length; i++) {\r\n            for (let j = i + 1; j < this._monoms.length; j++) {\r\n                if (this._monoms[i].isSameAs(this.monoms[j])) {\r\n                    this._monoms[i].add(this.monoms[j]);\r\n                    this._monoms.splice(j, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Remove all null monoms\r\n        this._monoms = this._monoms.filter((m) => {\r\n            return m.coefficient.value !== 0\r\n        });\r\n\r\n        // Reduce all monoms coefficient.\r\n        for (const m of this._monoms) {\r\n            m.coefficient.reduce();\r\n        }\r\n\r\n        if (this.length === 0) {\r\n            return new Polynom().zero();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    reorder = (letter: string = 'x'): Polynom => {\r\n        // TODO: Must handle multiple setLetter reorder system\r\n        this._monoms.sort(function (a, b) {\r\n            return b.degree(letter).clone().subtract(a.degree(letter)).value\r\n        });\r\n        return this.reduce();\r\n    };\r\n\r\n    degree = (letter?: string): Fraction => {\r\n        let d: Fraction = new Fraction().zero();\r\n        for (const m of this._monoms) {\r\n            d = Fraction.max(m.degree(letter).value, d);\r\n        }\r\n        return d;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        let L: string[] = [], S = new Set();\r\n\r\n        for (let m of this._monoms) {\r\n            S = new Set([...S, ...m.variables]);\r\n        }\r\n\r\n        // @ts-ignore\r\n        return [...S];\r\n    }\r\n\r\n    /**\r\n     * Replace a variable (letter) by a polynom.\r\n     * @param letter\r\n     * @param P\r\n     */\r\n    replaceBy = (letter: string, P: Polynom): Polynom => {\r\n        let pow: Fraction;\r\n        const resultPolynom: Polynom = new Polynom().zero();\r\n\r\n        for (const m of this.monoms) {\r\n            if (m.literal[letter] === undefined || m.literal[letter].isZero()) {\r\n                resultPolynom.add(m.clone());\r\n            } else {\r\n                // We have found a setLetter.\r\n                // Get the power and reset it.\r\n                pow = m.literal[letter].clone();\r\n                delete m.literal[letter];\r\n\r\n                // TODO: replaceBy works only with positive and natural pow\r\n                resultPolynom.add(P.clone().pow(Math.abs(pow.numerator)).multiply(m));\r\n            }\r\n        }\r\n\r\n        this._monoms = resultPolynom.reduce().reorder().monoms;\r\n        return this;\r\n    };\r\n\r\n    // Evaluate a polynom.\r\n    evaluate = (values: literalType | Fraction | number): Fraction => {\r\n        const r = new Fraction().zero();\r\n\r\n        this._monoms.forEach(monom => {\r\n            //console.log('Evaluate polynom: ', monom.display, values, monom.evaluate(values).display);\r\n            r.add(monom.evaluate(values));\r\n        });\r\n\r\n        return r;\r\n    };\r\n\r\n    derivative = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.derivative(letter));\r\n        }\r\n        return dP;\r\n\r\n    }\r\n\r\n    primitive = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.primitive(letter))\r\n        }\r\n        return dP\r\n    }\r\n    // ------------------------------------------\r\n    // Misc polynoms functions\r\n\r\n    integrate = (a: Fraction | number, b: Fraction | number, letter?: string): Fraction => {\r\n        const primitive = this.primitive(letter)\r\n\r\n        if (letter === undefined) {\r\n            letter = 'x'\r\n        }\r\n\r\n        let valuesA: literalType = {},\r\n            valuesB: literalType = {}\r\n        valuesA[letter] = new Fraction(a);\r\n        valuesB[letter] = new Fraction(b);\r\n\r\n        return primitive.evaluate(valuesB).subtract(primitive.evaluate(valuesA))\r\n    }\r\n\r\n    // -------------------------------------\r\n    /**\r\n     * Factorize a polynom and store the best results in factors.\r\n     * @param maxValue Defines the greatest value to search to (default is 20).\r\n     */\r\n    factorize = (letter?: string): Polynom[] => {\r\n        let factors: Polynom[] = [];\r\n\r\n        // Extract the common monom\r\n        let P = this.clone().reorder(),\r\n            M = P.commonMonom(),\r\n            tempPolynom: Polynom\r\n        // It has a common monom.\r\n        if (!M.isOne()) {\r\n            tempPolynom = new Polynom()\r\n            tempPolynom.monoms = [M]\r\n            factors = [tempPolynom.clone()]\r\n            P = P.euclidian(tempPolynom).quotient;\r\n        }\r\n\r\n        let securityLoop = P.degree().clone().multiply(2).value\r\n        // securityLoop = 0\r\n        while (securityLoop >= 0) {\r\n            securityLoop--\r\n\r\n\r\n            if (P.monoms.length < 2) {\r\n                if (!P.isOne()) {\r\n                    factors.push(P.clone());\r\n                }\r\n                break;\r\n            } else {\r\n                // Get the first and last monom.\r\n                let m1 = P.monoms[0].dividers,\r\n                    m2 = P.monoms[P.monoms.length - 1].dividers\r\n\r\n                // console.log('CURRENT VALUE')\r\n                // console.log(P.tex)\r\n                // console.log('---------------------')\r\n                for (let m1d of m1) {\r\n                    for (let m2d of m2) {\r\n                        // if(m1d.degree()===m2d.degree()){continue}\r\n                        let dividerPolynom = new Polynom(),\r\n                            result\r\n                        dividerPolynom.monoms = [m1d.clone(), m2d.clone()]\r\n                        result = P.euclidian(dividerPolynom)\r\n\r\n                        // console.log(dividerPolynom.tex, '=>', result.reminder.tex, '|||||', result.quotient.tex)\r\n                        if (result.reminder.isZero()) {\r\n                            P = result.quotient.clone();\r\n                            factors.push(dividerPolynom)\r\n                            continue;\r\n                        }\r\n\r\n                        dividerPolynom.monoms = [m1d.clone(), m2d.clone().opposed()]\r\n                        result = P.euclidian(dividerPolynom)\r\n                        if (result.reminder.isZero()) {\r\n                            P = result.quotient.clone();\r\n                            factors.push(dividerPolynom)\r\n                        }\r\n                        // console.log(dividerPolynom.tex, '=>', result.reminder.tex)\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        this.factors = factors\r\n        return factors;\r\n    }\r\n\r\n    // TODO: get zeroes for more than first degree and for more than natural degrees\r\n    getZeroes = (): (Fraction | boolean)[] => {\r\n        const Z: Fraction[] = [];\r\n\r\n        switch (this.degree().value) {\r\n            case 0:\r\n                if (this._monoms[0].coefficient.value === 0) {\r\n                    return [true];\r\n                } else {\r\n                    return [false];\r\n                }\r\n            case 1:\r\n                // There is only one monoms,\r\n                if (this._monoms.length === 1) {\r\n                    return [new Fraction().zero()];\r\n                } else {\r\n                    const P = this.clone().reduce().reorder();\r\n                    return [P.monoms[1].coefficient.opposed().divide(P.monoms[0].coefficient)];\r\n                }\r\n            // TODO: Determine the zeros of an equation of second degree.\r\n            //case 2:\r\n            default:\r\n                // Make sure the polynom is factorized.\r\n                if (this._factors.length === 0) {\r\n                    this.factorize()\r\n                }\r\n\r\n                let zeroes = [], zeroesAsTex = [];\r\n                for (let P of this._factors) {\r\n                    if (P.degree().greater(2)) {\r\n                        // TODO: Handle other polynom.\r\n\r\n                    } else if (P.degree().value === 2) {\r\n                        let A = P.monomByDegree(2).coefficient,\r\n                            B = P.monomByDegree(1).coefficient,\r\n                            C = P.monomByDegree(0).coefficient,\r\n                            D = B.clone().pow(2).subtract(A.clone().multiply(C).multiply(4));\r\n\r\n                        if (D.value > 0) {\r\n                            /*console.log('Two zeroes for ', P.tex); */\r\n                            let x1 = (-(B.value) + Math.sqrt(D.value)) / (2 * A.value),\r\n                                x2 = (-(B.value) - Math.sqrt(D.value)) / (2 * A.value);\r\n\r\n                            zeroes.push(new Fraction(x1.toFixed(3)).reduce());\r\n                            zeroes.push(new Fraction(x2.toFixed(3)).reduce());\r\n                        } else if (D.value === 0) {\r\n                            /*console.log('One zero for ', P.tex); */\r\n\r\n                        } else {\r\n                            console.log('No zero for ', P.tex);\r\n                        }\r\n                    } else {\r\n                        for (let z of P.getZeroes()) {\r\n                            // Check if the zero is already in the list.\r\n                            if (z === false || z === true) {\r\n                                continue;\r\n                            }\r\n                            if (zeroesAsTex.indexOf(z.frac) === -1) {\r\n                                zeroes.push(z);\r\n                                zeroesAsTex.push(z.frac);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return zeroes;\r\n        }\r\n        return Z;\r\n    };\r\n\r\n    // TODO: analyse the next functions to determine if they are useful or not...\r\n    monomByDegree = (degree?: Fraction | number, letter?: string): Monom => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomByDegree(this.degree(letter), letter);\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter).isEqual(degree)) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        // Nothing was found - return the null monom.\r\n        return new Monom().zero();\r\n    };\r\n\r\n    monomsByDegree = (degree?: number | Fraction, letter?: string): Monom[] => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomsByDegree(this.degree(letter));\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        let Ms: Monom[] = [];\r\n\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter) === degree) {\r\n                Ms.push(m.clone())\r\n            }\r\n        }\r\n\r\n        return Ms\r\n        // Nothing was found - retur\r\n    }\r\n\r\n    // Used in LinearSystem.tex\r\n    monomByLetter = (letter: string): Monom => {\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.hasLetter(letter)) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        return new Monom().zero();\r\n    };\r\n\r\n    // Next functions are used for for commonMonom, which is used in the factorize method.\r\n    getDenominators = (): number[] => {\r\n        const denominators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            denominators.push(m.coefficient.denominator);\r\n        }\r\n        return denominators;\r\n    };\r\n\r\n    getNumerators = (): number[] => {\r\n        const numerators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            numerators.push(m.coefficient.numerator);\r\n        }\r\n        return numerators;\r\n    };\r\n\r\n    lcmDenominator = (): number => {\r\n        return Numeric.lcm(...this.getDenominators());\r\n    };\r\n    // ------------------------------------------\r\n    // Polynoms factorization functions\r\n\r\n    gcdDenominator = (): number => {\r\n        return Numeric.gcd(...this.getDenominators());\r\n    };\r\n\r\n    lcmNumerator = (): number => {\r\n        return Numeric.lcm(...this.getNumerators());\r\n    };\r\n\r\n    gcdNumerator = (): number => {\r\n        return Numeric.gcd(...this.getNumerators());\r\n    };\r\n    // ------------------------------------------\r\n    // Polynoms helpers functions\r\n    // -------------------------------------\r\n\r\n    commonMonom = (): Monom => {\r\n        let M = new Monom().one(), numerator: number, denominator: number, degree = this.degree();\r\n\r\n        numerator = this.gcdNumerator();\r\n        denominator = this.gcdDenominator();\r\n\r\n        M.coefficient = new Fraction(numerator, denominator);\r\n        for (let L of this.variables) {\r\n            // Initialize the setLetter with the max degree\r\n            M.setLetter(L, degree);\r\n            for (let m of this._monoms) {\r\n                M.setLetter(L, Fraction.min(m.degree(L), M.degree(L)));\r\n                if (M.degree(L).isZero()) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return M;\r\n    }\r\n\r\n    private genDisplay = (output?: string, forceSign?: boolean, wrapParentheses?: boolean): string => {\r\n        let P: string = '';\r\n\r\n        for (const k of this._monoms) {\r\n            if (k.coefficient.value === 0) {\r\n                continue;\r\n            }\r\n\r\n            P += `${(k.coefficient.sign() === 1 && (P !== '' || forceSign === true)) ? '+' : ''}${(output === 'tex') ? k.tex : k.display}`;\r\n        }\r\n\r\n        if (wrapParentheses === true && this.length > 1) {\r\n            if (output === 'tex') {\r\n                P = `\\\\left( ${P} \\\\right)`;\r\n            } else {\r\n                P = `(${P})`;\r\n            }\r\n        }\r\n\r\n        if (P === '') {\r\n            P = '0';\r\n        }\r\n        return P;\r\n    };\r\n\r\n\r\n    static addToken = (stack: Polynom[], element: Token): void => {\r\n\r\n        switch(element.tokenType){\r\n            case ShutingyardType.COEFFICIENT:\r\n                stack.push(new Polynom( element.token ))\r\n                break\r\n\r\n            case ShutingyardType.VARIABLE:\r\n                stack.push(new Polynom().add(new Monom(element.token)))\r\n                break\r\n\r\n            case ShutingyardType.CONSTANT:\r\n                // TODO: add constant support to Polynom parsing.\r\n                console.log('Actually, not supported - will be added later !')\r\n                break\r\n\r\n            case ShutingyardType.OPERATION:\r\n                if(stack.length>=2){\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n\r\n                    if(element.token === '+'){\r\n                        stack.push(a.add(b))\r\n                    }else if(element.token === '-'){\r\n                        stack.push(a.subtract(b))\r\n                    }else if(element.token === '*'){\r\n                        stack.push(a.multiply(b))\r\n                    }else if(element.token === '/'){\r\n                        if(b.degree().isStrictlyPositive()){\r\n                            console.log('divide by a polynom -> should create a rational polynom !')\r\n                        }else {\r\n                            stack.push(a.divide(b.monoms[0].coefficient))\r\n\r\n                        }\r\n                    }else if(element.token === '^'){\r\n                        if(b.degree().isStrictlyPositive()) {\r\n                            console.error('Cannot elevate a polynom with another polynom !')\r\n                        }else {\r\n                            if(b.monoms[0].coefficient.isRelative()) {\r\n                                // Integer power\r\n                                stack.push(a.pow(b.monoms[0].coefficient.value))\r\n                            }else{\r\n                                // Only allow power if the previous polynom is only a monom, without coefficient.\r\n                                if(a.monoms.length===1 && a.monoms[0].coefficient.isOne()){\r\n                                    for (let letter in a.monoms[0].literal) {\r\n                                        a.monoms[0].literal[letter].multiply(b.monoms[0].coefficient)\r\n                                    }\r\n                                    stack.push(a)\r\n                                }else {\r\n                                    console.error('Cannot have power with fraction')\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }else{\r\n                    console.log('Stack size: ', stack.length)\r\n                    if(element.token === '-'){\r\n                        stack.push(stack.pop().opposed())\r\n                    }else{\r\n                        console.log('While parsing, cannot apply ', element.token, 'to', stack[0].tex)\r\n                    }\r\n                }\r\n                break\r\n\r\n            case ShutingyardType.MONOM:\r\n                // Should never appear.\r\n                console.error('The monom token should not appear here')\r\n                break;\r\n\r\n            case ShutingyardType.FUNCTION:\r\n                // Should never appear.\r\n                console.log('The function token should not appear here - might be introduced later.')\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * Main parse using a shutting yard class\r\n     * @param inputStr\r\n     */\r\n    private shutingYardToReducedPolynom = (inputStr: string): Polynom => {\r\n        // Get the RPN array of the current expression\r\n        const SY: Shutingyard = new Shutingyard().parse(inputStr);\r\n        const rpn: { token: string, tokenType: string }[] = SY.rpn;\r\n\r\n        // New version for reducing shuting yard.\r\n        this.zero()\r\n\r\n        let stack: Polynom[] = [],\r\n            monom: Monom = new Monom()\r\n\r\n        // Loop through the\r\n        for (const element of rpn) {\r\n            Polynom.addToken(stack, element);\r\n        }\r\n\r\n        if (stack.length === 1) {\r\n            this.add(stack[0])\r\n        }\r\n\r\n        return this\r\n        /**\r\n         let m1: Polynom;\r\n         let m2: Polynom;\r\n\r\n         let stack: Polynom[] = [],\r\n         previousToken: string = null,\r\n         tempPolynom\r\n\r\n         for (const element of rpn) {\r\n            if (element.tokenType === 'coefficient' || element.tokenType === 'variable') {\r\n                tempPolynom = new Polynom().zero();\r\n                tempPolynom.monoms = [new Monom(element.token)]\r\n                stack.push(tempPolynom.clone())\r\n            } else if (element.tokenType === 'operation') {\r\n                m2 = (stack.pop()) || new Polynom().zero();\r\n                m1 = (stack.pop()) || new Polynom().zero();\r\n                switch (element.token) {\r\n                    case '+':\r\n                        stack.push(m1.add(m2))\r\n                        break;\r\n                    case '-':\r\n                        stack.push(m1.subtract(m2))\r\n                        break;\r\n                    case '*':\r\n                        stack.push(m1.multiply(m2))\r\n                        break;\r\n                    case '^':\r\n                        stack.push(m1.pow(+previousToken))\r\n                }\r\n            }\r\n            previousToken = element.token;\r\n        }\r\n\r\n         this._monoms = stack[0].monoms;\r\n         return this;*/\r\n    }\r\n\r\n    private multiplyByPolynom = (P: Polynom): Polynom => {\r\n        const M: Monom[] = [];\r\n        for (const m1 of this._monoms) {\r\n            for (const m2 of P.monoms) {\r\n                M.push(Monom.xmultiply(m1, m2));\r\n            }\r\n        }\r\n\r\n        this._monoms = M;\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.multiply(F);\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByInteger = (nb: number): Polynom => {\r\n        return this.multiplyByFraction(new Fraction(nb));\r\n    };\r\n\r\n    private multiplyByMonom = (M: Monom): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.multiply(M)\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n    private divideByInteger = (nb: number): Polynom => {\r\n        const nbF = new Fraction(nb);\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(nbF);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    private divideByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(F);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    private _factorize2ndDegree = (letter: string): Polynom[] => {\r\n        let P1: Polynom, P2: Polynom,\r\n            a, b, c, delta, x1, x2, factor;\r\n\r\n        // One variable only\r\n        if (this.numberOfVars === 1) {\r\n            a = this.monomByDegree(2, letter).coefficient;\r\n            b = this.monomByDegree(1, letter).coefficient;\r\n            c = this.monomByDegree(0, letter).coefficient;\r\n            delta = b.clone().pow(2).subtract(a.clone().multiply(c).multiply(4));\r\n\r\n            if (delta.isZero()) {\r\n                x1 = b.clone().opposed().divide(a.clone().multiply(2))\r\n                P1 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                P2 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                factor = a.divide(x1.denominator).divide(x1.denominator);\r\n\r\n                if (!factor.isOne()) {\r\n                    // TODO: Update new Polynom to accept anything...\r\n                    return [new Polynom(factor.display), P1, P2]\r\n                } else {\r\n                    return [P1, P2]\r\n                }\r\n            } else if (delta.isPositive() && delta.isSquare()) {\r\n                x1 = b.clone().opposed()\r\n                    .add(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n                x2 = b.clone().opposed()\r\n                    .subtract(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n\r\n                // (2x+5)(3x-2)\r\n                // 6x^2+11x-10\r\n                // a = 6, b = 11, c = -10\r\n                // delta = 121-4*6*(-10) = 361= 19^2\r\n                // x1 = (-11 + 19)  / 12 = 8/12 = 2/3\r\n                // x2 = (-11 - 19)  / 12 = -30/12 = -5/2\r\n                factor = a.divide(x1.denominator).divide(x2.denominator);\r\n                if (factor.isOne()) {\r\n                    return [\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n                } else {\r\n                    return [\r\n                        new Polynom(factor.display),\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n\r\n                }\r\n            } else {\r\n                // No solution possible - return the complete value.\r\n                return [this.clone()]\r\n            }\r\n        } else {\r\n            // If multiple variables, only handle perfect squares...\r\n            a = this.monomByDegree(2, letter);\r\n            b = this.monomByDegree(1, letter);\r\n            c = this.monomByDegree(0, letter);\r\n\r\n\r\n            if (a.isLiteralSquare() && c.isLiteralSquare()) {\r\n                // Check the middle item is same as...\r\n                if (b.clone().pow(2).isSameAs(a.clone().multiply(c))) {\r\n                    // Determine if the coefficient values matches.\r\n\r\n                    // Search 4 values (r, s, t, u) that matches:\r\n                    // (r X + s Y)(t X + u Y) = rt X^2 + (ru + st) XY + su Y^2\r\n\r\n                    let xPolynom = new Polynom('x', a.coefficient, b.coefficient, c.coefficient);\r\n                    let xFactors = xPolynom._factorize2ndDegree('x');\r\n\r\n                    let factors = [], xyzPolynom: Polynom;\r\n\r\n                    if (xFactors.length >= 2) {\r\n                        for (let p of xFactors) {\r\n                            if (p.degree().isZero()) {\r\n                                factors.push(p.clone())\r\n                            } else {\r\n                                xyzPolynom = p.clone();\r\n                                xyzPolynom.monoms[0].literal = a.literalSqrt\r\n                                xyzPolynom.monoms[1].literal = c.literalSqrt\r\n                                factors.push(xyzPolynom.clone())\r\n                            }\r\n                        }\r\n                        return factors\r\n                    }\r\n                }\r\n            }\r\n\r\n            return [this.clone()]\r\n            //\r\n            // console.log(a.tex, b.tex, c.tex)\r\n            // if (a.isSquare() && c.isSquare()) {\r\n            //     console.log('A C squares')\r\n            //     if (a.clone().sqrt().multiply(c.clone().sqrt()).multiplyByNumber(2).isSameAs(b)) {\r\n            //         console.log('HERE')\r\n            //         if (a.coefficient.sign() === b.coefficient.sign()) {\r\n            //             return []\r\n            //         }else{\r\n            //             return []\r\n            //         }\r\n            //     }\r\n            // } else if(a.isLiteralSquare() && c.isLiteralSquare()) {\r\n            //     console.log('A C litteral SQUARES')\r\n            //     // Check that the middle element is the product of a and c.\r\n            //\r\n            //     if(b.clone().pow(2).isSameAs(a.clone().multiply(c))){\r\n            //         console.log('SAME')\r\n            //\r\n            //     }else{\r\n            //         console.log('NOT SAME')\r\n            //     }\r\n            //\r\n            //     return [this.clone()]\r\n            // } else {\r\n            //     console.log('NOT SQUARES AT ALL !!!!')\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    private _factorizeByGroups = (): Polynom[] => {\r\n        // TODO: Factorize by groups.\r\n        return [];\r\n    }\r\n}\r\n","/**\r\n * Rational polynom module contains everything necessary to handle rational polynoms.\r\n * @module Polynom\r\n */\r\n\r\nimport {Polynom} from \"./polynom\";\r\nimport {Fraction} from \"../coefficients\";\r\n\r\n/**\r\n * Rational class can handle rational polynoms\r\n */\r\n    export class Rational {\r\n        private _rawString: string;\r\n        private _numerator: Polynom;\r\n        private _denominator: Polynom;\r\n\r\n        /**\r\n         *\r\n         * @param numerator\r\n         * @param denominator\r\n         */\r\n        constructor(numerator?: Polynom, denominator?: Polynom) {\r\n            this._numerator = numerator ? numerator.clone() : new Polynom();\r\n            this._denominator = denominator ? denominator.clone() : new Polynom();\r\n        }\r\n\r\n        clone = (): Rational => {\r\n            this._numerator = this._numerator.clone()\r\n            this._denominator = this._denominator.clone()\r\n\r\n            return this;\r\n        }\r\n\r\n        get tex(): string {\r\n            return `\\\\dfrac{ ${this._numerator.tex} }{ ${this._denominator.tex} }`;\r\n        }\r\n\r\n        get texFactors(): string {\r\n            this._numerator.factorize()\r\n            this._denominator.factorize()\r\n\r\n            return `\\\\dfrac{ ${this._numerator.texFactors} }{ ${this._denominator.texFactors} }`\r\n        }\r\n\r\n        get numerator(): Polynom {\r\n            return this._numerator\r\n        }\r\n\r\n        get denominator(): Polynom {\r\n            return this._denominator\r\n        }\r\n\r\n        domain = (): string => {\r\n            let zeroes = this._denominator.getZeroes();\r\n            if (zeroes.length === 0 || zeroes[0] === false) {\r\n                return '\\\\mathbb{R}'\r\n            } else if (zeroes[0] === true) {\r\n                return '\\\\varnothing'\r\n            } else {\r\n                return '\\\\mathbb{R}\\\\setminus\\\\left{' +\r\n                    zeroes.map(x => {\r\n                        return (typeof x === 'boolean') ? '' : x.frac\r\n                    })\r\n                        .join(';') + '\\\\right}'\r\n            }\r\n        }\r\n\r\n        amplify = (P: Polynom): Rational => {\r\n            this._numerator.multiply(P);\r\n            this._denominator.multiply(P);\r\n\r\n            return this;\r\n        }\r\n\r\n        simplify = (P: Polynom): Rational => {\r\n            let NumeratorEuclidien = this._numerator.euclidian(P);\r\n            if (!NumeratorEuclidien.reminder.isZero()) {\r\n                return this;\r\n            }\r\n\r\n            let DenominatorEuclidien = this._denominator.euclidian(P);\r\n            if (!DenominatorEuclidien.reminder.isZero()) {\r\n                return this;\r\n            }\r\n\r\n            this._numerator = NumeratorEuclidien.quotient;\r\n            this._denominator = DenominatorEuclidien.quotient;\r\n            return this;\r\n        }\r\n\r\n        reduce = (): Rational => {\r\n            console.log(this._numerator.tex)\r\n            this._numerator.factorize();\r\n            console.log(this._numerator.factors.map(x => x.tex))\r\n            for (let f of this._numerator.factors) {\r\n                this.simplify(f);\r\n            }\r\n\r\n            return this;\r\n        }\r\n\r\n        opposed = (): Rational => {\r\n            this._numerator.opposed();\r\n            return this;\r\n        }\r\n        add = (R: Rational): Rational => {\r\n            // 1. Make sure both rational are at the same denominator\r\n            // 2. Add the numerators.\r\n            // 3. Simplify\r\n\r\n            // Store the adding denominator\r\n            let denominator = this._denominator.clone()\r\n\r\n            // Amplif the main rational polynom by the adding denominator\r\n            this.amplify(R._denominator)\r\n\r\n            // Add to the numerator the adding value...\r\n            this._numerator.add(R._numerator.clone().multiply(denominator));\r\n\r\n            return this;\r\n        }\r\n\r\n        subtract = (R: Rational): Rational => {\r\n            return this.add(R.clone().opposed())\r\n        }\r\n\r\n        limits = (value: Fraction | number, letter?: string): Fraction | number => {\r\n            if (value === Infinity || value === -Infinity) {\r\n                let N = this._numerator.monomByDegree(this._numerator.degree(letter), letter),\r\n                    D = this._denominator.monomByDegree(this._denominator.degree(letter), letter)\r\n\r\n                N.divide(D)\r\n\r\n                if (N.degree(letter).isStrictlyPositive()) {\r\n                    return N.coefficient.sign() * (Math.pow((value > 0 ? 1 : -1), N.degree(letter).value % 2)) === 1 ? Infinity : -Infinity\r\n                }\r\n                if (N.degree(letter).isZero()) {\r\n                    return N.coefficient\r\n                }\r\n                if (N.degree(letter).isStrictlyPositive()) {\r\n                    return N.coefficient.sign() * (Math.pow(-1, N.degree(letter).value % 2)) === 1 ? 0 : -0\r\n                }\r\n            } else {\r\n                return this._numerator.evaluate({letter: new Fraction(value)}).divide(this._denominator.evaluate({letter: new Fraction(value)}))\r\n            }\r\n        }\r\n    }\r\n","import {Numeric} from \"../numeric\";\r\n\r\nexport type FractionParsingType = number|string|Fraction\r\n/**\r\n * The fraction class make possible to handle\r\n * TODO: Write the documentation correctly.\r\n * \\\\(\\frac{a}{b}\\\\) or \\\\[\\frac{a}{b}\\\\]  values.\r\n */\r\nexport class Fraction {\r\n    private _numerator: number;\r\n    private _denominator: number;\r\n\r\n    constructor(value?: unknown, denominatorOrPeriodic?: number) {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n\r\n        if (value !== undefined) {\r\n            this.parse(value, denominatorOrPeriodic);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isFraction() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n\r\n    get numerator(): number {\r\n        return this._numerator;\r\n    }\r\n\r\n    set numerator(value: number) {\r\n        this._numerator = value;\r\n    }\r\n\r\n    get denominator(): number {\r\n        return this._denominator;\r\n    }\r\n\r\n    set denominator(value: number) {\r\n        this._denominator = value;\r\n    }\r\n\r\n    get value(): number {\r\n        return this._numerator / this._denominator;\r\n    }\r\n\r\n    // Display getter\r\n    get tex(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else if (this._numerator < 0) {\r\n            return `-\\\\frac{ ${-this._numerator} }{ ${this._denominator} }`;\r\n        } else {\r\n            return `\\\\frac{ ${this._numerator} }{ ${this._denominator} }`;\r\n        }\r\n    }\r\n\r\n    get display(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else {\r\n            return `${this._numerator}/${this._denominator}`;\r\n        }\r\n    }\r\n\r\n    // Helper function to display fractions\r\n    get frac(): string {\r\n        return this.tex;\r\n    }\r\n\r\n    get dfrac(): string {\r\n        return this.tex.replace('\\\\frac', '\\\\dfrac');\r\n    }\r\n    get tfrac(): string {\r\n        return this.tex.replace('\\\\frac', '\\\\tfrac')\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse the value to get the numerator and denominator\r\n     * @param value : number or string to parse to get the fraction\r\n     * @param denominatorOrPeriodic (optional|number) : length of the periodic part: 2.333333 => 1 or denominator value\r\n     */\r\n    parse = (value: unknown, denominatorOrPeriodic?: number): Fraction => {\r\n        let S: string[];\r\n\r\n        // A null value means a zero fraction.\r\n        if (value === null || value === \"\") {\r\n            this._numerator = 0;\r\n            this._denominator = 1;\r\n            return this;\r\n        }\r\n\r\n        switch (typeof value) {\r\n            case \"string\":\r\n                // Split the sting value in two parts: Numerator/Denominator\r\n                S = value.split('/');\r\n\r\n                // Security checks\r\n                if (S.length > 2) throw \"Two many divide signs\";\r\n                if (S.map(x => x === '' || isNaN(Number(x))).includes(true)) throw \"Not a number\"\r\n\r\n\r\n                if (S.length === 1) {\r\n                    // No divide sign\r\n                    return this.parse(+S[0]);\r\n                } else if (S.length === 2) {\r\n                    // One divide signe\r\n                    // We check if the denominator is zero\r\n                    if (S[1] === '0') {\r\n                        this._numerator = NaN;\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._numerator = +S[0];\r\n                        this._denominator = +S[1];\r\n                    }\r\n                } else {\r\n                    // More than one divide sign ?\r\n                    this._numerator = NaN;\r\n                    this._denominator = 1;\r\n                }\r\n                break;\r\n            case \"number\":\r\n                if (Number.isSafeInteger(value)) {\r\n                    // The given value is an integer\r\n                    this._numerator = +value;\r\n\r\n                    if (denominatorOrPeriodic === undefined || !Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._denominator = +denominatorOrPeriodic;\r\n                    }\r\n                } else {\r\n                    // The given value is a float number\r\n\r\n                    // Get the number of decimals after the float sign\r\n                    let p: number = (value.toString()).split('.')[1].length;\r\n\r\n                    // Transform the float number in two integer\r\n                    if (denominatorOrPeriodic === undefined) {\r\n                        this._numerator = value * Math.pow(10, p);\r\n                        this._denominator = Math.pow(10, p);\r\n                    } else if (Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._numerator = value * Math.pow(10, p) - Math.floor(value * Math.pow(10, p - denominatorOrPeriodic));\r\n                        this.denominator = Math.pow(10, p) - Math.pow(10, p - denominatorOrPeriodic)\r\n                    }\r\n                    this.reduce()\r\n                }\r\n                break;\r\n            case \"object\":\r\n                if (value instanceof Fraction) {\r\n                    this._numerator = +value.numerator;\r\n                    this._denominator = +value.denominator;\r\n                }\r\n                break;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): Fraction => {\r\n        let F = new Fraction();\r\n        F.numerator = +this._numerator;\r\n        F.denominator = +this._denominator;\r\n        return F;\r\n    };\r\n\r\n    zero = (): Fraction => {\r\n        this._numerator = 0;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    one = (): Fraction => {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    infinite = (): Fraction => {\r\n        this._numerator = Infinity;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    invalid = (): Fraction => {\r\n        this._numerator = NaN;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Fraction => {\r\n        this._numerator = -this._numerator;\r\n        return this;\r\n    };\r\n\r\n    add = (F: Fraction | number): Fraction => {\r\n        if (F instanceof Fraction) {\r\n            let N: number = this._numerator,\r\n                D: number = this._denominator;\r\n\r\n            this._numerator = N * F.denominator + F.numerator * D;\r\n            this._denominator = D * F.denominator;\r\n        } else {\r\n            return this.add(new Fraction(F))\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (F: Fraction | number): Fraction => {\r\n        if (F instanceof Fraction) {\r\n            return this.add(F.clone().opposed());\r\n        } else {\r\n            return this.add(-F)\r\n        }\r\n    };\r\n\r\n    multiply = (F: Fraction | number): Fraction => {\r\n        // Parse the value.\r\n        // If it's a fraction, return a clone of it\r\n        // If it's an integer, return the fraction F/1\r\n        let Q = new Fraction(F);\r\n\r\n        this._numerator = this._numerator * Q.numerator;\r\n        this._denominator = this._denominator * Q.denominator;\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    divide = (F: Fraction | number): Fraction => {\r\n        let Q = new Fraction(F);\r\n\r\n        if (Q.numerator === 0) {\r\n            return new Fraction().infinite();\r\n        }\r\n\r\n        let N: number = +this._numerator,\r\n            D: number = +this._denominator;\r\n\r\n        this._numerator = N * Q.denominator;\r\n        this._denominator = D * Q.numerator;\r\n        return this.reduce();\r\n    };\r\n\r\n    invert = (): Fraction => {\r\n        let n = +this._numerator, d = +this._denominator;\r\n        this._numerator = d;\r\n        this._denominator = n;\r\n\r\n        return this;\r\n    }\r\n    pow = (p: number | Fraction): Fraction => {\r\n        // TODO: Fraction.pow with a value different than a safe integer !\r\n        if (p instanceof Fraction) {\r\n            return this.pow(p.value)\r\n        }\r\n\r\n        this.reduce();\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        // Check if numerator and denominator are roots of...\r\n        // othervise, convert to numeric.\r\n        let controlNumerator = Math.floor(Math.pow(this._numerator, Math.abs(p))),\r\n            controlDenominator = Math.floor(Math.pow(this._denominator, Math.abs(p)))\r\n\r\n        if(controlNumerator ** Math.abs(p) === this._numerator\r\n            &&\r\n            controlDenominator ** Math.abs(p) === this._denominator){\r\n\r\n            this._numerator = this._numerator ** Math.abs(p);\r\n            this._denominator = this._denominator ** Math.abs(p);\r\n        }else{\r\n            this._numerator = this._numerator ** Math.abs(p);\r\n            this._denominator = this._denominator ** Math.abs(p);\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    root = (p: number): Fraction => {\r\n        // TODO: nth - root of a fraction => this will return another type of coefficient.\r\n\r\n        // Check if they are perfect roots..\r\n        if (p === 0) {\r\n            return this;\r\n        }\r\n\r\n        // If negative, invert the fraction\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        let n = Math.pow(this._numerator, Math.abs(1 / p)),\r\n            d = Math.pow(this._denominator, Math.abs(1 / p));\r\n\r\n        this._numerator = Math.pow(this._numerator, Math.abs(1 / p));\r\n        this._denominator = Math.pow(this._denominator, Math.abs(1 / p));\r\n        return this;\r\n    }\r\n\r\n    sqrt = (): Fraction => {\r\n        return this.root(2);\r\n    }\r\n\r\n    abs = (): Fraction => {\r\n        this._numerator = Math.abs(this._numerator);\r\n        this._denominator = Math.abs(this._denominator);\r\n        return this;\r\n    };\r\n\r\n\r\n    static max = (...fractions: (Fraction | number)[]): Fraction => {\r\n        let M = new Fraction(fractions[0])\r\n\r\n        for (let m of fractions) {\r\n            let compare = new Fraction(m)\r\n            if (compare.greater(M)) {\r\n                M = compare.clone()\r\n            }\r\n        }\r\n\r\n        return M\r\n    }\r\n    static min = (...fractions: (Fraction | number)[]): Fraction => {\r\n        let M = new Fraction(fractions[0])\r\n\r\n        for (let m of fractions) {\r\n            let compare = new Fraction(m)\r\n            if (compare.lesser(M)) {\r\n                M = compare.clone()\r\n            }\r\n        }\r\n\r\n        return M\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations specific to fractions\r\n    // ------------------------------------------\r\n    reduce = (): Fraction => {\r\n        let g = Numeric.gcd(this._numerator, this._denominator);\r\n        this._numerator = this._numerator / g;\r\n        this._denominator = this._denominator / g;\r\n\r\n        if (this._denominator < 0) {\r\n            this._denominator = -this._denominator;\r\n            this._numerator = -this._numerator;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    amplify = (k: number): Fraction => {\r\n        if (Number.isSafeInteger(k)) {\r\n            this._numerator *= k;\r\n            this._denominator *= k;\r\n        }\r\n        return this;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param F (Coefficient) The coefficient to compare\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (F: unknown, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n        let compareFraction: Fraction\r\n        if (F instanceof Fraction) {\r\n            compareFraction = F.clone()\r\n        } else {\r\n            compareFraction = new Fraction(F)\r\n        }\r\n\r\n        switch (sign) {\r\n            case '>':\r\n                return this.value > compareFraction.value;\r\n            case \">=\" || \"=>\" || \"geq\":\r\n                return this.value >= compareFraction.value;\r\n            case \"<\":\r\n                return this.value < compareFraction.value;\r\n            case \"<=\" || \"=>\" || \"leq\":\r\n                return this.value <= compareFraction.value;\r\n            case \"=\":\r\n                // let F2: Fraction = compareFraction.clone().reduce(),\r\n                //     F1: Fraction = this.clone().reduce();\r\n                // return (F1.numerator === F2.numerator && F1.denominator === F2.denominator);\r\n                return this.value === compareFraction.value;\r\n            case \"<>\":\r\n                return this.value !== compareFraction.value;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n    /* Compare shortcuts */\r\n    lesser = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '<');\r\n    };\r\n    leq = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '<=');\r\n    };\r\n    greater = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '>');\r\n    };\r\n    geq = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '>=');\r\n    };\r\n    isEqual = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '=');\r\n    }\r\n    isNotEqual = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '<>');\r\n    }\r\n    isOpposed = (p: Fraction): boolean => {\r\n        return this.isEqual(p.clone().opposed());\r\n    }\r\n    isInverted = (p: Fraction): boolean => {\r\n        return this.isEqual(new Fraction().one().divide(p.clone()));\r\n    }\r\n    isZero = (): boolean => {\r\n        return this._numerator === 0;\r\n    }\r\n    isNotZero = (): boolean => {\r\n        return this._numerator !== 0;\r\n    }\r\n    isOne = (): boolean => {\r\n        return this._numerator === 1 && this._denominator === 1;\r\n    }\r\n    isNegativeOne = (): boolean => {\r\n        return this._numerator === -1 && this._denominator === 1;\r\n    }\r\n    isPositive = (): boolean => {\r\n        return this.sign() === 1;\r\n    }\r\n    isNegative = (): boolean => {\r\n        return this.sign() === -1;\r\n    }\r\n    isStrictlyPositive = (): boolean => {\r\n        return this.value > 0\r\n    }\r\n    isStrictlyNegative = (): Boolean => {\r\n        return this.value < 0\r\n    }\r\n    isNaN = (): boolean => {\r\n        return isNaN(this._numerator);\r\n    }\r\n    isInfinity = (): boolean => {\r\n        return this._numerator === Infinity;\r\n    }\r\n    isFinite = (): boolean => {\r\n        return !this.isInfinity();\r\n    }\r\n    isSquare = (): boolean => {\r\n        return Math.sqrt(this._numerator) % 1 === 0 && Math.sqrt(this._denominator) % 1 === 0\r\n    }\r\n    isReduced = (): boolean => {\r\n        return Math.abs(Numeric.gcd(this._numerator, this._denominator)) === 1\r\n    }\r\n    isNatural = (): boolean => {\r\n        return this.isRelative() && this.isPositive()\r\n    }\r\n    isRelative = (): boolean => {\r\n        return this.clone().reduce().denominator === 1\r\n    }\r\n    isRational = (): boolean => {\r\n        return !this.isRelative()\r\n    }\r\n    isEven = (): boolean => {\r\n        return this.isRelative() && this.value % 2 === 0\r\n    }\r\n    isOdd = (): boolean => {\r\n        return this.isRelative() && this.value % 2 === 1\r\n    }\r\n    sign = (): number => {\r\n        return (this._numerator * this._denominator >= 0) ? 1 : -1;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Simple function to determine if it's a fraction\r\n     */\r\n    areEquals = (...F: Fraction[]): boolean => {\r\n        for (let i = 0; i < F.length; i++) {\r\n            if (!this.isEqual(F[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n}","export * from \"./fraction\"\r\nexport * from \"./nthroot\"","/**\r\n * Nthroot is something like \"a+b\\sqrt{3}\r\n */\r\nexport class Nthroot {\r\n    private _radical: number;\r\n    private _nth: number;\r\n    private _coefficient: number;\r\n    private _isValid:boolean;\r\n\r\n    constructor(...values: number[]) {\r\n        this._radical = 1;\r\n        this._coefficient = 1;\r\n        this._nth = 2;\r\n        this._isValid = true;\r\n\r\n        if(values !== undefined){\r\n            this.parse(values[0], values[1], values[2])\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get radical(): number {\r\n        return this._radical;\r\n    }\r\n\r\n    set radical(value: number) {\r\n        this._radical = value;\r\n    }\r\n\r\n    get nth(): number {\r\n        return this._nth;\r\n    }\r\n\r\n    set nth(value: number) {\r\n        if (Number.isSafeInteger(value) && value >= 2) {\r\n            this._nth = value;\r\n        } else {\r\n            // Error setting the nth root.\r\n            console.log('Error setting the nth root');\r\n            this._nth = 2;\r\n        }\r\n    }\r\n\r\n    get coefficient(): number {\r\n        return this._coefficient;\r\n    }\r\n\r\n    set coefficient(value: number) {\r\n        this._coefficient = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let C: string;\r\n\r\n        if (this._coefficient === 1) {\r\n            C = '';\r\n        } else if (this._coefficient === -1) {\r\n            C = '-';\r\n        } else {\r\n            C = this._coefficient.toString();\r\n        }\r\n\r\n        if (this._radical === 1) {\r\n            return `${this._coefficient}`;\r\n        } else {\r\n            if (this._nth === 2) {\r\n                return `${C}\\\\sqrt{${this._radical}}`\r\n            } else {\r\n                return `${C}\\\\sqrt[${this._nth}]{${this._radical}}`\r\n            }\r\n        }\r\n    }\r\n\r\n    get value(): number {\r\n        return this._coefficient * Math.pow(this._radical, 1 / this._nth);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (radical: number, nthroot?: number, coefficient?: number): Nthroot => {\r\n        this._coefficient = (coefficient === undefined) ? 1 : coefficient;\r\n        this._nth = (nthroot === undefined) ? 2 : nthroot;\r\n        this._radical = (radical === undefined) ? 1 : radical;\r\n\r\n        if(this._nth%2===0 && this._radical<0){\r\n            this._isValid = false;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    reduce = (): Nthroot => {\r\n        // Max value to test.\r\n        let V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n        while (V > 1) {\r\n            if (this._radical % Math.pow(V, this._nth) === 0) {\r\n                // It's dividable by V^n\r\n                this._coefficient *= V;\r\n                this._radical = this._radical / Math.pow(V, this._nth);\r\n\r\n                // Redifine the new testing value (this is optimization)\r\n                V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n                continue;\r\n            }\r\n            V--;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiply = (N: Nthroot): Nthroot => {\r\n        this._radical *= N.radical;\r\n        return this.reduce();\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Help functions\r\n    // ------------------------------------------\r\n    hasRadical = ():boolean => {\r\n        return !(this._radical===1 || this._radical===0 || this._isValid===false)\r\n    };\r\n}","import {Shutingyard, ShutingyardMode, ShutingyardType, tokenConstant} from \"../shutingyard\";\r\nimport {Fraction} from \"../coefficients\";\r\n\r\nexport class NumExp {\r\n    private _rpn: { token: string, tokenType: string }[]\r\n    private _expression: string\r\n    private _isValid: boolean\r\n\r\n    constructor(value: string) {\r\n        this._expression = value\r\n        this._rpn = new Shutingyard(ShutingyardMode.NUMERIC).parse(value).rpn\r\n    }\r\n\r\n    get rpn(): { token: string; tokenType: string }[] {\r\n        return this._rpn;\r\n    }\r\n\r\n    get isValid(): boolean {\r\n        if(this._isValid===undefined){\r\n            this.evaluate({x: 0})\r\n        }\r\n        return this._isValid\r\n    }\r\n\r\n    set isValid(value: boolean){\r\n        this._isValid = value\r\n    }\r\n\r\n    get expression(): string {\r\n        return this._expression;\r\n    }\r\n\r\n    private _extractDecimalPart(value: number): string {\r\n        let decimal = value.toString()\r\n\r\n        if (!decimal.includes('.')) {\r\n            return ''\r\n        }\r\n\r\n        decimal = decimal.split('.')[1]\r\n\r\n        return decimal.substring(0, decimal.length - 2)\r\n    }\r\n\r\n    private _numberCorrection(value: number): number {\r\n        // Must modify the number if it's like:\r\n        // a: 3.0000000000000003\r\n        // b: 3.9999999999999994\r\n        // remove the last character\r\n        // check if around n last characters are either 0 or 9\r\n        // if it is, 'round' the number.\r\n\r\n        const epsilon = 0.00000000000001,\r\n            number_of_digits = 6\r\n\r\n        const decimal = this._extractDecimalPart(value)\r\n        if(decimal===''){return value}\r\n\r\n        const n9 = decimal.match(/9+$/g)\r\n        const n0 = decimal.match(/0+$/g)\r\n\r\n        if (n9 && n9[0].length >= number_of_digits) {\r\n            // New tested values.\r\n            const mod = this._extractDecimalPart(value + epsilon),\r\n                mod0 = mod.match(/0+$/g)\r\n\r\n            if(mod0 && mod0[0].length>= number_of_digits){\r\n                // The value can be changed. Remove all zeros!\r\n                return +((value+epsilon).toString().split(mod0[0])[0])\r\n            }\r\n        }\r\n\r\n        if (n0 && n0[0].length >= number_of_digits) {\r\n            // New tested values.\r\n            const mod = this._extractDecimalPart(value - epsilon),\r\n                mod9 = mod.match(/9+$/g)\r\n\r\n            if(mod9 && mod9[0].length>= number_of_digits){\r\n                // The value can be changed. Remove all nines!\r\n                return +(value.toString().split(n0[0])[0])\r\n            }\r\n        }\r\n\r\n        return value\r\n    }\r\n\r\n    private _addToStack(stack:number[], value: number): void {\r\n        stack.push(this._numberCorrection(value))\r\n    }\r\n\r\n    evaluate(values: { [Key: string]: number }): number {\r\n        const stack: number[] = []\r\n\r\n        this.isValid = true\r\n\r\n        for (const element of this._rpn) {\r\n            if (element.tokenType === ShutingyardType.COEFFICIENT) {\r\n                // May be a numeric value or a Fraction.\r\n                if (!isNaN(+element.token)) {\r\n                    this._addToStack(stack, +element.token)\r\n                } else {\r\n                    this._addToStack(stack, new Fraction(element.token).value)\r\n                }\r\n            } else if (element.tokenType === ShutingyardType.VARIABLE) {\r\n                if (values[element.token] !== undefined) {\r\n                    this._addToStack(stack, +values[element.token])\r\n                }\r\n            } else if (element.tokenType === ShutingyardType.CONSTANT) {\r\n                this._addToStack(stack, tokenConstant[element.token])\r\n            } else if (element.tokenType === ShutingyardType.OPERATION) {\r\n                if (element.token === '*') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if(a === undefined || b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, a * b)\r\n                } else if (element.token === '/') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if(a === undefined || b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, a / b)\r\n                } else if (element.token === '+') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if(a === undefined || b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, (+a) + (+b))\r\n                } else if (element.token === '-') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop() || 0\r\n                    if(b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, a - b)\r\n                } else if (element.token === '^') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if(a === undefined || b === undefined){this.isValid = false}\r\n                    this._addToStack(stack, Math.pow(a, b))\r\n                }\r\n            } else if (element.tokenType === ShutingyardType.FUNCTION) {\r\n                const a = stack.pop()\r\n                if(a === undefined){this.isValid = false}\r\n                if (element.token === 'sin') {\r\n                    this._addToStack(stack, Math.sin(a))\r\n                } else if (element.token === 'cos') {\r\n                    this._addToStack(stack, Math.cos(a))\r\n                } else if (element.token === 'tan') {\r\n                    this._addToStack(stack, Math.tan(a))\r\n                } else if(element.token === 'sqrt') {\r\n                    this._addToStack(stack, Math.sqrt(a))\r\n                }\r\n            }\r\n        }\r\n\r\n        if (stack.length === 1) {\r\n            return stack[0]\r\n        } else {\r\n            throw `There was a problem parsing: ${this._expression}`\r\n        }\r\n    }\r\n}\r\n","import {Polynom, PolynomParsingType} from \"../algebra\";\r\nimport {Fraction, FractionParsingType} from \"../coefficients\";\r\n\r\ntype PolynomExpMathFunctionType = { name: string; fn: Function, tex: string }\r\n\r\nexport class PolynomExpFactor {\r\n    constructor(polynom: PolynomParsingType, degree?: FractionParsingType, mathFunction?: PolynomExpMathFunctionType) {\r\n        this._polynom = new Polynom(polynom)\r\n        this._degree = new Fraction(degree === undefined ? 1 : degree)\r\n        this._fn = mathFunction\r\n        this._powerAsInteger = true\r\n        this._forceParenthesis = true\r\n    }\r\n\r\n    private _forceParenthesis: boolean\r\n\r\n    get forceParenthesis(): boolean {\r\n        return this._forceParenthesis;\r\n    }\r\n\r\n    set forceParenthesis(value: boolean) {\r\n        this._forceParenthesis = value;\r\n    }\r\n\r\n    private _fn: PolynomExpMathFunctionType\r\n\r\n    get fn(): PolynomExpMathFunctionType {\r\n        return this._fn;\r\n    }\r\n\r\n    set fn(value: PolynomExpMathFunctionType) {\r\n        this._fn = value;\r\n    }\r\n\r\n    private _powerAsInteger: boolean\r\n\r\n    get powerAsInteger(): boolean {\r\n        return this._powerAsInteger;\r\n    }\r\n\r\n    set powerAsInteger(value: boolean) {\r\n        this._powerAsInteger = value;\r\n    }\r\n\r\n    private _polynom: Polynom\r\n\r\n    get polynom(): Polynom {\r\n        return this._polynom;\r\n    }\r\n\r\n    set polynom(value: Polynom) {\r\n        this._polynom = value;\r\n    }\r\n\r\n    private _degree: Fraction\r\n\r\n    get degree(): Fraction {\r\n        return this._degree;\r\n    }\r\n\r\n    set degree(value: Fraction) {\r\n        this._degree = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let tex\r\n\r\n        if (this._degree.isOne() && (this._fn !== undefined || !this._forceParenthesis)) {\r\n            // If degree is one, no need to add the parenthesis.\r\n            tex = this._polynom.tex\r\n        } else {\r\n            // the degree is not one, add the parenthesis.\r\n            if (this._powerAsInteger && !this._degree.isRelative()) {\r\n                // the degree is a fraction and we want natural powers => use sqrt.\r\n                tex = `\\\\sqrt${this._degree.denominator !== 2 ? `[ ${this._degree.denominator} ]` : ''}{ ${this._polynom.tex} }^{ ${this._degree.numerator} }`\r\n            } else if (this.isCoefficient && this.firstCoefficient.isNatural()) {\r\n                // the value is a natural number (eg 3, 7, ...)\r\n                tex = this._polynom.tex + this._texDegree\r\n            } else {\r\n                // In any other case, add the parenthesis by default\r\n                tex = `\\\\left( ${this._polynom.tex} \\\\right)${this._texDegree}`\r\n            }\r\n        }\r\n\r\n        if (this._fn !== undefined && this._fn.tex !== undefined) {\r\n            tex = `${this._fn.tex}\\\\left( ${tex} \\\\right)`\r\n        }\r\n        return tex\r\n    }\r\n\r\n    get isCoefficient(): boolean {\r\n        // TODO: Maybe reduce the coefficient if it isn't of degree one.\r\n        return this._polynom.degree().isZero();\r\n\r\n    }\r\n\r\n    get firstCoefficient(): Fraction {\r\n        return this._polynom.monomByDegree().coefficient\r\n    }\r\n\r\n    private get _texDegree(): string {\r\n        if (this._degree.isOne()) {\r\n            return ''\r\n        } else {\r\n            return `^{ ${this._degree.tfrac} }`\r\n        }\r\n    }\r\n\r\n    setForceParenthesis(value?: boolean): PolynomExpFactor {\r\n        this._forceParenthesis = value === undefined || value\r\n        return this\r\n    }\r\n\r\n    derivative(letter?: string): PolynomExpProduct {\r\n        if (this._degree.isOne()) {\r\n            return new PolynomExpProduct(\r\n                new PolynomExpFactor(this._polynom.clone().derivative(letter))\r\n            )\r\n        } else {\r\n            return new PolynomExpProduct(\r\n                new PolynomExpFactor(this._degree.clone()),\r\n                new PolynomExpFactor(this._polynom.clone().derivative(letter)),\r\n                new PolynomExpFactor(this._polynom.clone(), this._degree.clone().subtract(1))\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport class PolynomExpProduct {\r\n    constructor(...values: PolynomExpFactor[]) {\r\n        this._factors = values || []\r\n        this._positive = true\r\n        this._asPositiveDegree = true\r\n    }\r\n\r\n    private _fn: PolynomExpMathFunctionType\r\n\r\n    get fn(): PolynomExpMathFunctionType {\r\n        return this._fn;\r\n    }\r\n\r\n    set fn(value: PolynomExpMathFunctionType) {\r\n        this._fn = value;\r\n    }\r\n\r\n    private _factors: PolynomExpFactor[]\r\n\r\n    get factors(): PolynomExpFactor[] {\r\n        return this._factors;\r\n    }\r\n\r\n    set factors(value: PolynomExpFactor[]) {\r\n        this._factors = value;\r\n    }\r\n\r\n    private _positive: boolean\r\n\r\n    get positive(): boolean {\r\n        return this._positive;\r\n    }\r\n\r\n    set positive(value: boolean) {\r\n        this._positive = value;\r\n    }\r\n\r\n    private _asPositiveDegree: boolean\r\n\r\n    get asPositiveDegree(): boolean {\r\n        return this._asPositiveDegree;\r\n    }\r\n\r\n    set asPositiveDegree(value: boolean) {\r\n        this._asPositiveDegree = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let parenthesis = this._factors.length>1\r\n        // Default value\r\n        let tex = this._factors.map(factor => factor.setForceParenthesis(parenthesis).tex).join(' \\\\cdot ')\r\n\r\n        // Change the value in some cases...\r\n        if (this._asPositiveDegree) {\r\n            const numerators = this._factors.filter(x => x.degree.isPositive()),\r\n                denominators = this._factors.filter(x => x.degree.isNegative())\r\n\r\n            let numeratorsAsTex, denominatorsAsTex\r\n\r\n            if (denominators.length > 0) {\r\n                if (numerators.length === 0) {\r\n                    numeratorsAsTex = [1]\r\n                } else if (numerators.length === 1) {\r\n                    numeratorsAsTex = [numerators[0].setForceParenthesis(false).tex]\r\n                } else {\r\n                    parenthesis = numerators.length>1\r\n                    numeratorsAsTex = numerators.map(factor => factor.setForceParenthesis(parenthesis).tex)\r\n                }\r\n\r\n                // Change all denominators degrees to positive.\r\n                denominators.map(x => x.degree.opposed())\r\n                if (denominators.length === 1) {\r\n                    denominatorsAsTex = [denominators[0].setForceParenthesis(false).tex]\r\n                } else {\r\n                    parenthesis = denominators.length>1\r\n                    denominatorsAsTex = denominators.map(factor => factor.setForceParenthesis(parenthesis).tex)\r\n                }\r\n                // restore all degrees to negative again.\r\n                denominators.map(x => x.degree.opposed())\r\n\r\n                tex = `\\\\dfrac{ ${numeratorsAsTex.join(' \\\\cdot ')} }{ ${denominatorsAsTex.join(' \\\\cdot ')} }`\r\n            }\r\n        }\r\n\r\n        // Apply the modification\r\n        if (this._fn !== undefined && this._fn.name !== undefined && this._fn.name !== '') {\r\n            tex = `${this._fn.tex}\\\\left( ${tex} \\\\right)`\r\n        }\r\n        return tex\r\n    }\r\n\r\n    reduce(): PolynomExpProduct {\r\n        let coefficients = this._factors.filter(factor => factor.isCoefficient),\r\n            polynoms = this._factors.filter(factor => !factor.isCoefficient)\r\n\r\n        let result = new Fraction().one()\r\n\r\n        if (coefficients.length > 1) {\r\n            for (const factor of coefficients) {\r\n                if (factor.degree.isPositive()) {\r\n                    result.multiply(factor.polynom.monoms[0].coefficient.pow(factor.degree))\r\n                } else {\r\n                    result.divide(factor.polynom.monoms[0].coefficient.pow(factor.degree.clone().abs()))\r\n                }\r\n            }\r\n        } else if (coefficients.length === 1) {\r\n            result = coefficients[0].polynom.monoms[0].coefficient\r\n        }\r\n\r\n        if (result.isOne()) {\r\n            this._factors = [...polynoms]\r\n        } else if (!result.isRelative()) {\r\n            this._factors = [\r\n                new PolynomExpFactor(result.numerator),\r\n                new PolynomExpFactor(result.denominator, -1),\r\n                ...polynoms\r\n            ]\r\n        } else {\r\n            this._factors = [\r\n                new PolynomExpFactor(result),\r\n                ...polynoms\r\n            ]\r\n        }\r\n        return this\r\n    }\r\n\r\n    integrate(letter?: string): PolynomExpProduct {\r\n        // Handle this kind of case:\r\n        // A * f' * F^n\r\n        // A * f' / F^n, n != 1\r\n        // A * f_1 * f_2 * f_3, where (f_1 * f_2)' = f_3\r\n        if (this._factors.length === 2) {\r\n            // Check polynoms degree: one must of one degree less than the other.\r\n            let d1 = this._factors[0].polynom.degree(letter).value,\r\n                d2 = this._factors[1].polynom.degree(letter).value\r\n\r\n            if (d1 === d2 + 1) {\r\n                return this._integrateWithInternalDerivative(this._factors[0], this._factors[1], letter)\r\n            } else if (d1 + 1 === d2) {\r\n                return this._integrateWithInternalDerivative(this._factors[1], this._factors[0], letter)\r\n            }\r\n        }\r\n        return\r\n    }\r\n\r\n    public applyMathFunction(mathFn: PolynomExpMathFunctionType): PolynomExpProduct {\r\n        this._fn = mathFn\r\n        return this\r\n    }\r\n\r\n    private _integrateWithInternalDerivative(P: PolynomExpFactor, Pinternal: PolynomExpFactor, letter?: string): PolynomExpProduct {\r\n        // Get the internal derivative\r\n        let internalDerivative: Polynom = P.polynom.clone().derivative(letter)\r\n\r\n        // Get the factor.\r\n        let {quotient, reminder} = Pinternal.polynom.clone().euclidian(internalDerivative)\r\n\r\n        if (reminder.isZero() && quotient.degree(letter).isZero()) {\r\n            // All the conditions are done. Actual situation is\r\n            // (4x-10)(x^2-5x+7)^9\r\n            // P1 = (x^2-5x+7), P2 = (2x-5)\r\n            // => 1/10 * quotient * (x^2-5x+7)^10\r\n\r\n            if (P.degree.isEqual(-1)) {\r\n                return (new PolynomExpProduct(\r\n                    new PolynomExpFactor(quotient, 1),\r\n                    new PolynomExpFactor(P.polynom.clone(), 1, {\r\n                        name: 'ln', tex: '\\\\ln', fn: (x: number) => Math.log(x)\r\n                    })\r\n                ))\r\n            } else {\r\n                return new PolynomExpProduct(\r\n                    new PolynomExpFactor(P.degree.clone().add(1).invert(), 1),\r\n                    new PolynomExpFactor(quotient, 1),\r\n                    new PolynomExpFactor(P.polynom.clone(), P.degree.clone().add(1))\r\n                )\r\n            }\r\n        }\r\n        return\r\n    }\r\n}","import {Point} from \"./point\";\r\nimport {Fraction} from \"../coefficients\";\r\nimport {Equation, Monom, Polynom} from \"../algebra\";\r\nimport {Line} from \"./line\";\r\nimport {Vector} from \"./vector\";\r\nimport {Triangle} from \"./triangle\";\r\n\r\nexport class Circle {\r\n    private _center: Point;\r\n    private _squareRadius: Fraction;\r\n    private _cartesian: Equation;\r\n    private _exists: boolean;\r\n\r\n    constructor(...values: unknown[]) {\r\n        this._exists = false\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values)\r\n        }\r\n    }\r\n\r\n\r\n    get center(): Point {\r\n        return this._center;\r\n    }\r\n\r\n\r\n    get exists(): boolean {\r\n        return this._exists;\r\n    }\r\n\r\n    get squareRadius(): Fraction {\r\n        return this._squareRadius\r\n    }\r\n\r\n    get radius(): { tex: string, display: string } {\r\n        if (this._squareRadius.isSquare()) {\r\n            return {\r\n                tex: this._squareRadius.clone().sqrt().tex,\r\n                display: this._squareRadius.clone().sqrt().display,\r\n            }\r\n        } else {\r\n            return {\r\n                tex: `\\\\sqrt{${this._squareRadius.tex}}`,\r\n                display: `sqrt(${this._squareRadius.display})`\r\n            }\r\n        }\r\n        return this._squareRadius\r\n    }\r\n\r\n    get tex(): string {\r\n\r\n        if (this._exists) {\r\n            let cx, cy\r\n            if (this._center.x.isZero()) {\r\n                cx = 'x^2'\r\n            } else {\r\n                cx = `\\\\left(x${this._center.x.isNegative() ? '+' : '-'}${this._center.x.clone().abs().tex}\\\\right)^2`\r\n            }\r\n            if (this._center.y.isZero()) {\r\n                cy = 'y^2'\r\n            } else {\r\n                cy = `\\\\left(y${this._center.y.isNegative() ? '+' : '-'}${this._center.y.clone().abs().tex}\\\\right)^2`\r\n            }\r\n            return `${cx}+${cy}=${this._squareRadius.tex}`\r\n        } else {\r\n            return `\\\\text{le cercle n'existe pas.}`\r\n        }\r\n    }\r\n\r\n    get developed(): string {\r\n        return this._cartesian.tex\r\n    }\r\n\r\n\r\n    // TODO: reformat code for better display.\r\n    get display(): string {\r\n        return this._cartesian.display\r\n    }\r\n\r\n    get cartesian(): Equation {\r\n        return this._cartesian\r\n    }\r\n\r\n    clone(): Circle {\r\n        this._center = this._center.clone()\r\n        this._squareRadius = this._squareRadius.clone()\r\n        this._calculateCartesian()\r\n        return this\r\n    }\r\n\r\n    private _reset(): Circle {\r\n        this._center = null\r\n        this._squareRadius = null\r\n        this._cartesian = null\r\n        this._exists = false\r\n\r\n        return this\r\n    }\r\n\r\n    private parse(...values: unknown[]): Circle {\r\n        // Data can be given in these formats:\r\n        // one value, a string -> make it an Equation\r\n        // one value, an Equation\r\n        // one value, a circle -> clone it\r\n        // two values: two points (center and pointThrough)\r\n        // two values: point and Fraction (center and radius)\r\n        // three values: Point, Fraction, Boolean (center, square radius, true)\r\n\r\n        this._reset()\r\n\r\n        if (typeof values[0] === 'string') {\r\n            this._parseEquation(new Equation(values[0]))\r\n        } else if (values[0] instanceof Equation) {\r\n            this._parseEquation(values[0])\r\n        } else if (values[0] instanceof Circle) {\r\n            this._parseCopyCircle(values[0])\r\n        } else if (values[0] instanceof Point && values.length > 1) {\r\n            if (values[1] instanceof Point) {\r\n                if (values[2] instanceof Point) {\r\n                    this._parseThroughtThreePoints(values[0], values[1], values[2])\r\n                } else {\r\n                    this._parseCenterAndPointThrough(values[0], values[1])\r\n                }\r\n            } else if (values[1] instanceof Fraction || typeof values[1] === 'number') {\r\n                this._parseCenterAndRadius(values[0], values[1], (typeof values[2] === \"boolean\") ? values[2] : false)\r\n            }\r\n        }\r\n\r\n        // Calculate once the different values.\r\n        if(this._exists) {\r\n            this._calculateCartesian()\r\n\r\n            // If the square radius is zero or positive, the circle exists.\r\n            if (this._squareRadius !== undefined && this._squareRadius.isNegative()) {\r\n                this._exists = false\r\n            }\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    private _calculateCartesian() {\r\n        this._cartesian = (new Equation(\r\n            new Polynom(`(x-(${this._center.x.display}))^2+(y-(${this._center.y.display}))^2`),\r\n            new Polynom(`${this._squareRadius.display}`)\r\n        )).moveLeft()\r\n    }\r\n\r\n    private _parseCopyCircle(circle: Circle): Circle {\r\n        this._center = circle.center.clone()\r\n        this._squareRadius = circle.squareRadius.clone()\r\n        this._calculateCartesian()\r\n        this._exists = circle.exists\r\n        return this\r\n    }\r\n\r\n    private _parseCenterAndRadius(center: Point, radius: Fraction | number, square?: boolean): Circle {\r\n        this._center = center.clone()\r\n\r\n        if (square) {\r\n            this._squareRadius = (new Fraction(radius))\r\n        } else {\r\n            this._squareRadius = new Fraction(radius).pow(2)\r\n        }\r\n\r\n        this._exists = true\r\n        return this\r\n    }\r\n\r\n    private _parseCenterAndPointThrough(center: Point, pointThrough: Point): Circle {\r\n        this._center = center.clone()\r\n        this._squareRadius = new Vector(this._center, pointThrough).normSquare\r\n        this._exists = true\r\n        return this\r\n    }\r\n\r\n    private _parseEquation(equ: Equation): Circle {\r\n        this._exists = false\r\n\r\n        // Move everything to the left.\r\n        equ.moveLeft()\r\n\r\n        if (equ.degree('x').value === 2 && equ.degree('y').value === 2) {\r\n            // Both must be of degree 2.\r\n            let x2 = equ.left.monomByDegree(2, 'x'),\r\n                y2 = equ.left.monomByDegree(2, 'y'),\r\n                x1: Monom, y1: Monom, c: Monom\r\n\r\n            // Both square monoms must have the same coefficient.\r\n            if (x2.coefficient.isEqual(y2.coefficient)) {\r\n                equ.divide(x2.coefficient)\r\n\r\n                x1 = equ.left.monomByDegree(1, 'x')\r\n                y1 = equ.left.monomByDegree(1, 'y')\r\n\r\n                c = equ.left.monomByDegree(0)\r\n\r\n                this._center = new Point(\r\n                    x1.coefficient.clone().divide(2).opposed(),\r\n                    y1.coefficient.clone().divide(2).opposed()\r\n                )\r\n\r\n                this._squareRadius = c.coefficient.clone().opposed()\r\n                    .add(this._center.x.clone().pow(2))\r\n                    .add(this._center.y.clone().pow(2))\r\n\r\n                this._calculateCartesian()\r\n                this._exists = true\r\n            }else{\r\n                // The circle is not a valid circle\r\n                this._center = null\r\n                this._squareRadius = null\r\n                this._exists = false\r\n            }\r\n        }\r\n        return this\r\n    }\r\n\r\n    private _parseThroughtThreePoints(A: Point, B: Point, C: Point): Circle {\r\n        let T = new Triangle(A, B, C),\r\n            mAB = T.remarquables.mediators.AB.clone(),\r\n            mAC = T.remarquables.mediators.AC.clone()\r\n        this.parse(mAB.intersection(mAC).point, A)\r\n\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Get the relative position between circle and line. It corresponds to the number of intersection.\r\n     * @param {Line} L\r\n     * @returns {number}\r\n     */\r\n    relativePosition = (L: Line): number => {\r\n        let distance = L.distanceTo(this.center),\r\n            radius = Math.sqrt(this._squareRadius.value)\r\n\r\n        if (distance.value - radius > 0.0000000001) {\r\n            return 0 // external\r\n        } else if (Math.abs(distance.value - radius) < 0.0000000001) {\r\n            return 1 // tangent\r\n        } else {\r\n            return 2 // external\r\n        }\r\n    }\r\n\r\n    lineIntersection = (L: Line): Point[] => {\r\n        let intersectionPoints: Point[] = [], solX: Fraction\r\n\r\n        if(this._cartesian===null){return []}\r\n        const equX = this._cartesian.clone(),\r\n            lineX = L.equation.clone().isolate('x'),\r\n            lineY = L.equation.clone().isolate('y')\r\n\r\n        if (lineX instanceof Equation && lineY instanceof Equation) {\r\n            equX.replaceBy('y', lineY.right).simplify()\r\n            equX.solve()\r\n\r\n            for(let x of equX.solutions){\r\n                if(x.exact===false && isNaN(x.value)){continue}\r\n\r\n                solX = new Fraction(x.exact===false?x.value:x.exact)\r\n                intersectionPoints.push(\r\n                    new Point(\r\n                        solX.clone(),\r\n                        lineY.right.evaluate(solX)\r\n                    )\r\n                )\r\n            }\r\n        }\r\n\r\n        return intersectionPoints\r\n    }\r\n}","export * from \"./vector\"\r\nexport * from \"./triangle\"\r\nexport * from \"./point\"\r\nexport * from \"./circle\"\r\nexport * from \"./line\"\r\n","/**\r\n * This class works for 2d line in a plane.\r\n */\r\n\r\nimport {Fraction} from \"../coefficients\";\r\nimport {Vector} from \"./vector\";\r\nimport {Point} from \"./point\";\r\nimport {Equation, Polynom} from \"../algebra\";\r\nimport {Numeric} from \"../numeric\";\r\n\r\nenum LinePropriety {\r\n    None,\r\n    Parallel='parallel',\r\n    Perpendicular = 'perpendicular',\r\n    Tangent = 'tangent'\r\n}\r\n\r\nexport class Line {\r\n    // A line is defined as the canonical form\r\n    // ax + by + c = 0\r\n    private _a: Fraction;\r\n    private _b: Fraction;\r\n    private _c: Fraction;\r\n    private _OA: Point;\r\n    private _d: Vector;\r\n    private _n: Vector;\r\n    private _exists: boolean\r\n\r\n    private _referencePropriety: LinePropriety\r\n    private _referenceLine: Line\r\n\r\n    static PERPENDICULAR = LinePropriety.Perpendicular\r\n    static PARALLEL = LinePropriety.Parallel\r\n\r\n    constructor(...values: unknown[]) {\r\n\r\n        this._exists = false;\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get exists(): boolean {\r\n        return this._exists;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equation(): Equation {\r\n        return new Equation(new Polynom().parse('xy', this._a, this._b, this._c), new Polynom('0')).simplify();\r\n    }\r\n\r\n    get tex(): { canonical: string, mxh: string, parametric: string } {\r\n        // canonical    =>  ax + by + c = 0\r\n        // mxh          =>  y = -a/b x - c/b\r\n        // parametric   =>  (xy) = OA + k*d\r\n\r\n        let canonical = this.equation;\r\n        // Make sur the first item is positive.\r\n        if (this._a.isNegative()) {\r\n            canonical.multiply(-1);\r\n        }\r\n\r\n        return {\r\n            canonical: canonical.tex,\r\n            mxh: this.slope.isInfinity() ? 'x=' + this.OA.x.tex : 'y=' + new Polynom().parse('x', this.slope, this.height).tex,\r\n            parametric: `${Point.pmatrix('x', 'y')} = ${Point.pmatrix(this._OA.x, this._OA.y)} + k\\\\cdot ${Point.pmatrix(this._d.x, this._d.y)}`\r\n        }\r\n    }\r\n\r\n    get a(): Fraction {\r\n        return this._a;\r\n    }\r\n\r\n    set a(value: Fraction) {\r\n        this._a = value;\r\n    }\r\n\r\n    get b(): Fraction {\r\n        return this._b;\r\n    }\r\n\r\n    set b(value: Fraction) {\r\n        this._b = value;\r\n    }\r\n\r\n    get c(): Fraction {\r\n        return this._c;\r\n    }\r\n\r\n    set c(value: Fraction) {\r\n        this._c = value;\r\n    }\r\n\r\n    get OA(): Point {\r\n        return this._OA;\r\n    }\r\n\r\n    set OA(value: Point) {\r\n        this._OA = value;\r\n    }\r\n\r\n    get d(): Vector {\r\n        return this._d;\r\n    }\r\n\r\n    get n(): Vector {\r\n        return this._n;\r\n    }\r\n\r\n    get normal(): Vector {\r\n        return new Vector(this._a, this._b);\r\n    }\r\n\r\n    get director(): Vector {\r\n        return this._d.clone()\r\n    }\r\n\r\n    set d(value: Vector) {\r\n        this._d = value;\r\n    }\r\n\r\n    get slope(): Fraction {\r\n        return this._a.clone().opposed().divide(this._b);\r\n    }\r\n\r\n    get height(): Fraction {\r\n        return this._c.clone().opposed().divide(this._b);\r\n    }\r\n\r\n// ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse data to a line\r\n     * @param {any} values\r\n     * @returns {Line}\r\n     */\r\n    parse = (...values: unknown[]): Line => {\r\n        this._exists = false;\r\n\r\n        // Nothing is given...\r\n        if (values.length === 0) {\r\n            return this\r\n        }\r\n\r\n        // One value only: already a line (clone it), an Equation, a string (as Equation)\r\n        if (values.length === 1) {\r\n            if (values[0] instanceof Line) {\r\n                // Already a Line\r\n                return values[0].clone()\r\n            } else if (values[0] instanceof Equation) {\r\n                // It's an Equation\r\n                return this.parseEquation(values[0])\r\n            } else if (typeof values[0] === \"string\") {\r\n                // It's a string - create an Equation from it.\r\n                try {\r\n                    let E = new Equation(values[0])\r\n                    return this.parse(E)\r\n                } catch (e) {\r\n                    return this\r\n                }\r\n            }\r\n        }\r\n\r\n        if (values.length === 2) {\r\n            if (values[0] instanceof Point && values[1] instanceof Vector) {\r\n                return this.parseByPointAndVector(values[0], values[1]);\r\n            } else if (values[0] instanceof Point && values[1] instanceof Point) {\r\n                return this.parseByPointAndVector(values[0], new Vector(values[0], values[1]));\r\n            } else if (values[0] instanceof Vector && values[1] instanceof Point) {\r\n                return this.parseByPointAndNormal(values[1], values[0])\r\n            }\r\n        }\r\n\r\n        if (values.length === 3) {\r\n            if (\r\n                (values[0] instanceof Fraction || typeof values[0] === 'number')\r\n                &&\r\n                (values[1] instanceof Fraction || typeof values[1] === 'number')\r\n                &&\r\n                (values[2] instanceof Fraction || typeof values[2] === 'number')\r\n            ) {\r\n                return this.parseByCoefficient(values[0], values[1], values[2]);\r\n            }else if (\r\n                values[0] instanceof Point && values[1] instanceof Vector\r\n            ){\r\n                if(values[2] === LinePropriety.Perpendicular){\r\n                    return this.parseByPointAndNormal(values[0], values[1])\r\n                }else if (values[2] === LinePropriety.Parallel){\r\n                    return this.parseByPointAndVector(values[0], values[1])\r\n                }\r\n            }\r\n        }\r\n\r\n        // TODO: Add the ability to create line from a normal vector\r\n        console.log('Someting wrong happend while creating the line')\r\n        return this;\r\n    }\r\n\r\n    parseEquation = (equ: Equation): Line => {\r\n        // Reorder the eequation\r\n        equ.reorder(true)\r\n\r\n        // It must contain either x, y or both.\r\n        let letters = new Set(equ.letters());\r\n\r\n        // No 'x', no 'y' in the equations\r\n        if (!(letters.has('x') || letters.has('y'))) {\r\n            return this\r\n        }\r\n\r\n        // Another letter in the equation ?\r\n        for (let elem of ['x', 'y']) {\r\n            if (letters.has(elem)) {\r\n                letters.delete(elem)\r\n            }\r\n        }\r\n\r\n        if (letters.size > 0) {\r\n            return this\r\n        }\r\n\r\n        // Everything should be ok now...\r\n        return this.parseByCoefficient(equ.left.monomByLetter('x').coefficient, equ.left.monomByLetter('y').coefficient, equ.left.monomByDegree(0).coefficient)\r\n    }\r\n    parseByCoefficient = (a: Fraction | number, b: Fraction | number, c: Fraction | number): Line => {\r\n        this._a = new Fraction(a);\r\n        this._b = new Fraction(b);\r\n        this._c = new Fraction(c);\r\n\r\n        this._d = new Vector(this._b.clone(), this._a.clone().opposed());\r\n        this._OA = new Point(new Fraction().zero(), this._c.clone());\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    parseByPointAndVector = (P: Point, d: Vector): Line => {\r\n        // OX = OP + k*d\r\n        // x = px + kdx     * dy\r\n        // y = py + kdy     * dx\r\n        // ------------------\r\n        // dy * x = px * dy + kdxdy\r\n        // dx * y = py * dx + kdxdy\r\n        // ------------------\r\n        // dy * x - dx * y = px * dy - py * dx\r\n        // dy * x - dx * y - (px * dy - py * dx) = 0\r\n        this.parseByCoefficient(\r\n            d.y,\r\n            d.x.clone().opposed(),\r\n            P.x.clone().multiply(d.y).subtract(P.y.clone().multiply(d.x)).opposed()\r\n        )\r\n\r\n        // Choose the current values as point and direction vector instead of the automatic version.\r\n        this._OA = P.clone();\r\n        this._d = d.clone();\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    parseByPointAndNormal = (P: Point, n: Vector): Line => {\r\n        return this.parseByCoefficient(\r\n            n.x,\r\n            n.y,\r\n            P.x.clone().multiply(n.x)\r\n                .add(P.y.clone().multiply(n.y)).opposed()\r\n        )\r\n    }\r\n\r\n    parseByPointAndLine = (P: Point, L: Line, orientation?: LinePropriety): Line => {\r\n\r\n        if (orientation === undefined) {\r\n            orientation = LinePropriety.Parallel\r\n        }\r\n\r\n        if (orientation === LinePropriety.Parallel) {\r\n            return this.parseByPointAndNormal(P, L.normal)\r\n        } else if (orientation === LinePropriety.Perpendicular) {\r\n            return this.parseByPointAndNormal(P, L.director)\r\n        }\r\n\r\n        this._exists = false\r\n        return this\r\n    }\r\n\r\n    clone = (): Line => {\r\n        this._a = this._a.clone();\r\n        this._b = this._b.clone();\r\n        this._c = this._c.clone();\r\n\r\n        this._d = this._d.clone();\r\n        this._OA = this._OA.clone();\r\n        this._n = this._n.clone();\r\n\r\n        this._exists = this.exists\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    isParellelTo = (line: Line): Boolean => {\r\n        // Do they have the isSame direction ?\r\n        return this.slope.isEqual(line.slope) && this.height.isNotEqual(line.height);\r\n    }\r\n    isSameAs = (line: Line): Boolean => {\r\n        return this.slope.isEqual(line.slope) && this.height.isEqual(line.height);\r\n    }\r\n    isVertical = (): Boolean => {\r\n        return this.slope.isInfinity()\r\n    }\r\n    simplify = (): Line => {\r\n        let lcm = Numeric.lcm(this._a.denominator, this._b.denominator, this._c.denominator),\r\n            gcd = Numeric.gcd(this._a.numerator, this._b.numerator, this._c.numerator);\r\n\r\n        this.parseByCoefficient(\r\n            this._a.clone().multiply(lcm).divide(gcd),\r\n            this._b.clone().multiply(lcm).divide(gcd),\r\n            this._c.clone().multiply(lcm).divide(gcd),\r\n        )\r\n\r\n        return this\r\n    }\r\n\r\n    simplifyDirection = (): Line => {\r\n        let lcm = Numeric.lcm(this._d.x.denominator, this._d.y.denominator),\r\n            gcd = Numeric.gcd(this._d.x.numerator, this._d.y.numerator);\r\n\r\n        this._d.x.multiply(lcm).divide(gcd);\r\n        this._d.y.multiply(lcm).divide(gcd);\r\n        return this;\r\n    }\r\n    intersection = (line: Line): { point: Point, hasIntersection: boolean, isParallel: boolean, isSame: boolean } => {\r\n        let Pt = new Point(), isParallel = false, isSame = false, hasIntersection = true;\r\n\r\n        // this         => ax+by+c = 0\r\n        // line         => dx+ey+f = 0\r\n        //\r\n        //  aex + bey + ce = 0\r\n        //  dbx + bey + bf = 0\r\n        // (ae-db)x + ce-bf = 0\r\n        //\r\n        //  adx + bdy + cd = 0\r\n        //  adx + aey + af = 0\r\n        // (bd-ae)y + (cd-af)\r\n        //\r\n        // x = (bf-ce)/(ae-db)\r\n        // y = (af-cd)/(bd-ae)\r\n\r\n\r\n        // Theres is no 'y'\r\n        if (this._b.isZero() || line.b.isZero()) {\r\n            // TODO : handle no y in the line canonical form\r\n        }\r\n\r\n        if (this.isParellelTo(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isParallel = true;\r\n        } else if (this.isSameAs(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isSame = true;\r\n        } else {\r\n            Pt.x = this._b.clone().multiply(line.c).subtract(this._c.clone().multiply(line.b))\r\n                .divide(this._a.clone().multiply(line.b).subtract(this._b.clone().multiply(line.a)));\r\n            Pt.y = this._a.clone().multiply(line.c).subtract(this._c.clone().multiply(line.a))\r\n                .divide(this._b.clone().multiply(line.a).subtract(this._a.clone().multiply(line.b)));\r\n        }\r\n\r\n        return {\r\n            point: Pt,\r\n            hasIntersection: !(isParallel || isSame),\r\n            isParallel,\r\n            isSame\r\n        };\r\n    }\r\n\r\n    distanceTo(pt: Point): { value: number, fraction: Fraction, tex: string } {\r\n        let numerator = pt.x.clone().multiply(this._a)\r\n                .add(pt.y.clone().multiply(this._b))\r\n                .add(this._c).abs(),\r\n            d2 = this.normal.normSquare;\r\n\r\n        // The denominator is null - shouldn't be possible\r\n        if (d2.isZero()) {\r\n            return {\r\n                value: NaN,\r\n                tex: 'Not a line',\r\n                fraction: new Fraction().infinite()\r\n            }\r\n        }\r\n        // The denominator is a perfect square - simplify the tex result\r\n        let value = numerator.value / Math.sqrt(d2.value),\r\n            F = numerator.clone().divide(d2.clone().sqrt());\r\n\r\n        // The denominator is a perfect square.\r\n        if (d2.isSquare()) {\r\n            return {\r\n                value,\r\n                tex: F.tex,\r\n                fraction: F\r\n            }\r\n        }\r\n        // Complete answer...\r\n        return {\r\n            value,\r\n            tex: `\\\\frac{${numerator.tex}}{\\\\sqrt{${d2.tex}}}`,\r\n            fraction: F\r\n        };\r\n    }\r\n\r\n    hitSegment(A: Point, B: Point): boolean {\r\n        let iPt = this.intersection(\r\n            new Line(A, B)\r\n        )\r\n\r\n        // There is an intersection point\r\n        if (iPt.hasIntersection) {\r\n            return iPt.point.x.value >= Math.min(A.x.value, B.x.value)\r\n                && iPt.point.x.value <= Math.max(A.x.value, B.x.value)\r\n                && iPt.point.y.value >= Math.min(A.y.value, B.y.value)\r\n                && iPt.point.y.value <= Math.max(A.y.value, B.y.value)\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getValueAtX = (value: Fraction|number): Fraction => {\r\n\r\n        const equ = this.equation.clone().isolate('y'),\r\n            F = new Fraction(value)\r\n\r\n        if(equ instanceof Equation){\r\n            return equ.right.evaluate({x: F})\r\n        }\r\n        return\r\n    }\r\n    getValueAtY = (value: Fraction|number): Fraction => {\r\n        const equ = this.equation.clone().isolate('x'),\r\n            F = new Fraction(value)\r\n\r\n        if(equ instanceof Equation){\r\n            return equ.right.evaluate({y: F})\r\n        }\r\n        return\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Special functions\r\n    // ------------------------------------------\r\n    canonicalAsFloatCoefficient(decimals: number): string {\r\n        if (decimals === undefined) {\r\n            decimals = 2;\r\n        }\r\n\r\n        let ca = this._a.value,\r\n            cb = this._b.value,\r\n            cc = this._c.value,\r\n            canonical = '';\r\n\r\n        if (!this._a.isZero()) {\r\n            if (this._a.isOne()) {\r\n                canonical = 'x'\r\n            } else if (this._a.clone().opposed().isOne()) {\r\n                canonical = '-x'\r\n            } else {\r\n                canonical = this._a.value.toFixed(decimals) + 'x'\r\n            }\r\n        }\r\n\r\n        if (!this._b.isZero()) {\r\n            if (this._b.isPositive()) {\r\n                canonical += '+'\r\n            }\r\n            canonical += this._b.value.toFixed(decimals) + 'y'\r\n        }\r\n\r\n        if (!this._c.isZero()) {\r\n            if (this._c.isPositive()) {\r\n                canonical += '+'\r\n            }\r\n            canonical += this._c.value.toFixed(decimals)\r\n        }\r\n\r\n\r\n        return canonical + '=0';\r\n    }\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Fraction} from \"../coefficients\"\r\n\r\n/**\r\n * Helper class - a way to identify an object {x: number, y: number}\r\n */\r\nclass PointXY {\r\n    public x: number\r\n    public y: number\r\n}\r\n\r\nexport class Point {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n    private _exist: Boolean;\r\n\r\n    constructor(...values: unknown[]) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.tex);\r\n        pts.push(this._y.tex);\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n\r\n    get display(): string {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.tex);\r\n        pts.push(this._y.tex);\r\n\r\n        return `(${pts.join(';')})`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n\r\n    parse = (...values: unknown[]): Point => {\r\n        // Initialize the value.\r\n        this.zero();\r\n\r\n        // Nothing is given\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        // One element is given - might be already a point !\r\n        if (values.length === 1) {\r\n            // it's already a point - clone it\r\n            if (values[0] instanceof Point) {\r\n                this._x = values[0].x.clone()\r\n                this._y = values[0].y.clone()\r\n                return this\r\n            }\r\n\r\n            // Value is given as string, comma separated.\r\n            if (typeof values[0] === 'string') {\r\n                let xy = values[0].split(',')\r\n                if (xy.length === 2) {\r\n                    this._x = new Fraction(xy[0]).reduce()\r\n                    this._y = new Fraction(xy[1]).reduce()\r\n                    return this\r\n                }\r\n            }\r\n\r\n            // Value given as an object with {x: value, y: value}\r\n            if(values[0] instanceof PointXY){\r\n                    this._x = new Fraction(values[0].x).reduce()\r\n                    this._y = new Fraction(values[0].y).reduce()\r\n                return this\r\n            } else {\r\n                return this.zero()\r\n            }\r\n        }\r\n\r\n        if (values.length === 2) {\r\n            this._x = new Fraction(values[0]).reduce()\r\n            this._y = new Fraction(values[1]).reduce()\r\n            return this\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Point => {\r\n        this._x = this._x.clone()\r\n        this._y = this._y.clone()\r\n\r\n        return this\r\n    }\r\n\r\n    zero = (): Point => {\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    origin = (): Point => {\r\n        this.zero();\r\n        return this;\r\n    }\r\n\r\n    middleOf = (P1: Point, P2: Point): Point => {\r\n        this._x = P1.x.clone().add(P2.x).divide(2);\r\n        this._y = P1.y.clone().add(P2.y).divide(2);\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Display functions\r\n    // ------------------------------------------\r\n    texValues = (numberOfDigits: number): string => {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.value.toFixed(numberOfDigits === undefined ? 2 : numberOfDigits));\r\n        pts.push(this._y.value.toFixed(numberOfDigits === undefined ? 2 : numberOfDigits));\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Static functions\r\n    // ------------------------------------------\r\n    static pmatrix = (a: any, b: any, c?: any): string => {\r\n        if (c === undefined) {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\end{pmatrix}`;\r\n        } else {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\\\\\ ${c.tex ? c.tex : c} \\\\end{pmatrix}`;\r\n        }\r\n    };\r\n\r\n}\r\n","import {Point} from \"./point\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Vector} from \"./vector\";\r\nimport {Line} from \"./line\";\r\nimport {Equation} from \"../algebra/equation\";\r\n\r\nexport interface remarquableLines {\r\n    'medians': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'mediators': {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line,\r\n        'intersection': Point\r\n    },\r\n    'heights': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'bisectors': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    }\r\n}\r\n\r\nexport class Triangle {\r\n    private _A: Point;\r\n    private _B: Point;\r\n    private _C: Point;\r\n    private _lines: {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line\r\n    };\r\n    private _middles: {\r\n        'AB': Point,\r\n        'AC': Point,\r\n        'BC': Point\r\n    };\r\n    private _remarquables: remarquableLines;\r\n\r\n\r\n    constructor(...values: any) {\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setters\r\n    // ------------------------------------------\r\n\r\n    get A(): Point {\r\n        return this._A;\r\n    }\r\n\r\n    get B(): Point {\r\n        return this._B;\r\n    }\r\n\r\n    get C(): Point {\r\n        return this._C;\r\n    }\r\n\r\n    get AB(): Vector {\r\n        return this.getSegment('A', 'B');\r\n    }\r\n\r\n    get BA(): Vector {\r\n        return this.getSegment('B', 'A');\r\n    }\r\n\r\n    get BC(): Vector {\r\n        return this.getSegment('B', 'C');\r\n    }\r\n\r\n    get CB(): Vector {\r\n        return this.getSegment('C', 'B');\r\n    }\r\n\r\n    get AC(): Vector {\r\n        return this.getSegment('A', 'C');\r\n    }\r\n\r\n    get CA(): Vector {\r\n        return this.getSegment('C', 'A');\r\n    }\r\n\r\n    get isRectangle(): boolean {\r\n        if (this.AB.isNormalTo(this.BC)) {\r\n            return true;\r\n        }\r\n        if (this.AB.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n        if (this.BC.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    get isEquilateral(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) &&\r\n            this.AB.normSquare.isEqual(this.AC.normSquare);\r\n    }\r\n\r\n    get isIsocele(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) ||\r\n            this.AB.normSquare.isEqual(this.AC.normSquare) ||\r\n            this.BC.normSquare.isEqual(this.AC.normSquare)\r\n    }\r\n\r\n    get lines(): { 'AB': Line, 'BC': Line, 'AC': Line } {\r\n        return this._lines;\r\n    }\r\n\r\n    get remarquables(): remarquableLines {\r\n        return this._remarquables;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Parse values to a triangle. Supported formats:\r\n     * Point, Point, Point\r\n     * x1, y1, x2, y2, x3, y3\r\n     * TODO: Something else ?\r\n     * @param values\r\n     */\r\n    parse = (...values: any): Triangle => {\r\n        if (values.length === 6) {\r\n            // Check if all values are number or fractions.\r\n            let v = values.map((x: any) => new Fraction(x));\r\n            return this.parse(\r\n                new Point(v[0], v[1]),\r\n                new Point(v[2], v[3]),\r\n                new Point(v[4], v[5]),\r\n            )\r\n        } else if (values.length === 3) {\r\n            // Possibilities:\r\n            // - Three points (or part of points, only dict for example, or array (TODO: Add the array syntax for point)\r\n            // - Three lines\r\n            // - Three lines as text.\r\n            if(values.filter((x:any) => typeof x === 'string').length===3) {\r\n                return this.parse( ...values.map((x:string) => new Line(x)) )\r\n            }else if(values.filter((x:any) => x instanceof Line).length===3) {\r\n                // We have three lines\r\n                this._lines = {\r\n                    'AB': values[0],\r\n                    'BC': values[1],\r\n                    'AC': values[2]\r\n                };\r\n\r\n                // Get the intersection points -> build the triangle using these intersection points.\r\n                let intersect = values[0].intersection(values[1]);\r\n                if (intersect.hasIntersection) {\r\n                    this._B = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[1].intersection(values[2]);\r\n                if (intersect.hasIntersection) {\r\n                    this._C = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[2].intersection(values[0]);\r\n                if (intersect.hasIntersection) {\r\n                    this._A = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n            }else {\r\n                // At least, one of the value is not a point.\r\n                if (values.filter((x: any) => (x instanceof Point)).length < 3) {\r\n                    return this.parse(\r\n                        new Point(values[0]),\r\n                        new Point(values[1]),\r\n                        new Point(values[2])\r\n                    )\r\n                }\r\n\r\n                // We have three points.\r\n                this._A = values[0].clone();\r\n                this._B = values[1].clone();\r\n                this._C = values[2].clone();\r\n\r\n                this._lines = {\r\n                    'AB': new Line(this._A, this._B),\r\n                    'BC': new Line(this._B, this._C),\r\n                    'AC': new Line(this._A, this._C)\r\n                };\r\n            }\r\n        } else if (values.length === 1) {\r\n            if (values[0] instanceof Triangle) {\r\n                return values[0].clone();\r\n            }\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the Triangle class\r\n     */\r\n    clone = (): Triangle => {\r\n        this._A = this._A.clone();\r\n        this._B = this._B.clone();\r\n        this._C = this._C.clone();\r\n\r\n        this._lines = {\r\n            'AB': this._lines.AB.clone(),\r\n            'BC': this._lines.BC.clone(),\r\n            'AC': this._lines.AC.clone()\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Triangle operations and properties\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Generate the Line object for the three segments of the triangle\r\n     */\r\n    private _updateTriangle = () => {\r\n        this._middles = {\r\n            'AB': new Point().middleOf(this._A, this._B),\r\n            'AC': new Point().middleOf(this._A, this._C),\r\n            'BC': new Point().middleOf(this._B, this._C)\r\n        }\r\n\r\n        this._remarquables = this._calculateRemarquableLines();\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the Point class for the given name\r\n     * @param ptName\r\n     */\r\n    private getPointByName = (ptName: string): Point => {\r\n        switch (ptName.toUpperCase()) {\r\n            case 'A':\r\n                return this._A;\r\n            case 'B':\r\n                return this._B;\r\n            case 'C':\r\n                return this._C;\r\n        }\r\n\r\n        // Something went wrong ! Return the first point\r\n        return this._A;\r\n    }\r\n    /**\r\n     * Get the vector for the segment given by name.\r\n     * @param ptName1\r\n     * @param ptName2\r\n     */\r\n    private getSegment = (ptName1: string, ptName2: string): Vector => {\r\n        return new Vector(\r\n            this.getPointByName(ptName1),\r\n            this.getPointByName(ptName2)\r\n        );\r\n    }\r\n\r\n    private _calculateRemarquableLines = (): remarquableLines => {\r\n        let remarquables: remarquableLines = {\r\n            'medians': {\r\n                'A': new Line(this._A, this._middles.BC),\r\n                'B': new Line(this._B, this._middles.AC),\r\n                'C': new Line(this._C, this._middles.AB),\r\n                'intersection': null\r\n            },\r\n            'mediators': {\r\n                'AB': new Line(this._middles.AB, new Vector(this._A, this._B).normal()),\r\n                'AC': new Line(this._middles.AC, new Vector(this._A, this._C).normal()),\r\n                'BC': new Line(this._middles.BC, new Vector(this._B, this._C).normal()),\r\n                'intersection': null\r\n            },\r\n            'heights': {\r\n                'A': new Line(this._A, new Vector(this._B, this._C).normal()),\r\n                'B': new Line(this._B, new Vector(this._A, this._C).normal()),\r\n                'C': new Line(this._C, new Vector(this._A, this._B).normal()),\r\n                'intersection': null\r\n            },\r\n            'bisectors': {\r\n                'A': this._calculateBisectors('A'),\r\n                'B': this._calculateBisectors('B'),\r\n                'C': this._calculateBisectors('C'),\r\n                'intersection': null\r\n            }\r\n        }\r\n\r\n        // As it's a triangle, we assume the lines are intersecting and aren't parallel or superposed.\r\n        remarquables.medians.intersection = remarquables.medians.A.intersection(remarquables.medians.B).point;\r\n        remarquables.mediators.intersection = remarquables.mediators.AB.intersection(remarquables.mediators.BC).point;\r\n        remarquables.heights.intersection = remarquables.heights.A.intersection(remarquables.heights.B).point;\r\n        remarquables.bisectors.intersection = remarquables.bisectors.A.intersection(remarquables.bisectors.B).point;\r\n\r\n        // Everything was calculated for the remarquable lines.\r\n        return remarquables;\r\n    }\r\n\r\n    private _calculateBisectors = (pt: string): Line => {\r\n        let tlines = this.lines, d1, d2;\r\n\r\n        if(pt==='A'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.AC;\r\n        }else if(pt==='B'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.BC;\r\n        }else if(pt==='C'){\r\n            d1 = tlines.BC;\r\n            d2 = tlines.AC;\r\n        }\r\n\r\n        let b1 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm)).reorder(true).simplify()),\r\n            b2 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm).opposed()).reorder(true).simplify());\r\n\r\n        // Must determine which bisectors is in the triangle\r\n        if(pt==='A'){\r\n            return b1.hitSegment(this.B, this.C)?b1:b2;\r\n        }\r\n        if(pt==='B'){\r\n            return b1.hitSegment(this.A, this.C)?b1:b2;\r\n        }\r\n        if(pt==='C'){\r\n            return b1.hitSegment(this.B, this.A)?b1:b2;\r\n        }\r\n\r\n        // Default returns the first bisector\r\n        return b1;\r\n    }\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Point} from \"./point\";\r\n\r\nexport class Vector {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n\r\n    constructor(...values: any) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get normSquare(): Fraction {\r\n        return this._x.clone().pow(2).add(this._y.clone().pow(2));\r\n    }\r\n\r\n    get norm(): number {\r\n        return Math.sqrt(this.normSquare.value);\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\begin{pmatrix}${this._x.tex} \\\\\\\\\\ ${this._y.tex} \\\\end{pmatrix}`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Vector => {\r\n        // TODO: Must be more strict about what is given and limit to two dimensional vectors.p\r\n        // Maybe more than one value was given...\r\n        // Initialize the vector\r\n        this.zero();\r\n\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        if (values.length === 1) {\r\n            if (values[0] instanceof Vector) {\r\n                return values[0].clone()\r\n            } else {\r\n                return this._parseString(values[0])\r\n            }\r\n        }\r\n\r\n        if (values.length >= 2) {\r\n            // Two points are given - skip the third value.\r\n            if (values[0] instanceof Point && values[1] instanceof Point) {\r\n                this._x = values[1].x.clone().subtract(values[0].x)\r\n                this._y = values[1].y.clone().subtract(values[0].y)\r\n                return this;\r\n            }\r\n\r\n            // Fractions or a number are give\r\n            if (values[0] instanceof Fraction || !isNaN(values[0])) {\r\n                this._x = new Fraction(values[0])\r\n            }\r\n            if (values[1] instanceof Fraction || !isNaN(values[1])) {\r\n                this._y = new Fraction(values[1])\r\n            }\r\n\r\n            if(\r\n                (typeof values[0] === 'object' && !isNaN(values[0].x) && !isNaN(values[0].x)) &&\r\n                (typeof values[1] === 'object' && !isNaN(values[1].x) && !isNaN(values[1].x))\r\n            ){\r\n                this._x = new Fraction(+values[1].x-values[0].x)\r\n                this._y = new Fraction(+values[1].y-values[0].y)\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Vector => {\r\n        let V = new Vector();\r\n\r\n        if (this._x !== null) {\r\n            V.x = this._x.clone();\r\n        }\r\n        if (this._y !== null) {\r\n            V.y = this._y.clone();\r\n        }\r\n        return V;\r\n    }\r\n\r\n    reset = (): Vector => {\r\n        this._x = null;\r\n        this._y = null;\r\n        return this;\r\n    }\r\n\r\n    zero = (): Vector => {\r\n        this.reset();\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    one = (): Vector => {\r\n        this._x = new Fraction();\r\n        this._y = new Fraction();\r\n        return this;\r\n    }\r\n\r\n    private _parseString = (value: string): Vector => {\r\n        // Split comma, semi colon or single space.\r\n        let components = value.split(/[,;\\s]/g);\r\n\r\n        // Validate the fraction values.\r\n        this.x = new Fraction(components[0] || null);\r\n        this.y = new Fraction(components[1] || null);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Vector => {\r\n        this._x.opposed();\r\n        this._y.opposed();\r\n        return this;\r\n    }\r\n\r\n    add = (V: Vector): Vector => {\r\n        this._x.add(V.x);\r\n        this._y.add(V.y);\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (V: Vector): Vector => {\r\n        return this.add(V.clone().opposed());\r\n    }\r\n\r\n    scalarProductWithVector = (V: Vector): Fraction => {\r\n        // TODO: Add the scalar factor !!!!\r\n        return this._x.clone().multiply(V.x).add(this._y.clone().multiply(V.y));\r\n    }\r\n\r\n    static scalarProduct = (v1: Vector, v2: Vector): number => {\r\n        // TODO: Transform to fraction with nthroot.\r\n        return v1.x.value * v2.x.value + v1.y.value * v2.y.value;\r\n    };\r\n\r\n    normal = (): Vector => {\r\n        let x = this.x.clone().opposed(), y = this.y.clone();\r\n        this._x = y;\r\n        this._y = x;\r\n        return this;\r\n    }\r\n\r\n    isNormalTo = (v: Vector): boolean => {\r\n        return this.scalarProductWithVector(v).isZero()\r\n    }\r\n\r\n    multiplyByScalar = (k: any): Vector => {\r\n        let scalar = new Fraction(k);\r\n        this._x.multiply(scalar);\r\n        this._y.multiply(scalar);\r\n        return this;\r\n    }\r\n\r\n    divideByScalar = (k: any): Vector => {\r\n        return this.multiplyByScalar(new Fraction(k).invert());\r\n    }\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    simplify = (): Vector => {\r\n        // Multiply by the lcm of denominators.\r\n        return this.multiplyByScalar(Numeric.lcm(this._x.denominator, this._y.denominator))\r\n            .divideByScalar(Numeric.gcd(this._x.numerator, this._y.numerator));\r\n    }\r\n\r\n    angleWith = (V: Vector, sharp?: Boolean, radian?: Boolean): number => {\r\n        let scalar = this.scalarProductWithVector(V).value,\r\n            toDegree = radian ? 1 : 180 / Math.PI;\r\n        if (sharp) {\r\n            scalar = Math.abs(scalar);\r\n        }\r\n\r\n        return toDegree * Math.acos(scalar / (this.norm * V.norm));\r\n    }\r\n}\r\n","export class Numeric{\r\n    static round(value:number, decimals:number=2):number {\r\n        return Number(Math.round(Number(value+'e'+decimals))+'e-'+decimals);\r\n    }\r\n\r\n    /**\r\n     * Get the list of the nth first prime numbers.\r\n     * @param nb : number of primes to choose from\r\n     */\r\n    static prime(nb?:number):number[]{\r\n        let primes:number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973];\r\n        if(nb === undefined){\r\n            return primes;\r\n        }else{\r\n            return primes.slice(0,Math.max(primes.length,nb));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the list of all dividers of a number.\r\n     * @param value\r\n     */\r\n    static dividers(value:number):number[]{\r\n        let D: number[];\r\n        const maxV = Math.sqrt(Math.abs(value));\r\n\r\n        // Initialize the list of dividers.\r\n        D = [];\r\n\r\n        for(let i=1; i<=maxV; i++){\r\n            if(value%i===0){\r\n                D.push(i);\r\n                D.push(value/i);\r\n            }\r\n        }\r\n\r\n        // Order numbers.\r\n        D.sort(function(a, b){return a-b;});\r\n\r\n        // Make sure the array of value is unique.\r\n        return [...new Set(D)];\r\n    }\r\n    /**\r\n     * Great Common Divisor\r\n     * @param values : number values\r\n     */\r\n    static gcd(...values:number[]):number{\r\n        // Define the gcd for two number\r\n        let gcd2 = function(a:number,b:number):number{\r\n            if(b===0){return a;}\r\n            return gcd2(b, a%b);\r\n        };\r\n\r\n        let g:number = 1,\r\n            i:number = 2;\r\n\r\n        // Nothing is given\r\n        if(values.length===0){return 1;}\r\n        // Only one number is given\r\n        if(values.length===1){\r\n            // The first number is zero\r\n            if(values[0]===0){return 1;}\r\n            // Return the number\r\n            return values[0];\r\n        }\r\n\r\n        // We have at least 2 numbers.\r\n        g = gcd2(values[0],values[1]);\r\n\r\n        // The gcd of the two first value is one ? It's already finished.\r\n        if(g===1){return 1;}\r\n\r\n        // The current gcd isn't one. Continue with all next values.\r\n        for(i=2; i<values.length; i++){\r\n            g = gcd2(g, values[i]);\r\n            // Escape if gcd is already one.\r\n            if(g===1){break;}\r\n        }\r\n\r\n        return Math.abs(g);\r\n    }\r\n\r\n    /**\r\n     * Least Common Multiple\r\n     * @param values: list of numbers\r\n     */\r\n    static lcm(...values:number[]):number{\r\n        return values.reduce(function(a,b){\r\n            return Math.abs(a * b / Numeric.gcd(a, b));\r\n        });\r\n    }\r\n}","import {rndPolynom} from \"./rndPolynom\";\r\nimport {rndMonom} from \"./rndMonom\";\r\nimport {rndHelpers} from \"./rndHelpers\";\r\nimport {randomCoefficientConfig, randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {Monom, Polynom} from \"../algebra\";\r\nimport {Fraction} from \"../coefficients\";\r\nimport {rndFraction} from \"./rndFraction\";\r\n\r\nexport * from \"./rndTypes\"\r\n\r\nexport namespace Random {\r\n    export function polynom(config?: randomPolynomConfig): Polynom {\r\n        return (new rndPolynom(config)).generate()\r\n    }\r\n\r\n    export function monom(config?: randomMonomConfig): Monom {\r\n        return (new rndMonom(config)).generate()\r\n    }\r\n\r\n    export function fraction(config?: randomCoefficientConfig): Fraction {\r\n        return (new rndFraction(config)).generate()\r\n    }\r\n\r\n    export function number(from: number, to: number): number {\r\n        return rndHelpers.randomInt(from, to)\r\n    }\r\n\r\n    export function numberSym(max: number, allowZero?: boolean): number {\r\n        return rndHelpers.randomIntSym(max, allowZero)\r\n    }\r\n\r\n    export function bool(percent?: number): boolean {\r\n        return rndHelpers.randomBool(percent)\r\n    }\r\n\r\n    export function array(arr: any[], number?: number): any[] {\r\n        return rndHelpers.randomArray(arr, number)\r\n    }\r\n\r\n    export function item(arr: any[]): any {\r\n        return rndHelpers.randomItem(arr)\r\n    }\r\n\r\n    export function shuffle(arr: any[]): any {\r\n        rndHelpers.shuffleArray(arr)\r\n    }\r\n}","export class randomCore {\r\n    protected _config: Object\r\n    protected _defaultConfig: Object\r\n    mergeConfig = (config: Object, defaultConfig: Object): Object => {\r\n        if (config !== undefined) {\r\n            return {...defaultConfig, ...config}\r\n        }\r\n        return defaultConfig\r\n    }\r\n\r\n    generate = (): unknown => {\r\n        return undefined\r\n    }\r\n\r\n    config = (config: Object): randomCore => {\r\n        this._config = this.mergeConfig(config, this._defaultConfig)\r\n        return this\r\n    }\r\n}","import {randomCore} from \"./randomCore\";\r\nimport {randomCoefficientConfig, randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {Fraction} from \"../coefficients\";\r\nimport {Random} from \"./index\";\r\n\r\n/**\r\n * Create a random monom based on a based configuration\r\n */\r\nexport class rndFraction extends randomCore {\r\n    declare protected _config: randomCoefficientConfig\r\n    declare protected _defaultConfig: randomCoefficientConfig\r\n\r\n    constructor(userConfig?: randomCoefficientConfig) {\r\n        super();\r\n\r\n        this._defaultConfig = {\r\n            negative: true,\r\n            max: 10,\r\n            reduced: true,\r\n            zero: true,\r\n            natural: false\r\n        }\r\n\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Fraction => {\r\n        let Q = new Fraction()\r\n\r\n        if(this._config.negative){\r\n            Q.numerator = Random.numberSym(this._config.max, this._config.zero)\r\n        }else {\r\n            Q.numerator = Random.number(this._config.zero ? 0 : 1, this._config.max)\r\n        }\r\n        if(this._config.natural){\r\n            Q.denominator = 1\r\n        }else {\r\n            Q.denominator = Random.number(1, this._config.max)\r\n        }\r\n\r\n        return this._config.reduced?Q.reduce():Q\r\n    }\r\n}\r\n","/**\r\n * Random helpers\r\n */\r\nexport class rndHelpers {\r\n\r\n    /**\r\n     * Random boolean with a percent ratio\r\n     * @param percent\r\n     */\r\n    static randomBool(percent:number=0.5):boolean{\r\n        return Math.random()<percent;\r\n    }\r\n\r\n    /**\r\n     * Random integer between two values.\r\n     * @param a (number) : From this value to the second value. If the second is ommited, this value is the max value.\r\n     * @param b (number) : To this value. If this is ommited.\r\n     */\r\n    static randomInt(a:number, b?:number):number{\r\n        if(b===undefined){return this.randomInt(0,a);}\r\n\r\n        return Math.floor(Math.random() * (b - a + 1) + a);\r\n    }\r\n\r\n    /**\r\n     * Random integer between -max and max value.\r\n     * @param max (number) : determine the limits.\r\n     * @param zero (bool) : determine if zero is allowed or not.\r\n     */\r\n    static randomIntSym(max:number, zero?:boolean):number{\r\n        if(zero===false){\r\n            return this.randomBool()?this.randomInt(1,max):-this.randomInt(1,max);\r\n        }else{\r\n            return this.randomInt(-max, max);\r\n        }\r\n    }\r\n\r\n    static randomArray(arr: any[], number?:number):any[]{\r\n        if(number===undefined){number = 1}\r\n\r\n        // Return a clone array\r\n        if(arr.length<=0){return Object.values(arr)}\r\n\r\n        // Randomize the array and return the n first elements.\r\n        return rndHelpers.shuffleArray(arr).slice(0,number);\r\n    }\r\n\r\n    static randomItem(arr: any[]): any{\r\n        if(arr.length===0){return ''}\r\n        return this.randomArray(arr, 1)[0]\r\n    }\r\n\r\n    static shuffleArray(arr: any[]): any[] {\r\n        // The Fisher-Yates algorithm\r\n        let shuffleArray = Object.values(arr)\r\n        for (let i = shuffleArray.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            const temp = shuffleArray[i];\r\n            shuffleArray[i] = shuffleArray[j];\r\n            shuffleArray[j] = temp;\r\n        }\r\n\r\n        return shuffleArray;\r\n    }\r\n\r\n}","import {randomCore} from \"./randomCore\";\r\nimport {randomMonomConfig} from \"./rndTypes\";\r\nimport {Random} from \"./index\";\r\nimport {Monom} from \"../algebra\";\r\n\r\n/**\r\n * Create a random monom based on a based configuration\r\n */\r\nexport class rndMonom extends randomCore {\r\n    declare protected _config: randomMonomConfig\r\n    declare protected _defaultConfig: randomMonomConfig\r\n\r\n    constructor(userConfig?: randomMonomConfig) {\r\n        super();\r\n\r\n        this._defaultConfig = {\r\n            letters: 'x',\r\n            degree: 2,\r\n            fraction: true,\r\n            zero: false\r\n        }\r\n\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Monom => {\r\n        // Create a monom instance\r\n        let M = new Monom()\r\n\r\n        // Generate the coefficient\r\n        if (typeof this._config.fraction === \"boolean\") {\r\n            M.coefficient = Random.fraction({\r\n                zero: this._config.zero,\r\n                reduced: true,\r\n                natural: !this._config.fraction\r\n            })\r\n        } else {\r\n            M.coefficient = Random.fraction(this._config.fraction)\r\n        }\r\n\r\n        // Calculate the degree of the monom\r\n        if (this._config.letters.length > 1) {\r\n            // Initialise each items...\r\n            for (let L of this._config.letters.split('')) {\r\n                M.setLetter(L, 0);\r\n            }\r\n            for (let i = 0; i < this._config.degree; i++) {\r\n                const L = Random.item(this._config.letters.split(\"\"))\r\n                M.setLetter(L, M.degree(L).clone().add(1))\r\n            }\r\n        } else {\r\n            M.setLetter(this._config.letters, this._config.degree)\r\n        }\r\n\r\n        return M\r\n    }\r\n}\r\n","import {randomCore} from \"./randomCore\";\r\nimport {randomPolynomConfig} from \"./rndTypes\";\r\nimport {rndMonom} from \"./rndMonom\";\r\nimport {Random} from \"./index\";\r\nimport {Polynom} from \"../algebra\";\r\nimport {Monom} from \"../algebra\";\r\n\r\n/**\r\n * Random polynoms\r\n */\r\nexport class rndPolynom extends randomCore {\r\n    declare protected _config: randomPolynomConfig\r\n    declare protected _defaultConfig: randomPolynomConfig\r\n\r\n    constructor(userConfig?: randomPolynomConfig) {\r\n        super();\r\n\r\n        // Default config for a random polynom\r\n        this._defaultConfig = {\r\n            letters: 'x',\r\n            degree: 2,\r\n            fraction: false,\r\n            zero: false,\r\n            unit: false,\r\n            factorable: false,\r\n            allowNullMonom: true,\r\n            numberOfMonoms: 0,\r\n            positive: true\r\n        }\r\n\r\n        // Merge config with initialiser\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Polynom => {\r\n        if(this._config.factorable && this._config.degree>1){\r\n            return this.factorable()\r\n        }\r\n\r\n        // Create the polynom\r\n        let P = new Polynom().empty(),\r\n            M: Monom\r\n\r\n        for (let i = this._config.degree; i >= 0; i--) {\r\n            // Create monom of corresponding degree.\r\n            M = new rndMonom({\r\n                letters: this._config.letters,\r\n                degree: i,\r\n                fraction: this._config.fraction,\r\n                zero: (i === this._config.degree) ? false : this._config.allowNullMonom\r\n            }).generate()\r\n\r\n            // If degree is the greatest and unit is true, set the monom value to one.\r\n            if (this._config.unit && this._config.degree === i) {\r\n                M.coefficient.one()\r\n            }\r\n\r\n            // Add to the polynom\r\n            P.add(M)\r\n        }\r\n\r\n        // Make sure the first monom is positive.\r\n        if(this._config.positive && P.monomByDegree().coefficient.isNegative()){\r\n            P.monomByDegree().coefficient.opposed()\r\n        }\r\n\r\n        // If the number of monoms is greater than the allowed value, remove some of them... except the first one !\r\n        if (this._config.numberOfMonoms > 0 && this._config.numberOfMonoms < P.length) {\r\n            // Get the greatest degree monom\r\n            let M = P.monomByDegree().clone()\r\n            P.monoms = Random.array(P.monoms.slice(1), this._config.numberOfMonoms-1)\r\n            P.add(M).reorder().reduce()\r\n        }\r\n        return P\r\n    }\r\n\r\n    factorable = (): Polynom => {\r\n        let P = new Polynom().one()\r\n\r\n        let _factorableConfig = {...this._config}\r\n        _factorableConfig.degree = 1\r\n        _factorableConfig.factorable = false\r\n\r\n        for(let i=0; i<this._config.degree;i++){\r\n            P.multiply(Random.polynom(_factorableConfig))\r\n        }\r\n\r\n        return P\r\n    }\r\n}","import {loadHighlighter} from \"typedoc/dist/lib/utils/highlighter\";\r\nimport exp = require(\"constants\");\r\n\r\nexport type tokenType = {\r\n    [key: string]: {\r\n        precedence: number,\r\n        associative: string,\r\n        type: string\r\n    }\r\n}\r\n\r\nexport const tokenConstant:{[Key:string]:number} = {\r\n    pi: Math.PI,\r\n    e: Math.exp(1)\r\n}\r\n\r\nexport enum ShutingyardType {\r\n    VARIABLE='variable',\r\n    COEFFICIENT='coefficient',\r\n    OPERATION = 'operation',\r\n    CONSTANT = 'constant',\r\n    FUNCTION = 'function',\r\n    MONOM = 'monom'\r\n}\r\n\r\nexport enum ShutingyardMode {\r\n    POLYNOM= 'polynom',\r\n    SET = 'set',\r\n    NUMERIC = 'numeric'\r\n}\r\n\r\nexport type Token = { token: string, tokenType: string }\r\n\r\nexport class Shutingyard {\r\n    private _rpn: Token[] = [];\r\n    readonly _mode: ShutingyardMode;\r\n    private _tokenConfig: tokenType;\r\n    private _tokenConstant: {[Key:string]: number}\r\n    private _uniformize: boolean;\r\n    private _tokenKeys: string[]\r\n\r\n    constructor(mode?: ShutingyardMode ) {\r\n        this._mode = typeof mode === 'undefined' ? ShutingyardMode.POLYNOM : mode;\r\n        this.tokenConfigInitialization()\r\n    }\r\n\r\n    /**\r\n     * Determin if the token is a defined operation\r\n     * Defined operations: + - * / ^ sin cos tan\r\n     * @param token\r\n     */\r\n    // isOperation(token: string): boolean {\r\n    //     if (token[0].match(/[+\\-*/^]/g)) {\r\n    //         return true;\r\n    //     }\r\n    //     //\r\n    //     // if (token.match(/^sin|cos|tan/g)) {\r\n    //     //     return true;\r\n    //     // }\r\n    //\r\n    //     return false;\r\n    // }\r\n\r\n    tokenConfigInitialization(): tokenType {\r\n        if (this._mode === ShutingyardMode.SET) {\r\n            this._tokenConfig = {\r\n                '&': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '|': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '!': {precedence: 4, associative: 'right', type: ShutingyardType.OPERATION},\r\n                '-': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION}\r\n            }\r\n            this._uniformize = false;\r\n        }else if (this._mode === ShutingyardMode.NUMERIC){\r\n            this._tokenConfig = {\r\n                '^': {precedence: 4, associative: 'right', type: ShutingyardType.OPERATION},\r\n                '*': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '/': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '+': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '-': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '%': {precedence: 3, associative: 'right', type: ShutingyardType.OPERATION},\r\n                'sin': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'cos': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'tan': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                'sqrt': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n            }\r\n            this._uniformize = false\r\n        } else {\r\n            this._tokenConfig = {\r\n                '^': {precedence: 4, associative: 'right', type: ShutingyardType.OPERATION},\r\n                '*': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '/': {precedence: 3, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '+': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                '-': {precedence: 2, associative: 'left', type: ShutingyardType.OPERATION},\r\n                // '%': {precedence: 3, associative: 'right', type: ShutingyardType.OPERATION},\r\n                // 'sin': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                // 'cos': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n                // 'tan': {precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION},\r\n            }\r\n            this._uniformize = true\r\n        }\r\n\r\n        this._tokenKeys = Object.keys(this._tokenConfig).sort((a,b)=>b.length-a.length)\r\n        return this._tokenConfig\r\n    }\r\n\r\n    /**\r\n     * Get the next token to analyse.\r\n     * @param expr (string) Expression to analyse\r\n     * @param start (number) CUrrent position in the expr string.\r\n     */\r\n    NextToken(expr: string, start: number): [string, number, string] {\r\n        let token: string, tokenType: string;\r\n        token = '';\r\n        tokenType = '';\r\n        // Case of parenthesis or comma (generic items)\r\n        if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        } else{\r\n            // Order token keys by token characters length (descending)\r\n            // TODO: this is done each time ! SHould be done once !\r\n            // const keys = Object.keys(this._tokenConfig).sort((a,b)=>b.length-a.length)\r\n\r\n            // Extract operation and function tokens\r\n            for(let key of this._tokenKeys){\r\n                if(expr.substring(start, start+key.length) === key){\r\n                    token += key;\r\n                    tokenType = this._tokenConfig[key].type\r\n                    break\r\n                }\r\n            }\r\n\r\n            // Extract constant\r\n            for(let key in tokenConstant){\r\n                if(expr.substring(start, start+key.length) === key){\r\n                    token += key;\r\n                    tokenType = ShutingyardType.CONSTANT\r\n                    break\r\n                }\r\n            }\r\n\r\n            if(token===''){\r\n                // No function found ! Might be a coefficient !\r\n                if( expr[start].match(/[0-9]/) ) {\r\n                    if(this._mode === ShutingyardMode.POLYNOM && false) {\r\n                        token = expr.substring(start).match(/^([0-9.,/]+)/)[0]\r\n                    }else{\r\n                        token = expr.substring(start).match(/^([0-9.,]+)/)[0]\r\n                    }\r\n                    tokenType = ShutingyardType.COEFFICIENT\r\n                }else if (expr[start].match(/[a-zA-Z]/)) {\r\n                    token = expr.substring(start).match(/^([a-zA-Z])/)[0]\r\n                    tokenType = ShutingyardType.VARIABLE\r\n                }else{\r\n                    console.log('Unidentified token', expr[start], expr, start)\r\n                    token = expr[start]\r\n                    tokenType = ShutingyardType.MONOM\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    /**\r\n     * Sanitize an expression by adding missing common operation (multiplication between parentheseses)\r\n     * @param expr\r\n     * @constructor\r\n     */\r\n    Uniformizer(expr: string): string {\r\n        // Determiner if need to be uniformized\r\n        if(!this._uniformize){return expr}\r\n\r\n        let expr2;\r\n        // Replace missing multiplication between two parenthese\r\n        expr2 = expr.replace(/\\)\\(/g, ')*(');\r\n\r\n        // Replace missing multiplication between number or setLetter and parenthese.\r\n\r\n        // 3x(x-4) => 3x*(x-4)\r\n        expr2 = expr2.replace(/([\\da-zA-Z])(\\()/g, \"$1*$2\");\r\n\r\n        // (x-4)3x => (x-4)*3x\r\n        expr2 = expr2.replace(/(\\))([\\da-zA-Z])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between number and letters.\r\n        // 3x => 3*x\r\n        expr2 = expr2.replace(/([0-9])([a-zA-Z])/g, \"$1*$2\");\r\n        expr2 = expr2.replace(/([a-zA-Z])([0-9])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between letters ?\r\n        // TODO: More robust solution to handle all letters ?\r\n        expr2 = expr2.replace(/([abcxyz])([abcxyz])/g, \"$1*$2\");\r\n\r\n        // Restore operation auto formating (prevent adding the mutliplcation star)\r\n        // TODO: Accept list of functions\r\n        let fnToken = ['sin', 'cos', 'tan']\r\n        for (let token of fnToken) {\r\n            expr2 = expr2.replace(new RegExp(token + '\\\\*', 'g'), token);\r\n        }\r\n\r\n        return expr2;\r\n    }\r\n\r\n    /**\r\n     * Parse an expression using the shutting yard tree algorithms\r\n     * @param expr (string) Expression to analyse\r\n     * Returns a RPN list of items.\r\n     * @param operators\r\n     */\r\n    parse(expr: string, operators?: string[]): Shutingyard {\r\n        let outQueue: {token:string, tokenType: string}[] = [],    // Output queue\r\n            opStack: {token:string, tokenType: string}[] = [],     // Operation queue\r\n            token: string = '',\r\n            tokenPos: number = 0,\r\n            tokenType: string = '',\r\n            previousOpStatckLength = 0\r\n\r\n        expr = this.Uniformizer(expr);\r\n\r\n        let securityLoopLvl1 = 50,\r\n            securityLoopLvl2_default = 50,\r\n            securityLoopLvl2;\r\n\r\n        while (tokenPos < expr.length) {\r\n            securityLoopLvl1--;\r\n            if (securityLoopLvl1 === 0) {\r\n                console.log('SECURITY LEVEL 1 EXIT');\r\n                break;\r\n            }\r\n\r\n            // Get the next token and the corresponding new (ending) position\r\n            [token, tokenPos, tokenType] = this.NextToken(expr, tokenPos);\r\n\r\n            switch (tokenType) {\r\n                case 'monom':\r\n                case 'coefficient':\r\n                case 'variable':\r\n                case 'constant':\r\n                    outQueue.push({\r\n                        token,\r\n                        tokenType\r\n                    });\r\n                    // if(previousOpStatckLength == opStack.length && outQueue.length>=2){\r\n                    //     console.log('opStatckLength', outQueue, opStack.length)\r\n                    //     outQueue.push('*')\r\n                    // }\r\n                    break;\r\n                case 'operation':\r\n                    previousOpStatckLength = opStack.length;\r\n                    //If the token is an operator, o1, then:\r\n                    if (opStack.length > 0) {\r\n                        let opTop = opStack[opStack.length - 1];\r\n\r\n\r\n                        securityLoopLvl2 = +securityLoopLvl2_default;\r\n\r\n                        //while there is an operator token o2, at the top of the operator stack and\r\n                        while (opTop.token in this._tokenConfig && (\r\n                                //either o1 is left-associative and its precedence is less than or equal to that of o2,\r\n                                (this._tokenConfig[token].associative === 'left' && this._tokenConfig[token].precedence <= this._tokenConfig[opTop.token].precedence)\r\n                                ||\r\n                                //or o1 is right associative, and has precedence less than that of o2,\r\n                                (this._tokenConfig[token].associative === 'right' && this._tokenConfig[token].precedence < this._tokenConfig[opTop.token].precedence)\r\n                            )\r\n                            ) {\r\n\r\n                            /* Security exit ! */\r\n                            securityLoopLvl2--;\r\n                            if (securityLoopLvl2 === 0) {\r\n                                console.log('SECURITY LEVEL 2 OPERATION EXIT');\r\n                                break;\r\n                            }\r\n\r\n                            // Add the operation to the queue\r\n                            outQueue.push((opStack.pop()) || {token: '', tokenType: 'operation'});\r\n\r\n                            // Get the next operation on top of the Stack.\r\n                            if(opStack.length===0){break;}\r\n                            opTop = opStack[opStack.length - 1];\r\n                        }\r\n                    }\r\n                    //at the end of iteration push o1 onto the operator stack\r\n                    opStack.push({token,tokenType});\r\n                    break;\r\n                case 'function-argument':\r\n                    // TODO: check if the opStack exist.\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 0) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 FUNCTION ARGUMENT EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n                    break;\r\n                case '(':\r\n                    opStack.push({token,tokenType});\r\n                    // Add an empty value if next element is negative.\r\n                    if (expr[tokenPos] === '-') {\r\n                        outQueue.push({token: '0', tokenType: 'coefficient'});\r\n                    }\r\n                    break;\r\n                case ')':\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    //Until the token at the top of the stack is a left parenthesis, pop operators off the stack onto the output queue.\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 1 /*Maybe zero !? */) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 CLOSING PARENTHESE EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n\r\n                    //Pop the left parenthesis from the stack, but not onto the output queue.\r\n                    opStack.pop();\r\n                    break;\r\n                case 'function':\r\n                    opStack.push({token, tokenType});\r\n                    break;\r\n                default:\r\n                    // In theory, everything should be handled.\r\n                    console.log(`SHUTING YARD: ${tokenType} : ${token} `);\r\n            }\r\n\r\n            // Output\r\n            // console.log(outQueue.concat(opStack.reverse()).join(\" \"));\r\n        }\r\n\r\n        // console.log(outQueue.concat(opStack.reverse()));\r\n        this._rpn = outQueue.concat(opStack.reverse());\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    // Getter\r\n    get rpn() {\r\n        // console.log(this._rpn)\r\n        return this._rpn;\r\n    }\r\n\r\n\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import {Numeric} from \"./maths/numeric\";\r\nimport {NumExp} from \"./maths/expressions/numexp\";\r\nimport {Shutingyard} from \"./maths/shutingyard\";\r\nimport {Random} from \"./maths/random\";\r\nimport {Fraction, Nthroot} from \"./maths/coefficients\";\r\nimport {\r\n    Monom,\r\n    Polynom,\r\n    Equation,\r\n    LinearSystem,\r\n    Rational,\r\n    Logicalset,\r\n    PolynomExpFactor,\r\n    PolynomExpProduct\r\n} from \"./maths/algebra\";\r\nimport {Line, Circle, Triangle, Point, Vector} from \"./maths/geometry\";\r\n\r\n// Expose as global\r\n// export let Pi = {\r\n(<any>window).Pi = {\r\n    ShutingYard: Shutingyard,\r\n    Numeric: Numeric,\r\n    NumExp: NumExp,\r\n    Fraction: Fraction,\r\n    Root: Nthroot,\r\n    Monom: Monom,\r\n    Polynom: Polynom,\r\n    Equation: Equation,\r\n    LinearSystem: LinearSystem,\r\n    Rational: Rational,\r\n    Logicalset: Logicalset,\r\n    Random: Random,\r\n    PolynomExpFactor: PolynomExpFactor,\r\n    PolynomExpProduct: PolynomExpProduct,\r\n    Geometry: {\r\n        Vector: Vector,\r\n        Point: Point,\r\n        Line: Line,\r\n        Triangle: Triangle,\r\n        Circle: Circle\r\n    }\r\n};\r\n"],"names":["Equation","_left","_right","_sign","_polynom","_solutions","_varnothing","_real","constructor","equations","this","Polynom","zero","length","clone","parse","left","right","isEquation","solutions","solution","tex","includes","map","x","join","isReal","undefined","solve","isVarnothing","signAsTex","display","raw","variables","Set","concat","numberOfVars","value","sign","_formatSign","equationString","pStr","strSign","_findSign","split","create","console","error","log","signStr","_reverseSign","replace","_randomizeDefaults","degree","randomizeDefaults","randomize","opts","moveLeft","subtract","reorder","allLeft","mMove","m","monoms","isZero","simplify","multiply","Numeric","lcm","getDenominators","divide","gcd","getNumerators","isolate","letter","isOne","isMultiVariable","cMove","hasLetter","add","opposed","coefficient","replaceBy","P","F","Fraction","invert","max","letters","_solveDegree1","_solveDegree2","_solveDegree3plus","isGreater","indexOf","isStrictEqual","isAlsoEqual","m1","monomByDegree","m0","v","s","NaN","exact","delta","nthDelta","realX1","realX2","sX1","sX2","aF","bF","cF","denominator","a","b","Math","sqrt","toFixed","Nthroot","reduce","hasRadical","S1","S2","dfrac","sol","LinearSystem","_resolutionSteps","_equations","_letters","equationStrings","isSolvable","V","E","sort","equStr","LS","equArray","equ","L","monomByLetter","push","repeat","_findLetters","setCoefficient","coefficients","i","slice","toString","setLetters","generate","solutionsF","_generateOneEquation","coeff","leftValue","equString","Random","numberSym","_checkIfLinerCombination","_linearReduction","eq1","eq2","c1","c2","mergeEquations","factor1","factor2","eq1multiplied","eq2multiplied","_solveOneLetter","LE","reducedEquations","str","_rawString","_rpn","isLogicalset","Shutingyard","ShutingyardMode","SET","rpn","evaluate","tokenSets","reference","referenceSet","varStack","key","token","tokenType","second","pop","first","filter","has","vennAB","A","B","vennABC","C","Monom","_coefficient","_literal","literal","literalSqrt","isLiteralSquare","literalStr","inputStr","matchAll","M","clean","Object","keys","isNotZero","isNotEqual","dividers","hasFractionCoefficient","numerator","abs","literals","_getLiteralDividers","monomDividers","N","one","arr","tmpList","d","litt","item","currentLetter","displayWithSign","texWithSign","isStrictlyPositive","tfrac","_shutingYardToReducedMonom","copyLiterals","static","stack","element","q1","q2","pow","ShutingyardType","COEFFICIENT","VARIABLE","setLetter","OPERATION","addToken","k","makeSame","isSameAs","multiplyByNumber","nb","root","p","isSquare","compare","isEqual","M1","M2","K","isRational","isEven","values","t","n","r","tmpValues","derivative","dM","primitive","coeffN","coeffD","min","areSameAs","areEquals","polynomString","_monoms","_factors","factors","_texString","texString","texFactors","factorize","f","genDisplay","_parseString","isNaN","Number","empty","shutingYardToReducedPolynom","test","fractions","isSafeInteger","multiplyByPolynom","multiplyByFraction","multiplyByMonom","multiplyByInteger","euclidian","quotient","reminder","maxMP","degreeP","newM","MaxIteration","geq","isPositive","divideByFraction","divideByInteger","cP1","cP2","isOpposedAt","isFactorized","match","e","polynomStringNormalized","replaceAll","polynomStringReduced","substr","polyFactors","splice","isDeveloped","j","S","resultPolynom","forEach","monom","dP","integrate","valuesA","valuesB","tempPolynom","commonMonom","securityLoop","m2","m1d","m2d","result","dividerPolynom","getZeroes","zeroes","zeroesAsTex","greater","D","x1","x2","z","frac","monomsByDegree","Ms","denominators","numerators","lcmDenominator","gcdDenominator","lcmNumerator","gcdNumerator","output","forceSign","wrapParentheses","CONSTANT","isRelative","MONOM","FUNCTION","xmultiply","nbF","_factorize2ndDegree","P1","P2","c","factor","xyzPolynom","xFactors","_factorizeByGroups","_numerator","_denominator","domain","amplify","NumeratorEuclidien","DenominatorEuclidien","R","limits","Infinity","denominatorOrPeriodic","isFraction","floor","infinite","invalid","Q","controlNumerator","lesser","g","compareFraction","than","leq","isOpposed","isInverted","isNegativeOne","isNegative","isStrictlyNegative","isInfinity","isFinite","isReduced","isNatural","isOdd","_radical","_nth","_isValid","radical","nth","nthroot","_expression","NUMERIC","isValid","expression","_extractDecimalPart","decimal","substring","_numberCorrection","epsilon","n9","n0","mod0","mod9","_addToStack","tokenConstant","sin","cos","tan","PolynomExpFactor","polynom","mathFunction","_degree","_fn","_powerAsInteger","_forceParenthesis","forceParenthesis","fn","powerAsInteger","isCoefficient","firstCoefficient","_texDegree","setForceParenthesis","PolynomExpProduct","_positive","_asPositiveDegree","positive","asPositiveDegree","parenthesis","numeratorsAsTex","denominatorsAsTex","name","polynoms","d1","d2","_integrateWithInternalDerivative","applyMathFunction","mathFn","Pinternal","internalDerivative","Circle","_center","_squareRadius","_cartesian","_exists","center","exists","squareRadius","radius","cx","cy","y","developed","cartesian","_calculateCartesian","_reset","_parseEquation","_parseCopyCircle","Point","_parseThroughtThreePoints","_parseCenterAndPointThrough","_parseCenterAndRadius","circle","square","pointThrough","Vector","normSquare","y1","y2","T","Triangle","mAB","remarquables","mediators","AB","mAC","AC","intersection","point","relativePosition","distance","distanceTo","lineIntersection","solX","intersectionPoints","equX","lineX","equation","lineY","LinePropriety","Line","_a","_b","_c","_OA","_d","_n","_referencePropriety","_referenceLine","Perpendicular","Parallel","canonical","mxh","slope","OA","height","parametric","pmatrix","normal","director","parseEquation","parseByPointAndVector","parseByPointAndNormal","parseByCoefficient","elem","delete","size","parseByPointAndLine","orientation","isParellelTo","line","isVertical","simplifyDirection","Pt","isParallel","isSame","hasIntersection","pt","fraction","hitSegment","iPt","getValueAtX","getValueAtY","canonicalAsFloatCoefficient","decimals","_x","_y","_exist","pts","xy","origin","middleOf","texValues","numberOfDigits","_A","_B","_C","_lines","_middles","_remarquables","getSegment","BA","BC","CB","CA","isRectangle","isNormalTo","isEquilateral","isIsocele","lines","intersect","_updateTriangle","_calculateRemarquableLines","getPointByName","ptName","toUpperCase","ptName1","ptName2","_calculateBisectors","medians","heights","bisectors","tlines","b1","norm","b2","reset","components","scalarProductWithVector","v1","v2","multiplyByScalar","scalar","divideByScalar","angleWith","sharp","radian","toDegree","PI","acos","round","primes","maxV","gcd2","config","rndPolynom","rndMonom","rndFraction","number","from","to","rndHelpers","randomInt","allowZero","randomIntSym","bool","percent","randomBool","array","randomArray","randomItem","shuffle","shuffleArray","_config","_defaultConfig","mergeConfig","defaultConfig","randomCore","userConfig","super","negative","reduced","natural","random","temp","unit","factorable","allowNullMonom","numberOfMonoms","_factorableConfig","pi","exp","_mode","_tokenConfig","_tokenConstant","_uniformize","_tokenKeys","mode","POLYNOM","tokenConfigInitialization","precedence","associative","type","NextToken","expr","start","Uniformizer","expr2","fnToken","RegExp","operators","outQueue","opStack","tokenPos","previousOpStatckLength","securityLoopLvl2","securityLoopLvl1","opTop","reverse","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","window","Pi","ShutingYard","NumExp","Root","Rational","Logicalset","Geometry"],"sourceRoot":""}