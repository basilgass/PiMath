{"version":3,"file":"pi.js","mappings":"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","sources":["webpack://pimath/./src/maths/numeric.ts","webpack://pimath/./src/maths/shutingyard.ts","webpack://pimath/./src/maths/random/randomCore.ts","webpack://pimath/./src/maths/coefficients/fraction.ts","webpack://pimath/./src/maths/algebra/monom.ts","webpack://pimath/./src/maths/random/rndMonom.ts","webpack://pimath/./src/maths/algebra/polynom.ts","webpack://pimath/./src/maths/random/rndPolynom.ts","webpack://pimath/./src/maths/random/rndHelpers.ts","webpack://pimath/./src/maths/random/index.ts","webpack://pimath/./src/maths/algebra/index.ts","webpack://pimath/./src/maths/coefficients/nthroot.ts","webpack://pimath/./src/maths/algebra/equation.ts","webpack://pimath/./src/maths/algebra/linearSystem.ts","webpack://pimath/./src/maths/geometry/vector.ts","webpack://pimath/./src/maths/geometry/point.ts","webpack://pimath/./src/maths/geometry/line.ts","webpack://pimath/./src/main.ts","webpack://pimath/./src/maths/algebra/rational.ts","webpack://pimath/./src/maths/algebra/logicalset.ts","webpack://pimath/./src/maths/geometry/triangle.ts","webpack://pimath/./src/maths/geometry/circle.ts"],"sourcesContent":["export class Numeric{\r\n    static round(value:number, decimals:number=2):number {\r\n        return Number(Math.round(Number(value+'e'+decimals))+'e-'+decimals);\r\n    }\r\n\r\n    /**\r\n     * Get the list of the nth first prime numbers.\r\n     * @param nb : number of primes to choose from\r\n     */\r\n    static prime(nb?:number):number[]{\r\n        let primes:number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973];\r\n        if(nb === undefined){\r\n            return primes;\r\n        }else{\r\n            return primes.slice(0,Math.max(primes.length,nb));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the list of all dividers of a number.\r\n     * @param value\r\n     */\r\n    static dividers(value:number):number[]{\r\n        let D: number[];\r\n        const maxV = Math.sqrt(Math.abs(value));\r\n\r\n        // Initialize the list of dividers.\r\n        D = [];\r\n\r\n        for(let i=1; i<=maxV; i++){\r\n            if(value%i===0){\r\n                D.push(i);\r\n                D.push(value/i);\r\n            }\r\n        }\r\n\r\n        // Order numbers.\r\n        D.sort(function(a, b){return a-b;});\r\n\r\n        // Make sure the array of value is unique.\r\n        return [...new Set(D)];\r\n    }\r\n    /**\r\n     * Great Common Divisor\r\n     * @param values : number values\r\n     */\r\n    static gcd(...values:number[]):number{\r\n        // Define the gcd for two number\r\n        let gcd2 = function(a:number,b:number):number{\r\n            if(b===0){return a;}\r\n            return gcd2(b, a%b);\r\n        };\r\n\r\n        let g:number = 1,\r\n            i:number = 2;\r\n\r\n        // Nothing is given\r\n        if(values.length===0){return 1;}\r\n        // Only one number is given\r\n        if(values.length===1){\r\n            // The first number is zero\r\n            if(values[0]===0){return 1;}\r\n            // Return the number\r\n            return values[0];\r\n        }\r\n\r\n        // We have at least 2 numbers.\r\n        g = gcd2(values[0],values[1]);\r\n\r\n        // The gcd of the two first value is one ? It's already finished.\r\n        if(g===1){return 1;}\r\n\r\n        // The current gcd isn't one. Continue with all next values.\r\n        for(i=2; i<values.length; i++){\r\n            g = gcd2(g, values[i]);\r\n            // Escape if gcd is already one.\r\n            if(g===1){break;}\r\n        }\r\n\r\n        return Math.abs(g);\r\n    }\r\n\r\n    /**\r\n     * Least Common Multiple\r\n     * @param values: list of numbers\r\n     */\r\n    static lcm(...values:number[]):number{\r\n        return values.reduce(function(a,b){\r\n            return Math.abs(a * b / Numeric.gcd(a, b));\r\n        });\r\n    }\r\n}","type tokenType = {\r\n    [key: string]: {\r\n        precedence: number,\r\n        associative: string\r\n    }\r\n}\r\n\r\nexport class Shutingyard {\r\n    private _rpn: { token: string, tokenType: string }[] = [];\r\n    readonly _mode: 'polynom' | 'set';\r\n    private _tokenConfig: tokenType;\r\n    private _uniformize: boolean;\r\n\r\n    constructor(mode?: 'polynom' | 'set') {\r\n        this._mode = typeof mode === 'undefined' ? 'polynom' : mode;\r\n        this.tokenConfigInitialization()\r\n    }\r\n\r\n    /**\r\n     * Determin if the token is a defined operation\r\n     * Defined operations: + - * / ^ sin cos tan\r\n     * @param token\r\n     */\r\n    isOperation(token: string): boolean {\r\n        if (token[0].match(/[+\\-*/^]/g)) {\r\n            return true;\r\n        }\r\n        //\r\n        // if (token.match(/^sin|cos|tan/g)) {\r\n        //     return true;\r\n        // }\r\n\r\n        return false;\r\n    }\r\n\r\n    tokenConfigInitialization(): tokenType {\r\n        if (this._mode === 'set') {\r\n            this._tokenConfig = {\r\n                '&': {precedence: 3, associative: 'left'},\r\n                '|': {precedence: 3, associative: 'left'},\r\n                '!': {precedence: 4, associative: 'right'},\r\n                '-': {precedence: 2, associative: 'left'}\r\n            }\r\n            this._uniformize = false;\r\n        } else {\r\n            this._tokenConfig = {\r\n                '^': {precedence: 4, associative: 'right'},\r\n                '*': {precedence: 3, associative: 'left'},\r\n                '/': {precedence: 3, associative: 'left'},\r\n                '+': {precedence: 2, associative: 'left'},\r\n                '-': {precedence: 2, associative: 'left'},\r\n                '%': {precedence: 3, associative: 'right'},\r\n                'sin': {precedence: 4, associative: 'right'},\r\n                'cos': {precedence: 4, associative: 'right'},\r\n                'tab': {precedence: 4, associative: 'right'},\r\n            }\r\n            this._uniformize = true\r\n        }\r\n        return this._tokenConfig\r\n    }\r\n\r\n    /**\r\n     * Get the next token to analyse.\r\n     * @param expr (string) Expression to analyse\r\n     * @param start (number) CUrrent position in the expr string.\r\n     */\r\n    NextToken2(expr: string, start: number): [string, number, string] {\r\n        let token: string, tokenType: string;\r\n        token = '';\r\n        tokenType = '';\r\n        // Case of parenthesis or comma (generic items)\r\n        if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        } else{\r\n            // Order token keys by token characters length (descending)\r\n            const keys = Object.keys(this._tokenConfig).sort((a,b)=>b.length-a.length)\r\n\r\n            for(let key of keys){\r\n                if(expr.substr(start, key.length) === key){\r\n                    token += key;\r\n                    tokenType = 'operation'\r\n                    break\r\n                }\r\n            }\r\n\r\n            if(token===''){\r\n                // No function found ! Might be a coefficient !\r\n                if( expr[start].match(/[0-9]/) ) {\r\n                    token = expr.substr(start).match(/^([0-9.,/]+)/)[0]\r\n                    tokenType = 'coefficient'\r\n                }else if (expr[start].match(/[a-zA-Z]/)) {\r\n                    token = expr.substr(start).match(/^([a-zA-Z])/)[0]\r\n                    tokenType = 'variable'\r\n                }else{\r\n                    console.log('Unidentified token', expr[start], expr, start)\r\n                    token = expr[start]\r\n                    tokenType = 'monom'\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n\r\n        // console.log(token, tokenType)\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    NextToken(expr: string, start: number): [string, number, string] {\r\n        let tokenMatch: string[], token: string, tokenType: string;\r\n\r\n        this.NextToken2(expr, start)\r\n        // Detect a fraction monoms or return empty array\r\n        tokenMatch = (expr.substr(start).match(/^[0-9/a-zA-Z^]+/g)) || [];\r\n\r\n        if (expr.substr(start, start + 3).match(/^(sin|cos|tan)/g)) {\r\n            token = expr.substr(start, 3)\r\n            tokenType = 'function'\r\n        } else if (tokenMatch.length > 0) {\r\n            token = tokenMatch[0];\r\n            tokenType = 'monom';\r\n        }\r\n        // It's an operation !\r\n        else if (expr[start].match(/[+\\-*/^]/g)) {\r\n            token = expr[start];\r\n            tokenType = 'operation';\r\n        } else if (expr[start].match(/[&|!]/g)) {\r\n            token = expr[start];\r\n            tokenType = 'operation';\r\n        }\r\n        // It's an opening parenthese\r\n        else if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        }\r\n        // It's a monom.\r\n        else {\r\n            // TODO: Actually, negative exposant aren't supported.\r\n            // token = (expr.substr(start).match(/^[\\da-z\\^]+/g)[0])||'';\r\n            token = tokenMatch[0];\r\n            tokenType = 'monom';\r\n\r\n            if (token === '') {\r\n                token = expr[start];\r\n                tokenType = 'monom';\r\n                console.log('SHUTING YARD - NEXT TOKEN: error at ', start);\r\n            }\r\n        }\r\n\r\n        // console.log(token, start + token.length, tokenType);\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    /**\r\n     * Sanitize an expression by adding missing common operation (multiplication between parentheseses)\r\n     * @param expr\r\n     * @constructor\r\n     */\r\n    Uniformizer(expr: string): string {\r\n        // Determiner if need to be uniformized\r\n        if(!this._uniformize){return expr}\r\n\r\n        let expr2;\r\n        // Replace missing multiplication between two parenthese\r\n        expr2 = expr.replace(/\\)\\(/g, ')*(');\r\n\r\n        // Replace missing multiplication between number or setLetter and parenthese.\r\n\r\n        // 3x(x-4) => 3x*(x-4)\r\n        expr2 = expr2.replace(/([\\da-zA-Z])(\\()/g, \"$1*$2\");\r\n\r\n        // (x-4)3x => (x-4)*3x\r\n        expr2 = expr2.replace(/(\\))([\\da-zA-Z])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between number and letters.\r\n        // 3x => 3*x\r\n        expr2 = expr2.replace(/([0-9])([a-zA-Z])/g, \"$1*$2\");\r\n        expr2 = expr2.replace(/([a-zA-Z])([0-9])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between letters ?\r\n        // TODO: More robust solution to handle all letters ?\r\n        expr2 = expr2.replace(/([abcxyz])([abcxyz])/g, \"$1*$2\");\r\n\r\n        // Restore operation auto formating (prevent adding the mutliplcation star)\r\n        // TODO: Accept list of functions\r\n        let fnToken = ['sin', 'cos', 'tan']\r\n        for (let token of fnToken) {\r\n            expr2 = expr2.replace(new RegExp(token + '\\\\*', 'g'), token);\r\n        }\r\n\r\n        return expr2;\r\n    }\r\n\r\n    /**\r\n     * Parse an expression using the shutting yard tree algorithms\r\n     * @param expr (string) Expression to analyse\r\n     * Returns a RPN list of items.\r\n     * @param operators\r\n     */\r\n    parse(expr: string, operators?: string[]): Shutingyard {\r\n        let outQueue: {token:string, tokenType: string}[] = [],    // Output queue\r\n            opStack: {token:string, tokenType: string}[] = [],     // Operation queue\r\n            token: string = '',\r\n            tokenPos: number = 0,\r\n            tokenType: string = '',\r\n            previousOpStatckLength = 0\r\n\r\n        expr = this.Uniformizer(expr);\r\n\r\n        let securityLoopLvl1 = 50,\r\n            securityLoopLvl2_default = 50,\r\n            securityLoopLvl2;\r\n\r\n        while (tokenPos < expr.length) {\r\n            securityLoopLvl1--;\r\n            if (securityLoopLvl1 === 0) {\r\n                console.log('SECURITY LEVEL 1 EXIT');\r\n                break;\r\n            }\r\n\r\n            // Get the next token and the corresponding new (ending) position\r\n            [token, tokenPos, tokenType] = this.NextToken2(expr, tokenPos);\r\n\r\n            switch (tokenType) {\r\n                case 'monom':\r\n                case 'coefficient':\r\n                case 'variable':\r\n                    outQueue.push({\r\n                        token,\r\n                        tokenType\r\n                    });\r\n                    // if(previousOpStatckLength == opStack.length && outQueue.length>=2){\r\n                    //     console.log('opStatckLength', outQueue, opStack.length)\r\n                    //     outQueue.push('*')\r\n                    // }\r\n                    break;\r\n                case 'operation':\r\n                    previousOpStatckLength = opStack.length;\r\n                    //If the token is an operator, o1, then:\r\n                    if (opStack.length > 0) {\r\n                        let opTop = opStack[opStack.length - 1];\r\n\r\n\r\n                        securityLoopLvl2 = +securityLoopLvl2_default;\r\n\r\n                        //while there is an operator token o2, at the top of the operator stack and\r\n                        while (opTop.token in this._tokenConfig && (\r\n                                //either o1 is left-associative and its precedence is less than or equal to that of o2,\r\n                                (this._tokenConfig[token].associative === 'left' && this._tokenConfig[token].precedence <= this._tokenConfig[opTop.token].precedence)\r\n                                ||\r\n                                //or o1 is right associative, and has precedence less than that of o2,\r\n                                (this._tokenConfig[token].associative === 'right' && this._tokenConfig[token].precedence < this._tokenConfig[opTop.token].precedence)\r\n                            )\r\n                            ) {\r\n\r\n                            /* Security exit ! */\r\n                            securityLoopLvl2--;\r\n                            if (securityLoopLvl2 === 0) {\r\n                                console.log('SECURITY LEVEL 2 OPERATION EXIT');\r\n                                break;\r\n                            }\r\n\r\n                            // Add the operation to the queue\r\n                            outQueue.push((opStack.pop()) || {token: '', tokenType: 'operation'});\r\n\r\n                            // Get the next operation on top of the Stack.\r\n                            if(opStack.length===0){break;}\r\n                            opTop = opStack[opStack.length - 1];\r\n                        }\r\n                    }\r\n                    //at the end of iteration push o1 onto the operator stack\r\n                    opStack.push({token,tokenType});\r\n                    break;\r\n                case 'function-argument':\r\n                    // TODO: check if the opStack exist.\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 0) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 FUNCTION ARGUMENT EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n                    break;\r\n                case '(':\r\n                    opStack.push({token,tokenType});\r\n                    // Add an empty value if next element is negative.\r\n                    if (expr[tokenPos] === '-') {\r\n                        outQueue.push({token: '0', tokenType: 'coefficient'});\r\n                    }\r\n                    break;\r\n                case ')':\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    //Until the token at the top of the stack is a left parenthesis, pop operators off the stack onto the output queue.\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 1 /*Maybe zero !? */) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 CLOSING PARENTHESE EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n\r\n                    //Pop the left parenthesis from the stack, but not onto the output queue.\r\n                    opStack.pop();\r\n                    break;\r\n                case 'function':\r\n                    opStack.push({token, tokenType});\r\n                    break;\r\n                default:\r\n                    // In theory, everything should be handled.\r\n                    console.log(`SHUTING YARD: ${tokenType} : ${token} `);\r\n            }\r\n\r\n            // Output\r\n            // console.log(outQueue.concat(opStack.reverse()).join(\" \"));\r\n        }\r\n\r\n        // console.log(outQueue.concat(opStack.reverse()));\r\n        this._rpn = outQueue.concat(opStack.reverse());\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    // Getter\r\n    get rpn() {\r\n        // console.log(this._rpn)\r\n        return this._rpn;\r\n    }\r\n\r\n\r\n}\r\n","export class randomCore {\r\n    protected _config: Object\r\n    protected _defaultConfig: Object\r\n    mergeConfig = (config: Object, defaultConfig: Object): Object => {\r\n        if (config !== undefined) {\r\n            return {...defaultConfig, ...config}\r\n        }\r\n        return defaultConfig\r\n    }\r\n\r\n    generate = (): unknown => {\r\n        return undefined\r\n    }\r\n\r\n    config = (config: Object): randomCore => {\r\n        this._config = this.mergeConfig(config, this._defaultConfig)\r\n        return this\r\n    }\r\n}","import {Numeric} from \"../numeric\";\r\n\r\nexport class Fraction {\r\n    private _numerator: number;\r\n    private _denominator: number;\r\n\r\n    constructor(value?: any, denominatorOrPeriodic?: number) {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n\r\n        if (value !== undefined) {\r\n            this.parse(value, denominatorOrPeriodic);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isFraction() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n\r\n    get numerator(): number {\r\n        return this._numerator;\r\n    }\r\n\r\n    set numerator(value: number) {\r\n        this._numerator = value;\r\n    }\r\n\r\n    get denominator(): number {\r\n        return this._denominator;\r\n    }\r\n\r\n    set denominator(value: number) {\r\n        this._denominator = value;\r\n    }\r\n\r\n    get value(): number {\r\n        return this._numerator / this._denominator;\r\n    }\r\n\r\n    // Display getter\r\n    get tex(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else if (this._numerator < 0) {\r\n            return `-\\\\frac{ ${-this._numerator} }{ ${this._denominator} }`;\r\n        } else {\r\n            return `\\\\frac{ ${this._numerator} }{ ${this._denominator} }`;\r\n        }\r\n    }\r\n\r\n    get display(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else {\r\n            return `${this._numerator}/${this._denominator}`;\r\n        }\r\n    }\r\n\r\n    // Helper function to display fractions\r\n    get frac(): string {\r\n        return this.tex;\r\n    }\r\n\r\n    get dfrac(): string {\r\n        return this.tex.replace('\\\\frac', '\\\\dfrac');\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse the value to get the numerator and denominator\r\n     * @param value : number or string to parse to get the fraction\r\n     * @param denominatorOrPeriodic (optional|number) : length of the periodic part: 2.333333 => 1 or denominator value\r\n     */\r\n    parse = (value: any, denominatorOrPeriodic?: number): Fraction => {\r\n        let S: string[];\r\n\r\n        // A null value means a zero fraction.\r\n        if (value === null || value === \"\") {\r\n            this._numerator = 0;\r\n            this._denominator = 1;\r\n            return this;\r\n        }\r\n\r\n        switch (typeof value) {\r\n            case \"string\":\r\n                // Split the sting value in two parts: Numerator/Denominator\r\n                S = value.split('/');\r\n\r\n                // Security checks\r\n                    if (S.length > 2) throw \"Two many divide signs\";\r\n                    if (S.map(x => x === '' || isNaN(Number(x))).includes(true)) throw \"Not a number\"\r\n\r\n\r\n                if (S.length === 1) {\r\n                    // No divide sign\r\n                    return this.parse(+S[0]);\r\n                } else if (S.length === 2) {\r\n                    // One divide signe\r\n                    // We check if the denominator is zero\r\n                    if (S[1] === '0') {\r\n                        this._numerator = NaN;\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._numerator = +S[0];\r\n                        this._denominator = +S[1];\r\n                    }\r\n                } else {\r\n                    // More than one divide sign ?\r\n                    this._numerator = NaN;\r\n                    this._denominator = 1;\r\n                }\r\n                break;\r\n            case \"number\":\r\n                if (Number.isSafeInteger(value)) {\r\n                    // The given value is an integer\r\n                    this._numerator = +value;\r\n\r\n                    if (denominatorOrPeriodic === undefined || !Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._denominator = +denominatorOrPeriodic;\r\n                    }\r\n                } else {\r\n                    // The given value is a float number\r\n\r\n                    // Get the number of decimals after the float sign\r\n                    let p: number = (value.toString()).split('.')[1].length;\r\n\r\n                    // Transform the float number in two integer\r\n                    if (denominatorOrPeriodic === undefined) {\r\n                        this._numerator = value * Math.pow(10, p);\r\n                        this._denominator = Math.pow(10, p);\r\n                    } else if (Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._numerator = value * Math.pow(10, p) - Math.floor(value * Math.pow(10, p - denominatorOrPeriodic));\r\n                        this.denominator = Math.pow(10, p) - Math.pow(10, p - denominatorOrPeriodic)\r\n                    }\r\n                }\r\n                break;\r\n            case \"object\":\r\n                if (value.isFraction) {\r\n                    this._numerator = +value.numerator;\r\n                    this._denominator = +value.denominator;\r\n                }\r\n                break;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): Fraction => {\r\n        let F = new Fraction();\r\n        F.numerator = +this._numerator;\r\n        F.denominator = +this._denominator;\r\n        return F;\r\n    };\r\n\r\n    zero = (): Fraction => {\r\n        this._numerator = 0;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    one = (): Fraction => {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    infinite = (): Fraction => {\r\n        this._numerator = Infinity;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    invalid = (): Fraction => {\r\n        this._numerator = NaN;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Fraction => {\r\n        this._numerator = -this._numerator;\r\n        return this;\r\n    };\r\n\r\n    add = (F: Fraction): Fraction => {\r\n        let N: number = this._numerator,\r\n            D: number = this._denominator;\r\n\r\n        this._numerator = N * F.denominator + F.numerator * D;\r\n        this._denominator = D * F.denominator;\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (F: Fraction): Fraction => {\r\n        return this.add(F.clone().opposed());\r\n    };\r\n\r\n    multiply = (F: Fraction | number): Fraction => {\r\n        // Parse the value.\r\n        // If it's a fraction, return a clone of it\r\n        // If it's an integer, return the fraction F/1\r\n        let Q = new Fraction(F);\r\n\r\n        this._numerator = this._numerator * Q.numerator;\r\n        this._denominator = this._denominator * Q.denominator;\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    divide = (F: Fraction | number): Fraction => {\r\n        let Q = new Fraction(F);\r\n\r\n        if (Q.numerator === 0) {\r\n            return new Fraction().infinite();\r\n        }\r\n\r\n        let N: number = +this._numerator,\r\n            D: number = +this._denominator;\r\n\r\n        this._numerator = N * Q.denominator;\r\n        this._denominator = D * Q.numerator;\r\n        return this.reduce();\r\n    };\r\n\r\n    invert = (): Fraction => {\r\n        let n = +this._numerator, d = +this._denominator;\r\n        this._numerator = d;\r\n        this._denominator = n;\r\n\r\n        return this;\r\n    }\r\n    pow = (p: number): Fraction => {\r\n        if (!Number.isSafeInteger(p)) {\r\n            return this.invalid();\r\n        }\r\n        this.reduce();\r\n\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        this._numerator = this._numerator ** Math.abs(p);\r\n        this._denominator = this._denominator ** Math.abs(p);\r\n        return this;\r\n    };\r\n\r\n    root = (p: number): Fraction => {\r\n        // TODO: nth - root of a fraction => this will return another type of coefficient.\r\n\r\n        // Check if they are perfect roots..\r\n        if (p === 0) {\r\n            return this;\r\n        }\r\n\r\n        // If negative, invert the fraction\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        let n = Math.pow(this._numerator, Math.abs(1 / p)),\r\n            d = Math.pow(this._denominator, Math.abs(1 / p));\r\n\r\n        this._numerator = Math.pow(this._numerator, Math.abs(1 / p));\r\n        this._denominator = Math.pow(this._denominator, Math.abs(1 / p));\r\n        return this;\r\n    }\r\n\r\n    sqrt = (): Fraction => {\r\n        return this.root(2);\r\n    }\r\n\r\n    abs = (): Fraction => {\r\n        this._numerator = Math.abs(this._numerator);\r\n        this._denominator = Math.abs(this._denominator);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations specific to fractions\r\n    // ------------------------------------------\r\n    reduce = (): Fraction => {\r\n        let g = Numeric.gcd(this._numerator, this._denominator);\r\n        this._numerator = this._numerator / g;\r\n        this._denominator = this._denominator / g;\r\n\r\n        if (this._denominator < 0) {\r\n            this._denominator = -this._denominator;\r\n            this._numerator = -this._numerator;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    amplify = (k: number): Fraction => {\r\n        if (Number.isSafeInteger(k)) {\r\n            this._numerator *= k;\r\n            this._denominator *= k;\r\n        }\r\n        return this;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param F (Coefficient) The coefficient to compare\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (F: Fraction, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n\r\n        switch (sign) {\r\n            case '>':\r\n                return this.value > F.value;\r\n            case \">=\" || \"=>\" || \"geq\":\r\n                return this.value >= F.value;\r\n            case \"<\":\r\n                return this.value < F.value;\r\n            case \"<=\" || \"=>\" || \"leq\":\r\n                return this.value <= F.value;\r\n            case \"=\":\r\n                // let F2: Fraction = F.clone().reduce(),\r\n                //     F1: Fraction = this.clone().reduce();\r\n                // return (F1.numerator === F2.numerator && F1.denominator === F2.denominator);\r\n                return this.value === F.value;\r\n            case \"<>\":\r\n                return this.value !== F.value;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n    /* Compare shortcuts */\r\n    lesser = (than: Fraction): Boolean => {\r\n        return this.compare(than, '<');\r\n    };\r\n    leq = (than: Fraction): Boolean => {\r\n        return this.compare(than, '<=');\r\n    };\r\n    greater = (than: Fraction): Boolean => {\r\n        return this.compare(than, '>');\r\n    };\r\n    geq = (than: Fraction): Boolean => {\r\n        return this.compare(than, '>=');\r\n    };\r\n    isEqual = (than: Fraction): boolean => {\r\n        return this.compare(than, '=');\r\n    }\r\n    isDifferent = (than: Fraction): boolean => {\r\n        return this.compare(than, '<>');\r\n    }\r\n    isOpposed = (p: Fraction): boolean => {\r\n        return this.isEqual(p.clone().opposed());\r\n    }\r\n    isInverted = (p: Fraction): boolean => {\r\n        return this.isEqual(new Fraction().one().divide(p.clone()));\r\n    }\r\n    isZero = (): boolean => {\r\n        return this._numerator === 0;\r\n    }\r\n    isOne = (): boolean => {\r\n        return this._numerator === 1 && this._denominator === 1;\r\n    }\r\n    isPositive = (): boolean => {\r\n        return this.sign()===1;\r\n    }\r\n    isNegative = (): boolean => {\r\n        return this.sign()===-1;\r\n    }\r\n    isNaN = (): boolean => {\r\n        return isNaN(this._numerator);\r\n    }\r\n    isInfinity = (): boolean => {\r\n        return this._numerator === Infinity;\r\n    }\r\n    isFinite = (): boolean => {\r\n        return !this.isInfinity();\r\n    }\r\n    isSquare = (): boolean => {\r\n        return Math.sqrt(this._numerator) % 1 === 0 && Math.sqrt(this._denominator) % 1 === 0\r\n    }\r\n    isReduced = (): boolean => {\r\n        return Math.abs(Numeric.gcd(this._numerator, this._denominator))===1\r\n    }\r\n    sign = (): number => {\r\n        return (this._numerator * this._denominator >= 0) ? 1 : -1;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Simple function to determine if it's a fraction\r\n     */\r\n    areEquals = (...F: Fraction[]): boolean => {\r\n        for (let i = 0; i < F.length; i++) {\r\n            if (!this.isEqual(F[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n}","/***\r\n * Monom class\r\n * Defined as coefficient * literal\r\n * Examples: 3x^2, 3/5x^2, ...\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Numeric} from \"../numeric\";\r\n\r\n    export class Monom {\r\n        private _coefficient: Fraction;\r\n        private _literal: { [Key: string]: number };\r\n\r\n        /**\r\n         * Create the monom object.\r\n         * @param value (optional) string\r\n         */\r\n        constructor(value?: string) {\r\n            this.zero();\r\n\r\n            if (value !== undefined) {\r\n                // A string is given - try to parse the value.\r\n                this.parse(value);\r\n            }\r\n\r\n            return this;\r\n        }\r\n\r\n        // ------------------------------------------\r\n        // Getter and setter\r\n        // ------------------------------------------\r\n        get isMonom() {\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * Get the coefficient as fraction\r\n         */\r\n        get coefficient(): Fraction {\r\n            return this._coefficient;\r\n        }\r\n\r\n        /**\r\n         * Set the coefficient value of the monom\r\n         * @param F     Fraction\r\n         */\r\n        set coefficient(F: Fraction) {\r\n            this._coefficient = F;\r\n        }\r\n\r\n        /**\r\n         * Get the literal part, as dictionary\r\n         */\r\n        get literal(): { [Key: string]: number } {\r\n            return this._literal;\r\n        }\r\n\r\n        get literalSqrt(): { [Key: string]: number } {\r\n\r\n            if (this.isLitteralSquare()) {\r\n                let L: { [Key: string]: number } = {}\r\n                for (let key in this._literal) {\r\n                    L[key] = this._literal[key] / 2\r\n                }\r\n                return L;\r\n            } else {\r\n                return this._literal;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Set the literal part of the monom\r\n         * @param L     Literal part as dictionary: <setLetter: exposant>\r\n         */\r\n        set literal(L: { [Key: string]: number }) {\r\n            this._literal = L;\r\n        }\r\n\r\n        /**\r\n         * Set the literal part of the monom from a string\r\n         * @param inputStr  String like x^2y^3\r\n         */\r\n        set literalStr(inputStr: string) {\r\n            // Match all x^n\r\n            for (const v of [...inputStr.matchAll(/([a-z])\\^([+-]?[0-9]+)/g)]) {\r\n                if (!(v[1] in this._literal)) {\r\n                    this._literal[v[1]] = 0;\r\n                }\r\n                this._literal[v[1]] += +v[2];\r\n            }\r\n            for (const v of [...inputStr.matchAll(/([a-z](?!\\^))/g)]) {\r\n                // Match all single letters\r\n                if (!(v[1] in this._literal)) {\r\n                    this._literal[v[1]] = 0;\r\n                }\r\n                this._literal[v[1]] += 1;\r\n            }\r\n        }\r\n\r\n        // Getter heplers.\r\n        /**\r\n         * Get the variables letters\r\n         */\r\n        get variables(): string[] {\r\n            this.clone().clean();\r\n            return Object.keys(this._literal)\r\n        }\r\n\r\n        // Display getter\r\n        /**\r\n         * This display getter is to be used in the polynom display getter\r\n         */\r\n        get display(): string {\r\n            let L: string = '';\r\n            for (let letter in this._literal) {\r\n                if (this._literal[letter] !== 0) {\r\n                    L += `${letter}`;\r\n                    if (this._literal[letter] > 1) {\r\n                        L += `^${this._literal[letter]}`;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (L === '') {\r\n                // No setLetter - means it's only a number !\r\n                if (this._coefficient.value != 0) {\r\n                    return `${this._coefficient.display}`;\r\n                } else {\r\n                    return '';\r\n                }\r\n            } else {\r\n                if (this._coefficient.value === 1) {\r\n                    return L;\r\n                } else if (this._coefficient.value === -1) {\r\n                    return `-${L}`;\r\n                } else if (this._coefficient.value === 0) {\r\n                    return '0';\r\n                } else {\r\n                    return `${this._coefficient.display}${L}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        get dividers(): Monom[] {\r\n            // Decompose only if the coefficient it a complet value\r\n            if (this.coefficient.denominator !== 1) {\r\n                return [this.clone()]\r\n            }\r\n\r\n            // Security : do not do this if greater than 10000\r\n            if (this.coefficient.numerator > 10000) {\r\n                return [this.clone()]\r\n            }\r\n            const dividers = Numeric.dividers(Math.abs(this.coefficient.numerator))\r\n\r\n            // Decompose the litterals parts.\r\n            let litterals: { [key: string]: number }[] = [];\r\n            for (let L in this.literal) {\r\n                // L is the letter.\r\n                litterals = this._getLitteralDividers(litterals, L)\r\n            }\r\n\r\n            const monomDividers: Monom[] = [];\r\n            if (litterals.length > 0 && dividers.length > 0) {\r\n                for (let N of dividers) {\r\n                    for (let L of litterals) {\r\n                        let M = new Monom();\r\n                        M.coefficient = new Fraction(N)\r\n                        M.literal = L\r\n                        monomDividers.push(M)\r\n                    }\r\n                }\r\n            } else if (dividers.length === 0) {\r\n                for (let L of litterals) {\r\n                    let M = new Monom();\r\n                    M.coefficient = new Fraction().one()\r\n                    M.literal = L\r\n                    monomDividers.push(M)\r\n                }\r\n            } else {\r\n                for (let N of dividers) {\r\n                    let M = new Monom();\r\n                    M.coefficient = new Fraction(N)\r\n                    monomDividers.push(M)\r\n                }\r\n            }\r\n\r\n            return monomDividers.length === 0 ? [new Monom().one()] : monomDividers;\r\n        }\r\n\r\n        private _getLitteralDividers(arr: { [key: string]: number }[], letter: string): { [key: string]: number }[] {\r\n            let tmpList: { [key: string]: number }[] = [];\r\n\r\n            for (let d = 0; d <= this.literal[letter]; d++) {\r\n                if (arr.length === 0) {\r\n                    let litt: { [key: string]: number } = {}\r\n                    litt[letter] = d\r\n                    tmpList.push(litt)\r\n                } else {\r\n                    for (let item of arr) {\r\n                        let litt: { [key: string]: number } = {}\r\n                        for (let currentLetter in item) {\r\n                            litt[currentLetter] = item[currentLetter]\r\n                        }\r\n                        litt[letter] = d\r\n                        tmpList.push(litt)\r\n                    }\r\n                }\r\n            }\r\n            return tmpList;\r\n        }\r\n\r\n        /**\r\n         * Display the monom, forcing the '+' sign to appear\r\n         */\r\n        get displayWithSign(): string {\r\n            // TODO: Rename or remove this getter ?\r\n            let d: String = this.display;\r\n            return (d[0] !== '-' ? '+' : '') + d;\r\n        }\r\n\r\n        /**\r\n         * Get the tex output of the monom\r\n         */\r\n        get tex(): string {\r\n            let L: string = '';\r\n            for (let letter in this._literal) {\r\n                if (this._literal[letter] !== 0) {\r\n                    L += `${letter}`;\r\n                    if (this._literal[letter] > 1) {\r\n                        L += `^${this._literal[letter]}`;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (L === '') {\r\n                // No setLetter - means it's only a number !\r\n                if (this._coefficient.value != 0) {\r\n                    return `${this._coefficient.dfrac}`;\r\n                } else {\r\n                    return '0';\r\n                }\r\n            } else {\r\n                if (this._coefficient.value === 1) {\r\n                    return L;\r\n                } else if (this._coefficient.value === -1) {\r\n                    return `-${L}`;\r\n                } else if (this._coefficient.value === 0) {\r\n                    return '0';\r\n                } else {\r\n                    return `${this._coefficient.dfrac}${L}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        // ------------------------------------------\r\n        // Creation / parsing functions\r\n        // -----------------------------------------\r\n        /**\r\n         * Parse a string to a monom. The string may include fraction.\r\n         * @param inputStr\r\n         */\r\n        parse = (inputStr: string): Monom => {\r\n            // Set the literal part.\r\n            this.literalStr = inputStr;\r\n\r\n            // Get the coefficient\r\n            this._coefficient = new Fraction();\r\n\r\n            for (const v of [...inputStr.replace(/([a-z])|(\\^[+-]?[0-9]+)/g, ',').split(',')]) {\r\n                // The value is empty.\r\n                if (v.trim() === '') {\r\n                    continue;\r\n                }\r\n\r\n                // Multiple the current coefficient by the new found value.\r\n                this._coefficient.multiply(new Fraction(v.trim()));\r\n            }\r\n\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Clone the current Monom.\r\n         */\r\n        clone = (): Monom => {\r\n            let F: Monom = new Monom();\r\n\r\n            F.coefficient = this._coefficient.clone();\r\n\r\n            // Copy the literal parts.\r\n            for (let k in this._literal) {\r\n                F.setLetter(k, this._literal[k]);\r\n            }\r\n            return F;\r\n        };\r\n\r\n        /**\r\n         * Create a zero value monom\r\n         */\r\n        zero = (): Monom => {\r\n            this._coefficient = new Fraction().zero();\r\n            this._literal = {};\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Create a one value monom\r\n         */\r\n        one = (): Monom => {\r\n            this._coefficient = new Fraction().one();\r\n            this._literal = {};\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Clean the monom by removing each letters with a power of zero.\r\n         */\r\n        clean = (): Monom => {\r\n            for (let letter in this._literal) {\r\n                if (this._literal[letter] === 0) {\r\n                    delete this._literal[letter];\r\n                }\r\n            }\r\n\r\n            return this;\r\n        };\r\n\r\n        // ------------------------------------------\r\n        // Mathematical operations\r\n        // ------------------------------------------\r\n\r\n        /**\r\n         * Get the opposed\r\n         * Returns a monom.\r\n         */\r\n        opposed = (): Monom => {\r\n            this._coefficient.opposed();\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Add all similar monoms. If they aren't similar, they are simply skipped.\r\n         * @param M (Monom[]) The monoms to add.\r\n         */\r\n        add = (...M: Monom[]): Monom => {\r\n            for (let m of M) {\r\n                if (this.isSameAs(m)) {\r\n                    this._coefficient.add(m.coefficient);\r\n                } else {\r\n                    console.log('Add: Is not similar: ', m.display);\r\n                }\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Subtract multiple monoms\r\n         * @param M (Monom[]) The monoms to subtract\r\n         */\r\n        subtract = (...M: Monom[]): Monom => {\r\n            for (let m of M) {\r\n                if (this.isSameAs(m)) {\r\n                    this._coefficient.add(m.coefficient.clone().opposed());\r\n                } else {\r\n                    console.log('Subtract: Is not similar: ', m.display);\r\n                }\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Multiple multiple monoms to the current monom\r\n         * @param M (Monom[]) The monoms to multiply to.\r\n         */\r\n        multiply = (...M: Monom[]): Monom => {\r\n            for (let m of M) {\r\n                // Multiply the coefficient.\r\n                this._coefficient.multiply(m.coefficient);\r\n                // Multiply the literal parts.\r\n                for (let letter in m.literal) {\r\n                    this._literal[letter] = (this._literal[letter] === undefined) ? m.literal[letter] : this._literal[letter] + m.literal[letter];\r\n                }\r\n            }\r\n            return this;\r\n        };\r\n\r\n        multiplyByNumber = (F: Fraction | number): Monom => {\r\n            this._coefficient.multiply(F);\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Divide the current monoms by multiple monoms\r\n         * @param M (Monom[])\r\n         */\r\n        divide = (...M: Monom[]): Monom => {\r\n            // Depending on the given value, choose the current item\r\n            for (let v of M) {\r\n                // Divide the coefficient\r\n                this._coefficient.divide(v.coefficient);\r\n\r\n                // Subtract the power values\r\n                for (let letter in v.literal) {\r\n                    this._literal[letter] = (this._literal[letter] === undefined) ? -v.literal[letter] : this._literal[letter] - v.literal[letter];\r\n\r\n                    // If the power of a particular setLetter is zero, delete it from the literal part..\r\n                    if (this._literal[letter] === 0) {\r\n                        delete this._literal[letter];\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Get the pow of a monom.\r\n         * @param nb (number) : Mathematical pow\r\n         */\r\n        pow = (nb: number): Monom => {\r\n            this._coefficient.pow(nb);\r\n            for (let letter in this._literal) {\r\n                this._literal[letter] *= nb;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Get the nth-root of the monom\r\n         * @param p\r\n         */\r\n        root = (p: number): Monom => {\r\n            // TODO: determiner the nth root of a monom\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Return the square root of a monom\r\n         */\r\n        sqrt = (): Monom => {\r\n            if (this.isSquare()) {\r\n                this._coefficient.sqrt();\r\n                for (let letter in this._literal) {\r\n                    this._literal[letter] /= 2;\r\n                }\r\n            }\r\n            return this.root(2);\r\n        }\r\n\r\n        // ------------------------------------------\r\n        // Compare functions\r\n        // ------------------------------------------\r\n        compare = (M: Monom, sign?: string): boolean => {\r\n            // TODO: Build the compare systems.\r\n            if (sign === undefined) {\r\n                sign = '=';\r\n            }\r\n\r\n\r\n            switch (sign) {\r\n                case '=':\r\n                    // To be equal, they must be the isSame\r\n                    if (!this.compare(M, 'same')) {\r\n                        return false;\r\n                    }\r\n\r\n                    // The litteral parts are the isSame. The coefficient must be equal\r\n                    return this._coefficient.isEqual(M.coefficient);\r\n                case 'same':\r\n                    // Get the list of all variables from both monoms.\r\n                    let M1: string[] = this.variables,\r\n                        M2: string[] = M.variables,\r\n                        K: string[] = M1.concat(M2.filter((item) => M1.indexOf(item) < 0));\r\n\r\n                    for (let key of K) {\r\n                        // The setLetter is not available in one of the monom\r\n                        if (this._literal[key] === undefined || M.literal[key] === undefined) {\r\n                            return false;\r\n                        }\r\n                        // The setLetter does not have the isSame power in each monoms.\r\n                        if (this._literal[key] !== M.literal[key]) {\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    // All are positive check - the monoms are the sames.\r\n                    return true;\r\n                default:\r\n                    return false;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Determine if the monom is null\r\n         */\r\n        isZero(): boolean {\r\n            return this._coefficient.value === 0;\r\n        }\r\n\r\n        /**\r\n         * Determine if the monom is one\r\n         */\r\n        isOne(): boolean {\r\n            return this._coefficient.value === 1 && this.variables.length === 0;\r\n        }\r\n\r\n        /**\r\n         * Determine if two monoms are equals\r\n         * @param M\r\n         */\r\n        isEqual = (M: Monom): boolean => {\r\n            return this.compare(M, '=');\r\n        };\r\n\r\n        /**\r\n         * Determine if two monoms are similar\r\n         * @param M\r\n         */\r\n        isSameAs = (M: Monom): boolean => {\r\n            return this.compare(M, 'same');\r\n        };\r\n\r\n        isSquare = (): boolean => {\r\n            if (!this.coefficient.isSquare()) {\r\n                return false;\r\n            }\r\n            return this.isLitteralSquare();\r\n        }\r\n\r\n        isLitteralSquare = (): boolean => {\r\n            for (let letter in this.literal) {\r\n                if (this.literal[letter] % 2 !== 0) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        // ------------------------------------------\r\n        // Misc monoms functions\r\n        // -------------------------------------\r\n        /**\r\n         * Determine if a monom contains a setLetter in it's literal part\r\n         * @param letter\r\n         */\r\n        hasLetter = (letter?: string): boolean => {\r\n            return this._literal[letter === undefined ? 'x' : letter] > 0;\r\n        };\r\n\r\n        /**\r\n         * Set the power of a particular setLetter\r\n         * @param letter (string) Letter to change\r\n         * @param pow (number) Power of the setLetter (must be positive integer.\r\n         */\r\n        setLetter = (letter: string, pow: number): void => {\r\n            // If the power is not legal or is zero, remove the setLetter from the dict\r\n            if (pow <= 0 || !Number.isSafeInteger(pow)) {\r\n                if (this._literal[letter] !== undefined) {\r\n                    delete this._literal[letter];\r\n                }\r\n            } else {\r\n                this._literal[letter] = pow;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Get the degree of a monom. If no setLetter is given, the result will be the global degree.\r\n         * @param letter (string) Letter to get to degree (power)\r\n         */\r\n        degree = (letter?: string): number => {\r\n            if (this.variables.length === 0) {\r\n                return 0;\r\n            }\r\n            if (letter === undefined) {\r\n                // Not setLetter given -> we get the global monom degree (sum of all the letters).\r\n                return Object.values(this._literal).reduce((t, n) => t + n);\r\n            } else {\r\n                // A setLetter is given -> get the corresponding power.\r\n                return this._literal[letter] === undefined ? 0 : this._literal[letter];\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Evaluate a monom. Each setLetter must be assigned to a Fraction.\r\n         * @param values    Dictionary of <setLetter: Fraction>\r\n         */\r\n        evaluate = (values: { [key: string]: Fraction | number } | Fraction | number): Fraction => {\r\n            let r = this.coefficient.clone();\r\n\r\n            if (typeof values === 'number' || values instanceof Fraction) {\r\n                let tmpValues: { [key: string]: Fraction | number } = {}\r\n\r\n                tmpValues[this.variables[0]] = new Fraction(values)\r\n                return this.evaluate(tmpValues);\r\n            }\r\n\r\n            if (typeof values === 'object') {\r\n                for (let L in this._literal) {\r\n                    if (values[L] === undefined) {\r\n                        return new Fraction().zero();\r\n                    }\r\n                    let value = new Fraction(values[L])\r\n                    r.multiply(value.pow(this._literal[L]));\r\n                }\r\n            }\r\n            return r;\r\n        };\r\n\r\n        /**\r\n         * Derivative the monom\r\n         * @param letter\r\n         */\r\n        derivative = (letter?: string): Monom => {\r\n            // No setLetter given - assume it's the setLetter 'x'\r\n            if (letter === undefined) {\r\n                letter = 'x';\r\n            }\r\n            if (this.hasLetter(letter)) {\r\n                let d = +this._literal[letter],\r\n                    dM = this.clone();\r\n\r\n                // Subtract one to the degree.\r\n                dM._literal[letter] -= 1;\r\n\r\n                // Multiply the coefficient by the previous degree\r\n                dM._coefficient.multiply(new Fraction('' + d));\r\n                return dM;\r\n            } else {\r\n                return new Monom().zero();\r\n            }\r\n        };\r\n\r\n        primitive = (letter?: string): Monom => {\r\n            if (letter === undefined) {\r\n                letter = 'x'\r\n            }\r\n\r\n            // Zero monom\r\n            let M = this.clone()\r\n\r\n            if (M.hasLetter(letter)) {\r\n                M.coefficient = M.coefficient.clone().divide(M.degree(letter) + 1)\r\n                M.setLetter(letter, M.degree(letter) + 1)\r\n            } else {\r\n                // There is no letter.\r\n\r\n                // The coefficient might be zero (=> x) or a number a (=> ax)\r\n                if (M.coefficient.isZero()) {\r\n                    M.coefficient = new Fraction().one()\r\n                }\r\n                M.setLetter(letter, 1)\r\n            }\r\n            return M\r\n        }\r\n        // ----------------------------------------\r\n        // Static functions\r\n        // ----------------------------------------\r\n\r\n        /**\r\n         * Get the least common multiple of monoms\r\n         * @param monoms    Array of monoms\r\n         */\r\n        static lcm = (...monoms: Monom[]): Monom => {\r\n            let M = new Monom(),\r\n                coeffN: number[] = monoms.map(value => value.coefficient.numerator),\r\n                coeffD: number[] = monoms.map(value => value.coefficient.denominator),\r\n                n = Numeric.gcd(...coeffN),\r\n                d = Numeric.lcm(...coeffD);\r\n\r\n            // Get the coefficient.\r\n            M.coefficient = new Fraction(n, d).reduce();\r\n\r\n            // Set the literal parts - go through each monoms literal parts and get only the lowest degree of each letters.\r\n            for (let m of monoms) {\r\n                // Remove the inexistant letters from the resulting monom\r\n                for (let letter in M.literal) {\r\n                    if (!(letter in m.literal)) {\r\n                        M.literal[letter] = 0;\r\n                    }\r\n                }\r\n                for (let letter in m.literal) {\r\n                    if (M.literal[letter] === undefined && m.literal[letter] > 0) {\r\n                        M.literal[letter] = m.literal[letter];\r\n                    } else {\r\n                        M.literal[letter] = Math.min(m.literal[letter], M.literal[letter]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return M;\r\n        };\r\n\r\n        /**\r\n         * Multiply two monoms and return a NEW monom.\r\n         * @param monoms\r\n         */\r\n        static xmultiply = (...monoms: Monom[]): Monom => {\r\n            let M = new Monom().one();\r\n\r\n            for (let m of monoms) {\r\n                M.multiply(m);\r\n            }\r\n\r\n            return M;\r\n        };\r\n\r\n\r\n        // TODO: The rest of the functions are not used or unnecessary ?\r\n        /**\r\n         * Determine if multiple monoms are similar\r\n         * @param M\r\n         */\r\n        areSameAs = (...M: Monom[]): boolean => {\r\n            let result: boolean = true;\r\n\r\n            // Check all monoms if they are the isSame as the \"this\" one.\r\n            for (let i = 0; i < M.length; i++) {\r\n                if (!this.isSameAs(M[i])) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // All check passed -> all the monoms are similar.\r\n            return result;\r\n        };\r\n\r\n        /**\r\n         * Determine if multiple monoms are equals\r\n         * @param M\r\n         */\r\n        areEquals = (...M: Monom[]): boolean => {\r\n            // They are not similar.\r\n            if (!this.areSameAs(...M)) {\r\n                return false;\r\n            }\r\n\r\n            // Check all coefficient. They must be equals.\r\n            for (let m of M) {\r\n                if (!this._coefficient.isEqual(m.coefficient)) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // All checks passed.\r\n            return true;\r\n        };\r\n\r\n    }\r\n","import {randomCore} from \"./randomCore\";\r\nimport {randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {Random} from \"./index\";\r\nimport {Monom} from \"../algebra/monom\";\r\n\r\n/**\r\n * Create a random monom based on a based configuration\r\n */\r\n    export class rndMonom extends randomCore {\r\n        declare protected _config: randomMonomConfig\r\n        declare protected _defaultConfig: randomPolynomConfig\r\n\r\n        constructor(userConfig?: randomMonomConfig) {\r\n            super();\r\n\r\n            this._defaultConfig = {\r\n                letters: 'x',\r\n                degree: 2,\r\n                fraction: true,\r\n                zero: false\r\n            }\r\n\r\n            this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n        }\r\n\r\n        generate = (): Monom => {\r\n            // Create a monom instance\r\n            let M = new Monom()\r\n\r\n            // Generate the coefficient\r\n            M.coefficient.parse(Random.numberSym(10, this._config.zero), (this._config.fraction) ? Random.number(1, 10) : 1).reduce();\r\n\r\n            // Calculate the degree of the monom\r\n            if (this._config.letters.length > 1) {\r\n                // Initialise each items...\r\n                for (let L of this._config.letters.split('')) {\r\n                    M.setLetter(L, 0);\r\n                }\r\n                for (let i = 0; i < this._config.degree; i++) {\r\n                    const L = Random.item(this._config.letters.split(\"\"))\r\n                    M.setLetter(L, M.degree(L) + 1)\r\n                }\r\n            } else {\r\n                M.setLetter(this._config.letters, this._config.degree)\r\n            }\r\n\r\n            return M\r\n        }\r\n    }\r\n","/**\r\n * Polynom module contains everything necessary to handle polynoms.*\r\n * @module Polynom\r\n */\r\n\r\nimport {Monom} from './monom';\r\nimport {Shutingyard} from '../shutingyard';\r\nimport {Numeric} from '../numeric';\r\nimport {Random} from \"../random\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n * ```\r\n * let P = new Polynom('3x-4')\r\n * ```\r\n */\r\n    export class Polynom {\r\n        private _rawString: string;\r\n        private _monoms: Monom[];\r\n        private _factors: Polynom[];\r\n        private _texString: string;\r\n\r\n        /**\r\n         *\r\n         * @param {string} polynomString (optional) Default polynom to parse on class creation\r\n         * @param values\r\n         */\r\n        constructor(polynomString?: string, ...values: any[]) {\r\n            this._monoms = [];\r\n            this._factors = [];\r\n            if (polynomString !== undefined) {\r\n                this.parse(polynomString, ...values);\r\n            }\r\n            return this;\r\n        }\r\n\r\n        get isPolynom() {\r\n            return true;\r\n        };\r\n\r\n\r\n        // ------------------------------------------\r\n        // Getter and setter\r\n        // ------------------------------------------\r\n        get monoms() {\r\n            return this._monoms;\r\n        }\r\n\r\n        set monoms(M: Monom[]) {\r\n            this._monoms = M;\r\n        }\r\n\r\n        get factors(): Polynom[] {\r\n            return this._factors;\r\n        }\r\n\r\n        set factors(value: Polynom[]) {\r\n            this._factors = value;\r\n        }\r\n\r\n        get texFactors(): string {\r\n            this.factorize()\r\n\r\n            let tex = ''\r\n            for (let f of this.factors) {\r\n                if (f.monoms.length > 1) {\r\n                    tex += `(${f.tex})`\r\n                } else {\r\n                    tex = f.tex + tex;\r\n                }\r\n            }\r\n            return tex;\r\n        }\r\n\r\n        get texString(): string {\r\n            return this._texString;\r\n        }\r\n\r\n        get length() {\r\n            // TODO: Must reduce the monoms list to remove the zero coefficient.\r\n            return this._monoms.length;\r\n        }\r\n\r\n        get display(): string {\r\n            return this.genDisplay();\r\n        }\r\n\r\n        get raw(): string {\r\n            return this._rawString\r\n        }\r\n\r\n        get tex(): string {\r\n            return this.genDisplay('tex');\r\n        }\r\n\r\n        get isMultiVariable(): boolean {\r\n            const B = false;\r\n            for (const m of this._monoms) {\r\n                if (m.variables.length > 1) {\r\n                    return true;\r\n                }\r\n            }\r\n            return B;\r\n        }\r\n\r\n        get variables(): string[] {\r\n            let V: string[] = [];\r\n\r\n            for (const m of this._monoms) {\r\n                V = V.concat(m.variables);\r\n            }\r\n\r\n            // Remove duplicates.\r\n            V = [...new Set(V)];\r\n\r\n            return V;\r\n        }\r\n\r\n        get numberOfVars(): number {\r\n            return this.variables.length;\r\n        }\r\n\r\n        private genDisplay = (output?: string, forceSign?: boolean, wrapParentheses?: boolean): string => {\r\n            let P: string = '';\r\n\r\n            for (const k of this._monoms) {\r\n                if (k.coefficient.value === 0) {\r\n                    continue;\r\n                }\r\n\r\n                P += `${(k.coefficient.sign() === 1 && (P !== '' || forceSign === true)) ? '+' : ''}${(output === 'tex') ? k.tex : k.display}`;\r\n            }\r\n\r\n            if (wrapParentheses === true && this.length > 1) {\r\n                if (output === 'tex') {\r\n                    P = `\\\\left( ${P} \\\\right)`;\r\n                } else {\r\n                    P = `(${P})`;\r\n                }\r\n            }\r\n\r\n            if (P === '') {\r\n                P = '0';\r\n            }\r\n            return P;\r\n        };\r\n\r\n\r\n        // ------------------------------------------\r\n        // Creation / parsing functions\r\n        // ------------------------------------------\r\n        /**\r\n         * Parse a string to a polynom.\r\n         * @param inputStr\r\n         * @param values: as string, numbers or fractions\r\n         */\r\n        parse = (inputStr: string, ...values: any[]): Polynom => {\r\n            if (values === undefined || values.length === 0) {\r\n                inputStr = '' + inputStr;\r\n                this._rawString = inputStr;\r\n\r\n                // Parse the polynom using the shuting yard algorithm\r\n                if (inputStr !== '' && !isNaN(Number(inputStr))) {\r\n                    this.empty();\r\n                    // It's a simple number.\r\n                    let m = new Monom();\r\n                    m.coefficient = new Fraction(inputStr);\r\n                    m.literalStr = '';\r\n                    this.add(m);\r\n                    return this;\r\n                }\r\n\r\n                // Parse the string.\r\n                return this.shutingYardToReducedPolynom(inputStr);\r\n            } else if (/^[a-z]/.test(inputStr)) {\r\n                // We assume the inputStr contains only letters.\r\n                this.empty();\r\n\r\n                let fractions = values.map(x => new Fraction(x));\r\n                // Multiple setLetter version\r\n                if (inputStr.length > 1) {\r\n                    // TODO: check that the number of values given correspond to the letters (+1 eventually)\r\n                    let letters = inputStr.split(''),\r\n                        i = 0;\r\n                    for (let F of fractions) {\r\n                        let m = new Monom();\r\n                        m.coefficient = F.clone();\r\n                        m.literalStr = letters[i] || '';\r\n                        this.add(m);\r\n                        i++;\r\n                    }\r\n                }\r\n                // Single setLetter version\r\n                else {\r\n                    let n = fractions.length - 1;\r\n                    for (let F of fractions) {\r\n                        let m = new Monom()\r\n                        m.coefficient = F.clone();\r\n                        m.literalStr = `${inputStr}^${n}`\r\n                        this.add(m);\r\n                        n--;\r\n                    }\r\n                }\r\n                return this;\r\n            } else {\r\n                return this.zero();\r\n            }\r\n\r\n        };\r\n\r\n        /**\r\n         * Main parse using a shutting yard class\r\n         * @param inputStr\r\n         */\r\n        private shutingYardToReducedPolynom = (inputStr: string): Polynom => {\r\n            // Get the RPN array of the current expression\r\n            const SY: Shutingyard = new Shutingyard().parse(inputStr);\r\n            const rpn: { token: string, tokenType: string }[] = SY.rpn;\r\n            let m1: Polynom;\r\n            let m2: Polynom;\r\n\r\n            let stack: Polynom[] = [],\r\n                previousToken: string = null,\r\n                tempPolynom\r\n            for (const element of rpn) {\r\n                if (element.tokenType === 'coefficient' || element.tokenType === 'variable') {\r\n                    tempPolynom = new Polynom().zero();\r\n                    tempPolynom.monoms = [new Monom(element.token)]\r\n                    stack.push(tempPolynom.clone())\r\n                } else if (element.tokenType === 'operation') {\r\n                    m2 = (stack.pop()) || new Polynom().zero();\r\n                    m1 = (stack.pop()) || new Polynom().zero();\r\n                    switch (element.token) {\r\n                        case '+':\r\n                            stack.push(m1.add(m2))\r\n                            break;\r\n                        case '-':\r\n                            stack.push(m1.subtract(m2))\r\n                            break;\r\n                        case '*':\r\n                            stack.push(m1.multiply(m2))\r\n                            break;\r\n                        case '^':\r\n                            stack.push(m1.pow(+previousToken))\r\n                    }\r\n                }\r\n                previousToken = element.token;\r\n            }\r\n\r\n            this._monoms = stack[0].monoms;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Clone the polynom\r\n         */\r\n        clone = (): Polynom => {\r\n            const P = new Polynom();\r\n            const M: Monom[] = [];\r\n\r\n            for (const m of this._monoms) {\r\n                M.push(m.clone());\r\n            }\r\n\r\n            P.monoms = M;\r\n            return P;\r\n        };\r\n\r\n        /**\r\n         * Set the polynom to zero.\r\n         * @returns {this}\r\n         */\r\n        zero = (): Polynom => {\r\n            this._monoms = [];\r\n            this._monoms.push(new Monom().zero());\r\n            this._rawString = '0';\r\n            return this;\r\n        };\r\n\r\n        one = (): Polynom => {\r\n            this._monoms = [];\r\n            this._monoms.push(new Monom().one());\r\n            this._rawString = '1';\r\n            return this;\r\n        }\r\n\r\n        empty = (): Polynom => {\r\n            this._monoms = [];\r\n            this._rawString = '';\r\n            return this;\r\n        };\r\n\r\n        // -----------------------------------------------\r\n        // Polynom generators and randomizers\r\n        // -----------------------------------------------\r\n        private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n            degree: 2,\r\n            unit: true,\r\n            fractions: false,\r\n            factorable: false,\r\n            letters: 'x',\r\n            allowNullMonom: false,\r\n            numberOfMonoms: false\r\n        };\r\n        get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n            return this._randomizeDefaults;\r\n        }\r\n\r\n        set randomizeDefaults(value) {\r\n            this._randomizeDefaults = value;\r\n        }\r\n\r\n        randomize = (config: { [key: string]: number | string | boolean }): Polynom => {\r\n            let P = new Polynom();\r\n\r\n            // Check the config file and use the default values.\r\n            if (config === undefined) {\r\n                config = {};\r\n            }\r\n            for (let k in this._randomizeDefaults) {\r\n                if (config[k] === undefined) {\r\n                    config[k] = this._randomizeDefaults[k];\r\n                }\r\n            }\r\n\r\n            // TODO: Build a more robust randomize function\r\n            return P;\r\n        }\r\n\r\n        rndFactorable = (degree: number = 2, unit: boolean | number = false, letters: string = 'x'): Polynom => {\r\n            // TODO: Make rndFactorable polynom generator more user friendly\r\n            this._factors = [];\r\n            for (let i = 0; i < degree; i++) {\r\n                let factorUnit = unit === true || i >= unit,\r\n                    p = Random.polynom({\r\n                        degree: 1,\r\n                        unit: factorUnit,\r\n                        fraction: false,\r\n                        letters\r\n                    });\r\n                this._factors.push(p);\r\n            }\r\n\r\n            this.empty().monoms = this._factors[0].monoms;\r\n            for (let i = 1; i < this._factors.length; i++) {\r\n                this.multiply(this._factors[i]);\r\n            }\r\n            return this;\r\n        };\r\n\r\n        // ------------------------------------------\r\n        // Mathematical operations\r\n        // ------------------------------------------\r\n        opposed = (): Polynom => {\r\n            this._monoms = this._monoms.map(m => m.opposed());\r\n            return this;\r\n        };\r\n\r\n        add = (...values: any[]): Polynom => {\r\n\r\n            for (let value of values) {\r\n                if (value.isPolynom) {\r\n                    this._monoms = this._monoms.concat(value.monoms);\r\n                } else if (value.isMonom) {\r\n                    this._monoms.push(value.clone());\r\n                } else if (Number.isSafeInteger(value)) {\r\n                    this._monoms.push(new Monom(value.toString()));\r\n                } else {\r\n                    this._monoms.push(new Monom(value));\r\n                }\r\n            }\r\n\r\n            return this.reduce();\r\n        };\r\n\r\n        subtract = (...values: any[]): Polynom => {\r\n\r\n            for (let value of values) {\r\n                if (value.isPolynom) {\r\n                    this._monoms = this._monoms.concat(value.clone().opposed().monoms);\r\n                } else if (value.isMonom) {\r\n                    this._monoms.push(value.clone().opposed());\r\n                } else if (Number.isSafeInteger(value)) {\r\n                    this._monoms.push(new Monom(value.toString()).opposed());\r\n                } else {\r\n                    this._monoms.push(new Monom(value).opposed());\r\n                }\r\n            }\r\n\r\n            return this.reduce();\r\n        };\r\n\r\n        multiply = (value: any): Polynom => {\r\n            if (value.isPolynom) {\r\n                return this.multiplyByPolynom(value);\r\n            } else if (value.isFraction) {\r\n                return this.multiplyByFraction(value);\r\n            } else if (value.isMonom) {\r\n                return this.multiplyByMonom(value);\r\n            } else if (Number.isSafeInteger(value)) {\r\n                return this.multiplyByInteger(value);\r\n            }\r\n\r\n            // Something went wrong...\r\n            return this;\r\n        }\r\n\r\n        private multiplyByPolynom = (P: Polynom): Polynom => {\r\n            const M: Monom[] = [];\r\n            for (const m1 of this._monoms) {\r\n                for (const m2 of P.monoms) {\r\n                    M.push(Monom.xmultiply(m1, m2));\r\n                }\r\n            }\r\n\r\n            this._monoms = M;\r\n            return this.reduce();\r\n        };\r\n\r\n        private multiplyByFraction = (F: Fraction): Polynom => {\r\n            for (const m of this._monoms) {\r\n                m.coefficient.multiply(F);\r\n            }\r\n\r\n            return this.reduce();\r\n        };\r\n\r\n        private multiplyByInteger = (nb: number): Polynom => {\r\n            return this.multiplyByFraction(new Fraction(nb));\r\n        };\r\n\r\n        private multiplyByMonom = (M: Monom): Polynom => {\r\n            for (const m of this._monoms) {\r\n                m.multiply(M)\r\n            }\r\n            return this.reduce();\r\n        };\r\n\r\n        /**\r\n         * Divide the current polynom by another polynom.\r\n         * @param P\r\n         * returns {quotient: Polynom, reminder: Polynom}\r\n         */\r\n        euclidian = (P: Polynom): { quotient: Polynom, reminder: Polynom } => {\r\n            const letter: string = P.variables[0];\r\n            const quotient: Polynom = new Polynom().zero();\r\n            const reminder: Polynom = this.clone().reorder(letter);\r\n\r\n            // There is no variable !\r\n            if (P.variables.length === 0) {\r\n                return {quotient, reminder}\r\n            }\r\n\r\n            // Get at least a letter\r\n\r\n            const maxMP: Monom = P.monomByDegree(undefined, letter);\r\n            const degreeP: number = P.degree(letter);\r\n\r\n            let newM: Monom;\r\n\r\n            // Make the euclidian division of the two polynoms.\r\n            let MaxIteration = this.degree(letter) * 2;\r\n            while (reminder.degree(letter) >= degreeP && MaxIteration >= 0) {\r\n                // console.log('EUCLIDE Q', quotient.degree(letter), quotient.tex)\r\n                // console.log('EUCLIDE R', reminder.degree(letter), reminder.tex)\r\n                // console.log('ITERATION', MaxIteration)\r\n                MaxIteration--\r\n\r\n                // Get the greatest monom divided by the max monom of the divider\r\n                newM = reminder.monomByDegree(undefined, letter).clone().divide(maxMP);\r\n\r\n                if (newM.isZero()) {\r\n                    break;\r\n                }\r\n\r\n                // Get the new quotient and reminder.\r\n                quotient.add(newM);\r\n                reminder.subtract(P.clone().multiply(newM));\r\n            }\r\n\r\n            return {quotient, reminder};\r\n        };\r\n\r\n        divide = (value: any): Polynom => {\r\n            if (value.isFraction) {\r\n                this.divideByFraction(value);\r\n            } else if (Number.isSafeInteger(value)) {\r\n                return this.divideByInteger(value);\r\n            }\r\n        }\r\n\r\n        private divideByInteger = (nb: number): Polynom => {\r\n            const nbF = new Fraction(nb);\r\n            for (const m of this._monoms) {\r\n                m.coefficient.divide(nbF);\r\n            }\r\n            return this;\r\n        };\r\n\r\n        private divideByFraction = (F: Fraction): Polynom => {\r\n            for (const m of this._monoms) {\r\n                m.coefficient.divide(F);\r\n            }\r\n            return this;\r\n        };\r\n\r\n        pow = (nb: number): Polynom => {\r\n            if (!Number.isSafeInteger(nb)) {\r\n                return this.zero();\r\n            }\r\n            if (nb < 0) {\r\n                return this.zero();\r\n            }\r\n            if (nb === 0) {\r\n                return new Polynom();\r\n            }\r\n\r\n            const P = this.clone();\r\n            for (let i = 1; i < nb; i++) {\r\n                this.multiply(P);\r\n            }\r\n            return this.reduce();\r\n        };\r\n\r\n\r\n        // ------------------------------------------\r\n        // Compare functions\r\n        // ------------------------------------------\r\n        /**\r\n         * Compare the current coefficient with another coefficient\r\n         * @param P\r\n         * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n         */\r\n        compare = (P: Polynom, sign?: string): boolean => {\r\n            if (sign === undefined) {\r\n                sign = '='\r\n            }\r\n\r\n            // Create clone version to reduce them without altering the original polynoms.\r\n            const cP1 = this.clone().reduce().reorder();\r\n            const cP2 = P.clone().reduce().reorder();\r\n\r\n            switch (sign) {\r\n                case '=':\r\n                    // They must have the isSame length and the isSame degree\r\n                    if (cP1.length !== cP2.length || cP1.degree() !== cP2.degree()) {\r\n                        return false;\r\n                    }\r\n\r\n                    // Check if the coefficients are the isSame.\r\n                    for (const i in cP1.monoms) {\r\n                        if (!cP1.monoms[i].isEqual(cP2.monoms[i])) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    return true;\r\n                case 'same':\r\n                    // They must have the isSame length and the isSame degree\r\n                    if (cP1.length !== cP2.length || cP1.degree() !== cP2.degree()) {\r\n                        return false;\r\n                    }\r\n\r\n                    for (const i in cP1.monoms) {\r\n                        if (!cP1.monoms[i].isSameAs(cP2.monoms[i])) {\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    return true;\r\n                default:\r\n                    return false;\r\n            }\r\n        };\r\n\r\n        isZero(): boolean {\r\n            return (this._monoms.length === 1 && this._monoms[0].coefficient.isZero()) || this._monoms.length === 0;\r\n        }\r\n\r\n        isOne(): boolean {\r\n            return this._monoms.length === 1 && this._monoms[0].coefficient.isOne();\r\n        }\r\n\r\n        isEqual = (P: Polynom): boolean => {\r\n            return this.compare(P, '=');\r\n        };\r\n\r\n        isSameAs = (P: Polynom): boolean => {\r\n            return this.compare(P, 'same');\r\n        };\r\n\r\n        isOpposedAt = (P: Polynom): boolean => {\r\n            return this.compare(P.clone().opposed(), '=');\r\n        };\r\n\r\n        isFactorized = (polynomString: string): boolean => {\r\n            let P;\r\n\r\n            // Check if polynom is complete...\r\n            if (polynomString.match(/\\(/g).length !== polynomString.match(/\\)/g).length) {\r\n                return false\r\n            }\r\n\r\n            // Try to build the polynom\r\n            try {\r\n                P = new Polynom(polynomString);\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n\r\n            // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n            if (!this.isEqual(P)) {\r\n                return false;\r\n            }\r\n\r\n            // Check if the provided (string) version is fully factorized.\r\n            // Run a regex on the string.\r\n            let polynomStringNormalized = polynomString.replaceAll('*', ''),\r\n                polynomStringReduced = '' + polynomStringNormalized,\r\n                factors: string[] = [];\r\n\r\n            for (let x of polynomStringNormalized.matchAll(/\\(([a-z0-9+\\-]+)\\)(\\^[0-9]*)?/g)) {\r\n                if (x[2] !== undefined) {\r\n                    for (let i = 0; i < +x[2].substr(1); i++) {\r\n                        factors.push(x[1])\r\n                    }\r\n                } else {\r\n                    factors.push(x[1]);\r\n                }\r\n                polynomStringReduced = polynomStringReduced.replaceAll(x[0], '');\r\n            }\r\n            if (polynomStringReduced !== '') {\r\n                factors.push(polynomStringReduced);\r\n            }\r\n            let polyFactors = factors.map(x => new Polynom(x));\r\n\r\n            // Factorize the current polynom.\r\n            this.factorize();\r\n\r\n            // Compare the given factors with the generated factors\r\n            let sign = 1;\r\n            for (let f of this.factors) {\r\n                for (let i = 0; i < polyFactors.length; i++) {\r\n                    if (f.isEqual(polyFactors[i])) {\r\n                        polyFactors.splice(i, 1);\r\n                        break;\r\n                    } else if (f.isOpposedAt(polyFactors[i])) {\r\n                        polyFactors.splice(i, 1);\r\n                        sign = -sign;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // The polyfactors must be empty and the cumulative opposite factors must be 1.\r\n            return (polyFactors.length === 0 && sign === 1);\r\n        }\r\n\r\n        isDeveloped = (polynomString: string): Boolean => {\r\n            let P: Polynom;\r\n\r\n            // There is at least one parenthese - it is not developed.\r\n            if (polynomString.match(/\\(/g).length + polynomString.match(/\\)/g).length) {\r\n                return false\r\n            }\r\n\r\n            // Try to build the polynom\r\n            try {\r\n                // Build the polynom\r\n                P = new Polynom(polynomString);\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n\r\n            // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n            if (!this.isEqual(P)) {\r\n                return false;\r\n            }\r\n\r\n            // Check that everything is completely developed. Actually, there are no parentheses... so it is fully developed\r\n\r\n            // maybe it wasn't reduced and not ordered...\r\n            // compare polynom string.\r\n\r\n            // normalize the string\r\n            let polynomStringNormalized = polynomString.replaceAll('[*\\s]', '')\r\n\r\n            // Determine if it's the exact same string.\r\n            // TODO: Maybe it's enough to just make this test !\r\n            return polynomStringNormalized === P.reduce().reorder().display\r\n        }\r\n        // ------------------------------------------\r\n        // Misc polynoms functions\r\n        // -------------------------------------\r\n        reduce = (): Polynom => {\r\n            for (let i = 0; i < this._monoms.length; i++) {\r\n                for (let j = i + 1; j < this._monoms.length; j++) {\r\n                    if (this._monoms[i].isSameAs(this.monoms[j])) {\r\n                        this._monoms[i].add(this.monoms[j]);\r\n                        this._monoms.splice(j, 1);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Remove all null monoms\r\n            this._monoms = this._monoms.filter((m) => {\r\n                return m.coefficient.value !== 0\r\n            });\r\n\r\n            // Reduce all monoms coefficient.\r\n            for (const m of this._monoms) {\r\n                m.coefficient.reduce();\r\n            }\r\n\r\n            if (this.length === 0) {\r\n                return new Polynom().zero();\r\n            }\r\n            return this;\r\n        };\r\n\r\n        reorder = (letter: string = 'x'): Polynom => {\r\n            // TODO: Must handle multiple setLetter reorder system\r\n            this._monoms.sort(function (a, b) {\r\n                return b.degree(letter) - a.degree(letter)\r\n            });\r\n            return this.reduce();\r\n        };\r\n\r\n        degree = (letter?: string): number => {\r\n            let d: number = 0;\r\n            for (const m of this._monoms) {\r\n                d = Math.max(m.degree(letter), d);\r\n            }\r\n            return d;\r\n        };\r\n\r\n        letters = (): string[] => {\r\n            let L: string[] = [], S = new Set();\r\n\r\n            for (let m of this._monoms) {\r\n                S = new Set([...S, ...m.variables]);\r\n            }\r\n\r\n            // @ts-ignore\r\n            return [...S];\r\n        }\r\n\r\n        /**\r\n         * Replace a variable (letter) by a polynom.\r\n         * @param letter\r\n         * @param P\r\n         */\r\n        replaceBy = (letter: string, P: Polynom): Polynom => {\r\n            let pow: number;\r\n            const resultPolynom: Polynom = new Polynom().zero();\r\n\r\n            for (const m of this.monoms) {\r\n                if (m.literal[letter] === undefined || m.literal[letter] === 0) {\r\n                    resultPolynom.add(m.clone());\r\n                } else {\r\n                    // We have found a setLetter.\r\n                    // Get the power and reset it.\r\n                    pow = +m.literal[letter];\r\n                    delete m.literal[letter];\r\n\r\n                    resultPolynom.add(P.clone().pow(pow).multiply(m));\r\n                }\r\n            }\r\n\r\n            this._monoms = resultPolynom.reduce().reorder().monoms;\r\n            return this;\r\n        };\r\n\r\n        // Evaluate a polynom.\r\n        evaluate = (values: { [key: string]: Fraction | number } | Fraction | number): Fraction => {\r\n            const r = new Fraction().zero();\r\n\r\n            this._monoms.forEach(monom => {\r\n                //console.log('Evaluate polynom: ', monom.display, values, monom.evaluate(values).display);\r\n                r.add(monom.evaluate(values));\r\n            });\r\n            return r;\r\n        };\r\n\r\n        derivative = (letter?: string): Polynom => {\r\n            let dP = new Polynom();\r\n\r\n            for (let m of this._monoms) {\r\n                dP.add(m.derivative(letter));\r\n            }\r\n            return dP;\r\n\r\n        }\r\n\r\n        primitive = (letter?: string): Polynom => {\r\n            let dP = new Polynom();\r\n\r\n            for (let m of this._monoms) {\r\n                dP.add(m.primitive(letter))\r\n            }\r\n            return dP\r\n        }\r\n\r\n        integrate = (a: Fraction | number, b: Fraction | number, letter?: string): Fraction => {\r\n            const primitive = this.primitive(letter)\r\n\r\n            if (letter === undefined) {\r\n                letter = 'x'\r\n            }\r\n\r\n            let valuesA: { [key: string]: Fraction | number } = {},\r\n                valuesB: { [key: string]: Fraction | number } = {}\r\n            valuesA[letter] = a;\r\n            valuesB[letter] = b;\r\n\r\n            return primitive.evaluate(valuesB).subtract(primitive.evaluate(valuesA))\r\n        }\r\n        // ------------------------------------------\r\n        // Polynoms factorization functions\r\n        // -------------------------------------\r\n        /**\r\n         * Factorize a polynom and store the best results in factors.\r\n         * @param maxValue Defines the greatest value to search to (default is 20).\r\n         */\r\n        factorize_OLD = (maxValue?: number): Polynom => {\r\n            // TODO: Must handle other letters than 'x'\r\n            this._factors = [];\r\n\r\n            // Duplicate the polynom\r\n            let P = this.clone(),\r\n                nbFactorsFound = 0;\r\n\r\n            // Determine if the polynom is \"negative\", eg has a max monom degree with a negative coefficient.\r\n            if (P.monomByDegree().coefficient.numerator < 0) {\r\n                this._factors.push(new Polynom('-1'));\r\n            }\r\n\r\n            // Determine if there is a 'common' monom\r\n            let M = P.commonMonom();\r\n            if (!M.isOne()) {\r\n                let commonPolynom = new Polynom()\r\n                commonPolynom.monoms = [M]\r\n                if (this._factors.length === 0) {\r\n                    this._factors.push(commonPolynom);\r\n                } else {\r\n                    this._factors = [];\r\n                    this._factors.push(commonPolynom.opposed());\r\n                }\r\n                P = P.euclidian(commonPolynom).quotient;\r\n\r\n                nbFactorsFound = commonPolynom.degree();\r\n            }\r\n\r\n            // Main loop.\r\n            //\r\n            // Do it only if degree is equal or less than one.\r\n            if (P.degree() <= 1) {\r\n                this._factors.push(P.clone());\r\n            } else {\r\n                // Force test.\r\n                let Q = new Fraction(),\r\n                    F,\r\n                    degree = P.degree();\r\n\r\n                maxValue = maxValue === undefined ? 20 : maxValue;\r\n\r\n                // Test all polynom similar to ax+b\r\n                for (let a = 1; a <= maxValue; a++) {\r\n                    // Skip a coefficient of 0\r\n                    for (let b = -maxValue; b <= maxValue; b++) {\r\n\r\n                        Q.parse(-b, a);\r\n\r\n                        if (P.evaluate({x: Q})) {\r\n                            F = new Polynom(`${a}x+${b}`);\r\n                            while (P.evaluate({x: Q}).value === 0) {\r\n                                this._factors.push(F.clone());\r\n                                nbFactorsFound++;\r\n\r\n                                // Means it can be divided without reminders.\r\n                                P = P.euclidian(F).quotient;\r\n                            }\r\n                        }\r\n\r\n                        // Continue if the numbers of factors found equals the degree.\r\n                        if (nbFactorsFound > degree) {\r\n                            return this;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (P.degree() > 1) {\r\n                    this._factors.push(P.clone());\r\n                    return this;\r\n                }\r\n            }\r\n\r\n            return this;\r\n        };\r\n\r\n        factorize = (letter?: string): Polynom[] => {\r\n            let factors: Polynom[] = [];\r\n\r\n            // Extract the common monom\r\n            let P = this.clone().reorder(),\r\n                M = P.commonMonom(),\r\n                tempPolynom: Polynom\r\n            // It has a common monom.\r\n            if (!M.isOne()) {\r\n                tempPolynom = new Polynom()\r\n                tempPolynom.monoms = [M]\r\n                factors = [tempPolynom.clone()]\r\n                P = P.euclidian(tempPolynom).quotient;\r\n            }\r\n\r\n            let securityLoop = P.degree() * 2\r\n            // securityLoop = 0\r\n            while (securityLoop >= 0) {\r\n                securityLoop--\r\n\r\n\r\n                if (P.monoms.length < 2) {\r\n                    if (!P.isOne()) {\r\n                        factors.push(P.clone());\r\n                    }\r\n                    break;\r\n                } else {\r\n                    // Get the first and last monom.\r\n                    let m1 = P.monoms[0].dividers,\r\n                        m2 = P.monoms[P.monoms.length - 1].dividers\r\n\r\n                    // console.log('CURRENT VALUE')\r\n                    // console.log(P.tex)\r\n                    // console.log('---------------------')\r\n                    for (let m1d of m1) {\r\n                        for (let m2d of m2) {\r\n                            // if(m1d.degree()===m2d.degree()){continue}\r\n                            let dividerPolynom = new Polynom(),\r\n                                result\r\n                            dividerPolynom.monoms = [m1d.clone(), m2d.clone()]\r\n                            result = P.euclidian(dividerPolynom)\r\n\r\n                            // console.log(dividerPolynom.tex, '=>', result.reminder.tex, '|||||', result.quotient.tex)\r\n                            if (result.reminder.isZero()) {\r\n                                P = result.quotient.clone();\r\n                                factors.push(dividerPolynom)\r\n                                continue;\r\n                            }\r\n\r\n                            dividerPolynom.monoms = [m1d.clone(), m2d.clone().opposed()]\r\n                            result = P.euclidian(dividerPolynom)\r\n                            if (result.reminder.isZero()) {\r\n                                P = result.quotient.clone();\r\n                                factors.push(dividerPolynom)\r\n                            }\r\n                            // console.log(dividerPolynom.tex, '=>', result.reminder.tex)\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            this.factors = factors\r\n            return factors;\r\n        }\r\n\r\n        private _factorize2ndDegree = (letter: string): Polynom[] => {\r\n            let P1: Polynom, P2: Polynom,\r\n                a, b, c, delta, x1, x2, factor;\r\n\r\n            // One variable only\r\n            if (this.numberOfVars === 1) {\r\n                a = this.monomByDegree(2, letter).coefficient;\r\n                b = this.monomByDegree(1, letter).coefficient;\r\n                c = this.monomByDegree(0, letter).coefficient;\r\n                delta = b.clone().pow(2).subtract(a.clone().multiply(c).multiply(4));\r\n\r\n                if (delta.isZero()) {\r\n                    x1 = b.clone().opposed().divide(a.clone().multiply(2))\r\n                    P1 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                    P2 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                    factor = a.divide(x1.denominator).divide(x1.denominator);\r\n\r\n                    if (!factor.isOne()) {\r\n                        // TODO: Update new Polynom to accept anything...\r\n                        return [new Polynom(factor.display), P1, P2]\r\n                    } else {\r\n                        return [P1, P2]\r\n                    }\r\n                } else if (delta.isPositive() && delta.isSquare()) {\r\n                    x1 = b.clone().opposed()\r\n                        .add(delta.clone().sqrt())\r\n                        .divide(a.clone().multiply(2))\r\n                    x2 = b.clone().opposed()\r\n                        .subtract(delta.clone().sqrt())\r\n                        .divide(a.clone().multiply(2))\r\n\r\n                    // (2x+5)(3x-2)\r\n                    // 6x^2+11x-10\r\n                    // a = 6, b = 11, c = -10\r\n                    // delta = 121-4*6*(-10) = 361= 19^2\r\n                    // x1 = (-11 + 19)  / 12 = 8/12 = 2/3\r\n                    // x2 = (-11 - 19)  / 12 = -30/12 = -5/2\r\n                    factor = a.divide(x1.denominator).divide(x2.denominator);\r\n                    if (factor.isOne()) {\r\n                        return [\r\n                            new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                            new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                        ]\r\n                    } else {\r\n                        return [\r\n                            new Polynom(factor.display),\r\n                            new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                            new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                        ]\r\n\r\n                    }\r\n                } else {\r\n                    // No solution possible - return the complete value.\r\n                    return [this.clone()]\r\n                }\r\n            } else {\r\n                // If multiple variables, only handle perfect squares...\r\n                a = this.monomByDegree(2, letter);\r\n                b = this.monomByDegree(1, letter);\r\n                c = this.monomByDegree(0, letter);\r\n\r\n\r\n                if (a.isLitteralSquare() && c.isLitteralSquare()) {\r\n                    // Check the middle item is same as...\r\n                    if (b.clone().pow(2).isSameAs(a.clone().multiply(c))) {\r\n                        // Determine if the coefficient values matches.\r\n\r\n                        // Search 4 values (r, s, t, u) that matches:\r\n                        // (r X + s Y)(t X + u Y) = rt X^2 + (ru + st) XY + su Y^2\r\n\r\n                        let xPolynom = new Polynom('x', a.coefficient, b.coefficient, c.coefficient);\r\n                        let xFactors = xPolynom._factorize2ndDegree('x');\r\n\r\n                        let factors = [], xyzPolynom: Polynom;\r\n\r\n                        if (xFactors.length >= 2) {\r\n                            for (let p of xFactors) {\r\n                                if (p.degree() === 0) {\r\n                                    factors.push(p.clone())\r\n                                } else {\r\n                                    xyzPolynom = p.clone();\r\n                                    xyzPolynom.monoms[0].literal = a.literalSqrt\r\n                                    xyzPolynom.monoms[1].literal = c.literalSqrt\r\n                                    factors.push(xyzPolynom.clone())\r\n                                }\r\n                            }\r\n                            return factors\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return [this.clone()]\r\n                //\r\n                // console.log(a.tex, b.tex, c.tex)\r\n                // if (a.isSquare() && c.isSquare()) {\r\n                //     console.log('A C squares')\r\n                //     if (a.clone().sqrt().multiply(c.clone().sqrt()).multiplyByNumber(2).isSameAs(b)) {\r\n                //         console.log('HERE')\r\n                //         if (a.coefficient.sign() === b.coefficient.sign()) {\r\n                //             return []\r\n                //         }else{\r\n                //             return []\r\n                //         }\r\n                //     }\r\n                // } else if(a.isLitteralSquare() && c.isLitteralSquare()) {\r\n                //     console.log('A C litteral SQUARES')\r\n                //     // Check that the middle element is the product of a and c.\r\n                //\r\n                //     if(b.clone().pow(2).isSameAs(a.clone().multiply(c))){\r\n                //         console.log('SAME')\r\n                //\r\n                //     }else{\r\n                //         console.log('NOT SAME')\r\n                //     }\r\n                //\r\n                //     return [this.clone()]\r\n                // } else {\r\n                //     console.log('NOT SQUARES AT ALL !!!!')\r\n                // }\r\n\r\n            }\r\n        }\r\n\r\n        private _factorizeByGroups = (): Polynom[] => {\r\n            // TODO: Factorize by groups.\r\n            return [];\r\n        }\r\n        // ------------------------------------------\r\n        // Polynoms helpers functions\r\n        // -------------------------------------\r\n        // TODO: get zeroes for more than first degree\r\n        getZeroes = (): (Fraction | boolean)[] => {\r\n            const Z: Fraction[] = [];\r\n\r\n            switch (this.degree()) {\r\n                case 0:\r\n                    if (this._monoms[0].coefficient.value === 0) {\r\n                        return [true];\r\n                    } else {\r\n                        return [false];\r\n                    }\r\n                case 1:\r\n                    // There is only one monoms,\r\n                    if (this._monoms.length === 1) {\r\n                        return [new Fraction().zero()];\r\n                    } else {\r\n                        const P = this.clone().reduce().reorder();\r\n                        return [P.monoms[1].coefficient.opposed().divide(P.monoms[0].coefficient)];\r\n                    }\r\n                // TODO: Determine the zeros of an equation of second degree.\r\n                //case 2:\r\n                default:\r\n                    // Make sure the polynom is factorized.\r\n                    if (this._factors.length === 0) {\r\n                        this.factorize()\r\n                    }\r\n\r\n                    let zeroes = [], zeroesAsTex = [];\r\n                    for (let P of this._factors) {\r\n                        if (P.degree() > 2) {\r\n                            // TODO: Handle other polynom.\r\n\r\n                        } else if (P.degree() === 2) {\r\n                            let A = P.monomByDegree(2).coefficient,\r\n                                B = P.monomByDegree(1).coefficient,\r\n                                C = P.monomByDegree(0).coefficient,\r\n                                D = B.clone().pow(2).subtract(A.clone().multiply(C).multiply(4));\r\n\r\n                            if (D.value > 0) {\r\n                                /*console.log('Two zeroes for ', P.tex); */\r\n                                let x1 = (-(B.value) + Math.sqrt(D.value)) / (2 * A.value),\r\n                                    x2 = (-(B.value) - Math.sqrt(D.value)) / (2 * A.value);\r\n\r\n                                zeroes.push(new Fraction(x1.toFixed(3)).reduce());\r\n                                zeroes.push(new Fraction(x2.toFixed(3)).reduce());\r\n                            } else if (D.value === 0) {\r\n                                /*console.log('One zero for ', P.tex); */\r\n\r\n                            } else {\r\n                                console.log('No zero for ', P.tex);\r\n                            }\r\n                        } else {\r\n                            for (let z of P.getZeroes()) {\r\n                                // Check if the zero is already in the list.\r\n                                if (z === false || z === true) {\r\n                                    continue;\r\n                                }\r\n                                if (zeroesAsTex.indexOf(z.frac) === -1) {\r\n                                    zeroes.push(z);\r\n                                    zeroesAsTex.push(z.frac);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    return zeroes;\r\n            }\r\n            return Z;\r\n        };\r\n\r\n\r\n        // TODO: analyse the next functions to determine if they are useful or not...\r\n        monomByDegree = (degree?: number, letter?: string): Monom => {\r\n            if (degree === undefined) {\r\n                // return the highest degree monom.\r\n                return this.monomByDegree(this.degree(letter), letter);\r\n            }\r\n\r\n            // Reduce the polynom.\r\n            const M = this.clone().reduce();\r\n            for (const m of M._monoms) {\r\n                if (m.degree(letter) === degree) {\r\n                    return m.clone();\r\n                }\r\n            }\r\n\r\n            // Nothing was found - return the null monom.\r\n            return new Monom().zero();\r\n        };\r\n\r\n        monomsByDegree = (degree?: number, letter?: string): Monom[] => {\r\n            if (degree === undefined) {\r\n                // return the highest degree monom.\r\n                return this.monomsByDegree(this.degree(letter));\r\n            }\r\n\r\n            // Reduce the polynom.\r\n            let Ms: Monom[] = [];\r\n\r\n            const M = this.clone().reduce();\r\n            for (const m of M._monoms) {\r\n                if (m.degree(letter) === degree) {\r\n                    Ms.push(m.clone())\r\n                }\r\n            }\r\n\r\n            return Ms\r\n            // Nothing was found - retur\r\n        }\r\n\r\n        // Used in LinearSystem.tex\r\n        monomByLetter = (letter: string): Monom => {\r\n            const M = this.clone().reduce();\r\n            for (const m of M._monoms) {\r\n                if (m.hasLetter(letter)) {\r\n                    return m.clone();\r\n                }\r\n            }\r\n\r\n            return new Monom().zero();\r\n        };\r\n\r\n\r\n        // Next functions are used for for commonMonom, which is used in the factorize method.\r\n        getDenominators = (): number[] => {\r\n            const denominators: number[] = [];\r\n            for (const m of this._monoms) {\r\n                denominators.push(m.coefficient.denominator);\r\n            }\r\n            return denominators;\r\n        };\r\n\r\n        getNumerators = (): number[] => {\r\n            const numerators: number[] = [];\r\n            for (const m of this._monoms) {\r\n                numerators.push(m.coefficient.numerator);\r\n            }\r\n            return numerators;\r\n        };\r\n\r\n        lcmDenominator = (): number => {\r\n            return Numeric.lcm(...this.getDenominators());\r\n        };\r\n\r\n        gcdDenominator = (): number => {\r\n            return Numeric.gcd(...this.getDenominators());\r\n        };\r\n\r\n        lcmNumerator = (): number => {\r\n            return Numeric.lcm(...this.getNumerators());\r\n        };\r\n\r\n        gcdNumerator = (): number => {\r\n            return Numeric.gcd(...this.getNumerators());\r\n        };\r\n\r\n        commonMonom = (): Monom => {\r\n            let M = new Monom().one(), numerator: number, denominator: number, degree = this.degree();\r\n\r\n            numerator = this.gcdNumerator();\r\n            denominator = this.gcdDenominator();\r\n\r\n            M.coefficient = new Fraction(numerator, denominator);\r\n            for (let L of this.variables) {\r\n                // Initialize the setLetter with the max degree\r\n                M.setLetter(L, degree);\r\n                for (let m of this._monoms) {\r\n                    M.setLetter(L, Math.min(m.degree(L), M.degree(L)));\r\n                    if (M.degree(L) === 0) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return M;\r\n        }\r\n\r\n\r\n        // TODO: The rest of the functions are not used or unnecessary ?\r\n        /**\r\n         * This will generate a not reduced tex string of the polynom.\r\n         * @param complexity : Number of iteration to increase the complexity.\r\n         */\r\n        makeItComplicate = (complexity: number = 1): Polynom => {\r\n            this._texString = '';\r\n\r\n            // The polynom must be at least of the first degree.\r\n            if (this.degree() < 1) {\r\n                return this;\r\n            }\r\n\r\n            // TODO: update this function !\r\n\r\n            const mDegree = Random.number(0, this.degree() - 1);\r\n            // const A = new Polynom().rndSimple(mDegree, false, complexity > 1, 'x', false, complexity > 1 ? -1 : 1);\r\n            // const B = new Polynom().rndSimple(1, false, complexity > 1);\r\n            // const C = this.clone().subtract(A.clone().multiply(B));\r\n\r\n            // Try to factorize a little bit the C polynom.\r\n            // C.factorizePartial(true);\r\n            // this._texString = `${A.genDisplay('tex', false, true)} \\\\cdot ${B.genDisplay('tex', false, true)} ${C.texString} `;\r\n            //\r\n            return this;\r\n        };\r\n        factorizePartial = (forceSign?: boolean): Polynom => {\r\n            this._texString = '';\r\n            // Try to find two monoms with a common coefficient.\r\n            if (this.length <= 1) {\r\n                return this;\r\n            }\r\n\r\n            let mMain: Monom,\r\n                mCheck: Monom,\r\n                mFactor: Monom,\r\n                pFactor: Polynom,\r\n                // pRemain: Polynom,\r\n                g: number, sign: string;\r\n\r\n            for (let i = 0; i < this.length; i++) {\r\n                mMain = this._monoms[i].clone();\r\n                // We factorize only if the main coefficient isn't a fraction\r\n                // if(mMain.coefficient.denominator!==1){continue;}\r\n                for (let j = i + 1; j < this.length; j++) {\r\n                    mCheck = this._monoms[j].clone();\r\n                    // if(mCheck.coefficient.denominator!==1){continue;}\r\n\r\n                    g = Numeric.gcd(mMain.coefficient.numerator, mCheck.coefficient.numerator);\r\n                    if (g !== 1) {\r\n                        // mFactor = mMain.clone().divide(mCheck); // This gets the literal part.\r\n                        // mFactor.coefficient = new Fraction(g); // Set the coefficient to the gcd.\r\n                        mFactor = Monom.lcm(mMain, mCheck);\r\n                        sign = mMain.coefficient.sign() === 1 ? '+' : '-';\r\n                        this._texString = `${forceSign === true ? sign : (sign === '+' ? '' : sign)}${mFactor.tex}`;\r\n\r\n                        pFactor = new Polynom().add(mMain.divide(mFactor)).add(mCheck.divide(mFactor));\r\n                        this._texString += pFactor.genDisplay('tex', false, true);\r\n\r\n                        this._texString += this.clone().subtract(pFactor.clone().multiply(mFactor)).genDisplay('tex', true, false);\r\n                        return this;\r\n                    }\r\n                }\r\n            }\r\n\r\n            this._texString = this.genDisplay('tex', forceSign);\r\n\r\n            return this;\r\n        };\r\n        /**\r\n         * reduce the coefficient value as if the polynom was equal to zero.\r\n         */\r\n        minify = (): Polynom => {\r\n            // First multiply by the common denominator.\r\n            this.multiply(this.lcmDenominator()).divide(this.gcdNumerator()).reduce();\r\n            return this.reduce();\r\n        };\r\n        /**\r\n         * Determine if the current polynom is divisible by P\r\n         * TODO: should work with any polynom, not only first degree polynoms and the setLetter should disappear\r\n         * @param P\r\n         * @param letter - default setLetter\r\n         */\r\n        canDivide = (P: Polynom, letter: string = 'x'): boolean => {\r\n            const d = P.degree();\r\n\r\n            const evalValue: { [key: string]: Fraction } = {};\r\n            // A zero degree polynom can always divide, except if it's the zero polynom.\r\n            if (d === 0) {\r\n                return !P.isZero;\r\n            }\r\n\r\n            // The polynom is of degree one.\r\n            if (d === 1) {\r\n                const z = P.getZeroes();\r\n                // The zero is an undefined zero.\r\n                if (z[0] === true || z[0] === false) {\r\n                    return false;\r\n                }\r\n\r\n                evalValue[letter] = z[0];\r\n                return this.evaluate(evalValue).value === 0;\r\n            }\r\n\r\n            // The polynom is of degree 2 or more...\r\n            if (d > 1) {\r\n                console.log('Currently, only first degree polynom are supported');\r\n                return false;\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n\r\n    }\r\n","import {randomCore} from \"./randomCore\";\r\nimport {randomPolynomConfig} from \"./rndTypes\";\r\nimport {rndMonom} from \"./rndMonom\";\r\nimport {Random} from \"./index\";\r\nimport {Polynom} from \"../algebra/polynom\";\r\nimport {Monom} from \"../algebra/monom\";\r\n\r\n/**\r\n * Random polynoms\r\n */\r\nexport class rndPolynom extends randomCore {\r\n    declare protected _config: randomPolynomConfig\r\n    declare protected _defaultConfig: randomPolynomConfig\r\n\r\n    constructor(userConfig?: randomPolynomConfig) {\r\n        super();\r\n\r\n        // Default config for a random polynom\r\n        this._defaultConfig = {\r\n            letters: 'x',\r\n            degree: 2,\r\n            fraction: false,\r\n            zero: false,\r\n            unit: false,\r\n            factorable: false,\r\n            allowNullMonom: true,\r\n            numberOfMonoms: 0\r\n        }\r\n\r\n        // Merge config with initialiser\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Polynom => {\r\n        // Create the polynom\r\n        let P = new Polynom().empty(),\r\n            M: Monom\r\n\r\n        for (let i = this._config.degree; i >= 0; i--) {\r\n            // Create monom of corresponding degree.\r\n            M = new rndMonom({\r\n                letters: this._config.letters,\r\n                degree: i,\r\n                fraction: this._config.fraction,\r\n                zero: (i === this._config.degree) ? false : this._config.allowNullMonom\r\n            }).generate()\r\n\r\n            // If degree is the greatest and unit is true, set the monom value to one.\r\n            if (this._config.unit && this._config.degree === i) {\r\n                M.coefficient.one()\r\n            }\r\n\r\n            // Add to the polynom\r\n            P.add(M)\r\n        }\r\n\r\n        // If the number of monoms is greater than the allowed value, remove some of them...\r\n        if (this._config.numberOfMonoms > 0 && this._config.numberOfMonoms < P.length) {\r\n            console.log(P.monoms.length)\r\n            P.monoms = Random.array(P.monoms, this._config.numberOfMonoms)\r\n        }\r\n        return P\r\n    }\r\n\r\n    factorable = (): Polynom => {\r\n        let P = new Polynom()\r\n\r\n        return P\r\n    }\r\n}","/**\r\n * Random helpers\r\n */\r\nexport class rndHelpers {\r\n\r\n    /**\r\n     * Random boolean with a percent ratio\r\n     * @param percent\r\n     */\r\n    static randomBool(percent:number=0.5):boolean{\r\n        return Math.random()<percent;\r\n    }\r\n\r\n    /**\r\n     * Random integer between two values.\r\n     * @param a (number) : From this value to the second value. If the second is ommited, this value is the max value.\r\n     * @param b (number) : To this value. If this is ommited.\r\n     */\r\n    static randomInt(a:number, b?:number):number{\r\n        if(b===undefined){return this.randomInt(0,a);}\r\n\r\n        return Math.floor(Math.random() * (b - a + 1) + a);\r\n    }\r\n\r\n    /**\r\n     * Random integer between -max and max value.\r\n     * @param max (number) : determine the limits.\r\n     * @param zero (bool) : determine if zero is allowed or not.\r\n     */\r\n    static randomIntSym(max:number, zero?:boolean):number{\r\n        if(zero===false){\r\n            return this.randomBool()?this.randomInt(1,max):-this.randomInt(1,max);\r\n        }else{\r\n            return this.randomInt(-max, max);\r\n        }\r\n    }\r\n\r\n    static randomArray(arr: any[], number?:number):any[]{\r\n        if(number===undefined){number = 1}\r\n\r\n        // Return a clone array\r\n        if(arr.length<=0){return Object.values(arr)}\r\n\r\n        // Randomize the array and return the n first elements.\r\n        return rndHelpers.shuffleArray(arr).slice(0,number);\r\n    }\r\n\r\n    static randomItem(arr: any[]): any{\r\n        if(arr.length===0){return ''}\r\n        return this.randomArray(arr, 1)[0]\r\n    }\r\n\r\n    static shuffleArray(arr: any[]): any[] {\r\n        // The Fisher-Yates algorithm\r\n        let shuffleArray = Object.values(arr)\r\n        for (let i = shuffleArray.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            const temp = shuffleArray[i];\r\n            shuffleArray[i] = shuffleArray[j];\r\n            shuffleArray[j] = temp;\r\n        }\r\n\r\n        return shuffleArray;\r\n    }\r\n\r\n}","import {rndPolynom} from \"./rndPolynom\";\r\nimport {rndMonom} from \"./rndMonom\";\r\nimport {rndHelpers} from \"./rndHelpers\";\r\nimport {randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {Monom, Polynom} from \"../algebra\";\r\n\r\nexport * from \"./rndTypes\"\r\nexport namespace Random {\r\n    export function polynom(config?: randomPolynomConfig): Polynom {\r\n        return new rndPolynom(config).generate()\r\n    }\r\n\r\n    export function monom(config?: randomMonomConfig): Monom {\r\n        return new rndMonom(config).generate()\r\n    }\r\n\r\n    export function number(from:number, to:number):number { return rndHelpers.randomInt(from,to)}\r\n    export function numberSym(max:number, allowZero?:boolean):number { return rndHelpers.randomIntSym(max, allowZero)}\r\n    export function bool(percent?:number):boolean { return rndHelpers.randomBool(percent)}\r\n    export function array(arr:any[], number?:number):any[] { return rndHelpers.randomArray(arr, number)}\r\n    export function item(arr:any[]):any { return rndHelpers.randomItem(arr)}\r\n    export function shuffle(arr:any[]):any { rndHelpers.shuffleArray(arr)}\r\n}","export * from \"./equation\"\r\nexport * from \"./linearSystem\"\r\nexport * from \"./logicalset\"\r\nexport * from \"./monom\"\r\nexport * from \"./polynom\"\r\nexport * from \"./rational\"\r\n\r\nimport {Polynom as _Polynom} from \"./polynom\";\r\nimport {Monom as _Monom} from \"./monom\";\r\n\r\nexport namespace Algebra {\r\n    export class Polynom extends _Polynom{}\r\n    export class Monom extends _Monom{}\r\n}","export class Nthroot {\r\n    private _radical: number;\r\n    private _nth: number;\r\n    private _coefficient: number;\r\n    private _isValid:boolean;\r\n\r\n    constructor() {\r\n        this._radical = 1;\r\n        this._coefficient = 1;\r\n        this._nth = 2;\r\n        this._isValid = true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get radical(): number {\r\n        return this._radical;\r\n    }\r\n\r\n    set radical(value: number) {\r\n        this._radical = value;\r\n    }\r\n\r\n    get nth(): number {\r\n        return this._nth;\r\n    }\r\n\r\n    set nth(value: number) {\r\n        if (Number.isSafeInteger(value) && value >= 2) {\r\n            this._nth = value;\r\n        } else {\r\n            // Error setting the nth root.\r\n            console.log('Error setting the nth root');\r\n            this._nth = 2;\r\n        }\r\n    }\r\n\r\n    get coefficient(): number {\r\n        return this._coefficient;\r\n    }\r\n\r\n    set coefficient(value: number) {\r\n        this._coefficient = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let C: string;\r\n\r\n        if (this._coefficient === 1) {\r\n            C = '';\r\n        } else if (this._coefficient === -1) {\r\n            C = '-';\r\n        } else {\r\n            C = this._coefficient.toString();\r\n        }\r\n\r\n        if (this._radical === 1) {\r\n            return `${this._coefficient}`;\r\n        } else {\r\n            if (this._nth === 2) {\r\n                return `${C}\\\\sqrt{${this._radical}}`\r\n            } else {\r\n                return `${C}\\\\sqrt[${this._nth}]{${this._radical}}`\r\n            }\r\n        }\r\n    }\r\n\r\n    get value(): number {\r\n        return this._coefficient * Math.pow(this._radical, 1 / this._nth);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (radical: number, nthroot?: number, coefficient?: number): Nthroot => {\r\n        this._coefficient = (coefficient === undefined) ? 1 : coefficient;\r\n        this._nth = (nthroot === undefined) ? 2 : nthroot;\r\n        this._radical = (radical === undefined) ? 1 : radical;\r\n\r\n        if(this._nth%2===0 && this._radical<0){\r\n            this._isValid = false;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    reduce = (): Nthroot => {\r\n        // Max value to test.\r\n        let V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n        while (V > 1) {\r\n            if (this._radical % Math.pow(V, this._nth) === 0) {\r\n                // It's dividable by V^n\r\n                this._coefficient *= V;\r\n                this._radical = this._radical / Math.pow(V, this._nth);\r\n\r\n                // Redifine the new testing value (this is optimization)\r\n                V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n                continue;\r\n            }\r\n            V--;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiply = (N: Nthroot): Nthroot => {\r\n        this._radical *= N.radical;\r\n        return this.reduce();\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Help functions\r\n    // ------------------------------------------\r\n    hasRadical = ():boolean => {\r\n        return !(this._radical===1 || this._radical===0 || this._isValid===false)\r\n    };\r\n}","import {Polynom} from \"./polynom\";\r\nimport {Monom} from \"./monom\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Fraction} from \"../coefficients\";\r\nimport {Nthroot} from \"../coefficients\";\r\n\r\n/**\r\n * Equation is a class to manage equations...\r\n */\r\nexport class Equation {\r\n    private _left: Polynom;  // Left part of the equation\r\n    private _right: Polynom; // Right part of the equation\r\n    private _sign: string;   // Signe of the equation, by default =\r\n\r\n    private _polynom: Polynom;  // Used to solve the equation // TODO: remove the private value ?\r\n    private _solutions: string[];    // Array of the solutions\r\n\r\n    // Undetermined solutions.\r\n    private _varnothing: string = '\\\\varnothing';\r\n    private _real: string = '\\\\mathbb{R}';\r\n\r\n    /**\r\n     * Create an Equation using two polynoms.\r\n     * Markdown *support* is cool\r\n     * @param equations\r\n     */\r\n    constructor(...equations: any) {\r\n        // Default equation\r\n        this._left = new Polynom().zero();\r\n        this._right = new Polynom().zero();\r\n        this._sign = '=';\r\n\r\n        if (equations.length === 1) {\r\n            if (equations[0].isEquation === true) {\r\n                return equations[0].clone();\r\n            } else {\r\n                this.parse(equations[0]);\r\n            }\r\n        } else if (equations.length === 2) {\r\n            this.left = equations[0].isPolynom ? equations[0].clone() : new Polynom(equations[0]);\r\n            this.right = equations[1].isPolynom ? equations[1].clone() : new Polynom(equations[1]);\r\n        } else {\r\n            // Return default empty equation\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isEquation() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    // TODO: Check the getters and setters.\r\n    get solutions(): string[] {\r\n        return this._solutions;\r\n    }\r\n\r\n    get solution(): string {\r\n        if (this._solutions.length === 1\r\n            &&\r\n            (\r\n                this._solutions[0] === this._real\r\n                || this._solutions[0] === this._varnothing\r\n                || this._solutions[0].includes('\\\\left')\r\n            )\r\n        ) {\r\n            return `S = ${this._solutions[0]}`;\r\n        }\r\n        return `S = \\\\left{ ${this._solutions.join(';')} \\\\right}`;\r\n    }\r\n\r\n    get isReal(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0] === this._real;\r\n    }\r\n\r\n    get isVarnothing(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0] === this._varnothing;\r\n    }\r\n\r\n    get signAsTex(): string {\r\n        if (this._sign === '>=' || this._sign === '=>' || this._sign === 'geq') {\r\n            return '\\\\geq';\r\n        }\r\n        if (this._sign === '<=' || this._sign === '=<' || this._sign === 'leq') {\r\n            return '\\\\leq';\r\n        }\r\n        return this._sign;\r\n    }\r\n\r\n    get tex(): string {\r\n        return `${this._left.tex}${this.signAsTex}${this._right.tex}`;\r\n    }\r\n\r\n    get raw(): string {\r\n        return `${this._left.raw}${this.signAsTex}${this._right.raw}`;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        return [...new Set(this._right.variables.concat(this._left.variables))];\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    get left(): Polynom {\r\n        return this._left;\r\n    }\r\n\r\n    set left(value: Polynom) {\r\n        this._left = value;\r\n    }\r\n\r\n    get right(): Polynom {\r\n        return this._right;\r\n    }\r\n\r\n    set right(value: Polynom) {\r\n        this._right = value;\r\n    }\r\n\r\n    get sign(): string {\r\n        return this._sign;\r\n    }\r\n\r\n    set sign(value: string) {\r\n        // Set the sign value as formatted.\r\n        this._sign = this._formatSign(value);\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (equationString: string): Equation => {\r\n        let pStr: string[], strSign: string | false;\r\n        // Find the string separator\r\n        strSign = this._findSign(equationString);\r\n\r\n        if (strSign === false) {\r\n            console.log('The equation is not valid (no sign found)');\r\n            return;\r\n        }\r\n\r\n        // The StrSign is found\r\n        pStr = equationString.split(strSign);\r\n\r\n        return this.create(new Polynom(pStr[0]), new Polynom(pStr[1]), this._formatSign(strSign));\r\n    };\r\n\r\n    private _findSign = (equationString: string): string | false => {\r\n        let strSign: string = '';\r\n\r\n        if (equationString.includes('geq')) {\r\n            return (equationString.includes('\\\\geq')) ? '\\\\geq' : 'geq';\r\n        } else if (equationString.includes('leq')) {\r\n            return (equationString.includes('\\\\leq')) ? '\\\\leq' : 'leq';\r\n        } else if (equationString.includes('>=')) {\r\n            return '>=';\r\n        } else if (equationString.includes('=>')) {\r\n            return '=>';\r\n        } else if (equationString.includes('>')) {\r\n            return '>';\r\n        } else if (equationString.includes('<=')) {\r\n            return '<=';\r\n        } else if (equationString.includes('=<')) {\r\n            return '=<';\r\n        } else if (equationString.includes('<')) {\r\n            return '<';\r\n        } else if (equationString.includes('=')) {\r\n            return '='\r\n        }\r\n        if (strSign === '') {\r\n            console.log('Equation: parse string : sign not found');\r\n            return false;\r\n        }\r\n    };\r\n\r\n    private _formatSign = (signStr: string): string => {\r\n        if (signStr === undefined) {\r\n            return '=';\r\n        }\r\n\r\n        if (signStr.includes('geq')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>=')) {\r\n            return '>=';\r\n        } else if (signStr.includes('=>')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>')) {\r\n            return '>';\r\n        } else if (signStr.includes('leq')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<=')) {\r\n            return '<=';\r\n        } else if (signStr.includes('=<')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<')) {\r\n            return '<';\r\n        } else {\r\n            return '='\r\n        }\r\n    };\r\n\r\n    private _reverseSign = (): Equation => {\r\n        if (this._sign === '=') {\r\n            return this;\r\n        }\r\n\r\n        if (this._sign.includes('<')) {\r\n            this._sign.replace('<', '>');\r\n            return this;\r\n        }\r\n        if (this._sign.includes('>')) {\r\n            this._sign.replace('>', '<');\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    create = (left: Polynom, right: Polynom, sign?: string): Equation => {\r\n        this._left = left;\r\n        this._right = right;\r\n        this._sign = this._formatSign(sign);\r\n        return this;\r\n    };\r\n\r\n    clone = (): Equation => {\r\n        return new Equation().create(this._left.clone(), this._right.clone(), this._sign + '');\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n    // -----------------------------------------------\r\n    private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n        degree: 2\r\n    };\r\n    get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n        return this._randomizeDefaults;\r\n    }\r\n\r\n    set randomizeDefaults(value) {\r\n        this._randomizeDefaults = value;\r\n    }\r\n\r\n    randomize = (opts?: {}, sign?: string): Equation => {\r\n        // TODO: Generate equations randomly, using config.\r\n        return new Equation().create(new Polynom(), new Polynom(), sign);\r\n    };\r\n\r\n\r\n    // -----------------------------------------------\r\n    // Equations operations\r\n    // -----------------------------------------------\r\n    /**\r\n     * Reorder will move all monoms containing a letter on the left, all the other on the right.\r\n     */\r\n    moveLeft = (): Equation => {\r\n        this._left = this._left.clone().subtract(this._right)\r\n        this._right.zero()\r\n        return this;\r\n    }\r\n    reorder = (allLeft?: boolean): Equation => {\r\n        // Move all monoms of degree greater than 0 to the left.\r\n        // and all zero degree monoms to the right.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n\r\n        if (allLeft) {\r\n            return this.moveLeft()\r\n        }\r\n        let mMove: Monom;\r\n        for (let m of this._left.monoms) {\r\n            if (m.degree() === 0) {\r\n                mMove = m.clone();\r\n                this._left.subtract(mMove);\r\n                this._right.subtract(mMove);\r\n            }\r\n        }\r\n\r\n        // Reorder the left and right polynoms\r\n        this._left.reorder();\r\n        this._right.reorder();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiply by the lcm denominator and divide by the gcm numerators.\r\n     */\r\n    simplify = (): Equation => {\r\n        this.multiply(Numeric.lcm(...this._left.getDenominators(),...this._right.getDenominators()));\r\n        this.divide(Numeric.gcd(...this._left.getNumerators(),...this._right.getNumerators()));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Reorder the polynom to have only one letter on the left, the rest on the right.\r\n     * @param letter\r\n     */\r\n    isolate = (letter?: string): Equation | false => {\r\n        // Determine if we can isolate the variables.\r\n\r\n        // Both part of the equations must be of the first degree.\r\n        //TODO: handle equations of degree two or more ?\r\n        if (this.degree(letter) !== 1) {\r\n            return false;\r\n        }\r\n\r\n        // Modify the equation to isolate the asked variable.\r\n        // TODO: must handle equations like 3xy+5y=4 => y = 4/(3x-5)\r\n        if (this.isMultiVariable()) {\r\n            return false;\r\n        }\r\n\r\n        // Isolate the letter.\r\n        let mMove: Monom, cMove: Fraction;\r\n        // Start by moving everything to the left.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n        for (let m of this._left.monoms) {\r\n            if (!m.hasLetter(letter)) {\r\n                mMove = m.clone();\r\n                this._left.add(mMove.clone().opposed());\r\n                this._right.add(mMove.clone().opposed());\r\n            }\r\n        }\r\n\r\n        // In theory, we should have only one item on the left.\r\n        if (this._left.length !== 1) {\r\n            return false;\r\n        }\r\n        cMove = this._left.monoms[0].coefficient.clone();\r\n        this._left.divide(cMove);\r\n        this._right.divide(cMove);\r\n        return this;\r\n    };\r\n\r\n    replaceBy = (letter: string, P: Polynom): Equation => {\r\n        this._left.replaceBy(letter, P)\r\n        this._right.replaceBy(letter, P)\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiple an equation by a fraction value.\r\n     * @param value\r\n     */\r\n    multiply = (value: any): Equation => {\r\n\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        // Multiply each part of the equation by the fraction\r\n        this._left.multiply(F);\r\n        this._right.multiply(F);\r\n\r\n        // The sign of the inequation must be changed.\r\n        if (this._sign !== '=' && F.sign() === -1) {\r\n            this._reverseSign();\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * divide an equation by a given value (transformed as a fraction)\r\n     *\r\n     * ```\r\n     * 8x+10=6x \\vert 2\r\n     * 4x+5=3x\r\n     * ```\r\n     *\r\n     * |>Alternatively with $3x-4$ maybe it's working ?\r\n     * $$\\frac{3x}{5}$$\r\n     *\r\n     * @param value\r\n     * @returns {Equation}\r\n     */\r\n    divide = (value: any): Equation => {\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        if(F.isZero()){\r\n            return this;\r\n        }else {\r\n            return this.multiply(F.invert());\r\n        }\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations helpers\r\n    // -----------------------------------------------\r\n\r\n    /**\r\n     * Get the degree of the equation\r\n     * @param letter\r\n     */\r\n    degree = (letter?: string): number => {\r\n        return Math.max(this._left.degree(letter), this._right.degree(letter));\r\n    };\r\n\r\n    /**\r\n     * Determine if the equation contains more than one letter/variable.\r\n     */\r\n    isMultiVariable = (): boolean => {\r\n        return this._left.isMultiVariable || this._right.isMultiVariable;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        // @ts-ignore\r\n        return [...new Set([...this._left.letters(), ...this._right.letters()])];\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations solving algorithms\r\n    // -----------------------------------------------\r\n    solve = (letter?: string): Equation => {\r\n        // Initialise the variables:\r\n        this._solutions = [];\r\n\r\n        // TODO: this._polynom could be removed.\r\n        // TODO: consolidate solving equations (inequations vs equations)\r\n        this._polynom = this._left.clone().subtract(this._right);\r\n\r\n        switch (this._polynom.degree(letter)) {\r\n            case 0:\r\n            case 1:\r\n                this._solveDegree1(letter);\r\n                break;\r\n            case 2:\r\n                this._solveDegree2(letter);\r\n                break;\r\n            default:\r\n                this._solveDegree3plus(letter);\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    private isGreater = (): boolean => {\r\n        if (this._sign.indexOf('>') !== -1) {\r\n            return true;\r\n        }\r\n        return this._sign.indexOf('geq') !== -1;\r\n\r\n    };\r\n    private isStrictEqual = (): boolean => {\r\n        return this._sign === '=';\r\n    };\r\n    private isAlsoEqual = (): boolean => {\r\n        if (this._sign.indexOf('=') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('geq') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('leq') !== -1) {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    private _solveDegree1 = (letter?: string): string[] => {\r\n        const m1 = this._polynom.monomByDegree(1, letter).coefficient,\r\n            m0 = this._polynom.monomByDegree(0, letter).coefficient,\r\n            v = m0.clone().opposed().divide(m1).display;\r\n        let s: string;\r\n\r\n        if (this.isStrictEqual()) {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0) {\r\n                    this._solutions = [this._real];\r\n                } else {\r\n                    this._solutions = [this._varnothing];\r\n                }\r\n            } else {\r\n                this._solutions = [v];\r\n            }\r\n        } else {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0 && this.isAlsoEqual()) {\r\n                    s = '\\\\mathbb{R}';\r\n                } else {\r\n                    if (m0.value > 0) {\r\n                        s = this.isGreater() ? this._real : this._varnothing;\r\n                    } else {\r\n                        s = !this.isGreater() ? this._real : this._varnothing;\r\n                    }\r\n                }\r\n            } else {\r\n                // Must handle the case if the m1 monom is negative.\r\n                if ((this.isGreater() && m1.sign() === 1) || (!this.isGreater() && m1.sign() === -1)) {\r\n                    s = `\\\\left${this.isAlsoEqual() ? '\\\\[' : '\\\\]'}${v};+\\\\infty\\\\right\\\\[`;\r\n                } else {\r\n                    s = `\\\\left\\\\]-\\\\infty;${v} \\\\right\\\\${this.isAlsoEqual() ? '\\\\]' : '\\\\['}`;\r\n                }\r\n            }\r\n            this._solutions = [s];\r\n        }\r\n\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree2 = (letter?: string): string[] => {\r\n        let aF = this._polynom.monomByDegree(2, letter).coefficient,\r\n            bF = this._polynom.monomByDegree(1, letter).coefficient,\r\n            cF = this._polynom.monomByDegree(0, letter).coefficient,\r\n            delta: number, nthDelta: Nthroot,\r\n            lcm = Numeric.lcm(aF.denominator, bF.denominator, cF.denominator),\r\n            a = aF.multiply(lcm).value,\r\n            b = bF.multiply(lcm).value,\r\n            c = cF.multiply(lcm).value,\r\n            realX1: number, realX2: number,\r\n            sX1: string, sX2: string;\r\n\r\n        delta = b * b - 4 * a * c;\r\n\r\n        if (delta > 0) {\r\n            realX1 = (-b - Math.sqrt(delta)) / (2 * a);\r\n            realX2 = (-b + Math.sqrt(delta)) / (2 * a);\r\n\r\n            if(delta>1.0e5){\r\n                // The delta is too big to be parsed !\r\n                this._solutions = [\r\n                    ((-b - Math.sqrt(delta))/(2 * a)).toFixed(5),\r\n                    ((-b + Math.sqrt(delta))/(2 * a)).toFixed(5)\r\n                ]\r\n            }else {\r\n                nthDelta = new Nthroot().parse(delta).reduce();\r\n                if (nthDelta.hasRadical()) {\r\n                    // -b +- coeff\\sqrt{radical}\r\n                    // -------------------------\r\n                    //           2a\r\n                    let gcd = Numeric.gcd(b, 2 * a, nthDelta.coefficient);\r\n                    nthDelta.coefficient = nthDelta.coefficient / gcd;\r\n\r\n                    // TODO: Can i delete the next line ?\r\n                    // let deltaC = nthDelta.coefficient, deltaR = nthDelta.radical;\r\n                    if (b !== 0) {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                `${-b / gcd} - ${nthDelta.tex}`,\r\n                                `${-b / gcd} + ${nthDelta.tex}`,\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                `\\\\dfrac{${-b / gcd} - ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                `\\\\dfrac{${-b / gcd} + ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                            ]\r\n                        }\r\n                    } else {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                `- ${nthDelta.tex}`,\r\n                                `${nthDelta.tex}`,\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                `\\\\dfrac{- ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                `\\\\dfrac{${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                            ]\r\n                        }\r\n                    }\r\n                } else {\r\n                    // -b +- d / 2a\r\n                    this._solutions = [\r\n                        new Fraction(-b - nthDelta.coefficient, 2 * a).reduce().dfrac,\r\n                        new Fraction(-b + nthDelta.coefficient, 2 * a).reduce().dfrac\r\n                    ]\r\n                }\r\n            }\r\n\r\n        } else if (delta === 0) {\r\n            this._solutions = [new Fraction(-b, 2 * a).reduce().dfrac];\r\n        } else {\r\n            this._solutions = [this._varnothing];\r\n        }\r\n\r\n\r\n        // Handle now the inequations.\r\n        if (!this.isStrictEqual()) {\r\n            if (this._solutions.length === 2) {\r\n                sX1 = (realX1 < realX2) ? this._solutions[0] : this._solutions[1];\r\n                sX2 = (realX1 < realX2) ? this._solutions[1] : this._solutions[0];\r\n\r\n                if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                    this._solutions = [\r\n                        `\\\\left]-\\\\infty ; ${sX1}\\\\right${this.isAlsoEqual() ? ']' : '['} \\\\cup \\\\left${this.isAlsoEqual() ? '[' : ']'}${sX2};+\\\\infty\\\\right[`\r\n                    ];\r\n                } else {\r\n                    this._solutions = [\r\n                        `\\\\left${this.isAlsoEqual() ? '[' : ']'}${sX1} ; ${sX2}\\\\right${this.isAlsoEqual() ? ']' : '['}`\r\n                    ]\r\n                }\r\n            } else if (this._solutions.length === 1 && this._solutions[0] !== this._varnothing) {\r\n                if (!this.isAlsoEqual()) {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [\r\n                            `\\\\left]-\\\\infty ; ${this._solutions[0]}\\\\right[ \\\\cup \\\\left]${this._solutions[0]};+\\\\infty\\\\right[`\r\n                        ];\r\n                    } else {\r\n                        this._solutions = [this._varnothing];\r\n                    }\r\n                } else {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [this._real];\r\n                    } else {\r\n                        // this._solutions = [ this._solutions[0] ];\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.isGreater()) {\r\n                    this._solutions = [aF.sign() === 1 ? this._real : this._varnothing];\r\n                } else {\r\n                    this._solutions = [aF.sign() === -1 ? this._real : this._varnothing];\r\n                }\r\n            }\r\n        }\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree3plus = (letter?: string): string[] => {\r\n        // TODO: try to resolve equations with a degree superior than 2.\r\n        this._solutions = [letter];  // ESLint remove system :(\r\n        return this._solutions;\r\n    };\r\n\r\n}","import {Fraction} from \"../coefficients\";\r\nimport {Equation} from \"./equation\";\r\nimport {Polynom} from \"./polynom\";\r\nimport {Monom} from \"./monom\";\r\nimport {Random} from \"../random\";\r\n\r\n    export class LinearSystem {\r\n        private _solutions: { [letter: string]: { value: Fraction, isReal: boolean, isVarnothing: boolean } };\r\n        private _resolutionSteps: LinearSystem[];\r\n        private _equations: Equation[];\r\n        private _letters: string[];\r\n\r\n        constructor(...equationStrings: string[]) {\r\n            this._equations = [];\r\n            this._letters = 'xy'.split('');\r\n\r\n            if (equationStrings !== undefined && equationStrings.length > 0) {\r\n                this.parse(...equationStrings);\r\n            }\r\n\r\n            return this;\r\n        }\r\n\r\n        get isLinerarSystem() {\r\n            return true;\r\n        }\r\n\r\n        // ------------------------------------------\r\n        // Getter and setter\r\n        // ------------------------------------------\r\n        get equations(): Equation[] {\r\n            return this._equations;\r\n        }\r\n\r\n        set equations(value) {\r\n            this._equations = value;\r\n        }\r\n\r\n        get letters(): string {\r\n            return this._letters.join('')\r\n        }\r\n\r\n        set letters(value: string) {\r\n            this._letters = value.split('');\r\n        }\r\n\r\n        get isSolvable(): boolean {\r\n            let V = this.variables;\r\n\r\n            // TODO: in some case, it is possible to resolve systems if there isn't the isSame number of vars and equations\r\n            if (V.length !== this._equations.length) {\r\n                return false;\r\n            }\r\n\r\n            //TOOD: Must check if two equations isn't a linear combination of the others ?\r\n\r\n            return true;\r\n        }\r\n\r\n        get variables(): string[] {\r\n            let V: string[] = [];\r\n            for (let E of this._equations) {\r\n                V = V.concat(E.variables);\r\n            }\r\n            return [...new Set(V)].sort();\r\n        }\r\n\r\n        get tex(): string {\r\n            // Build the array of values.\r\n            // Reorder\r\n            // This clone the system :!!!\r\n            //TODO: Avoid cloning this linear system\r\n            let LS = this.clone().reorder(),\r\n                letters = LS.variables,\r\n                equStr: string[],\r\n                equArray: string[] = [],\r\n                m: Monom;\r\n\r\n            // TODO: Manage tex output of linear equations\r\n            for (let equ of LS.equations) {\r\n                equStr = [];\r\n                for (let L of letters) {\r\n                    m = equ.left.monomByLetter(L);\r\n\r\n                    if (equStr.length === 0) {\r\n                        equStr.push(m.isZero() ? '' : m.tex);\r\n                    } else {\r\n                        equStr.push(m.isZero() ? '' : ((m.coefficient.sign() === 1) ? '+' : '') + m.tex);\r\n                    }\r\n                }\r\n\r\n                // Add the equal sign\r\n                equStr.push('=');\r\n\r\n                // Add the right hand part of the equation (should be only a number, because it has been reorderd)\r\n                equStr.push(equ.right.tex);\r\n\r\n                // Add to the list.\r\n                equArray.push(equStr.join('&'));\r\n            }\r\n\r\n\r\n            return `\\\\left\\\\{\\\\begin{array}{${\"r\".repeat(letters.length)}cl}${equArray.join('\\\\\\\\\\ ')}\\\\end{array}\\\\right.`;\r\n            //return `\\\\left\\\\{\\\\begin{array}{rrrcl}${this._equations.map(equ => `${equ.tex}`).join('\\\\\\\\\\ \\n')}\\\\end{array}\\\\right.`;\r\n        }\r\n\r\n        get texSolution(): string {\r\n            let tex: string[] = [];\r\n\r\n            if (this._solutions === undefined) {\r\n                this.solve();\r\n            }\r\n\r\n            for (let letter in this._solutions) {\r\n                if (this._solutions[letter].isReal) {\r\n                    console.log(`Undetermined (letter ${letter})`);\r\n                    return;\r\n                }\r\n                if (this._solutions[letter].isVarnothing) {\r\n                    console.log(`Undefined (letter ${letter})`);\r\n                    return;\r\n                }\r\n\r\n                tex.push(this._solutions[letter].value.dfrac);\r\n            }\r\n            return `(${tex.join(';')})`;\r\n        }\r\n\r\n        // ------------------------------------------\r\n        // Creation / parsing functions\r\n        // ------------------------------------------\r\n        parse = (...equations: any[]): LinearSystem => {\r\n            this._equations = equations.map(value => new Equation(value));\r\n            this._findLetters();\r\n            return this;\r\n        };\r\n\r\n        setCoefficient = (...coefficients: string[]): LinearSystem => {\r\n            // Reset the equations list\r\n            this._equations = [];\r\n\r\n            let i = 0;\r\n            while (i < coefficients.length - this._letters.length) {\r\n                let left = new Polynom().parse(this._letters.join(''), ...coefficients.slice(i, i + this._letters.length)),\r\n                    right = new Polynom(coefficients[i + this._letters.length].toString()),\r\n                    equ = new Equation().create(left, right);\r\n                this._equations.push(equ.clone());\r\n\r\n                i = i + this._letters.length + 1;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        clone = (): LinearSystem => {\r\n            return new LinearSystem().parse(...this._equations.map(equ => equ.clone()));\r\n        };\r\n\r\n        setLetters = (...letters: string[]): LinearSystem => {\r\n            this._letters = letters;\r\n            return this\r\n        }\r\n        private _findLetters = (): LinearSystem => {\r\n            // Find all letters used.\r\n            let variables = new Set();\r\n\r\n            for (let equ of this._equations) {\r\n                variables = new Set([...variables, ...equ.variables]);\r\n            }\r\n\r\n            // TODO: How to transform (Set of string) to string[]\r\n            // @ts-ignore\r\n            this._letters = [...variables];\r\n            return this;\r\n        }\r\n\r\n        // -----------------------------------------------\r\n        // Equations generators and randomizers\r\n        // -----------------------------------------------\r\n        generate = (...solutions: Fraction[] | number[]): LinearSystem => {\r\n            let solutionsF: Fraction[] = [];\r\n\r\n            // Convert the numbers to fractions if necessary\r\n            for (let s of solutions) {\r\n                if (typeof s === \"number\") {\r\n                    solutionsF.push(new Fraction(s.toString()));\r\n                } else {\r\n                    solutionsF.push(s.clone());\r\n                }\r\n            }\r\n\r\n            // Create the equations and make sure they are not linear combined.\r\n            this._equations = [];\r\n            for (let i = 0; i < solutions.length; i++) {\r\n                this._equations.push(this._generateOneEquation(...solutionsF));\r\n            }\r\n            return this;\r\n        };\r\n        private _generateOneEquation = (...solutions: Fraction[]): Equation => {\r\n            let coeff: number[] = [], leftValue: Fraction = new Fraction().zero(),\r\n                letters: string[] = ['x', 'y', 'z', 't', 'u', 'v', 'w', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],\r\n                equString: string = '', equ: Equation;\r\n            for (let i = 0; i < solutions.length; i++) {\r\n                coeff.push(Random.numberSym(5));\r\n                leftValue.add(solutions[i].clone().multiply(coeff[i]));\r\n                equString += `${(coeff[i] < 0) ? coeff[i] : '+' + coeff[i]}${letters[i]}`\r\n            }\r\n\r\n            // LeftValue contains the left part oof the equation - and is then the isSame as the right part.\r\n            // It might be a Fraction.\r\n\r\n            // Must check if it's not a linear combination\r\n            equ = new Equation(`${equString}=${leftValue.display}`);\r\n            if (equ.right.monoms[0].coefficient.denominator != 1) {\r\n                equ.multiply(new Fraction(equ.right.monoms[0].coefficient.denominator, 1));\r\n            }\r\n            if (this._checkIfLinerCombination(equ)) {\r\n                return equ;\r\n            } else {\r\n                return this._generateOneEquation(...solutions);\r\n            }\r\n        };\r\n\r\n\r\n        // ------------------------------------------\r\n        // Mathematical operations\r\n        // ------------------------------------------\r\n        private _linearReduction(eq1: Equation, eq2: Equation, letter: string): Equation {\r\n            // TODO: handle other signs for equations ?\r\n            // Get the monom for the particular letter.\r\n            let c1 = eq1.left.monomByDegree(1, letter).coefficient.clone(),\r\n                c2 = eq2.left.monomByDegree(1, letter).coefficient.clone().opposed();\r\n\r\n            return this.mergeEquations(eq1, eq2, c2, c1);\r\n        }\r\n\r\n        mergeEquations = (eq1: Equation, eq2: Equation, factor1: any, factor2: any): Equation => {\r\n            // Set and clone the equations.\r\n\r\n            let eq1multiplied = eq1.clone().multiply(new Fraction(factor1)),\r\n                eq2multiplied = eq2.clone().multiply(new Fraction(factor2));\r\n\r\n            // Add both equations together.\r\n            eq1multiplied.left.add(eq2multiplied.left);\r\n            eq1multiplied.right.add(eq2multiplied.right);\r\n\r\n            return eq1multiplied;\r\n        }\r\n\r\n\r\n        // ------------------------------------------\r\n        // Solvers algorithm\r\n        // ------------------------------------------\r\n        reorder = (): LinearSystem => {\r\n            for (let E of this._equations) {\r\n                E.reorder();\r\n            }\r\n            return this;\r\n        };\r\n\r\n        solve = (): LinearSystem => {\r\n            // Solve it by linear\r\n            this._solutions = {};\r\n            this._resolutionSteps = [];\r\n\r\n            // Reorder all equations.\r\n            this.reorder();\r\n\r\n            // Get all variables in the linear system\r\n            let V = this.variables.sort();\r\n\r\n            for (let letter of V) {\r\n                this._solutions[letter] = this._solveOneLetter(letter, V)\r\n            }\r\n\r\n            // TODO: LinearSystem - solve: optimization and handle undetermined and undefined systems.\r\n            return this;\r\n        };\r\n\r\n        private _checkIfLinerCombination = (equ: Equation): boolean => {\r\n\r\n            return true;\r\n        };\r\n\r\n        private _solveOneLetter(letter: string, V: string[]): { value: Fraction, isReal: boolean, isVarnothing: boolean } {\r\n            // list of equations.\r\n            let LE: Equation[] = this.clone().equations,\r\n                reducedEquations: Equation[] = [];\r\n\r\n            // Reduce the equations.\r\n            // Do it as long as there is more than one step, but no more than the number of equations.\r\n            for (let L of V) {\r\n                // remove the setLetter from all equations using linear combinations\r\n                if (L === letter) {\r\n                    continue;\r\n                }\r\n\r\n                // Linear reduction.\r\n                // TODO: Search for better association\r\n                for (let i = 0; i < LE.length - 1; i++) {\r\n                    reducedEquations.push(this._linearReduction(LE[i], LE[i + 1], L));\r\n                }\r\n\r\n                // Keep track of each steps.\r\n                this._resolutionSteps.push(new LinearSystem().parse(...reducedEquations));\r\n\r\n                // Set the list of equations to the new version.\r\n                LE = this._resolutionSteps[this._resolutionSteps.length - 1].clone().equations;\r\n\r\n                // Reset the stack\r\n                reducedEquations = [];\r\n            }\r\n\r\n            // Solve the equations\r\n            let E = this._resolutionSteps[this._resolutionSteps.length - 1].equations[0];\r\n            E.solve();\r\n\r\n            return {\r\n                value: new Fraction(E.solutions[0]),\r\n                isReal: E.isReal,\r\n                isVarnothing: E.isVarnothing\r\n            }\r\n        }\r\n\r\n        // ------------------------------------------\r\n        // Helpers\r\n        // ------------------------------------------\r\n        log = (): string => {\r\n            let str: string = '';\r\n\r\n            for (let E of this._equations) {\r\n                console.log(E.tex);\r\n                str += `${E.tex}\\\\n}`;\r\n            }\r\n\r\n            return str;\r\n        };\r\n    }\r\n","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Numeric} from \"../numeric\";\r\n\r\nexport class Vector {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n\r\n    constructor(...values: any) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n    };\r\n\r\n    get isVector() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get normSquare(): Fraction {\r\n        return this._x.clone().pow(2).add(this._y.clone().pow(2));\r\n    }\r\n\r\n    get norm(): number {\r\n        return Math.sqrt(this.normSquare.value);\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\begin{pmatrix}${this._x.tex} \\\\\\\\\\ ${this._y.tex} \\\\end{pmatrix}`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Vector => {\r\n        // TODO: Must be more strict about what is given and limit to two dimensional vectors.p\r\n        // Maybe more than one value was given...\r\n        // Initialize the vector\r\n        this.zero();\r\n\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        if (values.length === 1) {\r\n            if (values[0].isVector) {\r\n                return values[0].clone()\r\n            } else {\r\n                return this._parseString(values[0])\r\n            }\r\n        }\r\n\r\n        if (values.length >= 2) {\r\n            // Two points are given - skip the third value.\r\n            if (values[0].isPoint && values[1].isPoint) {\r\n                this._x = values[1].x.clone().subtract(values[0].x)\r\n                this._y = values[1].y.clone().subtract(values[0].y)\r\n                return this;\r\n            }\r\n\r\n            // Fractions or a number are give\r\n            if (values[0].isFraction || !isNaN(values[0])) {\r\n                this._x = new Fraction(values[0])\r\n            }\r\n            if (values[1].isFraction || !isNaN(values[1])) {\r\n                this._y = new Fraction(values[1])\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Vector => {\r\n        let V = new Vector();\r\n\r\n        if (this._x !== null) {\r\n            V.x = this._x.clone();\r\n        }\r\n        if (this._y !== null) {\r\n            V.y = this._y.clone();\r\n        }\r\n        return V;\r\n    }\r\n\r\n    reset = (): Vector => {\r\n        this._x = null;\r\n        this._y = null;\r\n        return this;\r\n    }\r\n\r\n    zero = (): Vector => {\r\n        this.reset();\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    one = (): Vector => {\r\n        this._x = new Fraction();\r\n        this._y = new Fraction();\r\n        return this;\r\n    }\r\n\r\n    private _parseString = (value: string): Vector => {\r\n        // Split comma, semi colon or single space.\r\n        let components = value.split(/[,;\\s]/g);\r\n\r\n        // Validate the fraction values.\r\n        this.x = new Fraction(components[0] || null);\r\n        this.y = new Fraction(components[1] || null);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Vector => {\r\n        this._x.opposed();\r\n        this._y.opposed();\r\n        return this;\r\n    }\r\n\r\n    add = (V: Vector): Vector => {\r\n        this._x.add(V.x);\r\n        this._y.add(V.y);\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (V: Vector): Vector => {\r\n        return this.add(V.clone().opposed());\r\n    }\r\n\r\n    scalarProductWithVector = (V: Vector): Fraction => {\r\n        // TODO: Add the scalar factor !!!!\r\n        return this._x.clone().multiply(V.x).add(this._y.clone().multiply(V.y));\r\n    }\r\n\r\n    static scalarProduct = (v1: Vector, v2: Vector): number => {\r\n        // TODO: Transform to fraction with nthroot.\r\n        return  v1.x.value * v2.x.value + v1.y.value * v2.y.value;\r\n    };\r\n\r\n    normal = (): Vector => {\r\n        let x = this.x.clone().opposed(), y = this.y.clone();\r\n        this._x = y;\r\n        this._y = x;\r\n        return this;\r\n    }\r\n\r\n    isNormalTo = (v: Vector): boolean => {\r\n        return this.scalarProductWithVector(v).isZero()\r\n    }\r\n\r\n    multiplyByScalar = (k: any): Vector => {\r\n        let scalar = new Fraction(k);\r\n        this._x.multiply(scalar);\r\n        this._y.multiply(scalar);\r\n        return this;\r\n    }\r\n\r\n    divideByScalar = (k:any): Vector => {\r\n        return this.multiplyByScalar(new Fraction(k).invert());\r\n    }\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    simplify = (): Vector => {\r\n        // Multiply by the lcm of denominators.\r\n        return this.multiplyByScalar(Numeric.lcm(this._x.denominator, this._y.denominator))\r\n            .divideByScalar(Numeric.gcd(this._x.numerator, this._y.numerator));\r\n    }\r\n\r\n    angleWith = (V: Vector, sharp?: Boolean, radian?: Boolean): number => {\r\n        let scalar = this.scalarProductWithVector(V).value,\r\n            toDegree = radian ? 1 : 180 / Math.PI;\r\n        if (sharp) {\r\n            scalar = Math.abs(scalar);\r\n        }\r\n\r\n        return toDegree * Math.acos(scalar / (this.norm * V.norm));\r\n    }\r\n}\r\n","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\n//TODO: Ajouter une vérification si la droite existe.\r\nexport class Point {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n    private _exist: Boolean;\r\n\r\n    constructor(...values: any) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this\r\n    };\r\n\r\n    get isPoint() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.tex);\r\n        pts.push(this._y.tex);\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Point => {\r\n        // Initialize the value.\r\n        this.zero();\r\n\r\n        // Nothing is given\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        // One element is given - might be already a point !\r\n        if (values.length === 1) {\r\n            // it's already a point - clone it\r\n            if (values[0] instanceof Point) {\r\n                this._x = values[0].x.clone()\r\n                this._y = values[0].y.clone()\r\n                return this;\r\n            }\r\n\r\n            // Value is given as string, comma separated.\r\n            if(typeof values[0] === 'string'){\r\n                let xy = values[0].split(',')\r\n                if(xy.length===2){\r\n                    this._x = new Fraction(xy[0]).reduce()\r\n                    this._y = new Fraction(xy[1]).reduce()\r\n                    return this;\r\n                }\r\n            }\r\n\r\n            // Value given as an object with {x: value, y: value}\r\n            if (values[0].x !== undefined && values[0].y !== undefined) {\r\n                this._x = new Fraction(values[0].x).reduce()\r\n                this._y = new Fraction(values[0].y).reduce()\r\n            } else {\r\n                return this.zero();\r\n            }\r\n        }\r\n        if (values.length === 2) {\r\n            this._x = new Fraction(values[0]).reduce()\r\n            this._y = new Fraction(values[1]).reduce()\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Point => {\r\n        this._x = this._x.clone()\r\n        this._y = this._y.clone()\r\n\r\n        return this\r\n    }\r\n\r\n    zero = (): Point => {\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    origin = (): Point => {\r\n        this.zero();\r\n        return this;\r\n    }\r\n\r\n    middleOf = (P1: Point, P2: Point): Point => {\r\n        this._x = P1.x.clone().add(P2.x).divide(2);\r\n        this._y = P1.y.clone().add(P2.y).divide(2);\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Display functions\r\n    // ------------------------------------------\r\n    texValues = (numberOfDigits: number): string => {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.value.toFixed(numberOfDigits===undefined?2:numberOfDigits));\r\n        pts.push(this._y.value.toFixed(numberOfDigits===undefined?2:numberOfDigits));\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Static functions\r\n    // ------------------------------------------\r\n    static pmatrix = (a: any, b: any, c?: any): string => {\r\n        if (c === undefined) {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\end{pmatrix}`;\r\n        } else {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\\\\\ ${c.tex ? c.tex : c} \\\\end{pmatrix}`;\r\n        }\r\n    };\r\n\r\n}\r\n","/**\r\n * This class works for 2d line in a plane.\r\n */\r\n\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Vector} from \"./vector\";\r\nimport {Point} from \"./point\";\r\nimport {Polynom} from \"../algebra/polynom\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Equation} from \"../algebra/equation\";\r\n\r\nexport class Line {\r\n    // A line is defined as the canonical form\r\n    // ax + by + c = 0\r\n    private _a: Fraction;\r\n    private _b: Fraction;\r\n    private _c: Fraction;\r\n    private _OA: Point;\r\n    private _d: Vector;\r\n    private _n: Vector;\r\n    private _exists: boolean\r\n\r\n    constructor(...values: any) {\r\n\r\n        this._exists = false;\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isLine():boolean {return true;}\r\n    get exists(): boolean {return this._exists; }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equation(): Equation {\r\n        return new Equation(new Polynom().parse('xy', this._a, this._b, this._c), new Polynom('0')).simplify();\r\n    }\r\n    get tex(): { canonical: string, mxh: string, parametric: string } {\r\n        // canonical    =>  ax + by + c = 0\r\n        // mxh          =>  y = -a/b x - c/b\r\n        // parametric   =>  (xy) = OA + k*d\r\n\r\n        let canonical = this.equation;\r\n        // Make sur the first item is positive.\r\n        if(this._a.isNegative()){\r\n            canonical.multiply(-1);\r\n        }\r\n\r\n        return {\r\n            canonical: canonical.tex,\r\n            mxh: this.slope.isInfinity() ? 'x=' + this.OA.x.tex : 'y=' + new Polynom().parse('x', this.slope, this.height).tex,\r\n            parametric: `${Point.pmatrix('x', 'y')} = ${Point.pmatrix(this._OA.x, this._OA.y)} + k\\\\cdot ${Point.pmatrix(this._d.x, this._d.y)}`\r\n        }\r\n    }\r\n\r\n    get a(): Fraction {\r\n        return this._a;\r\n    }\r\n\r\n    set a(value: Fraction) {\r\n        this._a = value;\r\n    }\r\n\r\n    get b(): Fraction {\r\n        return this._b;\r\n    }\r\n\r\n    set b(value: Fraction) {\r\n        this._b = value;\r\n    }\r\n\r\n    get c(): Fraction {\r\n        return this._c;\r\n    }\r\n\r\n    set c(value: Fraction) {\r\n        this._c = value;\r\n    }\r\n\r\n    get OA(): Point {\r\n        return this._OA;\r\n    }\r\n\r\n    set OA(value: Point) {\r\n        this._OA = value;\r\n    }\r\n\r\n    get d(): Vector {\r\n        return this._d;\r\n    }\r\n\r\n    get n(): Vector {\r\n        return this._n;\r\n    }\r\n\r\n    get normal(): Vector {\r\n        return new Vector(this._a, this._b);\r\n    }\r\n\r\n    set d(value: Vector) {\r\n        this._d = value;\r\n    }\r\n\r\n    get slope(): Fraction {\r\n        return this._a.clone().opposed().divide(this._b);\r\n    }\r\n\r\n    get height(): Fraction {\r\n        return this._c.clone().opposed().divide(this._b);\r\n    }\r\n\r\n// ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...values: any): Line => {\r\n        this._exists = false;\r\n\r\n        if (values.length === 3) {\r\n            return this.parseByCoefficient(values[0], values[1], values[2]);\r\n        } else if (values.length === 2) {\r\n            if (values[0].isPoint && values[1].isVector) {\r\n                return this.parseByPointAndVector(values[0], values[1]);\r\n            } else if (values[0].isPoint && values[1].isPoint) {\r\n                return this.parseByPointAndVector(values[0], new Vector(values[0], values[1]));\r\n            }\r\n        } else if (values.length === 1){\r\n            // It's a already a line - clone it !\r\n            if(values[0].isLine){\r\n                return values[0].clone();\r\n            }\r\n\r\n            // Maybe it's a string or an equation\r\n            let equ = new Equation(values[0]);\r\n            if(equ.isEquation){\r\n                // Check if it's a valid equation.\r\n                equ.reorder(true)\r\n\r\n                // It must contain either x, y or both.\r\n                let letters = new Set(equ.letters());\r\n\r\n                // No 'x', no 'y' in the equations\r\n                if(!(letters.has('x') || letters.has('y'))){return;}\r\n\r\n                // Another letter in the equation.\r\n                for(let elem of ['x', 'y']){\r\n                    if(letters.has(elem)){\r\n                        letters.delete(elem)}\r\n                }\r\n\r\n                if(letters.size>0){\r\n                    console.log('Extra variable in the equation.')\r\n                    return this;\r\n                }\r\n\r\n                // Everything should be ok now...\r\n                return this.parseByCoefficient(equ.left.monomByLetter('x').coefficient, equ.left.monomByLetter('y').coefficient, equ.left.monomByDegree(0).coefficient)\r\n            }\r\n        }\r\n        // TODO: Add the ability to create line from a normal vector\r\n        console.log('Someting wrong happend while creating the line')\r\n        return this;\r\n    }\r\n\r\n    parseByCoefficient = (a: Fraction, b: Fraction, c: Fraction): Line => {\r\n        this._a = new Fraction(a);\r\n        this._b = new Fraction(b);\r\n        this._c = new Fraction(c);\r\n\r\n        // TODO: initialize direction and reference point\r\n        this._d = new Vector(this._b.clone(), this._a.clone().opposed());\r\n        this._OA = new Point(new Fraction().zero(), this._c.clone());\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    parseByPointAndVector = (P: Point, d: Vector): Line => {\r\n        // OX = OP + k*d\r\n        // x = px + kdx     * dy\r\n        // y = py + kdy     * dx\r\n        // ------------------\r\n        // dy * x = px * dy + kdxdy\r\n        // dx * y = py * dx + kdxdy\r\n        // ------------------\r\n        // dy * x - dx * y = px * dy - py * dx\r\n        // dy * x - dx * y - (px * dy - py * dx) = 0\r\n        this.parseByCoefficient(\r\n            d.y,\r\n            d.x.clone().opposed(),\r\n            P.x.clone().multiply(d.y).subtract(P.y.clone().multiply(d.x)).opposed()\r\n        )\r\n\r\n        // Choose the current values as point and direction vector instead of the automatic version.\r\n        this._OA = P.clone();\r\n        this._d = d.clone();\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    clone = (): Line => {\r\n        this._a = this._a.clone();\r\n        this._b = this._b.clone();\r\n        this._c = this._c.clone();\r\n\r\n        this._d = this._d.clone();\r\n        this._OA = this._OA.clone();\r\n        this._n = this._n.clone();\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    isParellelTo = (line: Line): Boolean => {\r\n        // Do they have the isSame direction ?\r\n        return this.slope.isEqual(line.slope) && this.height.isDifferent(line.height);\r\n    }\r\n    isSameAs = (line: Line): Boolean => {\r\n        return this.slope.isEqual(line.slope) && this.height.isEqual(line.height);\r\n    }\r\n    simplifyDirection = (): Line => {\r\n        let lcm = Numeric.lcm(this._d.x.denominator, this._d.y.denominator),\r\n            gcd = Numeric.gcd(this._d.x.numerator, this._d.y.numerator);\r\n\r\n        this._d.x.multiply(lcm).divide(gcd);\r\n        this._d.y.multiply(lcm).divide(gcd);\r\n        return this;\r\n    }\r\n    intersection = (line: Line): { point: Point, hasIntersection: boolean, isParallel: boolean, isSame: boolean } => {\r\n        let Pt = new Point(), isParallel = false, isSame = false, hasIntersection = true;\r\n\r\n        // this         => ax+by+c = 0\r\n        // line         => dx+ey+f = 0\r\n        //\r\n        //  aex + bey + ce = 0\r\n        //  dbx + bey + bf = 0\r\n        // (ae-db)x + ce-bf = 0\r\n        //\r\n        //  adx + bdy + cd = 0\r\n        //  adx + aey + af = 0\r\n        // (bd-ae)y + (cd-af)\r\n        //\r\n        // x = (bf-ce)/(ae-db)\r\n        // y = (af-cd)/(bd-ae)\r\n\r\n\r\n        // Theres is no 'y'\r\n        if (this._b.isZero() || line.b.isZero()) {\r\n            // TODO : handle no y in the line canonical form\r\n        }\r\n\r\n        if (this.isParellelTo(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isParallel = true;\r\n        } else if (this.isSameAs(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isSame = true;\r\n        } else {\r\n            Pt.x = this._b.clone().multiply(line.c).subtract(this._c.clone().multiply(line.b))\r\n                .divide(this._a.clone().multiply(line.b).subtract(this._b.clone().multiply(line.a)));\r\n            Pt.y = this._a.clone().multiply(line.c).subtract(this._c.clone().multiply(line.a))\r\n                .divide(this._b.clone().multiply(line.a).subtract(this._a.clone().multiply(line.b)));\r\n        }\r\n\r\n        return {\r\n            point: Pt,\r\n            hasIntersection: !(isParallel || isSame),\r\n            isParallel,\r\n            isSame\r\n        };\r\n    }\r\n\r\n    distanceTo(pt: Point): { value: number, fraction: Fraction, tex: string } {\r\n        let numerator = pt.x.clone().multiply(this._a)\r\n                .add(pt.y.clone().multiply(this._b))\r\n                .add(this._c).abs(),\r\n            d2 = this.normal.normSquare;\r\n\r\n        // The denominator is null - shouldn't be possible\r\n        if (d2.isZero()) {\r\n            return {\r\n                value: NaN,\r\n                tex: 'Not a line',\r\n                fraction: new Fraction().infinite()\r\n            }\r\n        }\r\n        // The denominator is a perfect square - simplify the tex result\r\n        let value = numerator.value / Math.sqrt(d2.value),\r\n            F = numerator.clone().divide(d2.clone().sqrt());\r\n\r\n        // The denominator is a perfect square.\r\n        if (d2.isSquare()) {\r\n            return {\r\n                value,\r\n                tex: F.tex,\r\n                fraction: F\r\n            }\r\n        }\r\n        // Complete answer...\r\n        return {\r\n            value,\r\n            tex: `\\\\frac{${numerator.tex}}{\\\\sqrt{${d2.tex}}}`,\r\n            fraction: F\r\n        };\r\n    }\r\n\r\n    hitSegment(A: Point, B: Point): boolean {\r\n        let iPt = this.intersection(\r\n            new Line(A, B)\r\n        )\r\n\r\n        // There is an intersection point\r\n        if(iPt.hasIntersection) {\r\n            return iPt.point.x.value >= Math.min(A.x.value, B.x.value)\r\n                && iPt.point.x.value <= Math.max(A.x.value, B.x.value)\r\n                && iPt.point.y.value >= Math.min(A.y.value, B.y.value)\r\n                && iPt.point.y.value <= Math.max(A.y.value, B.y.value)\r\n        }\r\n        return false;\r\n    }\r\n    // ------------------------------------------\r\n    // Special functions\r\n    // ------------------------------------------\r\n    canonicalAsFloatCoefficient(decimals: number): string{\r\n        if(decimals===undefined){\r\n            decimals = 2;\r\n        }\r\n\r\n        let ca = this._a.value,\r\n            cb = this._b.value,\r\n            cc= this._c.value,\r\n            canonical = '';\r\n\r\n        if(!this._a.isZero()){\r\n            if(this._a.isOne()){\r\n                canonical = 'x'\r\n            }else if(this._a.clone().opposed().isOne()){\r\n                canonical = '-x'\r\n            }else{\r\n                canonical = this._a.value.toFixed(decimals)+'x'\r\n            }\r\n        }\r\n\r\n        if(!this._b.isZero()){\r\n            if(this._b.isPositive()){canonical+='+'}\r\n            canonical += this._b.value.toFixed(decimals) + 'y'\r\n        }\r\n\r\n        if(!this._c.isZero()){\r\n            if(this._c.isPositive()){canonical+='+'}\r\n            canonical += this._c.value.toFixed(decimals)\r\n        }\r\n\r\n\r\n        return canonical + '=0';\r\n    }\r\n}","import {Numeric} from \"./maths/numeric\";\r\nimport {Shutingyard} from \"./maths/shutingyard\";\r\nimport {Random} from \"./maths/random\";\r\nimport {Fraction, Nthroot} from \"./maths/coefficients\";\r\nimport {Monom, Polynom, Equation, LinearSystem, Rational, Logicalset} from \"./maths/algebra\";\r\nimport {Line, Circle, Triangle, Point, Vector} from \"./maths/geometry\";\r\n\r\n// Expose as global\r\n// export let Pi = {\r\n(<any>window).Pi = {\r\n    ShutingYard: Shutingyard,\r\n    Numeric: Numeric,\r\n    Fraction: Fraction,\r\n    Root: Nthroot,\r\n    Monom: Monom,\r\n    Polynom: Polynom,\r\n    Equation: Equation,\r\n    LinearSystem: LinearSystem,\r\n    Rational: Rational,\r\n    Logicalset: Logicalset,\r\n    Random: Random,\r\n    Geometry: {\r\n        Vector: Vector,\r\n        Point: Point,\r\n        Line: Line,\r\n        Triangle: Triangle,\r\n        Circle: Circle\r\n    }\r\n};\r\n","/**\r\n * Rational polynom module contains everything necessary to handle rational polynoms.\r\n * @module Polynom\r\n */\r\n\r\nimport {Polynom} from \"./polynom\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\n/**\r\n * Rational class can handle rational polynoms\r\n */\r\n    export class Rational {\r\n        private _rawString: string;\r\n        private _numerator: Polynom;\r\n        private _denominator: Polynom;\r\n\r\n        /**\r\n         *\r\n         * @param numerator\r\n         * @param denominator\r\n         */\r\n        constructor(numerator?: Polynom, denominator?: Polynom) {\r\n            this._numerator = numerator ? numerator.clone() : new Polynom();\r\n            this._denominator = denominator ? denominator.clone() : new Polynom();\r\n        }\r\n\r\n        clone = (): Rational => {\r\n            this._numerator = this._numerator.clone()\r\n            this._denominator = this._denominator.clone()\r\n\r\n            return this;\r\n        }\r\n\r\n        get tex(): string {\r\n            return `\\\\dfrac{ ${this._numerator.tex} }{ ${this._denominator.tex} }`;\r\n        }\r\n\r\n        get texFactors(): string {\r\n            this._numerator.factorize()\r\n            this._denominator.factorize()\r\n\r\n            return `\\\\dfrac{ ${this._numerator.texFactors} }{ ${this._denominator.texFactors} }`\r\n        }\r\n\r\n        get numerator(): Polynom {\r\n            return this._numerator\r\n        }\r\n\r\n        get denominator(): Polynom {\r\n            return this._denominator\r\n        }\r\n\r\n        domain = (): string => {\r\n            let zeroes = this._denominator.getZeroes();\r\n            if (zeroes.length === 0 || zeroes[0] === false) {\r\n                return '\\\\mathbb{R}'\r\n            } else if (zeroes[0] === true) {\r\n                return '\\\\varnothing'\r\n            } else {\r\n                return '\\\\mathbb{R}\\\\setminus\\\\left{' +\r\n                    zeroes.map(x => {\r\n                        return (typeof x === 'boolean') ? '' : x.frac\r\n                    })\r\n                        .join(';') + '\\\\right}'\r\n            }\r\n        }\r\n\r\n        amplify = (P: Polynom): Rational => {\r\n            this._numerator.multiply(P);\r\n            this._denominator.multiply(P);\r\n\r\n            return this;\r\n        }\r\n\r\n        simplify = (P: Polynom): Rational => {\r\n            let NumeratorEuclidien = this._numerator.euclidian(P);\r\n            if (!NumeratorEuclidien.reminder.isZero()) {\r\n                return this;\r\n            }\r\n\r\n            let DenominatorEuclidien = this._denominator.euclidian(P);\r\n            if (!DenominatorEuclidien.reminder.isZero()) {\r\n                return this;\r\n            }\r\n\r\n            this._numerator = NumeratorEuclidien.quotient;\r\n            this._denominator = DenominatorEuclidien.quotient;\r\n            return this;\r\n        }\r\n\r\n        reduce = (): Rational => {\r\n            console.log(this._numerator.tex)\r\n            this._numerator.factorize();\r\n            console.log(this._numerator.factors.map(x => x.tex))\r\n            for (let f of this._numerator.factors) {\r\n                this.simplify(f);\r\n            }\r\n\r\n            return this;\r\n        }\r\n\r\n        opposed = (): Rational => {\r\n            this._numerator.opposed();\r\n            return this;\r\n        }\r\n        add = (R: Rational): Rational => {\r\n            // 1. Make sure both rational are at the same denominator\r\n            // 2. Add the numerators.\r\n            // 3. Simplify\r\n\r\n            // Store the adding denominator\r\n            let denominator = this._denominator.clone()\r\n\r\n            // Amplif the main rational polynom by the adding denominator\r\n            this.amplify(R._denominator)\r\n\r\n            // Add to the numerator the adding value...\r\n            this._numerator.add(R._numerator.clone().multiply(denominator));\r\n\r\n            return this;\r\n        }\r\n\r\n        subtract = (R: Rational): Rational => {\r\n            return this.add(R.clone().opposed())\r\n        }\r\n\r\n        limits = (value: Fraction | number, letter?: string): Fraction | number => {\r\n            if (value === Infinity || value === -Infinity) {\r\n                let N = this._numerator.monomByDegree(this._numerator.degree(letter), letter),\r\n                    D = this._denominator.monomByDegree(this._denominator.degree(letter), letter)\r\n\r\n                N.divide(D)\r\n\r\n                if (N.degree(letter) > 0) {\r\n                    return N.coefficient.sign() * (Math.pow((value > 0 ? 1 : -1), N.degree(letter) % 2)) === 1 ? Infinity : -Infinity\r\n                }\r\n                if (N.degree(letter) === 0) {\r\n                    return N.coefficient\r\n                }\r\n                if (N.degree(letter) > 0) {\r\n                    return N.coefficient.sign() * (Math.pow(-1, N.degree(letter) % 2)) === 1 ? 0 : -0\r\n                }\r\n            } else {\r\n                return this._numerator.evaluate({letter: value}).divide(this._denominator.evaluate({letter: value}))\r\n            }\r\n        }\r\n    }\r\n","/**\r\n * Polynom module contains everything necessary to handle polynoms.\r\n * @module Logicalset\r\n */\r\n\r\nimport {Shutingyard} from '../shutingyard';\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n */\r\n    export class Logicalset {\r\n        private _rawString: string;\r\n        private _rpn: { token: string, tokenType: string }[]\r\n\r\n        /**\r\n         *\r\n         * @param {string} value (optional) Default polynom to parse on class creation\r\n         */\r\n        constructor(value: string) {\r\n            this._rawString = value\r\n            this.parse(value)\r\n            return this;\r\n        }\r\n\r\n        get isLogicalset() {\r\n            return true;\r\n        };\r\n\r\n        private parse = (value: string): Logicalset => {\r\n            // TODO: Must format the value string to convert some items...\r\n\r\n            // Parse the updated value to the shutingyard algorithm\r\n            this._rpn = new Shutingyard('set').parse(value).rpn;\r\n\r\n            return this;\r\n        }\r\n\r\n        evaluate(tokenSets: { [key: string]: any[] }, reference?: any[]): any[] {\r\n            let varStack: (Set<unknown>)[] = []\r\n\r\n            let referenceSet: Set<unknown>\r\n            if (reference === undefined) {\r\n                referenceSet = new Set()\r\n                for (let key in tokenSets) {\r\n                    referenceSet = new Set([...referenceSet, ...tokenSets[key]])\r\n                }\r\n            } else {\r\n                referenceSet = new Set(reference)\r\n            }\r\n\r\n            for (let token of this._rpn) {\r\n                if (token.tokenType === 'variable') {\r\n                    // The variable has no token - assume it's empty.\r\n                    if (tokenSets[token.token] === undefined) {\r\n                        varStack.push(new Set())\r\n                    } else {\r\n                        varStack.push(new Set(tokenSets[token.token]));\r\n                    }\r\n\r\n                } else {\r\n                    switch (token.token) {\r\n                        case '&':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                varStack.push(new Set([...first].filter(x => second.has(x))))\r\n                            }\r\n                            break\r\n                        case '|':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n                                varStack.push(new Set([...first, ...second]))\r\n                            }\r\n                            break\r\n                        case '-':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n                                varStack.push(new Set([...first].filter(x => !second.has(x))))\r\n                            }\r\n                            break\r\n                        case '!':\r\n                            if (varStack.length >= 1) {\r\n                                let first = varStack.pop()\r\n\r\n                                varStack.push(new Set([...referenceSet].filter(x => !first.has(x))))\r\n                            }\r\n                            break\r\n                    }\r\n                }\r\n            }\r\n\r\n            return [...varStack[0]].sort();\r\n        }\r\n\r\n        vennAB(): any[] {\r\n            return this.evaluate({\r\n                    A: ['A', 'AB'],\r\n                    B: ['B', 'AB']\r\n                },\r\n                ['A', 'B', 'AB', 'E']\r\n            )\r\n        }\r\n\r\n        vennABC(): any[] {\r\n            return this.evaluate({\r\n                    A: ['A', 'AB', 'AC', 'ABC'],\r\n                    B: ['B', 'AB', 'BC', 'ABC'],\r\n                    C: ['C', 'AC', 'BC', 'ABC']\r\n                },\r\n                ['A', 'B', 'C', 'AB', 'AC', 'BC', 'E']\r\n            )\r\n        }\r\n\r\n        get rpn(): { token: string, tokenType: string }[] {\r\n            return this._rpn\r\n        }\r\n\r\n        get tex(): string {\r\n            let varStack: { token: string, tokenType: string } [] = []\r\n\r\n            for (let token of this._rpn) {\r\n                if (token.tokenType === 'variable') {\r\n                    varStack.push(token);\r\n                } else {\r\n                    switch (token.token) {\r\n                        case '&':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\cap ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '|':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\cup ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '-':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\setminus ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '!':\r\n                            if (varStack.length >= 1) {\r\n                                let first = varStack.pop()\r\n                                varStack.push({token: `\\\\overline{ ${first.token} }`, tokenType: 'variable'})\r\n                            }\r\n                            break\r\n                    }\r\n                }\r\n            }\r\n\r\n            return varStack[0].token\r\n        }\r\n    }","import {Point} from \"./point\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Vector} from \"./vector\";\r\nimport {Line} from \"./line\";\r\nimport {Equation} from \"../algebra/equation\";\r\n\r\nexport interface remarquableLines {\r\n    'medians': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'mediators': {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line,\r\n        'intersection': Point\r\n    },\r\n    'heights': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'bisectors': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    }\r\n}\r\n\r\nexport class Triangle {\r\n    private _A: Point;\r\n    private _B: Point;\r\n    private _C: Point;\r\n    private _lines: {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line\r\n    };\r\n    private _middles: {\r\n        'AB': Point,\r\n        'AC': Point,\r\n        'BC': Point\r\n    };\r\n    private _remarquables: remarquableLines;\r\n\r\n\r\n    constructor(...values: any) {\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    get isTriangle():boolean {return true;}\r\n\r\n    // ------------------------------------------\r\n    // Getter and setters\r\n    // ------------------------------------------\r\n\r\n    get A(): Point {\r\n        return this._A;\r\n    }\r\n\r\n    get B(): Point {\r\n        return this._B;\r\n    }\r\n\r\n    get C(): Point {\r\n        return this._C;\r\n    }\r\n\r\n    get AB(): Vector {\r\n        return this.getSegment('A', 'B');\r\n    }\r\n\r\n    get BA(): Vector {\r\n        return this.getSegment('B', 'A');\r\n    }\r\n\r\n    get BC(): Vector {\r\n        return this.getSegment('B', 'C');\r\n    }\r\n\r\n    get CB(): Vector {\r\n        return this.getSegment('C', 'B');\r\n    }\r\n\r\n    get AC(): Vector {\r\n        return this.getSegment('A', 'C');\r\n    }\r\n\r\n    get CA(): Vector {\r\n        return this.getSegment('C', 'A');\r\n    }\r\n\r\n    get isRectangle(): boolean {\r\n        if (this.AB.isNormalTo(this.BC)) {\r\n            return true;\r\n        }\r\n        if (this.AB.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n        if (this.BC.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    get isEquilateral(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) &&\r\n            this.AB.normSquare.isEqual(this.AC.normSquare);\r\n    }\r\n\r\n    get isIsocele(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) ||\r\n            this.AB.normSquare.isEqual(this.AC.normSquare) ||\r\n            this.BC.normSquare.isEqual(this.AC.normSquare)\r\n    }\r\n\r\n    get lines(): { 'AB': Line, 'BC': Line, 'AC': Line } {\r\n        return this._lines;\r\n    }\r\n\r\n    get remarquables(): remarquableLines {\r\n        return this._remarquables;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Parse values to a triangle. Supported formats:\r\n     * Point, Point, Point\r\n     * x1, y1, x2, y2, x3, y3\r\n     * TODO: Something else ?\r\n     * @param values\r\n     */\r\n    parse = (...values: any): Triangle => {\r\n        if (values.length === 6) {\r\n            // Check if all values are number or fractions.\r\n            let v = values.map((x: any) => new Fraction(x));\r\n            return this.parse(\r\n                new Point(v[0], v[1]),\r\n                new Point(v[2], v[3]),\r\n                new Point(v[4], v[5]),\r\n            )\r\n        } else if (values.length === 3) {\r\n            // Possibilities:\r\n            // - Three points (or part of points, only dict for example, or array (TODO: Add the array syntax for point)\r\n            // - Three lines\r\n            // - Three lines as text.\r\n            if(values.filter((x:any) => typeof x === 'string').length===3) {\r\n                return this.parse( ...values.map((x:string) => new Line(x)) )\r\n            }else if(values.filter((x:any) => x.isLine === true).length===3) {\r\n                // We have three lines\r\n                this._lines = {\r\n                    'AB': values[0],\r\n                    'BC': values[1],\r\n                    'AC': values[2]\r\n                };\r\n\r\n                // Get the intersection points -> build the triangle using these intersection points.\r\n                let intersect = values[0].intersection(values[1]);\r\n                if (intersect.hasIntersection) {\r\n                    this._B = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[1].intersection(values[2]);\r\n                if (intersect.hasIntersection) {\r\n                    this._C = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[2].intersection(values[0]);\r\n                if (intersect.hasIntersection) {\r\n                    this._A = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n            }else {\r\n                // At least, one of the value is not a point.\r\n                if (values.filter((x: any) => x.isPoint === true).length < 3) {\r\n                    return this.parse(\r\n                        new Point(values[0]),\r\n                        new Point(values[1]),\r\n                        new Point(values[2])\r\n                    )\r\n                }\r\n\r\n                // We have three points.\r\n                this._A = values[0].clone();\r\n                this._B = values[1].clone();\r\n                this._C = values[2].clone();\r\n\r\n                this._lines = {\r\n                    'AB': new Line(this._A, this._B),\r\n                    'BC': new Line(this._B, this._C),\r\n                    'AC': new Line(this._A, this._C)\r\n                };\r\n            }\r\n        } else if (values.length === 1) {\r\n            if (values[0].isTriangle === true) {\r\n                return values[0].clone();\r\n            }\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the Triangle class\r\n     */\r\n    clone = (): Triangle => {\r\n        this._A = this._A.clone();\r\n        this._B = this._B.clone();\r\n        this._C = this._C.clone();\r\n\r\n        this._lines = {\r\n            'AB': this._lines.AB.clone(),\r\n            'BC': this._lines.BC.clone(),\r\n            'AC': this._lines.AC.clone()\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Triangle operations and properties\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Generate the Line object for the three segments of the triangle\r\n     */\r\n    private _updateTriangle = () => {\r\n        this._middles = {\r\n            'AB': new Point().middleOf(this._A, this._B),\r\n            'AC': new Point().middleOf(this._A, this._C),\r\n            'BC': new Point().middleOf(this._B, this._C)\r\n        }\r\n\r\n        this._remarquables = this._calculateRemarquableLines();\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the Point class for the given name\r\n     * @param ptName\r\n     */\r\n    private getPointByName = (ptName: string): Point => {\r\n        switch (ptName.toUpperCase()) {\r\n            case 'A':\r\n                return this._A;\r\n            case 'B':\r\n                return this._B;\r\n            case 'C':\r\n                return this._C;\r\n        }\r\n\r\n        // Something went wrong ! Return the first point\r\n        return this._A;\r\n    }\r\n    /**\r\n     * Get the vector for the segment given by name.\r\n     * @param ptName1\r\n     * @param ptName2\r\n     */\r\n    private getSegment = (ptName1: string, ptName2: string): Vector => {\r\n        return new Vector(\r\n            this.getPointByName(ptName1),\r\n            this.getPointByName(ptName2)\r\n        );\r\n    }\r\n\r\n    private _calculateRemarquableLines = (): remarquableLines => {\r\n        let remarquables: remarquableLines = {\r\n            'medians': {\r\n                'A': new Line(this._A, this._middles.BC),\r\n                'B': new Line(this._B, this._middles.AC),\r\n                'C': new Line(this._C, this._middles.AB),\r\n                'intersection': null\r\n            },\r\n            'mediators': {\r\n                'AB': new Line(this._middles.AB, new Vector(this._A, this._B).normal()),\r\n                'AC': new Line(this._middles.AC, new Vector(this._A, this._C).normal()),\r\n                'BC': new Line(this._middles.BC, new Vector(this._B, this._C).normal()),\r\n                'intersection': null\r\n            },\r\n            'heights': {\r\n                'A': new Line(this._A, new Vector(this._B, this._C).normal()),\r\n                'B': new Line(this._B, new Vector(this._A, this._C).normal()),\r\n                'C': new Line(this._C, new Vector(this._A, this._B).normal()),\r\n                'intersection': null\r\n            },\r\n            'bisectors': {\r\n                'A': this._calculateBisectors('A'),\r\n                'B': this._calculateBisectors('B'),\r\n                'C': this._calculateBisectors('C'),\r\n                'intersection': null\r\n            }\r\n        }\r\n\r\n        // As it's a triangle, we assume the lines are intersecting and aren't parallel or superposed.\r\n        remarquables.medians.intersection = remarquables.medians.A.intersection(remarquables.medians.B).point;\r\n        remarquables.mediators.intersection = remarquables.mediators.AB.intersection(remarquables.mediators.BC).point;\r\n        remarquables.heights.intersection = remarquables.heights.A.intersection(remarquables.heights.B).point;\r\n        remarquables.bisectors.intersection = remarquables.bisectors.A.intersection(remarquables.bisectors.B).point;\r\n\r\n        // Everything was calculated for the remarquable lines.\r\n        return remarquables;\r\n    }\r\n\r\n    private _calculateBisectors = (pt: string): Line => {\r\n        let tlines = this.lines, d1, d2;\r\n\r\n        if(pt==='A'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.AC;\r\n        }else if(pt==='B'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.BC;\r\n        }else if(pt==='C'){\r\n            d1 = tlines.BC;\r\n            d2 = tlines.AC;\r\n        }\r\n\r\n        let b1 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm)).reorder(true).simplify()),\r\n            b2 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm).opposed()).reorder(true).simplify());\r\n\r\n        // Must determine which bisectors is in the triangle\r\n        if(pt==='A'){\r\n            return b1.hitSegment(this.B, this.C)?b1:b2;\r\n        }\r\n        if(pt==='B'){\r\n            return b1.hitSegment(this.A, this.C)?b1:b2;\r\n        }\r\n        if(pt==='C'){\r\n            return b1.hitSegment(this.B, this.A)?b1:b2;\r\n        }\r\n\r\n        // Default returns the first bisector\r\n        return b1;\r\n    }\r\n}","import {Point} from \"./point\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Equation} from \"../algebra/equation\";\r\nimport {Polynom} from \"../algebra/polynom\";\r\n\r\n\r\nexport class Circle {\r\n    private _center: Point;\r\n    private _radius: Fraction;\r\n    private _exists: boolean;\r\n    constructor(...values: any) {\r\n        this._exists = false\r\n\r\n        if(values!==undefined){this.parse(...values)}\r\n    }\r\n\r\n    private parse(...values: any) {\r\n        if(values.length===2){\r\n            this._center = new Point(values[0])\r\n            this._radius = new Fraction(values[1])\r\n        }\r\n    }\r\n\r\n    get tex(): string {\r\n        let cx, cy\r\n        if(this._center.x.isZero()){\r\n            cx = 'x^2'\r\n        }else{\r\n            cx = `\\\\left(x-${this._center.x.tex}\\\\right)^2`\r\n        }\r\n        if(this._center.y.isZero()){\r\n            cy = 'y^2'\r\n        }else{\r\n            cy = `\\\\left(y-${this._center.y.tex}\\\\right)^2`\r\n        }\r\n        return `${cx}+${cy}=${this._radius.pow(2).tex}`\r\n    }\r\n\r\n    get developed():string {\r\n        let equ = new Equation(\r\n            new Polynom(`(x-(${this._center.x.display}))^2+(y-(${this._center.y.display}))^2`),\r\n            new Polynom(`${this._radius.pow(2).display}`)\r\n        )\r\n\r\n        return equ.moveLeft().tex;\r\n    }\r\n}"],"names":["Numeric","static","value","decimals","Number","Math","round","nb","primes","undefined","slice","max","length","D","maxV","sqrt","abs","i","push","sort","a","b","Set","values","gcd2","g","reduce","gcd","Shutingyard","_rpn","_mode","_tokenConfig","_uniformize","constructor","mode","this","tokenConfigInitialization","isOperation","token","match","precedence","associative","NextToken2","expr","start","tokenType","keys","Object","key","substr","console","log","NextToken","tokenMatch","Uniformizer","expr2","replace","fnToken","RegExp","parse","operators","outQueue","opStack","tokenPos","previousOpStatckLength","securityLoopLvl2","securityLoopLvl1","opTop","pop","concat","reverse","rpn","randomCore","_config","_defaultConfig","mergeConfig","config","defaultConfig","generate","Fraction","_numerator","_denominator","denominatorOrPeriodic","isFraction","numerator","denominator","tex","display","frac","dfrac","S","split","map","x","isNaN","includes","NaN","isSafeInteger","p","toString","pow","floor","clone","F","zero","one","infinite","Infinity","invalid","opposed","add","N","subtract","multiply","Q","divide","invert","n","d","root","amplify","k","compare","sign","lesser","than","leq","greater","geq","isEqual","isDifferent","isOpposed","isInverted","isZero","isOne","isPositive","isNegative","isInfinity","isFinite","isSquare","isReduced","areEquals","_coefficient","_literal","isMonom","coefficient","literal","literalSqrt","isLitteralSquare","L","literalStr","inputStr","v","matchAll","variables","clean","letter","dividers","litterals","_getLitteralDividers","monomDividers","M","arr","tmpList","litt","item","currentLetter","displayWithSign","trim","setLetter","m","isSameAs","multiplyByNumber","M1","M2","K","filter","indexOf","hasLetter","degree","t","evaluate","r","tmpValues","derivative","dM","primitive","monoms","coeffN","coeffD","lcm","min","areSameAs","rndMonom","userConfig","super","letters","fraction","Random","numberSym","number","_rawString","_monoms","_factors","_texString","polynomString","isPolynom","factors","texFactors","factorize","f","texString","genDisplay","raw","isMultiVariable","V","numberOfVars","output","forceSign","wrapParentheses","P","empty","shutingYardToReducedPolynom","test","fractions","m1","m2","tempPolynom","stack","previousToken","element","_randomizeDefaults","unit","factorable","allowNullMonom","numberOfMonoms","randomizeDefaults","randomize","rndFactorable","factorUnit","polynom","multiplyByPolynom","multiplyByFraction","multiplyByMonom","multiplyByInteger","euclidian","quotient","reminder","reorder","maxMP","monomByDegree","degreeP","newM","MaxIteration","divideByFraction","divideByInteger","nbF","cP1","cP2","isOpposedAt","isFactorized","e","polynomStringNormalized","replaceAll","polynomStringReduced","polyFactors","splice","isDeveloped","j","replaceBy","resultPolynom","forEach","monom","dP","integrate","valuesA","valuesB","factorize_OLD","maxValue","nbFactorsFound","commonMonom","commonPolynom","securityLoop","m1d","m2d","result","dividerPolynom","_factorize2ndDegree","P1","P2","c","delta","x1","x2","factor","xyzPolynom","xFactors","_factorizeByGroups","getZeroes","zeroes","zeroesAsTex","A","B","C","toFixed","z","monomsByDegree","Ms","monomByLetter","getDenominators","denominators","getNumerators","numerators","lcmDenominator","gcdDenominator","lcmNumerator","gcdNumerator","makeItComplicate","complexity","factorizePartial","mMain","mCheck","mFactor","pFactor","minify","canDivide","evalValue","rndPolynom","array","rndHelpers","percent","random","randomInt","randomBool","shuffleArray","randomArray","temp","Algebra","from","to","allowZero","randomIntSym","bool","randomItem","shuffle","Nthroot","_radical","_nth","_isValid","radical","nth","nthroot","hasRadical","Equation","_left","_right","_sign","_polynom","_solutions","_varnothing","_real","equations","isEquation","left","right","solutions","solution","join","isReal","solve","isVarnothing","signAsTex","_formatSign","equationString","pStr","strSign","_findSign","create","signStr","_reverseSign","opts","moveLeft","allLeft","mMove","simplify","isolate","cMove","_solveDegree1","_solveDegree2","_solveDegree3plus","isGreater","isStrictEqual","isAlsoEqual","m0","s","nthDelta","realX1","realX2","sX1","sX2","aF","bF","cF","LinearSystem","_resolutionSteps","_equations","_letters","equationStrings","isLinerarSystem","isSolvable","E","equStr","LS","equArray","equ","repeat","texSolution","_findLetters","setCoefficient","coefficients","setLetters","solutionsF","_generateOneEquation","coeff","leftValue","equString","_checkIfLinerCombination","_linearReduction","eq1","eq2","c1","c2","mergeEquations","factor1","factor2","eq1multiplied","eq2multiplied","_solveOneLetter","LE","reducedEquations","str","Polynom","Monom","Vector","_x","_y","isVector","y","normSquare","norm","_parseString","isPoint","reset","components","scalarProductWithVector","v1","v2","normal","isNormalTo","multiplyByScalar","scalar","divideByScalar","angleWith","sharp","radian","toDegree","PI","acos","Point","_exist","pts","xy","origin","middleOf","texValues","numberOfDigits","Line","_a","_b","_c","_OA","_d","_n","_exists","isLine","exists","equation","canonical","mxh","slope","OA","height","parametric","pmatrix","parseByCoefficient","parseByPointAndVector","has","elem","delete","size","isParellelTo","line","simplifyDirection","intersection","Pt","isParallel","isSame","point","hasIntersection","distanceTo","pt","d2","hitSegment","iPt","canonicalAsFloatCoefficient","window","Pi","ShutingYard","Root","Rational","domain","NumeratorEuclidien","DenominatorEuclidien","R","limits","Logicalset","isLogicalset","tokenSets","reference","referenceSet","varStack","second","first","vennAB","vennABC","Geometry","Triangle","_A","_B","_C","_lines","_middles","_remarquables","isTriangle","AB","getSegment","BA","BC","CB","AC","CA","isRectangle","isEquilateral","isIsocele","lines","remarquables","intersect","_updateTriangle","_calculateRemarquableLines","getPointByName","ptName","toUpperCase","ptName1","ptName2","_calculateBisectors","medians","mediators","heights","bisectors","d1","tlines","b1","b2","Circle","_center","_radius","cx","cy","developed"],"sourceRoot":""}