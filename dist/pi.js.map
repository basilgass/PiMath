{"version":3,"file":"pi.js","mappings":"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","sources":["webpack://pimath/./src/maths/algebra/equation.ts","webpack://pimath/./src/maths/algebra/index.ts","webpack://pimath/./src/maths/algebra/linearSystem.ts","webpack://pimath/./src/maths/algebra/logicalset.ts","webpack://pimath/./src/maths/algebra/monom.ts","webpack://pimath/./src/maths/algebra/polynom.ts","webpack://pimath/./src/maths/algebra/rational.ts","webpack://pimath/./src/maths/coefficients/fraction.ts","webpack://pimath/./src/maths/coefficients/index.ts","webpack://pimath/./src/maths/coefficients/nthroot.ts","webpack://pimath/./src/maths/geometry/circle.ts","webpack://pimath/./src/maths/geometry/index.ts","webpack://pimath/./src/maths/geometry/line.ts","webpack://pimath/./src/maths/geometry/point.ts","webpack://pimath/./src/maths/geometry/triangle.ts","webpack://pimath/./src/maths/geometry/vector.ts","webpack://pimath/./src/maths/numeric.ts","webpack://pimath/./src/maths/random/index.ts","webpack://pimath/./src/maths/random/randomCore.ts","webpack://pimath/./src/maths/random/rndFraction.ts","webpack://pimath/./src/maths/random/rndHelpers.ts","webpack://pimath/./src/maths/random/rndMonom.ts","webpack://pimath/./src/maths/random/rndPolynom.ts","webpack://pimath/./src/maths/shutingyard.ts","webpack://pimath/webpack/bootstrap","webpack://pimath/./src/main.ts"],"sourcesContent":["import {Polynom} from \"./polynom\";\r\nimport {Monom} from \"./monom\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Fraction} from \"../coefficients\";\r\nimport {Nthroot} from \"../coefficients\";\r\n\r\n/**\r\n * Equation is a class to manage equations...\r\n */\r\nexport class Equation {\r\n    private _left: Polynom;  // Left part of the equation\r\n    private _right: Polynom; // Right part of the equation\r\n    private _sign: string;   // Signe of the equation, by default =\r\n\r\n    private _polynom: Polynom;  // Used to solve the equation // TODO: remove the private value ?\r\n    private _solutions: string[];    // Array of the solutions\r\n\r\n    // Undetermined solutions.\r\n    private _varnothing: string = '\\\\varnothing';\r\n    private _real: string = '\\\\mathbb{R}';\r\n\r\n    /**\r\n     * Create an Equation using two polynoms.\r\n     * Markdown *support* is cool\r\n     * @param equations\r\n     */\r\n    constructor(...equations: any) {\r\n        // Default equation\r\n        this._left = new Polynom().zero();\r\n        this._right = new Polynom().zero();\r\n        this._sign = '=';\r\n\r\n        if (equations.length === 1) {\r\n            if (equations[0].isEquation === true) {\r\n                return equations[0].clone();\r\n            } else {\r\n                this.parse(equations[0]);\r\n            }\r\n        } else if (equations.length === 2) {\r\n            this.left = equations[0].isPolynom ? equations[0].clone() : new Polynom(equations[0]);\r\n            this.right = equations[1].isPolynom ? equations[1].clone() : new Polynom(equations[1]);\r\n        } else {\r\n            // Return default empty equation\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isEquation() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    // TODO: Check the getters and setters.\r\n    get solutions(): string[] {\r\n        return this._solutions;\r\n    }\r\n\r\n    get solution(): string {\r\n        if (this._solutions.length === 1\r\n            &&\r\n            (\r\n                this._solutions[0] === this._real\r\n                || this._solutions[0] === this._varnothing\r\n                || this._solutions[0].includes('\\\\left')\r\n            )\r\n        ) {\r\n            return `S = ${this._solutions[0]}`;\r\n        }\r\n        return `S = \\\\left{ ${this._solutions.join(';')} \\\\right}`;\r\n    }\r\n\r\n    get isReal(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0] === this._real;\r\n    }\r\n\r\n    get isVarnothing(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0] === this._varnothing;\r\n    }\r\n\r\n    get signAsTex(): string {\r\n        if (this._sign === '>=' || this._sign === '=>' || this._sign === 'geq') {\r\n            return '\\\\geq';\r\n        }\r\n        if (this._sign === '<=' || this._sign === '=<' || this._sign === 'leq') {\r\n            return '\\\\leq';\r\n        }\r\n        return this._sign;\r\n    }\r\n\r\n    get tex(): string {\r\n        return `${this._left.tex}${this.signAsTex}${this._right.tex}`;\r\n    }\r\n\r\n    get raw(): string {\r\n        return `${this._left.raw}${this.signAsTex}${this._right.raw}`;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        return [...new Set(this._right.variables.concat(this._left.variables))];\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    get left(): Polynom {\r\n        return this._left;\r\n    }\r\n\r\n    set left(value: Polynom) {\r\n        this._left = value;\r\n    }\r\n\r\n    get right(): Polynom {\r\n        return this._right;\r\n    }\r\n\r\n    set right(value: Polynom) {\r\n        this._right = value;\r\n    }\r\n\r\n    get sign(): string {\r\n        return this._sign;\r\n    }\r\n\r\n    set sign(value: string) {\r\n        // Set the sign value as formatted.\r\n        this._sign = this._formatSign(value);\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (equationString: string): Equation => {\r\n        let pStr: string[], strSign: string | false;\r\n        // Find the string separator\r\n        strSign = this._findSign(equationString);\r\n\r\n        if (strSign === false) {\r\n            console.log('The equation is not valid (no sign found)');\r\n            return;\r\n        }\r\n\r\n        // The StrSign is found\r\n        pStr = equationString.split(strSign);\r\n\r\n        return this.create(new Polynom(pStr[0]), new Polynom(pStr[1]), this._formatSign(strSign));\r\n    };\r\n\r\n    private _findSign = (equationString: string): string | false => {\r\n        let strSign: string = '';\r\n\r\n        if (equationString.includes('geq')) {\r\n            return (equationString.includes('\\\\geq')) ? '\\\\geq' : 'geq';\r\n        } else if (equationString.includes('leq')) {\r\n            return (equationString.includes('\\\\leq')) ? '\\\\leq' : 'leq';\r\n        } else if (equationString.includes('>=')) {\r\n            return '>=';\r\n        } else if (equationString.includes('=>')) {\r\n            return '=>';\r\n        } else if (equationString.includes('>')) {\r\n            return '>';\r\n        } else if (equationString.includes('<=')) {\r\n            return '<=';\r\n        } else if (equationString.includes('=<')) {\r\n            return '=<';\r\n        } else if (equationString.includes('<')) {\r\n            return '<';\r\n        } else if (equationString.includes('=')) {\r\n            return '='\r\n        }\r\n        if (strSign === '') {\r\n            console.log('Equation: parse string : sign not found');\r\n            return false;\r\n        }\r\n    };\r\n\r\n    private _formatSign = (signStr: string): string => {\r\n        if (signStr === undefined) {\r\n            return '=';\r\n        }\r\n\r\n        if (signStr.includes('geq')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>=')) {\r\n            return '>=';\r\n        } else if (signStr.includes('=>')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>')) {\r\n            return '>';\r\n        } else if (signStr.includes('leq')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<=')) {\r\n            return '<=';\r\n        } else if (signStr.includes('=<')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<')) {\r\n            return '<';\r\n        } else {\r\n            return '='\r\n        }\r\n    };\r\n\r\n    private _reverseSign = (): Equation => {\r\n        if (this._sign === '=') {\r\n            return this;\r\n        }\r\n\r\n        if (this._sign.includes('<')) {\r\n            this._sign.replace('<', '>');\r\n            return this;\r\n        }\r\n        if (this._sign.includes('>')) {\r\n            this._sign.replace('>', '<');\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    create = (left: Polynom, right: Polynom, sign?: string): Equation => {\r\n        this._left = left;\r\n        this._right = right;\r\n        this._sign = this._formatSign(sign);\r\n        return this;\r\n    };\r\n\r\n    clone = (): Equation => {\r\n        return new Equation().create(this._left.clone(), this._right.clone(), this._sign + '');\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n    // -----------------------------------------------\r\n    private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n        degree: 2\r\n    };\r\n    get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n        return this._randomizeDefaults;\r\n    }\r\n\r\n    set randomizeDefaults(value) {\r\n        this._randomizeDefaults = value;\r\n    }\r\n\r\n    randomize = (opts?: {}, sign?: string): Equation => {\r\n        // TODO: Generate equations randomly, using config.\r\n        return new Equation().create(new Polynom(), new Polynom(), sign);\r\n    };\r\n\r\n\r\n    // -----------------------------------------------\r\n    // Equations operations\r\n    // -----------------------------------------------\r\n    /**\r\n     * Reorder will move all monoms containing a letter on the left, all the other on the right.\r\n     */\r\n    moveLeft = (): Equation => {\r\n        this._left = this._left.clone().subtract(this._right)\r\n        this._right.zero()\r\n        return this;\r\n    }\r\n    reorder = (allLeft?: boolean): Equation => {\r\n        // Move all monoms of degree greater than 0 to the left.\r\n        // and all zero degree monoms to the right.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n\r\n        if (allLeft) {\r\n            return this.moveLeft()\r\n        }\r\n        let mMove: Monom;\r\n        for (let m of this._left.monoms) {\r\n            if (m.degree().isZero()) {\r\n                mMove = m.clone();\r\n                this._left.subtract(mMove);\r\n                this._right.subtract(mMove);\r\n            }\r\n        }\r\n\r\n        // Reorder the left and right polynoms\r\n        this._left.reorder();\r\n        this._right.reorder();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiply by the lcm denominator and divide by the gcm numerators.\r\n     */\r\n    simplify = (): Equation => {\r\n        this.multiply(Numeric.lcm(...this._left.getDenominators(),...this._right.getDenominators()));\r\n        this.divide(Numeric.gcd(...this._left.getNumerators(),...this._right.getNumerators()));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Reorder the polynom to have only one letter on the left, the rest on the right.\r\n     * @param letter\r\n     */\r\n    isolate = (letter?: string): Equation | false => {\r\n        // Determine if we can isolate the variables.\r\n\r\n        // Both part of the equations must be of the first degree.\r\n        //TODO: handle equations of degree two or more ?\r\n        if (!this.degree(letter).isOne()) {\r\n            return false;\r\n        }\r\n\r\n        // Modify the equation to isolate the asked variable.\r\n        // TODO: must handle equations like 3xy+5y=4 => y = 4/(3x-5)\r\n        if (this.isMultiVariable()) {\r\n            return false;\r\n        }\r\n\r\n        // Isolate the letter.\r\n        let mMove: Monom, cMove: Fraction;\r\n        // Start by moving everything to the left.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n        for (let m of this._left.monoms) {\r\n            if (!m.hasLetter(letter)) {\r\n                mMove = m.clone();\r\n                this._left.add(mMove.clone().opposed());\r\n                this._right.add(mMove.clone().opposed());\r\n            }\r\n        }\r\n\r\n        // In theory, we should have only one item on the left.\r\n        if (this._left.length !== 1) {\r\n            return false;\r\n        }\r\n        cMove = this._left.monoms[0].coefficient.clone();\r\n        this._left.divide(cMove);\r\n        this._right.divide(cMove);\r\n        return this;\r\n    };\r\n\r\n    replaceBy = (letter: string, P: Polynom): Equation => {\r\n        this._left.replaceBy(letter, P)\r\n        this._right.replaceBy(letter, P)\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiple an equation by a fraction value.\r\n     * @param value\r\n     */\r\n    multiply = (value: any): Equation => {\r\n\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        // Multiply each part of the equation by the fraction\r\n        this._left.multiply(F);\r\n        this._right.multiply(F);\r\n\r\n        // The sign of the inequation must be changed.\r\n        if (this._sign !== '=' && F.sign() === -1) {\r\n            this._reverseSign();\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * divide an equation by a given value (transformed as a fraction)\r\n     *\r\n     * ```\r\n     * 8x+10=6x \\vert 2\r\n     * 4x+5=3x\r\n     * ```\r\n     *\r\n     * |>Alternatively with $3x-4$ maybe it's working ?\r\n     * $$\\frac{3x}{5}$$\r\n     *\r\n     * @param value\r\n     * @returns {Equation}\r\n     */\r\n    divide = (value: any): Equation => {\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        if(F.isZero()){\r\n            return this;\r\n        }else {\r\n            return this.multiply(F.invert());\r\n        }\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations helpers\r\n    // -----------------------------------------------\r\n\r\n    /**\r\n     * Get the degree of the equation\r\n     * @param letter\r\n     */\r\n    degree = (letter?: string): Fraction => {\r\n        return Fraction.max(this._left.degree(letter), this._right.degree(letter));\r\n    };\r\n\r\n    /**\r\n     * Determine if the equation contains more than one letter/variable.\r\n     */\r\n    isMultiVariable = (): boolean => {\r\n        return this._left.isMultiVariable || this._right.isMultiVariable;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        // @ts-ignore\r\n        return [...new Set([...this._left.letters(), ...this._right.letters()])];\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations solving algorithms\r\n    // -----------------------------------------------\r\n    solve = (letter?: string): Equation => {\r\n        // Initialise the variables:\r\n        this._solutions = [];\r\n\r\n        // TODO: this._polynom could be removed.\r\n        // TODO: consolidate solving equations (inequations vs equations)\r\n        // TODO: work with not natural degrees ?\r\n        this._polynom = this._left.clone().subtract(this._right);\r\n\r\n        switch (this._polynom.degree(letter).value) {\r\n            case 0:\r\n            case 1:\r\n                this._solveDegree1(letter);\r\n                break;\r\n            case 2:\r\n                this._solveDegree2(letter);\r\n                break;\r\n            default:\r\n                this._solveDegree3plus(letter);\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    private isGreater = (): boolean => {\r\n        if (this._sign.indexOf('>') !== -1) {\r\n            return true;\r\n        }\r\n        return this._sign.indexOf('geq') !== -1;\r\n\r\n    };\r\n    private isStrictEqual = (): boolean => {\r\n        return this._sign === '=';\r\n    };\r\n    private isAlsoEqual = (): boolean => {\r\n        if (this._sign.indexOf('=') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('geq') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('leq') !== -1) {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    private _solveDegree1 = (letter?: string): string[] => {\r\n        const m1 = this._polynom.monomByDegree(1, letter).coefficient,\r\n            m0 = this._polynom.monomByDegree(0, letter).coefficient,\r\n            v = m0.clone().opposed().divide(m1).display;\r\n        let s: string;\r\n\r\n        if (this.isStrictEqual()) {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0) {\r\n                    this._solutions = [this._real];\r\n                } else {\r\n                    this._solutions = [this._varnothing];\r\n                }\r\n            } else {\r\n                this._solutions = [v];\r\n            }\r\n        } else {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0 && this.isAlsoEqual()) {\r\n                    s = '\\\\mathbb{R}';\r\n                } else {\r\n                    if (m0.value > 0) {\r\n                        s = this.isGreater() ? this._real : this._varnothing;\r\n                    } else {\r\n                        s = !this.isGreater() ? this._real : this._varnothing;\r\n                    }\r\n                }\r\n            } else {\r\n                // Must handle the case if the m1 monom is negative.\r\n                if ((this.isGreater() && m1.sign() === 1) || (!this.isGreater() && m1.sign() === -1)) {\r\n                    s = `\\\\left${this.isAlsoEqual() ? '\\\\[' : '\\\\]'}${v};+\\\\infty\\\\right\\\\[`;\r\n                } else {\r\n                    s = `\\\\left\\\\]-\\\\infty;${v} \\\\right\\\\${this.isAlsoEqual() ? '\\\\]' : '\\\\['}`;\r\n                }\r\n            }\r\n            this._solutions = [s];\r\n        }\r\n\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree2 = (letter?: string): string[] => {\r\n        let aF = this._polynom.monomByDegree(2, letter).coefficient,\r\n            bF = this._polynom.monomByDegree(1, letter).coefficient,\r\n            cF = this._polynom.monomByDegree(0, letter).coefficient,\r\n            delta: number, nthDelta: Nthroot,\r\n            lcm = Numeric.lcm(aF.denominator, bF.denominator, cF.denominator),\r\n            a = aF.multiply(lcm).value,\r\n            b = bF.multiply(lcm).value,\r\n            c = cF.multiply(lcm).value,\r\n            realX1: number, realX2: number,\r\n            sX1: string, sX2: string;\r\n\r\n        delta = b * b - 4 * a * c;\r\n\r\n        if (delta > 0) {\r\n            realX1 = (-b - Math.sqrt(delta)) / (2 * a);\r\n            realX2 = (-b + Math.sqrt(delta)) / (2 * a);\r\n\r\n            if(delta>1.0e5){\r\n                // The delta is too big to be parsed !\r\n                this._solutions = [\r\n                    ((-b - Math.sqrt(delta))/(2 * a)).toFixed(5),\r\n                    ((-b + Math.sqrt(delta))/(2 * a)).toFixed(5)\r\n                ]\r\n            }else {\r\n                nthDelta = new Nthroot().parse(delta).reduce();\r\n                if (nthDelta.hasRadical()) {\r\n                    // -b +- coeff\\sqrt{radical}\r\n                    // -------------------------\r\n                    //           2a\r\n                    let gcd = Numeric.gcd(b, 2 * a, nthDelta.coefficient);\r\n                    nthDelta.coefficient = nthDelta.coefficient / gcd;\r\n\r\n                    // TODO: Can i delete the next line ?\r\n                    // let deltaC = nthDelta.coefficient, deltaR = nthDelta.radical;\r\n                    if (b !== 0) {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                `${-b / gcd} - ${nthDelta.tex}`,\r\n                                `${-b / gcd} + ${nthDelta.tex}`,\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                `\\\\dfrac{${-b / gcd} - ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                `\\\\dfrac{${-b / gcd} + ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                            ]\r\n                        }\r\n                    } else {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                `- ${nthDelta.tex}`,\r\n                                `${nthDelta.tex}`,\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                `\\\\dfrac{- ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                `\\\\dfrac{${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                            ]\r\n                        }\r\n                    }\r\n                } else {\r\n                    // -b +- d / 2a\r\n                    this._solutions = [\r\n                        new Fraction(-b - nthDelta.coefficient, 2 * a).reduce().dfrac,\r\n                        new Fraction(-b + nthDelta.coefficient, 2 * a).reduce().dfrac\r\n                    ]\r\n                }\r\n            }\r\n\r\n        } else if (delta === 0) {\r\n            this._solutions = [new Fraction(-b, 2 * a).reduce().dfrac];\r\n        } else {\r\n            this._solutions = [this._varnothing];\r\n        }\r\n\r\n\r\n        // Handle now the inequations.\r\n        if (!this.isStrictEqual()) {\r\n            if (this._solutions.length === 2) {\r\n                sX1 = (realX1 < realX2) ? this._solutions[0] : this._solutions[1];\r\n                sX2 = (realX1 < realX2) ? this._solutions[1] : this._solutions[0];\r\n\r\n                if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                    this._solutions = [\r\n                        `\\\\left]-\\\\infty ; ${sX1}\\\\right${this.isAlsoEqual() ? ']' : '['} \\\\cup \\\\left${this.isAlsoEqual() ? '[' : ']'}${sX2};+\\\\infty\\\\right[`\r\n                    ];\r\n                } else {\r\n                    this._solutions = [\r\n                        `\\\\left${this.isAlsoEqual() ? '[' : ']'}${sX1} ; ${sX2}\\\\right${this.isAlsoEqual() ? ']' : '['}`\r\n                    ]\r\n                }\r\n            } else if (this._solutions.length === 1 && this._solutions[0] !== this._varnothing) {\r\n                if (!this.isAlsoEqual()) {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [\r\n                            `\\\\left]-\\\\infty ; ${this._solutions[0]}\\\\right[ \\\\cup \\\\left]${this._solutions[0]};+\\\\infty\\\\right[`\r\n                        ];\r\n                    } else {\r\n                        this._solutions = [this._varnothing];\r\n                    }\r\n                } else {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [this._real];\r\n                    } else {\r\n                        // this._solutions = [ this._solutions[0] ];\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.isGreater()) {\r\n                    this._solutions = [aF.sign() === 1 ? this._real : this._varnothing];\r\n                } else {\r\n                    this._solutions = [aF.sign() === -1 ? this._real : this._varnothing];\r\n                }\r\n            }\r\n        }\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree3plus = (letter?: string): string[] => {\r\n        // TODO: try to resolve equations with a degree superior than 2.\r\n        this._solutions = [letter];  // ESLint remove system :(\r\n        return this._solutions;\r\n    };\r\n\r\n}","export * from \"./equation\"\r\nexport * from \"./linearSystem\"\r\nexport * from \"./logicalset\"\r\nexport * from \"./monom\"\r\nexport * from \"./polynom\"\r\nexport * from \"./rational\"","import {Fraction} from \"../coefficients\";\r\nimport {Equation} from \"./equation\";\r\nimport {Polynom} from \"./polynom\";\r\nimport {Monom} from \"./monom\";\r\nimport {Random} from \"../random\";\r\n\r\n    export class LinearSystem {\r\n        private _solutions: { [letter: string]: { value: Fraction, isReal: boolean, isVarnothing: boolean } };\r\n        private _resolutionSteps: LinearSystem[];\r\n        private _equations: Equation[];\r\n        private _letters: string[];\r\n\r\n        constructor(...equationStrings: string[]) {\r\n            this._equations = [];\r\n            this._letters = 'xy'.split('');\r\n\r\n            if (equationStrings !== undefined && equationStrings.length > 0) {\r\n                this.parse(...equationStrings);\r\n            }\r\n\r\n            return this;\r\n        }\r\n\r\n        get isLinearSystem() {\r\n            return true;\r\n        }\r\n\r\n        // ------------------------------------------\r\n        // Getter and setter\r\n        // ------------------------------------------\r\n        get equations(): Equation[] {\r\n            return this._equations;\r\n        }\r\n\r\n        set equations(value) {\r\n            this._equations = value;\r\n        }\r\n\r\n        get letters(): string {\r\n            return this._letters.join('')\r\n        }\r\n\r\n        set letters(value: string) {\r\n            this._letters = value.split('');\r\n        }\r\n\r\n        get isSolvable(): boolean {\r\n            let V = this.variables;\r\n\r\n            // TODO: in some case, it is possible to resolve systems if there isn't the isSame number of vars and equations\r\n            if (V.length !== this._equations.length) {\r\n                return false;\r\n            }\r\n\r\n            //TODO: Must check if two equations isn't a linear combination of the others ?\r\n\r\n            return true;\r\n        }\r\n\r\n        get variables(): string[] {\r\n            let V: string[] = [];\r\n            for (let E of this._equations) {\r\n                V = V.concat(E.variables);\r\n            }\r\n            return [...new Set(V)].sort();\r\n        }\r\n\r\n        get tex(): string {\r\n            // Build the array of values.\r\n            // Reorder\r\n            // This clone the system :!!!\r\n            //TODO: Avoid cloning this linear system\r\n            let LS = this.clone().reorder(),\r\n                letters = LS.variables,\r\n                equStr: string[],\r\n                equArray: string[] = [],\r\n                m: Monom;\r\n\r\n            // TODO: Manage tex output of linear equations\r\n            for (let equ of LS.equations) {\r\n                equStr = [];\r\n                for (let L of letters) {\r\n                    m = equ.left.monomByLetter(L);\r\n\r\n                    if (equStr.length === 0) {\r\n                        equStr.push(m.isZero() ? '' : m.tex);\r\n                    } else {\r\n                        equStr.push(m.isZero() ? '' : ((m.coefficient.sign() === 1) ? '+' : '') + m.tex);\r\n                    }\r\n                }\r\n\r\n                // Add the equal sign\r\n                equStr.push('=');\r\n\r\n                // Add the right hand part of the equation (should be only a number, because it has been reordered)\r\n                equStr.push(equ.right.tex);\r\n\r\n                // Add to the list.\r\n                equArray.push(equStr.join('&'));\r\n            }\r\n\r\n\r\n            return `\\\\left\\\\{\\\\begin{array}{${\"r\".repeat(letters.length)}cl}${equArray.join('\\\\\\\\\\ ')}\\\\end{array}\\\\right.`;\r\n            //return `\\\\left\\\\{\\\\begin{array}{rrrcl}${this._equations.map(equ => `${equ.tex}`).join('\\\\\\\\\\ \\n')}\\\\end{array}\\\\right.`;\r\n        }\r\n\r\n        get texSolution(): string {\r\n            let tex: string[] = [];\r\n\r\n            if (this._solutions === undefined) {\r\n                this.solve();\r\n            }\r\n\r\n            for (let letter in this._solutions) {\r\n                if (this._solutions[letter].isReal) {\r\n                    console.log(`Undetermined (letter ${letter})`);\r\n                    return;\r\n                }\r\n                if (this._solutions[letter].isVarnothing) {\r\n                    console.log(`Undefined (letter ${letter})`);\r\n                    return;\r\n                }\r\n\r\n                tex.push(this._solutions[letter].value.dfrac);\r\n            }\r\n            return `(${tex.join(';')})`;\r\n        }\r\n\r\n        // ------------------------------------------\r\n        // Creation / parsing functions\r\n        // ------------------------------------------\r\n        parse = (...equations: any[]): LinearSystem => {\r\n            this._equations = equations.map(value => new Equation(value));\r\n            this._findLetters();\r\n            return this;\r\n        };\r\n\r\n        setCoefficient = (...coefficients: string[]): LinearSystem => {\r\n            // Reset the equations list\r\n            this._equations = [];\r\n\r\n            let i = 0;\r\n            while (i < coefficients.length - this._letters.length) {\r\n                let left = new Polynom().parse(this._letters.join(''), ...coefficients.slice(i, i + this._letters.length)),\r\n                    right = new Polynom(coefficients[i + this._letters.length].toString()),\r\n                    equ = new Equation().create(left, right);\r\n                this._equations.push(equ.clone());\r\n\r\n                i = i + this._letters.length + 1;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        clone = (): LinearSystem => {\r\n            return new LinearSystem().parse(...this._equations.map(equ => equ.clone()));\r\n        };\r\n\r\n        setLetters = (...letters: string[]): LinearSystem => {\r\n            this._letters = letters;\r\n            return this\r\n        }\r\n        private _findLetters = (): LinearSystem => {\r\n            // Find all letters used.\r\n            let variables = new Set();\r\n\r\n            for (let equ of this._equations) {\r\n                variables = new Set([...variables, ...equ.variables]);\r\n            }\r\n\r\n            // TODO: How to transform (Set of string) to string[]\r\n            // @ts-ignore\r\n            this._letters = [...variables];\r\n            return this;\r\n        }\r\n\r\n        // -----------------------------------------------\r\n        // Equations generators and randomizers\r\n        // -----------------------------------------------\r\n        generate = (...solutions: Fraction[] | number[]): LinearSystem => {\r\n            let solutionsF: Fraction[] = [];\r\n\r\n            // Convert the numbers to fractions if necessary\r\n            for (let s of solutions) {\r\n                if (typeof s === \"number\") {\r\n                    solutionsF.push(new Fraction(s.toString()));\r\n                } else {\r\n                    solutionsF.push(s.clone());\r\n                }\r\n            }\r\n\r\n            // Create the equations and make sure they are not linear combined.\r\n            this._equations = [];\r\n            for (let i = 0; i < solutions.length; i++) {\r\n                this._equations.push(this._generateOneEquation(...solutionsF));\r\n            }\r\n            return this;\r\n        };\r\n        private _generateOneEquation = (...solutions: Fraction[]): Equation => {\r\n            let coeff: number[] = [], leftValue: Fraction = new Fraction().zero(),\r\n                letters: string[] = ['x', 'y', 'z', 't', 'u', 'v', 'w', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],\r\n                equString: string = '', equ: Equation;\r\n            for (let i = 0; i < solutions.length; i++) {\r\n                coeff.push(Random.numberSym(5));\r\n                leftValue.add(solutions[i].clone().multiply(coeff[i]));\r\n                equString += `${(coeff[i] < 0) ? coeff[i] : '+' + coeff[i]}${letters[i]}`\r\n            }\r\n\r\n            // LeftValue contains the left part oof the equation - and is then the isSame as the right part.\r\n            // It might be a Fraction.\r\n\r\n            // Must check if it's not a linear combination\r\n            equ = new Equation(`${equString}=${leftValue.display}`);\r\n            if (equ.right.monoms[0].coefficient.denominator != 1) {\r\n                equ.multiply(new Fraction(equ.right.monoms[0].coefficient.denominator, 1));\r\n            }\r\n            if (this._checkIfLinerCombination(equ)) {\r\n                return equ;\r\n            } else {\r\n                return this._generateOneEquation(...solutions);\r\n            }\r\n        };\r\n\r\n\r\n        // ------------------------------------------\r\n        // Mathematical operations\r\n        // ------------------------------------------\r\n        private _linearReduction(eq1: Equation, eq2: Equation, letter: string): Equation {\r\n            // TODO: handle other signs for equations ?\r\n            // Get the monom for the particular letter.\r\n            let c1 = eq1.left.monomByDegree(1, letter).coefficient.clone(),\r\n                c2 = eq2.left.monomByDegree(1, letter).coefficient.clone().opposed();\r\n\r\n            return this.mergeEquations(eq1, eq2, c2, c1);\r\n        }\r\n\r\n        mergeEquations = (eq1: Equation, eq2: Equation, factor1: any, factor2: any): Equation => {\r\n            // Set and clone the equations.\r\n\r\n            let eq1multiplied = eq1.clone().multiply(new Fraction(factor1)),\r\n                eq2multiplied = eq2.clone().multiply(new Fraction(factor2));\r\n\r\n            // Add both equations together.\r\n            eq1multiplied.left.add(eq2multiplied.left);\r\n            eq1multiplied.right.add(eq2multiplied.right);\r\n\r\n            return eq1multiplied;\r\n        }\r\n\r\n\r\n        // ------------------------------------------\r\n        // Solvers algorithm\r\n        // ------------------------------------------\r\n        reorder = (): LinearSystem => {\r\n            for (let E of this._equations) {\r\n                E.reorder();\r\n            }\r\n            return this;\r\n        };\r\n\r\n        solve = (): LinearSystem => {\r\n            // Solve it by linear\r\n            this._solutions = {};\r\n            this._resolutionSteps = [];\r\n\r\n            // Reorder all equations.\r\n            this.reorder();\r\n\r\n            // Get all variables in the linear system\r\n            let V = this.variables.sort();\r\n\r\n            for (let letter of V) {\r\n                this._solutions[letter] = this._solveOneLetter(letter, V)\r\n            }\r\n\r\n            // TODO: LinearSystem - solve: optimization and handle undetermined and undefined systems.\r\n            return this;\r\n        };\r\n\r\n        private _checkIfLinerCombination = (equ: Equation): boolean => {\r\n\r\n            return true;\r\n        };\r\n\r\n        private _solveOneLetter(letter: string, V: string[]): { value: Fraction, isReal: boolean, isVarnothing: boolean } {\r\n            // list of equations.\r\n            let LE: Equation[] = this.clone().equations,\r\n                reducedEquations: Equation[] = [];\r\n\r\n            // Reduce the equations.\r\n            // Do it as long as there is more than one step, but no more than the number of equations.\r\n            for (let L of V) {\r\n                // remove the setLetter from all equations using linear combinations\r\n                if (L === letter) {\r\n                    continue;\r\n                }\r\n\r\n                // Linear reduction.\r\n                // TODO: Search for better association\r\n                for (let i = 0; i < LE.length - 1; i++) {\r\n                    reducedEquations.push(this._linearReduction(LE[i], LE[i + 1], L));\r\n                }\r\n\r\n                // Keep track of each steps.\r\n                this._resolutionSteps.push(new LinearSystem().parse(...reducedEquations));\r\n\r\n                // Set the list of equations to the new version.\r\n                LE = this._resolutionSteps[this._resolutionSteps.length - 1].clone().equations;\r\n\r\n                // Reset the stack\r\n                reducedEquations = [];\r\n            }\r\n\r\n            // Solve the equations\r\n            let E = this._resolutionSteps[this._resolutionSteps.length - 1].equations[0];\r\n            E.solve();\r\n\r\n            return {\r\n                value: new Fraction(E.solutions[0]),\r\n                isReal: E.isReal,\r\n                isVarnothing: E.isVarnothing\r\n            }\r\n        }\r\n\r\n        // ------------------------------------------\r\n        // Helpers\r\n        // ------------------------------------------\r\n        log = (): string => {\r\n            let str: string = '';\r\n\r\n            for (let E of this._equations) {\r\n                console.log(E.tex);\r\n                str += `${E.tex}\\\\n}`;\r\n            }\r\n\r\n            return str;\r\n        };\r\n    }\r\n","/**\r\n * Polynom module contains everything necessary to handle polynoms.\r\n * @module Logicalset\r\n */\r\n\r\nimport {Shutingyard} from '../shutingyard';\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n */\r\n    export class Logicalset {\r\n        private _rawString: string;\r\n        private _rpn: { token: string, tokenType: string }[]\r\n\r\n        /**\r\n         *\r\n         * @param {string} value (optional) Default polynom to parse on class creation\r\n         */\r\n        constructor(value: string) {\r\n            this._rawString = value\r\n            this.parse(value)\r\n            return this;\r\n        }\r\n\r\n        get isLogicalset() {\r\n            return true;\r\n        };\r\n\r\n        private parse = (value: string): Logicalset => {\r\n            // TODO: Must format the value string to convert some items...\r\n\r\n            // Parse the updated value to the shutingyard algorithm\r\n            this._rpn = new Shutingyard('set').parse(value).rpn;\r\n\r\n            return this;\r\n        }\r\n\r\n        evaluate(tokenSets: { [key: string]: any[] }, reference?: any[]): any[] {\r\n            let varStack: (Set<unknown>)[] = []\r\n\r\n            let referenceSet: Set<unknown>\r\n            if (reference === undefined) {\r\n                referenceSet = new Set()\r\n                for (let key in tokenSets) {\r\n                    referenceSet = new Set([...referenceSet, ...tokenSets[key]])\r\n                }\r\n            } else {\r\n                referenceSet = new Set(reference)\r\n            }\r\n\r\n            for (let token of this._rpn) {\r\n                if (token.tokenType === 'variable') {\r\n                    // The variable has no token - assume it's empty.\r\n                    if (tokenSets[token.token] === undefined) {\r\n                        varStack.push(new Set())\r\n                    } else {\r\n                        varStack.push(new Set(tokenSets[token.token]));\r\n                    }\r\n\r\n                } else {\r\n                    switch (token.token) {\r\n                        case '&':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                varStack.push(new Set([...first].filter(x => second.has(x))))\r\n                            }\r\n                            break\r\n                        case '|':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n                                varStack.push(new Set([...first, ...second]))\r\n                            }\r\n                            break\r\n                        case '-':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n                                varStack.push(new Set([...first].filter(x => !second.has(x))))\r\n                            }\r\n                            break\r\n                        case '!':\r\n                            if (varStack.length >= 1) {\r\n                                let first = varStack.pop()\r\n\r\n                                varStack.push(new Set([...referenceSet].filter(x => !first.has(x))))\r\n                            }\r\n                            break\r\n                    }\r\n                }\r\n            }\r\n\r\n            return [...varStack[0]].sort();\r\n        }\r\n\r\n        vennAB(): any[] {\r\n            return this.evaluate({\r\n                    A: ['A', 'AB'],\r\n                    B: ['B', 'AB']\r\n                },\r\n                ['A', 'B', 'AB', 'E']\r\n            )\r\n        }\r\n\r\n        vennABC(): any[] {\r\n            return this.evaluate({\r\n                    A: ['A', 'AB', 'AC', 'ABC'],\r\n                    B: ['B', 'AB', 'BC', 'ABC'],\r\n                    C: ['C', 'AC', 'BC', 'ABC']\r\n                },\r\n                ['A', 'B', 'C', 'AB', 'AC', 'BC', 'E']\r\n            )\r\n        }\r\n\r\n        get rpn(): { token: string, tokenType: string }[] {\r\n            return this._rpn\r\n        }\r\n\r\n        get tex(): string {\r\n            let varStack: { token: string, tokenType: string } [] = []\r\n\r\n            for (let token of this._rpn) {\r\n                if (token.tokenType === 'variable') {\r\n                    varStack.push(token);\r\n                } else {\r\n                    switch (token.token) {\r\n                        case '&':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\cap ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '|':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\cup ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '-':\r\n                            if (varStack.length >= 2) {\r\n                                let second = varStack.pop(),\r\n                                    first = varStack.pop()\r\n\r\n                                if (first.tokenType === 'mix') {\r\n                                    first.token = `( ${first.token} )`\r\n                                }\r\n                                if (second.tokenType === 'mix') {\r\n                                    second.token = `( ${second.token} )`\r\n                                }\r\n                                varStack.push({token: `${first.token} \\\\setminus ${second.token}`, tokenType: 'mix'})\r\n                            }\r\n                            break\r\n                        case '!':\r\n                            if (varStack.length >= 1) {\r\n                                let first = varStack.pop()\r\n                                varStack.push({token: `\\\\overline{ ${first.token} }`, tokenType: 'variable'})\r\n                            }\r\n                            break\r\n                    }\r\n                }\r\n            }\r\n\r\n            return varStack[0].token\r\n        }\r\n    }","/***\r\n * Monom class\r\n * Defined as coefficient * literal\r\n * Examples: 3x^2, 3/5x^2, ...\r\n */\r\nimport {Fraction} from \"../coefficients\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Shutingyard} from \"../shutingyard\";\r\n\r\nexport type literalType = {\r\n    [Key: string]: Fraction\r\n}\r\n\r\nexport class Monom {\r\n    private _coefficient: Fraction;\r\n    private _literal: literalType;\r\n\r\n    /**\r\n     * Create the monom object.\r\n     * @param value (optional) string\r\n     */\r\n    constructor(value?: string) {\r\n        this.zero();\r\n\r\n        if (value !== undefined) {\r\n            // A string is given - try to parse the value.\r\n            this.parse(value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get isMonom() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Get the coefficient as fraction\r\n     */\r\n    get coefficient(): Fraction {\r\n        return this._coefficient;\r\n    }\r\n\r\n    /**\r\n     * Set the coefficient value of the monom\r\n     * @param F     Fraction\r\n     */\r\n    set coefficient(F: Fraction) {\r\n        this._coefficient = F;\r\n    }\r\n\r\n    /**\r\n     * Get the literal part, as dictionary\r\n     */\r\n    get literal(): literalType {\r\n        return this._literal;\r\n    }\r\n\r\n    get literalSqrt(): literalType {\r\n\r\n        if (this.isLiteralSquare()) {\r\n            let L: literalType = {}\r\n            for (let key in this._literal) {\r\n                L[key] = this._literal[key].clone().sqrt()\r\n            }\r\n            return L;\r\n        } else {\r\n            return this._literal;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom\r\n     * @param L     Literal part as dictionary: <setLetter: exposant>\r\n     */\r\n    set literal(L: literalType) {\r\n        this._literal = L;\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom from a string\r\n     * @param inputStr  String like x^2y^3\r\n     */\r\n    set literalStr(inputStr: string) {\r\n        // TODO : parse using shutingyard tree !\r\n\r\n        // Match all x^n\r\n        for (const v of [...inputStr.matchAll(/([a-z])\\^([+-]?[0-9]+)/g)]) {\r\n            // Create the default letter entry if necessary.\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = new Fraction().zero();\r\n            }\r\n\r\n            // Add the new value.\r\n            // TODO: actually, it adds only numeric value\r\n            this._literal[v[1]].add(+v[2]);\r\n        }\r\n\r\n        // Match all x\r\n        for (const v of [...inputStr.matchAll(/([a-z](?!\\^))/g)]) {\r\n            // Match all single letters\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = new Fraction().zero();\r\n            }\r\n\r\n            // Add one to the value.\r\n            this._literal[v[1]].add(1)\r\n        }\r\n    }\r\n\r\n    // Getter helpers.\r\n    /**\r\n     * Get the variables letters\r\n     */\r\n    get variables(): string[] {\r\n        this.clone().clean();\r\n        return Object.keys(this._literal)\r\n    }\r\n\r\n    // Display getter\r\n    /**\r\n     * This display getter is to be used in the polynom display getter\r\n     */\r\n    get display(): string {\r\n        let L: string = '',\r\n            letters = Object.keys(this._literal).sort()\r\n        for (let letter of letters) {\r\n            if (this._literal[letter].isNotZero()) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter].isNotEqual(1)) {\r\n                    L += `^${this._literal[letter].display}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.display}`;\r\n            } else {\r\n                return '';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.display}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    get dividers(): Monom[] {\r\n        // Decompose only if the coefficient is a natural number\r\n        if (this.coefficient.denominator !== 1) {\r\n            return [this.clone()]\r\n        }\r\n        // Decompose only if the power values are natural numbers.\r\n        if (this.hasFractionCoefficient) {\r\n            return [this.clone()]\r\n        }\r\n\r\n        // Security : do not do this if greater than 10000\r\n        if (this.coefficient.numerator > 10000) {\r\n            return [this.clone()]\r\n        }\r\n        const dividers = Numeric.dividers(Math.abs(this.coefficient.numerator))\r\n\r\n        // Decompose the literals parts.\r\n        let literals: literalType[] = [];\r\n        for (let L in this.literal) {\r\n            // L is the letter.\r\n            literals = this._getLiteralDividers(literals, L)\r\n        }\r\n\r\n        const monomDividers: Monom[] = [];\r\n        if (literals.length > 0 && dividers.length > 0) {\r\n            for (let N of dividers) {\r\n                for (let L of literals) {\r\n                    let M = new Monom();\r\n                    M.coefficient = new Fraction(N)\r\n                    M.literal = L\r\n                    monomDividers.push(M)\r\n                }\r\n            }\r\n        } else if (dividers.length === 0) {\r\n            for (let L of literals) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction().one()\r\n                M.literal = L\r\n                monomDividers.push(M)\r\n            }\r\n        } else {\r\n            for (let N of dividers) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction(N)\r\n                monomDividers.push(M)\r\n            }\r\n        }\r\n\r\n        return monomDividers.length === 0 ? [new Monom().one()] : monomDividers;\r\n    }\r\n\r\n    private _getLiteralDividers(arr: literalType[], letter: string): literalType[] {\r\n        let tmpList: { [key: string]: Fraction }[] = [];\r\n\r\n        // Be default, this.literal[letter] should be a rational number.\r\n        for (let d = 0; d <= this.literal[letter].value; d++) {\r\n            if (arr.length === 0) {\r\n                let litt: literalType = {}\r\n                litt[letter] = new Fraction(d)\r\n                tmpList.push(litt)\r\n            } else {\r\n                for (let item of arr) {\r\n                    let litt: literalType = {}\r\n                    for (let currentLetter in item) {\r\n                        litt[currentLetter] = item[currentLetter]\r\n                    }\r\n                    litt[letter] = new Fraction(d)\r\n                    tmpList.push(litt)\r\n                }\r\n            }\r\n        }\r\n        return tmpList;\r\n    }\r\n\r\n    /**\r\n     * Display the monom, forcing the '+' sign to appear\r\n     */\r\n    get displayWithSign(): string {\r\n        // TODO: Rename or remove this getter ?\r\n        let d: String = this.display;\r\n        return (d[0] !== '-' ? '+' : '') + d;\r\n    }\r\n\r\n    /**\r\n     * Get the tex output of the monom\r\n     */\r\n    get tex(): string {\r\n        // TODO: display with square root !\r\n        let L: string = '',\r\n            letters = Object.keys(this._literal).sort()\r\n\r\n        for (let letter of letters) {\r\n            if (this._literal[letter].isNotZero()) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter].isNotEqual(1)) {\r\n                    L += `^{${this._literal[letter].display}}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.dfrac}`;\r\n            } else {\r\n                return '0';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.dfrac}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // -----------------------------------------\r\n    /**\r\n     * Parse a string to a monom. The string may include fraction.\r\n     * @param inputStr\r\n     */\r\n    parse = (inputStr: string): Monom => {\r\n        this._shutingYardToReducedMonom(inputStr)\r\n        //\r\n        // // Set the literal part.\r\n        // this.literalStr = inputStr;\r\n        //\r\n        // // Get the coefficient\r\n        // this._coefficient = new Fraction();\r\n        // for (const v of [...inputStr.replace(/([a-z])|(\\^[+-]?[0-9]+)/g, ',').split(',')]) {\r\n        //     // The value is empty.\r\n        //     if (v.trim() === '') {\r\n        //         continue;\r\n        //     }\r\n        //\r\n        //     // Multiply the current coefficient by the new found value.\r\n        //     this._coefficient.multiply(new Fraction(v.trim()));\r\n        // }\r\n\r\n        return this;\r\n    };\r\n\r\n    private _shutingYardToReducedMonom = (inputStr: string): Monom => {\r\n        // Get the RPN array of the current expression\r\n        const SY: Shutingyard = new Shutingyard().parse(inputStr);\r\n        const rpn: { token: string, tokenType: string }[] = SY.rpn;\r\n\r\n        let stack: Monom[] = [], m, pow, letter, q1, q2\r\n\r\n        if(rpn.length===0){\r\n            this.zero()\r\n            return this\r\n        }else if(rpn.length===1){\r\n            const element = rpn[0]\r\n\r\n            this.one()\r\n            if (element.tokenType === 'coefficient') {\r\n                this.coefficient = new Fraction(element.token)\r\n            } else if (element.tokenType === 'variable') {\r\n                this.setLetter(element.token, 1)\r\n            }\r\n            return this\r\n        }else{\r\n            // Reset the monom\r\n            this.one()\r\n            for (const element of rpn) {\r\n                if (element.tokenType === 'coefficient') {\r\n                    let M = new Monom().one()\r\n                    M.coefficient = new Fraction(element.token)\r\n                    stack.push(M.clone())\r\n                } else if (element.tokenType === 'variable') {\r\n                    let M = new Monom().one()\r\n                    M.setLetter(element.token, 1)\r\n                    stack.push(M.clone())\r\n                } else if (element.tokenType === 'operation') {\r\n                    switch (element.token) {\r\n                        case '-':\r\n                            // this should only happen for negative powers or for negative coefficient.\r\n                            q2 = (stack.pop()) || new Monom().zero()\r\n                            q1 = (stack.pop()) || new Monom().zero()\r\n\r\n                            if(q1.isZero() && q2.isZero()){\r\n                                this.opposed()\r\n                                break\r\n                            }\r\n                            stack.push(q1.subtract(q2))\r\n                            break;\r\n                        case '*':\r\n                            // Get the last element in the stack\r\n                            m = (stack.pop()) || new Monom().one()\r\n                            this.multiply(m)\r\n                            break\r\n                        case '^':\r\n                            // get the two last elements in the stack\r\n                            pow = (stack.pop().coefficient) || new Fraction().one()\r\n                            m = (stack.pop()) || new Monom().one()\r\n\r\n                            letter = m.variables[0]\r\n\r\n                            if(letter!==undefined) {\r\n                                m.setLetter(letter, pow)\r\n                            }\r\n                            this.multiply(m.clone())\r\n                            break\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return this\r\n    }\r\n    /**\r\n     * Clone the current Monom.\r\n     */\r\n    clone = (): Monom => {\r\n        let F: Monom = new Monom();\r\n\r\n        F.coefficient = this._coefficient.clone();\r\n\r\n        // Copy the literal parts.\r\n        for (let k in this._literal) {\r\n            F.setLetter(k, this._literal[k].clone());\r\n        }\r\n        return F;\r\n    };\r\n\r\n    /**\r\n     * Create a zero value monom\r\n     */\r\n    zero = (): Monom => {\r\n        this._coefficient = new Fraction().zero();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Create a one value monom\r\n     */\r\n    one = (): Monom => {\r\n        this._coefficient = new Fraction().one();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Clean the monom by removing each letters with a power of zero.\r\n     */\r\n    clean = (): Monom => {\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter].isZero()) {\r\n                delete this._literal[letter];\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Get the opposed\r\n     * Returns a monom.\r\n     */\r\n    opposed = (): Monom => {\r\n        this._coefficient.opposed();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Add all similar monoms. If they aren't similar, they are simply skipped.\r\n     * @param M (Monom[]) The monoms to add.\r\n     */\r\n    add = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                this._coefficient.add(m.coefficient);\r\n            } else {\r\n                console.log('Add: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Subtract multiple monoms\r\n     * @param M (Monom[]) The monoms to subtract\r\n     */\r\n    subtract = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                this._coefficient.add(m.coefficient.clone().opposed());\r\n            } else {\r\n                console.log('Subtract: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiple multiple monoms to the current monom\r\n     * @param M (Monom[]) The monoms to multiply to.\r\n     */\r\n    multiply = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            // Multiply the coefficient.\r\n            this._coefficient.multiply(m.coefficient);\r\n\r\n            // Multiply the literal parts.\r\n            for (let letter in m.literal) {\r\n                if (this._literal[letter] === undefined) {\r\n                    this._literal[letter] = m.literal[letter].clone()\r\n                } else {\r\n                    this._literal[letter].add(m.literal[letter])\r\n                }\r\n\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiplyByNumber = (F: Fraction | number): Monom => {\r\n        this._coefficient.multiply(F);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divide the current monoms by multiple monoms\r\n     * @param M (Monom[])\r\n     */\r\n    divide = (...M: Monom[]): Monom => {\r\n        // Depending on the given value, choose the current item\r\n        for (let v of M) {\r\n            // Divide the coefficient\r\n            this._coefficient.divide(v.coefficient);\r\n\r\n            // Subtract the power values\r\n            for (let letter in v.literal) {\r\n                this._literal[letter] = (this._literal[letter] === undefined) ? v.literal[letter].clone().opposed() : this._literal[letter].subtract(v.literal[letter])\r\n\r\n                // If the power of a particular setLetter is zero, delete it from the literal part..\r\n                if (this._literal[letter].isZero()) {\r\n                    delete this._literal[letter];\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the pow of a monom.\r\n     * @param nb (number) : Mathematical pow\r\n     */\r\n    pow = (nb: number): Monom => {\r\n        this._coefficient.pow(nb);\r\n        for (let letter in this._literal) {\r\n            this._literal[letter].pow(nb)\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the nth-root of the monom\r\n     * @param p\r\n     */\r\n    root = (p: number): Monom => {\r\n        // TODO: determiner the nth root of a monom\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Return the square root of a monom\r\n     */\r\n    sqrt = (): Monom => {\r\n        if (this.isSquare()) {\r\n            this._coefficient.sqrt();\r\n            for (let letter in this._literal) {\r\n                this._literal[letter].clone().divide(2)\r\n            }\r\n        }\r\n        return this.root(2);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    compare = (M: Monom, sign?: string): boolean => {\r\n        // TODO: Build the compare systems.\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // To be equal, they must be the isSame\r\n                if (!this.compare(M, 'same')) {\r\n                    return false;\r\n                }\r\n\r\n                // The literal parts are the isSame. The coefficient must be equal\r\n                return this._coefficient.isEqual(M.coefficient);\r\n            case 'same':\r\n                // Get the list of all variables from both monoms.\r\n                let M1: string[] = this.variables,\r\n                    M2: string[] = M.variables,\r\n                    K: string[] = M1.concat(M2.filter((item) => M1.indexOf(item) < 0));\r\n\r\n                for (let key of K) {\r\n                    // The setLetter is not available in one of the monom\r\n                    if (this._literal[key] === undefined || M.literal[key] === undefined) {\r\n                        return false;\r\n                    }\r\n                    // The setLetter does not have the isSame power in each monoms.\r\n                    if (!this._literal[key].isEqual(M.literal[key])) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                // All are positive check - the monoms are the sames.\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is null\r\n     */\r\n    isZero(): boolean {\r\n        return this._coefficient.value === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is one\r\n     */\r\n    isOne(): boolean {\r\n        return this._coefficient.value === 1 && this.variables.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if two monoms are equals\r\n     * @param M\r\n     */\r\n    isEqual = (M: Monom): boolean => {\r\n        return this.compare(M, '=');\r\n    };\r\n\r\n    /**\r\n     * Determine if two monoms are similar\r\n     * @param M\r\n     */\r\n    isSameAs = (M: Monom): boolean => {\r\n        return this.compare(M, 'same');\r\n    };\r\n\r\n    isSquare = (): boolean => {\r\n        if (!this.coefficient.isSquare()) {\r\n            return false;\r\n        }\r\n        return this.isLiteralSquare();\r\n    }\r\n\r\n    isLiteralSquare = (): boolean => {\r\n        for (let letter in this.literal) {\r\n            // A literal square must have a natural power\r\n            if (this.literal[letter].isRational()) {\r\n                return false\r\n            }\r\n\r\n            // The natural power must be be even\r\n            if (this.literal[letter].isEven()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    hasFractionCoefficient = (): boolean => {\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter].isRational()) {\r\n                return true\r\n            }\r\n        }\r\n\r\n        return false\r\n    }\r\n    // ------------------------------------------\r\n    // Misc monoms functions\r\n    // -------------------------------------\r\n    /**\r\n     * Determine if a monom contains a setLetter in it's literal part\r\n     * @param letter\r\n     */\r\n    hasLetter = (letter?: string): boolean => {\r\n        // The letter was not found\r\n        if (this._literal[letter === undefined ? 'x' : letter] === undefined) {\r\n            return false\r\n        }\r\n\r\n        // The letter is found and is not zero !\r\n        return this._literal[letter === undefined ? 'x' : letter].isNotZero();\r\n    };\r\n\r\n    /**\r\n     * Set the power of a particular setLetter\r\n     * @param letter (string) Letter to change\r\n     * @param pow (number) Power of the setLetter (must be positive integer.\r\n     */\r\n    setLetter = (letter: string, pow: Fraction | number): void => {\r\n        if (pow instanceof Fraction) {\r\n            // Set the power of the letter to zero => remove it\r\n            if (this.hasLetter(letter) && pow.isZero()) {\r\n                delete this._literal[letter]\r\n            }\r\n\r\n            this._literal[letter] = pow.clone()\r\n        } else {\r\n            this.setLetter(letter, new Fraction(pow))\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the degree of a monom. If no setLetter is given, the result will be the global degree.\r\n     * @param letter (string) Letter to get to degree (power)\r\n     */\r\n    degree = (letter?: string): Fraction => {\r\n        if (this.variables.length === 0) {\r\n            return new Fraction().zero();\r\n        }\r\n        if (letter === undefined) {\r\n            // Not setLetter given -> we get the global monom degree (sum of all the letters).\r\n            return Object.values(this._literal).reduce((t, n) => t.clone().add(n));\r\n        } else {\r\n            // A setLetter is given -> get the corresponding power.\r\n            return this._literal[letter] === undefined ? new Fraction().zero() : this._literal[letter].clone();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Evaluate a monom. Each setLetter must be assigned to a Fraction.\r\n     * @param values    Dictionary of <setLetter: Fraction>\r\n     */\r\n    evaluate = (values: literalType | Fraction | number): Fraction => {\r\n        let r = this.coefficient.clone();\r\n\r\n        if (typeof values === 'number' || values instanceof Fraction) {\r\n            let tmpValues: literalType = {}\r\n\r\n            tmpValues[this.variables[0]] = new Fraction(values)\r\n            return this.evaluate(tmpValues);\r\n        }\r\n\r\n        if (typeof values === 'object') {\r\n            for (let L in this._literal) {\r\n                if (values[L] === undefined) {\r\n                    return new Fraction().zero();\r\n                }\r\n\r\n                let value = new Fraction(values[L])\r\n                r.multiply(value.pow(this._literal[L]))\r\n            }\r\n        }\r\n        return r;\r\n    };\r\n\r\n    /**\r\n     * Derivative the monom\r\n     * @param letter\r\n     */\r\n    derivative = (letter?: string): Monom => {\r\n        // No setLetter given - assume it's the setLetter 'x'\r\n        if (letter === undefined) {\r\n            letter = 'x';\r\n        }\r\n\r\n        if (this.hasLetter(letter)) {\r\n            let d = this._literal[letter].clone(),\r\n                dM = this.clone();\r\n\r\n            // Subtract one to the degree.\r\n            dM._literal[letter].subtract(1)\r\n\r\n            // Multiply the coefficient by the previous degree\r\n            dM._coefficient.multiply(new Fraction(d.clone()));\r\n            return dM;\r\n        } else {\r\n            return new Monom().zero();\r\n        }\r\n    };\r\n\r\n    primitive = (letter?: string): Monom => {\r\n        // TODO: derivative including the ln value => implies creating different monom system ?\r\n        if (letter === undefined) {\r\n            letter = 'x'\r\n        }\r\n\r\n        // Zero monom\r\n        let M = this.clone(), degree\r\n\r\n        if (M.hasLetter(letter)) {\r\n            degree = M.degree(letter).clone().add(1)\r\n            M.coefficient = M.coefficient.clone().divide(degree)\r\n            M.setLetter(letter, degree)\r\n        } else {\r\n            // There is no letter.\r\n\r\n            // The coefficient might be zero (=> x) or a number a (=> ax)\r\n            if (M.coefficient.isZero()) {\r\n                M.coefficient = new Fraction().one()\r\n            }\r\n            M.setLetter(letter, 1)\r\n        }\r\n        return M\r\n    }\r\n    // ----------------------------------------\r\n    // Static functions\r\n    // ----------------------------------------\r\n\r\n    /**\r\n     * Get the least common multiple of monoms\r\n     * @param monoms    Array of monoms\r\n     */\r\n    static lcm = (...monoms: Monom[]): Monom => {\r\n        // All the monoms must be with natural powers...\r\n        for (let m of monoms) {\r\n            if (m.hasFractionCoefficient()) {\r\n                return new Monom().zero()\r\n            }\r\n        }\r\n\r\n\r\n        let M = new Monom(),\r\n            coeffN: number[] = monoms.map(value => value.coefficient.numerator),\r\n            coeffD: number[] = monoms.map(value => value.coefficient.denominator),\r\n            n = Numeric.gcd(...coeffN),\r\n            d = Numeric.lcm(...coeffD);\r\n\r\n        // Get the coefficient.\r\n        M.coefficient = new Fraction(n, d).reduce();\r\n\r\n        // Set the literal parts - go through each monoms literal parts and get only the lowest degree of each letters.\r\n        for (let m of monoms) {\r\n            // Remove the inexistant letters from the resulting monom\r\n            for (let letter in M.literal) {\r\n                if (!(letter in m.literal)) {\r\n                    M.literal[letter].zero();\r\n                }\r\n            }\r\n            for (let letter in m.literal) {\r\n                if (M.literal[letter] === undefined && m.literal[letter].isStrictlyPositive()) {\r\n                    M.literal[letter] = m.literal[letter].clone();\r\n                } else {\r\n                    M.literal[letter] = new Fraction(Math.min(m.literal[letter].value, M.literal[letter].value))\r\n                }\r\n            }\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n    /**\r\n     * Multiply two monoms and return a NEW monom.\r\n     * @param monoms\r\n     */\r\n    static xmultiply = (...monoms: Monom[]): Monom => {\r\n        let M = new Monom().one();\r\n\r\n        for (let m of monoms) {\r\n            M.multiply(m);\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Determine if multiple monoms are similar\r\n     * @param M\r\n     */\r\n    areSameAs = (...M: Monom[]): boolean => {\r\n        let result: boolean = true;\r\n\r\n        // Check all monoms if they are the isSame as the \"this\" one.\r\n        for (let i = 0; i < M.length; i++) {\r\n            if (!this.isSameAs(M[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All check passed -> all the monoms are similar.\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Determine if multiple monoms are equals\r\n     * @param M\r\n     */\r\n    areEquals = (...M: Monom[]): boolean => {\r\n        // They are not similar.\r\n        if (!this.areSameAs(...M)) {\r\n            return false;\r\n        }\r\n\r\n        // Check all coefficient. They must be equals.\r\n        for (let m of M) {\r\n            if (!this._coefficient.isEqual(m.coefficient)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All checks passed.\r\n        return true;\r\n    };\r\n\r\n}\r\n","/**\r\n * Polynom module contains everything necessary to handle polynoms.*\r\n */\r\n\r\nimport {literalType, Monom} from './monom';\r\nimport {Shutingyard} from '../shutingyard';\r\nimport {Numeric} from '../numeric';\r\nimport {Random, randomPolynomConfig} from \"../random\";\r\nimport {Fraction} from \"../coefficients\";\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n * ```\r\n * let P = new Polynom('3x-4')\r\n * ```\r\n */\r\nexport class Polynom {\r\n    private _rawString: string;\r\n    private _monoms: Monom[];\r\n    private _factors: Polynom[];\r\n    private _texString: string;\r\n\r\n    /**\r\n     *\r\n     * @param {string} polynomString (optional) Default polynom to parse on class creation\r\n     * @param values\r\n     */\r\n    constructor(polynomString?: string, ...values: any[]) {\r\n        this._monoms = [];\r\n        this._factors = [];\r\n        if (polynomString !== undefined) {\r\n            this.parse(polynomString, ...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    get isPolynom() {\r\n        return true;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get monoms() {\r\n        return this._monoms;\r\n    }\r\n\r\n    set monoms(M: Monom[]) {\r\n        this._monoms = M;\r\n    }\r\n\r\n    get factors(): Polynom[] {\r\n        return this._factors;\r\n    }\r\n\r\n    set factors(value: Polynom[]) {\r\n        this._factors = value;\r\n    }\r\n\r\n    get texFactors(): string {\r\n        this.factorize()\r\n\r\n        let tex = ''\r\n        for (let f of this.factors) {\r\n            if (f.monoms.length > 1) {\r\n                tex += `(${f.tex})`\r\n            } else {\r\n                tex = f.tex + tex;\r\n            }\r\n        }\r\n        return tex;\r\n    }\r\n\r\n    get texString(): string {\r\n        return this._texString;\r\n    }\r\n\r\n    get length() {\r\n        // TODO: Must reduce the monoms list to remove the zero coefficient.\r\n        return this._monoms.length;\r\n    }\r\n\r\n    get display(): string {\r\n        return this.genDisplay();\r\n    }\r\n\r\n    get raw(): string {\r\n        return this._rawString\r\n    }\r\n\r\n    get tex(): string {\r\n        return this.genDisplay('tex');\r\n    }\r\n\r\n    get isMultiVariable(): boolean {\r\n        const B = false;\r\n        for (const m of this._monoms) {\r\n            if (m.variables.length > 1) {\r\n                return true;\r\n            }\r\n        }\r\n        return B;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            V = V.concat(m.variables);\r\n        }\r\n\r\n        // Remove duplicates.\r\n        V = [...new Set(V)];\r\n\r\n        return V;\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    private genDisplay = (output?: string, forceSign?: boolean, wrapParentheses?: boolean): string => {\r\n        let P: string = '';\r\n\r\n        for (const k of this._monoms) {\r\n            if (k.coefficient.value === 0) {\r\n                continue;\r\n            }\r\n\r\n            P += `${(k.coefficient.sign() === 1 && (P !== '' || forceSign === true)) ? '+' : ''}${(output === 'tex') ? k.tex : k.display}`;\r\n        }\r\n\r\n        if (wrapParentheses === true && this.length > 1) {\r\n            if (output === 'tex') {\r\n                P = `\\\\left( ${P} \\\\right)`;\r\n            } else {\r\n                P = `(${P})`;\r\n            }\r\n        }\r\n\r\n        if (P === '') {\r\n            P = '0';\r\n        }\r\n        return P;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse a string to a polynom.\r\n     * @param inputStr\r\n     * @param values: as string, numbers or fractions\r\n     */\r\n    parse = (inputStr: string, ...values: any[]): Polynom => {\r\n\r\n        if (values === undefined || values.length === 0) {\r\n            inputStr = '' + inputStr;\r\n            this._rawString = inputStr;\r\n\r\n            // Parse the polynom using the shuting yard algorithm\r\n            if (inputStr !== '' && !isNaN(Number(inputStr))) {\r\n                this.empty();\r\n                // It's a simple number.\r\n                let m = new Monom(inputStr);\r\n                // m.coefficient = new Fraction(inputStr);\r\n                // m.literalStr = '';\r\n                this.add(m);\r\n                return this;\r\n            }\r\n\r\n            // Parse the string.\r\n            return this.shutingYardToReducedPolynom(inputStr);\r\n        } else if (/^[a-z]/.test(inputStr)) {\r\n            // We assume the inputStr contains only letters.\r\n            this.empty();\r\n\r\n            let fractions = values.map(x => new Fraction(x));\r\n            // Multiple setLetter version\r\n            if (inputStr.length > 1) {\r\n                // TODO: check that the number of values given correspond to the letters (+1 eventually)\r\n                let letters = inputStr.split(''),\r\n                    i = 0;\r\n                for (let F of fractions) {\r\n                    let m = new Monom();\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = letters[i] || '';\r\n                    this.add(m);\r\n                    i++;\r\n                }\r\n            }\r\n            // Single setLetter version\r\n            else {\r\n                let n = fractions.length - 1;\r\n                for (let F of fractions) {\r\n                    let m = new Monom()\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = `${inputStr}^${n}`\r\n                    this.add(m);\r\n                    n--;\r\n                }\r\n            }\r\n            return this;\r\n        } else {\r\n            return this.zero();\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * Main parse using a shutting yard class\r\n     * @param inputStr\r\n     */\r\n    private shutingYardToReducedPolynom = (inputStr: string): Polynom => {\r\n        // Get the RPN array of the current expression\r\n        const SY: Shutingyard = new Shutingyard().parse(inputStr);\r\n        const rpn: { token: string, tokenType: string }[] = SY.rpn;\r\n        let m1: Polynom;\r\n        let m2: Polynom;\r\n\r\n        let stack: Polynom[] = [],\r\n            previousToken: string = null,\r\n            tempPolynom\r\n\r\n        for (const element of rpn) {\r\n            if (element.tokenType === 'coefficient' || element.tokenType === 'variable') {\r\n                tempPolynom = new Polynom().zero();\r\n                tempPolynom.monoms = [new Monom(element.token)]\r\n                stack.push(tempPolynom.clone())\r\n            } else if (element.tokenType === 'operation') {\r\n                m2 = (stack.pop()) || new Polynom().zero();\r\n                m1 = (stack.pop()) || new Polynom().zero();\r\n                switch (element.token) {\r\n                    case '+':\r\n                        stack.push(m1.add(m2))\r\n                        break;\r\n                    case '-':\r\n                        stack.push(m1.subtract(m2))\r\n                        break;\r\n                    case '*':\r\n                        stack.push(m1.multiply(m2))\r\n                        break;\r\n                    case '^':\r\n                        stack.push(m1.pow(+previousToken))\r\n                }\r\n            }\r\n            previousToken = element.token;\r\n        }\r\n\r\n        this._monoms = stack[0].monoms;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the polynom\r\n     */\r\n    clone = (): Polynom => {\r\n        const P = new Polynom();\r\n        const M: Monom[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            M.push(m.clone());\r\n        }\r\n\r\n        P.monoms = M;\r\n        return P;\r\n    };\r\n\r\n    /**\r\n     * Set the polynom to zero.\r\n     * @returns {this}\r\n     */\r\n    zero = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().zero());\r\n        this._rawString = '0';\r\n        return this;\r\n    };\r\n\r\n    one = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().one());\r\n        this._rawString = '1';\r\n        return this;\r\n    }\r\n\r\n    empty = (): Polynom => {\r\n        this._monoms = [];\r\n        this._rawString = '';\r\n        return this;\r\n    };\r\n\r\n    // // -----------------------------------------------\r\n    // // Polynom generators and randomizers\r\n    // // -----------------------------------------------\r\n    // random(config?: randomPolynomConfig) {\r\n    //     return Random.polynom(config);\r\n    // }\r\n    //\r\n    // private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n    //     degree: 2,\r\n    //     unit: true,\r\n    //     fractions: false,\r\n    //     factorable: false,\r\n    //     letters: 'x',\r\n    //     allowNullMonom: false,\r\n    //     numberOfMonoms: false\r\n    // };\r\n    // get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n    //     return this._randomizeDefaults;\r\n    // }\r\n    //\r\n    // set randomizeDefaults(value) {\r\n    //     this._randomizeDefaults = value;\r\n    // }\r\n    //\r\n    // randomize = (config: { [key: string]: number | string | boolean }): Polynom => {\r\n    //     let P = new Polynom();\r\n    //\r\n    //     // Check the config file and use the default values.\r\n    //     if (config === undefined) {\r\n    //         config = {};\r\n    //     }\r\n    //     for (let k in this._randomizeDefaults) {\r\n    //         if (config[k] === undefined) {\r\n    //             config[k] = this._randomizeDefaults[k];\r\n    //         }\r\n    //     }\r\n    //\r\n    //     // TODO: Build a more robust randomize function\r\n    //     return P;\r\n    // }\r\n    //\r\n    // rndFactorable = (degree: number = 2, unit: boolean | number = false, letters: string = 'x'): Polynom => {\r\n    //     // TODO: Make rndFactorable polynom generator more user friendly\r\n    //     this._factors = [];\r\n    //     for (let i = 0; i < degree; i++) {\r\n    //         let factorUnit = unit === true || i >= unit,\r\n    //             p = Random.polynom({\r\n    //                 degree: 1,\r\n    //                 unit: factorUnit,\r\n    //                 fraction: false,\r\n    //                 letters\r\n    //             });\r\n    //         this._factors.push(p);\r\n    //     }\r\n    //\r\n    //     this.empty().monoms = this._factors[0].monoms;\r\n    //     for (let i = 1; i < this._factors.length; i++) {\r\n    //         this.multiply(this._factors[i]);\r\n    //     }\r\n    //     return this;\r\n    // };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Polynom => {\r\n        this._monoms = this._monoms.map(m => m.opposed());\r\n        return this;\r\n    };\r\n\r\n    add = (...values: any[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value.isPolynom) {\r\n                this._monoms = this._monoms.concat(value.monoms);\r\n            } else if (value.isMonom) {\r\n                this._monoms.push(value.clone());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()));\r\n            } else {\r\n                this._monoms.push(new Monom(value));\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (...values: any[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value.isPolynom) {\r\n                this._monoms = this._monoms.concat(value.clone().opposed().monoms);\r\n            } else if (value.isMonom) {\r\n                this._monoms.push(value.clone().opposed());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()).opposed());\r\n            } else {\r\n                this._monoms.push(new Monom(value).opposed());\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    multiply = (value: any): Polynom => {\r\n        if (value instanceof Polynom) {\r\n            return this.multiplyByPolynom(value);\r\n        } else if (value instanceof Fraction) {\r\n            return this.multiplyByFraction(value);\r\n        } else if (value instanceof Monom) {\r\n            return this.multiplyByMonom(value);\r\n        } else if (Number.isSafeInteger(value)) {\r\n            return this.multiplyByInteger(value);\r\n        }\r\n\r\n        // Something went wrong...\r\n        return this;\r\n    }\r\n\r\n    private multiplyByPolynom = (P: Polynom): Polynom => {\r\n        const M: Monom[] = [];\r\n        for (const m1 of this._monoms) {\r\n            for (const m2 of P.monoms) {\r\n                M.push(Monom.xmultiply(m1, m2));\r\n            }\r\n        }\r\n\r\n        this._monoms = M;\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.multiply(F);\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByInteger = (nb: number): Polynom => {\r\n        return this.multiplyByFraction(new Fraction(nb));\r\n    };\r\n\r\n    private multiplyByMonom = (M: Monom): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.multiply(M)\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n    /**\r\n     * Divide the current polynom by another polynom.\r\n     * @param P\r\n     * returns {quotient: Polynom, reminder: Polynom}\r\n     */\r\n    euclidian = (P: Polynom): { quotient: Polynom, reminder: Polynom } => {\r\n        const letter: string = P.variables[0];\r\n        const quotient: Polynom = new Polynom().zero();\r\n        const reminder: Polynom = this.clone().reorder(letter);\r\n\r\n        // There is no variable !\r\n        if (P.variables.length === 0) {\r\n            return {quotient, reminder}\r\n        }\r\n\r\n        // Get at least a letter\r\n\r\n        const maxMP: Monom = P.monomByDegree(undefined, letter);\r\n        const degreeP: Fraction = P.degree(letter);\r\n\r\n        let newM: Monom;\r\n\r\n        // Make the euclidian division of the two polynoms.\r\n        let MaxIteration = this.degree(letter).clone().multiply(2);\r\n        while (reminder.degree(letter) >= degreeP && MaxIteration.isPositive()) {\r\n            MaxIteration.subtract(1)\r\n\r\n            // Get the greatest monom divided by the max monom of the divider\r\n            newM = reminder.monomByDegree(undefined, letter).clone().divide(maxMP);\r\n\r\n            if (newM.isZero()) {\r\n                break;\r\n            }\r\n\r\n            // Get the new quotient and reminder.\r\n            quotient.add(newM);\r\n            reminder.subtract(P.clone().multiply(newM));\r\n        }\r\n\r\n        return {quotient, reminder};\r\n    };\r\n\r\n    divide = (value: any): Polynom => {\r\n        if (value.isFraction) {\r\n            this.divideByFraction(value);\r\n        } else if (Number.isSafeInteger(value)) {\r\n            return this.divideByInteger(value);\r\n        }\r\n    }\r\n\r\n    private divideByInteger = (nb: number): Polynom => {\r\n        const nbF = new Fraction(nb);\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(nbF);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    private divideByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(F);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    pow = (nb: number): Polynom => {\r\n        if (!Number.isSafeInteger(nb)) {\r\n            return this.zero();\r\n        }\r\n        if (nb < 0) {\r\n            return this.zero();\r\n        }\r\n        if (nb === 0) {\r\n            return new Polynom();\r\n        }\r\n\r\n        const P = this.clone();\r\n        for (let i = 1; i < nb; i++) {\r\n            this.multiply(P);\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param P\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (P: Polynom, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '='\r\n        }\r\n\r\n        // Create clone version to reduce them without altering the original polynoms.\r\n        const cP1 = this.clone().reduce().reorder();\r\n        const cP2 = P.clone().reduce().reorder();\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree().isNotEqual(cP2.degree())) {\r\n                    return false;\r\n                }\r\n\r\n                // Check if the coefficients are the isSame.\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isEqual(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            case 'same':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree() !== cP2.degree()) {\r\n                    return false;\r\n                }\r\n\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isSameAs(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    isZero(): boolean {\r\n        return (this._monoms.length === 1 && this._monoms[0].coefficient.isZero()) || this._monoms.length === 0;\r\n    }\r\n\r\n    isOne(): boolean {\r\n        return this._monoms.length === 1 && this._monoms[0].coefficient.isOne();\r\n    }\r\n\r\n    isEqual = (P: Polynom): boolean => {\r\n        return this.compare(P, '=');\r\n    };\r\n\r\n    isSameAs = (P: Polynom): boolean => {\r\n        return this.compare(P, 'same');\r\n    };\r\n\r\n    isOpposedAt = (P: Polynom): boolean => {\r\n        return this.compare(P.clone().opposed(), '=');\r\n    };\r\n\r\n    isFactorized = (polynomString: string): boolean => {\r\n        let P;\r\n\r\n        // Check if polynom is complete...\r\n        if (polynomString.match(/\\(/g).length !== polynomString.match(/\\)/g).length) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check if the provided (string) version is fully factorized.\r\n        // Run a regex on the string.\r\n        let polynomStringNormalized = polynomString.replaceAll('*', ''),\r\n            polynomStringReduced = '' + polynomStringNormalized,\r\n            factors: string[] = [];\r\n\r\n        for (let x of polynomStringNormalized.matchAll(/\\(([a-z0-9+\\-]+)\\)(\\^[0-9]*)?/g)) {\r\n            if (x[2] !== undefined) {\r\n                for (let i = 0; i < +x[2].substr(1); i++) {\r\n                    factors.push(x[1])\r\n                }\r\n            } else {\r\n                factors.push(x[1]);\r\n            }\r\n            polynomStringReduced = polynomStringReduced.replaceAll(x[0], '');\r\n        }\r\n        if (polynomStringReduced !== '') {\r\n            factors.push(polynomStringReduced);\r\n        }\r\n        let polyFactors = factors.map(x => new Polynom(x));\r\n\r\n        // Factorize the current polynom.\r\n        this.factorize();\r\n\r\n        // Compare the given factors with the generated factors\r\n        let sign = 1;\r\n        for (let f of this.factors) {\r\n            for (let i = 0; i < polyFactors.length; i++) {\r\n                if (f.isEqual(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    break;\r\n                } else if (f.isOpposedAt(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    sign = -sign;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // The polyfactors must be empty and the cumulative opposite factors must be 1.\r\n        return (polyFactors.length === 0 && sign === 1);\r\n    }\r\n\r\n    isDeveloped = (polynomString: string): Boolean => {\r\n        let P: Polynom;\r\n\r\n        // There is at least one parenthese - it is not developed.\r\n        if (polynomString.match(/\\(/g).length + polynomString.match(/\\)/g).length) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            // Build the polynom\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check that everything is completely developed. Actually, there are no parentheses... so it is fully developed\r\n\r\n        // maybe it wasn't reduced and not ordered...\r\n        // compare polynom string.\r\n\r\n        // normalize the string\r\n        let polynomStringNormalized = polynomString.replaceAll('[*\\s]', '')\r\n\r\n        // Determine if it's the exact same string.\r\n        // TODO: Maybe it's enough to just make this test !\r\n        return polynomStringNormalized === P.reduce().reorder().display\r\n    }\r\n    // ------------------------------------------\r\n    // Misc polynoms functions\r\n    // -------------------------------------\r\n    reduce = (): Polynom => {\r\n        for (let i = 0; i < this._monoms.length; i++) {\r\n            for (let j = i + 1; j < this._monoms.length; j++) {\r\n                if (this._monoms[i].isSameAs(this.monoms[j])) {\r\n                    this._monoms[i].add(this.monoms[j]);\r\n                    this._monoms.splice(j, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Remove all null monoms\r\n        this._monoms = this._monoms.filter((m) => {\r\n            return m.coefficient.value !== 0\r\n        });\r\n\r\n        // Reduce all monoms coefficient.\r\n        for (const m of this._monoms) {\r\n            m.coefficient.reduce();\r\n        }\r\n\r\n        if (this.length === 0) {\r\n            return new Polynom().zero();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    reorder = (letter: string = 'x'): Polynom => {\r\n        // TODO: Must handle multiple setLetter reorder system\r\n        this._monoms.sort(function (a, b) {\r\n            return b.degree(letter).clone().subtract(a.degree(letter)).value\r\n        });\r\n        return this.reduce();\r\n    };\r\n\r\n    degree = (letter?: string): Fraction => {\r\n        let d: Fraction = new Fraction().zero();\r\n        for (const m of this._monoms) {\r\n            d = Fraction.max(m.degree(letter).value, d);\r\n        }\r\n        return d;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        let L: string[] = [], S = new Set();\r\n\r\n        for (let m of this._monoms) {\r\n            S = new Set([...S, ...m.variables]);\r\n        }\r\n\r\n        // @ts-ignore\r\n        return [...S];\r\n    }\r\n\r\n    /**\r\n     * Replace a variable (letter) by a polynom.\r\n     * @param letter\r\n     * @param P\r\n     */\r\n    replaceBy = (letter: string, P: Polynom): Polynom => {\r\n        let pow: number;\r\n        const resultPolynom: Polynom = new Polynom().zero();\r\n\r\n        for (const m of this.monoms) {\r\n            if (m.literal[letter] === undefined || m.literal[letter].isZero()) {\r\n                resultPolynom.add(m.clone());\r\n            } else {\r\n                // We have found a setLetter.\r\n                // Get the power and reset it.\r\n                pow = +m.literal[letter];\r\n                delete m.literal[letter];\r\n\r\n                resultPolynom.add(P.clone().pow(pow).multiply(m));\r\n            }\r\n        }\r\n\r\n        this._monoms = resultPolynom.reduce().reorder().monoms;\r\n        return this;\r\n    };\r\n\r\n    // Evaluate a polynom.\r\n    evaluate = (values: literalType | Fraction | number): Fraction => {\r\n        const r = new Fraction().zero();\r\n\r\n        this._monoms.forEach(monom => {\r\n            //console.log('Evaluate polynom: ', monom.display, values, monom.evaluate(values).display);\r\n            r.add(monom.evaluate(values));\r\n        });\r\n        return r;\r\n    };\r\n\r\n    derivative = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.derivative(letter));\r\n        }\r\n        return dP;\r\n\r\n    }\r\n\r\n    primitive = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.primitive(letter))\r\n        }\r\n        return dP\r\n    }\r\n\r\n    integrate = (a: Fraction | number, b: Fraction | number, letter?: string): Fraction => {\r\n        const primitive = this.primitive(letter)\r\n\r\n        if (letter === undefined) {\r\n            letter = 'x'\r\n        }\r\n\r\n        let valuesA: literalType = {},\r\n            valuesB: literalType = {}\r\n        valuesA[letter] = new Fraction(a);\r\n        valuesB[letter] = new Fraction(b);\r\n\r\n        return primitive.evaluate(valuesB).subtract(primitive.evaluate(valuesA))\r\n    }\r\n    // ------------------------------------------\r\n    // Polynoms factorization functions\r\n    // -------------------------------------\r\n    /**\r\n     * Factorize a polynom and store the best results in factors.\r\n     * @param maxValue Defines the greatest value to search to (default is 20).\r\n     */\r\n    factorize = (letter?: string): Polynom[] => {\r\n        let factors: Polynom[] = [];\r\n\r\n        // Extract the common monom\r\n        let P = this.clone().reorder(),\r\n            M = P.commonMonom(),\r\n            tempPolynom: Polynom\r\n        // It has a common monom.\r\n        if (!M.isOne()) {\r\n            tempPolynom = new Polynom()\r\n            tempPolynom.monoms = [M]\r\n            factors = [tempPolynom.clone()]\r\n            P = P.euclidian(tempPolynom).quotient;\r\n        }\r\n\r\n        let securityLoop = P.degree().clone().multiply(2).value\r\n        // securityLoop = 0\r\n        while (securityLoop >= 0) {\r\n            securityLoop--\r\n\r\n\r\n            if (P.monoms.length < 2) {\r\n                if (!P.isOne()) {\r\n                    factors.push(P.clone());\r\n                }\r\n                break;\r\n            } else {\r\n                // Get the first and last monom.\r\n                let m1 = P.monoms[0].dividers,\r\n                    m2 = P.monoms[P.monoms.length - 1].dividers\r\n\r\n                // console.log('CURRENT VALUE')\r\n                // console.log(P.tex)\r\n                // console.log('---------------------')\r\n                for (let m1d of m1) {\r\n                    for (let m2d of m2) {\r\n                        // if(m1d.degree()===m2d.degree()){continue}\r\n                        let dividerPolynom = new Polynom(),\r\n                            result\r\n                        dividerPolynom.monoms = [m1d.clone(), m2d.clone()]\r\n                        result = P.euclidian(dividerPolynom)\r\n\r\n                        // console.log(dividerPolynom.tex, '=>', result.reminder.tex, '|||||', result.quotient.tex)\r\n                        if (result.reminder.isZero()) {\r\n                            P = result.quotient.clone();\r\n                            factors.push(dividerPolynom)\r\n                            continue;\r\n                        }\r\n\r\n                        dividerPolynom.monoms = [m1d.clone(), m2d.clone().opposed()]\r\n                        result = P.euclidian(dividerPolynom)\r\n                        if (result.reminder.isZero()) {\r\n                            P = result.quotient.clone();\r\n                            factors.push(dividerPolynom)\r\n                        }\r\n                        // console.log(dividerPolynom.tex, '=>', result.reminder.tex)\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        this.factors = factors\r\n        return factors;\r\n    }\r\n\r\n    private _factorize2ndDegree = (letter: string): Polynom[] => {\r\n        let P1: Polynom, P2: Polynom,\r\n            a, b, c, delta, x1, x2, factor;\r\n\r\n        // One variable only\r\n        if (this.numberOfVars === 1) {\r\n            a = this.monomByDegree(2, letter).coefficient;\r\n            b = this.monomByDegree(1, letter).coefficient;\r\n            c = this.monomByDegree(0, letter).coefficient;\r\n            delta = b.clone().pow(2).subtract(a.clone().multiply(c).multiply(4));\r\n\r\n            if (delta.isZero()) {\r\n                x1 = b.clone().opposed().divide(a.clone().multiply(2))\r\n                P1 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                P2 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                factor = a.divide(x1.denominator).divide(x1.denominator);\r\n\r\n                if (!factor.isOne()) {\r\n                    // TODO: Update new Polynom to accept anything...\r\n                    return [new Polynom(factor.display), P1, P2]\r\n                } else {\r\n                    return [P1, P2]\r\n                }\r\n            } else if (delta.isPositive() && delta.isSquare()) {\r\n                x1 = b.clone().opposed()\r\n                    .add(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n                x2 = b.clone().opposed()\r\n                    .subtract(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n\r\n                // (2x+5)(3x-2)\r\n                // 6x^2+11x-10\r\n                // a = 6, b = 11, c = -10\r\n                // delta = 121-4*6*(-10) = 361= 19^2\r\n                // x1 = (-11 + 19)  / 12 = 8/12 = 2/3\r\n                // x2 = (-11 - 19)  / 12 = -30/12 = -5/2\r\n                factor = a.divide(x1.denominator).divide(x2.denominator);\r\n                if (factor.isOne()) {\r\n                    return [\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n                } else {\r\n                    return [\r\n                        new Polynom(factor.display),\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n\r\n                }\r\n            } else {\r\n                // No solution possible - return the complete value.\r\n                return [this.clone()]\r\n            }\r\n        } else {\r\n            // If multiple variables, only handle perfect squares...\r\n            a = this.monomByDegree(2, letter);\r\n            b = this.monomByDegree(1, letter);\r\n            c = this.monomByDegree(0, letter);\r\n\r\n\r\n            if (a.isLiteralSquare() && c.isLiteralSquare()) {\r\n                // Check the middle item is same as...\r\n                if (b.clone().pow(2).isSameAs(a.clone().multiply(c))) {\r\n                    // Determine if the coefficient values matches.\r\n\r\n                    // Search 4 values (r, s, t, u) that matches:\r\n                    // (r X + s Y)(t X + u Y) = rt X^2 + (ru + st) XY + su Y^2\r\n\r\n                    let xPolynom = new Polynom('x', a.coefficient, b.coefficient, c.coefficient);\r\n                    let xFactors = xPolynom._factorize2ndDegree('x');\r\n\r\n                    let factors = [], xyzPolynom: Polynom;\r\n\r\n                    if (xFactors.length >= 2) {\r\n                        for (let p of xFactors) {\r\n                            if (p.degree().isZero()) {\r\n                                factors.push(p.clone())\r\n                            } else {\r\n                                xyzPolynom = p.clone();\r\n                                xyzPolynom.monoms[0].literal = a.literalSqrt\r\n                                xyzPolynom.monoms[1].literal = c.literalSqrt\r\n                                factors.push(xyzPolynom.clone())\r\n                            }\r\n                        }\r\n                        return factors\r\n                    }\r\n                }\r\n            }\r\n\r\n            return [this.clone()]\r\n            //\r\n            // console.log(a.tex, b.tex, c.tex)\r\n            // if (a.isSquare() && c.isSquare()) {\r\n            //     console.log('A C squares')\r\n            //     if (a.clone().sqrt().multiply(c.clone().sqrt()).multiplyByNumber(2).isSameAs(b)) {\r\n            //         console.log('HERE')\r\n            //         if (a.coefficient.sign() === b.coefficient.sign()) {\r\n            //             return []\r\n            //         }else{\r\n            //             return []\r\n            //         }\r\n            //     }\r\n            // } else if(a.isLiteralSquare() && c.isLiteralSquare()) {\r\n            //     console.log('A C litteral SQUARES')\r\n            //     // Check that the middle element is the product of a and c.\r\n            //\r\n            //     if(b.clone().pow(2).isSameAs(a.clone().multiply(c))){\r\n            //         console.log('SAME')\r\n            //\r\n            //     }else{\r\n            //         console.log('NOT SAME')\r\n            //     }\r\n            //\r\n            //     return [this.clone()]\r\n            // } else {\r\n            //     console.log('NOT SQUARES AT ALL !!!!')\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    private _factorizeByGroups = (): Polynom[] => {\r\n        // TODO: Factorize by groups.\r\n        return [];\r\n    }\r\n    // ------------------------------------------\r\n    // Polynoms helpers functions\r\n    // -------------------------------------\r\n    // TODO: get zeroes for more than first degree and for more than natural degrees\r\n    getZeroes = (): (Fraction | boolean)[] => {\r\n        const Z: Fraction[] = [];\r\n\r\n        switch (this.degree().value) {\r\n            case 0:\r\n                if (this._monoms[0].coefficient.value === 0) {\r\n                    return [true];\r\n                } else {\r\n                    return [false];\r\n                }\r\n            case 1:\r\n                // There is only one monoms,\r\n                if (this._monoms.length === 1) {\r\n                    return [new Fraction().zero()];\r\n                } else {\r\n                    const P = this.clone().reduce().reorder();\r\n                    return [P.monoms[1].coefficient.opposed().divide(P.monoms[0].coefficient)];\r\n                }\r\n            // TODO: Determine the zeros of an equation of second degree.\r\n            //case 2:\r\n            default:\r\n                // Make sure the polynom is factorized.\r\n                if (this._factors.length === 0) {\r\n                    this.factorize()\r\n                }\r\n\r\n                let zeroes = [], zeroesAsTex = [];\r\n                for (let P of this._factors) {\r\n                    if (P.degree().greater(2)) {\r\n                        // TODO: Handle other polynom.\r\n\r\n                    } else if (P.degree().value === 2) {\r\n                        let A = P.monomByDegree(2).coefficient,\r\n                            B = P.monomByDegree(1).coefficient,\r\n                            C = P.monomByDegree(0).coefficient,\r\n                            D = B.clone().pow(2).subtract(A.clone().multiply(C).multiply(4));\r\n\r\n                        if (D.value > 0) {\r\n                            /*console.log('Two zeroes for ', P.tex); */\r\n                            let x1 = (-(B.value) + Math.sqrt(D.value)) / (2 * A.value),\r\n                                x2 = (-(B.value) - Math.sqrt(D.value)) / (2 * A.value);\r\n\r\n                            zeroes.push(new Fraction(x1.toFixed(3)).reduce());\r\n                            zeroes.push(new Fraction(x2.toFixed(3)).reduce());\r\n                        } else if (D.value === 0) {\r\n                            /*console.log('One zero for ', P.tex); */\r\n\r\n                        } else {\r\n                            console.log('No zero for ', P.tex);\r\n                        }\r\n                    } else {\r\n                        for (let z of P.getZeroes()) {\r\n                            // Check if the zero is already in the list.\r\n                            if (z === false || z === true) {\r\n                                continue;\r\n                            }\r\n                            if (zeroesAsTex.indexOf(z.frac) === -1) {\r\n                                zeroes.push(z);\r\n                                zeroesAsTex.push(z.frac);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return zeroes;\r\n        }\r\n        return Z;\r\n    };\r\n\r\n\r\n    // TODO: analyse the next functions to determine if they are useful or not...\r\n    monomByDegree = (degree?: Fraction|number, letter?: string): Monom => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomByDegree(this.degree(letter), letter);\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter) === degree) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        // Nothing was found - return the null monom.\r\n        return new Monom().zero();\r\n    };\r\n\r\n    monomsByDegree = (degree?: number|Fraction, letter?: string): Monom[] => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomsByDegree(this.degree(letter));\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        let Ms: Monom[] = [];\r\n\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter) === degree) {\r\n                Ms.push(m.clone())\r\n            }\r\n        }\r\n\r\n        return Ms\r\n        // Nothing was found - retur\r\n    }\r\n\r\n    // Used in LinearSystem.tex\r\n    monomByLetter = (letter: string): Monom => {\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.hasLetter(letter)) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        return new Monom().zero();\r\n    };\r\n\r\n\r\n    // Next functions are used for for commonMonom, which is used in the factorize method.\r\n    getDenominators = (): number[] => {\r\n        const denominators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            denominators.push(m.coefficient.denominator);\r\n        }\r\n        return denominators;\r\n    };\r\n\r\n    getNumerators = (): number[] => {\r\n        const numerators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            numerators.push(m.coefficient.numerator);\r\n        }\r\n        return numerators;\r\n    };\r\n\r\n    lcmDenominator = (): number => {\r\n        return Numeric.lcm(...this.getDenominators());\r\n    };\r\n\r\n    gcdDenominator = (): number => {\r\n        return Numeric.gcd(...this.getDenominators());\r\n    };\r\n\r\n    lcmNumerator = (): number => {\r\n        return Numeric.lcm(...this.getNumerators());\r\n    };\r\n\r\n    gcdNumerator = (): number => {\r\n        return Numeric.gcd(...this.getNumerators());\r\n    };\r\n\r\n    commonMonom = (): Monom => {\r\n        let M = new Monom().one(), numerator: number, denominator: number, degree = this.degree();\r\n\r\n        numerator = this.gcdNumerator();\r\n        denominator = this.gcdDenominator();\r\n\r\n        M.coefficient = new Fraction(numerator, denominator);\r\n        for (let L of this.variables) {\r\n            // Initialize the setLetter with the max degree\r\n            M.setLetter(L, degree);\r\n            for (let m of this._monoms) {\r\n                M.setLetter(L, Fraction.min(m.degree(L), M.degree(L)));\r\n                if (M.degree(L).isZero()) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return M;\r\n    }\r\n}\r\n","/**\r\n * Rational polynom module contains everything necessary to handle rational polynoms.\r\n * @module Polynom\r\n */\r\n\r\nimport {Polynom} from \"./polynom\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\n/**\r\n * Rational class can handle rational polynoms\r\n */\r\n    export class Rational {\r\n        private _rawString: string;\r\n        private _numerator: Polynom;\r\n        private _denominator: Polynom;\r\n\r\n        /**\r\n         *\r\n         * @param numerator\r\n         * @param denominator\r\n         */\r\n        constructor(numerator?: Polynom, denominator?: Polynom) {\r\n            this._numerator = numerator ? numerator.clone() : new Polynom();\r\n            this._denominator = denominator ? denominator.clone() : new Polynom();\r\n        }\r\n\r\n        clone = (): Rational => {\r\n            this._numerator = this._numerator.clone()\r\n            this._denominator = this._denominator.clone()\r\n\r\n            return this;\r\n        }\r\n\r\n        get tex(): string {\r\n            return `\\\\dfrac{ ${this._numerator.tex} }{ ${this._denominator.tex} }`;\r\n        }\r\n\r\n        get texFactors(): string {\r\n            this._numerator.factorize()\r\n            this._denominator.factorize()\r\n\r\n            return `\\\\dfrac{ ${this._numerator.texFactors} }{ ${this._denominator.texFactors} }`\r\n        }\r\n\r\n        get numerator(): Polynom {\r\n            return this._numerator\r\n        }\r\n\r\n        get denominator(): Polynom {\r\n            return this._denominator\r\n        }\r\n\r\n        domain = (): string => {\r\n            let zeroes = this._denominator.getZeroes();\r\n            if (zeroes.length === 0 || zeroes[0] === false) {\r\n                return '\\\\mathbb{R}'\r\n            } else if (zeroes[0] === true) {\r\n                return '\\\\varnothing'\r\n            } else {\r\n                return '\\\\mathbb{R}\\\\setminus\\\\left{' +\r\n                    zeroes.map(x => {\r\n                        return (typeof x === 'boolean') ? '' : x.frac\r\n                    })\r\n                        .join(';') + '\\\\right}'\r\n            }\r\n        }\r\n\r\n        amplify = (P: Polynom): Rational => {\r\n            this._numerator.multiply(P);\r\n            this._denominator.multiply(P);\r\n\r\n            return this;\r\n        }\r\n\r\n        simplify = (P: Polynom): Rational => {\r\n            let NumeratorEuclidien = this._numerator.euclidian(P);\r\n            if (!NumeratorEuclidien.reminder.isZero()) {\r\n                return this;\r\n            }\r\n\r\n            let DenominatorEuclidien = this._denominator.euclidian(P);\r\n            if (!DenominatorEuclidien.reminder.isZero()) {\r\n                return this;\r\n            }\r\n\r\n            this._numerator = NumeratorEuclidien.quotient;\r\n            this._denominator = DenominatorEuclidien.quotient;\r\n            return this;\r\n        }\r\n\r\n        reduce = (): Rational => {\r\n            console.log(this._numerator.tex)\r\n            this._numerator.factorize();\r\n            console.log(this._numerator.factors.map(x => x.tex))\r\n            for (let f of this._numerator.factors) {\r\n                this.simplify(f);\r\n            }\r\n\r\n            return this;\r\n        }\r\n\r\n        opposed = (): Rational => {\r\n            this._numerator.opposed();\r\n            return this;\r\n        }\r\n        add = (R: Rational): Rational => {\r\n            // 1. Make sure both rational are at the same denominator\r\n            // 2. Add the numerators.\r\n            // 3. Simplify\r\n\r\n            // Store the adding denominator\r\n            let denominator = this._denominator.clone()\r\n\r\n            // Amplif the main rational polynom by the adding denominator\r\n            this.amplify(R._denominator)\r\n\r\n            // Add to the numerator the adding value...\r\n            this._numerator.add(R._numerator.clone().multiply(denominator));\r\n\r\n            return this;\r\n        }\r\n\r\n        subtract = (R: Rational): Rational => {\r\n            return this.add(R.clone().opposed())\r\n        }\r\n\r\n        limits = (value: Fraction | number, letter?: string): Fraction | number => {\r\n            if (value === Infinity || value === -Infinity) {\r\n                let N = this._numerator.monomByDegree(this._numerator.degree(letter), letter),\r\n                    D = this._denominator.monomByDegree(this._denominator.degree(letter), letter)\r\n\r\n                N.divide(D)\r\n\r\n                if (N.degree(letter).isStrictlyPositive()) {\r\n                    return N.coefficient.sign() * (Math.pow((value > 0 ? 1 : -1), N.degree(letter).value % 2)) === 1 ? Infinity : -Infinity\r\n                }\r\n                if (N.degree(letter).isZero()) {\r\n                    return N.coefficient\r\n                }\r\n                if (N.degree(letter).isStrictlyPositive()) {\r\n                    return N.coefficient.sign() * (Math.pow(-1, N.degree(letter).value % 2)) === 1 ? 0 : -0\r\n                }\r\n            } else {\r\n                return this._numerator.evaluate({letter: new Fraction(value)}).divide(this._denominator.evaluate({letter: new Fraction(value)}))\r\n            }\r\n        }\r\n    }\r\n","import {Numeric} from \"../numeric\";\r\nimport {Random} from \"../random\";\r\n\r\nexport class Fraction {\r\n    private _numerator: number;\r\n    private _denominator: number;\r\n\r\n    constructor(value?: any, denominatorOrPeriodic?: number) {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n\r\n        if (value !== undefined) {\r\n            this.parse(value, denominatorOrPeriodic);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isFraction() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n\r\n    get numerator(): number {\r\n        return this._numerator;\r\n    }\r\n\r\n    set numerator(value: number) {\r\n        this._numerator = value;\r\n    }\r\n\r\n    get denominator(): number {\r\n        return this._denominator;\r\n    }\r\n\r\n    set denominator(value: number) {\r\n        this._denominator = value;\r\n    }\r\n\r\n    get value(): number {\r\n        return this._numerator / this._denominator;\r\n    }\r\n\r\n    // Display getter\r\n    get tex(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else if (this._numerator < 0) {\r\n            return `-\\\\frac{ ${-this._numerator} }{ ${this._denominator} }`;\r\n        } else {\r\n            return `\\\\frac{ ${this._numerator} }{ ${this._denominator} }`;\r\n        }\r\n    }\r\n\r\n    get display(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else {\r\n            return `${this._numerator}/${this._denominator}`;\r\n        }\r\n    }\r\n\r\n    // Helper function to display fractions\r\n    get frac(): string {\r\n        return this.tex;\r\n    }\r\n\r\n    get dfrac(): string {\r\n        return this.tex.replace('\\\\frac', '\\\\dfrac');\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse the value to get the numerator and denominator\r\n     * @param value : number or string to parse to get the fraction\r\n     * @param denominatorOrPeriodic (optional|number) : length of the periodic part: 2.333333 => 1 or denominator value\r\n     */\r\n    parse = (value: any, denominatorOrPeriodic?: number): Fraction => {\r\n        let S: string[];\r\n\r\n        // A null value means a zero fraction.\r\n        if (value === null || value === \"\") {\r\n            this._numerator = 0;\r\n            this._denominator = 1;\r\n            return this;\r\n        }\r\n\r\n        switch (typeof value) {\r\n            case \"string\":\r\n                // Split the sting value in two parts: Numerator/Denominator\r\n                S = value.split('/');\r\n\r\n                // Security checks\r\n                if (S.length > 2) throw \"Two many divide signs\";\r\n                if (S.map(x => x === '' || isNaN(Number(x))).includes(true)) throw \"Not a number\"\r\n\r\n\r\n                if (S.length === 1) {\r\n                    // No divide sign\r\n                    return this.parse(+S[0]);\r\n                } else if (S.length === 2) {\r\n                    // One divide signe\r\n                    // We check if the denominator is zero\r\n                    if (S[1] === '0') {\r\n                        this._numerator = NaN;\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._numerator = +S[0];\r\n                        this._denominator = +S[1];\r\n                    }\r\n                } else {\r\n                    // More than one divide sign ?\r\n                    this._numerator = NaN;\r\n                    this._denominator = 1;\r\n                }\r\n                break;\r\n            case \"number\":\r\n                if (Number.isSafeInteger(value)) {\r\n                    // The given value is an integer\r\n                    this._numerator = +value;\r\n\r\n                    if (denominatorOrPeriodic === undefined || !Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._denominator = +denominatorOrPeriodic;\r\n                    }\r\n                } else {\r\n                    // The given value is a float number\r\n\r\n                    // Get the number of decimals after the float sign\r\n                    let p: number = (value.toString()).split('.')[1].length;\r\n\r\n                    // Transform the float number in two integer\r\n                    if (denominatorOrPeriodic === undefined) {\r\n                        this._numerator = value * Math.pow(10, p);\r\n                        this._denominator = Math.pow(10, p);\r\n                    } else if (Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._numerator = value * Math.pow(10, p) - Math.floor(value * Math.pow(10, p - denominatorOrPeriodic));\r\n                        this.denominator = Math.pow(10, p) - Math.pow(10, p - denominatorOrPeriodic)\r\n                    }\r\n                }\r\n                break;\r\n            case \"object\":\r\n                if (value.isFraction) {\r\n                    this._numerator = +value.numerator;\r\n                    this._denominator = +value.denominator;\r\n                }\r\n                break;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): Fraction => {\r\n        let F = new Fraction();\r\n        F.numerator = +this._numerator;\r\n        F.denominator = +this._denominator;\r\n        return F;\r\n    };\r\n\r\n    zero = (): Fraction => {\r\n        this._numerator = 0;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    one = (): Fraction => {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    infinite = (): Fraction => {\r\n        this._numerator = Infinity;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    invalid = (): Fraction => {\r\n        this._numerator = NaN;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Fraction => {\r\n        this._numerator = -this._numerator;\r\n        return this;\r\n    };\r\n\r\n    add = (F: Fraction | number): Fraction => {\r\n        if (F instanceof Fraction) {\r\n            let N: number = this._numerator,\r\n                D: number = this._denominator;\r\n\r\n            this._numerator = N * F.denominator + F.numerator * D;\r\n            this._denominator = D * F.denominator;\r\n        }else{\r\n            return this.add(new Fraction(F))\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (F: Fraction | number): Fraction => {\r\n        if (F instanceof Fraction) {\r\n            return this.add(F.clone().opposed());\r\n        } else {\r\n            return this.add(-F)\r\n        }\r\n    };\r\n\r\n    multiply = (F: Fraction | number): Fraction => {\r\n        // Parse the value.\r\n        // If it's a fraction, return a clone of it\r\n        // If it's an integer, return the fraction F/1\r\n        let Q = new Fraction(F);\r\n\r\n        this._numerator = this._numerator * Q.numerator;\r\n        this._denominator = this._denominator * Q.denominator;\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    divide = (F: Fraction | number): Fraction => {\r\n        let Q = new Fraction(F);\r\n\r\n        if (Q.numerator === 0) {\r\n            return new Fraction().infinite();\r\n        }\r\n\r\n        let N: number = +this._numerator,\r\n            D: number = +this._denominator;\r\n\r\n        this._numerator = N * Q.denominator;\r\n        this._denominator = D * Q.numerator;\r\n        return this.reduce();\r\n    };\r\n\r\n    invert = (): Fraction => {\r\n        let n = +this._numerator, d = +this._denominator;\r\n        this._numerator = d;\r\n        this._denominator = n;\r\n\r\n        return this;\r\n    }\r\n    pow = (p: number | Fraction): Fraction => {\r\n        // TODO: Fraction.pow with a value different than a safe integer ?\r\n        if (p instanceof Fraction) {\r\n            return this.pow(p.value)\r\n        }\r\n\r\n        if (!Number.isSafeInteger(p)) {\r\n            return this.invalid();\r\n        }\r\n\r\n        this.reduce();\r\n\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        this._numerator = this._numerator ** Math.abs(p);\r\n        this._denominator = this._denominator ** Math.abs(p);\r\n        return this;\r\n    };\r\n\r\n    root = (p: number): Fraction => {\r\n        // TODO: nth - root of a fraction => this will return another type of coefficient.\r\n\r\n        // Check if they are perfect roots..\r\n        if (p === 0) {\r\n            return this;\r\n        }\r\n\r\n        // If negative, invert the fraction\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        let n = Math.pow(this._numerator, Math.abs(1 / p)),\r\n            d = Math.pow(this._denominator, Math.abs(1 / p));\r\n\r\n        this._numerator = Math.pow(this._numerator, Math.abs(1 / p));\r\n        this._denominator = Math.pow(this._denominator, Math.abs(1 / p));\r\n        return this;\r\n    }\r\n\r\n    sqrt = (): Fraction => {\r\n        return this.root(2);\r\n    }\r\n\r\n    abs = (): Fraction => {\r\n        this._numerator = Math.abs(this._numerator);\r\n        this._denominator = Math.abs(this._denominator);\r\n        return this;\r\n    };\r\n\r\n\r\n    static max = (...fractions: (Fraction|number)[]): Fraction => {\r\n        let M = new Fraction(fractions[0])\r\n\r\n        for (let m of fractions) {\r\n            let compare = new Fraction(m)\r\n            if (compare.greater(M)) {\r\n                M = compare.clone()\r\n            }\r\n        }\r\n\r\n        return M\r\n    }\r\n    static min = (...fractions: (Fraction|number)[]): Fraction => {\r\n        let M = new Fraction(fractions[0])\r\n\r\n        for (let m of fractions) {\r\n            let compare = new Fraction(m)\r\n            if (compare.lesser(M)) {\r\n                M = compare.clone()\r\n            }\r\n        }\r\n\r\n        return M\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations specific to fractions\r\n    // ------------------------------------------\r\n    reduce = (): Fraction => {\r\n        let g = Numeric.gcd(this._numerator, this._denominator);\r\n        this._numerator = this._numerator / g;\r\n        this._denominator = this._denominator / g;\r\n\r\n        if (this._denominator < 0) {\r\n            this._denominator = -this._denominator;\r\n            this._numerator = -this._numerator;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    amplify = (k: number): Fraction => {\r\n        if (Number.isSafeInteger(k)) {\r\n            this._numerator *= k;\r\n            this._denominator *= k;\r\n        }\r\n        return this;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param F (Coefficient) The coefficient to compare\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (F: unknown, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n        let compareFraction: Fraction\r\n        if (F instanceof Fraction) {\r\n            compareFraction = F.clone()\r\n        } else {\r\n            compareFraction = new Fraction(F)\r\n        }\r\n\r\n        switch (sign) {\r\n            case '>':\r\n                return this.value > compareFraction.value;\r\n            case \">=\" || \"=>\" || \"geq\":\r\n                return this.value >= compareFraction.value;\r\n            case \"<\":\r\n                return this.value < compareFraction.value;\r\n            case \"<=\" || \"=>\" || \"leq\":\r\n                return this.value <= compareFraction.value;\r\n            case \"=\":\r\n                // let F2: Fraction = compareFraction.clone().reduce(),\r\n                //     F1: Fraction = this.clone().reduce();\r\n                // return (F1.numerator === F2.numerator && F1.denominator === F2.denominator);\r\n                return this.value === compareFraction.value;\r\n            case \"<>\":\r\n                return this.value !== compareFraction.value;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n    /* Compare shortcuts */\r\n    lesser = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '<');\r\n    };\r\n    leq = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '<=');\r\n    };\r\n    greater = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '>');\r\n    };\r\n    geq = (than: Fraction | number): Boolean => {\r\n        return this.compare(than, '>=');\r\n    };\r\n    isEqual = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '=');\r\n    }\r\n    isNotEqual = (than: Fraction | number): boolean => {\r\n        return this.compare(than, '<>');\r\n    }\r\n    isOpposed = (p: Fraction): boolean => {\r\n        return this.isEqual(p.clone().opposed());\r\n    }\r\n    isInverted = (p: Fraction): boolean => {\r\n        return this.isEqual(new Fraction().one().divide(p.clone()));\r\n    }\r\n    isZero = (): boolean => {\r\n        return this._numerator === 0;\r\n    }\r\n    isNotZero = (): boolean => {\r\n        return this._numerator !== 0;\r\n    }\r\n    isOne = (): boolean => {\r\n        return this._numerator === 1 && this._denominator === 1;\r\n    }\r\n    isNegativeOne = (): boolean => {\r\n        return this._numerator === -1 && this._denominator === 1;\r\n    }\r\n    isPositive = (): boolean => {\r\n        return this.sign() === 1;\r\n    }\r\n    isNegative = (): boolean => {\r\n        return this.sign() === -1;\r\n    }\r\n    isStrictlyPositive = (): boolean => {\r\n        return this.value > 0\r\n    }\r\n    isStrictlyNegative = (): Boolean => {\r\n        return this.value < 0\r\n    }\r\n    isNaN = (): boolean => {\r\n        return isNaN(this._numerator);\r\n    }\r\n    isInfinity = (): boolean => {\r\n        return this._numerator === Infinity;\r\n    }\r\n    isFinite = (): boolean => {\r\n        return !this.isInfinity();\r\n    }\r\n    isSquare = (): boolean => {\r\n        return Math.sqrt(this._numerator) % 1 === 0 && Math.sqrt(this._denominator) % 1 === 0\r\n    }\r\n    isReduced = (): boolean => {\r\n        return Math.abs(Numeric.gcd(this._numerator, this._denominator)) === 1\r\n    }\r\n    isNatural = (): boolean => {\r\n        return this.clone().reduce().denominator === 1\r\n    }\r\n    isRational = (): boolean => {\r\n        return !this.isNatural()\r\n    }\r\n    isEven = (): boolean => {\r\n        return this.isNatural() && this.value % 2 === 0\r\n    }\r\n    isOdd = (): boolean => {\r\n        return this.isNatural() && this.value % 2 === 1\r\n    }\r\n    sign = (): number => {\r\n        return (this._numerator * this._denominator >= 0) ? 1 : -1;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Simple function to determine if it's a fraction\r\n     */\r\n    areEquals = (...F: Fraction[]): boolean => {\r\n        for (let i = 0; i < F.length; i++) {\r\n            if (!this.isEqual(F[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n}","export * from \"./fraction\"\r\nexport * from \"./nthroot\"","export class Nthroot {\r\n    private _radical: number;\r\n    private _nth: number;\r\n    private _coefficient: number;\r\n    private _isValid:boolean;\r\n\r\n    constructor() {\r\n        this._radical = 1;\r\n        this._coefficient = 1;\r\n        this._nth = 2;\r\n        this._isValid = true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get radical(): number {\r\n        return this._radical;\r\n    }\r\n\r\n    set radical(value: number) {\r\n        this._radical = value;\r\n    }\r\n\r\n    get nth(): number {\r\n        return this._nth;\r\n    }\r\n\r\n    set nth(value: number) {\r\n        if (Number.isSafeInteger(value) && value >= 2) {\r\n            this._nth = value;\r\n        } else {\r\n            // Error setting the nth root.\r\n            console.log('Error setting the nth root');\r\n            this._nth = 2;\r\n        }\r\n    }\r\n\r\n    get coefficient(): number {\r\n        return this._coefficient;\r\n    }\r\n\r\n    set coefficient(value: number) {\r\n        this._coefficient = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let C: string;\r\n\r\n        if (this._coefficient === 1) {\r\n            C = '';\r\n        } else if (this._coefficient === -1) {\r\n            C = '-';\r\n        } else {\r\n            C = this._coefficient.toString();\r\n        }\r\n\r\n        if (this._radical === 1) {\r\n            return `${this._coefficient}`;\r\n        } else {\r\n            if (this._nth === 2) {\r\n                return `${C}\\\\sqrt{${this._radical}}`\r\n            } else {\r\n                return `${C}\\\\sqrt[${this._nth}]{${this._radical}}`\r\n            }\r\n        }\r\n    }\r\n\r\n    get value(): number {\r\n        return this._coefficient * Math.pow(this._radical, 1 / this._nth);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (radical: number, nthroot?: number, coefficient?: number): Nthroot => {\r\n        this._coefficient = (coefficient === undefined) ? 1 : coefficient;\r\n        this._nth = (nthroot === undefined) ? 2 : nthroot;\r\n        this._radical = (radical === undefined) ? 1 : radical;\r\n\r\n        if(this._nth%2===0 && this._radical<0){\r\n            this._isValid = false;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    reduce = (): Nthroot => {\r\n        // Max value to test.\r\n        let V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n        while (V > 1) {\r\n            if (this._radical % Math.pow(V, this._nth) === 0) {\r\n                // It's dividable by V^n\r\n                this._coefficient *= V;\r\n                this._radical = this._radical / Math.pow(V, this._nth);\r\n\r\n                // Redifine the new testing value (this is optimization)\r\n                V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n                continue;\r\n            }\r\n            V--;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiply = (N: Nthroot): Nthroot => {\r\n        this._radical *= N.radical;\r\n        return this.reduce();\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Help functions\r\n    // ------------------------------------------\r\n    hasRadical = ():boolean => {\r\n        return !(this._radical===1 || this._radical===0 || this._isValid===false)\r\n    };\r\n}","import {Point} from \"./point\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Equation} from \"../algebra/equation\";\r\nimport {Polynom} from \"../algebra/polynom\";\r\n\r\n\r\nexport class Circle {\r\n    private _center: Point;\r\n    private _radius: Fraction;\r\n    private _exists: boolean;\r\n    constructor(...values: any) {\r\n        this._exists = false\r\n\r\n        if(values!==undefined){this.parse(...values)}\r\n    }\r\n\r\n    private parse(...values: any) {\r\n        if(values.length===2){\r\n            this._center = new Point(values[0])\r\n            this._radius = new Fraction(values[1])\r\n        }\r\n    }\r\n\r\n    get tex(): string {\r\n        let cx, cy\r\n        if(this._center.x.isZero()){\r\n            cx = 'x^2'\r\n        }else{\r\n            cx = `\\\\left(x-${this._center.x.tex}\\\\right)^2`\r\n        }\r\n        if(this._center.y.isZero()){\r\n            cy = 'y^2'\r\n        }else{\r\n            cy = `\\\\left(y-${this._center.y.tex}\\\\right)^2`\r\n        }\r\n        return `${cx}+${cy}=${this._radius.pow(2).tex}`\r\n    }\r\n\r\n    get developed():string {\r\n        let equ = new Equation(\r\n            new Polynom(`(x-(${this._center.x.display}))^2+(y-(${this._center.y.display}))^2`),\r\n            new Polynom(`${this._radius.pow(2).display}`)\r\n        )\r\n\r\n        return equ.moveLeft().tex;\r\n    }\r\n}","export * from \"./vector\"\r\nexport * from \"./triangle\"\r\nexport * from \"./point\"\r\nexport * from \"./circle\"\r\nexport * from \"./line\"\r\n","/**\r\n * This class works for 2d line in a plane.\r\n */\r\n\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Vector} from \"./vector\";\r\nimport {Point} from \"./point\";\r\nimport {Polynom} from \"../algebra/polynom\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Equation} from \"../algebra/equation\";\r\n\r\nexport class Line {\r\n    // A line is defined as the canonical form\r\n    // ax + by + c = 0\r\n    private _a: Fraction;\r\n    private _b: Fraction;\r\n    private _c: Fraction;\r\n    private _OA: Point;\r\n    private _d: Vector;\r\n    private _n: Vector;\r\n    private _exists: boolean\r\n\r\n    constructor(...values: any) {\r\n\r\n        this._exists = false;\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isLine():boolean {return true;}\r\n    get exists(): boolean {return this._exists; }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equation(): Equation {\r\n        return new Equation(new Polynom().parse('xy', this._a, this._b, this._c), new Polynom('0')).simplify();\r\n    }\r\n    get tex(): { canonical: string, mxh: string, parametric: string } {\r\n        // canonical    =>  ax + by + c = 0\r\n        // mxh          =>  y = -a/b x - c/b\r\n        // parametric   =>  (xy) = OA + k*d\r\n\r\n        let canonical = this.equation;\r\n        // Make sur the first item is positive.\r\n        if(this._a.isNegative()){\r\n            canonical.multiply(-1);\r\n        }\r\n\r\n        return {\r\n            canonical: canonical.tex,\r\n            mxh: this.slope.isInfinity() ? 'x=' + this.OA.x.tex : 'y=' + new Polynom().parse('x', this.slope, this.height).tex,\r\n            parametric: `${Point.pmatrix('x', 'y')} = ${Point.pmatrix(this._OA.x, this._OA.y)} + k\\\\cdot ${Point.pmatrix(this._d.x, this._d.y)}`\r\n        }\r\n    }\r\n\r\n    get a(): Fraction {\r\n        return this._a;\r\n    }\r\n\r\n    set a(value: Fraction) {\r\n        this._a = value;\r\n    }\r\n\r\n    get b(): Fraction {\r\n        return this._b;\r\n    }\r\n\r\n    set b(value: Fraction) {\r\n        this._b = value;\r\n    }\r\n\r\n    get c(): Fraction {\r\n        return this._c;\r\n    }\r\n\r\n    set c(value: Fraction) {\r\n        this._c = value;\r\n    }\r\n\r\n    get OA(): Point {\r\n        return this._OA;\r\n    }\r\n\r\n    set OA(value: Point) {\r\n        this._OA = value;\r\n    }\r\n\r\n    get d(): Vector {\r\n        return this._d;\r\n    }\r\n\r\n    get n(): Vector {\r\n        return this._n;\r\n    }\r\n\r\n    get normal(): Vector {\r\n        return new Vector(this._a, this._b);\r\n    }\r\n\r\n    set d(value: Vector) {\r\n        this._d = value;\r\n    }\r\n\r\n    get slope(): Fraction {\r\n        return this._a.clone().opposed().divide(this._b);\r\n    }\r\n\r\n    get height(): Fraction {\r\n        return this._c.clone().opposed().divide(this._b);\r\n    }\r\n\r\n// ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...values: any): Line => {\r\n        this._exists = false;\r\n\r\n        if (values.length === 3) {\r\n            return this.parseByCoefficient(values[0], values[1], values[2]);\r\n        } else if (values.length === 2) {\r\n            if (values[0].isPoint && values[1].isVector) {\r\n                return this.parseByPointAndVector(values[0], values[1]);\r\n            } else if (values[0].isPoint && values[1].isPoint) {\r\n                return this.parseByPointAndVector(values[0], new Vector(values[0], values[1]));\r\n            }\r\n        } else if (values.length === 1){\r\n            // It's a already a line - clone it !\r\n            if(values[0].isLine){\r\n                return values[0].clone();\r\n            }\r\n\r\n            // Maybe it's a string or an equation\r\n            let equ = new Equation(values[0]);\r\n            if(equ.isEquation){\r\n                // Check if it's a valid equation.\r\n                equ.reorder(true)\r\n\r\n                // It must contain either x, y or both.\r\n                let letters = new Set(equ.letters());\r\n\r\n                // No 'x', no 'y' in the equations\r\n                if(!(letters.has('x') || letters.has('y'))){return;}\r\n\r\n                // Another letter in the equation.\r\n                for(let elem of ['x', 'y']){\r\n                    if(letters.has(elem)){\r\n                        letters.delete(elem)}\r\n                }\r\n\r\n                if(letters.size>0){\r\n                    console.log('Extra variable in the equation.')\r\n                    return this;\r\n                }\r\n\r\n                // Everything should be ok now...\r\n                return this.parseByCoefficient(equ.left.monomByLetter('x').coefficient, equ.left.monomByLetter('y').coefficient, equ.left.monomByDegree(0).coefficient)\r\n            }\r\n        }\r\n        // TODO: Add the ability to create line from a normal vector\r\n        console.log('Someting wrong happend while creating the line')\r\n        return this;\r\n    }\r\n\r\n    parseByCoefficient = (a: Fraction, b: Fraction, c: Fraction): Line => {\r\n        this._a = new Fraction(a);\r\n        this._b = new Fraction(b);\r\n        this._c = new Fraction(c);\r\n\r\n        // TODO: initialize direction and reference point\r\n        this._d = new Vector(this._b.clone(), this._a.clone().opposed());\r\n        this._OA = new Point(new Fraction().zero(), this._c.clone());\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    parseByPointAndVector = (P: Point, d: Vector): Line => {\r\n        // OX = OP + k*d\r\n        // x = px + kdx     * dy\r\n        // y = py + kdy     * dx\r\n        // ------------------\r\n        // dy * x = px * dy + kdxdy\r\n        // dx * y = py * dx + kdxdy\r\n        // ------------------\r\n        // dy * x - dx * y = px * dy - py * dx\r\n        // dy * x - dx * y - (px * dy - py * dx) = 0\r\n        this.parseByCoefficient(\r\n            d.y,\r\n            d.x.clone().opposed(),\r\n            P.x.clone().multiply(d.y).subtract(P.y.clone().multiply(d.x)).opposed()\r\n        )\r\n\r\n        // Choose the current values as point and direction vector instead of the automatic version.\r\n        this._OA = P.clone();\r\n        this._d = d.clone();\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    clone = (): Line => {\r\n        this._a = this._a.clone();\r\n        this._b = this._b.clone();\r\n        this._c = this._c.clone();\r\n\r\n        this._d = this._d.clone();\r\n        this._OA = this._OA.clone();\r\n        this._n = this._n.clone();\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    isParellelTo = (line: Line): Boolean => {\r\n        // Do they have the isSame direction ?\r\n        return this.slope.isEqual(line.slope) && this.height.isNotEqual(line.height);\r\n    }\r\n    isSameAs = (line: Line): Boolean => {\r\n        return this.slope.isEqual(line.slope) && this.height.isEqual(line.height);\r\n    }\r\n    simplifyDirection = (): Line => {\r\n        let lcm = Numeric.lcm(this._d.x.denominator, this._d.y.denominator),\r\n            gcd = Numeric.gcd(this._d.x.numerator, this._d.y.numerator);\r\n\r\n        this._d.x.multiply(lcm).divide(gcd);\r\n        this._d.y.multiply(lcm).divide(gcd);\r\n        return this;\r\n    }\r\n    intersection = (line: Line): { point: Point, hasIntersection: boolean, isParallel: boolean, isSame: boolean } => {\r\n        let Pt = new Point(), isParallel = false, isSame = false, hasIntersection = true;\r\n\r\n        // this         => ax+by+c = 0\r\n        // line         => dx+ey+f = 0\r\n        //\r\n        //  aex + bey + ce = 0\r\n        //  dbx + bey + bf = 0\r\n        // (ae-db)x + ce-bf = 0\r\n        //\r\n        //  adx + bdy + cd = 0\r\n        //  adx + aey + af = 0\r\n        // (bd-ae)y + (cd-af)\r\n        //\r\n        // x = (bf-ce)/(ae-db)\r\n        // y = (af-cd)/(bd-ae)\r\n\r\n\r\n        // Theres is no 'y'\r\n        if (this._b.isZero() || line.b.isZero()) {\r\n            // TODO : handle no y in the line canonical form\r\n        }\r\n\r\n        if (this.isParellelTo(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isParallel = true;\r\n        } else if (this.isSameAs(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isSame = true;\r\n        } else {\r\n            Pt.x = this._b.clone().multiply(line.c).subtract(this._c.clone().multiply(line.b))\r\n                .divide(this._a.clone().multiply(line.b).subtract(this._b.clone().multiply(line.a)));\r\n            Pt.y = this._a.clone().multiply(line.c).subtract(this._c.clone().multiply(line.a))\r\n                .divide(this._b.clone().multiply(line.a).subtract(this._a.clone().multiply(line.b)));\r\n        }\r\n\r\n        return {\r\n            point: Pt,\r\n            hasIntersection: !(isParallel || isSame),\r\n            isParallel,\r\n            isSame\r\n        };\r\n    }\r\n\r\n    distanceTo(pt: Point): { value: number, fraction: Fraction, tex: string } {\r\n        let numerator = pt.x.clone().multiply(this._a)\r\n                .add(pt.y.clone().multiply(this._b))\r\n                .add(this._c).abs(),\r\n            d2 = this.normal.normSquare;\r\n\r\n        // The denominator is null - shouldn't be possible\r\n        if (d2.isZero()) {\r\n            return {\r\n                value: NaN,\r\n                tex: 'Not a line',\r\n                fraction: new Fraction().infinite()\r\n            }\r\n        }\r\n        // The denominator is a perfect square - simplify the tex result\r\n        let value = numerator.value / Math.sqrt(d2.value),\r\n            F = numerator.clone().divide(d2.clone().sqrt());\r\n\r\n        // The denominator is a perfect square.\r\n        if (d2.isSquare()) {\r\n            return {\r\n                value,\r\n                tex: F.tex,\r\n                fraction: F\r\n            }\r\n        }\r\n        // Complete answer...\r\n        return {\r\n            value,\r\n            tex: `\\\\frac{${numerator.tex}}{\\\\sqrt{${d2.tex}}}`,\r\n            fraction: F\r\n        };\r\n    }\r\n\r\n    hitSegment(A: Point, B: Point): boolean {\r\n        let iPt = this.intersection(\r\n            new Line(A, B)\r\n        )\r\n\r\n        // There is an intersection point\r\n        if(iPt.hasIntersection) {\r\n            return iPt.point.x.value >= Math.min(A.x.value, B.x.value)\r\n                && iPt.point.x.value <= Math.max(A.x.value, B.x.value)\r\n                && iPt.point.y.value >= Math.min(A.y.value, B.y.value)\r\n                && iPt.point.y.value <= Math.max(A.y.value, B.y.value)\r\n        }\r\n        return false;\r\n    }\r\n    // ------------------------------------------\r\n    // Special functions\r\n    // ------------------------------------------\r\n    canonicalAsFloatCoefficient(decimals: number): string{\r\n        if(decimals===undefined){\r\n            decimals = 2;\r\n        }\r\n\r\n        let ca = this._a.value,\r\n            cb = this._b.value,\r\n            cc= this._c.value,\r\n            canonical = '';\r\n\r\n        if(!this._a.isZero()){\r\n            if(this._a.isOne()){\r\n                canonical = 'x'\r\n            }else if(this._a.clone().opposed().isOne()){\r\n                canonical = '-x'\r\n            }else{\r\n                canonical = this._a.value.toFixed(decimals)+'x'\r\n            }\r\n        }\r\n\r\n        if(!this._b.isZero()){\r\n            if(this._b.isPositive()){canonical+='+'}\r\n            canonical += this._b.value.toFixed(decimals) + 'y'\r\n        }\r\n\r\n        if(!this._c.isZero()){\r\n            if(this._c.isPositive()){canonical+='+'}\r\n            canonical += this._c.value.toFixed(decimals)\r\n        }\r\n\r\n\r\n        return canonical + '=0';\r\n    }\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\n//TODO: Ajouter une vérification si la droite existe.\r\nexport class Point {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n    private _exist: Boolean;\r\n\r\n    constructor(...values: any) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this\r\n    };\r\n\r\n    get isPoint() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.tex);\r\n        pts.push(this._y.tex);\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Point => {\r\n        // Initialize the value.\r\n        this.zero();\r\n\r\n        // Nothing is given\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        // One element is given - might be already a point !\r\n        if (values.length === 1) {\r\n            // it's already a point - clone it\r\n            if (values[0] instanceof Point) {\r\n                this._x = values[0].x.clone()\r\n                this._y = values[0].y.clone()\r\n                return this;\r\n            }\r\n\r\n            // Value is given as string, comma separated.\r\n            if(typeof values[0] === 'string'){\r\n                let xy = values[0].split(',')\r\n                if(xy.length===2){\r\n                    this._x = new Fraction(xy[0]).reduce()\r\n                    this._y = new Fraction(xy[1]).reduce()\r\n                    return this;\r\n                }\r\n            }\r\n\r\n            // Value given as an object with {x: value, y: value}\r\n            if (values[0].x !== undefined && values[0].y !== undefined) {\r\n                this._x = new Fraction(values[0].x).reduce()\r\n                this._y = new Fraction(values[0].y).reduce()\r\n            } else {\r\n                return this.zero();\r\n            }\r\n        }\r\n        if (values.length === 2) {\r\n            this._x = new Fraction(values[0]).reduce()\r\n            this._y = new Fraction(values[1]).reduce()\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Point => {\r\n        this._x = this._x.clone()\r\n        this._y = this._y.clone()\r\n\r\n        return this\r\n    }\r\n\r\n    zero = (): Point => {\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    origin = (): Point => {\r\n        this.zero();\r\n        return this;\r\n    }\r\n\r\n    middleOf = (P1: Point, P2: Point): Point => {\r\n        this._x = P1.x.clone().add(P2.x).divide(2);\r\n        this._y = P1.y.clone().add(P2.y).divide(2);\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Display functions\r\n    // ------------------------------------------\r\n    texValues = (numberOfDigits: number): string => {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.value.toFixed(numberOfDigits===undefined?2:numberOfDigits));\r\n        pts.push(this._y.value.toFixed(numberOfDigits===undefined?2:numberOfDigits));\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Static functions\r\n    // ------------------------------------------\r\n    static pmatrix = (a: any, b: any, c?: any): string => {\r\n        if (c === undefined) {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\end{pmatrix}`;\r\n        } else {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\\\\\ ${c.tex ? c.tex : c} \\\\end{pmatrix}`;\r\n        }\r\n    };\r\n\r\n}\r\n","import {Point} from \"./point\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Vector} from \"./vector\";\r\nimport {Line} from \"./line\";\r\nimport {Equation} from \"../algebra/equation\";\r\n\r\nexport interface remarquableLines {\r\n    'medians': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'mediators': {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line,\r\n        'intersection': Point\r\n    },\r\n    'heights': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'bisectors': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    }\r\n}\r\n\r\nexport class Triangle {\r\n    private _A: Point;\r\n    private _B: Point;\r\n    private _C: Point;\r\n    private _lines: {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line\r\n    };\r\n    private _middles: {\r\n        'AB': Point,\r\n        'AC': Point,\r\n        'BC': Point\r\n    };\r\n    private _remarquables: remarquableLines;\r\n\r\n\r\n    constructor(...values: any) {\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    get isTriangle():boolean {return true;}\r\n\r\n    // ------------------------------------------\r\n    // Getter and setters\r\n    // ------------------------------------------\r\n\r\n    get A(): Point {\r\n        return this._A;\r\n    }\r\n\r\n    get B(): Point {\r\n        return this._B;\r\n    }\r\n\r\n    get C(): Point {\r\n        return this._C;\r\n    }\r\n\r\n    get AB(): Vector {\r\n        return this.getSegment('A', 'B');\r\n    }\r\n\r\n    get BA(): Vector {\r\n        return this.getSegment('B', 'A');\r\n    }\r\n\r\n    get BC(): Vector {\r\n        return this.getSegment('B', 'C');\r\n    }\r\n\r\n    get CB(): Vector {\r\n        return this.getSegment('C', 'B');\r\n    }\r\n\r\n    get AC(): Vector {\r\n        return this.getSegment('A', 'C');\r\n    }\r\n\r\n    get CA(): Vector {\r\n        return this.getSegment('C', 'A');\r\n    }\r\n\r\n    get isRectangle(): boolean {\r\n        if (this.AB.isNormalTo(this.BC)) {\r\n            return true;\r\n        }\r\n        if (this.AB.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n        if (this.BC.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    get isEquilateral(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) &&\r\n            this.AB.normSquare.isEqual(this.AC.normSquare);\r\n    }\r\n\r\n    get isIsocele(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) ||\r\n            this.AB.normSquare.isEqual(this.AC.normSquare) ||\r\n            this.BC.normSquare.isEqual(this.AC.normSquare)\r\n    }\r\n\r\n    get lines(): { 'AB': Line, 'BC': Line, 'AC': Line } {\r\n        return this._lines;\r\n    }\r\n\r\n    get remarquables(): remarquableLines {\r\n        return this._remarquables;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Parse values to a triangle. Supported formats:\r\n     * Point, Point, Point\r\n     * x1, y1, x2, y2, x3, y3\r\n     * TODO: Something else ?\r\n     * @param values\r\n     */\r\n    parse = (...values: any): Triangle => {\r\n        if (values.length === 6) {\r\n            // Check if all values are number or fractions.\r\n            let v = values.map((x: any) => new Fraction(x));\r\n            return this.parse(\r\n                new Point(v[0], v[1]),\r\n                new Point(v[2], v[3]),\r\n                new Point(v[4], v[5]),\r\n            )\r\n        } else if (values.length === 3) {\r\n            // Possibilities:\r\n            // - Three points (or part of points, only dict for example, or array (TODO: Add the array syntax for point)\r\n            // - Three lines\r\n            // - Three lines as text.\r\n            if(values.filter((x:any) => typeof x === 'string').length===3) {\r\n                return this.parse( ...values.map((x:string) => new Line(x)) )\r\n            }else if(values.filter((x:any) => x.isLine === true).length===3) {\r\n                // We have three lines\r\n                this._lines = {\r\n                    'AB': values[0],\r\n                    'BC': values[1],\r\n                    'AC': values[2]\r\n                };\r\n\r\n                // Get the intersection points -> build the triangle using these intersection points.\r\n                let intersect = values[0].intersection(values[1]);\r\n                if (intersect.hasIntersection) {\r\n                    this._B = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[1].intersection(values[2]);\r\n                if (intersect.hasIntersection) {\r\n                    this._C = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[2].intersection(values[0]);\r\n                if (intersect.hasIntersection) {\r\n                    this._A = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n            }else {\r\n                // At least, one of the value is not a point.\r\n                if (values.filter((x: any) => x.isPoint === true).length < 3) {\r\n                    return this.parse(\r\n                        new Point(values[0]),\r\n                        new Point(values[1]),\r\n                        new Point(values[2])\r\n                    )\r\n                }\r\n\r\n                // We have three points.\r\n                this._A = values[0].clone();\r\n                this._B = values[1].clone();\r\n                this._C = values[2].clone();\r\n\r\n                this._lines = {\r\n                    'AB': new Line(this._A, this._B),\r\n                    'BC': new Line(this._B, this._C),\r\n                    'AC': new Line(this._A, this._C)\r\n                };\r\n            }\r\n        } else if (values.length === 1) {\r\n            if (values[0].isTriangle === true) {\r\n                return values[0].clone();\r\n            }\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the Triangle class\r\n     */\r\n    clone = (): Triangle => {\r\n        this._A = this._A.clone();\r\n        this._B = this._B.clone();\r\n        this._C = this._C.clone();\r\n\r\n        this._lines = {\r\n            'AB': this._lines.AB.clone(),\r\n            'BC': this._lines.BC.clone(),\r\n            'AC': this._lines.AC.clone()\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Triangle operations and properties\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Generate the Line object for the three segments of the triangle\r\n     */\r\n    private _updateTriangle = () => {\r\n        this._middles = {\r\n            'AB': new Point().middleOf(this._A, this._B),\r\n            'AC': new Point().middleOf(this._A, this._C),\r\n            'BC': new Point().middleOf(this._B, this._C)\r\n        }\r\n\r\n        this._remarquables = this._calculateRemarquableLines();\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the Point class for the given name\r\n     * @param ptName\r\n     */\r\n    private getPointByName = (ptName: string): Point => {\r\n        switch (ptName.toUpperCase()) {\r\n            case 'A':\r\n                return this._A;\r\n            case 'B':\r\n                return this._B;\r\n            case 'C':\r\n                return this._C;\r\n        }\r\n\r\n        // Something went wrong ! Return the first point\r\n        return this._A;\r\n    }\r\n    /**\r\n     * Get the vector for the segment given by name.\r\n     * @param ptName1\r\n     * @param ptName2\r\n     */\r\n    private getSegment = (ptName1: string, ptName2: string): Vector => {\r\n        return new Vector(\r\n            this.getPointByName(ptName1),\r\n            this.getPointByName(ptName2)\r\n        );\r\n    }\r\n\r\n    private _calculateRemarquableLines = (): remarquableLines => {\r\n        let remarquables: remarquableLines = {\r\n            'medians': {\r\n                'A': new Line(this._A, this._middles.BC),\r\n                'B': new Line(this._B, this._middles.AC),\r\n                'C': new Line(this._C, this._middles.AB),\r\n                'intersection': null\r\n            },\r\n            'mediators': {\r\n                'AB': new Line(this._middles.AB, new Vector(this._A, this._B).normal()),\r\n                'AC': new Line(this._middles.AC, new Vector(this._A, this._C).normal()),\r\n                'BC': new Line(this._middles.BC, new Vector(this._B, this._C).normal()),\r\n                'intersection': null\r\n            },\r\n            'heights': {\r\n                'A': new Line(this._A, new Vector(this._B, this._C).normal()),\r\n                'B': new Line(this._B, new Vector(this._A, this._C).normal()),\r\n                'C': new Line(this._C, new Vector(this._A, this._B).normal()),\r\n                'intersection': null\r\n            },\r\n            'bisectors': {\r\n                'A': this._calculateBisectors('A'),\r\n                'B': this._calculateBisectors('B'),\r\n                'C': this._calculateBisectors('C'),\r\n                'intersection': null\r\n            }\r\n        }\r\n\r\n        // As it's a triangle, we assume the lines are intersecting and aren't parallel or superposed.\r\n        remarquables.medians.intersection = remarquables.medians.A.intersection(remarquables.medians.B).point;\r\n        remarquables.mediators.intersection = remarquables.mediators.AB.intersection(remarquables.mediators.BC).point;\r\n        remarquables.heights.intersection = remarquables.heights.A.intersection(remarquables.heights.B).point;\r\n        remarquables.bisectors.intersection = remarquables.bisectors.A.intersection(remarquables.bisectors.B).point;\r\n\r\n        // Everything was calculated for the remarquable lines.\r\n        return remarquables;\r\n    }\r\n\r\n    private _calculateBisectors = (pt: string): Line => {\r\n        let tlines = this.lines, d1, d2;\r\n\r\n        if(pt==='A'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.AC;\r\n        }else if(pt==='B'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.BC;\r\n        }else if(pt==='C'){\r\n            d1 = tlines.BC;\r\n            d2 = tlines.AC;\r\n        }\r\n\r\n        let b1 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm)).reorder(true).simplify()),\r\n            b2 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm).opposed()).reorder(true).simplify());\r\n\r\n        // Must determine which bisectors is in the triangle\r\n        if(pt==='A'){\r\n            return b1.hitSegment(this.B, this.C)?b1:b2;\r\n        }\r\n        if(pt==='B'){\r\n            return b1.hitSegment(this.A, this.C)?b1:b2;\r\n        }\r\n        if(pt==='C'){\r\n            return b1.hitSegment(this.B, this.A)?b1:b2;\r\n        }\r\n\r\n        // Default returns the first bisector\r\n        return b1;\r\n    }\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Numeric} from \"../numeric\";\r\n\r\nexport class Vector {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n\r\n    constructor(...values: any) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n    };\r\n\r\n    get isVector() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get normSquare(): Fraction {\r\n        return this._x.clone().pow(2).add(this._y.clone().pow(2));\r\n    }\r\n\r\n    get norm(): number {\r\n        return Math.sqrt(this.normSquare.value);\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\begin{pmatrix}${this._x.tex} \\\\\\\\\\ ${this._y.tex} \\\\end{pmatrix}`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Vector => {\r\n        // TODO: Must be more strict about what is given and limit to two dimensional vectors.p\r\n        // Maybe more than one value was given...\r\n        // Initialize the vector\r\n        this.zero();\r\n\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        if (values.length === 1) {\r\n            if (values[0].isVector) {\r\n                return values[0].clone()\r\n            } else {\r\n                return this._parseString(values[0])\r\n            }\r\n        }\r\n\r\n        if (values.length >= 2) {\r\n            // Two points are given - skip the third value.\r\n            if (values[0].isPoint && values[1].isPoint) {\r\n                this._x = values[1].x.clone().subtract(values[0].x)\r\n                this._y = values[1].y.clone().subtract(values[0].y)\r\n                return this;\r\n            }\r\n\r\n            // Fractions or a number are give\r\n            if (values[0].isFraction || !isNaN(values[0])) {\r\n                this._x = new Fraction(values[0])\r\n            }\r\n            if (values[1].isFraction || !isNaN(values[1])) {\r\n                this._y = new Fraction(values[1])\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Vector => {\r\n        let V = new Vector();\r\n\r\n        if (this._x !== null) {\r\n            V.x = this._x.clone();\r\n        }\r\n        if (this._y !== null) {\r\n            V.y = this._y.clone();\r\n        }\r\n        return V;\r\n    }\r\n\r\n    reset = (): Vector => {\r\n        this._x = null;\r\n        this._y = null;\r\n        return this;\r\n    }\r\n\r\n    zero = (): Vector => {\r\n        this.reset();\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    one = (): Vector => {\r\n        this._x = new Fraction();\r\n        this._y = new Fraction();\r\n        return this;\r\n    }\r\n\r\n    private _parseString = (value: string): Vector => {\r\n        // Split comma, semi colon or single space.\r\n        let components = value.split(/[,;\\s]/g);\r\n\r\n        // Validate the fraction values.\r\n        this.x = new Fraction(components[0] || null);\r\n        this.y = new Fraction(components[1] || null);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Vector => {\r\n        this._x.opposed();\r\n        this._y.opposed();\r\n        return this;\r\n    }\r\n\r\n    add = (V: Vector): Vector => {\r\n        this._x.add(V.x);\r\n        this._y.add(V.y);\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (V: Vector): Vector => {\r\n        return this.add(V.clone().opposed());\r\n    }\r\n\r\n    scalarProductWithVector = (V: Vector): Fraction => {\r\n        // TODO: Add the scalar factor !!!!\r\n        return this._x.clone().multiply(V.x).add(this._y.clone().multiply(V.y));\r\n    }\r\n\r\n    static scalarProduct = (v1: Vector, v2: Vector): number => {\r\n        // TODO: Transform to fraction with nthroot.\r\n        return  v1.x.value * v2.x.value + v1.y.value * v2.y.value;\r\n    };\r\n\r\n    normal = (): Vector => {\r\n        let x = this.x.clone().opposed(), y = this.y.clone();\r\n        this._x = y;\r\n        this._y = x;\r\n        return this;\r\n    }\r\n\r\n    isNormalTo = (v: Vector): boolean => {\r\n        return this.scalarProductWithVector(v).isZero()\r\n    }\r\n\r\n    multiplyByScalar = (k: any): Vector => {\r\n        let scalar = new Fraction(k);\r\n        this._x.multiply(scalar);\r\n        this._y.multiply(scalar);\r\n        return this;\r\n    }\r\n\r\n    divideByScalar = (k:any): Vector => {\r\n        return this.multiplyByScalar(new Fraction(k).invert());\r\n    }\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    simplify = (): Vector => {\r\n        // Multiply by the lcm of denominators.\r\n        return this.multiplyByScalar(Numeric.lcm(this._x.denominator, this._y.denominator))\r\n            .divideByScalar(Numeric.gcd(this._x.numerator, this._y.numerator));\r\n    }\r\n\r\n    angleWith = (V: Vector, sharp?: Boolean, radian?: Boolean): number => {\r\n        let scalar = this.scalarProductWithVector(V).value,\r\n            toDegree = radian ? 1 : 180 / Math.PI;\r\n        if (sharp) {\r\n            scalar = Math.abs(scalar);\r\n        }\r\n\r\n        return toDegree * Math.acos(scalar / (this.norm * V.norm));\r\n    }\r\n}\r\n","export class Numeric{\r\n    static round(value:number, decimals:number=2):number {\r\n        return Number(Math.round(Number(value+'e'+decimals))+'e-'+decimals);\r\n    }\r\n\r\n    /**\r\n     * Get the list of the nth first prime numbers.\r\n     * @param nb : number of primes to choose from\r\n     */\r\n    static prime(nb?:number):number[]{\r\n        let primes:number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973];\r\n        if(nb === undefined){\r\n            return primes;\r\n        }else{\r\n            return primes.slice(0,Math.max(primes.length,nb));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the list of all dividers of a number.\r\n     * @param value\r\n     */\r\n    static dividers(value:number):number[]{\r\n        let D: number[];\r\n        const maxV = Math.sqrt(Math.abs(value));\r\n\r\n        // Initialize the list of dividers.\r\n        D = [];\r\n\r\n        for(let i=1; i<=maxV; i++){\r\n            if(value%i===0){\r\n                D.push(i);\r\n                D.push(value/i);\r\n            }\r\n        }\r\n\r\n        // Order numbers.\r\n        D.sort(function(a, b){return a-b;});\r\n\r\n        // Make sure the array of value is unique.\r\n        return [...new Set(D)];\r\n    }\r\n    /**\r\n     * Great Common Divisor\r\n     * @param values : number values\r\n     */\r\n    static gcd(...values:number[]):number{\r\n        // Define the gcd for two number\r\n        let gcd2 = function(a:number,b:number):number{\r\n            if(b===0){return a;}\r\n            return gcd2(b, a%b);\r\n        };\r\n\r\n        let g:number = 1,\r\n            i:number = 2;\r\n\r\n        // Nothing is given\r\n        if(values.length===0){return 1;}\r\n        // Only one number is given\r\n        if(values.length===1){\r\n            // The first number is zero\r\n            if(values[0]===0){return 1;}\r\n            // Return the number\r\n            return values[0];\r\n        }\r\n\r\n        // We have at least 2 numbers.\r\n        g = gcd2(values[0],values[1]);\r\n\r\n        // The gcd of the two first value is one ? It's already finished.\r\n        if(g===1){return 1;}\r\n\r\n        // The current gcd isn't one. Continue with all next values.\r\n        for(i=2; i<values.length; i++){\r\n            g = gcd2(g, values[i]);\r\n            // Escape if gcd is already one.\r\n            if(g===1){break;}\r\n        }\r\n\r\n        return Math.abs(g);\r\n    }\r\n\r\n    /**\r\n     * Least Common Multiple\r\n     * @param values: list of numbers\r\n     */\r\n    static lcm(...values:number[]):number{\r\n        return values.reduce(function(a,b){\r\n            return Math.abs(a * b / Numeric.gcd(a, b));\r\n        });\r\n    }\r\n}","import {rndPolynom} from \"./rndPolynom\";\r\nimport {rndMonom} from \"./rndMonom\";\r\nimport {rndHelpers} from \"./rndHelpers\";\r\nimport {randomCoefficientConfig, randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {Monom, Polynom} from \"../algebra\";\r\nimport {Fraction} from \"../coefficients\";\r\nimport {rndFraction} from \"./rndFraction\";\r\n\r\nexport * from \"./rndTypes\"\r\nexport namespace Random {\r\n    export function polynom(config?: randomPolynomConfig): Polynom {\r\n        return (new rndPolynom(config)).generate()\r\n    }\r\n\r\n    export function monom(config?: randomMonomConfig): Monom {\r\n        return (new rndMonom(config)).generate()\r\n    }\r\n\r\n    export function fraction(config?: randomCoefficientConfig): Fraction {\r\n        return (new rndFraction(config)).generate()\r\n    }\r\n\r\n    export function number(from:number, to:number):number { return rndHelpers.randomInt(from,to)}\r\n    export function numberSym(max:number, allowZero?:boolean):number { return rndHelpers.randomIntSym(max, allowZero)}\r\n    export function bool(percent?:number):boolean { return rndHelpers.randomBool(percent)}\r\n    export function array(arr:any[], number?:number):any[] { return rndHelpers.randomArray(arr, number)}\r\n    export function item(arr:any[]):any { return rndHelpers.randomItem(arr)}\r\n    export function shuffle(arr:any[]):any { rndHelpers.shuffleArray(arr)}\r\n}","export class randomCore {\r\n    protected _config: Object\r\n    protected _defaultConfig: Object\r\n    mergeConfig = (config: Object, defaultConfig: Object): Object => {\r\n        if (config !== undefined) {\r\n            return {...defaultConfig, ...config}\r\n        }\r\n        return defaultConfig\r\n    }\r\n\r\n    generate = (): unknown => {\r\n        return undefined\r\n    }\r\n\r\n    config = (config: Object): randomCore => {\r\n        this._config = this.mergeConfig(config, this._defaultConfig)\r\n        return this\r\n    }\r\n}","import {randomCore} from \"./randomCore\";\r\nimport {randomCoefficientConfig, randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {Fraction} from \"../coefficients\";\r\nimport {Random} from \"./index\";\r\n\r\n/**\r\n * Create a random monom based on a based configuration\r\n */\r\nexport class rndFraction extends randomCore {\r\n    declare protected _config: randomCoefficientConfig\r\n    declare protected _defaultConfig: randomCoefficientConfig\r\n\r\n    constructor(userConfig?: randomCoefficientConfig) {\r\n        super();\r\n\r\n        this._defaultConfig = {\r\n            negative: true,\r\n            reduced: true,\r\n            zero: true\r\n        }\r\n\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Fraction => {\r\n        let Q = new Fraction()\r\n\r\n        if(this._config.negative){\r\n            Q.numerator = Random.numberSym(10, this._config.zero)\r\n        }else {\r\n            Q.numerator = Random.number(this._config.zero ? 0 : 1, 10)\r\n        }\r\n        Q.denominator = Random.number(1, 10)\r\n\r\n        return this._config.reduced?Q.reduce():Q\r\n    }\r\n}\r\n","/**\r\n * Random helpers\r\n */\r\nexport class rndHelpers {\r\n\r\n    /**\r\n     * Random boolean with a percent ratio\r\n     * @param percent\r\n     */\r\n    static randomBool(percent:number=0.5):boolean{\r\n        return Math.random()<percent;\r\n    }\r\n\r\n    /**\r\n     * Random integer between two values.\r\n     * @param a (number) : From this value to the second value. If the second is ommited, this value is the max value.\r\n     * @param b (number) : To this value. If this is ommited.\r\n     */\r\n    static randomInt(a:number, b?:number):number{\r\n        if(b===undefined){return this.randomInt(0,a);}\r\n\r\n        return Math.floor(Math.random() * (b - a + 1) + a);\r\n    }\r\n\r\n    /**\r\n     * Random integer between -max and max value.\r\n     * @param max (number) : determine the limits.\r\n     * @param zero (bool) : determine if zero is allowed or not.\r\n     */\r\n    static randomIntSym(max:number, zero?:boolean):number{\r\n        if(zero===false){\r\n            return this.randomBool()?this.randomInt(1,max):-this.randomInt(1,max);\r\n        }else{\r\n            return this.randomInt(-max, max);\r\n        }\r\n    }\r\n\r\n    static randomArray(arr: any[], number?:number):any[]{\r\n        if(number===undefined){number = 1}\r\n\r\n        // Return a clone array\r\n        if(arr.length<=0){return Object.values(arr)}\r\n\r\n        // Randomize the array and return the n first elements.\r\n        return rndHelpers.shuffleArray(arr).slice(0,number);\r\n    }\r\n\r\n    static randomItem(arr: any[]): any{\r\n        if(arr.length===0){return ''}\r\n        return this.randomArray(arr, 1)[0]\r\n    }\r\n\r\n    static shuffleArray(arr: any[]): any[] {\r\n        // The Fisher-Yates algorithm\r\n        let shuffleArray = Object.values(arr)\r\n        for (let i = shuffleArray.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            const temp = shuffleArray[i];\r\n            shuffleArray[i] = shuffleArray[j];\r\n            shuffleArray[j] = temp;\r\n        }\r\n\r\n        return shuffleArray;\r\n    }\r\n\r\n}","import {randomCore} from \"./randomCore\";\r\nimport {randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {Random} from \"./index\";\r\nimport {Monom} from \"../algebra/monom\";\r\n\r\n/**\r\n * Create a random monom based on a based configuration\r\n */\r\n    export class rndMonom extends randomCore {\r\n        declare protected _config: randomMonomConfig\r\n        declare protected _defaultConfig: randomMonomConfig\r\n\r\n        constructor(userConfig?: randomMonomConfig) {\r\n            super();\r\n\r\n            this._defaultConfig = {\r\n                letters: 'x',\r\n                degree: 2,\r\n                fraction: true,\r\n                zero: false\r\n            }\r\n\r\n            this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n        }\r\n\r\n        generate = (): Monom => {\r\n            // Create a monom instance\r\n            let M = new Monom()\r\n\r\n            // Generate the coefficient\r\n            M.coefficient = Random.fraction({\r\n                zero: this._config.zero,\r\n                reduced: true\r\n            })\r\n\r\n            // Calculate the degree of the monom\r\n            if (this._config.letters.length > 1) {\r\n                // Initialise each items...\r\n                for (let L of this._config.letters.split('')) {\r\n                    M.setLetter(L, 0);\r\n                }\r\n                for (let i = 0; i < this._config.degree; i++) {\r\n                    const L = Random.item(this._config.letters.split(\"\"))\r\n                    M.setLetter(L, M.degree(L).clone().add(1))\r\n                }\r\n            } else {\r\n                M.setLetter(this._config.letters, this._config.degree)\r\n            }\r\n\r\n            return M\r\n        }\r\n    }\r\n","import {randomCore} from \"./randomCore\";\r\nimport {randomPolynomConfig} from \"./rndTypes\";\r\nimport {rndMonom} from \"./rndMonom\";\r\nimport {Random} from \"./index\";\r\nimport {Polynom} from \"../algebra\";\r\nimport {Monom} from \"../algebra\";\r\n\r\n/**\r\n * Random polynoms\r\n */\r\nexport class rndPolynom extends randomCore {\r\n    declare protected _config: randomPolynomConfig\r\n    declare protected _defaultConfig: randomPolynomConfig\r\n\r\n    constructor(userConfig?: randomPolynomConfig) {\r\n        super();\r\n\r\n        // Default config for a random polynom\r\n        this._defaultConfig = {\r\n            letters: 'x',\r\n            degree: 2,\r\n            fraction: false,\r\n            zero: false,\r\n            unit: false,\r\n            factorable: false,\r\n            allowNullMonom: true,\r\n            numberOfMonoms: 0\r\n        }\r\n\r\n        // Merge config with initialiser\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Polynom => {\r\n        if(this._config.factorable && this._config.degree>1){\r\n            return this.factorable()\r\n        }\r\n\r\n        // Create the polynom\r\n        let P = new Polynom().empty(),\r\n            M: Monom\r\n        for (let i = this._config.degree; i >= 0; i--) {\r\n            // Create monom of corresponding degree.\r\n            M = new rndMonom({\r\n                letters: this._config.letters,\r\n                degree: i,\r\n                fraction: this._config.fraction,\r\n                zero: (i === this._config.degree) ? false : this._config.allowNullMonom\r\n            }).generate()\r\n\r\n            // If degree is the greatest and unit is true, set the monom value to one.\r\n            if (this._config.unit && this._config.degree === i) {\r\n                M.coefficient.one()\r\n            }\r\n\r\n            // Add to the polynom\r\n            P.add(M)\r\n        }\r\n\r\n        // If the number of monoms is greater than the allowed value, remove some of them...\r\n        if (this._config.numberOfMonoms > 0 && this._config.numberOfMonoms < P.length) {\r\n            P.monoms = Random.array(P.monoms, this._config.numberOfMonoms)\r\n        }\r\n        return P\r\n    }\r\n\r\n    factorable = (): Polynom => {\r\n        let P = new Polynom().one()\r\n\r\n        let _factorableConfig = {...this._config}\r\n        _factorableConfig.degree = 1\r\n        _factorableConfig.factorable = false\r\n\r\n        for(let i=0; i<this._config.degree;i++){\r\n            P.multiply(Random.polynom(_factorableConfig))\r\n        }\r\n\r\n        return P\r\n    }\r\n}","import {loadHighlighter} from \"typedoc/dist/lib/utils/highlighter\";\r\n\r\ntype tokenType = {\r\n    [key: string]: {\r\n        precedence: number,\r\n        associative: string\r\n    }\r\n}\r\n\r\nexport class Shutingyard {\r\n    private _rpn: { token: string, tokenType: string }[] = [];\r\n    readonly _mode: 'polynom' | 'set';\r\n    private _tokenConfig: tokenType;\r\n    private _uniformize: boolean;\r\n\r\n    constructor(mode?: 'polynom' | 'set') {\r\n        this._mode = typeof mode === 'undefined' ? 'polynom' : mode;\r\n        this.tokenConfigInitialization()\r\n    }\r\n\r\n    /**\r\n     * Determin if the token is a defined operation\r\n     * Defined operations: + - * / ^ sin cos tan\r\n     * @param token\r\n     */\r\n    isOperation(token: string): boolean {\r\n        if (token[0].match(/[+\\-*/^]/g)) {\r\n            return true;\r\n        }\r\n        //\r\n        // if (token.match(/^sin|cos|tan/g)) {\r\n        //     return true;\r\n        // }\r\n\r\n        return false;\r\n    }\r\n\r\n    tokenConfigInitialization(): tokenType {\r\n        if (this._mode === 'set') {\r\n            this._tokenConfig = {\r\n                '&': {precedence: 3, associative: 'left'},\r\n                '|': {precedence: 3, associative: 'left'},\r\n                '!': {precedence: 4, associative: 'right'},\r\n                '-': {precedence: 2, associative: 'left'}\r\n            }\r\n            this._uniformize = false;\r\n        } else {\r\n            this._tokenConfig = {\r\n                '^': {precedence: 4, associative: 'right'},\r\n                '*': {precedence: 3, associative: 'left'},\r\n                '/': {precedence: 3, associative: 'left'},\r\n                '+': {precedence: 2, associative: 'left'},\r\n                '-': {precedence: 2, associative: 'left'},\r\n                '%': {precedence: 3, associative: 'right'},\r\n                'sin': {precedence: 4, associative: 'right'},\r\n                'cos': {precedence: 4, associative: 'right'},\r\n                'tab': {precedence: 4, associative: 'right'},\r\n            }\r\n            this._uniformize = true\r\n        }\r\n        return this._tokenConfig\r\n    }\r\n\r\n    /**\r\n     * Get the next token to analyse.\r\n     * @param expr (string) Expression to analyse\r\n     * @param start (number) CUrrent position in the expr string.\r\n     */\r\n    NextToken2(expr: string, start: number): [string, number, string] {\r\n        let token: string, tokenType: string;\r\n        token = '';\r\n        tokenType = '';\r\n        // Case of parenthesis or comma (generic items)\r\n        if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        } else{\r\n            // Order token keys by token characters length (descending)\r\n            const keys = Object.keys(this._tokenConfig).sort((a,b)=>b.length-a.length)\r\n\r\n            for(let key of keys){\r\n                if(expr.substr(start, key.length) === key){\r\n                    token += key;\r\n                    tokenType = 'operation'\r\n                    break\r\n                }\r\n            }\r\n\r\n            if(token===''){\r\n                // No function found ! Might be a coefficient !\r\n                if( expr[start].match(/[0-9]/) ) {\r\n                    token = expr.substr(start).match(/^([0-9.,/]+)/)[0]\r\n                    tokenType = 'coefficient'\r\n                }else if (expr[start].match(/[a-zA-Z]/)) {\r\n                    token = expr.substr(start).match(/^([a-zA-Z])/)[0]\r\n                    tokenType = 'variable'\r\n                }else{\r\n                    console.log('Unidentified token', expr[start], expr, start)\r\n                    token = expr[start]\r\n                    tokenType = 'monom'\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n\r\n        // console.log(token, tokenType)\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    NextToken(expr: string, start: number): [string, number, string] {\r\n        let tokenMatch: string[], token: string, tokenType: string;\r\n\r\n        this.NextToken2(expr, start)\r\n        // Detect a fraction monoms or return empty array\r\n        tokenMatch = (expr.substr(start).match(/^[0-9/a-zA-Z^]+/g)) || [];\r\n\r\n        if (expr.substr(start, start + 3).match(/^(sin|cos|tan)/g)) {\r\n            token = expr.substr(start, 3)\r\n            tokenType = 'function'\r\n        } else if (tokenMatch.length > 0) {\r\n            token = tokenMatch[0];\r\n            tokenType = 'monom';\r\n        }\r\n        // It's an operation !\r\n        else if (expr[start].match(/[+\\-*/^]/g)) {\r\n            token = expr[start];\r\n            tokenType = 'operation';\r\n        } else if (expr[start].match(/[&|!]/g)) {\r\n            token = expr[start];\r\n            tokenType = 'operation';\r\n        }\r\n        // It's an opening parenthese\r\n        else if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        }\r\n        // It's a monom.\r\n        else {\r\n            // TODO: Actually, negative exposant aren't supported.\r\n            // token = (expr.substr(start).match(/^[\\da-z\\^]+/g)[0])||'';\r\n            token = tokenMatch[0];\r\n            tokenType = 'monom';\r\n\r\n            if (token === '') {\r\n                token = expr[start];\r\n                tokenType = 'monom';\r\n                console.log('SHUTING YARD - NEXT TOKEN: error at ', start);\r\n            }\r\n        }\r\n\r\n        // console.log(token, start + token.length, tokenType);\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    /**\r\n     * Sanitize an expression by adding missing common operation (multiplication between parentheseses)\r\n     * @param expr\r\n     * @constructor\r\n     */\r\n    Uniformizer(expr: string): string {\r\n        // Determiner if need to be uniformized\r\n        if(!this._uniformize){return expr}\r\n\r\n        let expr2;\r\n        // Replace missing multiplication between two parenthese\r\n        expr2 = expr.replace(/\\)\\(/g, ')*(');\r\n\r\n        // Replace missing multiplication between number or setLetter and parenthese.\r\n\r\n        // 3x(x-4) => 3x*(x-4)\r\n        expr2 = expr2.replace(/([\\da-zA-Z])(\\()/g, \"$1*$2\");\r\n\r\n        // (x-4)3x => (x-4)*3x\r\n        expr2 = expr2.replace(/(\\))([\\da-zA-Z])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between number and letters.\r\n        // 3x => 3*x\r\n        expr2 = expr2.replace(/([0-9])([a-zA-Z])/g, \"$1*$2\");\r\n        expr2 = expr2.replace(/([a-zA-Z])([0-9])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between letters ?\r\n        // TODO: More robust solution to handle all letters ?\r\n        expr2 = expr2.replace(/([abcxyz])([abcxyz])/g, \"$1*$2\");\r\n\r\n        // Restore operation auto formating (prevent adding the mutliplcation star)\r\n        // TODO: Accept list of functions\r\n        let fnToken = ['sin', 'cos', 'tan']\r\n        for (let token of fnToken) {\r\n            expr2 = expr2.replace(new RegExp(token + '\\\\*', 'g'), token);\r\n        }\r\n\r\n        return expr2;\r\n    }\r\n\r\n    /**\r\n     * Parse an expression using the shutting yard tree algorithms\r\n     * @param expr (string) Expression to analyse\r\n     * Returns a RPN list of items.\r\n     * @param operators\r\n     */\r\n    parse(expr: string, operators?: string[]): Shutingyard {\r\n        let outQueue: {token:string, tokenType: string}[] = [],    // Output queue\r\n            opStack: {token:string, tokenType: string}[] = [],     // Operation queue\r\n            token: string = '',\r\n            tokenPos: number = 0,\r\n            tokenType: string = '',\r\n            previousOpStatckLength = 0\r\n\r\n        expr = this.Uniformizer(expr);\r\n\r\n        let securityLoopLvl1 = 50,\r\n            securityLoopLvl2_default = 50,\r\n            securityLoopLvl2;\r\n\r\n        while (tokenPos < expr.length) {\r\n            securityLoopLvl1--;\r\n            if (securityLoopLvl1 === 0) {\r\n                console.log('SECURITY LEVEL 1 EXIT');\r\n                break;\r\n            }\r\n\r\n            // Get the next token and the corresponding new (ending) position\r\n            [token, tokenPos, tokenType] = this.NextToken2(expr, tokenPos);\r\n\r\n            switch (tokenType) {\r\n                case 'monom':\r\n                case 'coefficient':\r\n                case 'variable':\r\n                    outQueue.push({\r\n                        token,\r\n                        tokenType\r\n                    });\r\n                    // if(previousOpStatckLength == opStack.length && outQueue.length>=2){\r\n                    //     console.log('opStatckLength', outQueue, opStack.length)\r\n                    //     outQueue.push('*')\r\n                    // }\r\n                    break;\r\n                case 'operation':\r\n                    previousOpStatckLength = opStack.length;\r\n                    //If the token is an operator, o1, then:\r\n                    if (opStack.length > 0) {\r\n                        let opTop = opStack[opStack.length - 1];\r\n\r\n\r\n                        securityLoopLvl2 = +securityLoopLvl2_default;\r\n\r\n                        //while there is an operator token o2, at the top of the operator stack and\r\n                        while (opTop.token in this._tokenConfig && (\r\n                                //either o1 is left-associative and its precedence is less than or equal to that of o2,\r\n                                (this._tokenConfig[token].associative === 'left' && this._tokenConfig[token].precedence <= this._tokenConfig[opTop.token].precedence)\r\n                                ||\r\n                                //or o1 is right associative, and has precedence less than that of o2,\r\n                                (this._tokenConfig[token].associative === 'right' && this._tokenConfig[token].precedence < this._tokenConfig[opTop.token].precedence)\r\n                            )\r\n                            ) {\r\n\r\n                            /* Security exit ! */\r\n                            securityLoopLvl2--;\r\n                            if (securityLoopLvl2 === 0) {\r\n                                console.log('SECURITY LEVEL 2 OPERATION EXIT');\r\n                                break;\r\n                            }\r\n\r\n                            // Add the operation to the queue\r\n                            outQueue.push((opStack.pop()) || {token: '', tokenType: 'operation'});\r\n\r\n                            // Get the next operation on top of the Stack.\r\n                            if(opStack.length===0){break;}\r\n                            opTop = opStack[opStack.length - 1];\r\n                        }\r\n                    }\r\n                    //at the end of iteration push o1 onto the operator stack\r\n                    opStack.push({token,tokenType});\r\n                    break;\r\n                case 'function-argument':\r\n                    // TODO: check if the opStack exist.\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 0) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 FUNCTION ARGUMENT EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n                    break;\r\n                case '(':\r\n                    opStack.push({token,tokenType});\r\n                    // Add an empty value if next element is negative.\r\n                    if (expr[tokenPos] === '-') {\r\n                        outQueue.push({token: '0', tokenType: 'coefficient'});\r\n                    }\r\n                    break;\r\n                case ')':\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    //Until the token at the top of the stack is a left parenthesis, pop operators off the stack onto the output queue.\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 1 /*Maybe zero !? */) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 CLOSING PARENTHESE EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n\r\n                    //Pop the left parenthesis from the stack, but not onto the output queue.\r\n                    opStack.pop();\r\n                    break;\r\n                case 'function':\r\n                    opStack.push({token, tokenType});\r\n                    break;\r\n                default:\r\n                    // In theory, everything should be handled.\r\n                    console.log(`SHUTING YARD: ${tokenType} : ${token} `);\r\n            }\r\n\r\n            // Output\r\n            // console.log(outQueue.concat(opStack.reverse()).join(\" \"));\r\n        }\r\n\r\n        // console.log(outQueue.concat(opStack.reverse()));\r\n        this._rpn = outQueue.concat(opStack.reverse());\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    // Getter\r\n    get rpn() {\r\n        // console.log(this._rpn)\r\n        return this._rpn;\r\n    }\r\n\r\n\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import {Numeric} from \"./maths/numeric\";\r\nimport {Shutingyard} from \"./maths/shutingyard\";\r\nimport {Random} from \"./maths/random\";\r\nimport {Fraction, Nthroot} from \"./maths/coefficients\";\r\nimport {Monom, Polynom, Equation, LinearSystem, Rational, Logicalset} from \"./maths/algebra\";\r\nimport {Line, Circle, Triangle, Point, Vector} from \"./maths/geometry\";\r\n\r\n// Expose as global\r\n// export let Pi = {\r\n(<any>window).Pi = {\r\n    ShutingYard: Shutingyard,\r\n    Numeric: Numeric,\r\n    Fraction: Fraction,\r\n    Root: Nthroot,\r\n    Monom: Monom,\r\n    Polynom: Polynom,\r\n    Equation: Equation,\r\n    LinearSystem: LinearSystem,\r\n    Rational: Rational,\r\n    Logicalset: Logicalset,\r\n    Random: Random,\r\n    Geometry: {\r\n        Vector: Vector,\r\n        Point: Point,\r\n        Line: Line,\r\n        Triangle: Triangle,\r\n        Circle: Circle\r\n    }\r\n};\r\n"],"names":["Equation","_left","_right","_sign","_polynom","_solutions","_varnothing","_real","constructor","equations","this","Polynom","zero","length","isEquation","clone","parse","left","isPolynom","right","solutions","solution","includes","join","isReal","undefined","solve","isVarnothing","signAsTex","tex","raw","variables","Set","concat","numberOfVars","value","sign","_formatSign","equationString","pStr","strSign","_findSign","split","create","console","log","signStr","_reverseSign","replace","_randomizeDefaults","degree","randomizeDefaults","randomize","opts","moveLeft","subtract","reorder","allLeft","mMove","m","monoms","isZero","simplify","multiply","Numeric","lcm","getDenominators","divide","gcd","getNumerators","isolate","letter","isOne","isMultiVariable","cMove","hasLetter","add","opposed","coefficient","replaceBy","P","F","Fraction","invert","max","letters","_solveDegree1","_solveDegree2","_solveDegree3plus","isGreater","indexOf","isStrictEqual","isAlsoEqual","m1","monomByDegree","m0","v","display","s","delta","nthDelta","realX1","realX2","sX1","sX2","aF","bF","cF","denominator","a","b","Math","sqrt","toFixed","Nthroot","reduce","hasRadical","dfrac","LinearSystem","_resolutionSteps","_equations","_letters","equationStrings","isLinearSystem","isSolvable","V","E","sort","equStr","LS","equArray","equ","L","monomByLetter","push","repeat","texSolution","map","_findLetters","setCoefficient","coefficients","i","slice","toString","setLetters","generate","solutionsF","_generateOneEquation","coeff","leftValue","equString","Random","numberSym","_checkIfLinerCombination","_linearReduction","eq1","eq2","c1","c2","mergeEquations","factor1","factor2","eq1multiplied","eq2multiplied","_solveOneLetter","LE","reducedEquations","str","_rawString","_rpn","isLogicalset","Shutingyard","rpn","evaluate","tokenSets","reference","referenceSet","varStack","key","token","tokenType","second","pop","first","filter","x","has","vennAB","A","B","vennABC","C","Monom","_coefficient","_literal","isMonom","literal","literalSqrt","isLiteralSquare","literalStr","inputStr","matchAll","clean","Object","keys","isNotZero","isNotEqual","dividers","hasFractionCoefficient","numerator","abs","literals","_getLiteralDividers","monomDividers","N","M","one","arr","tmpList","d","litt","item","currentLetter","displayWithSign","_shutingYardToReducedMonom","pow","q1","q2","stack","element","setLetter","k","isSameAs","multiplyByNumber","nb","root","p","isSquare","compare","isEqual","M1","M2","K","isRational","isEven","values","t","n","r","tmpValues","derivative","dM","primitive","static","coeffN","coeffD","isStrictlyPositive","min","areSameAs","areEquals","_monoms","_factors","_texString","polynomString","factors","texFactors","factorize","f","texString","genDisplay","output","forceSign","wrapParentheses","isNaN","Number","empty","shutingYardToReducedPolynom","test","fractions","m2","tempPolynom","previousToken","isSafeInteger","multiplyByPolynom","multiplyByFraction","multiplyByMonom","multiplyByInteger","xmultiply","euclidian","quotient","reminder","maxMP","degreeP","newM","MaxIteration","isPositive","isFraction","divideByFraction","divideByInteger","nbF","cP1","cP2","isOpposedAt","isFactorized","match","e","polynomStringNormalized","replaceAll","polynomStringReduced","substr","polyFactors","splice","isDeveloped","j","S","resultPolynom","forEach","monom","dP","integrate","valuesA","valuesB","commonMonom","securityLoop","m1d","m2d","result","dividerPolynom","_factorize2ndDegree","P1","P2","c","x1","x2","factor","xyzPolynom","xFactors","_factorizeByGroups","getZeroes","zeroes","zeroesAsTex","greater","D","z","frac","monomsByDegree","Ms","denominators","numerators","lcmDenominator","gcdDenominator","lcmNumerator","gcdNumerator","_numerator","_denominator","domain","amplify","NumeratorEuclidien","DenominatorEuclidien","R","limits","Infinity","denominatorOrPeriodic","NaN","floor","infinite","invalid","Q","lesser","g","compareFraction","than","leq","geq","isOpposed","isInverted","isNegativeOne","isNegative","isStrictlyNegative","isInfinity","isFinite","isReduced","isNatural","isOdd","_radical","_nth","_isValid","radical","nth","nthroot","_center","_radius","_exists","Point","cx","cy","y","developed","Line","_a","_b","_c","_OA","_d","_n","isLine","exists","equation","canonical","mxh","slope","OA","height","parametric","pmatrix","normal","Vector","parseByCoefficient","isPoint","isVector","parseByPointAndVector","elem","delete","size","isParellelTo","line","simplifyDirection","intersection","Pt","isParallel","isSame","point","hasIntersection","distanceTo","pt","d2","normSquare","fraction","hitSegment","iPt","canonicalAsFloatCoefficient","decimals","_x","_y","_exist","pts","xy","origin","middleOf","texValues","numberOfDigits","_A","_B","_C","_lines","_middles","_remarquables","isTriangle","AB","getSegment","BA","BC","CB","AC","CA","isRectangle","isNormalTo","isEquilateral","isIsocele","lines","remarquables","intersect","_updateTriangle","_calculateRemarquableLines","getPointByName","ptName","toUpperCase","ptName1","ptName2","_calculateBisectors","medians","mediators","heights","bisectors","d1","tlines","b1","norm","b2","_parseString","reset","components","scalarProductWithVector","v1","v2","multiplyByScalar","scalar","divideByScalar","angleWith","sharp","radian","toDegree","PI","acos","round","primes","maxV","gcd2","polynom","config","rndPolynom","rndMonom","rndFraction","number","from","to","rndHelpers","randomInt","allowZero","randomIntSym","bool","percent","randomBool","array","randomArray","randomItem","shuffle","shuffleArray","_config","_defaultConfig","mergeConfig","defaultConfig","randomCore","userConfig","super","negative","reduced","random","temp","unit","factorable","allowNullMonom","numberOfMonoms","_factorableConfig","_mode","_tokenConfig","_uniformize","mode","tokenConfigInitialization","isOperation","precedence","associative","NextToken2","expr","start","NextToken","tokenMatch","Uniformizer","expr2","fnToken","RegExp","operators","outQueue","opStack","tokenPos","previousOpStatckLength","securityLoopLvl2","securityLoopLvl1","opTop","reverse","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","window","Pi","ShutingYard","Root","Rational","Logicalset","Geometry","Triangle","Circle"],"sourceRoot":""}