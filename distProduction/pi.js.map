{"version":3,"file":"pi.js","mappings":"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","sources":["webpack://pimath/./src/main.ts","webpack://pimath/./src/maths/algebra/equation.ts","webpack://pimath/./src/maths/algebra/index.ts","webpack://pimath/./src/maths/algebra/linearSystem.ts","webpack://pimath/./src/maths/algebra/logicalset.ts","webpack://pimath/./src/maths/algebra/monom.ts","webpack://pimath/./src/maths/algebra/polynom.ts","webpack://pimath/./src/maths/algebra/rational.ts","webpack://pimath/./src/maths/coefficients/fraction.ts","webpack://pimath/./src/maths/coefficients/index.ts","webpack://pimath/./src/maths/coefficients/nthroot.ts","webpack://pimath/./src/maths/geometry/circle.ts","webpack://pimath/./src/maths/geometry/index.ts","webpack://pimath/./src/maths/geometry/line.ts","webpack://pimath/./src/maths/geometry/point.ts","webpack://pimath/./src/maths/geometry/triangle.ts","webpack://pimath/./src/maths/geometry/vector.ts","webpack://pimath/./src/maths/numeric.ts","webpack://pimath/./src/maths/random/index.ts","webpack://pimath/./src/maths/random/random.ts","webpack://pimath/./src/maths/random/randomCore.ts","webpack://pimath/./src/maths/random/rndHelpers.ts","webpack://pimath/./src/maths/random/rndMonom.ts","webpack://pimath/./src/maths/random/rndPolynom.ts","webpack://pimath/./src/maths/shutingyard.ts","webpack://pimath/webpack/bootstrap","webpack://pimath/webpack/startup"],"sourcesContent":["import {Fraction} from \"./maths/coefficients\";\r\nimport {Numeric} from \"./maths/numeric\";\r\nimport {Nthroot} from \"./maths/coefficients\";\r\nimport {Monom} from \"./maths/algebra\";\r\nimport {Polynom} from \"./maths/algebra\";\r\nimport {Equation} from \"./maths/algebra\";\r\nimport {LinearSystem} from \"./maths/algebra\";\r\nimport {Rational} from \"./maths/algebra\";\r\nimport {Vector} from \"./maths/geometry\";\r\nimport {Line} from \"./maths/geometry\";\r\nimport {Point} from \"./maths/geometry\";\r\nimport {Triangle} from \"./maths/geometry\";\r\nimport {Shutingyard} from \"./maths/shutingyard\";\r\nimport {Logicalset} from \"./maths/algebra\";\r\nimport {Circle} from \"./maths/geometry\";\r\nimport {Random} from \"./maths/random\";\r\n\r\nexport * from \"./maths/algebra\"\r\nexport * from \"./maths/coefficients\"\r\nexport * from \"./maths/geometry\"\r\nexport * from \"./maths/random\"\r\n// export * from \"./maths/space\"\r\nexport * from \"./maths/numeric\"\r\nexport * from \"./maths/shutingyard\"\r\n\r\n// Expose as global\r\n// export let Pi = {\r\n(<any>window).Pi = {\r\n    ShutingYard: Shutingyard,\r\n    Numeric: Numeric,\r\n    Fraction: Fraction,\r\n    Root: Nthroot,\r\n    Monom: Monom,\r\n    Polynom: Polynom,\r\n    Equation: Equation,\r\n    LinearSystem: LinearSystem,\r\n    Rational: Rational,\r\n    Logicalset: Logicalset,\r\n    Random: Random,\r\n    Geometry: {\r\n        Vector: Vector,\r\n        Point: Point,\r\n        Line: Line,\r\n        Triangle: Triangle,\r\n        Circle: Circle\r\n    }\r\n};\r\n","import {Polynom} from \"./polynom\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Nthroot} from \"../coefficients/nthroot\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Monom} from \"./monom\";\r\n\r\n/**\r\n * Equation is a class to manage equations...\r\n */\r\nexport class Equation {\r\n    private _left: Polynom;  // Left part of the equation\r\n    private _right: Polynom; // Right part of the equation\r\n    private _sign: string;   // Signe of the equation, by default =\r\n\r\n    private _polynom: Polynom;  // Used to solve the equation // TODO: remove the private value ?\r\n    private _solutions: string[];    // Array of the solutions\r\n\r\n    // Undetermined solutions.\r\n    private _varnothing: string = '\\\\varnothing';\r\n    private _real: string = '\\\\mathbb{R}';\r\n\r\n    /**\r\n     * Create an Equation using two polynoms.\r\n     * @param equations\r\n     */\r\n    constructor(...equations: any) {\r\n        // Default equation\r\n        this._left = new Polynom().zero();\r\n        this._right = new Polynom().zero();\r\n        this._sign = '=';\r\n\r\n        if (equations.length === 1) {\r\n            if (equations[0].isEquation === true) {\r\n                return equations[0].clone();\r\n            } else {\r\n                this.parse(equations[0]);\r\n            }\r\n        } else if (equations.length === 2) {\r\n            this.left = equations[0].isPolynom ? equations[0].clone() : new Polynom(equations[0]);\r\n            this.right = equations[1].isPolynom ? equations[1].clone() : new Polynom(equations[1]);\r\n        } else {\r\n            // Return default empty equation\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isEquation() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    // TODO: Check the getters and setters.\r\n    get solutions(): string[] {\r\n        return this._solutions;\r\n    }\r\n\r\n    get solution(): string {\r\n        if (this._solutions.length === 1\r\n            &&\r\n            (\r\n                this._solutions[0] === this._real\r\n                || this._solutions[0] === this._varnothing\r\n                || this._solutions[0].includes('\\\\left')\r\n            )\r\n        ) {\r\n            return `S = ${this._solutions[0]}`;\r\n        }\r\n        return `S = \\\\left{ ${this._solutions.join(';')} \\\\right}`;\r\n    }\r\n\r\n    get isReal(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0] === this._real;\r\n    }\r\n\r\n    get isVarnothing(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0] === this._varnothing;\r\n    }\r\n\r\n    get signAsTex(): string {\r\n        if (this._sign === '>=' || this._sign === '=>' || this._sign === 'geq') {\r\n            return '\\\\geq';\r\n        }\r\n        if (this._sign === '<=' || this._sign === '=<' || this._sign === 'leq') {\r\n            return '\\\\leq';\r\n        }\r\n        return this._sign;\r\n    }\r\n\r\n    get tex(): string {\r\n        return `${this._left.tex}${this.signAsTex}${this._right.tex}`;\r\n    }\r\n\r\n    get raw(): string {\r\n        return `${this._left.raw}${this.signAsTex}${this._right.raw}`;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        return [...new Set(this._right.variables.concat(this._left.variables))];\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    get left(): Polynom {\r\n        return this._left;\r\n    }\r\n\r\n    set left(value: Polynom) {\r\n        this._left = value;\r\n    }\r\n\r\n    get right(): Polynom {\r\n        return this._right;\r\n    }\r\n\r\n    set right(value: Polynom) {\r\n        this._right = value;\r\n    }\r\n\r\n    get sign(): string {\r\n        return this._sign;\r\n    }\r\n\r\n    set sign(value: string) {\r\n        // Set the sign value as formatted.\r\n        this._sign = this._formatSign(value);\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (equationString: string): Equation => {\r\n        let pStr: string[], strSign: string | false;\r\n        // Find the string separator\r\n        strSign = this._findSign(equationString);\r\n\r\n        if (strSign === false) {\r\n            console.log('The equation is not valid (no sign found)');\r\n            return;\r\n        }\r\n\r\n        // The StrSign is found\r\n        pStr = equationString.split(strSign);\r\n\r\n        return this.create(new Polynom(pStr[0]), new Polynom(pStr[1]), this._formatSign(strSign));\r\n    };\r\n\r\n    private _findSign = (equationString: string): string | false => {\r\n        let strSign: string = '';\r\n\r\n        if (equationString.includes('geq')) {\r\n            return (equationString.includes('\\\\geq')) ? '\\\\geq' : 'geq';\r\n        } else if (equationString.includes('leq')) {\r\n            return (equationString.includes('\\\\leq')) ? '\\\\leq' : 'leq';\r\n        } else if (equationString.includes('>=')) {\r\n            return '>=';\r\n        } else if (equationString.includes('=>')) {\r\n            return '=>';\r\n        } else if (equationString.includes('>')) {\r\n            return '>';\r\n        } else if (equationString.includes('<=')) {\r\n            return '<=';\r\n        } else if (equationString.includes('=<')) {\r\n            return '=<';\r\n        } else if (equationString.includes('<')) {\r\n            return '<';\r\n        } else if (equationString.includes('=')) {\r\n            return '='\r\n        }\r\n        if (strSign === '') {\r\n            console.log('Equation: parse string : sign not found');\r\n            return false;\r\n        }\r\n    };\r\n\r\n    private _formatSign = (signStr: string): string => {\r\n        if (signStr === undefined) {\r\n            return '=';\r\n        }\r\n\r\n        if (signStr.includes('geq')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>=')) {\r\n            return '>=';\r\n        } else if (signStr.includes('=>')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>')) {\r\n            return '>';\r\n        } else if (signStr.includes('leq')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<=')) {\r\n            return '<=';\r\n        } else if (signStr.includes('=<')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<')) {\r\n            return '<';\r\n        } else {\r\n            return '='\r\n        }\r\n    };\r\n\r\n    private _reverseSign = (): Equation => {\r\n        if (this._sign === '=') {\r\n            return this;\r\n        }\r\n\r\n        if (this._sign.includes('<')) {\r\n            this._sign.replace('<', '>');\r\n            return this;\r\n        }\r\n        if (this._sign.includes('>')) {\r\n            this._sign.replace('>', '<');\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    create = (left: Polynom, right: Polynom, sign?: string): Equation => {\r\n        this._left = left;\r\n        this._right = right;\r\n        this._sign = this._formatSign(sign);\r\n        return this;\r\n    };\r\n\r\n    clone = (): Equation => {\r\n        return new Equation().create(this._left.clone(), this._right.clone(), this._sign + '');\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n    // -----------------------------------------------\r\n    private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n        degree: 2\r\n    };\r\n    get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n        return this._randomizeDefaults;\r\n    }\r\n\r\n    set randomizeDefaults(value) {\r\n        this._randomizeDefaults = value;\r\n    }\r\n\r\n    randomize = (opts?: {}, sign?: string): Equation => {\r\n        // TODO: Generate equations randomly, using config.\r\n        return new Equation().create(new Polynom(), new Polynom(), sign);\r\n    };\r\n\r\n\r\n    // -----------------------------------------------\r\n    // Equations operations\r\n    // -----------------------------------------------\r\n    /**\r\n     * Reorder will move all monoms containing a letter on the left, all the other on the right.\r\n     */\r\n    moveLeft = (): Equation => {\r\n        this._left = this._left.clone().subtract(this._right)\r\n        this._right.zero()\r\n        return this;\r\n    }\r\n    reorder = (allLeft?: boolean): Equation => {\r\n        // Move all monoms of degree greater than 0 to the left.\r\n        // and all zero degree monoms to the right.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n\r\n        if (allLeft) {\r\n            return this.moveLeft()\r\n        }\r\n        let mMove: Monom;\r\n        for (let m of this._left.monoms) {\r\n            if (m.degree() === 0) {\r\n                mMove = m.clone();\r\n                this._left.subtract(mMove);\r\n                this._right.subtract(mMove);\r\n            }\r\n        }\r\n\r\n        // Reorder the left and right polynoms\r\n        this._left.reorder();\r\n        this._right.reorder();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiply by the lcm denominator and divide by the gcm numerators.\r\n     */\r\n    simplify = (): Equation => {\r\n        this.multiply(Numeric.lcm(...this._left.getDenominators(),...this._right.getDenominators()));\r\n        this.divide(Numeric.gcd(...this._left.getNumerators(),...this._right.getNumerators()));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Reorder the polynom to have only one letter on the left, the rest on the right.\r\n     * @param letter\r\n     */\r\n    isolate = (letter?: string): Equation | false => {\r\n        // Determine if we can isolate the variables.\r\n\r\n        // Both part of the equations must be of the first degree.\r\n        //TODO: handle equations of degree two or more ?\r\n        if (this.degree(letter) !== 1) {\r\n            return false;\r\n        }\r\n\r\n        // Modify the equation to isolate the asked variable.\r\n        // TODO: must handle equations like 3xy+5y=4 => y = 4/(3x-5)\r\n        if (this.isMultiVariable()) {\r\n            return false;\r\n        }\r\n\r\n        // Isolate the letter.\r\n        let mMove: Monom, cMove: Fraction;\r\n        // Start by moving everything to the left.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n        for (let m of this._left.monoms) {\r\n            if (!m.hasLetter(letter)) {\r\n                mMove = m.clone();\r\n                this._left.add(mMove.clone().opposed());\r\n                this._right.add(mMove.clone().opposed());\r\n            }\r\n        }\r\n\r\n        // In theory, we should have only one item on the left.\r\n        if (this._left.length !== 1) {\r\n            return false;\r\n        }\r\n        cMove = this._left.monoms[0].coefficient.clone();\r\n        this._left.divide(cMove);\r\n        this._right.divide(cMove);\r\n        return this;\r\n    };\r\n\r\n    replaceBy = (letter: string, P: Polynom): Equation => {\r\n        this._left.replaceBy(letter, P)\r\n        this._right.replaceBy(letter, P)\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiple an equation by a fraction value.\r\n     * @param value\r\n     */\r\n    multiply = (value: any): Equation => {\r\n\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        // Multiply each part of the equation by the fraction\r\n        this._left.multiply(F);\r\n        this._right.multiply(F);\r\n\r\n        // The sign of the inequation must be changed.\r\n        if (this._sign !== '=' && F.sign() === -1) {\r\n            this._reverseSign();\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    divide = (value: any): Equation => {\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        if(F.isZero()){\r\n            return this;\r\n        }else {\r\n            return this.multiply(F.invert());\r\n        }\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations helpers\r\n    // -----------------------------------------------\r\n\r\n    /**\r\n     * Get the degree of the equation\r\n     * @param letter\r\n     */\r\n    degree = (letter?: string): number => {\r\n        return Math.max(this._left.degree(letter), this._right.degree(letter));\r\n    };\r\n\r\n    /**\r\n     * Determine if the equation contains more than one letter/variable.\r\n     */\r\n    isMultiVariable = (): boolean => {\r\n        return this._left.isMultiVariable || this._right.isMultiVariable;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        // @ts-ignore\r\n        return [...new Set([...this._left.letters(), ...this._right.letters()])];\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations solving algorithms\r\n    // -----------------------------------------------\r\n    solve = (letter?: string): Equation => {\r\n        // Initialise the variables:\r\n        this._solutions = [];\r\n\r\n        // TODO: this._polynom could be removed.\r\n        // TODO: consolidate solving equations (inequations vs equations)\r\n        this._polynom = this._left.clone().subtract(this._right);\r\n\r\n        switch (this._polynom.degree(letter)) {\r\n            case 0:\r\n            case 1:\r\n                this._solveDegree1(letter);\r\n                break;\r\n            case 2:\r\n                this._solveDegree2(letter);\r\n                break;\r\n            default:\r\n                this._solveDegree3plus(letter);\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    private isGreater = (): boolean => {\r\n        if (this._sign.indexOf('>') !== -1) {\r\n            return true;\r\n        }\r\n        return this._sign.indexOf('geq') !== -1;\r\n\r\n    };\r\n    private isStrictEqual = (): boolean => {\r\n        return this._sign === '=';\r\n    };\r\n    private isAlsoEqual = (): boolean => {\r\n        if (this._sign.indexOf('=') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('geq') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('leq') !== -1) {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    private _solveDegree1 = (letter?: string): string[] => {\r\n        const m1 = this._polynom.monomByDegree(1, letter).coefficient,\r\n            m0 = this._polynom.monomByDegree(0, letter).coefficient,\r\n            v = m0.clone().opposed().divide(m1).display;\r\n        let s: string;\r\n\r\n        if (this.isStrictEqual()) {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0) {\r\n                    this._solutions = [this._real];\r\n                } else {\r\n                    this._solutions = [this._varnothing];\r\n                }\r\n            } else {\r\n                this._solutions = [v];\r\n            }\r\n        } else {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0 && this.isAlsoEqual()) {\r\n                    s = '\\\\mathbb{R}';\r\n                } else {\r\n                    if (m0.value > 0) {\r\n                        s = this.isGreater() ? this._real : this._varnothing;\r\n                    } else {\r\n                        s = !this.isGreater() ? this._real : this._varnothing;\r\n                    }\r\n                }\r\n            } else {\r\n                // Must handle the case if the m1 monom is negative.\r\n                if ((this.isGreater() && m1.sign() === 1) || (!this.isGreater() && m1.sign() === -1)) {\r\n                    s = `\\\\left${this.isAlsoEqual() ? '\\\\[' : '\\\\]'}${v};+\\\\infty\\\\right\\\\[`;\r\n                } else {\r\n                    s = `\\\\left\\\\]-\\\\infty;${v} \\\\right\\\\${this.isAlsoEqual() ? '\\\\]' : '\\\\['}`;\r\n                }\r\n            }\r\n            this._solutions = [s];\r\n        }\r\n\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree2 = (letter?: string): string[] => {\r\n        let aF = this._polynom.monomByDegree(2, letter).coefficient,\r\n            bF = this._polynom.monomByDegree(1, letter).coefficient,\r\n            cF = this._polynom.monomByDegree(0, letter).coefficient,\r\n            delta: number, nthDelta: Nthroot,\r\n            lcm = Numeric.lcm(aF.denominator, bF.denominator, cF.denominator),\r\n            a = aF.multiply(lcm).value,\r\n            b = bF.multiply(lcm).value,\r\n            c = cF.multiply(lcm).value,\r\n            realX1: number, realX2: number,\r\n            sX1: string, sX2: string;\r\n\r\n        delta = b * b - 4 * a * c;\r\n\r\n        if (delta > 0) {\r\n            realX1 = (-b - Math.sqrt(delta)) / (2 * a);\r\n            realX2 = (-b + Math.sqrt(delta)) / (2 * a);\r\n\r\n            if(delta>1.0e5){\r\n                // The delta is too big to be parsed !\r\n                this._solutions = [\r\n                    ((-b - Math.sqrt(delta))/(2 * a)).toFixed(5),\r\n                    ((-b + Math.sqrt(delta))/(2 * a)).toFixed(5)\r\n                ]\r\n            }else {\r\n                nthDelta = new Nthroot().parse(delta).reduce();\r\n                if (nthDelta.hasRadical()) {\r\n                    // -b +- coeff\\sqrt{radical}\r\n                    // -------------------------\r\n                    //           2a\r\n                    let gcd = Numeric.gcd(b, 2 * a, nthDelta.coefficient);\r\n                    nthDelta.coefficient = nthDelta.coefficient / gcd;\r\n\r\n                    // TODO: Can i delete the next line ?\r\n                    // let deltaC = nthDelta.coefficient, deltaR = nthDelta.radical;\r\n                    if (b !== 0) {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                `${-b / gcd} - ${nthDelta.tex}`,\r\n                                `${-b / gcd} + ${nthDelta.tex}`,\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                `\\\\dfrac{${-b / gcd} - ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                `\\\\dfrac{${-b / gcd} + ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                            ]\r\n                        }\r\n                    } else {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                `- ${nthDelta.tex}`,\r\n                                `${nthDelta.tex}`,\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                `\\\\dfrac{- ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                `\\\\dfrac{${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                            ]\r\n                        }\r\n                    }\r\n                } else {\r\n                    // -b +- d / 2a\r\n                    this._solutions = [\r\n                        new Fraction(-b - nthDelta.coefficient, 2 * a).reduce().dfrac,\r\n                        new Fraction(-b + nthDelta.coefficient, 2 * a).reduce().dfrac\r\n                    ]\r\n                }\r\n            }\r\n\r\n        } else if (delta === 0) {\r\n            this._solutions = [new Fraction(-b, 2 * a).reduce().dfrac];\r\n        } else {\r\n            this._solutions = [this._varnothing];\r\n        }\r\n\r\n\r\n        // Handle now the inequations.\r\n        if (!this.isStrictEqual()) {\r\n            if (this._solutions.length === 2) {\r\n                sX1 = (realX1 < realX2) ? this._solutions[0] : this._solutions[1];\r\n                sX2 = (realX1 < realX2) ? this._solutions[1] : this._solutions[0];\r\n\r\n                if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                    this._solutions = [\r\n                        `\\\\left]-\\\\infty ; ${sX1}\\\\right${this.isAlsoEqual() ? ']' : '['} \\\\cup \\\\left${this.isAlsoEqual() ? '[' : ']'}${sX2};+\\\\infty\\\\right[`\r\n                    ];\r\n                } else {\r\n                    this._solutions = [\r\n                        `\\\\left${this.isAlsoEqual() ? '[' : ']'}${sX1} ; ${sX2}\\\\right${this.isAlsoEqual() ? ']' : '['}`\r\n                    ]\r\n                }\r\n            } else if (this._solutions.length === 1 && this._solutions[0] !== this._varnothing) {\r\n                if (!this.isAlsoEqual()) {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [\r\n                            `\\\\left]-\\\\infty ; ${this._solutions[0]}\\\\right[ \\\\cup \\\\left]${this._solutions[0]};+\\\\infty\\\\right[`\r\n                        ];\r\n                    } else {\r\n                        this._solutions = [this._varnothing];\r\n                    }\r\n                } else {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [this._real];\r\n                    } else {\r\n                        // this._solutions = [ this._solutions[0] ];\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.isGreater()) {\r\n                    this._solutions = [aF.sign() === 1 ? this._real : this._varnothing];\r\n                } else {\r\n                    this._solutions = [aF.sign() === -1 ? this._real : this._varnothing];\r\n                }\r\n            }\r\n        }\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree3plus = (letter?: string): string[] => {\r\n        // TODO: try to resolve equations with a degree superior than 2.\r\n        this._solutions = [letter];  // ESLint remove system :(\r\n        return this._solutions;\r\n    };\r\n\r\n}","import {Monom} from \"./monom\";\r\nimport {Polynom} from \"./polynom\";\r\nimport {Equation} from \"./equation\";\r\nimport {LinearSystem} from \"./linearSystem\";\r\nimport {Rational} from \"./rational\";\r\nimport {Logicalset} from \"./logicalset\";\r\n\r\nexport * from \"./equation\"\r\nexport * from \"./linearSystem\"\r\nexport * from \"./logicalset\"\r\nexport * from \"./monom\"\r\nexport * from \"./polynom\"\r\nexport * from \"./rational\"\r\n\r\nexport namespace Algebra {\r\n    export function monom(value?: string): Monom {\r\n        return new Monom(value)\r\n    }\r\n\r\n    export function polynom(polynomString?: string, ...values: any[]): Polynom {\r\n        return new Polynom(polynomString, ...values)\r\n    }\r\n\r\n    export function equation(...equations: any): Equation {\r\n        return new Equation(...equations)\r\n    }\r\n\r\n    export function linearSystem(...equations: string[]): LinearSystem {\r\n        return new LinearSystem(...equations)\r\n    }\r\n\r\n    export function rational(numerator?: Polynom, denominator?: Polynom):Rational {\r\n        return new Rational(numerator, denominator)\r\n    }\r\n\r\n    export function logicalset(value: string):Logicalset {\r\n        return new Logicalset(value)\r\n    }\r\n}","import {Fraction} from \"../coefficients/fraction\";\r\nimport {Equation} from \"./equation\";\r\nimport {Monom} from \"./monom\";\r\nimport {Polynom} from \"./polynom\";\r\nimport {Random} from \"../random/random\";\r\n\r\n\r\nexport class LinearSystem {\r\n    private _solutions: { [letter: string]: { value: Fraction, isReal: boolean, isVarnothing: boolean } };\r\n    private _resolutionSteps: LinearSystem[];\r\n    private _equations: Equation[];\r\n    private _letters: string[];\r\n\r\n    constructor(...equationStrings: string[]) {\r\n        this._equations = [];\r\n        this._letters = 'xy'.split('');\r\n\r\n        if (equationStrings !== undefined && equationStrings.length > 0) {\r\n            this.parse(...equationStrings);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isLinerarSystem() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equations(): Equation[] {\r\n        return this._equations;\r\n    }\r\n\r\n    set equations(value) {\r\n        this._equations = value;\r\n    }\r\n\r\n    get letters(): string {\r\n        return this._letters.join('')\r\n    }\r\n\r\n    set letters(value: string) {\r\n        this._letters = value.split('');\r\n    }\r\n\r\n    get isSolvable(): boolean {\r\n        let V = this.variables;\r\n\r\n        // TODO: in some case, it is possible to resolve systems if there isn't the isSame number of vars and equations\r\n        if (V.length !== this._equations.length) {\r\n            return false;\r\n        }\r\n\r\n        //TOOD: Must check if two equations isn't a linear combination of the others ?\r\n\r\n        return true;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n        for (let E of this._equations) {\r\n            V = V.concat(E.variables);\r\n        }\r\n        return [...new Set(V)].sort();\r\n    }\r\n\r\n    get tex(): string {\r\n        // Build the array of values.\r\n        // Reorder\r\n        // This clone the system :!!!\r\n        //TODO: Avoid cloning this linear system\r\n        let LS = this.clone().reorder(),\r\n            letters = LS.variables,\r\n            equStr: string[],\r\n            equArray: string[] = [],\r\n            m: Monom;\r\n\r\n        // TODO: Manage tex output of linear equations\r\n        for (let equ of LS.equations) {\r\n            equStr = [];\r\n            for (let L of letters) {\r\n                m = equ.left.monomByLetter(L);\r\n\r\n                if (equStr.length === 0) {\r\n                    equStr.push(m.isZero() ? '' : m.tex);\r\n                } else {\r\n                    equStr.push(m.isZero() ? '' : ((m.coefficient.sign() === 1) ? '+' : '') + m.tex);\r\n                }\r\n            }\r\n\r\n            // Add the equal sign\r\n            equStr.push('=');\r\n\r\n            // Add the right hand part of the equation (should be only a number, because it has been reorderd)\r\n            equStr.push(equ.right.tex);\r\n\r\n            // Add to the list.\r\n            equArray.push(equStr.join('&'));\r\n        }\r\n\r\n\r\n        return `\\\\left\\\\{\\\\begin{array}{${\"r\".repeat(letters.length)}cl}${equArray.join('\\\\\\\\\\ ')}\\\\end{array}\\\\right.`;\r\n        //return `\\\\left\\\\{\\\\begin{array}{rrrcl}${this._equations.map(equ => `${equ.tex}`).join('\\\\\\\\\\ \\n')}\\\\end{array}\\\\right.`;\r\n    }\r\n\r\n    get texSolution(): string {\r\n        let tex: string[] = [];\r\n\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n\r\n        for (let letter in this._solutions) {\r\n            if (this._solutions[letter].isReal) {\r\n                console.log(`Undetermined (letter ${letter})`);\r\n                return;\r\n            }\r\n            if (this._solutions[letter].isVarnothing) {\r\n                console.log(`Undefined (letter ${letter})`);\r\n                return;\r\n            }\r\n\r\n            tex.push(this._solutions[letter].value.dfrac);\r\n        }\r\n        return `(${tex.join(';')})`;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...equations: any[]): LinearSystem => {\r\n        this._equations = equations.map(value => new Equation(value));\r\n        this._findLetters();\r\n        return this;\r\n    };\r\n\r\n    setCoefficient = (...coefficients: string[]): LinearSystem => {\r\n        // Reset the equations list\r\n        this._equations = [];\r\n\r\n        let i = 0;\r\n        while (i < coefficients.length - this._letters.length) {\r\n            let left = new Polynom().parse(this._letters.join(''), ...coefficients.slice(i, i + this._letters.length)),\r\n                right = new Polynom(coefficients[i + this._letters.length].toString()),\r\n                equ = new Equation().create(left, right);\r\n            this._equations.push(equ.clone());\r\n\r\n            i = i + this._letters.length + 1;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): LinearSystem => {\r\n        return new LinearSystem().parse(...this._equations.map(equ => equ.clone()));\r\n    };\r\n\r\n    setLetters = (...letters: string[]): LinearSystem => {\r\n        this._letters = letters;\r\n        return this\r\n    }\r\n    private _findLetters = (): LinearSystem => {\r\n        // Find all letters used.\r\n        let variables = new Set();\r\n\r\n        for (let equ of this._equations) {\r\n            variables = new Set([...variables, ...equ.variables]);\r\n        }\r\n\r\n        // TODO: How to transform (Set of string) to string[]\r\n        // @ts-ignore\r\n        this._letters = [...variables];\r\n        return this;\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n    // -----------------------------------------------\r\n    generate = (...solutions: Fraction[] | number[]): LinearSystem => {\r\n        let solutionsF: Fraction[] = [];\r\n\r\n        // Convert the numbers to fractions if necessary\r\n        for (let s of solutions) {\r\n            if (typeof s === \"number\") {\r\n                solutionsF.push(new Fraction(s.toString()));\r\n            } else {\r\n                solutionsF.push(s.clone());\r\n            }\r\n        }\r\n\r\n        // Create the equations and make sure they are not linear combined.\r\n        this._equations = [];\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            this._equations.push(this._generateOneEquation(...solutionsF));\r\n        }\r\n        return this;\r\n    };\r\n    private _generateOneEquation = (...solutions: Fraction[]): Equation => {\r\n        let coeff: number[] = [], leftValue: Fraction = new Fraction().zero(),\r\n            letters: string[] = ['x', 'y', 'z', 't', 'u', 'v', 'w', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],\r\n            equString: string = '', equ: Equation;\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            coeff.push(Random.numberSym(5));\r\n            leftValue.add(solutions[i].clone().multiply(coeff[i]));\r\n            equString += `${(coeff[i] < 0) ? coeff[i] : '+' + coeff[i]}${letters[i]}`\r\n        }\r\n\r\n        // LeftValue contains the left part oof the equation - and is then the isSame as the right part.\r\n        // It might be a Fraction.\r\n\r\n        // Must check if it's not a linear combination\r\n        equ = new Equation(`${equString}=${leftValue.display}`);\r\n        if (equ.right.monoms[0].coefficient.denominator != 1) {\r\n            equ.multiply(new Fraction(equ.right.monoms[0].coefficient.denominator, 1));\r\n        }\r\n        if (this._checkIfLinerCombination(equ)) {\r\n            return equ;\r\n        } else {\r\n            return this._generateOneEquation(...solutions);\r\n        }\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    private _linearReduction(eq1: Equation, eq2: Equation, letter: string): Equation {\r\n        // TODO: handle other signs for equations ?\r\n        // Get the monom for the particular letter.\r\n        let c1 = eq1.left.monomByDegree(1, letter).coefficient.clone(),\r\n            c2 = eq2.left.monomByDegree(1, letter).coefficient.clone().opposed();\r\n\r\n        return this.mergeEquations(eq1, eq2, c2, c1);\r\n    }\r\n\r\n    mergeEquations = (eq1: Equation, eq2: Equation, factor1: any, factor2: any): Equation => {\r\n        // Set and clone the equations.\r\n\r\n        let eq1multiplied = eq1.clone().multiply(new Fraction(factor1)),\r\n            eq2multiplied = eq2.clone().multiply(new Fraction(factor2));\r\n\r\n        // Add both equations together.\r\n        eq1multiplied.left.add(eq2multiplied.left);\r\n        eq1multiplied.right.add(eq2multiplied.right);\r\n\r\n        return eq1multiplied;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Solvers algorithm\r\n    // ------------------------------------------\r\n    reorder = (): LinearSystem => {\r\n        for (let E of this._equations) {\r\n            E.reorder();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    solve = (): LinearSystem => {\r\n        // Solve it by linear\r\n        this._solutions = {};\r\n        this._resolutionSteps = [];\r\n\r\n        // Reorder all equations.\r\n        this.reorder();\r\n\r\n        // Get all variables in the linear system\r\n        let V = this.variables.sort();\r\n\r\n        for (let letter of V) {\r\n            this._solutions[letter] = this._solveOneLetter(letter, V)\r\n        }\r\n\r\n        // TODO: LinearSystem - solve: optimization and handle undetermined and undefined systems.\r\n        return this;\r\n    };\r\n\r\n    private _checkIfLinerCombination = (equ: Equation): boolean => {\r\n\r\n        return true;\r\n    };\r\n\r\n    private _solveOneLetter(letter: string, V: string[]): { value: Fraction, isReal: boolean, isVarnothing: boolean } {\r\n        // list of equations.\r\n        let LE: Equation[] = this.clone().equations,\r\n            reducedEquations: Equation[] = [];\r\n\r\n        // Reduce the equations.\r\n        // Do it as long as there is more than one step, but no more than the number of equations.\r\n        for (let L of V) {\r\n            // remove the setLetter from all equations using linear combinations\r\n            if (L === letter) {\r\n                continue;\r\n            }\r\n\r\n            // Linear reduction.\r\n            // TODO: Search for better association\r\n            for (let i = 0; i < LE.length - 1; i++) {\r\n                reducedEquations.push(this._linearReduction(LE[i], LE[i + 1], L));\r\n            }\r\n\r\n            // Keep track of each steps.\r\n            this._resolutionSteps.push(new LinearSystem().parse(...reducedEquations));\r\n\r\n            // Set the list of equations to the new version.\r\n            LE = this._resolutionSteps[this._resolutionSteps.length - 1].clone().equations;\r\n\r\n            // Reset the stack\r\n            reducedEquations = [];\r\n        }\r\n\r\n        // Solve the equations\r\n        let E = this._resolutionSteps[this._resolutionSteps.length - 1].equations[0];\r\n        E.solve();\r\n\r\n        return {\r\n            value: new Fraction(E.solutions[0]),\r\n            isReal: E.isReal,\r\n            isVarnothing: E.isVarnothing\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Helpers\r\n    // ------------------------------------------\r\n    log = (): string => {\r\n        let str: string = '';\r\n\r\n        for (let E of this._equations) {\r\n            console.log(E.tex);\r\n            str += `${E.tex}\\\\n}`;\r\n        }\r\n\r\n        return str;\r\n    };\r\n}","/**\r\n * Polynom module contains everything necessary to handle polynoms.\r\n * @module Logicalset\r\n */\r\n\r\nimport {Shutingyard} from '../shutingyard';\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n */\r\nexport class Logicalset {\r\n    private _rawString: string;\r\n    private _rpn: { token: string, tokenType: string }[]\r\n\r\n    /**\r\n     *\r\n     * @param {string} value (optional) Default polynom to parse on class creation\r\n     */\r\n    constructor(value: string) {\r\n        this._rawString = value\r\n        this.parse(value)\r\n        return this;\r\n    }\r\n\r\n    get isLogicalset() {\r\n        return true;\r\n    };\r\n\r\n    private parse = (value: string): Logicalset => {\r\n        // TODO: Must format the value string to convert some items...\r\n\r\n        // Parse the updated value to the shutingyard algorithm\r\n        this._rpn = new Shutingyard('set').parse(value).rpn;\r\n\r\n        return this;\r\n    }\r\n\r\n    evaluate(tokenSets: { [key: string]: any[] }, reference?: any[]): any[] {\r\n        let varStack: (Set<unknown>)[] = []\r\n\r\n        let referenceSet: Set<unknown>\r\n        if (reference === undefined) {\r\n            referenceSet = new Set()\r\n            for (let key in tokenSets) {\r\n                referenceSet = new Set([...referenceSet, ...tokenSets[key]])\r\n            }\r\n        } else {\r\n            referenceSet = new Set(reference)\r\n        }\r\n\r\n        for (let token of this._rpn) {\r\n            if (token.tokenType === 'variable') {\r\n                // The variable has no token - assume it's empty.\r\n                if (tokenSets[token.token] === undefined) {\r\n                    varStack.push(new Set())\r\n                } else {\r\n                    varStack.push(new Set(tokenSets[token.token]));\r\n                }\r\n\r\n            } else {\r\n                switch (token.token) {\r\n                    case '&':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            varStack.push(new Set([...first].filter(x => second.has(x))))\r\n                        }\r\n                        break\r\n                    case '|':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n                            varStack.push(new Set([...first, ...second]))\r\n                        }\r\n                        break\r\n                    case '-':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n                            varStack.push(new Set([...first].filter(x => !second.has(x))))\r\n                        }\r\n                        break\r\n                    case '!':\r\n                        if (varStack.length >= 1) {\r\n                            let first = varStack.pop()\r\n\r\n                            varStack.push(new Set([...referenceSet].filter(x => !first.has(x))))\r\n                        }\r\n                        break\r\n                }\r\n            }\r\n        }\r\n\r\n        return [...varStack[0]].sort();\r\n    }\r\n\r\n    vennAB(): any[] {\r\n        return this.evaluate({\r\n                A: ['A', 'AB'],\r\n                B: ['B', 'AB']\r\n            },\r\n            ['A', 'B', 'AB', 'E']\r\n        )\r\n    }\r\n\r\n    vennABC(): any[] {\r\n        return this.evaluate({\r\n                A: ['A', 'AB', 'AC', 'ABC'],\r\n                B: ['B', 'AB', 'BC', 'ABC'],\r\n                C: ['C', 'AC', 'BC', 'ABC']\r\n            },\r\n            ['A', 'B', 'C', 'AB', 'AC', 'BC', 'E']\r\n        )\r\n    }\r\n\r\n    get rpn(): { token: string, tokenType: string }[] {\r\n        return this._rpn\r\n    }\r\n\r\n    get tex(): string {\r\n        let varStack: { token:string, tokenType: string } [] = []\r\n\r\n        for (let token of this._rpn) {\r\n            if (token.tokenType === 'variable') {\r\n                varStack.push(token);\r\n            } else {\r\n                switch (token.token) {\r\n                    case '&':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if(first.tokenType==='mix'){first.token = `( ${first.token} )`}\r\n                            if(second.tokenType==='mix'){second.token = `( ${second.token} )`}\r\n                            varStack.push({token: `${first.token} \\\\cap ${second.token}`, tokenType: 'mix'})\r\n                        }\r\n                        break\r\n                    case '|':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if(first.tokenType==='mix'){first.token = `( ${first.token} )`}\r\n                            if(second.tokenType==='mix'){second.token = `( ${second.token} )`}\r\n                            varStack.push({token: `${first.token} \\\\cup ${second.token}`, tokenType: 'mix'})\r\n                        }\r\n                        break\r\n                    case '-':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if(first.tokenType==='mix'){first.token = `( ${first.token} )`}\r\n                            if(second.tokenType==='mix'){second.token = `( ${second.token} )`}\r\n                            varStack.push({token: `${first.token} \\\\setminus ${second.token}`, tokenType: 'mix'})\r\n                        }\r\n                        break\r\n                    case '!':\r\n                        if (varStack.length >= 1) {\r\n                            let first = varStack.pop()\r\n                            varStack.push({token: `\\\\overline{ ${first.token} }`, tokenType: 'variable'})\r\n                        }\r\n                        break\r\n                }\r\n            }\r\n        }\r\n\r\n        return varStack[0].token\r\n    }\r\n}\r\n","/***\r\n * Monom class\r\n * Defined as coefficient * literal\r\n * Examples: 3x^2, 3/5x^2, ...\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Numeric} from \"../numeric\";\r\n\r\nexport class Monom {\r\n    private _coefficient: Fraction;\r\n    private _literal: { [Key: string]: number };\r\n\r\n    /**\r\n     * Create the monom object.\r\n     * @param value (optional) string\r\n     */\r\n    constructor(value?: string) {\r\n        this.zero();\r\n\r\n        if (value !== undefined) {\r\n            // A string is given - try to parse the value.\r\n            this.parse(value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get isMonom() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Get the coefficient as fraction\r\n     */\r\n    get coefficient(): Fraction {\r\n        return this._coefficient;\r\n    }\r\n\r\n    /**\r\n     * Set the coefficient value of the monom\r\n     * @param F     Fraction\r\n     */\r\n    set coefficient(F: Fraction) {\r\n        this._coefficient = F;\r\n    }\r\n\r\n    /**\r\n     * Get the literal part, as dictionary\r\n     */\r\n    get literal(): { [Key: string]: number } {\r\n        return this._literal;\r\n    }\r\n\r\n    get literalSqrt(): { [Key: string]: number } {\r\n\r\n        if (this.isLitteralSquare()) {\r\n            let L: { [Key: string]: number } = {}\r\n            for (let key in this._literal) {\r\n                L[key] = this._literal[key] / 2\r\n            }\r\n            return L;\r\n        } else {\r\n            return this._literal;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom\r\n     * @param L     Literal part as dictionary: <setLetter: exposant>\r\n     */\r\n    set literal(L: { [Key: string]: number }) {\r\n        this._literal = L;\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom from a string\r\n     * @param inputStr  String like x^2y^3\r\n     */\r\n    set literalStr(inputStr: string) {\r\n        // Match all x^n\r\n        for (const v of [...inputStr.matchAll(/([a-z])\\^([+-]?[0-9]+)/g)]) {\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = 0;\r\n            }\r\n            this._literal[v[1]] += +v[2];\r\n        }\r\n        for (const v of [...inputStr.matchAll(/([a-z](?!\\^))/g)]) {\r\n            // Match all single letters\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = 0;\r\n            }\r\n            this._literal[v[1]] += 1;\r\n        }\r\n    }\r\n\r\n    // Getter heplers.\r\n    /**\r\n     * Get the variables letters\r\n     */\r\n    get variables(): string[] {\r\n        this.clone().clean();\r\n        return Object.keys(this._literal)\r\n    }\r\n\r\n    // Display getter\r\n    /**\r\n     * This display getter is to be used in the polynom display getter\r\n     */\r\n    get display(): string {\r\n        let L: string = '';\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter] !== 0) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter] > 1) {\r\n                    L += `^${this._literal[letter]}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.display}`;\r\n            } else {\r\n                return '';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.display}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    get dividers(): Monom[] {\r\n        // Decompose only if the coefficient it a complet value\r\n        if (this.coefficient.denominator !== 1) {\r\n            return [this.clone()]\r\n        }\r\n\r\n        // Security : do not do this if greater than 10000\r\n        if (this.coefficient.numerator > 10000) {\r\n            return [this.clone()]\r\n        }\r\n        const dividers = Numeric.dividers(Math.abs(this.coefficient.numerator))\r\n\r\n        // Decompose the litterals parts.\r\n        let litterals: { [key: string]: number }[] = [];\r\n        for (let L in this.literal) {\r\n            // L is the letter.\r\n            litterals = this._getLitteralDividers(litterals, L)\r\n        }\r\n\r\n        const monomDividers: Monom[] = [];\r\n        if (litterals.length > 0 && dividers.length>0) {\r\n            for (let N of dividers) {\r\n                for (let L of litterals) {\r\n                    let M = new Monom();\r\n                    M.coefficient = new Fraction(N)\r\n                    M.literal = L\r\n                    monomDividers.push(M)\r\n                }\r\n            }\r\n        }else if (dividers.length===0) {\r\n            for (let L of litterals) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction().one()\r\n                M.literal = L\r\n                monomDividers.push(M)\r\n            }\r\n        } else {\r\n            for (let N of dividers) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction(N)\r\n                monomDividers.push(M)\r\n            }\r\n        }\r\n\r\n        return monomDividers.length===0? [new Monom().one()]: monomDividers;\r\n    }\r\n\r\n    private _getLitteralDividers(arr: { [key: string]: number }[], letter: string): { [key: string]: number }[] {\r\n        let tmpList: { [key: string]: number }[] = [];\r\n\r\n        for (let d = 0; d <= this.literal[letter]; d++) {\r\n            if (arr.length === 0) {\r\n                let litt: { [key: string]: number } = {}\r\n                litt[letter] = d\r\n                tmpList.push(litt)\r\n            } else {\r\n                for (let item of arr) {\r\n                    let litt: { [key: string]: number } = {}\r\n                    for(let currentLetter in item){\r\n                        litt[currentLetter] = item[currentLetter]\r\n                    }\r\n                    litt[letter] = d\r\n                    tmpList.push(litt)\r\n                }\r\n            }\r\n        }\r\n        return tmpList;\r\n    }\r\n\r\n    /**\r\n     * Display the monom, forcing the '+' sign to appear\r\n     */\r\n    get displayWithSign(): string {\r\n        // TODO: Rename or remove this getter ?\r\n        let d: String = this.display;\r\n        return (d[0] !== '-' ? '+' : '') + d;\r\n    }\r\n\r\n    /**\r\n     * Get the tex output of the monom\r\n     */\r\n    get tex(): string {\r\n        let L: string = '';\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter] !== 0) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter] > 1) {\r\n                    L += `^${this._literal[letter]}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.dfrac}`;\r\n            } else {\r\n                return '0';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.dfrac}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // -----------------------------------------\r\n    /**\r\n     * Parse a string to a monom. The string may include fraction.\r\n     * @param inputStr\r\n     */\r\n    parse = (inputStr: string): Monom => {\r\n        // Set the literal part.\r\n        this.literalStr = inputStr;\r\n\r\n        // Get the coefficient\r\n        this._coefficient = new Fraction();\r\n\r\n        for (const v of [...inputStr.replace(/([a-z])|(\\^[+-]?[0-9]+)/g, ',').split(',')]) {\r\n            // The value is empty.\r\n            if (v.trim() === '') {\r\n                continue;\r\n            }\r\n\r\n            // Multiple the current coefficient by the new found value.\r\n            this._coefficient.multiply(new Fraction(v.trim()));\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Clone the current Monom.\r\n     */\r\n    clone = (): Monom => {\r\n        let F: Monom = new Monom();\r\n\r\n        F.coefficient = this._coefficient.clone();\r\n\r\n        // Copy the literal parts.\r\n        for (let k in this._literal) {\r\n            F.setLetter(k, this._literal[k]);\r\n        }\r\n        return F;\r\n    };\r\n\r\n    /**\r\n     * Create a zero value monom\r\n     */\r\n    zero = (): Monom => {\r\n        this._coefficient = new Fraction().zero();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Create a one value monom\r\n     */\r\n    one = (): Monom => {\r\n        this._coefficient = new Fraction().one();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Clean the monom by removing each letters with a power of zero.\r\n     */\r\n    clean = (): Monom => {\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter] === 0) {\r\n                delete this._literal[letter];\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Get the opposed\r\n     * Returns a monom.\r\n     */\r\n    opposed = (): Monom => {\r\n        this._coefficient.opposed();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Add all similar monoms. If they aren't similar, they are simply skipped.\r\n     * @param M (Monom[]) The monoms to add.\r\n     */\r\n    add = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                this._coefficient.add(m.coefficient);\r\n            } else {\r\n                console.log('Add: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Subtract multiple monoms\r\n     * @param M (Monom[]) The monoms to subtract\r\n     */\r\n    subtract = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                this._coefficient.add(m.coefficient.clone().opposed());\r\n            } else {\r\n                console.log('Subtract: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiple multiple monoms to the current monom\r\n     * @param M (Monom[]) The monoms to multiply to.\r\n     */\r\n    multiply = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            // Multiply the coefficient.\r\n            this._coefficient.multiply(m.coefficient);\r\n            // Multiply the literal parts.\r\n            for (let letter in m.literal) {\r\n                this._literal[letter] = (this._literal[letter] === undefined) ? m.literal[letter] : this._literal[letter] + m.literal[letter];\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiplyByNumber = (F: Fraction | number): Monom => {\r\n        this._coefficient.multiply(F);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divide the current monoms by multiple monoms\r\n     * @param M (Monom[])\r\n     */\r\n    divide = (...M: Monom[]): Monom => {\r\n        // Depending on the given value, choose the current item\r\n        for (let v of M) {\r\n            // Divide the coefficient\r\n            this._coefficient.divide(v.coefficient);\r\n\r\n            // Subtract the power values\r\n            for (let letter in v.literal) {\r\n                this._literal[letter] = (this._literal[letter] === undefined) ? -v.literal[letter] : this._literal[letter] - v.literal[letter];\r\n\r\n                // If the power of a particular setLetter is zero, delete it from the literal part..\r\n                if (this._literal[letter] === 0) {\r\n                    delete this._literal[letter];\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the pow of a monom.\r\n     * @param nb (number) : Mathematical pow\r\n     */\r\n    pow = (nb: number): Monom => {\r\n        this._coefficient.pow(nb);\r\n        for (let letter in this._literal) {\r\n            this._literal[letter] *= nb;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the nth-root of the monom\r\n     * @param p\r\n     */\r\n    root = (p: number): Monom => {\r\n        // TODO: determiner the nth root of a monom\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Return the square root of a monom\r\n     */\r\n    sqrt = (): Monom => {\r\n        if (this.isSquare()) {\r\n            this._coefficient.sqrt();\r\n            for (let letter in this._literal) {\r\n                this._literal[letter] /= 2;\r\n            }\r\n        }\r\n        return this.root(2);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    compare = (M: Monom, sign?: string): boolean => {\r\n        // TODO: Build the compare systems.\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // To be equal, they must be the isSame\r\n                if (!this.compare(M, 'same')) {\r\n                    return false;\r\n                }\r\n\r\n                // The litteral parts are the isSame. The coefficient must be equal\r\n                return this._coefficient.isEqual(M.coefficient);\r\n            case 'same':\r\n                // Get the list of all variables from both monoms.\r\n                let M1: string[] = this.variables,\r\n                    M2: string[] = M.variables,\r\n                    K: string[] = M1.concat(M2.filter((item) => M1.indexOf(item) < 0));\r\n\r\n                for (let key of K) {\r\n                    // The setLetter is not available in one of the monom\r\n                    if (this._literal[key] === undefined || M.literal[key] === undefined) {\r\n                        return false;\r\n                    }\r\n                    // The setLetter does not have the isSame power in each monoms.\r\n                    if (this._literal[key] !== M.literal[key]) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                // All are positive check - the monoms are the sames.\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is null\r\n     */\r\n    isZero(): boolean {\r\n        return this._coefficient.value === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is one\r\n     */\r\n    isOne(): boolean {\r\n        return this._coefficient.value === 1 && this.variables.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if two monoms are equals\r\n     * @param M\r\n     */\r\n    isEqual = (M: Monom): boolean => {\r\n        return this.compare(M, '=');\r\n    };\r\n\r\n    /**\r\n     * Determine if two monoms are similar\r\n     * @param M\r\n     */\r\n    isSameAs = (M: Monom): boolean => {\r\n        return this.compare(M, 'same');\r\n    };\r\n\r\n    isSquare = (): boolean => {\r\n        if (!this.coefficient.isSquare()) {\r\n            return false;\r\n        }\r\n        return this.isLitteralSquare();\r\n    }\r\n\r\n    isLitteralSquare = (): boolean => {\r\n        for (let letter in this.literal) {\r\n            if (this.literal[letter] % 2 !== 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    // ------------------------------------------\r\n    // Misc monoms functions\r\n    // -------------------------------------\r\n    /**\r\n     * Determine if a monom contains a setLetter in it's literal part\r\n     * @param letter\r\n     */\r\n    hasLetter = (letter?: string): boolean => {\r\n        return this._literal[letter === undefined ? 'x' : letter] > 0;\r\n    };\r\n\r\n    /**\r\n     * Set the power of a particular setLetter\r\n     * @param letter (string) Letter to change\r\n     * @param pow (number) Power of the setLetter (must be positive integer.\r\n     */\r\n    setLetter = (letter: string, pow: number): void => {\r\n        // If the power is not legal or is zero, remove the setLetter from the dict\r\n        if (pow <= 0 || !Number.isSafeInteger(pow)) {\r\n            if (this._literal[letter] !== undefined) {\r\n                delete this._literal[letter];\r\n            }\r\n        } else {\r\n            this._literal[letter] = pow;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the degree of a monom. If no setLetter is given, the result will be the global degree.\r\n     * @param letter (string) Letter to get to degree (power)\r\n     */\r\n    degree = (letter?: string): number => {\r\n        if (this.variables.length === 0) {\r\n            return 0;\r\n        }\r\n        if (letter === undefined) {\r\n            // Not setLetter given -> we get the global monom degree (sum of all the letters).\r\n            return Object.values(this._literal).reduce((t, n) => t + n);\r\n        } else {\r\n            // A setLetter is given -> get the corresponding power.\r\n            return this._literal[letter] === undefined ? 0 : this._literal[letter];\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Evaluate a monom. Each setLetter must be assigned to a Fraction.\r\n     * @param values    Dictionary of <setLetter: Fraction>\r\n     */\r\n    evaluate = (values: { [key: string]: Fraction|number }|Fraction|number): Fraction => {\r\n        let r = this.coefficient.clone();\r\n\r\n        if(typeof values === 'number' || values instanceof Fraction){\r\n            let tmpValues:{ [key: string]: Fraction|number } = {}\r\n\r\n            tmpValues[this.variables[0]] = new Fraction(values)\r\n            return this.evaluate(tmpValues);\r\n        }\r\n\r\n        if(typeof values === 'object') {\r\n            for (let L in this._literal) {\r\n                if (values[L] === undefined) {\r\n                    return new Fraction().zero();\r\n                }\r\n                let value = new Fraction(values[L])\r\n                r.multiply(value.pow(this._literal[L]));\r\n            }\r\n        }\r\n        return r;\r\n    };\r\n\r\n    /**\r\n     * Derivative the monom\r\n     * @param letter\r\n     */\r\n    derivative = (letter?: string): Monom => {\r\n        // No setLetter given - assume it's the setLetter 'x'\r\n        if (letter === undefined) {\r\n            letter = 'x';\r\n        }\r\n        if (this.hasLetter(letter)) {\r\n            let d = +this._literal[letter],\r\n                dM = this.clone();\r\n\r\n            // Subtract one to the degree.\r\n            dM._literal[letter] -= 1;\r\n\r\n            // Multiply the coefficient by the previous degree\r\n            dM._coefficient.multiply(new Fraction('' + d));\r\n            return dM;\r\n        } else {\r\n            return new Monom().zero();\r\n        }\r\n    };\r\n\r\n    primitive = (letter?: string): Monom => {\r\n        if(letter===undefined){letter = 'x'}\r\n\r\n        // Zero monom\r\n        let M = this.clone()\r\n\r\n        if(M.hasLetter(letter)){\r\n            M.coefficient = M.coefficient.clone().divide(M.degree(letter)+1)\r\n            M.setLetter(letter, M.degree(letter)+1)\r\n        }else{\r\n            // There is no letter.\r\n\r\n            // The coefficient might be zero (=> x) or a number a (=> ax)\r\n            if(M.coefficient.isZero()){\r\n                M.coefficient = new Fraction().one()\r\n            }\r\n            M.setLetter(letter, 1)\r\n        }\r\n        return M\r\n    }\r\n    // ----------------------------------------\r\n    // Static functions\r\n    // ----------------------------------------\r\n\r\n    /**\r\n     * Get the least common multiple of monoms\r\n     * @param monoms    Array of monoms\r\n     */\r\n    static lcm = (...monoms: Monom[]): Monom => {\r\n        let M = new Monom(),\r\n            coeffN: number[] = monoms.map(value => value.coefficient.numerator),\r\n            coeffD: number[] = monoms.map(value => value.coefficient.denominator),\r\n            n = Numeric.gcd(...coeffN),\r\n            d = Numeric.lcm(...coeffD);\r\n\r\n        // Get the coefficient.\r\n        M.coefficient = new Fraction(n, d).reduce();\r\n\r\n        // Set the literal parts - go through each monoms literal parts and get only the lowest degree of each letters.\r\n        for (let m of monoms) {\r\n            // Remove the inexistant letters from the resulting monom\r\n            for (let letter in M.literal) {\r\n                if (!(letter in m.literal)) {\r\n                    M.literal[letter] = 0;\r\n                }\r\n            }\r\n            for (let letter in m.literal) {\r\n                if (M.literal[letter] === undefined && m.literal[letter] > 0) {\r\n                    M.literal[letter] = m.literal[letter];\r\n                } else {\r\n                    M.literal[letter] = Math.min(m.literal[letter], M.literal[letter]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n    /**\r\n     * Multiply two monoms and return a NEW monom.\r\n     * @param monoms\r\n     */\r\n    static xmultiply = (...monoms: Monom[]): Monom => {\r\n        let M = new Monom().one();\r\n\r\n        for (let m of monoms) {\r\n            M.multiply(m);\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Determine if multiple monoms are similar\r\n     * @param M\r\n     */\r\n    areSameAs = (...M: Monom[]): boolean => {\r\n        let result: boolean = true;\r\n\r\n        // Check all monoms if they are the isSame as the \"this\" one.\r\n        for (let i = 0; i < M.length; i++) {\r\n            if (!this.isSameAs(M[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All check passed -> all the monoms are similar.\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Determine if multiple monoms are equals\r\n     * @param M\r\n     */\r\n    areEquals = (...M: Monom[]): boolean => {\r\n        // They are not similar.\r\n        if (!this.areSameAs(...M)) {\r\n            return false;\r\n        }\r\n\r\n        // Check all coefficient. They must be equals.\r\n        for (let m of M) {\r\n            if (!this._coefficient.isEqual(m.coefficient)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All checks passed.\r\n        return true;\r\n    };\r\n\r\n}","/**\r\n * Polynom module contains everything necessary to handle polynoms.*\r\n * @module Polynom\r\n */\r\n\r\nimport {Monom} from './monom';\r\nimport {Shutingyard} from '../shutingyard';\r\nimport {Numeric} from '../numeric';\r\nimport {Fraction} from '../coefficients';\r\nimport {Random} from \"../random\";\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n * ```\r\n * let P = new Polynom('3x-4')\r\n * ```\r\n */\r\nexport class Polynom {\r\n    private _rawString: string;\r\n    private _monoms: Monom[];\r\n    private _factors: Polynom[];\r\n    private _texString: string;\r\n\r\n    /**\r\n     *\r\n     * @param {string} polynomString (optional) Default polynom to parse on class creation\r\n     * @param values\r\n     */\r\n    constructor(polynomString?: string, ...values: any[]) {\r\n        this._monoms = [];\r\n        this._factors = [];\r\n        if (polynomString !== undefined) {\r\n            this.parse(polynomString, ...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    get isPolynom() {\r\n        return true;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get monoms() {\r\n        return this._monoms;\r\n    }\r\n\r\n    set monoms(M: Monom[]) {\r\n        this._monoms = M;\r\n    }\r\n\r\n    get factors(): Polynom[] {\r\n        return this._factors;\r\n    }\r\n\r\n    set factors(value: Polynom[]) {\r\n        this._factors = value;\r\n    }\r\n\r\n    get texFactors(): string {\r\n        this.factorize()\r\n\r\n        let tex = ''\r\n        for (let f of this.factors) {\r\n            if (f.monoms.length > 1) {\r\n                tex += `(${f.tex})`\r\n            } else {\r\n                tex = f.tex + tex;\r\n            }\r\n        }\r\n        return tex;\r\n    }\r\n\r\n    get texString(): string {\r\n        return this._texString;\r\n    }\r\n\r\n    get length() {\r\n        // TODO: Must reduce the monoms list to remove the zero coefficient.\r\n        return this._monoms.length;\r\n    }\r\n\r\n    get display(): string {\r\n        return this.genDisplay();\r\n    }\r\n\r\n    get raw(): string {\r\n        return this._rawString\r\n    }\r\n\r\n    get tex(): string {\r\n        return this.genDisplay('tex');\r\n    }\r\n\r\n    get isMultiVariable(): boolean {\r\n        const B = false;\r\n        for (const m of this._monoms) {\r\n            if (m.variables.length > 1) {\r\n                return true;\r\n            }\r\n        }\r\n        return B;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            V = V.concat(m.variables);\r\n        }\r\n\r\n        // Remove duplicates.\r\n        V = [...new Set(V)];\r\n\r\n        return V;\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    private genDisplay = (output?: string, forceSign?: boolean, wrapParentheses?: boolean): string => {\r\n        let P: string = '';\r\n\r\n        for (const k of this._monoms) {\r\n            if (k.coefficient.value === 0) {\r\n                continue;\r\n            }\r\n\r\n            P += `${(k.coefficient.sign() === 1 && (P !== '' || forceSign === true)) ? '+' : ''}${(output === 'tex') ? k.tex : k.display}`;\r\n        }\r\n\r\n        if (wrapParentheses === true && this.length > 1) {\r\n            if (output === 'tex') {\r\n                P = `\\\\left( ${P} \\\\right)`;\r\n            } else {\r\n                P = `(${P})`;\r\n            }\r\n        }\r\n\r\n        if (P === '') {\r\n            P = '0';\r\n        }\r\n        return P;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse a string to a polynom.\r\n     * @param inputStr\r\n     * @param values: as string, numbers or fractions\r\n     */\r\n    parse = (inputStr: string, ...values: any[]): Polynom => {\r\n        if (values === undefined || values.length === 0) {\r\n            inputStr = '' + inputStr;\r\n            this._rawString = inputStr;\r\n\r\n            // Parse the polynom using the shuting yard algorithm\r\n            if (inputStr !== '' && !isNaN(Number(inputStr))) {\r\n                this.empty();\r\n                // It's a simple number.\r\n                let m = new Monom();\r\n                m.coefficient = new Fraction(inputStr);\r\n                m.literalStr = '';\r\n                this.add(m);\r\n                return this;\r\n            }\r\n\r\n            // Parse the string.\r\n            return this.shutingYardToReducedPolynom(inputStr);\r\n        } else if (/^[a-z]/.test(inputStr)) {\r\n            // We assume the inputStr contains only letters.\r\n            this.empty();\r\n\r\n            let fractions = values.map(x => new Fraction(x));\r\n            // Multiple setLetter version\r\n            if (inputStr.length > 1) {\r\n                // TODO: check that the number of values given correspond to the letters (+1 eventually)\r\n                let letters = inputStr.split(''),\r\n                    i = 0;\r\n                for (let F of fractions) {\r\n                    let m = new Monom();\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = letters[i] || '';\r\n                    this.add(m);\r\n                    i++;\r\n                }\r\n            }\r\n            // Single setLetter version\r\n            else {\r\n                let n = fractions.length - 1;\r\n                for (let F of fractions) {\r\n                    let m = new Monom()\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = `${inputStr}^${n}`\r\n                    this.add(m);\r\n                    n--;\r\n                }\r\n            }\r\n            return this;\r\n        } else {\r\n            return this.zero();\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * Main parse using a shutting yard class\r\n     * @param inputStr\r\n     */\r\n    private shutingYardToReducedPolynom = (inputStr: string): Polynom => {\r\n        // Get the RPN array of the current expression\r\n        const SY: Shutingyard = new Shutingyard().parse(inputStr);\r\n        const rpn: { token: string, tokenType: string }[] = SY.rpn;\r\n        let m1: Polynom;\r\n        let m2: Polynom;\r\n\r\n        let stack: Polynom[] = [],\r\n            previousToken: string = null,\r\n            tempPolynom\r\n        for (const element of rpn) {\r\n            if (element.tokenType === 'coefficient' || element.tokenType === 'variable') {\r\n                tempPolynom = new Polynom().zero();\r\n                tempPolynom.monoms = [new Monom(element.token)]\r\n                stack.push(tempPolynom.clone())\r\n            } else if (element.tokenType === 'operation') {\r\n                m2 = (stack.pop()) || new Polynom().zero();\r\n                m1 = (stack.pop()) || new Polynom().zero();\r\n                switch (element.token) {\r\n                    case '+':\r\n                        stack.push(m1.add(m2))\r\n                        break;\r\n                    case '-':\r\n                        stack.push(m1.subtract(m2))\r\n                        break;\r\n                    case '*':\r\n                        stack.push(m1.multiply(m2))\r\n                        break;\r\n                    case '^':\r\n                        stack.push(m1.pow(+previousToken))\r\n                }\r\n            }\r\n            previousToken = element.token;\r\n        }\r\n\r\n        this._monoms = stack[0].monoms;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the polynom\r\n     */\r\n    clone = (): Polynom => {\r\n        const P = new Polynom();\r\n        const M: Monom[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            M.push(m.clone());\r\n        }\r\n\r\n        P.monoms = M;\r\n        return P;\r\n    };\r\n\r\n    /**\r\n     * Set the polynom to zero.\r\n     * @returns {this}\r\n     */\r\n    zero = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().zero());\r\n        this._rawString = '0';\r\n        return this;\r\n    };\r\n\r\n    one = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().one());\r\n        this._rawString = '1';\r\n        return this;\r\n    }\r\n\r\n    empty = (): Polynom => {\r\n        this._monoms = [];\r\n        this._rawString = '';\r\n        return this;\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Polynom generators and randomizers\r\n    // -----------------------------------------------\r\n    private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n        degree: 2,\r\n        unit: true,\r\n        fractions: false,\r\n        factorable: false,\r\n        letters: 'x',\r\n        allowNullMonom: false,\r\n        numberOfMonoms: false\r\n    };\r\n    get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n        return this._randomizeDefaults;\r\n    }\r\n\r\n    set randomizeDefaults(value) {\r\n        this._randomizeDefaults = value;\r\n    }\r\n\r\n    randomize = (config: { [key: string]: number | string | boolean }): Polynom => {\r\n        let P = new Polynom();\r\n\r\n        // Check the config file and use the default values.\r\n        if (config === undefined) {\r\n            config = {};\r\n        }\r\n        for (let k in this._randomizeDefaults) {\r\n            if (config[k] === undefined) {\r\n                config[k] = this._randomizeDefaults[k];\r\n            }\r\n        }\r\n\r\n        // TODO: Build a more robust randomize function\r\n        return P;\r\n    }\r\n\r\n    rndFactorable = (degree: number = 2, unit: boolean | number = false, letters: string = 'x'): Polynom => {\r\n        // TODO: Make rndFactorable polynom generator more user friendly\r\n        this._factors = [];\r\n        for (let i = 0; i < degree; i++) {\r\n            let factorUnit = unit === true || i >= unit,\r\n                p = Random.polynom({\r\n                    degree: 1,\r\n                    unit: factorUnit,\r\n                    fraction: false,\r\n                    letters\r\n                });\r\n            this._factors.push(p);\r\n        }\r\n\r\n        this.empty().monoms = this._factors[0].monoms;\r\n        for (let i = 1; i < this._factors.length; i++) {\r\n            this.multiply(this._factors[i]);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Polynom => {\r\n        this._monoms = this._monoms.map(m => m.opposed());\r\n        return this;\r\n    };\r\n\r\n    add = (...values: any[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value.isPolynom) {\r\n                this._monoms = this._monoms.concat(value.monoms);\r\n            } else if (value.isMonom) {\r\n                this._monoms.push(value.clone());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()));\r\n            } else {\r\n                this._monoms.push(new Monom(value));\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (...values: any[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value.isPolynom) {\r\n                this._monoms = this._monoms.concat(value.clone().opposed().monoms);\r\n            } else if (value.isMonom) {\r\n                this._monoms.push(value.clone().opposed());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()).opposed());\r\n            } else {\r\n                this._monoms.push(new Monom(value).opposed());\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    multiply = (value: any): Polynom => {\r\n        if (value.isPolynom) {\r\n            return this.multiplyByPolynom(value);\r\n        } else if (value.isFraction) {\r\n            return this.multiplyByFraction(value);\r\n        } else if (value.isMonom) {\r\n            return this.multiplyByMonom(value);\r\n        } else if (Number.isSafeInteger(value)) {\r\n            return this.multiplyByInteger(value);\r\n        }\r\n\r\n        // Something went wrong...\r\n        return this;\r\n    }\r\n\r\n    private multiplyByPolynom = (P: Polynom): Polynom => {\r\n        const M: Monom[] = [];\r\n        for (const m1 of this._monoms) {\r\n            for (const m2 of P.monoms) {\r\n                M.push(Monom.xmultiply(m1, m2));\r\n            }\r\n        }\r\n\r\n        this._monoms = M;\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.multiply(F);\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByInteger = (nb: number): Polynom => {\r\n        return this.multiplyByFraction(new Fraction(nb));\r\n    };\r\n\r\n    private multiplyByMonom = (M: Monom): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.multiply(M)\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n    /**\r\n     * Divide the current polynom by another polynom.\r\n     * @param P\r\n     * returns {quotient: Polynom, reminder: Polynom}\r\n     */\r\n    euclidian = (P: Polynom): { quotient: Polynom, reminder: Polynom } => {\r\n        const letter: string = P.variables[0];\r\n        const quotient: Polynom = new Polynom().zero();\r\n        const reminder: Polynom = this.clone().reorder(letter);\r\n\r\n        // There is no variable !\r\n        if (P.variables.length === 0) {\r\n            return {quotient, reminder}\r\n        }\r\n\r\n        // Get at least a letter\r\n\r\n        const maxMP: Monom = P.monomByDegree(undefined, letter);\r\n        const degreeP: number = P.degree(letter);\r\n\r\n        let newM: Monom;\r\n\r\n        // Make the euclidian division of the two polynoms.\r\n        let MaxIteration = this.degree(letter) * 2;\r\n        while (reminder.degree(letter) >= degreeP && MaxIteration >= 0) {\r\n            // console.log('EUCLIDE Q', quotient.degree(letter), quotient.tex)\r\n            // console.log('EUCLIDE R', reminder.degree(letter), reminder.tex)\r\n            // console.log('ITERATION', MaxIteration)\r\n            MaxIteration--\r\n\r\n            // Get the greatest monom divided by the max monom of the divider\r\n            newM = reminder.monomByDegree(undefined, letter).clone().divide(maxMP);\r\n\r\n            if (newM.isZero()) {\r\n                break;\r\n            }\r\n\r\n            // Get the new quotient and reminder.\r\n            quotient.add(newM);\r\n            reminder.subtract(P.clone().multiply(newM));\r\n        }\r\n\r\n        return {quotient, reminder};\r\n    };\r\n\r\n    divide = (value: any): Polynom => {\r\n        if (value.isFraction) {\r\n            this.divideByFraction(value);\r\n        } else if (Number.isSafeInteger(value)) {\r\n            return this.divideByInteger(value);\r\n        }\r\n    }\r\n\r\n    private divideByInteger = (nb: number): Polynom => {\r\n        const nbF = new Fraction(nb);\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(nbF);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    private divideByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(F);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    pow = (nb: number): Polynom => {\r\n        if (!Number.isSafeInteger(nb)) {\r\n            return this.zero();\r\n        }\r\n        if (nb < 0) {\r\n            return this.zero();\r\n        }\r\n        if (nb === 0) {\r\n            return new Polynom();\r\n        }\r\n\r\n        const P = this.clone();\r\n        for (let i = 1; i < nb; i++) {\r\n            this.multiply(P);\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param P\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (P: Polynom, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '='\r\n        }\r\n\r\n        // Create clone version to reduce them without altering the original polynoms.\r\n        const cP1 = this.clone().reduce().reorder();\r\n        const cP2 = P.clone().reduce().reorder();\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree() !== cP2.degree()) {\r\n                    return false;\r\n                }\r\n\r\n                // Check if the coefficients are the isSame.\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isEqual(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            case 'same':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree() !== cP2.degree()) {\r\n                    return false;\r\n                }\r\n\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isSameAs(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    isZero(): boolean {\r\n        return (this._monoms.length === 1 && this._monoms[0].coefficient.isZero()) || this._monoms.length === 0;\r\n    }\r\n\r\n    isOne(): boolean {\r\n        return this._monoms.length === 1 && this._monoms[0].coefficient.isOne();\r\n    }\r\n\r\n    isEqual = (P: Polynom): boolean => {\r\n        return this.compare(P, '=');\r\n    };\r\n\r\n    isSameAs = (P: Polynom): boolean => {\r\n        return this.compare(P, 'same');\r\n    };\r\n\r\n    isOpposedAt = (P: Polynom): boolean => {\r\n        return this.compare(P.clone().opposed(), '=');\r\n    };\r\n\r\n    isFactorized = (polynomString: string): boolean => {\r\n        let P;\r\n\r\n        // Check if polynom is complete...\r\n        if (polynomString.match(/\\(/g).length !== polynomString.match(/\\)/g).length) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check if the provided (string) version is fully factorized.\r\n        // Run a regex on the string.\r\n        let polynomStringNormalized = polynomString.replaceAll('*', ''),\r\n            polynomStringReduced = '' + polynomStringNormalized,\r\n            factors: string[] = [];\r\n\r\n        for (let x of polynomStringNormalized.matchAll(/\\(([a-z0-9+\\-]+)\\)(\\^[0-9]*)?/g)) {\r\n            if (x[2] !== undefined) {\r\n                for (let i = 0; i < +x[2].substr(1); i++) {\r\n                    factors.push(x[1])\r\n                }\r\n            } else {\r\n                factors.push(x[1]);\r\n            }\r\n            polynomStringReduced = polynomStringReduced.replaceAll(x[0], '');\r\n        }\r\n        if (polynomStringReduced !== '') {\r\n            factors.push(polynomStringReduced);\r\n        }\r\n        let polyFactors = factors.map(x => new Polynom(x));\r\n\r\n        // Factorize the current polynom.\r\n        this.factorize();\r\n\r\n        // Compare the given factors with the generated factors\r\n        let sign = 1;\r\n        for (let f of this.factors) {\r\n            for (let i = 0; i < polyFactors.length; i++) {\r\n                if (f.isEqual(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    break;\r\n                } else if (f.isOpposedAt(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    sign = -sign;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // The polyfactors must be empty and the cumulative opposite factors must be 1.\r\n        return (polyFactors.length === 0 && sign === 1);\r\n    }\r\n\r\n    isDeveloped = (polynomString: string): Boolean => {\r\n        let P: Polynom;\r\n\r\n        // There is at least one parenthese - it is not developed.\r\n        if (polynomString.match(/\\(/g).length + polynomString.match(/\\)/g).length) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            // Build the polynom\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check that everything is completely developed. Actually, there are no parentheses... so it is fully developed\r\n\r\n        // maybe it wasn't reduced and not ordered...\r\n        // compare polynom string.\r\n\r\n        // normalize the string\r\n        let polynomStringNormalized = polynomString.replaceAll('[*\\s]', '')\r\n\r\n        // Determine if it's the exact same string.\r\n        // TODO: Maybe it's enough to just make this test !\r\n        return polynomStringNormalized === P.reduce().reorder().display\r\n    }\r\n    // ------------------------------------------\r\n    // Misc polynoms functions\r\n    // -------------------------------------\r\n    reduce = (): Polynom => {\r\n        for (let i = 0; i < this._monoms.length; i++) {\r\n            for (let j = i + 1; j < this._monoms.length; j++) {\r\n                if (this._monoms[i].isSameAs(this.monoms[j])) {\r\n                    this._monoms[i].add(this.monoms[j]);\r\n                    this._monoms.splice(j, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Remove all null monoms\r\n        this._monoms = this._monoms.filter((m) => {\r\n            return m.coefficient.value !== 0\r\n        });\r\n\r\n        // Reduce all monoms coefficient.\r\n        for (const m of this._monoms) {\r\n            m.coefficient.reduce();\r\n        }\r\n\r\n        if (this.length === 0) {\r\n            return new Polynom().zero();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    reorder = (letter: string = 'x'): Polynom => {\r\n        // TODO: Must handle multiple setLetter reorder system\r\n        this._monoms.sort(function (a, b) {\r\n            return b.degree(letter) - a.degree(letter)\r\n        });\r\n        return this.reduce();\r\n    };\r\n\r\n    degree = (letter?: string): number => {\r\n        let d: number = 0;\r\n        for (const m of this._monoms) {\r\n            d = Math.max(m.degree(letter), d);\r\n        }\r\n        return d;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        let L: string[] = [], S = new Set();\r\n\r\n        for (let m of this._monoms) {\r\n            S = new Set([...S, ...m.variables]);\r\n        }\r\n\r\n        // @ts-ignore\r\n        return [...S];\r\n    }\r\n\r\n    /**\r\n     * Replace a variable (letter) by a polynom.\r\n     * @param letter\r\n     * @param P\r\n     */\r\n    replaceBy = (letter: string, P: Polynom): Polynom => {\r\n        let pow: number;\r\n        const resultPolynom: Polynom = new Polynom().zero();\r\n\r\n        for (const m of this.monoms) {\r\n            if (m.literal[letter] === undefined || m.literal[letter] === 0) {\r\n                resultPolynom.add(m.clone());\r\n            } else {\r\n                // We have found a setLetter.\r\n                // Get the power and reset it.\r\n                pow = +m.literal[letter];\r\n                delete m.literal[letter];\r\n\r\n                resultPolynom.add(P.clone().pow(pow).multiply(m));\r\n            }\r\n        }\r\n\r\n        this._monoms = resultPolynom.reduce().reorder().monoms;\r\n        return this;\r\n    };\r\n\r\n    // Evaluate a polynom.\r\n    evaluate = (values: { [key: string]: Fraction | number } | Fraction | number): Fraction => {\r\n        const r = new Fraction().zero();\r\n\r\n        this._monoms.forEach(monom => {\r\n            //console.log('Evaluate polynom: ', monom.display, values, monom.evaluate(values).display);\r\n            r.add(monom.evaluate(values));\r\n        });\r\n        return r;\r\n    };\r\n\r\n    derivative = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.derivative(letter));\r\n        }\r\n        return dP;\r\n\r\n    }\r\n\r\n    primitive = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.primitive(letter))\r\n        }\r\n        return dP\r\n    }\r\n\r\n    integrate = (a: Fraction | number, b: Fraction | number, letter?: string): Fraction => {\r\n        const primitive = this.primitive(letter)\r\n\r\n        if (letter === undefined) {\r\n            letter = 'x'\r\n        }\r\n\r\n        let valuesA: { [key: string]: Fraction | number } = {},\r\n            valuesB: { [key: string]: Fraction | number } = {}\r\n        valuesA[letter] = a;\r\n        valuesB[letter] = b;\r\n\r\n        return primitive.evaluate(valuesB).subtract(primitive.evaluate(valuesA))\r\n    }\r\n    // ------------------------------------------\r\n    // Polynoms factorization functions\r\n    // -------------------------------------\r\n    /**\r\n     * Factorize a polynom and store the best results in factors.\r\n     * @param maxValue Defines the greatest value to search to (default is 20).\r\n     */\r\n    factorize_OLD = (maxValue?: number): Polynom => {\r\n        // TODO: Must handle other letters than 'x'\r\n        this._factors = [];\r\n\r\n        // Duplicate the polynom\r\n        let P = this.clone(),\r\n            nbFactorsFound = 0;\r\n\r\n        // Determine if the polynom is \"negative\", eg has a max monom degree with a negative coefficient.\r\n        if (P.monomByDegree().coefficient.numerator < 0) {\r\n            this._factors.push(new Polynom('-1'));\r\n        }\r\n\r\n        // Determine if there is a 'common' monom\r\n        let M = P.commonMonom();\r\n        if (!M.isOne()) {\r\n            let commonPolynom = new Polynom()\r\n            commonPolynom.monoms = [M]\r\n            if (this._factors.length === 0) {\r\n                this._factors.push(commonPolynom);\r\n            } else {\r\n                this._factors = [];\r\n                this._factors.push(commonPolynom.opposed());\r\n            }\r\n            P = P.euclidian(commonPolynom).quotient;\r\n\r\n            nbFactorsFound = commonPolynom.degree();\r\n        }\r\n\r\n        // Main loop.\r\n        //\r\n        // Do it only if degree is equal or less than one.\r\n        if (P.degree() <= 1) {\r\n            this._factors.push(P.clone());\r\n        } else {\r\n            // Force test.\r\n            let Q = new Fraction(),\r\n                F,\r\n                degree = P.degree();\r\n\r\n            maxValue = maxValue === undefined ? 20 : maxValue;\r\n\r\n            // Test all polynom similar to ax+b\r\n            for (let a = 1; a <= maxValue; a++) {\r\n                // Skip a coefficient of 0\r\n                for (let b = -maxValue; b <= maxValue; b++) {\r\n\r\n                    Q.parse(-b, a);\r\n\r\n                    if (P.evaluate({x: Q})) {\r\n                        F = new Polynom(`${a}x+${b}`);\r\n                        while (P.evaluate({x: Q}).value === 0) {\r\n                            this._factors.push(F.clone());\r\n                            nbFactorsFound++;\r\n\r\n                            // Means it can be divided without reminders.\r\n                            P = P.euclidian(F).quotient;\r\n                        }\r\n                    }\r\n\r\n                    // Continue if the numbers of factors found equals the degree.\r\n                    if (nbFactorsFound > degree) {\r\n                        return this;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (P.degree() > 1) {\r\n                this._factors.push(P.clone());\r\n                return this;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    factorize = (letter?: string): Polynom[] => {\r\n        let factors: Polynom[] = [];\r\n\r\n        // Extract the common monom\r\n        let P = this.clone().reorder(),\r\n            M = P.commonMonom(),\r\n            tempPolynom: Polynom\r\n        // It has a common monom.\r\n        if (!M.isOne()) {\r\n            tempPolynom = new Polynom()\r\n            tempPolynom.monoms = [M]\r\n            factors = [tempPolynom.clone()]\r\n            P = P.euclidian(tempPolynom).quotient;\r\n        }\r\n\r\n        let securityLoop = P.degree() * 2\r\n        // securityLoop = 0\r\n        while (securityLoop >= 0) {\r\n            securityLoop--\r\n\r\n\r\n            if (P.monoms.length < 2) {\r\n                if (!P.isOne()) {\r\n                    factors.push(P.clone());\r\n                }\r\n                break;\r\n            } else {\r\n                // Get the first and last monom.\r\n                let m1 = P.monoms[0].dividers,\r\n                    m2 = P.monoms[P.monoms.length - 1].dividers\r\n\r\n                // console.log('CURRENT VALUE')\r\n                // console.log(P.tex)\r\n                // console.log('---------------------')\r\n                for (let m1d of m1) {\r\n                    for (let m2d of m2) {\r\n                        // if(m1d.degree()===m2d.degree()){continue}\r\n                        let dividerPolynom = new Polynom(),\r\n                            result\r\n                        dividerPolynom.monoms = [m1d.clone(), m2d.clone()]\r\n                        result = P.euclidian(dividerPolynom)\r\n\r\n                        // console.log(dividerPolynom.tex, '=>', result.reminder.tex, '|||||', result.quotient.tex)\r\n                        if (result.reminder.isZero()) {\r\n                            P = result.quotient.clone();\r\n                            factors.push(dividerPolynom)\r\n                            continue;\r\n                        }\r\n\r\n                        dividerPolynom.monoms = [m1d.clone(), m2d.clone().opposed()]\r\n                        result = P.euclidian(dividerPolynom)\r\n                        if (result.reminder.isZero()) {\r\n                            P = result.quotient.clone();\r\n                            factors.push(dividerPolynom)\r\n                        }\r\n                        // console.log(dividerPolynom.tex, '=>', result.reminder.tex)\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        this.factors = factors\r\n        return factors;\r\n    }\r\n\r\n    private _factorize2ndDegree = (letter: string): Polynom[] => {\r\n        let P1: Polynom, P2: Polynom,\r\n            a, b, c, delta, x1, x2, factor;\r\n\r\n        // One variable only\r\n        if (this.numberOfVars === 1) {\r\n            a = this.monomByDegree(2, letter).coefficient;\r\n            b = this.monomByDegree(1, letter).coefficient;\r\n            c = this.monomByDegree(0, letter).coefficient;\r\n            delta = b.clone().pow(2).subtract(a.clone().multiply(c).multiply(4));\r\n\r\n            if (delta.isZero()) {\r\n                x1 = b.clone().opposed().divide(a.clone().multiply(2))\r\n                P1 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                P2 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                factor = a.divide(x1.denominator).divide(x1.denominator);\r\n\r\n                if (!factor.isOne()) {\r\n                    // TODO: Update new Polynom to accept anything...\r\n                    return [new Polynom(factor.display), P1, P2]\r\n                } else {\r\n                    return [P1, P2]\r\n                }\r\n            } else if (delta.isPositive() && delta.isSquare()) {\r\n                x1 = b.clone().opposed()\r\n                    .add(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n                x2 = b.clone().opposed()\r\n                    .subtract(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n\r\n                // (2x+5)(3x-2)\r\n                // 6x^2+11x-10\r\n                // a = 6, b = 11, c = -10\r\n                // delta = 121-4*6*(-10) = 361= 19^2\r\n                // x1 = (-11 + 19)  / 12 = 8/12 = 2/3\r\n                // x2 = (-11 - 19)  / 12 = -30/12 = -5/2\r\n                factor = a.divide(x1.denominator).divide(x2.denominator);\r\n                if (factor.isOne()) {\r\n                    return [\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n                } else {\r\n                    return [\r\n                        new Polynom(factor.display),\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n\r\n                }\r\n            } else {\r\n                // No solution possible - return the complete value.\r\n                return [this.clone()]\r\n            }\r\n        } else {\r\n            // If multiple variables, only handle perfect squares...\r\n            a = this.monomByDegree(2, letter);\r\n            b = this.monomByDegree(1, letter);\r\n            c = this.monomByDegree(0, letter);\r\n\r\n\r\n            if (a.isLitteralSquare() && c.isLitteralSquare()) {\r\n                // Check the middle item is same as...\r\n                if (b.clone().pow(2).isSameAs(a.clone().multiply(c))) {\r\n                    // Determine if the coefficient values matches.\r\n\r\n                    // Search 4 values (r, s, t, u) that matches:\r\n                    // (r X + s Y)(t X + u Y) = rt X^2 + (ru + st) XY + su Y^2\r\n\r\n                    let xPolynom = new Polynom('x', a.coefficient, b.coefficient, c.coefficient);\r\n                    let xFactors = xPolynom._factorize2ndDegree('x');\r\n\r\n                    let factors = [], xyzPolynom: Polynom;\r\n\r\n                    if (xFactors.length >= 2) {\r\n                        for (let p of xFactors) {\r\n                            if (p.degree() === 0) {\r\n                                factors.push(p.clone())\r\n                            } else {\r\n                                xyzPolynom = p.clone();\r\n                                xyzPolynom.monoms[0].literal = a.literalSqrt\r\n                                xyzPolynom.monoms[1].literal = c.literalSqrt\r\n                                factors.push(xyzPolynom.clone())\r\n                            }\r\n                        }\r\n                        return factors\r\n                    }\r\n                }\r\n            }\r\n\r\n            return [this.clone()]\r\n            //\r\n            // console.log(a.tex, b.tex, c.tex)\r\n            // if (a.isSquare() && c.isSquare()) {\r\n            //     console.log('A C squares')\r\n            //     if (a.clone().sqrt().multiply(c.clone().sqrt()).multiplyByNumber(2).isSameAs(b)) {\r\n            //         console.log('HERE')\r\n            //         if (a.coefficient.sign() === b.coefficient.sign()) {\r\n            //             return []\r\n            //         }else{\r\n            //             return []\r\n            //         }\r\n            //     }\r\n            // } else if(a.isLitteralSquare() && c.isLitteralSquare()) {\r\n            //     console.log('A C litteral SQUARES')\r\n            //     // Check that the middle element is the product of a and c.\r\n            //\r\n            //     if(b.clone().pow(2).isSameAs(a.clone().multiply(c))){\r\n            //         console.log('SAME')\r\n            //\r\n            //     }else{\r\n            //         console.log('NOT SAME')\r\n            //     }\r\n            //\r\n            //     return [this.clone()]\r\n            // } else {\r\n            //     console.log('NOT SQUARES AT ALL !!!!')\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    private _factorizeByGroups = (): Polynom[] => {\r\n        // TODO: Factorize by groups.\r\n        return [];\r\n    }\r\n    // ------------------------------------------\r\n    // Polynoms helpers functions\r\n    // -------------------------------------\r\n    // TODO: get zeroes for more than first degree\r\n    getZeroes = (): (Fraction | boolean)[] => {\r\n        const Z: Fraction[] = [];\r\n\r\n        switch (this.degree()) {\r\n            case 0:\r\n                if (this._monoms[0].coefficient.value === 0) {\r\n                    return [true];\r\n                } else {\r\n                    return [false];\r\n                }\r\n            case 1:\r\n                // There is only one monoms,\r\n                if (this._monoms.length === 1) {\r\n                    return [new Fraction().zero()];\r\n                } else {\r\n                    const P = this.clone().reduce().reorder();\r\n                    return [P.monoms[1].coefficient.opposed().divide(P.monoms[0].coefficient)];\r\n                }\r\n            // TODO: Determine the zeros of an equation of second degree.\r\n            //case 2:\r\n            default:\r\n                // Make sure the polynom is factorized.\r\n                if (this._factors.length === 0) {\r\n                    this.factorize()\r\n                }\r\n\r\n                let zeroes = [], zeroesAsTex = [];\r\n                for (let P of this._factors) {\r\n                    if (P.degree() > 2) {\r\n                        // TODO: Handle other polynom.\r\n\r\n                    } else if (P.degree() === 2) {\r\n                        let A = P.monomByDegree(2).coefficient,\r\n                            B = P.monomByDegree(1).coefficient,\r\n                            C = P.monomByDegree(0).coefficient,\r\n                            D = B.clone().pow(2).subtract(A.clone().multiply(C).multiply(4));\r\n\r\n                        if (D.value > 0) {\r\n                            /*console.log('Two zeroes for ', P.tex); */\r\n                            let x1 = (-(B.value) + Math.sqrt(D.value)) / (2 * A.value),\r\n                                x2 = (-(B.value) - Math.sqrt(D.value)) / (2 * A.value);\r\n\r\n                            zeroes.push(new Fraction(x1.toFixed(3)).reduce());\r\n                            zeroes.push(new Fraction(x2.toFixed(3)).reduce());\r\n                        } else if (D.value === 0) {\r\n                            /*console.log('One zero for ', P.tex); */\r\n\r\n                        } else {\r\n                            console.log('No zero for ', P.tex);\r\n                        }\r\n                    } else {\r\n                        for (let z of P.getZeroes()) {\r\n                            // Check if the zero is already in the list.\r\n                            if (z === false || z === true) {\r\n                                continue;\r\n                            }\r\n                            if (zeroesAsTex.indexOf(z.frac) === -1) {\r\n                                zeroes.push(z);\r\n                                zeroesAsTex.push(z.frac);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return zeroes;\r\n        }\r\n        return Z;\r\n    };\r\n\r\n\r\n    // TODO: analyse the next functions to determine if they are useful or not...\r\n    monomByDegree = (degree?: number, letter?: string): Monom => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomByDegree(this.degree(letter), letter);\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter) === degree) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        // Nothing was found - return the null monom.\r\n        return new Monom().zero();\r\n    };\r\n\r\n    monomsByDegree = (degree?: number, letter?: string): Monom[] => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomsByDegree(this.degree(letter));\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        let Ms: Monom[] = [];\r\n\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter) === degree) {\r\n                Ms.push(m.clone())\r\n            }\r\n        }\r\n\r\n        return Ms\r\n        // Nothing was found - retur\r\n    }\r\n\r\n    // Used in LinearSystem.tex\r\n    monomByLetter = (letter: string): Monom => {\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.hasLetter(letter)) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        return new Monom().zero();\r\n    };\r\n\r\n\r\n    // Next functions are used for for commonMonom, which is used in the factorize method.\r\n    getDenominators = (): number[] => {\r\n        const denominators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            denominators.push(m.coefficient.denominator);\r\n        }\r\n        return denominators;\r\n    };\r\n\r\n    getNumerators = (): number[] => {\r\n        const numerators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            numerators.push(m.coefficient.numerator);\r\n        }\r\n        return numerators;\r\n    };\r\n\r\n    lcmDenominator = (): number => {\r\n        return Numeric.lcm(...this.getDenominators());\r\n    };\r\n\r\n    gcdDenominator = (): number => {\r\n        return Numeric.gcd(...this.getDenominators());\r\n    };\r\n\r\n    lcmNumerator = (): number => {\r\n        return Numeric.lcm(...this.getNumerators());\r\n    };\r\n\r\n    gcdNumerator = (): number => {\r\n        return Numeric.gcd(...this.getNumerators());\r\n    };\r\n\r\n    commonMonom = (): Monom => {\r\n        let M = new Monom().one(), numerator: number, denominator: number, degree = this.degree();\r\n\r\n        numerator = this.gcdNumerator();\r\n        denominator = this.gcdDenominator();\r\n\r\n        M.coefficient = new Fraction(numerator, denominator);\r\n        for (let L of this.variables) {\r\n            // Initialize the setLetter with the max degree\r\n            M.setLetter(L, degree);\r\n            for (let m of this._monoms) {\r\n                M.setLetter(L, Math.min(m.degree(L), M.degree(L)));\r\n                if (M.degree(L) === 0) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return M;\r\n    }\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * This will generate a not reduced tex string of the polynom.\r\n     * @param complexity : Number of iteration to increase the complexity.\r\n     */\r\n    makeItComplicate = (complexity: number = 1): Polynom => {\r\n        this._texString = '';\r\n\r\n        // The polynom must be at least of the first degree.\r\n        if (this.degree() < 1) {\r\n            return this;\r\n        }\r\n\r\n        // TODO: update this function !\r\n\r\n        const mDegree = Random.number(0, this.degree() - 1);\r\n        // const A = new Polynom().rndSimple(mDegree, false, complexity > 1, 'x', false, complexity > 1 ? -1 : 1);\r\n        // const B = new Polynom().rndSimple(1, false, complexity > 1);\r\n        // const C = this.clone().subtract(A.clone().multiply(B));\r\n\r\n        // Try to factorize a little bit the C polynom.\r\n        // C.factorizePartial(true);\r\n        // this._texString = `${A.genDisplay('tex', false, true)} \\\\cdot ${B.genDisplay('tex', false, true)} ${C.texString} `;\r\n        //\r\n        return this;\r\n    };\r\n    factorizePartial = (forceSign?: boolean): Polynom => {\r\n        this._texString = '';\r\n        // Try to find two monoms with a common coefficient.\r\n        if (this.length <= 1) {\r\n            return this;\r\n        }\r\n\r\n        let mMain: Monom,\r\n            mCheck: Monom,\r\n            mFactor: Monom,\r\n            pFactor: Polynom,\r\n            // pRemain: Polynom,\r\n            g: number, sign: string;\r\n\r\n        for (let i = 0; i < this.length; i++) {\r\n            mMain = this._monoms[i].clone();\r\n            // We factorize only if the main coefficient isn't a fraction\r\n            // if(mMain.coefficient.denominator!==1){continue;}\r\n            for (let j = i + 1; j < this.length; j++) {\r\n                mCheck = this._monoms[j].clone();\r\n                // if(mCheck.coefficient.denominator!==1){continue;}\r\n\r\n                g = Numeric.gcd(mMain.coefficient.numerator, mCheck.coefficient.numerator);\r\n                if (g !== 1) {\r\n                    // mFactor = mMain.clone().divide(mCheck); // This gets the literal part.\r\n                    // mFactor.coefficient = new Fraction(g); // Set the coefficient to the gcd.\r\n                    mFactor = Monom.lcm(mMain, mCheck);\r\n                    sign = mMain.coefficient.sign() === 1 ? '+' : '-';\r\n                    this._texString = `${forceSign === true ? sign : (sign === '+' ? '' : sign)}${mFactor.tex}`;\r\n\r\n                    pFactor = new Polynom().add(mMain.divide(mFactor)).add(mCheck.divide(mFactor));\r\n                    this._texString += pFactor.genDisplay('tex', false, true);\r\n\r\n                    this._texString += this.clone().subtract(pFactor.clone().multiply(mFactor)).genDisplay('tex', true, false);\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._texString = this.genDisplay('tex', forceSign);\r\n\r\n        return this;\r\n    };\r\n    /**\r\n     * reduce the coefficient value as if the polynom was equal to zero.\r\n     */\r\n    minify = (): Polynom => {\r\n        // First multiply by the common denominator.\r\n        this.multiply(this.lcmDenominator()).divide(this.gcdNumerator()).reduce();\r\n        return this.reduce();\r\n    };\r\n    /**\r\n     * Determine if the current polynom is divisible by P\r\n     * TODO: should work with any polynom, not only first degree polynoms and the setLetter should disappear\r\n     * @param P\r\n     * @param letter - default setLetter\r\n     */\r\n    canDivide = (P: Polynom, letter: string = 'x'): boolean => {\r\n        const d = P.degree();\r\n\r\n        const evalValue: { [key: string]: Fraction } = {};\r\n        // A zero degree polynom can always divide, except if it's the zero polynom.\r\n        if (d === 0) {\r\n            return !P.isZero;\r\n        }\r\n\r\n        // The polynom is of degree one.\r\n        if (d === 1) {\r\n            const z = P.getZeroes();\r\n            // The zero is an undefined zero.\r\n            if (z[0] === true || z[0] === false) {\r\n                return false;\r\n            }\r\n\r\n            evalValue[letter] = z[0];\r\n            return this.evaluate(evalValue).value === 0;\r\n        }\r\n\r\n        // The polynom is of degree 2 or more...\r\n        if (d > 1) {\r\n            console.log('Currently, only first degree polynom are supported');\r\n            return false;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n\r\n}\r\n","/**\r\n * Rational polynom module contains everything necessary to handle rational polynoms.\r\n * @module Polynom\r\n */\r\n\r\nimport {Polynom} from \"./polynom\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\n/**\r\n * Rational class can handle rational polynoms\r\n */\r\nexport class Rational {\r\n    private _rawString: string;\r\n    private _numerator: Polynom;\r\n    private _denominator: Polynom;\r\n\r\n    /**\r\n     *\r\n     * @param numerator\r\n     * @param denominator\r\n     */\r\n    constructor(numerator?: Polynom, denominator?: Polynom) {\r\n        this._numerator = numerator?numerator.clone():new Polynom();\r\n        this._denominator = denominator?denominator.clone():new Polynom();\r\n    }\r\n\r\n    clone = (): Rational => {\r\n        this._numerator = this._numerator.clone()\r\n        this._denominator = this._denominator.clone()\r\n\r\n        return this;\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\dfrac{ ${this._numerator.tex} }{ ${this._denominator.tex} }`;\r\n    }\r\n\r\n    get texFactors(): string {\r\n        this._numerator.factorize()\r\n        this._denominator.factorize()\r\n\r\n        return `\\\\dfrac{ ${this._numerator.texFactors} }{ ${this._denominator.texFactors} }`\r\n    }\r\n\r\n    get numerator(): Polynom {\r\n        return this._numerator\r\n    }\r\n    get denominator(): Polynom {\r\n        return this._denominator\r\n    }\r\n\r\n    domain = (): string => {\r\n        let zeroes = this._denominator.getZeroes();\r\n        if( zeroes.length===0 || zeroes[0]===false){\r\n            return '\\\\mathbb{R}'\r\n        }else if(zeroes[0]===true){\r\n            return '\\\\varnothing'\r\n        }else{\r\n            return '\\\\mathbb{R}\\\\setminus\\\\left{'+\r\n                zeroes.map(x=> {\r\n                    return (typeof x === 'boolean')?'':x.frac\r\n                    })\r\n                    .join(';')+'\\\\right}'\r\n        }\r\n    }\r\n\r\n    amplify = (P: Polynom): Rational => {\r\n        this._numerator.multiply(P);\r\n        this._denominator.multiply(P);\r\n\r\n        return this;\r\n    }\r\n\r\n    simplify = (P: Polynom): Rational => {\r\n        let NumeratorEuclidien = this._numerator.euclidian(P);\r\n        if(!NumeratorEuclidien.reminder.isZero()){return this;}\r\n\r\n        let DenominatorEuclidien = this._denominator.euclidian(P);\r\n        if(!DenominatorEuclidien.reminder.isZero()){return this;}\r\n\r\n        this._numerator = NumeratorEuclidien.quotient;\r\n        this._denominator = DenominatorEuclidien.quotient;\r\n        return this;\r\n    }\r\n\r\n    reduce = (): Rational => {\r\n        console.log(this._numerator.tex)\r\n        this._numerator.factorize();\r\n        console.log(this._numerator.factors.map(x => x.tex))\r\n        for(let f of this._numerator.factors){\r\n            this.simplify(f);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    opposed = (): Rational => {\r\n        this._numerator.opposed();\r\n        return this;\r\n    }\r\n    add = (R: Rational): Rational => {\r\n        // 1. Make sure both rational are at the same denominator\r\n        // 2. Add the numerators.\r\n        // 3. Simplify\r\n\r\n        // Store the adding denominator\r\n        let denominator = this._denominator.clone()\r\n\r\n        // Amplif the main rational polynom by the adding denominator\r\n        this.amplify(R._denominator)\r\n\r\n        // Add to the numerator the adding value...\r\n        this._numerator.add(R._numerator.clone().multiply(denominator));\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (R: Rational): Rational => {\r\n        return this.add(R.clone().opposed())\r\n    }\r\n\r\n    limits = (value: Fraction|number, letter?: string):Fraction|number => {\r\n        if(value===Infinity || value===-Infinity){\r\n            let N = this._numerator.monomByDegree(this._numerator.degree(letter), letter),\r\n                D = this._denominator.monomByDegree(this._denominator.degree(letter), letter)\r\n\r\n            N.divide(D)\r\n\r\n            if(N.degree(letter)>0){return N.coefficient.sign()*(Math.pow((value>0?1:-1),N.degree(letter)%2))===1?Infinity:-Infinity}\r\n            if(N.degree(letter)===0){return N.coefficient}\r\n            if(N.degree(letter)>0){return N.coefficient.sign()*(Math.pow(-1,N.degree(letter)%2))===1?0:-0}\r\n        }else{\r\n            return this._numerator.evaluate({letter: value}).divide(this._denominator.evaluate({letter: value}))\r\n        }\r\n    }\r\n}","import {Numeric} from \"../numeric\";\r\n\r\nexport class Fraction {\r\n    private _numerator: number;\r\n    private _denominator: number;\r\n\r\n    constructor(value?: any, denominatorOrPeriodic?: number) {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n\r\n        if (value !== undefined) {\r\n            this.parse(value, denominatorOrPeriodic);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isFraction() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n\r\n    get numerator(): number {\r\n        return this._numerator;\r\n    }\r\n\r\n    set numerator(value: number) {\r\n        this._numerator = value;\r\n    }\r\n\r\n    get denominator(): number {\r\n        return this._denominator;\r\n    }\r\n\r\n    set denominator(value: number) {\r\n        this._denominator = value;\r\n    }\r\n\r\n    get value(): number {\r\n        return this._numerator / this._denominator;\r\n    }\r\n\r\n    // Display getter\r\n    get tex(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else if (this._numerator < 0) {\r\n            return `-\\\\frac{ ${-this._numerator} }{ ${this._denominator} }`;\r\n        } else {\r\n            return `\\\\frac{ ${this._numerator} }{ ${this._denominator} }`;\r\n        }\r\n    }\r\n\r\n    get display(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else {\r\n            return `${this._numerator}/${this._denominator}`;\r\n        }\r\n    }\r\n\r\n    // Helper function to display fractions\r\n    get frac(): string {\r\n        return this.tex;\r\n    }\r\n\r\n    get dfrac(): string {\r\n        return this.tex.replace('\\\\frac', '\\\\dfrac');\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse the value to get the numerator and denominator\r\n     * @param value : number or string to parse to get the fraction\r\n     * @param denominatorOrPeriodic (optional|number) : length of the periodic part: 2.333333 => 1 or denominator value\r\n     */\r\n    parse = (value: any, denominatorOrPeriodic?: number): Fraction => {\r\n        let S: string[];\r\n\r\n        // A null value means a zero fraction.\r\n        if (value === null || value === \"\") {\r\n            this._numerator = 0;\r\n            this._denominator = 1;\r\n            return this;\r\n        }\r\n\r\n        switch (typeof value) {\r\n            case \"string\":\r\n                // Split the sting value in two parts: Numerator/Denominator\r\n                S = value.split('/');\r\n\r\n                // Security checks\r\n                    if (S.length > 2) throw \"Two many divide signs\";\r\n                    if (S.map(x => x === '' || isNaN(Number(x))).includes(true)) throw \"Not a number\"\r\n\r\n\r\n                if (S.length === 1) {\r\n                    // No divide sign\r\n                    return this.parse(+S[0]);\r\n                } else if (S.length === 2) {\r\n                    // One divide signe\r\n                    // We check if the denominator is zero\r\n                    if (S[1] === '0') {\r\n                        this._numerator = NaN;\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._numerator = +S[0];\r\n                        this._denominator = +S[1];\r\n                    }\r\n                } else {\r\n                    // More than one divide sign ?\r\n                    this._numerator = NaN;\r\n                    this._denominator = 1;\r\n                }\r\n                break;\r\n            case \"number\":\r\n                if (Number.isSafeInteger(value)) {\r\n                    // The given value is an integer\r\n                    this._numerator = +value;\r\n\r\n                    if (denominatorOrPeriodic === undefined || !Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._denominator = +denominatorOrPeriodic;\r\n                    }\r\n                } else {\r\n                    // The given value is a float number\r\n\r\n                    // Get the number of decimals after the float sign\r\n                    let p: number = (value.toString()).split('.')[1].length;\r\n\r\n                    // Transform the float number in two integer\r\n                    if (denominatorOrPeriodic === undefined) {\r\n                        this._numerator = value * Math.pow(10, p);\r\n                        this._denominator = Math.pow(10, p);\r\n                    } else if (Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._numerator = value * Math.pow(10, p) - Math.floor(value * Math.pow(10, p - denominatorOrPeriodic));\r\n                        this.denominator = Math.pow(10, p) - Math.pow(10, p - denominatorOrPeriodic)\r\n                    }\r\n                }\r\n                break;\r\n            case \"object\":\r\n                if (value.isFraction) {\r\n                    this._numerator = +value.numerator;\r\n                    this._denominator = +value.denominator;\r\n                }\r\n                break;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): Fraction => {\r\n        let F = new Fraction();\r\n        F.numerator = +this._numerator;\r\n        F.denominator = +this._denominator;\r\n        return F;\r\n    };\r\n\r\n    zero = (): Fraction => {\r\n        this._numerator = 0;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    one = (): Fraction => {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    infinite = (): Fraction => {\r\n        this._numerator = Infinity;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    invalid = (): Fraction => {\r\n        this._numerator = NaN;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Fraction => {\r\n        this._numerator = -this._numerator;\r\n        return this;\r\n    };\r\n\r\n    add = (F: Fraction): Fraction => {\r\n        let N: number = this._numerator,\r\n            D: number = this._denominator;\r\n\r\n        this._numerator = N * F.denominator + F.numerator * D;\r\n        this._denominator = D * F.denominator;\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (F: Fraction): Fraction => {\r\n        return this.add(F.clone().opposed());\r\n    };\r\n\r\n    multiply = (F: Fraction | number): Fraction => {\r\n        // Parse the value.\r\n        // If it's a fraction, return a clone of it\r\n        // If it's an integer, return the fraction F/1\r\n        let Q = new Fraction(F);\r\n\r\n        this._numerator = this._numerator * Q.numerator;\r\n        this._denominator = this._denominator * Q.denominator;\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    divide = (F: Fraction | number): Fraction => {\r\n        let Q = new Fraction(F);\r\n\r\n        if (Q.numerator === 0) {\r\n            return new Fraction().infinite();\r\n        }\r\n\r\n        let N: number = +this._numerator,\r\n            D: number = +this._denominator;\r\n\r\n        this._numerator = N * Q.denominator;\r\n        this._denominator = D * Q.numerator;\r\n        return this.reduce();\r\n    };\r\n\r\n    invert = (): Fraction => {\r\n        let n = +this._numerator, d = +this._denominator;\r\n        this._numerator = d;\r\n        this._denominator = n;\r\n\r\n        return this;\r\n    }\r\n    pow = (p: number): Fraction => {\r\n        if (!Number.isSafeInteger(p)) {\r\n            return this.invalid();\r\n        }\r\n        this.reduce();\r\n\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        this._numerator = this._numerator ** Math.abs(p);\r\n        this._denominator = this._denominator ** Math.abs(p);\r\n        return this;\r\n    };\r\n\r\n    root = (p: number): Fraction => {\r\n        // TODO: nth - root of a fraction => this will return another type of coefficient.\r\n\r\n        // Check if they are perfect roots..\r\n        if (p === 0) {\r\n            return this;\r\n        }\r\n\r\n        // If negative, invert the fraction\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        let n = Math.pow(this._numerator, Math.abs(1 / p)),\r\n            d = Math.pow(this._denominator, Math.abs(1 / p));\r\n\r\n        this._numerator = Math.pow(this._numerator, Math.abs(1 / p));\r\n        this._denominator = Math.pow(this._denominator, Math.abs(1 / p));\r\n        return this;\r\n    }\r\n\r\n    sqrt = (): Fraction => {\r\n        return this.root(2);\r\n    }\r\n\r\n    abs = (): Fraction => {\r\n        this._numerator = Math.abs(this._numerator);\r\n        this._denominator = Math.abs(this._denominator);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations specific to fractions\r\n    // ------------------------------------------\r\n    reduce = (): Fraction => {\r\n        let g = Numeric.gcd(this._numerator, this._denominator);\r\n        this._numerator = this._numerator / g;\r\n        this._denominator = this._denominator / g;\r\n\r\n        if (this._denominator < 0) {\r\n            this._denominator = -this._denominator;\r\n            this._numerator = -this._numerator;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    amplify = (k: number): Fraction => {\r\n        if (Number.isSafeInteger(k)) {\r\n            this._numerator *= k;\r\n            this._denominator *= k;\r\n        }\r\n        return this;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param F (Coefficient) The coefficient to compare\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (F: Fraction, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n\r\n        switch (sign) {\r\n            case '>':\r\n                return this.value > F.value;\r\n            case \">=\" || \"=>\" || \"geq\":\r\n                return this.value >= F.value;\r\n            case \"<\":\r\n                return this.value < F.value;\r\n            case \"<=\" || \"=>\" || \"leq\":\r\n                return this.value <= F.value;\r\n            case \"=\":\r\n                // let F2: Fraction = F.clone().reduce(),\r\n                //     F1: Fraction = this.clone().reduce();\r\n                // return (F1.numerator === F2.numerator && F1.denominator === F2.denominator);\r\n                return this.value === F.value;\r\n            case \"<>\":\r\n                return this.value !== F.value;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n    /* Compare shortcuts */\r\n    lesser = (than: Fraction): Boolean => {\r\n        return this.compare(than, '<');\r\n    };\r\n    leq = (than: Fraction): Boolean => {\r\n        return this.compare(than, '<=');\r\n    };\r\n    greater = (than: Fraction): Boolean => {\r\n        return this.compare(than, '>');\r\n    };\r\n    geq = (than: Fraction): Boolean => {\r\n        return this.compare(than, '>=');\r\n    };\r\n    isEqual = (than: Fraction): boolean => {\r\n        return this.compare(than, '=');\r\n    }\r\n    isDifferent = (than: Fraction): boolean => {\r\n        return this.compare(than, '<>');\r\n    }\r\n    isOpposed = (p: Fraction): boolean => {\r\n        return this.isEqual(p.clone().opposed());\r\n    }\r\n    isInverted = (p: Fraction): boolean => {\r\n        return this.isEqual(new Fraction().one().divide(p.clone()));\r\n    }\r\n    isZero = (): boolean => {\r\n        return this._numerator === 0;\r\n    }\r\n    isOne = (): boolean => {\r\n        return this._numerator === 1 && this._denominator === 1;\r\n    }\r\n    isPositive = (): boolean => {\r\n        return this.sign()===1;\r\n    }\r\n    isNegative = (): boolean => {\r\n        return this.sign()===-1;\r\n    }\r\n    isNaN = (): boolean => {\r\n        return isNaN(this._numerator);\r\n    }\r\n    isInfinity = (): boolean => {\r\n        return this._numerator === Infinity;\r\n    }\r\n    isFinite = (): boolean => {\r\n        return !this.isInfinity();\r\n    }\r\n    isSquare = (): boolean => {\r\n        return Math.sqrt(this._numerator) % 1 === 0 && Math.sqrt(this._denominator) % 1 === 0\r\n    }\r\n    isReduced = (): boolean => {\r\n        return Math.abs(Numeric.gcd(this._numerator, this._denominator))===1\r\n    }\r\n    sign = (): number => {\r\n        return (this._numerator * this._denominator >= 0) ? 1 : -1;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Simple function to determine if it's a fraction\r\n     */\r\n    areEquals = (...F: Fraction[]): boolean => {\r\n        for (let i = 0; i < F.length; i++) {\r\n            if (!this.isEqual(F[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n}","export * from \"./fraction\"\r\nexport * from \"./nthroot\"","export class Nthroot {\r\n    private _radical: number;\r\n    private _nth: number;\r\n    private _coefficient: number;\r\n    private _isValid:boolean;\r\n\r\n    constructor() {\r\n        this._radical = 1;\r\n        this._coefficient = 1;\r\n        this._nth = 2;\r\n        this._isValid = true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get radical(): number {\r\n        return this._radical;\r\n    }\r\n\r\n    set radical(value: number) {\r\n        this._radical = value;\r\n    }\r\n\r\n    get nth(): number {\r\n        return this._nth;\r\n    }\r\n\r\n    set nth(value: number) {\r\n        if (Number.isSafeInteger(value) && value >= 2) {\r\n            this._nth = value;\r\n        } else {\r\n            // Error setting the nth root.\r\n            console.log('Error setting the nth root');\r\n            this._nth = 2;\r\n        }\r\n    }\r\n\r\n    get coefficient(): number {\r\n        return this._coefficient;\r\n    }\r\n\r\n    set coefficient(value: number) {\r\n        this._coefficient = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let C: string;\r\n\r\n        if (this._coefficient === 1) {\r\n            C = '';\r\n        } else if (this._coefficient === -1) {\r\n            C = '-';\r\n        } else {\r\n            C = this._coefficient.toString();\r\n        }\r\n\r\n        if (this._radical === 1) {\r\n            return `${this._coefficient}`;\r\n        } else {\r\n            if (this._nth === 2) {\r\n                return `${C}\\\\sqrt{${this._radical}}`\r\n            } else {\r\n                return `${C}\\\\sqrt[${this._nth}]{${this._radical}}`\r\n            }\r\n        }\r\n    }\r\n\r\n    get value(): number {\r\n        return this._coefficient * Math.pow(this._radical, 1 / this._nth);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (radical: number, nthroot?: number, coefficient?: number): Nthroot => {\r\n        this._coefficient = (coefficient === undefined) ? 1 : coefficient;\r\n        this._nth = (nthroot === undefined) ? 2 : nthroot;\r\n        this._radical = (radical === undefined) ? 1 : radical;\r\n\r\n        if(this._nth%2===0 && this._radical<0){\r\n            this._isValid = false;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    reduce = (): Nthroot => {\r\n        // Max value to test.\r\n        let V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n        while (V > 1) {\r\n            if (this._radical % Math.pow(V, this._nth) === 0) {\r\n                // It's dividable by V^n\r\n                this._coefficient *= V;\r\n                this._radical = this._radical / Math.pow(V, this._nth);\r\n\r\n                // Redifine the new testing value (this is optimization)\r\n                V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n                continue;\r\n            }\r\n            V--;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiply = (N: Nthroot): Nthroot => {\r\n        this._radical *= N.radical;\r\n        return this.reduce();\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Help functions\r\n    // ------------------------------------------\r\n    hasRadical = ():boolean => {\r\n        return !(this._radical===1 || this._radical===0 || this._isValid===false)\r\n    };\r\n}","import {Point} from \"./point\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Equation} from \"../algebra/equation\";\r\nimport {Polynom} from \"../algebra/polynom\";\r\n\r\n\r\nexport class Circle {\r\n    private _center: Point;\r\n    private _radius: Fraction;\r\n    private _exists: boolean;\r\n    constructor(...values: any) {\r\n        this._exists = false\r\n\r\n        if(values!==undefined){this.parse(...values)}\r\n    }\r\n\r\n    private parse(...values: any) {\r\n        if(values.length===2){\r\n            this._center = new Point(values[0])\r\n            this._radius = new Fraction(values[1])\r\n        }\r\n    }\r\n\r\n    get tex(): string {\r\n        let cx, cy\r\n        if(this._center.x.isZero()){\r\n            cx = 'x^2'\r\n        }else{\r\n            cx = `\\\\left(x-${this._center.x.tex}\\\\right)^2`\r\n        }\r\n        if(this._center.y.isZero()){\r\n            cy = 'y^2'\r\n        }else{\r\n            cy = `\\\\left(y-${this._center.y.tex}\\\\right)^2`\r\n        }\r\n        return `${cx}+${cy}=${this._radius.pow(2).tex}`\r\n    }\r\n\r\n    get developed():string {\r\n        let equ = new Equation(\r\n            new Polynom(`(x-(${this._center.x.display}))^2+(y-(${this._center.y.display}))^2`),\r\n            new Polynom(`${this._radius.pow(2).display}`)\r\n        )\r\n\r\n        return equ.moveLeft().tex;\r\n    }\r\n}","export * from \"./circle\"\r\nexport * from \"./line\"\r\nexport * from \"./point\"\r\nexport * from \"./triangle\"\r\nexport * from \"./vector\"","/**\r\n * This class works for 2d line in a plane.\r\n */\r\n\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Vector} from \"./vector\";\r\nimport {Point} from \"./point\";\r\nimport {Polynom} from \"../algebra/polynom\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Equation} from \"../algebra/equation\";\r\n\r\nexport class Line {\r\n    // A line is defined as the canonical form\r\n    // ax + by + c = 0\r\n    private _a: Fraction;\r\n    private _b: Fraction;\r\n    private _c: Fraction;\r\n    private _OA: Point;\r\n    private _d: Vector;\r\n    private _n: Vector;\r\n    private _exists: boolean\r\n\r\n    constructor(...values: any) {\r\n\r\n        this._exists = false;\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isLine():boolean {return true;}\r\n    get exists(): boolean {return this._exists; }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equation(): Equation {\r\n        return new Equation(new Polynom().parse('xy', this._a, this._b, this._c), new Polynom('0')).simplify();\r\n    }\r\n    get tex(): { canonical: string, mxh: string, parametric: string } {\r\n        // canonical    =>  ax + by + c = 0\r\n        // mxh          =>  y = -a/b x - c/b\r\n        // parametric   =>  (xy) = OA + k*d\r\n\r\n        let canonical = this.equation;\r\n        // Make sur the first item is positive.\r\n        if(this._a.isNegative()){\r\n            canonical.multiply(-1);\r\n        }\r\n\r\n        return {\r\n            canonical: canonical.tex,\r\n            mxh: this.slope.isInfinity() ? 'x=' + this.OA.x.tex : 'y=' + new Polynom().parse('x', this.slope, this.height).tex,\r\n            parametric: `${Point.pmatrix('x', 'y')} = ${Point.pmatrix(this._OA.x, this._OA.y)} + k\\\\cdot ${Point.pmatrix(this._d.x, this._d.y)}`\r\n        }\r\n    }\r\n\r\n    get a(): Fraction {\r\n        return this._a;\r\n    }\r\n\r\n    set a(value: Fraction) {\r\n        this._a = value;\r\n    }\r\n\r\n    get b(): Fraction {\r\n        return this._b;\r\n    }\r\n\r\n    set b(value: Fraction) {\r\n        this._b = value;\r\n    }\r\n\r\n    get c(): Fraction {\r\n        return this._c;\r\n    }\r\n\r\n    set c(value: Fraction) {\r\n        this._c = value;\r\n    }\r\n\r\n    get OA(): Point {\r\n        return this._OA;\r\n    }\r\n\r\n    set OA(value: Point) {\r\n        this._OA = value;\r\n    }\r\n\r\n    get d(): Vector {\r\n        return this._d;\r\n    }\r\n\r\n    get n(): Vector {\r\n        return this._n;\r\n    }\r\n\r\n    get normal(): Vector {\r\n        return new Vector(this._a, this._b);\r\n    }\r\n\r\n    set d(value: Vector) {\r\n        this._d = value;\r\n    }\r\n\r\n    get slope(): Fraction {\r\n        return this._a.clone().opposed().divide(this._b);\r\n    }\r\n\r\n    get height(): Fraction {\r\n        return this._c.clone().opposed().divide(this._b);\r\n    }\r\n\r\n// ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...values: any): Line => {\r\n        this._exists = false;\r\n\r\n        if (values.length === 3) {\r\n            return this.parseByCoefficient(values[0], values[1], values[2]);\r\n        } else if (values.length === 2) {\r\n            if (values[0].isPoint && values[1].isVector) {\r\n                return this.parseByPointAndVector(values[0], values[1]);\r\n            } else if (values[0].isPoint && values[1].isPoint) {\r\n                return this.parseByPointAndVector(values[0], new Vector(values[0], values[1]));\r\n            }\r\n        } else if (values.length === 1){\r\n            // It's a already a line - clone it !\r\n            if(values[0].isLine){\r\n                return values[0].clone();\r\n            }\r\n\r\n            // Maybe it's a string or an equation\r\n            let equ = new Equation(values[0]);\r\n            if(equ.isEquation){\r\n                // Check if it's a valid equation.\r\n                equ.reorder(true)\r\n\r\n                // It must contain either x, y or both.\r\n                let letters = new Set(equ.letters());\r\n\r\n                // No 'x', no 'y' in the equations\r\n                if(!(letters.has('x') || letters.has('y'))){return;}\r\n\r\n                // Another letter in the equation.\r\n                for(let elem of ['x', 'y']){\r\n                    if(letters.has(elem)){\r\n                        letters.delete(elem)}\r\n                }\r\n\r\n                if(letters.size>0){\r\n                    console.log('Extra variable in the equation.')\r\n                    return this;\r\n                }\r\n\r\n                // Everything should be ok now...\r\n                return this.parseByCoefficient(equ.left.monomByLetter('x').coefficient, equ.left.monomByLetter('y').coefficient, equ.left.monomByDegree(0).coefficient)\r\n            }\r\n        }\r\n        // TODO: Add the ability to create line from a normal vector\r\n        console.log('Someting wrong happend while creating the line')\r\n        return this;\r\n    }\r\n\r\n    parseByCoefficient = (a: Fraction, b: Fraction, c: Fraction): Line => {\r\n        this._a = new Fraction(a);\r\n        this._b = new Fraction(b);\r\n        this._c = new Fraction(c);\r\n\r\n        // TODO: initialize direction and reference point\r\n        this._d = new Vector(this._b.clone(), this._a.clone().opposed());\r\n        this._OA = new Point(new Fraction().zero(), this._c.clone());\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    parseByPointAndVector = (P: Point, d: Vector): Line => {\r\n        // OX = OP + k*d\r\n        // x = px + kdx     * dy\r\n        // y = py + kdy     * dx\r\n        // ------------------\r\n        // dy * x = px * dy + kdxdy\r\n        // dx * y = py * dx + kdxdy\r\n        // ------------------\r\n        // dy * x - dx * y = px * dy - py * dx\r\n        // dy * x - dx * y - (px * dy - py * dx) = 0\r\n        this.parseByCoefficient(\r\n            d.y,\r\n            d.x.clone().opposed(),\r\n            P.x.clone().multiply(d.y).subtract(P.y.clone().multiply(d.x)).opposed()\r\n        )\r\n\r\n        // Choose the current values as point and direction vector instead of the automatic version.\r\n        this._OA = P.clone();\r\n        this._d = d.clone();\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    clone = (): Line => {\r\n        this._a = this._a.clone();\r\n        this._b = this._b.clone();\r\n        this._c = this._c.clone();\r\n\r\n        this._d = this._d.clone();\r\n        this._OA = this._OA.clone();\r\n        this._n = this._n.clone();\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    isParellelTo = (line: Line): Boolean => {\r\n        // Do they have the isSame direction ?\r\n        return this.slope.isEqual(line.slope) && this.height.isDifferent(line.height);\r\n    }\r\n    isSameAs = (line: Line): Boolean => {\r\n        return this.slope.isEqual(line.slope) && this.height.isEqual(line.height);\r\n    }\r\n    simplifyDirection = (): Line => {\r\n        let lcm = Numeric.lcm(this._d.x.denominator, this._d.y.denominator),\r\n            gcd = Numeric.gcd(this._d.x.numerator, this._d.y.numerator);\r\n\r\n        this._d.x.multiply(lcm).divide(gcd);\r\n        this._d.y.multiply(lcm).divide(gcd);\r\n        return this;\r\n    }\r\n    intersection = (line: Line): { point: Point, hasIntersection: boolean, isParallel: boolean, isSame: boolean } => {\r\n        let Pt = new Point(), isParallel = false, isSame = false, hasIntersection = true;\r\n\r\n        // this         => ax+by+c = 0\r\n        // line         => dx+ey+f = 0\r\n        //\r\n        //  aex + bey + ce = 0\r\n        //  dbx + bey + bf = 0\r\n        // (ae-db)x + ce-bf = 0\r\n        //\r\n        //  adx + bdy + cd = 0\r\n        //  adx + aey + af = 0\r\n        // (bd-ae)y + (cd-af)\r\n        //\r\n        // x = (bf-ce)/(ae-db)\r\n        // y = (af-cd)/(bd-ae)\r\n\r\n\r\n        // Theres is no 'y'\r\n        if (this._b.isZero() || line.b.isZero()) {\r\n            // TODO : handle no y in the line canonical form\r\n        }\r\n\r\n        if (this.isParellelTo(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isParallel = true;\r\n        } else if (this.isSameAs(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isSame = true;\r\n        } else {\r\n            Pt.x = this._b.clone().multiply(line.c).subtract(this._c.clone().multiply(line.b))\r\n                .divide(this._a.clone().multiply(line.b).subtract(this._b.clone().multiply(line.a)));\r\n            Pt.y = this._a.clone().multiply(line.c).subtract(this._c.clone().multiply(line.a))\r\n                .divide(this._b.clone().multiply(line.a).subtract(this._a.clone().multiply(line.b)));\r\n        }\r\n\r\n        return {\r\n            point: Pt,\r\n            hasIntersection: !(isParallel || isSame),\r\n            isParallel,\r\n            isSame\r\n        };\r\n    }\r\n\r\n    distanceTo(pt: Point): { value: number, fraction: Fraction, tex: string } {\r\n        let numerator = pt.x.clone().multiply(this._a)\r\n                .add(pt.y.clone().multiply(this._b))\r\n                .add(this._c).abs(),\r\n            d2 = this.normal.normSquare;\r\n\r\n        // The denominator is null - shouldn't be possible\r\n        if (d2.isZero()) {\r\n            return {\r\n                value: NaN,\r\n                tex: 'Not a line',\r\n                fraction: new Fraction().infinite()\r\n            }\r\n        }\r\n        // The denominator is a perfect square - simplify the tex result\r\n        let value = numerator.value / Math.sqrt(d2.value),\r\n            F = numerator.clone().divide(d2.clone().sqrt());\r\n\r\n        // The denominator is a perfect square.\r\n        if (d2.isSquare()) {\r\n            return {\r\n                value,\r\n                tex: F.tex,\r\n                fraction: F\r\n            }\r\n        }\r\n        // Complete answer...\r\n        return {\r\n            value,\r\n            tex: `\\\\frac{${numerator.tex}}{\\\\sqrt{${d2.tex}}}`,\r\n            fraction: F\r\n        };\r\n    }\r\n\r\n    hitSegment(A: Point, B: Point): boolean {\r\n        let iPt = this.intersection(\r\n            new Line(A, B)\r\n        )\r\n\r\n        // There is an intersection point\r\n        if(iPt.hasIntersection) {\r\n            return iPt.point.x.value >= Math.min(A.x.value, B.x.value)\r\n                && iPt.point.x.value <= Math.max(A.x.value, B.x.value)\r\n                && iPt.point.y.value >= Math.min(A.y.value, B.y.value)\r\n                && iPt.point.y.value <= Math.max(A.y.value, B.y.value)\r\n        }\r\n        return false;\r\n    }\r\n    // ------------------------------------------\r\n    // Special functions\r\n    // ------------------------------------------\r\n    canonicalAsFloatCoefficient(decimals: number): string{\r\n        if(decimals===undefined){\r\n            decimals = 2;\r\n        }\r\n\r\n        let ca = this._a.value,\r\n            cb = this._b.value,\r\n            cc= this._c.value,\r\n            canonical = '';\r\n\r\n        if(!this._a.isZero()){\r\n            if(this._a.isOne()){\r\n                canonical = 'x'\r\n            }else if(this._a.clone().opposed().isOne()){\r\n                canonical = '-x'\r\n            }else{\r\n                canonical = this._a.value.toFixed(decimals)+'x'\r\n            }\r\n        }\r\n\r\n        if(!this._b.isZero()){\r\n            if(this._b.isPositive()){canonical+='+'}\r\n            canonical += this._b.value.toFixed(decimals) + 'y'\r\n        }\r\n\r\n        if(!this._c.isZero()){\r\n            if(this._c.isPositive()){canonical+='+'}\r\n            canonical += this._c.value.toFixed(decimals)\r\n        }\r\n\r\n\r\n        return canonical + '=0';\r\n    }\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\n//TODO: Ajouter une vérification si la droite existe.\r\nexport class Point {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n    private _exist: Boolean;\r\n\r\n    constructor(...values: any) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this\r\n    };\r\n\r\n    get isPoint() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.tex);\r\n        pts.push(this._y.tex);\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Point => {\r\n        // Initialize the value.\r\n        this.zero();\r\n\r\n        // Nothing is given\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        // One element is given - might be already a point !\r\n        if (values.length === 1) {\r\n            // it's already a point - clone it\r\n            if (values[0] instanceof Point) {\r\n                this._x = values[0].x.clone()\r\n                this._y = values[0].y.clone()\r\n                return this;\r\n            }\r\n\r\n            // Value is given as string, comma separated.\r\n            if(typeof values[0] === 'string'){\r\n                let xy = values[0].split(',')\r\n                if(xy.length===2){\r\n                    this._x = new Fraction(xy[0]).reduce()\r\n                    this._y = new Fraction(xy[1]).reduce()\r\n                    return this;\r\n                }\r\n            }\r\n\r\n            // Value given as an object with {x: value, y: value}\r\n            if (values[0].x !== undefined && values[0].y !== undefined) {\r\n                this._x = new Fraction(values[0].x).reduce()\r\n                this._y = new Fraction(values[0].y).reduce()\r\n            } else {\r\n                return this.zero();\r\n            }\r\n        }\r\n        if (values.length === 2) {\r\n            this._x = new Fraction(values[0]).reduce()\r\n            this._y = new Fraction(values[1]).reduce()\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Point => {\r\n        this._x = this._x.clone()\r\n        this._y = this._y.clone()\r\n\r\n        return this\r\n    }\r\n\r\n    zero = (): Point => {\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    origin = (): Point => {\r\n        this.zero();\r\n        return this;\r\n    }\r\n\r\n    middleOf = (P1: Point, P2: Point): Point => {\r\n        this._x = P1.x.clone().add(P2.x).divide(2);\r\n        this._y = P1.y.clone().add(P2.y).divide(2);\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Display functions\r\n    // ------------------------------------------\r\n    texValues = (numberOfDigits: number): string => {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.value.toFixed(numberOfDigits===undefined?2:numberOfDigits));\r\n        pts.push(this._y.value.toFixed(numberOfDigits===undefined?2:numberOfDigits));\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Static functions\r\n    // ------------------------------------------\r\n    static pmatrix = (a: any, b: any, c?: any): string => {\r\n        if (c === undefined) {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\end{pmatrix}`;\r\n        } else {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\\\\\ ${c.tex ? c.tex : c} \\\\end{pmatrix}`;\r\n        }\r\n    };\r\n\r\n}\r\n","import {Point} from \"./point\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Vector} from \"./vector\";\r\nimport {Line} from \"./line\";\r\nimport {Equation} from \"../algebra/equation\";\r\n\r\ninterface remarquableLines {\r\n    'medians': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'mediators': {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line,\r\n        'intersection': Point\r\n    },\r\n    'heights': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'bisectors': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    }\r\n}\r\n\r\nexport class Triangle {\r\n    private _A: Point;\r\n    private _B: Point;\r\n    private _C: Point;\r\n    private _lines: {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line\r\n    };\r\n    private _middles: {\r\n        'AB': Point,\r\n        'AC': Point,\r\n        'BC': Point\r\n    };\r\n    private _remarquables: remarquableLines;\r\n\r\n\r\n    constructor(...values: any) {\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    get isTriangle():boolean {return true;}\r\n\r\n    // ------------------------------------------\r\n    // Getter and setters\r\n    // ------------------------------------------\r\n\r\n    get A(): Point {\r\n        return this._A;\r\n    }\r\n\r\n    get B(): Point {\r\n        return this._B;\r\n    }\r\n\r\n    get C(): Point {\r\n        return this._C;\r\n    }\r\n\r\n    get AB(): Vector {\r\n        return this.getSegment('A', 'B');\r\n    }\r\n\r\n    get BA(): Vector {\r\n        return this.getSegment('B', 'A');\r\n    }\r\n\r\n    get BC(): Vector {\r\n        return this.getSegment('B', 'C');\r\n    }\r\n\r\n    get CB(): Vector {\r\n        return this.getSegment('C', 'B');\r\n    }\r\n\r\n    get AC(): Vector {\r\n        return this.getSegment('A', 'C');\r\n    }\r\n\r\n    get CA(): Vector {\r\n        return this.getSegment('C', 'A');\r\n    }\r\n\r\n    get isRectangle(): boolean {\r\n        if (this.AB.isNormalTo(this.BC)) {\r\n            return true;\r\n        }\r\n        if (this.AB.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n        if (this.BC.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    get isEquilateral(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) &&\r\n            this.AB.normSquare.isEqual(this.AC.normSquare);\r\n    }\r\n\r\n    get isIsocele(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) ||\r\n            this.AB.normSquare.isEqual(this.AC.normSquare) ||\r\n            this.BC.normSquare.isEqual(this.AC.normSquare)\r\n    }\r\n\r\n    get lines(): { 'AB': Line, 'BC': Line, 'AC': Line } {\r\n        return this._lines;\r\n    }\r\n\r\n    get remarquables(): remarquableLines {\r\n        return this._remarquables;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Parse values to a triangle. Supported formats:\r\n     * Point, Point, Point\r\n     * x1, y1, x2, y2, x3, y3\r\n     * TODO: Something else ?\r\n     * @param values\r\n     */\r\n    parse = (...values: any): Triangle => {\r\n        if (values.length === 6) {\r\n            // Check if all values are number or fractions.\r\n            let v = values.map((x: any) => new Fraction(x));\r\n            return this.parse(\r\n                new Point(v[0], v[1]),\r\n                new Point(v[2], v[3]),\r\n                new Point(v[4], v[5]),\r\n            )\r\n        } else if (values.length === 3) {\r\n            // Possibilities:\r\n            // - Three points (or part of points, only dict for example, or array (TODO: Add the array syntax for point)\r\n            // - Three lines\r\n            // - Three lines as text.\r\n            if(values.filter((x:any) => typeof x === 'string').length===3) {\r\n                return this.parse( ...values.map((x:string) => new Line(x)) )\r\n            }else if(values.filter((x:any) => x.isLine === true).length===3) {\r\n                // We have three lines\r\n                this._lines = {\r\n                    'AB': values[0],\r\n                    'BC': values[1],\r\n                    'AC': values[2]\r\n                };\r\n\r\n                // Get the intersection points -> build the triangle using these intersection points.\r\n                let intersect = values[0].intersection(values[1]);\r\n                if (intersect.hasIntersection) {\r\n                    this._B = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[1].intersection(values[2]);\r\n                if (intersect.hasIntersection) {\r\n                    this._C = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[2].intersection(values[0]);\r\n                if (intersect.hasIntersection) {\r\n                    this._A = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n            }else {\r\n                // At least, one of the value is not a point.\r\n                if (values.filter((x: any) => x.isPoint === true).length < 3) {\r\n                    return this.parse(\r\n                        new Point(values[0]),\r\n                        new Point(values[1]),\r\n                        new Point(values[2])\r\n                    )\r\n                }\r\n\r\n                // We have three points.\r\n                this._A = values[0].clone();\r\n                this._B = values[1].clone();\r\n                this._C = values[2].clone();\r\n\r\n                this._lines = {\r\n                    'AB': new Line(this._A, this._B),\r\n                    'BC': new Line(this._B, this._C),\r\n                    'AC': new Line(this._A, this._C)\r\n                };\r\n            }\r\n        } else if (values.length === 1) {\r\n            if (values[0].isTriangle === true) {\r\n                return values[0].clone();\r\n            }\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the Triangle class\r\n     */\r\n    clone = (): Triangle => {\r\n        this._A = this._A.clone();\r\n        this._B = this._B.clone();\r\n        this._C = this._C.clone();\r\n\r\n        this._lines = {\r\n            'AB': this._lines.AB.clone(),\r\n            'BC': this._lines.BC.clone(),\r\n            'AC': this._lines.AC.clone()\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Triangle operations and properties\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Generate the Line object for the three segments of the triangle\r\n     */\r\n    private _updateTriangle = () => {\r\n        this._middles = {\r\n            'AB': new Point().middleOf(this._A, this._B),\r\n            'AC': new Point().middleOf(this._A, this._C),\r\n            'BC': new Point().middleOf(this._B, this._C)\r\n        }\r\n\r\n        this._remarquables = this._calculateRemarquableLines();\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the Point class for the given name\r\n     * @param ptName\r\n     */\r\n    private getPointByName = (ptName: string): Point => {\r\n        switch (ptName.toUpperCase()) {\r\n            case 'A':\r\n                return this._A;\r\n            case 'B':\r\n                return this._B;\r\n            case 'C':\r\n                return this._C;\r\n        }\r\n\r\n        // Something went wrong ! Return the first point\r\n        return this._A;\r\n    }\r\n    /**\r\n     * Get the vector for the segment given by name.\r\n     * @param ptName1\r\n     * @param ptName2\r\n     */\r\n    private getSegment = (ptName1: string, ptName2: string): Vector => {\r\n        return new Vector(\r\n            this.getPointByName(ptName1),\r\n            this.getPointByName(ptName2)\r\n        );\r\n    }\r\n\r\n    private _calculateRemarquableLines = (): remarquableLines => {\r\n        let remarquables: remarquableLines = {\r\n            'medians': {\r\n                'A': new Line(this._A, this._middles.BC),\r\n                'B': new Line(this._B, this._middles.AC),\r\n                'C': new Line(this._C, this._middles.AB),\r\n                'intersection': null\r\n            },\r\n            'mediators': {\r\n                'AB': new Line(this._middles.AB, new Vector(this._A, this._B).normal()),\r\n                'AC': new Line(this._middles.AC, new Vector(this._A, this._C).normal()),\r\n                'BC': new Line(this._middles.BC, new Vector(this._B, this._C).normal()),\r\n                'intersection': null\r\n            },\r\n            'heights': {\r\n                'A': new Line(this._A, new Vector(this._B, this._C).normal()),\r\n                'B': new Line(this._B, new Vector(this._A, this._C).normal()),\r\n                'C': new Line(this._C, new Vector(this._A, this._B).normal()),\r\n                'intersection': null\r\n            },\r\n            'bisectors': {\r\n                'A': this._calculateBisectors('A'),\r\n                'B': this._calculateBisectors('B'),\r\n                'C': this._calculateBisectors('C'),\r\n                'intersection': null\r\n            }\r\n        }\r\n\r\n        // As it's a triangle, we assume the lines are intersecting and aren't parallel or superposed.\r\n        remarquables.medians.intersection = remarquables.medians.A.intersection(remarquables.medians.B).point;\r\n        remarquables.mediators.intersection = remarquables.mediators.AB.intersection(remarquables.mediators.BC).point;\r\n        remarquables.heights.intersection = remarquables.heights.A.intersection(remarquables.heights.B).point;\r\n        remarquables.bisectors.intersection = remarquables.bisectors.A.intersection(remarquables.bisectors.B).point;\r\n\r\n        // Everything was calculated for the remarquable lines.\r\n        return remarquables;\r\n    }\r\n\r\n    private _calculateBisectors = (pt: string): Line => {\r\n        let tlines = this.lines, d1, d2;\r\n\r\n        if(pt==='A'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.AC;\r\n        }else if(pt==='B'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.BC;\r\n        }else if(pt==='C'){\r\n            d1 = tlines.BC;\r\n            d2 = tlines.AC;\r\n        }\r\n\r\n        let b1 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm)).reorder(true).simplify()),\r\n            b2 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm).opposed()).reorder(true).simplify());\r\n\r\n        // Must determine which bisectors is in the triangle\r\n        if(pt==='A'){\r\n            return b1.hitSegment(this.B, this.C)?b1:b2;\r\n        }\r\n        if(pt==='B'){\r\n            return b1.hitSegment(this.A, this.C)?b1:b2;\r\n        }\r\n        if(pt==='C'){\r\n            return b1.hitSegment(this.B, this.A)?b1:b2;\r\n        }\r\n\r\n        // Default returns the first bisector\r\n        return b1;\r\n    }\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Numeric} from \"../numeric\";\r\n\r\nexport class Vector {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n\r\n    constructor(...values: any) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n    };\r\n\r\n    get isVector() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get normSquare(): Fraction {\r\n        return this._x.clone().pow(2).add(this._y.clone().pow(2));\r\n    }\r\n\r\n    get norm(): number {\r\n        return Math.sqrt(this.normSquare.value);\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\begin{pmatrix}${this._x.tex} \\\\\\\\\\ ${this._y.tex} \\\\end{pmatrix}`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Vector => {\r\n        // TODO: Must be more strict about what is given and limit to two dimensional vectors.p\r\n        // Maybe more than one value was given...\r\n        // Initialize the vector\r\n        this.zero();\r\n\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        if (values.length === 1) {\r\n            if (values[0].isVector) {\r\n                return values[0].clone()\r\n            } else {\r\n                return this._parseString(values[0])\r\n            }\r\n        }\r\n\r\n        if (values.length >= 2) {\r\n            // Two points are given - skip the third value.\r\n            if (values[0].isPoint && values[1].isPoint) {\r\n                this._x = values[1].x.clone().subtract(values[0].x)\r\n                this._y = values[1].y.clone().subtract(values[0].y)\r\n                return this;\r\n            }\r\n\r\n            // Fractions or a number are give\r\n            if (values[0].isFraction || !isNaN(values[0])) {\r\n                this._x = new Fraction(values[0])\r\n            }\r\n            if (values[1].isFraction || !isNaN(values[1])) {\r\n                this._y = new Fraction(values[1])\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Vector => {\r\n        let V = new Vector();\r\n\r\n        if (this._x !== null) {\r\n            V.x = this._x.clone();\r\n        }\r\n        if (this._y !== null) {\r\n            V.y = this._y.clone();\r\n        }\r\n        return V;\r\n    }\r\n\r\n    reset = (): Vector => {\r\n        this._x = null;\r\n        this._y = null;\r\n        return this;\r\n    }\r\n\r\n    zero = (): Vector => {\r\n        this.reset();\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    one = (): Vector => {\r\n        this._x = new Fraction();\r\n        this._y = new Fraction();\r\n        return this;\r\n    }\r\n\r\n    private _parseString = (value: string): Vector => {\r\n        // Split comma, semi colon or single space.\r\n        let components = value.split(/[,;\\s]/g);\r\n\r\n        // Validate the fraction values.\r\n        this.x = new Fraction(components[0] || null);\r\n        this.y = new Fraction(components[1] || null);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Vector => {\r\n        this._x.opposed();\r\n        this._y.opposed();\r\n        return this;\r\n    }\r\n\r\n    add = (V: Vector): Vector => {\r\n        this._x.add(V.x);\r\n        this._y.add(V.y);\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (V: Vector): Vector => {\r\n        return this.add(V.clone().opposed());\r\n    }\r\n\r\n    scalarProductWithVector = (V: Vector): Fraction => {\r\n        // TODO: Add the scalar factor !!!!\r\n        return this._x.clone().multiply(V.x).add(this._y.clone().multiply(V.y));\r\n    }\r\n\r\n    static scalarProduct = (v1: Vector, v2: Vector): number => {\r\n        // TODO: Transform to fraction with nthroot.\r\n        return  v1.x.value * v2.x.value + v1.y.value * v2.y.value;\r\n    };\r\n\r\n    normal = (): Vector => {\r\n        let x = this.x.clone().opposed(), y = this.y.clone();\r\n        this._x = y;\r\n        this._y = x;\r\n        return this;\r\n    }\r\n\r\n    isNormalTo = (v: Vector): boolean => {\r\n        return this.scalarProductWithVector(v).isZero()\r\n    }\r\n\r\n    multiplyByScalar = (k: any): Vector => {\r\n        let scalar = new Fraction(k);\r\n        this._x.multiply(scalar);\r\n        this._y.multiply(scalar);\r\n        return this;\r\n    }\r\n\r\n    divideByScalar = (k:any): Vector => {\r\n        return this.multiplyByScalar(new Fraction(k).invert());\r\n    }\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    simplify = (): Vector => {\r\n        // Multiply by the lcm of denominators.\r\n        return this.multiplyByScalar(Numeric.lcm(this._x.denominator, this._y.denominator))\r\n            .divideByScalar(Numeric.gcd(this._x.numerator, this._y.numerator));\r\n    }\r\n\r\n    angleWith = (V: Vector, sharp?: Boolean, radian?: Boolean): number => {\r\n        let scalar = this.scalarProductWithVector(V).value,\r\n            toDegree = radian ? 1 : 180 / Math.PI;\r\n        if (sharp) {\r\n            scalar = Math.abs(scalar);\r\n        }\r\n\r\n        return toDegree * Math.acos(scalar / (this.norm * V.norm));\r\n    }\r\n}\r\n","export class Numeric{\r\n    static round(value:number, decimals:number=2):number {\r\n        return Number(Math.round(Number(value+'e'+decimals))+'e-'+decimals);\r\n    }\r\n\r\n    /**\r\n     * Get the list of the nth first prime numbers.\r\n     * @param nb : number of primes to choose from\r\n     */\r\n    static prime(nb?:number):number[]{\r\n        let primes:number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973];\r\n        if(nb === undefined){\r\n            return primes;\r\n        }else{\r\n            return primes.slice(0,Math.max(primes.length,nb));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the list of all dividers of a number.\r\n     * @param value\r\n     */\r\n    static dividers(value:number):number[]{\r\n        let D: number[];\r\n        const maxV = Math.sqrt(Math.abs(value));\r\n\r\n        // Initialize the list of dividers.\r\n        D = [];\r\n\r\n        for(let i=1; i<=maxV; i++){\r\n            if(value%i===0){\r\n                D.push(i);\r\n                D.push(value/i);\r\n            }\r\n        }\r\n\r\n        // Order numbers.\r\n        D.sort(function(a, b){return a-b;});\r\n\r\n        // Make sure the array of value is unique.\r\n        return [...new Set(D)];\r\n    }\r\n    /**\r\n     * Great Common Divisor\r\n     * @param values : number values\r\n     */\r\n    static gcd(...values:number[]):number{\r\n        // Define the gcd for two number\r\n        let gcd2 = function(a:number,b:number):number{\r\n            if(b===0){return a;}\r\n            return gcd2(b, a%b);\r\n        };\r\n\r\n        let g:number = 1,\r\n            i:number = 2;\r\n\r\n        // Nothing is given\r\n        if(values.length===0){return 1;}\r\n        // Only one number is given\r\n        if(values.length===1){\r\n            // The first number is zero\r\n            if(values[0]===0){return 1;}\r\n            // Return the number\r\n            return values[0];\r\n        }\r\n\r\n        // We have at least 2 numbers.\r\n        g = gcd2(values[0],values[1]);\r\n\r\n        // The gcd of the two first value is one ? It's already finished.\r\n        if(g===1){return 1;}\r\n\r\n        // The current gcd isn't one. Continue with all next values.\r\n        for(i=2; i<values.length; i++){\r\n            g = gcd2(g, values[i]);\r\n            // Escape if gcd is already one.\r\n            if(g===1){break;}\r\n        }\r\n\r\n        return Math.abs(g);\r\n    }\r\n\r\n    /**\r\n     * Least Common Multiple\r\n     * @param values: list of numbers\r\n     */\r\n    static lcm(...values:number[]):number{\r\n        return values.reduce(function(a,b){\r\n            return Math.abs(a * b / Numeric.gcd(a, b));\r\n        });\r\n    }\r\n}","export * from \"./rndMonom\"\r\nexport * from \"./rndHelpers\"\r\nexport * from \"./rndPolynom\"\r\nexport * from \"./rndTypes\"\r\nexport * from \"./random\"","import {rndPolynom} from \"./rndPolynom\";\r\nimport {rndMonom} from \"./rndMonom\";\r\nimport {rndHelpers} from \"./rndHelpers\";\r\nimport {randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {Monom, Polynom} from \"../algebra\";\r\n\r\n// export var Random = {\r\n//     monom: rndMonom,\r\n//     polynom: rndPolynom,\r\n//     number: rndHelpers.randomInt,\r\n//     numberSym: rndHelpers.randomIntSym,\r\n//     bool: rndHelpers.randomBool,\r\n//     array: rndHelpers.randomArray,\r\n//     item: rndHelpers.randomItem,\r\n//     shuffle: rndHelpers.shuffleArray\r\n// }\r\n\r\nexport namespace Random {\r\n    export function polynom(config?: randomPolynomConfig): Polynom {\r\n        return new rndPolynom(config).generate()\r\n    }\r\n\r\n    export function monom(config?: randomMonomConfig): Monom {\r\n        return new rndMonom(config).generate()\r\n    }\r\n\r\n    export function number(from:number, to:number):number { return rndHelpers.randomInt(from,to)}\r\n    export function numberSym(max:number, allowZero?:boolean):number { return rndHelpers.randomIntSym(max, allowZero)}\r\n    export function bool(percent?:number):boolean { return rndHelpers.randomBool(percent)}\r\n    export function array(arr:any[], number?:number):any[] { return rndHelpers.randomArray(arr, number)}\r\n    export function item(arr:any[]):any { return rndHelpers.randomItem(arr)}\r\n    export function shuffle(arr:any[]):any { rndHelpers.shuffleArray(arr)}\r\n\r\n\r\n}","export default class randomCore {\r\n    protected _config: Object\r\n    protected _defaultConfig: Object\r\n    mergeConfig = (config: Object, defaultConfig: Object): Object => {\r\n        if (config !== undefined) {\r\n            return {...defaultConfig, ...config}\r\n        }\r\n        return defaultConfig\r\n    }\r\n\r\n    generate = (): unknown => {\r\n        return undefined\r\n    }\r\n\r\n    config = (config: Object): randomCore => {\r\n        this._config = this.mergeConfig(config, this._defaultConfig)\r\n        return this\r\n    }\r\n}","/**\r\n * Random helpers\r\n */\r\nexport class rndHelpers {\r\n\r\n    /**\r\n     * Random boolean with a percent ratio\r\n     * @param percent\r\n     */\r\n    static randomBool(percent:number=0.5):boolean{\r\n        return Math.random()<percent;\r\n    }\r\n\r\n    /**\r\n     * Random integer between two values.\r\n     * @param a (number) : From this value to the second value. If the second is ommited, this value is the max value.\r\n     * @param b (number) : To this value. If this is ommited.\r\n     */\r\n    static randomInt(a:number, b?:number):number{\r\n        if(b===undefined){return this.randomInt(0,a);}\r\n\r\n        return Math.floor(Math.random() * (b - a + 1) + a);\r\n    }\r\n\r\n    /**\r\n     * Random integer between -max and max value.\r\n     * @param max (number) : determine the limits.\r\n     * @param zero (bool) : determine if zero is allowed or not.\r\n     */\r\n    static randomIntSym(max:number, zero?:boolean):number{\r\n        if(zero===false){\r\n            return this.randomBool()?this.randomInt(1,max):-this.randomInt(1,max);\r\n        }else{\r\n            return this.randomInt(-max, max);\r\n        }\r\n    }\r\n\r\n    static randomArray(arr: any[], number?:number):any[]{\r\n        if(number===undefined){number = 1}\r\n\r\n        // Return a clone array\r\n        if(arr.length<=0){return Object.values(arr)}\r\n\r\n        // Randomize the array and return the n first elements.\r\n        return rndHelpers.shuffleArray(arr).slice(0,number);\r\n    }\r\n\r\n    static randomItem(arr: any[]): any{\r\n        if(arr.length===0){return ''}\r\n        return this.randomArray(arr, 1)[0]\r\n    }\r\n\r\n    static shuffleArray(arr: any[]): any[] {\r\n        // The Fisher-Yates algorithm\r\n        let shuffleArray = Object.values(arr)\r\n        for (let i = shuffleArray.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            const temp = shuffleArray[i];\r\n            shuffleArray[i] = shuffleArray[j];\r\n            shuffleArray[j] = temp;\r\n        }\r\n\r\n        return shuffleArray;\r\n    }\r\n\r\n}","import randomCore from \"./randomCore\";\r\nimport {Monom} from \"../algebra\";\r\nimport {randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {Random} from \"./random\";\r\n\r\n/**\r\n * Create a random monom based on a based configuration\r\n */\r\n    export class rndMonom extends randomCore {\r\n        declare protected _config: randomMonomConfig\r\n        declare protected _defaultConfig: randomPolynomConfig\r\n\r\n        constructor(userConfig?: randomMonomConfig) {\r\n            super();\r\n\r\n            this._defaultConfig = {\r\n                letters: 'x',\r\n                degree: 2,\r\n                fraction: true,\r\n                zero: false\r\n            }\r\n\r\n            this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n        }\r\n\r\n        generate = (): Monom => {\r\n            // Create a monom instance\r\n            let M = new Monom()\r\n\r\n            // Generate the coefficient\r\n            M.coefficient.parse(Random.numberSym(10, this._config.zero), (this._config.fraction) ? Random.number(1, 10) : 1).reduce();\r\n\r\n            // Calculate the degree of the monom\r\n            if (this._config.letters.length > 1) {\r\n                // Initialise each items...\r\n                for (let L of this._config.letters.split('')) {\r\n                    M.setLetter(L, 0);\r\n                }\r\n                for (let i = 0; i < this._config.degree; i++) {\r\n                    const L = Random.item(this._config.letters.split(\"\"))\r\n                    M.setLetter(L, M.degree(L) + 1)\r\n                }\r\n            } else {\r\n                M.setLetter(this._config.letters, this._config.degree)\r\n            }\r\n\r\n            return M\r\n        }\r\n    }\r\n","import randomCore from \"./randomCore\";\r\nimport {randomPolynomConfig} from \"./rndTypes\";\r\nimport {Polynom} from \"../algebra\";\r\nimport {Monom} from \"../algebra\";\r\nimport {rndMonom} from \"./rndMonom\";\r\nimport {Random} from \"./random\";\r\n\r\n/**\r\n * Random polynoms\r\n */\r\nexport class rndPolynom extends randomCore {\r\n    declare protected _config: randomPolynomConfig\r\n    declare protected _defaultConfig: randomPolynomConfig\r\n\r\n    constructor(userConfig?: randomPolynomConfig) {\r\n        super();\r\n\r\n        // Default config for a random polynom\r\n        this._defaultConfig = {\r\n            letters: 'x',\r\n            degree: 2,\r\n            fraction: false,\r\n            zero: false,\r\n            unit: false,\r\n            factorable: false,\r\n            allowNullMonom: true,\r\n            numberOfMonoms: 0\r\n        }\r\n\r\n        // Merge config with initialiser\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Polynom => {\r\n        // Create the polynom\r\n        let P = new Polynom().empty(),\r\n            M: Monom\r\n\r\n        for (let i = this._config.degree; i >= 0; i--) {\r\n            // Create monom of corresponding degree.\r\n            M = new rndMonom({\r\n                letters: this._config.letters,\r\n                degree: i,\r\n                fraction: this._config.fraction,\r\n                zero: (i === this._config.degree) ? false : this._config.allowNullMonom\r\n            }).generate()\r\n\r\n            // If degree is the greatest and unit is true, set the monom value to one.\r\n            if (this._config.unit && this._config.degree === i) {\r\n                M.coefficient.one()\r\n            }\r\n\r\n            // Add to the polynom\r\n            P.add(M)\r\n        }\r\n\r\n        // If the number of monoms is greater than the allowed value, remove some of them...\r\n        if (this._config.numberOfMonoms > 0 && this._config.numberOfMonoms < P.length) {\r\n            console.log(P.monoms.length)\r\n            P.monoms = Random.array(P.monoms, this._config.numberOfMonoms)\r\n        }\r\n        return P\r\n    }\r\n\r\n    factorable = (): Polynom => {\r\n        let P = new Polynom()\r\n\r\n        return P\r\n    }\r\n}","type tokenType = {\r\n    [key: string]: {\r\n        precedence: number,\r\n        associative: string\r\n    }\r\n}\r\n\r\nexport class Shutingyard {\r\n    private _rpn: { token: string, tokenType: string }[] = [];\r\n    readonly _mode: 'polynom' | 'set';\r\n    private _tokenConfig: tokenType;\r\n    private _uniformize: boolean;\r\n\r\n    constructor(mode?: 'polynom' | 'set') {\r\n        this._mode = typeof mode === 'undefined' ? 'polynom' : mode;\r\n        this.tokenConfigInitialization()\r\n    }\r\n\r\n    /**\r\n     * Determin if the token is a defined operation\r\n     * Defined operations: + - * / ^ sin cos tan\r\n     * @param token\r\n     */\r\n    isOperation(token: string): boolean {\r\n        if (token[0].match(/[+\\-*/^]/g)) {\r\n            return true;\r\n        }\r\n        //\r\n        // if (token.match(/^sin|cos|tan/g)) {\r\n        //     return true;\r\n        // }\r\n\r\n        return false;\r\n    }\r\n\r\n    tokenConfigInitialization(): tokenType {\r\n        if (this._mode === 'set') {\r\n            this._tokenConfig = {\r\n                '&': {precedence: 3, associative: 'left'},\r\n                '|': {precedence: 3, associative: 'left'},\r\n                '!': {precedence: 4, associative: 'right'},\r\n                '-': {precedence: 2, associative: 'left'}\r\n            }\r\n            this._uniformize = false;\r\n        } else {\r\n            this._tokenConfig = {\r\n                '^': {precedence: 4, associative: 'right'},\r\n                '*': {precedence: 3, associative: 'left'},\r\n                '/': {precedence: 3, associative: 'left'},\r\n                '+': {precedence: 2, associative: 'left'},\r\n                '-': {precedence: 2, associative: 'left'},\r\n                '%': {precedence: 3, associative: 'right'},\r\n                'sin': {precedence: 4, associative: 'right'},\r\n                'cos': {precedence: 4, associative: 'right'},\r\n                'tab': {precedence: 4, associative: 'right'},\r\n            }\r\n            this._uniformize = true\r\n        }\r\n        return this._tokenConfig\r\n    }\r\n\r\n    /**\r\n     * Get the next token to analyse.\r\n     * @param expr (string) Expression to analyse\r\n     * @param start (number) CUrrent position in the expr string.\r\n     */\r\n    NextToken2(expr: string, start: number): [string, number, string] {\r\n        let token: string, tokenType: string;\r\n        token = '';\r\n        tokenType = '';\r\n        // Case of parenthesis or comma (generic items)\r\n        if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        } else{\r\n            // Order token keys by token characters length (descending)\r\n            const keys = Object.keys(this._tokenConfig).sort((a,b)=>b.length-a.length)\r\n\r\n            for(let key of keys){\r\n                if(expr.substr(start, key.length) === key){\r\n                    token += key;\r\n                    tokenType = 'operation'\r\n                    break\r\n                }\r\n            }\r\n\r\n            if(token===''){\r\n                // No function found ! Might be a coefficient !\r\n                if( expr[start].match(/[0-9]/) ) {\r\n                    token = expr.substr(start).match(/^([0-9.,/]+)/)[0]\r\n                    tokenType = 'coefficient'\r\n                }else if (expr[start].match(/[a-zA-Z]/)) {\r\n                    token = expr.substr(start).match(/^([a-zA-Z])/)[0]\r\n                    tokenType = 'variable'\r\n                }else{\r\n                    console.log('Unidentified token', expr[start], expr, start)\r\n                    token = expr[start]\r\n                    tokenType = 'monom'\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n\r\n        // console.log(token, tokenType)\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    NextToken(expr: string, start: number): [string, number, string] {\r\n        let tokenMatch: string[], token: string, tokenType: string;\r\n\r\n        this.NextToken2(expr, start)\r\n        // Detect a fraction monoms or return empty array\r\n        tokenMatch = (expr.substr(start).match(/^[0-9/a-zA-Z^]+/g)) || [];\r\n\r\n        if (expr.substr(start, start + 3).match(/^(sin|cos|tan)/g)) {\r\n            token = expr.substr(start, 3)\r\n            tokenType = 'function'\r\n        } else if (tokenMatch.length > 0) {\r\n            token = tokenMatch[0];\r\n            tokenType = 'monom';\r\n        }\r\n        // It's an operation !\r\n        else if (expr[start].match(/[+\\-*/^]/g)) {\r\n            token = expr[start];\r\n            tokenType = 'operation';\r\n        } else if (expr[start].match(/[&|!]/g)) {\r\n            token = expr[start];\r\n            tokenType = 'operation';\r\n        }\r\n        // It's an opening parenthese\r\n        else if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        }\r\n        // It's a monom.\r\n        else {\r\n            // TODO: Actually, negative exposant aren't supported.\r\n            // token = (expr.substr(start).match(/^[\\da-z\\^]+/g)[0])||'';\r\n            token = tokenMatch[0];\r\n            tokenType = 'monom';\r\n\r\n            if (token === '') {\r\n                token = expr[start];\r\n                tokenType = 'monom';\r\n                console.log('SHUTING YARD - NEXT TOKEN: error at ', start);\r\n            }\r\n        }\r\n\r\n        // console.log(token, start + token.length, tokenType);\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    /**\r\n     * Sanitize an expression by adding missing common operation (multiplication between parentheseses)\r\n     * @param expr\r\n     * @constructor\r\n     */\r\n    Uniformizer(expr: string): string {\r\n        // Determiner if need to be uniformized\r\n        if(!this._uniformize){return expr}\r\n\r\n        let expr2;\r\n        // Replace missing multiplication between two parenthese\r\n        expr2 = expr.replace(/\\)\\(/g, ')*(');\r\n\r\n        // Replace missing multiplication between number or setLetter and parenthese.\r\n\r\n        // 3x(x-4) => 3x*(x-4)\r\n        expr2 = expr2.replace(/([\\da-zA-Z])(\\()/g, \"$1*$2\");\r\n\r\n        // (x-4)3x => (x-4)*3x\r\n        expr2 = expr2.replace(/(\\))([\\da-zA-Z])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between number and letters.\r\n        // 3x => 3*x\r\n        expr2 = expr2.replace(/([0-9])([a-zA-Z])/g, \"$1*$2\");\r\n        expr2 = expr2.replace(/([a-zA-Z])([0-9])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between letters ?\r\n        // TODO: More robust solution to handle all letters ?\r\n        expr2 = expr2.replace(/([abcxyz])([abcxyz])/g, \"$1*$2\");\r\n\r\n        // Restore operation auto formating (prevent adding the mutliplcation star)\r\n        // TODO: Accept list of functions\r\n        let fnToken = ['sin', 'cos', 'tan']\r\n        for (let token of fnToken) {\r\n            expr2 = expr2.replace(new RegExp(token + '\\\\*', 'g'), token);\r\n        }\r\n\r\n        return expr2;\r\n    }\r\n\r\n    /**\r\n     * Parse an expression using the shutting yard tree algorithms\r\n     * @param expr (string) Expression to analyse\r\n     * Returns a RPN list of items.\r\n     * @param operators\r\n     */\r\n    parse(expr: string, operators?: string[]): Shutingyard {\r\n        let outQueue: {token:string, tokenType: string}[] = [],    // Output queue\r\n            opStack: {token:string, tokenType: string}[] = [],     // Operation queue\r\n            token: string = '',\r\n            tokenPos: number = 0,\r\n            tokenType: string = '',\r\n            previousOpStatckLength = 0\r\n\r\n        expr = this.Uniformizer(expr);\r\n\r\n        let securityLoopLvl1 = 50,\r\n            securityLoopLvl2_default = 50,\r\n            securityLoopLvl2;\r\n\r\n        while (tokenPos < expr.length) {\r\n            securityLoopLvl1--;\r\n            if (securityLoopLvl1 === 0) {\r\n                console.log('SECURITY LEVEL 1 EXIT');\r\n                break;\r\n            }\r\n\r\n            // Get the next token and the corresponding new (ending) position\r\n            [token, tokenPos, tokenType] = this.NextToken2(expr, tokenPos);\r\n\r\n            switch (tokenType) {\r\n                case 'monom':\r\n                case 'coefficient':\r\n                case 'variable':\r\n                    outQueue.push({\r\n                        token,\r\n                        tokenType\r\n                    });\r\n                    // if(previousOpStatckLength == opStack.length && outQueue.length>=2){\r\n                    //     console.log('opStatckLength', outQueue, opStack.length)\r\n                    //     outQueue.push('*')\r\n                    // }\r\n                    break;\r\n                case 'operation':\r\n                    previousOpStatckLength = opStack.length;\r\n                    //If the token is an operator, o1, then:\r\n                    if (opStack.length > 0) {\r\n                        let opTop = opStack[opStack.length - 1];\r\n\r\n\r\n                        securityLoopLvl2 = +securityLoopLvl2_default;\r\n\r\n                        //while there is an operator token o2, at the top of the operator stack and\r\n                        while (opTop.token in this._tokenConfig && (\r\n                                //either o1 is left-associative and its precedence is less than or equal to that of o2,\r\n                                (this._tokenConfig[token].associative === 'left' && this._tokenConfig[token].precedence <= this._tokenConfig[opTop.token].precedence)\r\n                                ||\r\n                                //or o1 is right associative, and has precedence less than that of o2,\r\n                                (this._tokenConfig[token].associative === 'right' && this._tokenConfig[token].precedence < this._tokenConfig[opTop.token].precedence)\r\n                            )\r\n                            ) {\r\n\r\n                            /* Security exit ! */\r\n                            securityLoopLvl2--;\r\n                            if (securityLoopLvl2 === 0) {\r\n                                console.log('SECURITY LEVEL 2 OPERATION EXIT');\r\n                                break;\r\n                            }\r\n\r\n                            // Add the operation to the queue\r\n                            outQueue.push((opStack.pop()) || {token: '', tokenType: 'operation'});\r\n\r\n                            // Get the next operation on top of the Stack.\r\n                            if(opStack.length===0){break;}\r\n                            opTop = opStack[opStack.length - 1];\r\n                        }\r\n                    }\r\n                    //at the end of iteration push o1 onto the operator stack\r\n                    opStack.push({token,tokenType});\r\n                    break;\r\n                case 'function-argument':\r\n                    // TODO: check if the opStack exist.\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 0) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 FUNCTION ARGUMENT EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n                    break;\r\n                case '(':\r\n                    opStack.push({token,tokenType});\r\n                    // Add an empty value if next element is negative.\r\n                    if (expr[tokenPos] === '-') {\r\n                        outQueue.push({token: '0', tokenType: 'coefficient'});\r\n                    }\r\n                    break;\r\n                case ')':\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    //Until the token at the top of the stack is a left parenthesis, pop operators off the stack onto the output queue.\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 1 /*Maybe zero !? */) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 CLOSING PARENTHESE EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n\r\n                    //Pop the left parenthesis from the stack, but not onto the output queue.\r\n                    opStack.pop();\r\n                    break;\r\n                case 'function':\r\n                    opStack.push({token, tokenType});\r\n                    break;\r\n                default:\r\n                    // In theory, everything should be handled.\r\n                    console.log(`SHUTING YARD: ${tokenType} : ${token} `);\r\n            }\r\n\r\n            // Output\r\n            // console.log(outQueue.concat(opStack.reverse()).join(\" \"));\r\n        }\r\n\r\n        // console.log(outQueue.concat(opStack.reverse()));\r\n        this._rpn = outQueue.concat(opStack.reverse());\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    // Getter\r\n    get rpn() {\r\n        // console.log(this._rpn)\r\n        return this._rpn;\r\n    }\r\n\r\n\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(519);\n"],"names":["window","Pi","ShutingYard","Shutingyard","Numeric","Fraction","Root","Nthroot","Monom","Polynom","Equation","LinearSystem","Rational","Logicalset","Random","Geometry","Vector","Point","Line","Triangle","Circle","_left","_right","_sign","_polynom","_solutions","_varnothing","_real","constructor","equations","this","zero","length","isEquation","clone","parse","left","isPolynom","right","solutions","solution","includes","join","isReal","undefined","solve","isVarnothing","signAsTex","tex","raw","variables","Set","concat","numberOfVars","value","sign","_formatSign","equationString","pStr","strSign","_findSign","split","create","console","log","signStr","_reverseSign","replace","_randomizeDefaults","degree","randomizeDefaults","randomize","opts","moveLeft","subtract","reorder","allLeft","mMove","m","monoms","simplify","multiply","lcm","getDenominators","divide","gcd","getNumerators","isolate","letter","isMultiVariable","cMove","hasLetter","add","opposed","coefficient","replaceBy","P","F","isZero","invert","Math","max","letters","_solveDegree1","_solveDegree2","_solveDegree3plus","isGreater","indexOf","isStrictEqual","isAlsoEqual","m1","monomByDegree","m0","v","display","s","delta","nthDelta","realX1","realX2","sX1","sX2","aF","bF","cF","denominator","a","b","sqrt","toFixed","reduce","hasRadical","dfrac","Algebra","monom","polynom","polynomString","values","equation","linearSystem","rational","numerator","logicalset","_resolutionSteps","_equations","_letters","equationStrings","isLinerarSystem","isSolvable","V","E","sort","equStr","LS","equArray","equ","L","monomByLetter","push","repeat","texSolution","map","_findLetters","setCoefficient","coefficients","i","slice","toString","setLetters","generate","solutionsF","_generateOneEquation","coeff","leftValue","equString","numberSym","_checkIfLinerCombination","_linearReduction","eq1","eq2","c1","c2","mergeEquations","factor1","factor2","eq1multiplied","eq2multiplied","_solveOneLetter","LE","reducedEquations","str","_rawString","_rpn","isLogicalset","rpn","evaluate","tokenSets","reference","referenceSet","varStack","key","token","tokenType","second","pop","first","filter","x","has","vennAB","A","B","vennABC","C","_coefficient","_literal","isMonom","literal","literalSqrt","isLitteralSquare","literalStr","inputStr","matchAll","clean","Object","keys","dividers","abs","litterals","_getLitteralDividers","monomDividers","N","M","one","arr","tmpList","d","litt","item","currentLetter","displayWithSign","trim","k","setLetter","isSameAs","multiplyByNumber","pow","nb","root","p","isSquare","compare","isEqual","M1","M2","K","isOne","Number","isSafeInteger","t","n","r","tmpValues","derivative","dM","primitive","static","coeffN","coeffD","min","areSameAs","areEquals","_monoms","_factors","_texString","factors","texFactors","factorize","f","texString","genDisplay","output","forceSign","wrapParentheses","isNaN","empty","shutingYardToReducedPolynom","test","fractions","m2","tempPolynom","stack","previousToken","element","unit","factorable","allowNullMonom","numberOfMonoms","config","rndFactorable","factorUnit","fraction","multiplyByPolynom","isFraction","multiplyByFraction","multiplyByMonom","multiplyByInteger","xmultiply","euclidian","quotient","reminder","maxMP","degreeP","newM","MaxIteration","divideByFraction","divideByInteger","nbF","cP1","cP2","isOpposedAt","isFactorized","match","e","polynomStringNormalized","replaceAll","polynomStringReduced","substr","polyFactors","splice","isDeveloped","j","S","resultPolynom","forEach","dP","integrate","valuesA","valuesB","factorize_OLD","maxValue","nbFactorsFound","commonMonom","commonPolynom","Q","securityLoop","m1d","m2d","result","dividerPolynom","_factorize2ndDegree","P1","P2","c","x1","x2","factor","isPositive","xyzPolynom","xFactors","_factorizeByGroups","getZeroes","zeroes","zeroesAsTex","D","z","frac","monomsByDegree","Ms","denominators","numerators","lcmDenominator","gcdDenominator","lcmNumerator","gcdNumerator","makeItComplicate","complexity","number","factorizePartial","mMain","mCheck","mFactor","pFactor","g","minify","canDivide","evalValue","_numerator","_denominator","domain","amplify","NumeratorEuclidien","DenominatorEuclidien","R","limits","Infinity","denominatorOrPeriodic","NaN","floor","infinite","invalid","lesser","than","leq","greater","geq","isDifferent","isOpposed","isInverted","isNegative","isInfinity","isFinite","isReduced","_radical","_nth","_isValid","radical","nth","nthroot","_center","_radius","_exists","cx","cy","y","developed","_a","_b","_c","_OA","_d","_n","isLine","exists","canonical","mxh","slope","OA","height","parametric","pmatrix","normal","parseByCoefficient","isPoint","isVector","parseByPointAndVector","elem","delete","size","isParellelTo","line","simplifyDirection","intersection","Pt","isParallel","isSame","point","hasIntersection","distanceTo","pt","d2","normSquare","hitSegment","iPt","canonicalAsFloatCoefficient","decimals","_x","_y","_exist","pts","xy","origin","middleOf","texValues","numberOfDigits","_A","_B","_C","_lines","_middles","_remarquables","isTriangle","AB","getSegment","BA","BC","CB","AC","CA","isRectangle","isNormalTo","isEquilateral","isIsocele","lines","remarquables","intersect","_updateTriangle","_calculateRemarquableLines","getPointByName","ptName","toUpperCase","ptName1","ptName2","_calculateBisectors","medians","mediators","heights","bisectors","d1","tlines","b1","norm","b2","_parseString","reset","components","scalarProductWithVector","v1","v2","multiplyByScalar","scalar","divideByScalar","angleWith","sharp","radian","toDegree","PI","acos","round","primes","maxV","gcd2","rndPolynom","rndMonom","from","to","rndHelpers","randomInt","allowZero","randomIntSym","bool","percent","randomBool","array","randomArray","randomItem","shuffle","shuffleArray","_config","_defaultConfig","mergeConfig","defaultConfig","random","temp","userConfig","super","_mode","_tokenConfig","_uniformize","mode","tokenConfigInitialization","isOperation","precedence","associative","NextToken2","expr","start","NextToken","tokenMatch","Uniformizer","expr2","fnToken","RegExp","operators","outQueue","opStack","tokenPos","previousOpStatckLength","securityLoopLvl2","securityLoopLvl1","opTop","reverse","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call"],"sourceRoot":""}