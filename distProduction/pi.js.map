{"version":3,"file":"pi.js","mappings":"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","sources":["webpack://pi/./src/maths/algebra/equation.ts","webpack://pi/./src/maths/algebra/linearSystem.ts","webpack://pi/./src/maths/algebra/logicalset.ts","webpack://pi/./src/maths/algebra/monom.ts","webpack://pi/./src/maths/algebra/polynom.ts","webpack://pi/./src/maths/algebra/rational.ts","webpack://pi/./src/maths/coefficients/fraction.ts","webpack://pi/./src/maths/coefficients/nthroot.ts","webpack://pi/./src/maths/geometry/line.ts","webpack://pi/./src/maths/geometry/point.ts","webpack://pi/./src/maths/geometry/triangle.ts","webpack://pi/./src/maths/geometry/vector.ts","webpack://pi/./src/maths/numeric.ts","webpack://pi/./src/maths/shutingyard.ts","webpack://pi/webpack/bootstrap","webpack://pi/./src/main.ts"],"sourcesContent":["import {Polynom} from \"./polynom\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Nthroot} from \"../coefficients/nthroot\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Monom} from \"./monom\";\r\n\r\nexport class Equation {\r\n    private _left: Polynom;  // Left part of the equation\r\n    private _right: Polynom; // Right part of the equation\r\n    private _sign: string;   // Signe of the equation, by default =\r\n\r\n    private _polynom: Polynom;  // Used to solve the equation // TODO: remove the private value ?\r\n    private _solutions: string[];    // Array of the solutions\r\n\r\n    // Undetermined solutions.\r\n    private _varnothing: string = '\\\\varnothing';\r\n    private _real: string = '\\\\mathbb{R}';\r\n\r\n    /**\r\n     * Create an Equation using two polynoms.\r\n     * @param equation Equation string\r\n     */\r\n    constructor(...equations: any) {\r\n        // Default equation\r\n        this._left = new Polynom().zero();\r\n        this._right = new Polynom().zero();\r\n        this._sign = '=';\r\n\r\n        if (equations.length === 1) {\r\n            if (equations[0].isEquation === true) {\r\n                return equations[0].clone();\r\n            } else {\r\n                this.parse(equations[0]);\r\n            }\r\n        } else if (equations.length === 2) {\r\n            this.left = equations[0].isPolynom ? equations[0].clone() : new Polynom(equations[0]);\r\n            this.right = equations[1].isPolynom ? equations[1].clone() : new Polynom(equations[1]);\r\n        } else {\r\n            // Return default empty equation\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isEquation() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    // TODO: Check the getters and setters.\r\n    get solutions(): string[] {\r\n        return this._solutions;\r\n    }\r\n\r\n    get solution(): string {\r\n        if (this._solutions.length === 1\r\n            &&\r\n            (\r\n                this._solutions[0] === this._real\r\n                || this._solutions[0] === this._varnothing\r\n                || this._solutions[0].includes('\\\\left')\r\n            )\r\n        ) {\r\n            return `S = ${this._solutions[0]}`;\r\n        }\r\n        return `S = \\\\left{ ${this._solutions.join(';')} \\\\right}`;\r\n    }\r\n\r\n    get isReal(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0] === this._real;\r\n    }\r\n\r\n    get isVarnothing(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0] === this._varnothing;\r\n    }\r\n\r\n    get signAsTex(): string {\r\n        if (this._sign === '>=' || this._sign === '=>' || this._sign === 'geq') {\r\n            return '\\\\geq';\r\n        }\r\n        if (this._sign === '<=' || this._sign === '=<' || this._sign === 'leq') {\r\n            return '\\\\leq';\r\n        }\r\n        return this._sign;\r\n    }\r\n\r\n    get tex(): string {\r\n        return `${this._left.tex}${this.signAsTex}${this._right.tex}`;\r\n    }\r\n\r\n    get raw(): string {\r\n        return `${this._left.raw}${this.signAsTex}${this._right.raw}`;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        return [...new Set(this._right.variables.concat(this._left.variables))];\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    get left(): Polynom {\r\n        return this._left;\r\n    }\r\n\r\n    set left(value: Polynom) {\r\n        this._left = value;\r\n    }\r\n\r\n    get right(): Polynom {\r\n        return this._right;\r\n    }\r\n\r\n    set right(value: Polynom) {\r\n        this._right = value;\r\n    }\r\n\r\n    get sign(): string {\r\n        return this._sign;\r\n    }\r\n\r\n    set sign(value: string) {\r\n        // Set the sign value as formatted.\r\n        this._sign = this._formatSign(value);\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (equationString: string): Equation => {\r\n        let pStr: string[], strSign: string | false;\r\n        // Find the string separator\r\n        strSign = this._findSign(equationString);\r\n\r\n        if (strSign === false) {\r\n            console.log('The equation is not valid (no sign found)');\r\n            return;\r\n        }\r\n\r\n        // The StrSign is found\r\n        pStr = equationString.split(strSign);\r\n\r\n        return this.create(new Polynom(pStr[0]), new Polynom(pStr[1]), this._formatSign(strSign));\r\n    };\r\n\r\n    private _findSign = (equationString: string): string | false => {\r\n        let strSign: string = '';\r\n\r\n        if (equationString.includes('geq')) {\r\n            return (equationString.includes('\\\\geq')) ? '\\\\geq' : 'geq';\r\n        } else if (equationString.includes('leq')) {\r\n            return (equationString.includes('\\\\leq')) ? '\\\\leq' : 'leq';\r\n        } else if (equationString.includes('>=')) {\r\n            return '>=';\r\n        } else if (equationString.includes('=>')) {\r\n            return '=>';\r\n        } else if (equationString.includes('>')) {\r\n            return '>';\r\n        } else if (equationString.includes('<=')) {\r\n            return '<=';\r\n        } else if (equationString.includes('=<')) {\r\n            return '=<';\r\n        } else if (equationString.includes('<')) {\r\n            return '<';\r\n        } else if (equationString.includes('=')) {\r\n            return '='\r\n        }\r\n        if (strSign === '') {\r\n            console.log('Equation: parse string : sign not found');\r\n            return false;\r\n        }\r\n    };\r\n\r\n    private _formatSign = (signStr: string): string => {\r\n        if (signStr === undefined) {\r\n            return '=';\r\n        }\r\n\r\n        if (signStr.includes('geq')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>=')) {\r\n            return '>=';\r\n        } else if (signStr.includes('=>')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>')) {\r\n            return '>';\r\n        } else if (signStr.includes('leq')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<=')) {\r\n            return '<=';\r\n        } else if (signStr.includes('=<')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<')) {\r\n            return '<';\r\n        } else {\r\n            return '='\r\n        }\r\n    };\r\n\r\n    private _reverseSign = (): Equation => {\r\n        if (this._sign === '=') {\r\n            return this;\r\n        }\r\n\r\n        if (this._sign.includes('<')) {\r\n            this._sign.replace('<', '>');\r\n            return this;\r\n        }\r\n        if (this._sign.includes('>')) {\r\n            this._sign.replace('>', '<');\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    create = (left: Polynom, right: Polynom, sign?: string): Equation => {\r\n        this._left = left;\r\n        this._right = right;\r\n        this._sign = this._formatSign(sign);\r\n        return this;\r\n    };\r\n\r\n    clone = (): Equation => {\r\n        return new Equation().create(this._left.clone(), this._right.clone(), this._sign + '');\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n    // -----------------------------------------------\r\n    private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n        degree: 2\r\n    };\r\n    get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n        return this._randomizeDefaults;\r\n    }\r\n\r\n    set randomizeDefaults(value) {\r\n        this._randomizeDefaults = value;\r\n    }\r\n\r\n    randomize = (opts?: {}, sign?: string): Equation => {\r\n        // TODO: Generate equations randomly, using config.\r\n        return new Equation().create(new Polynom(), new Polynom(), sign);\r\n    };\r\n\r\n\r\n    // -----------------------------------------------\r\n    // Equations operations\r\n    // -----------------------------------------------\r\n    /**\r\n     * Reorder will move all monoms containing a letter on the left, all the other on the right.\r\n     */\r\n    reorder = (allLeft?: boolean): Equation => {\r\n        // Move all monoms of degree greater than 0 to the left.\r\n        // and all zero degree monoms to the right.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n\r\n        if (allLeft) {\r\n            return this;\r\n        }\r\n        let mMove: Monom;\r\n        for (let m of this._left.monoms) {\r\n            if (m.degree() === 0) {\r\n                mMove = m.clone();\r\n                this._left.subtract(mMove);\r\n                this._right.subtract(mMove);\r\n            }\r\n        }\r\n\r\n        // Reorder the left and right polynoms\r\n        this._left.reorder();\r\n        this._right.reorder();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiply by the lcm denominator and divide by the gcm numerators.\r\n     */\r\n    simplify = (): Equation => {\r\n        this.multiply(Numeric.lcm(...this._left.getDenominators(),...this._right.getDenominators()));\r\n        this.divide(Numeric.gcd(...this._left.getNumerators(),...this._right.getNumerators()));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Reorder the polynom to have only one letter on the left, the rest on the right.\r\n     * @param letter\r\n     */\r\n    isolate = (letter?: string): Equation | false => {\r\n        // Determine if we can isolate the variables.\r\n\r\n        // Both part of the equations must be of the first degree.\r\n        //TODO: handle equations of degree two or more ?\r\n        if (this.degree(letter) !== 1) {\r\n            return false;\r\n        }\r\n\r\n        // Modify the equation to isolate the asked variable.\r\n        // TODO: must handle equations like 3xy+5y=4 => y = 4/(3x-5)\r\n        if (this.isMultiVariable()) {\r\n            return false;\r\n        }\r\n\r\n        // Isolate the letter.\r\n        let mMove: Monom, cMove: Fraction;\r\n        // Start by moving everything to the left.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n        for (let m of this._left.monoms) {\r\n            if (!m.hasLetter(letter)) {\r\n                mMove = m.clone();\r\n                this._left.add(mMove.clone().opposed());\r\n                this._right.add(mMove.clone().opposed());\r\n            }\r\n        }\r\n\r\n        // In theory, we should have only one item on the left.\r\n        if (this._left.length !== 1) {\r\n            return false;\r\n        }\r\n        cMove = this._left.monoms[0].coefficient.clone();\r\n        this._left.divide(cMove);\r\n        this._right.divide(cMove);\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiple an equation by a fraction value.\r\n     * @param F\r\n     */\r\n    multiply = (value: any): Equation => {\r\n\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        // Multiply each part of the equation by the fraction\r\n        this._left.multiply(F);\r\n        this._right.multiply(F);\r\n\r\n        // The sign of the inequation must be changed.\r\n        if (this._sign !== '=' && F.sign() === -1) {\r\n            this._reverseSign();\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    divide = (value: any): Equation => {\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        if(F.isZero()){\r\n            return this;\r\n        }else {\r\n            return this.multiply(F.invert());\r\n        }\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations helpers\r\n    // -----------------------------------------------\r\n\r\n    /**\r\n     * Get the degree of the equation\r\n     * @param letter\r\n     */\r\n    degree = (letter?: string): number => {\r\n        return Math.max(this._left.degree(letter), this._right.degree(letter));\r\n    };\r\n\r\n    /**\r\n     * Determine if the equation contains more than one letter/variable.\r\n     */\r\n    isMultiVariable = (): boolean => {\r\n        return this._left.isMultiVariable || this._right.isMultiVariable;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        // @ts-ignore\r\n        return [...new Set([...this._left.letters(), ...this._right.letters()])];\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations solving algorithms\r\n    // -----------------------------------------------\r\n    solve = (letter?: string): Equation => {\r\n        // Initialise the variables:\r\n        this._solutions = [];\r\n\r\n        // TODO: this._polynom could be removed.\r\n        // TODO: consolidate solving equations (inequations vs equations)\r\n        this._polynom = this._left.clone().subtract(this._right);\r\n\r\n        switch (this._polynom.degree(letter)) {\r\n            case 0:\r\n            case 1:\r\n                this._solveDegree1(letter);\r\n                break;\r\n            case 2:\r\n                this._solveDegree2(letter);\r\n                break;\r\n            default:\r\n                this._solveDegree3plus(letter);\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    private isGreater = (): boolean => {\r\n        if (this._sign.indexOf('>') !== -1) {\r\n            return true;\r\n        }\r\n        return this._sign.indexOf('geq') !== -1;\r\n\r\n    };\r\n    private isStrictEqual = (): boolean => {\r\n        return this._sign === '=';\r\n    };\r\n    private isAlsoEqual = (): boolean => {\r\n        if (this._sign.indexOf('=') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('geq') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('leq') !== -1) {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    private _solveDegree1 = (letter?: string): string[] => {\r\n        const m1 = this._polynom.monomByDegree(1, letter).coefficient,\r\n            m0 = this._polynom.monomByDegree(0, letter).coefficient,\r\n            v = m0.clone().opposed().divide(m1).display;\r\n        let s: string;\r\n\r\n        if (this.isStrictEqual()) {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0) {\r\n                    this._solutions = [this._real];\r\n                } else {\r\n                    this._solutions = [this._varnothing];\r\n                }\r\n            } else {\r\n                this._solutions = [v];\r\n            }\r\n        } else {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0 && this.isAlsoEqual()) {\r\n                    s = '\\\\mathbb{R}';\r\n                } else {\r\n                    if (m0.value > 0) {\r\n                        s = this.isGreater() ? this._real : this._varnothing;\r\n                    } else {\r\n                        s = !this.isGreater() ? this._real : this._varnothing;\r\n                    }\r\n                }\r\n            } else {\r\n                // Must handle the case if the m1 monom is negative.\r\n                if ((this.isGreater() && m1.sign() === 1) || (!this.isGreater() && m1.sign() === -1)) {\r\n                    s = `\\\\left${this.isAlsoEqual() ? '\\\\[' : '\\\\]'}${v};+\\\\infty\\\\right\\\\[`;\r\n                } else {\r\n                    s = `\\\\left\\\\]-\\\\infty;${v} \\\\right\\\\${this.isAlsoEqual() ? '\\\\]' : '\\\\['}`;\r\n                }\r\n            }\r\n            this._solutions = [s];\r\n        }\r\n\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree2 = (letter?: string): string[] => {\r\n        let aF = this._polynom.monomByDegree(2, letter).coefficient,\r\n            bF = this._polynom.monomByDegree(1, letter).coefficient,\r\n            cF = this._polynom.monomByDegree(0, letter).coefficient,\r\n            delta: number, nthDelta: Nthroot,\r\n            lcm = Numeric.lcm(aF.denominator, bF.denominator, cF.denominator),\r\n            a = aF.multiply(lcm).value,\r\n            b = bF.multiply(lcm).value,\r\n            c = cF.multiply(lcm).value,\r\n            realX1: number, realX2: number,\r\n            sX1: string, sX2: string;\r\n\r\n        delta = b * b - 4 * a * c;\r\n\r\n        if (delta > 0) {\r\n            realX1 = (-b - Math.sqrt(delta)) / (2 * a);\r\n            realX2 = (-b + Math.sqrt(delta)) / (2 * a);\r\n\r\n            if(delta>1.0e5){\r\n                // The delta is too big to be parsed !\r\n                this._solutions = [\r\n                    ((-b - Math.sqrt(delta))/(2 * a)).toFixed(5),\r\n                    ((-b + Math.sqrt(delta))/(2 * a)).toFixed(5)\r\n                ]\r\n            }else {\r\n                nthDelta = new Nthroot().parse(delta).reduce();\r\n                if (nthDelta.hasRadical()) {\r\n                    // -b +- coeff\\sqrt{radical}\r\n                    // -------------------------\r\n                    //           2a\r\n                    let gcd = Numeric.gcd(b, 2 * a, nthDelta.coefficient);\r\n                    nthDelta.coefficient = nthDelta.coefficient / gcd;\r\n\r\n                    // TODO: Can i delete the next line ?\r\n                    // let deltaC = nthDelta.coefficient, deltaR = nthDelta.radical;\r\n                    if (b !== 0) {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                `${-b / gcd} - ${nthDelta.tex}`,\r\n                                `${-b / gcd} + ${nthDelta.tex}`,\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                `\\\\dfrac{${-b / gcd} - ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                `\\\\dfrac{${-b / gcd} + ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                            ]\r\n                        }\r\n                    } else {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                `- ${nthDelta.tex}`,\r\n                                `${nthDelta.tex}`,\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                `\\\\dfrac{- ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                `\\\\dfrac{${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                            ]\r\n                        }\r\n                    }\r\n                } else {\r\n                    // -b +- d / 2a\r\n                    this._solutions = [\r\n                        new Fraction(-b - nthDelta.coefficient, 2 * a).reduce().dfrac,\r\n                        new Fraction(-b + nthDelta.coefficient, 2 * a).reduce().dfrac\r\n                    ]\r\n                }\r\n            }\r\n\r\n        } else if (delta === 0) {\r\n            this._solutions = [new Fraction(-b, 2 * a).reduce().dfrac];\r\n        } else {\r\n            this._solutions = [this._varnothing];\r\n        }\r\n\r\n\r\n        // Handle now the inequations.\r\n        if (!this.isStrictEqual()) {\r\n            if (this._solutions.length === 2) {\r\n                sX1 = (realX1 < realX2) ? this._solutions[0] : this._solutions[1];\r\n                sX2 = (realX1 < realX2) ? this._solutions[1] : this._solutions[0];\r\n\r\n                if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                    this._solutions = [\r\n                        `\\\\left]-\\\\infty ; ${sX1}\\\\right${this.isAlsoEqual() ? ']' : '['} \\\\cup \\\\left${this.isAlsoEqual() ? '[' : ']'}${sX2};+\\\\infty\\\\right[`\r\n                    ];\r\n                } else {\r\n                    this._solutions = [\r\n                        `\\\\left${this.isAlsoEqual() ? '[' : ']'}${sX1} ; ${sX2}\\\\right${this.isAlsoEqual() ? ']' : '['}`\r\n                    ]\r\n                }\r\n            } else if (this._solutions.length === 1 && this._solutions[0] !== this._varnothing) {\r\n                if (!this.isAlsoEqual()) {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [\r\n                            `\\\\left]-\\\\infty ; ${this._solutions[0]}\\\\right[ \\\\cup \\\\left]${this._solutions[0]};+\\\\infty\\\\right[`\r\n                        ];\r\n                    } else {\r\n                        this._solutions = [this._varnothing];\r\n                    }\r\n                } else {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [this._real];\r\n                    } else {\r\n                        // this._solutions = [ this._solutions[0] ];\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.isGreater()) {\r\n                    this._solutions = [aF.sign() === 1 ? this._real : this._varnothing];\r\n                } else {\r\n                    this._solutions = [aF.sign() === -1 ? this._real : this._varnothing];\r\n                }\r\n            }\r\n        }\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree3plus = (letter?: string): string[] => {\r\n        // TODO: try to resolve equations with a degree superior than 2.\r\n        this._solutions = [letter];  // ESLint remove system :(\r\n        return this._solutions;\r\n    };\r\n\r\n}","import {Fraction} from \"../coefficients/fraction\";\r\nimport {Equation} from \"./equation\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Monom} from \"./monom\";\r\nimport {Polynom} from \"./polynom\";\r\n\r\n\r\nexport class LinearSystem {\r\n    private _solutions: { [letter: string]: { value: Fraction, isReal: boolean, isVarnothing: boolean } };\r\n    private _resolutionSteps: LinearSystem[];\r\n    private _equations: Equation[];\r\n    private _letters: string[];\r\n\r\n    constructor(...equationStrings: string[]) {\r\n        this._equations = [];\r\n        this._letters = 'xy'.split('');\r\n\r\n        if(equationStrings!==undefined && equationStrings.length>0){\r\n            this.parse(...equationStrings);\r\n        }\r\n\r\n        return this;\r\n    }\r\n    get isLinerarSystem(){return true; }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equations(): Equation[] {\r\n        return this._equations;\r\n    }\r\n\r\n    set equations(value) {\r\n        this._equations = value;\r\n    }\r\n\r\n    get letters(): string {return this._letters.join('')}\r\n\r\n    set letters(value:string){this._letters = value.split('');}\r\n\r\n    get isSolvable(): boolean {\r\n        let V = this.variables;\r\n\r\n        // TODO: in some case, it is possible to resolve systems if there isn't the isSame number of vars and equations\r\n        if (V.length !== this._equations.length) {\r\n            return false;\r\n        }\r\n\r\n        //TOOD: Must check if two equations isn't a linear combination of the others ?\r\n\r\n        return true;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n        for (let E of this._equations) {\r\n            V = V.concat(E.variables);\r\n        }\r\n        return [...new Set(V)].sort();\r\n    }\r\n\r\n    get tex(): string {\r\n        // Build the array of values.\r\n        // Reorder\r\n        // This clone the system :!!!\r\n        //TODO: Avoid cloning this linear system\r\n        let LS = this.clone().reorder(),\r\n            letters = LS.variables,\r\n            equStr: string[],\r\n            equArray: string[] = [],\r\n            m: Monom;\r\n\r\n        // TODO: Manage tex output of linear equations\r\n        for (let equ of LS.equations) {\r\n            equStr = [];\r\n            for (let L of letters) {\r\n                m = equ.left.monomByLetter(L);\r\n\r\n                if (equStr.length === 0) {\r\n                    equStr.push(m.isZero() ? '' : m.tex);\r\n                } else {\r\n                    equStr.push(m.isZero() ? '' : ((m.coefficient.sign() === 1) ? '+' : '') + m.tex);\r\n                }\r\n            }\r\n\r\n            // Add the equal sign\r\n            equStr.push('=');\r\n\r\n            // Add the right hand part of the equation (should be only a number, because it has been reorderd)\r\n            equStr.push(equ.right.tex);\r\n\r\n            // Add to the list.\r\n            equArray.push(equStr.join('&'));\r\n        }\r\n\r\n\r\n        return `\\\\left\\\\{\\\\begin{array}{${\"r\".repeat(letters.length)}cl}${equArray.join('\\\\\\\\\\ ')}\\\\end{array}\\\\right.`;\r\n        //return `\\\\left\\\\{\\\\begin{array}{rrrcl}${this._equations.map(equ => `${equ.tex}`).join('\\\\\\\\\\ \\n')}\\\\end{array}\\\\right.`;\r\n    }\r\n\r\n    get texSolution(): string {\r\n        let tex: string[] = [];\r\n\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n\r\n        for (let letter in this._solutions) {\r\n            if (this._solutions[letter].isReal) {\r\n                console.log(`Undetermined (letter ${letter})`);\r\n                return;\r\n            }\r\n            if (this._solutions[letter].isVarnothing) {\r\n                console.log(`Undefined (letter ${letter})`);\r\n                return;\r\n            }\r\n\r\n            tex.push(this._solutions[letter].value.dfrac);\r\n        }\r\n        return `(${tex.join(';')})`;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...equations: any[]): LinearSystem => {\r\n        this._equations = equations.map(value => new Equation(value));\r\n        this._findLetters();\r\n        return this;\r\n    };\r\n\r\n    setCoefficient = (...coefficients: string[]): LinearSystem => {\r\n        // Reset the equations list\r\n        this._equations = [];\r\n\r\n        let i = 0;\r\n        while (i < coefficients.length - this._letters.length) {\r\n            let left = new Polynom().parse(this._letters.join(''), ...coefficients.slice(i, i + this._letters.length)),\r\n                right = new Polynom(coefficients[i + this._letters.length].toString()),\r\n                equ = new Equation().create(left, right);\r\n            this._equations.push(equ.clone());\r\n\r\n            i = i + this._letters.length + 1;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): LinearSystem => {\r\n        return new LinearSystem().parse(...this._equations.map(equ => equ.clone()));\r\n    };\r\n\r\n    setLetters = (...letters:string[]): LinearSystem => {\r\n        this._letters = letters;\r\n        return this\r\n    }\r\n    private _findLetters = (): LinearSystem => {\r\n        // Find all letters used.\r\n        let variables = new Set();\r\n\r\n        for(let equ of this._equations){\r\n            variables = new Set([...variables, ...equ.variables]);\r\n        }\r\n\r\n        // TODO: How to transform (Set of string) to string[]\r\n        // @ts-ignore\r\n        this._letters = [...variables];\r\n        return this;\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n    // -----------------------------------------------\r\n    generate = (...solutions: Fraction[] | number[]): LinearSystem => {\r\n        let solutionsF: Fraction[] = [];\r\n\r\n        // Convert the numbers to fractions if necessary\r\n        for (let s of solutions) {\r\n            if (typeof s === \"number\") {\r\n                solutionsF.push(new Fraction(s.toString()));\r\n            } else {\r\n                solutionsF.push(s.clone());\r\n            }\r\n        }\r\n\r\n        // Create the equations and make sure they are not linear combined.\r\n        this._equations = [];\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            this._equations.push(this._generateOneEquation(...solutionsF));\r\n        }\r\n        return this;\r\n    };\r\n    private _generateOneEquation = (...solutions: Fraction[]): Equation => {\r\n        let coeff: number[] = [], leftValue: Fraction = new Fraction().zero(),\r\n            letters: string[] = ['x', 'y', 'z', 't', 'u', 'v', 'w', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],\r\n            equString: string = '', equ: Equation;\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            coeff.push(Numeric.randomIntSym(5));\r\n            leftValue.add(solutions[i].clone().multiply(coeff[i]));\r\n            equString += `${(coeff[i] < 0) ? coeff[i] : '+' + coeff[i]}${letters[i]}`\r\n        }\r\n\r\n        // LeftValue contains the left part oof the equation - and is then the isSame as the right part.\r\n        // It might be a Fraction.\r\n\r\n        // Must check if it's not a linear combination\r\n        equ = new Equation(`${equString}=${leftValue.display}`);\r\n        if (equ.right.monoms[0].coefficient.denominator != 1) {\r\n            equ.multiply(new Fraction(equ.right.monoms[0].coefficient.denominator, 1));\r\n        }\r\n        if (this._checkIfLinerCombination(equ)) {\r\n            return equ;\r\n        } else {\r\n            return this._generateOneEquation(...solutions);\r\n        }\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    private _linearReduction(eq1: Equation, eq2: Equation, letter: string): Equation {\r\n        // TODO: handle other signs for equations ?\r\n        // Get the monom for the particular letter.\r\n        let c1 = eq1.left.monomByDegree(1, letter).coefficient.clone(),\r\n            c2 = eq2.left.monomByDegree(1, letter).coefficient.clone().opposed();\r\n\r\n        return this.mergeEquations(eq1, eq2, c2, c1);\r\n    }\r\n\r\n    mergeEquations = (eq1: Equation, eq2: Equation, factor1: any, factor2: any):Equation => {\r\n        // Set and clone the equations.\r\n\r\n        let eq1multiplied = eq1.clone().multiply(new Fraction(factor1)),\r\n            eq2multiplied = eq2.clone().multiply(new Fraction(factor2));\r\n\r\n        // Add both equations together.\r\n        eq1multiplied.left.add(eq2multiplied.left);\r\n        eq1multiplied.right.add(eq2multiplied.right);\r\n\r\n        return eq1multiplied;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Solvers algorithm\r\n    // ------------------------------------------\r\n    reorder = (): LinearSystem => {\r\n        for (let E of this._equations) {\r\n            E.reorder();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    solve = (): LinearSystem => {\r\n        // Solve it by linear\r\n        this._solutions = {};\r\n        this._resolutionSteps = [];\r\n\r\n        // Reorder all equations.\r\n        this.reorder();\r\n\r\n        // Get all variables in the linear system\r\n        let V = this.variables.sort();\r\n\r\n        for (let letter of V) {\r\n            this._solutions[letter] = this._solveOneLetter(letter, V)\r\n        }\r\n\r\n        // TODO: LinearSystem - solve: optimization and handle undetermined and undefined systems.\r\n        return this;\r\n    };\r\n\r\n    private _checkIfLinerCombination = (equ: Equation): boolean => {\r\n\r\n        return true;\r\n    };\r\n\r\n    private _solveOneLetter(letter: string, V: string[]): { value: Fraction, isReal: boolean, isVarnothing: boolean } {\r\n        // list of equations.\r\n        let LE: Equation[] = this.clone().equations,\r\n            reducedEquations: Equation[] = [];\r\n\r\n        // Reduce the equations.\r\n        // Do it as long as there is more than one step, but no more than the number of equations.\r\n        for (let L of V) {\r\n            // remove the setLetter from all equations using linear combinations\r\n            if (L === letter) {\r\n                continue;\r\n            }\r\n\r\n            // Linear reduction.\r\n            // TODO: Search for better association\r\n            for (let i = 0; i < LE.length - 1; i++) {\r\n                reducedEquations.push(this._linearReduction(LE[i], LE[i + 1], L));\r\n            }\r\n\r\n            // Keep track of each steps.\r\n            this._resolutionSteps.push(new LinearSystem().parse(...reducedEquations));\r\n\r\n            // Set the list of equations to the new version.\r\n            LE = this._resolutionSteps[this._resolutionSteps.length - 1].clone().equations;\r\n\r\n            // Reset the stack\r\n            reducedEquations = [];\r\n        }\r\n\r\n        // Solve the equations\r\n        let E = this._resolutionSteps[this._resolutionSteps.length - 1].equations[0];\r\n        E.solve();\r\n\r\n        return {\r\n            value: new Fraction(E.solutions[0]),\r\n            isReal: E.isReal,\r\n            isVarnothing: E.isVarnothing\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Helpers\r\n    // ------------------------------------------\r\n    log = (): string => {\r\n        let str: string = '';\r\n\r\n        for (let E of this._equations) {\r\n            console.log(E.tex);\r\n            str += `${E.tex}\\\\n}`;\r\n        }\r\n\r\n        return str;\r\n    };\r\n}","/**\r\n * Polynom module contains everything necessary to handle polynoms.\r\n * @module Logicalset\r\n */\r\n\r\nimport {Shutingyard} from '../shutingyard';\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n */\r\nexport class Logicalset {\r\n    private _rawString: string;\r\n    private _rpn: { token: string, tokenType: string }[]\r\n\r\n    /**\r\n     *\r\n     * @param {string} value (optional) Default polynom to parse on class creation\r\n     * @param values\r\n     */\r\n    constructor(value: string) {\r\n        this._rawString = value\r\n        this.parse(value)\r\n        return this;\r\n    }\r\n\r\n    get isLogicalset() {\r\n        return true;\r\n    };\r\n\r\n    private parse = (value: string): Logicalset => {\r\n        // TODO: Must format the value string to convert some items...\r\n\r\n        // Parse the updated value to the shutingyard algorithm\r\n        this._rpn = new Shutingyard('set').parse(value).rpn;\r\n\r\n        return this;\r\n    }\r\n\r\n    evaluate(tokenSets: { [key: string]: any[] }, reference?: any[]): any[] {\r\n        let varStack: (Set<unknown>)[] = []\r\n\r\n        let referenceSet: Set<unknown> = new Set()\r\n        if (reference === undefined) {\r\n            referenceSet = new Set()\r\n            for (let key in tokenSets) {\r\n                referenceSet = new Set([...referenceSet, ...tokenSets[key]])\r\n            }\r\n        } else {\r\n            referenceSet = new Set(reference)\r\n        }\r\n\r\n        for (let token of this._rpn) {\r\n            if (token.tokenType === 'variable') {\r\n                // The variable has no token - assume it's empty.\r\n                if (tokenSets[token.token] === undefined) {\r\n                    varStack.push(new Set())\r\n                } else {\r\n                    varStack.push(new Set(tokenSets[token.token]));\r\n                }\r\n\r\n            } else {\r\n                switch (token.token) {\r\n                    case '&':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            varStack.push(new Set([...first].filter(x => second.has(x))))\r\n                        }\r\n                        break\r\n                    case '|':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n                            varStack.push(new Set([...first, ...second]))\r\n                        }\r\n                        break\r\n                    case '-':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n                            varStack.push(new Set([...first].filter(x => !second.has(x))))\r\n                        }\r\n                        break\r\n                    case '!':\r\n                        if (varStack.length >= 1) {\r\n                            let first = varStack.pop()\r\n\r\n                            varStack.push(new Set([...referenceSet].filter(x => !first.has(x))))\r\n                        }\r\n                        break\r\n                }\r\n            }\r\n        }\r\n\r\n        return [...varStack[0]].sort();\r\n    }\r\n\r\n    vennAB(): any[] {\r\n        return this.evaluate({\r\n                A: ['A', 'AB'],\r\n                B: ['B', 'AB']\r\n            },\r\n            ['A', 'B', 'AB', 'E']\r\n        )\r\n    }\r\n\r\n    vennABC(): any[] {\r\n        return this.evaluate({\r\n                A: ['A', 'AB', 'AC', 'ABC'],\r\n                B: ['B', 'AB', 'BC', 'ABC'],\r\n                C: ['C', 'AC', 'BC', 'ABC']\r\n            },\r\n            ['A', 'B', 'C', 'AB', 'AC', 'BC', 'E']\r\n        )\r\n    }\r\n\r\n    get rpn(): { token: string, tokenType: string }[] {\r\n        return this._rpn\r\n    }\r\n\r\n    get tex(): string {\r\n        let varStack: { token:string, tokenType: string } [] = []\r\n\r\n        for (let token of this._rpn) {\r\n            if (token.tokenType === 'variable') {\r\n                varStack.push(token);\r\n            } else {\r\n                switch (token.token) {\r\n                    case '&':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if(first.tokenType==='mix'){first.token = `( ${first.token} )`}\r\n                            if(second.tokenType==='mix'){second.token = `( ${second.token} )`}\r\n                            varStack.push({token: `${first.token} \\\\cap ${second.token}`, tokenType: 'mix'})\r\n                        }\r\n                        break\r\n                    case '|':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if(first.tokenType==='mix'){first.token = `( ${first.token} )`}\r\n                            if(second.tokenType==='mix'){second.token = `( ${second.token} )`}\r\n                            varStack.push({token: `${first.token} \\\\cup ${second.token}`, tokenType: 'mix'})\r\n                        }\r\n                        break\r\n                    case '-':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if(first.tokenType==='mix'){first.token = `( ${first.token} )`}\r\n                            if(second.tokenType==='mix'){second.token = `( ${second.token} )`}\r\n                            varStack.push({token: `${first.token} \\\\setminus ${second.token}`, tokenType: 'mix'})\r\n                        }\r\n                        break\r\n                    case '!':\r\n                        if (varStack.length >= 1) {\r\n                            let first = varStack.pop()\r\n                            varStack.push({token: `\\\\overline{ ${first.token} }`, tokenType: 'variable'})\r\n                        }\r\n                        break\r\n                }\r\n            }\r\n        }\r\n\r\n        return varStack[0].token\r\n    }\r\n}\r\n","/***\r\n * Monom class\r\n * Defined as coefficient * literal\r\n * Examples: 3x^2, 3/5x^2, ...\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Numeric} from \"../numeric\";\r\n\r\nexport class Monom {\r\n    private _coefficient: Fraction;\r\n    private _literal: { [Key: string]: number };\r\n\r\n    /**\r\n     * Create the monom object.\r\n     * @param value (optional) string\r\n     */\r\n    constructor(value?: string) {\r\n        this.zero();\r\n\r\n        if (value !== undefined) {\r\n            // A string is given - try to parse the value.\r\n            this.parse(value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get isMonom() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Get the coefficient as fraction\r\n     */\r\n    get coefficient(): Fraction {\r\n        return this._coefficient;\r\n    }\r\n\r\n    /**\r\n     * Set the coefficient value of the monom\r\n     * @param F     Fraction\r\n     */\r\n    set coefficient(F: Fraction) {\r\n        this._coefficient = F;\r\n    }\r\n\r\n    /**\r\n     * Get the literal part, as dictionary\r\n     */\r\n    get literal(): { [Key: string]: number } {\r\n        return this._literal;\r\n    }\r\n\r\n    get literalSqrt(): { [Key: string]: number } {\r\n\r\n        if (this.isLitteralSquare()) {\r\n            let L: { [Key: string]: number } = {}\r\n            for (let key in this._literal) {\r\n                L[key] = this._literal[key] / 2\r\n            }\r\n            return L;\r\n        } else {\r\n            return this._literal;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom\r\n     * @param L     Literal part as dictionary: <setLetter: exposant>\r\n     */\r\n    set literal(L: { [Key: string]: number }) {\r\n        this._literal = L;\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom from a string\r\n     * @param inputStr  String like x^2y^3\r\n     */\r\n    set literalStr(inputStr: string) {\r\n        // Match all x^n\r\n        for (const v of [...inputStr.matchAll(/([a-z])\\^([+-]?[0-9]+)/g)]) {\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = 0;\r\n            }\r\n            this._literal[v[1]] += +v[2];\r\n        }\r\n        for (const v of [...inputStr.matchAll(/([a-z](?!\\^))/g)]) {\r\n            // Match all single letters\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = 0;\r\n            }\r\n            this._literal[v[1]] += 1;\r\n        }\r\n    }\r\n\r\n    // Getter heplers.\r\n    /**\r\n     * Get the variables letters\r\n     */\r\n    get variables(): string[] {\r\n        let M = this.clone().clean();\r\n        return Object.keys(this._literal)\r\n    }\r\n\r\n    // Display getter\r\n    /**\r\n     * This display getter is to be used in the polynom display getter\r\n     */\r\n    get display(): string {\r\n        let L: string = '';\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter] !== 0) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter] > 1) {\r\n                    L += `^${this._literal[letter]}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.display}`;\r\n            } else {\r\n                return '';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.display}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    get dividers(): Monom[] {\r\n        // Decompose only if the coefficient it a complet value\r\n        if (this.coefficient.denominator !== 1) {\r\n            return [this.clone()]\r\n        }\r\n\r\n        // Security : do not do this if greater than 10000\r\n        if (this.coefficient.numerator > 10000) {\r\n            return [this.clone()]\r\n        }\r\n        const dividers = Numeric.dividers(Math.abs(this.coefficient.numerator))\r\n\r\n        // Decompose the litterals parts.\r\n        let litterals: { [key: string]: number }[] = [];\r\n        for (let L in this.literal) {\r\n            // L is the letter.\r\n            litterals = this._getLitteralDividers(litterals, L)\r\n        }\r\n\r\n        const monomDividers: Monom[] = [];\r\n        if (litterals.length > 0 && dividers.length>0) {\r\n            for (let N of dividers) {\r\n                for (let L of litterals) {\r\n                    let M = new Monom();\r\n                    M.coefficient = new Fraction(N)\r\n                    M.literal = L\r\n                    monomDividers.push(M)\r\n                }\r\n            }\r\n        }else if (dividers.length===0) {\r\n            for (let L of litterals) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction().one()\r\n                M.literal = L\r\n                monomDividers.push(M)\r\n            }\r\n        } else {\r\n            for (let N of dividers) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction(N)\r\n                monomDividers.push(M)\r\n            }\r\n        }\r\n\r\n        return monomDividers.length===0? [new Monom().one()]: monomDividers;\r\n    }\r\n\r\n    private _getLitteralDividers(arr: { [key: string]: number }[], letter: string): { [key: string]: number }[] {\r\n        let tmpList: { [key: string]: number }[] = [];\r\n\r\n        for (let d = 0; d <= this.literal[letter]; d++) {\r\n            if (arr.length === 0) {\r\n                let litt: { [key: string]: number } = {}\r\n                litt[letter] = d\r\n                tmpList.push(litt)\r\n            } else {\r\n                for (let item of arr) {\r\n                    let litt: { [key: string]: number } = {}\r\n                    for(let currentLetter in item){\r\n                        litt[currentLetter] = item[currentLetter]\r\n                    }\r\n                    litt[letter] = d\r\n                    tmpList.push(litt)\r\n                }\r\n            }\r\n        }\r\n        return tmpList;\r\n    }\r\n\r\n    /**\r\n     * Display the monom, forcing the '+' sign to appear\r\n     */\r\n    get displayWithSign(): string {\r\n        // TODO: Rename or remove this getter ?\r\n        let d: String = this.display;\r\n        return (d[0] !== '-' ? '+' : '') + d;\r\n    }\r\n\r\n    /**\r\n     * Get the tex output of the monom\r\n     */\r\n    get tex(): string {\r\n        let L: string = '';\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter] !== 0) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter] > 1) {\r\n                    L += `^${this._literal[letter]}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.dfrac}`;\r\n            } else {\r\n                return '0';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.dfrac}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // -----------------------------------------\r\n    /**\r\n     * Parse a string to a monom. The string may include fraction.\r\n     * @param inputStr\r\n     */\r\n    parse = (inputStr: string): Monom => {\r\n        // Set the literal part.\r\n        this.literalStr = inputStr;\r\n\r\n        // Get the coefficient\r\n        this._coefficient = new Fraction();\r\n\r\n        for (const v of [...inputStr.replace(/([a-z])|(\\^[+-]?[0-9]+)/g, ',').split(',')]) {\r\n            // The value is empty.\r\n            if (v.trim() === '') {\r\n                continue;\r\n            }\r\n\r\n            // Multiple the current coefficient by the new found value.\r\n            this._coefficient.multiply(new Fraction(v.trim()));\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Clone the current Monom.\r\n     */\r\n    clone = (): Monom => {\r\n        let F: Monom = new Monom();\r\n\r\n        F.coefficient = this._coefficient.clone();\r\n\r\n        // Copy the literal parts.\r\n        for (let k in this._literal) {\r\n            F.setLetter(k, this._literal[k]);\r\n        }\r\n        return F;\r\n    };\r\n\r\n    /**\r\n     * Create a zero value monom\r\n     */\r\n    zero = (): Monom => {\r\n        this._coefficient = new Fraction().zero();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Create a one value monom\r\n     */\r\n    one = (): Monom => {\r\n        this._coefficient = new Fraction().one();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Clean the monom by removing each letters with a power of zero.\r\n     */\r\n    clean = (): Monom => {\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter] === 0) {\r\n                delete this._literal[letter];\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Generate a random monom\r\n     * @param letters       Letters to use, as a string\r\n     * @param degree        Max degree (default 1)\r\n     * @param withFraction  Allows fraction as coefficient (default false)\r\n     * @param allowZero     Allows null monom (default false)\r\n     */\r\n    random = (letters: string = 'x', degree: number = 1, withFraction: boolean = false, allowZero: boolean = false): Monom => {\r\n        // TODO: Randomize monoms: options or make it subclass ?\r\n        this.coefficient.parse(Numeric.randomIntSym(10, allowZero), (withFraction) ? Numeric.randomInt(1, 10) : 1);\r\n\r\n        for (let L of letters.split('')) {\r\n            this.setLetter(L, (letters.length > 1) ? Numeric.randomInt(degree) : degree);\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Get the opposed\r\n     * Returns a monom.\r\n     */\r\n    opposed = (): Monom => {\r\n        this._coefficient.opposed();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Add all similar monoms. If they aren't similar, they are simply skipped.\r\n     * @param M (Monom[]) The monoms to add.\r\n     */\r\n    add = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                this._coefficient.add(m.coefficient);\r\n            } else {\r\n                console.log('Add: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Subtract multiple monoms\r\n     * @param M (Monom[]) The monoms to subtract\r\n     */\r\n    subtract = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                this._coefficient.add(m.coefficient.clone().opposed());\r\n            } else {\r\n                console.log('Subtract: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiple multiple monoms to the current monom\r\n     * @param M (Monom[]) The monoms to multiply to.\r\n     */\r\n    multiply = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            // Multiply the coefficient.\r\n            this._coefficient.multiply(m.coefficient);\r\n            // Multiply the literal parts.\r\n            for (let letter in m.literal) {\r\n                this._literal[letter] = (this._literal[letter] === undefined) ? m.literal[letter] : this._literal[letter] + m.literal[letter];\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiplyByNumber = (F: Fraction | number): Monom => {\r\n        this._coefficient.multiply(F);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divide the current monoms by multiple monoms\r\n     * @param M (Monom[])\r\n     */\r\n    divide = (...M: Monom[]): Monom => {\r\n        // Depending on the given value, choose the current item\r\n        for (let v of M) {\r\n            // Divide the coefficient\r\n            this._coefficient.divide(v.coefficient);\r\n\r\n            // Subtract the power values\r\n            for (let letter in v.literal) {\r\n                this._literal[letter] = (this._literal[letter] === undefined) ? -v.literal[letter] : this._literal[letter] - v.literal[letter];\r\n\r\n                // If the power of a particular setLetter is zero, delete it from the literal part..\r\n                if (this._literal[letter] === 0) {\r\n                    delete this._literal[letter];\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the pow of a monom.\r\n     * @param nb (number) : Mathematical pow\r\n     */\r\n    pow = (nb: number): Monom => {\r\n        this._coefficient.pow(nb);\r\n        for (let letter in this._literal) {\r\n            this._literal[letter] *= nb;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the nth-root of the monom\r\n     * @param p\r\n     */\r\n    root = (p: number): Monom => {\r\n        // TODO: determiner the nth root of a monom\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Return the square root of a monom\r\n     */\r\n    sqrt = (): Monom => {\r\n        if (this.isSquare()) {\r\n            this._coefficient.sqrt();\r\n            for (let letter in this._literal) {\r\n                this._literal[letter] /= 2;\r\n            }\r\n        }\r\n        return this.root(2);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    compare = (M: Monom, sign?: string): boolean => {\r\n        // TODO: Build the compare systems.\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // To be equal, they must be the isSame\r\n                if (!this.compare(M, 'same')) {\r\n                    return false;\r\n                }\r\n\r\n                // The litteral parts are the isSame. The coefficient must be equal\r\n                return this._coefficient.isEqual(M.coefficient);\r\n            case 'same':\r\n                // Get the list of all variables from both monoms.\r\n                let M1: string[] = this.variables,\r\n                    M2: string[] = M.variables,\r\n                    K: string[] = M1.concat(M2.filter((item) => M1.indexOf(item) < 0));\r\n\r\n                for (let key of K) {\r\n                    // The setLetter is not available in one of the monom\r\n                    if (this._literal[key] === undefined || M.literal[key] === undefined) {\r\n                        return false;\r\n                    }\r\n                    // The setLetter does not have the isSame power in each monoms.\r\n                    if (this._literal[key] !== M.literal[key]) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                // All are positive check - the monoms are the sames.\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is null\r\n     */\r\n    isZero(): boolean {\r\n        return this._coefficient.value === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is one\r\n     */\r\n    isOne(): boolean {\r\n        return this._coefficient.value === 1 && this.variables.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if two monoms are equals\r\n     * @param M\r\n     */\r\n    isEqual = (M: Monom): boolean => {\r\n        return this.compare(M, '=');\r\n    };\r\n\r\n    /**\r\n     * Determine if two monoms are similar\r\n     * @param M\r\n     */\r\n    isSameAs = (M: Monom): boolean => {\r\n        return this.compare(M, 'same');\r\n    };\r\n\r\n    isSquare = (): boolean => {\r\n        if (!this.coefficient.isSquare()) {\r\n            return false;\r\n        }\r\n        return this.isLitteralSquare();\r\n    }\r\n\r\n    isLitteralSquare = (): boolean => {\r\n        for (let letter in this.literal) {\r\n            if (this.literal[letter] % 2 !== 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    // ------------------------------------------\r\n    // Misc monoms functions\r\n    // -------------------------------------\r\n    /**\r\n     * Determine if a monom contains a setLetter in it's literal part\r\n     * @param letter\r\n     */\r\n    hasLetter = (letter?: string): boolean => {\r\n        return this._literal[letter === undefined ? 'x' : letter] > 0;\r\n    };\r\n\r\n    /**\r\n     * Set the power of a particular setLetter\r\n     * @param letter (string) Letter to change\r\n     * @param pow (number) Power of the setLetter (must be positive integer.\r\n     */\r\n    setLetter = (letter: string, pow: number): void => {\r\n        // If the power is not legal or is zero, remove the setLetter from the dict\r\n        if (pow <= 0 || !Number.isSafeInteger(pow)) {\r\n            if (this._literal[letter] !== undefined) {\r\n                delete this._literal[letter];\r\n            }\r\n        } else {\r\n            this._literal[letter] = pow;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the degree of a monom. If no setLetter is given, the result will be the global degree.\r\n     * @param letter (string) Letter to get to degree (power)\r\n     */\r\n    degree = (letter?: string): number => {\r\n        if (this.variables.length === 0) {\r\n            return 0;\r\n        }\r\n        if (letter === undefined) {\r\n            // Not setLetter given -> we get the global monom degree (sum of all the letters).\r\n            return Object.values(this._literal).reduce((t, n) => t + n);\r\n        } else {\r\n            // A setLetter is given -> get the corresponding power.\r\n            return this._literal[letter] === undefined ? 0 : this._literal[letter];\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Evaluate a monom. Each setLetter must be assigned to a Fraction.\r\n     * @param values    Dictionary of <setLetter: Fraction>\r\n     */\r\n    evaluate = (values: { [key: string]: Fraction|number }|Fraction|number): Fraction => {\r\n        let r = this.coefficient.clone();\r\n\r\n        if(typeof values === 'number' || values instanceof Fraction){\r\n            let tmpValues:{ [key: string]: Fraction|number } = {}\r\n\r\n            tmpValues[this.variables[0]] = new Fraction(values)\r\n            return this.evaluate(tmpValues);\r\n        }\r\n\r\n        if(typeof values === 'object') {\r\n            for (let L in this._literal) {\r\n                if (values[L] === undefined) {\r\n                    return new Fraction().zero();\r\n                }\r\n                let value = new Fraction(values[L])\r\n                r.multiply(value.pow(this._literal[L]));\r\n            }\r\n        }\r\n        return r;\r\n    };\r\n\r\n    /**\r\n     * Derivative the monom\r\n     * @param letter\r\n     */\r\n    derivative = (letter?: string): Monom => {\r\n        // No setLetter given - assume it's the setLetter 'x'\r\n        if (letter === undefined) {\r\n            letter = 'x';\r\n        }\r\n        if (this.hasLetter(letter)) {\r\n            let d = +this._literal[letter],\r\n                dM = this.clone();\r\n\r\n            // Subtract one to the degree.\r\n            dM._literal[letter] -= 1;\r\n\r\n            // Multiply the coefficient by the previous degree\r\n            dM._coefficient.multiply(new Fraction('' + d));\r\n            return dM;\r\n        } else {\r\n            return new Monom().zero();\r\n        }\r\n    };\r\n\r\n    primitive = (letter?: string): Monom => {\r\n        if(letter===undefined){letter = 'x'}\r\n\r\n        // Zero monom\r\n        let M = this.clone()\r\n\r\n        if(M.hasLetter(letter)){\r\n            M.coefficient = M.coefficient.clone().divide(M.degree(letter)+1)\r\n            M.setLetter(letter, M.degree(letter)+1)\r\n        }else{\r\n            // There is no letter.\r\n\r\n            // The coefficient might be zero (=> x) or a number a (=> ax)\r\n            if(M.coefficient.isZero()){\r\n                M.coefficient = new Fraction().one()\r\n            }\r\n            M.setLetter(letter, 1)\r\n        }\r\n        return M\r\n    }\r\n    // ----------------------------------------\r\n    // Static functions\r\n    // ----------------------------------------\r\n\r\n    /**\r\n     * Get the least common multiple of monoms\r\n     * @param monoms    Array of monoms\r\n     */\r\n    static lcm = (...monoms: Monom[]): Monom => {\r\n        let M = new Monom(),\r\n            coeffN: number[] = monoms.map(value => value.coefficient.numerator),\r\n            coeffD: number[] = monoms.map(value => value.coefficient.denominator),\r\n            n = Numeric.gcd(...coeffN),\r\n            d = Numeric.lcm(...coeffD);\r\n\r\n        // Get the coefficient.\r\n        M.coefficient = new Fraction(n, d).reduce();\r\n\r\n        // Set the literal parts - go through each monoms literal parts and get only the lowest degree of each letters.\r\n        for (let m of monoms) {\r\n            // Remove the inexistant letters from the resulting monom\r\n            for (let letter in M.literal) {\r\n                if (!(letter in m.literal)) {\r\n                    M.literal[letter] = 0;\r\n                }\r\n            }\r\n            for (let letter in m.literal) {\r\n                if (M.literal[letter] === undefined && m.literal[letter] > 0) {\r\n                    M.literal[letter] = m.literal[letter];\r\n                } else {\r\n                    M.literal[letter] = Math.min(m.literal[letter], M.literal[letter]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n    /**\r\n     * Multiply two monoms and return a NEW monom.\r\n     * @param M1\r\n     * @param M2\r\n     */\r\n    static xmultiply = (...monoms: Monom[]): Monom => {\r\n        let M = new Monom().one();\r\n\r\n        for (let m of monoms) {\r\n            M.multiply(m);\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Determine if multiple monoms are similar\r\n     * @param M\r\n     */\r\n    areSameAs = (...M: Monom[]): boolean => {\r\n        let result: boolean = true;\r\n\r\n        // Check all monoms if they are the isSame as the \"this\" one.\r\n        for (let i = 0; i < M.length; i++) {\r\n            if (!this.isSameAs(M[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All check passed -> all the monoms are similar.\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Determine if multiple monoms are equals\r\n     * @param M\r\n     */\r\n    areEquals = (...M: Monom[]): boolean => {\r\n        // They are not similar.\r\n        if (!this.areSameAs(...M)) {\r\n            return false;\r\n        }\r\n\r\n        // Check all coefficient. They must be equals.\r\n        for (let m of M) {\r\n            if (!this._coefficient.isEqual(m.coefficient)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All checks passed.\r\n        return true;\r\n    };\r\n\r\n}","/**\r\n * Polynom module contains everything necessary to handle polynoms.\r\n * @module Polynom\r\n */\r\n\r\nimport {Monom} from './monom';\r\nimport {Shutingyard} from '../shutingyard';\r\nimport {Numeric} from '../numeric';\r\nimport {Fraction} from '../coefficients/fraction';\r\nimport {AST} from \"eslint\";\r\nimport TokenType = AST.TokenType;\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n */\r\nexport class Polynom {\r\n    private _rawString: string;\r\n    private _monoms: Monom[];\r\n    private _factors: Polynom[];\r\n    private _texString: string;\r\n\r\n    /**\r\n     *\r\n     * @param {string} polynomString (optional) Default polynom to parse on class creation\r\n     * @param values\r\n     */\r\n    constructor(polynomString?: string, ...values: any[]) {\r\n        this._monoms = [];\r\n        this._factors = [];\r\n        if (polynomString !== undefined) {\r\n            this.parse(polynomString, ...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    get isPolynom() {\r\n        return true;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get monoms() {\r\n        return this._monoms;\r\n    }\r\n\r\n    set monoms(M: Monom[]) {\r\n        this._monoms = M;\r\n    }\r\n\r\n    get factors(): Polynom[] {\r\n        return this._factors;\r\n    }\r\n\r\n    set factors(value: Polynom[]) {\r\n        this._factors = value;\r\n    }\r\n\r\n    get texFactors(): string {\r\n        this.factorize()\r\n\r\n        let tex = ''\r\n        for (let f of this.factors) {\r\n            if (f.monoms.length > 1) {\r\n                tex += `(${f.tex})`\r\n            } else {\r\n                tex = f.tex + tex;\r\n            }\r\n        }\r\n        return tex;\r\n    }\r\n\r\n    get texString(): string {\r\n        return this._texString;\r\n    }\r\n\r\n    get length() {\r\n        // TODO: Must reduce the monoms list to remove the zero coefficient.\r\n        return this._monoms.length;\r\n    }\r\n\r\n    get display(): string {\r\n        return this.genDisplay();\r\n    }\r\n\r\n    get raw(): string {\r\n        return this._rawString\r\n    }\r\n\r\n    get tex(): string {\r\n        return this.genDisplay('tex');\r\n    }\r\n\r\n    get isMultiVariable(): boolean {\r\n        const B = false;\r\n        for (const m of this._monoms) {\r\n            if (m.variables.length > 1) {\r\n                return true;\r\n            }\r\n        }\r\n        return B;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            V = V.concat(m.variables);\r\n        }\r\n\r\n        // Remove duplicates.\r\n        V = [...new Set(V)];\r\n\r\n        return V;\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    private genDisplay = (output?: string, forceSign?: boolean, wrapParentheses?: boolean): string => {\r\n        let P: string = '';\r\n\r\n        for (const k of this._monoms) {\r\n            if (k.coefficient.value === 0) {\r\n                continue;\r\n            }\r\n\r\n            P += `${(k.coefficient.sign() === 1 && (P !== '' || forceSign === true)) ? '+' : ''}${(output === 'tex') ? k.tex : k.display}`;\r\n        }\r\n\r\n        if (wrapParentheses === true && this.length > 1) {\r\n            if (output === 'tex') {\r\n                P = `\\\\left( ${P} \\\\right)`;\r\n            } else {\r\n                P = `(${P})`;\r\n            }\r\n        }\r\n\r\n        if (P === '') {\r\n            P = '0';\r\n        }\r\n        return P;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse a string to a polynom.\r\n     * @param inputStr\r\n     * @param values: as string, numbers or fractions\r\n     */\r\n    parse = (inputStr: string, ...values: any[]): Polynom => {\r\n        if (values === undefined || values.length === 0) {\r\n            inputStr = '' + inputStr;\r\n            this._rawString = inputStr;\r\n\r\n            // Parse the polynom using the shuting yard algorithm\r\n            if (inputStr !== '' && !isNaN(Number(inputStr))) {\r\n                this.empty();\r\n                // It's a simple number.\r\n                let m = new Monom();\r\n                m.coefficient = new Fraction(inputStr);\r\n                m.literalStr = '';\r\n                this.add(m);\r\n                return this;\r\n            }\r\n\r\n            // Parse the string.\r\n            return this.shutingYardToReducedPolynom(inputStr);\r\n        } else if (/^[a-z]/.test(inputStr)) {\r\n            // We assume the inputStr contains only letters.\r\n            this.empty();\r\n\r\n            let fractions = values.map(x => new Fraction(x));\r\n            // Multiple setLetter version\r\n            if (inputStr.length > 1) {\r\n                // TODO: check that the number of values given correspond to the letters (+1 eventually)\r\n                let letters = inputStr.split(''),\r\n                    i = 0;\r\n                for (let F of fractions) {\r\n                    let m = new Monom();\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = letters[i] || '';\r\n                    this.add(m);\r\n                    i++;\r\n                }\r\n            }\r\n            // Single setLetter version\r\n            else {\r\n                let n = fractions.length - 1;\r\n                for (let F of fractions) {\r\n                    let m = new Monom()\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = `${inputStr}^${n}`\r\n                    this.add(m);\r\n                    n--;\r\n                }\r\n            }\r\n            return this;\r\n        } else {\r\n            return this.zero();\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * Main parse using a shutting yard class\r\n     * @param inputStr\r\n     */\r\n    private shutingYardToReducedPolynom = (inputStr: string): Polynom => {\r\n        // Get the RPN array of the current expression\r\n        const SY: Shutingyard = new Shutingyard().parse(inputStr);\r\n        const rpn: { token: string, tokenType: string }[] = SY.rpn;\r\n        const m: Polynom[] = [];\r\n        let m1: Polynom;\r\n        let m2: Polynom;\r\n        let tokenParam: number = null;\r\n\r\n        let stack:Polynom[] = [],\r\n            previousToken: string = null,\r\n            tempPolynom\r\n        for(const element of rpn){\r\n            if(element.tokenType==='coefficient' || element.tokenType==='variable'){\r\n                tempPolynom = new Polynom().zero();\r\n                tempPolynom.monoms = [new Monom(element.token)]\r\n                stack.push(tempPolynom.clone())\r\n            }else if(element.tokenType==='operation'){\r\n                m2 = (stack.pop()) || new Polynom().zero();\r\n                m1 = (stack.pop()) || new Polynom().zero();\r\n                switch (element.token){\r\n                    case '+':\r\n                        stack.push(m1.add(m2))\r\n                        break;\r\n                    case '-':\r\n                        stack.push(m1.subtract(m2))\r\n                        break;\r\n                    case '*':\r\n                        stack.push(m1.multiply(m2))\r\n                        break;\r\n                    case '^':\r\n                        stack.push(m1.pow(+previousToken))\r\n                }\r\n            }\r\n            previousToken = element.token;\r\n        }\r\n\r\n        this._monoms = stack[0].monoms;\r\n        return this;\r\n        // for (const token of rpn) {\r\n        //     console.log(token)\r\n        //\r\n        //     if (token.tokenType==='operation') {\r\n        //         // Polynom\r\n        //         m2 = (m.pop()) || new Polynom().zero();\r\n        //\r\n        //         if (token.token !== '^') {\r\n        //             if (m.length > 0) {\r\n        //                 // Get the first item from the stack\r\n        //                 m1 = (m.pop()) || new Polynom().zero();\r\n        //             } else {\r\n        //                 // Nothing is in the stack - create an empty polynom\r\n        //                 m1 = new Polynom().zero();\r\n        //             }\r\n        //         } else {\r\n        //             // tokenParam = parseInt(token.split('^')[1]);\r\n        //             tokenParam = Number(token.token.substr(1));\r\n        //             // m2.clone().pow(tokenParam);\r\n        //         }\r\n        //\r\n        //\r\n        //         switch (token.token) {\r\n        //             case '+':\r\n        //                 m1.add(m2);\r\n        //                 break;\r\n        //             case '-':\r\n        //                 m1.subtract(m2);\r\n        //                 break;\r\n        //             case '*':\r\n        //                 m1.multiply(m2);\r\n        //                 break;\r\n        //             // TODO: Shuting yard to polynom divide.\r\n        //             // case '/': console.log(m1.display, m2.display);m1.divide(m2); break;\r\n        //             // By default, all not operation value are converted to polynom. Therefore, the pow value must be converted to an integer.\r\n        //             // TODO: Shuting yard to polynom pow : case '^': m1.pow(+m2.monoms[0].coefficient.numerator); break;\r\n        //             default:\r\n        //                 if (tokenParam !== null) {\r\n        //                     if (token.token[0] === '^') {\r\n        //                         m1 = m2.clone().pow(tokenParam);\r\n        //                     }\r\n        //                 } else {\r\n        //                     console.log('Token not recognized in shuting yard to reduce polynom: ', token);\r\n        //                 }\r\n        //         }\r\n        //         m.push(m1);\r\n        //     } else {\r\n        //         // console.log('NOT OPERATION: ', token, new Monom(token).tex)\r\n        //         m.push(new Polynom().add(new Monom(token.token)));\r\n        //     }\r\n        // }\r\n        //\r\n        // this._monoms = m[0].monoms;\r\n        // return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the polynom\r\n     */\r\n    clone = (): Polynom => {\r\n        const P = new Polynom();\r\n        const M: Monom[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            M.push(m.clone());\r\n        }\r\n\r\n        P.monoms = M;\r\n        return P;\r\n    };\r\n\r\n    /**\r\n     * Set the polynom to zero.\r\n     * @returns {this}\r\n     */\r\n    zero = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().zero());\r\n        this._rawString = '0';\r\n        return this;\r\n    };\r\n\r\n    one = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().one());\r\n        this._rawString = '1';\r\n        return this;\r\n    }\r\n\r\n    empty = (): Polynom => {\r\n        this._monoms = [];\r\n        this._rawString = '';\r\n        return this;\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Polynom generators and randomizers\r\n    // -----------------------------------------------\r\n    private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n        degree: 2,\r\n        unit: true,\r\n        fractions: false,\r\n        factorable: false,\r\n        letters: 'x',\r\n        allowNullMonom: false,\r\n        numberOfMonoms: false\r\n    };\r\n    get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n        return this._randomizeDefaults;\r\n    }\r\n\r\n    set randomizeDefaults(value) {\r\n        this._randomizeDefaults = value;\r\n    }\r\n\r\n    randomize = (config: { [key: string]: number | string | boolean }): Polynom => {\r\n        let P = new Polynom();\r\n\r\n        // Check the config file and use the default values.\r\n        if (config === undefined) {\r\n            config = {};\r\n        }\r\n        for (let k in this._randomizeDefaults) {\r\n            if (config[k] === undefined) {\r\n                config[k] = this._randomizeDefaults[k];\r\n            }\r\n        }\r\n\r\n        // TODO: Build a more robust randomize function\r\n        return P;\r\n    }\r\n\r\n\r\n    // TODO: Remove rndSimple and rndFactorable.\r\n    /**\r\n     * Polynom generator\r\n     * @param degree\r\n     * @param unit\r\n     * @param withFraction\r\n     * @param letters\r\n     * @param allowZero\r\n     * @param numberOfMonoms\r\n     */\r\n    rndSimple = (degree: number = 1, unit: boolean = false, withFraction: boolean = false, letters: string = 'x', allowZero: boolean = true, numberOfMonoms: number = -1): Polynom => {\r\n        // TODO: Make rndSimple polynom generator more user friendly\r\n        // If the current polynom (this) is already created, initialise it!\r\n        this.empty();\r\n\r\n        let M: Monom;\r\n        for (let i = degree; i >= 0; i--) {\r\n            M = new Monom().random(letters, i, withFraction, (i === degree) ? false : allowZero);\r\n\r\n            // We want to have the greatest degree monom coefficient to be unit.\r\n            if (unit && i === degree) {\r\n                M.coefficient = new Fraction().one();\r\n            }\r\n            this.add(M);\r\n        }\r\n\r\n        // Remove randomly the monoms to match the number of monoms.\r\n        if (numberOfMonoms > 0 && numberOfMonoms < this.length) {\r\n            this.reorder();\r\n            // Keep the greatest degree monom.\r\n            // But remove randomly the next monoms.\r\n            while (this.length > numberOfMonoms) {\r\n                this._monoms.splice(Numeric.randomInt(1, this.length - 1), 1);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    rndFactorable = (degree: number = 2, unit: boolean | number = false, letters: string = 'x'): Polynom => {\r\n        // TODO: Make rndFactorable polynom generator more user friendly\r\n        this._factors = [];\r\n        for (let i = 0; i < degree; i++) {\r\n            let factorUnit = unit === true || i >= unit,\r\n                p = new Polynom().rndSimple(1, factorUnit, false, letters);\r\n\r\n            this._factors.push(p);\r\n        }\r\n\r\n        this.empty().monoms = this._factors[0].monoms;\r\n        for (let i = 1; i < this._factors.length; i++) {\r\n            this.multiply(this._factors[i]);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Polynom => {\r\n        this._monoms = this._monoms.map(m => m.opposed());\r\n        return this;\r\n    };\r\n\r\n    add = (...values: any[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value.isPolynom) {\r\n                this._monoms = this._monoms.concat(value.monoms);\r\n            } else if (value.isMonom) {\r\n                this._monoms.push(value.clone());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()));\r\n            } else {\r\n                this._monoms.push(new Monom(value));\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (...values: any[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value.isPolynom) {\r\n                this._monoms = this._monoms.concat(value.clone().opposed().monoms);\r\n            } else if (value.isMonom) {\r\n                this._monoms.push(value.clone().opposed());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()).opposed());\r\n            } else {\r\n                this._monoms.push(new Monom(value).opposed());\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    multiply = (value: any): Polynom => {\r\n        if (value.isPolynom) {\r\n            return this.multiplyByPolynom(value);\r\n        } else if (value.isFraction) {\r\n            return this.multiplyByFraction(value);\r\n        } else if (value.isMonom) {\r\n            return this.multiplyByMonom(value);\r\n        } else if (Number.isSafeInteger(value)) {\r\n            return this.multiplyByInteger(value);\r\n        }\r\n\r\n        // Something went wrong...\r\n        return this;\r\n    }\r\n\r\n    private multiplyByPolynom = (P: Polynom): Polynom => {\r\n        const M: Monom[] = [];\r\n        for (const m1 of this._monoms) {\r\n            for (const m2 of P.monoms) {\r\n                M.push(Monom.xmultiply(m1, m2));\r\n            }\r\n        }\r\n\r\n        this._monoms = M;\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.multiply(F);\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByInteger = (nb: number): Polynom => {\r\n        return this.multiplyByFraction(new Fraction(nb));\r\n    };\r\n\r\n    private multiplyByMonom = (M: Monom): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.multiply(M)\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n    /**\r\n     * Divide the current polynom by another polynom.\r\n     * @param P\r\n     * returns {quotient: Polynom, reminder: Polynom}\r\n     */\r\n    euclidian = (P: Polynom): { quotient: Polynom, reminder: Polynom } => {\r\n        const letter: string = P.variables[0];\r\n        const quotient: Polynom = new Polynom().zero();\r\n        const reminder: Polynom = this.clone().reorder(letter);\r\n\r\n        // There is no variable !\r\n        if (P.variables.length === 0) {\r\n            return {quotient, reminder}\r\n        }\r\n\r\n        // Get at least a letter\r\n\r\n        const maxMP: Monom = P.monomByDegree(undefined, letter);\r\n        const degreeP: number = P.degree(letter);\r\n\r\n        let newM: Monom;\r\n\r\n        // Make the euclidian division of the two polynoms.\r\n        let MaxIteration = this.degree(letter) * 2;\r\n        while (reminder.degree(letter) >= degreeP && MaxIteration >= 0) {\r\n            // console.log('EUCLIDE Q', quotient.degree(letter), quotient.tex)\r\n            // console.log('EUCLIDE R', reminder.degree(letter), reminder.tex)\r\n            // console.log('ITERATION', MaxIteration)\r\n            MaxIteration--\r\n\r\n            // Get the greatest monom divided by the max monom of the divider\r\n            newM = reminder.monomByDegree(undefined, letter).clone().divide(maxMP);\r\n\r\n            if (newM.isZero()) {\r\n                break;\r\n            }\r\n\r\n            // Get the new quotient and reminder.\r\n            quotient.add(newM);\r\n            reminder.subtract(P.clone().multiply(newM));\r\n        }\r\n\r\n        return {quotient, reminder};\r\n    };\r\n\r\n    divide = (value: any): Polynom => {\r\n        if (value.isFraction) {\r\n            this.divideByFraction(value);\r\n        } else if (Number.isSafeInteger(value)) {\r\n            return this.divideByInteger(value);\r\n        }\r\n    }\r\n\r\n    private divideByInteger = (nb: number): Polynom => {\r\n        const nbF = new Fraction(nb);\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(nbF);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    private divideByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(F);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    pow = (nb: number): Polynom => {\r\n        if (!Number.isSafeInteger(nb)) {\r\n            return this.zero();\r\n        }\r\n        if (nb < 0) {\r\n            return this.zero();\r\n        }\r\n        if (nb === 0) {\r\n            return new Polynom();\r\n        }\r\n\r\n        const P = this.clone();\r\n        for (let i = 1; i < nb; i++) {\r\n            this.multiply(P);\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param F (Coefficient) The coefficient to compare\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (P: Polynom, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '='\r\n        }\r\n\r\n        // Create clone version to reduce them without altering the original polynoms.\r\n        const cP1 = this.clone().reduce().reorder();\r\n        const cP2 = P.clone().reduce().reorder();\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree() !== cP2.degree()) {\r\n                    return false;\r\n                }\r\n\r\n                // Check if the coefficients are the isSame.\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isEqual(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            case 'same':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree() !== cP2.degree()) {\r\n                    return false;\r\n                }\r\n\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isSameAs(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    isZero(): boolean {\r\n        return (this._monoms.length === 1 && this._monoms[0].coefficient.isZero()) || this._monoms.length === 0;\r\n    }\r\n\r\n    isOne(): boolean {\r\n        return this._monoms.length === 1 && this._monoms[0].coefficient.isOne();\r\n    }\r\n\r\n    isEqual = (P: Polynom): boolean => {\r\n        return this.compare(P, '=');\r\n    };\r\n\r\n    isSameAs = (P: Polynom): boolean => {\r\n        return this.compare(P, 'same');\r\n    };\r\n\r\n    isOpposedAt = (P: Polynom): boolean => {\r\n        return this.compare(P.clone().opposed(), '=');\r\n    };\r\n\r\n    isFactorized = (polynomString: string): boolean => {\r\n        let P;\r\n\r\n        // Check if polynom is complete...\r\n        if(polynomString.match(/\\(/g).length!==polynomString.match(/\\)/g).length){return false}\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            P = new Polynom(polynomString);\r\n        }catch (e){\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check if the provided (string) version is fully factorized.\r\n        // Run a regex on the string.\r\n        let polynomStringNormalized = polynomString.replaceAll('*', ''),\r\n            polynomStringReduced = '' + polynomStringNormalized,\r\n            factors: string[] = [];\r\n\r\n        for (let x of polynomStringNormalized.matchAll(/\\(([a-z0-9+\\-]+)\\)(\\^[0-9]*)?/g)) {\r\n            if (x[2] !== undefined) {\r\n                for (let i = 0; i < +x[2].substr(1); i++) {\r\n                    factors.push(x[1])\r\n                }\r\n            } else {\r\n                factors.push(x[1]);\r\n            }\r\n            polynomStringReduced = polynomStringReduced.replaceAll(x[0], '');\r\n        }\r\n        if (polynomStringReduced !== '') {\r\n            factors.push(polynomStringReduced);\r\n        }\r\n        let polyFactors = factors.map(x => new Polynom(x));\r\n\r\n        // Factorize the current polynom.\r\n        this.factorize();\r\n\r\n        // Compare the given factors with the generated factors\r\n        let sign = 1, maxNumberOfIteration = polyFactors.length * 2;\r\n        for (let f of this.factors) {\r\n            for (let i = 0; i < polyFactors.length; i++) {\r\n                if (f.isEqual(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    break;\r\n                } else if (f.isOpposedAt(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    sign = -sign;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // The polyfactors must be empty and the cumulative opposite factors must be 1.\r\n        return (polyFactors.length === 0 && sign === 1);\r\n    }\r\n\r\n    isDeveloped = (polynomString: string):Boolean => {\r\n        let P:Polynom;\r\n\r\n        // There is at least one parenthese - it is not developed.\r\n        if(polynomString.match(/\\(/g).length+polynomString.match(/\\)/g).length){return false}\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            // Build the polynom\r\n            P = new Polynom(polynomString);\r\n        }catch (e){\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check that everything is completely developed. Actually, there are no parentheses... so it is fully developed\r\n\r\n        // maybe it wasn't reduced and not ordered...\r\n        // compare polynom string.\r\n\r\n        // normalize the string\r\n        let polynomStringNormalized = polynomString.replaceAll('[*\\s]', '')\r\n\r\n        // Determine if it's the exact same string.\r\n        // TODO: Maybe it's enough to just make this test !\r\n        return polynomStringNormalized===P.reduce().reorder().display\r\n    }\r\n    // ------------------------------------------\r\n    // Misc polynoms functions\r\n    // -------------------------------------\r\n    reduce = (): Polynom => {\r\n        for (let i = 0; i < this._monoms.length; i++) {\r\n            for (let j = i + 1; j < this._monoms.length; j++) {\r\n                if (this._monoms[i].isSameAs(this.monoms[j])) {\r\n                    this._monoms[i].add(this.monoms[j]);\r\n                    this._monoms.splice(j, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Remove all null monoms\r\n        this._monoms = this._monoms.filter((m) => {\r\n            return m.coefficient.value !== 0\r\n        });\r\n\r\n        // Reduce all monoms coefficient.\r\n        for (const m of this._monoms) {\r\n            m.coefficient.reduce();\r\n        }\r\n\r\n        if (this.length === 0) {\r\n            return new Polynom().zero();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    reorder = (letter: string = 'x'): Polynom => {\r\n        // TODO: Must handle multiple setLetter reorder system\r\n        this._monoms.sort(function (a, b) {\r\n            return b.degree(letter) - a.degree(letter)\r\n        });\r\n        return this.reduce();\r\n    };\r\n\r\n    degree = (letter?: string): number => {\r\n        let d: number = 0;\r\n        for (const m of this._monoms) {\r\n            d = Math.max(m.degree(letter), d);\r\n        }\r\n        return d;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        let L: string[] = [], S = new Set();\r\n\r\n        for (let m of this._monoms) {\r\n            S = new Set([...S, ...m.variables]);\r\n        }\r\n\r\n        // @ts-ignore\r\n        return [...S];\r\n    }\r\n\r\n    /**\r\n     * Replace a variable (letter) by a polynom.\r\n     * @param letter\r\n     * @param P\r\n     */\r\n    replaceBy = (letter: string, P: Polynom): Polynom => {\r\n        let pow: number;\r\n        const resultPolynom: Polynom = new Polynom().zero();\r\n\r\n        for (const m of this.monoms) {\r\n            if (m.literal[letter] === undefined || m.literal[letter] === 0) {\r\n                resultPolynom.add(m.clone());\r\n            } else {\r\n                // We have found a setLetter.\r\n                // Get the power and reset it.\r\n                pow = +m.literal[letter];\r\n                delete m.literal[letter];\r\n\r\n                resultPolynom.add(P.clone().pow(pow).multiply(m));\r\n            }\r\n        }\r\n\r\n        this._monoms = resultPolynom.reduce().reorder().monoms;\r\n        return this;\r\n    };\r\n\r\n    // Evaluate a polynom.\r\n    evaluate = (values: { [key: string]: Fraction|number }|Fraction|number): Fraction => {\r\n        const r = new Fraction().zero();\r\n\r\n        this._monoms.forEach(monom => {\r\n            //console.log('Evaluate polynom: ', monom.display, values, monom.evaluate(values).display);\r\n            r.add(monom.evaluate(values));\r\n        });\r\n        return r;\r\n    };\r\n\r\n    derivative = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.derivative(letter));\r\n        }\r\n        return dP;\r\n\r\n    }\r\n\r\n    primitive = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for(let m of this._monoms) {\r\n            dP.add(m.primitive(letter))\r\n        }\r\n        return dP\r\n    }\r\n\r\n    integrate = (a: Fraction|number, b: Fraction|number, letter?:string): Fraction => {\r\n        const primitive = this.primitive(letter)\r\n\r\n        if(letter===undefined){letter='x'}\r\n\r\n        let valuesA:{ [key: string]: Fraction|number } = {},\r\n            valuesB:{ [key: string]: Fraction|number } = {}\r\n        valuesA[letter] = a;\r\n        valuesB[letter] = b;\r\n\r\n        return primitive.evaluate(valuesB).subtract(primitive.evaluate(valuesA))\r\n    }\r\n    // ------------------------------------------\r\n    // Polynoms factorization functions\r\n    // -------------------------------------\r\n    /**\r\n     * Factorize a polynom and store the best results in factors.\r\n     * @param maxValue Defines the greatest value to search to (default is 20).\r\n     */\r\n    factorize_OLD = (maxValue?: number): Polynom => {\r\n        // TODO: Must handle other letters than 'x'\r\n        this._factors = [];\r\n\r\n        // Duplicate the polynom\r\n        let P = this.clone(),\r\n            nbFactorsFound = 0;\r\n\r\n        // Determine if the polynom is \"negative\", eg has a max monom degree with a negative coefficient.\r\n        if (P.monomByDegree().coefficient.numerator < 0) {\r\n            this._factors.push(new Polynom('-1'));\r\n        }\r\n\r\n        // Determine if there is a 'common' monom\r\n        let M = P.commonMonom();\r\n        if (!M.isOne()) {\r\n            let commonPolynom = new Polynom()\r\n            commonPolynom.monoms = [M]\r\n            if (this._factors.length === 0) {\r\n                this._factors.push(commonPolynom);\r\n            } else {\r\n                this._factors = [];\r\n                this._factors.push(commonPolynom.opposed());\r\n            }\r\n            P = P.euclidian(commonPolynom).quotient;\r\n\r\n            nbFactorsFound = commonPolynom.degree();\r\n        }\r\n\r\n        // Main loop.\r\n        //\r\n        // Do it only if degree is equal or less than one.\r\n        if (P.degree() <= 1) {\r\n            this._factors.push(P.clone());\r\n        } else {\r\n            // Force test.\r\n            let Q = new Fraction(),\r\n                F,\r\n                degree = P.degree();\r\n\r\n            maxValue = maxValue === undefined ? 20 : maxValue;\r\n\r\n            // Test all polynom similar to ax+b\r\n            for (let a = 1; a <= maxValue; a++) {\r\n                // Skip a coefficient of 0\r\n                for (let b = -maxValue; b <= maxValue; b++) {\r\n\r\n                    Q.parse(-b, a);\r\n\r\n                    if (P.evaluate({x: Q})) {\r\n                        F = new Polynom(`${a}x+${b}`);\r\n                        while (P.evaluate({x: Q}).value === 0) {\r\n                            this._factors.push(F.clone());\r\n                            nbFactorsFound++;\r\n\r\n                            // Means it can be divided without reminders.\r\n                            P = P.euclidian(F).quotient;\r\n                        }\r\n                    }\r\n\r\n                    // Continue if the numbers of factors found equals the degree.\r\n                    if (nbFactorsFound > degree) {\r\n                        return this;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (P.degree() > 1) {\r\n                this._factors.push(P.clone());\r\n                return this;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    factorize = (letter?: string): Polynom[] => {\r\n        let factors: Polynom[] = [];\r\n\r\n        // Extract the common monom\r\n        let P = this.clone().reorder(),\r\n            M = P.commonMonom(),\r\n            tempPolynom: Polynom\r\n        // It has a common monom.\r\n        if (!M.isOne()) {\r\n            tempPolynom = new Polynom()\r\n            tempPolynom.monoms = [M]\r\n            factors = [tempPolynom.clone()]\r\n            P = P.euclidian(tempPolynom).quotient;\r\n        }\r\n\r\n        let securityLoop = P.degree() * 2\r\n        // securityLoop = 0\r\n        while (securityLoop >= 0) {\r\n            securityLoop--\r\n\r\n\r\n            if (P.monoms.length < 2) {\r\n                if (!P.isOne()) {\r\n                    factors.push(P.clone());\r\n                }\r\n                break;\r\n            } else {\r\n                // Get the first and last monom.\r\n                let m1 = P.monoms[0].dividers,\r\n                    m2 = P.monoms[P.monoms.length - 1].dividers\r\n\r\n                // console.log('CURRENT VALUE')\r\n                // console.log(P.tex)\r\n                // console.log('---------------------')\r\n                for (let m1d of m1) {\r\n                    for (let m2d of m2) {\r\n                        // if(m1d.degree()===m2d.degree()){continue}\r\n                        let dividerPolynom = new Polynom(),\r\n                            result\r\n                        dividerPolynom.monoms = [m1d.clone(), m2d.clone()]\r\n                        result = P.euclidian(dividerPolynom)\r\n\r\n                        // console.log(dividerPolynom.tex, '=>', result.reminder.tex, '|||||', result.quotient.tex)\r\n                        if (result.reminder.isZero()) {\r\n                            P = result.quotient.clone();\r\n                            factors.push(dividerPolynom)\r\n                            continue;\r\n                        }\r\n\r\n                        dividerPolynom.monoms = [m1d.clone(), m2d.clone().opposed()]\r\n                        result = P.euclidian(dividerPolynom)\r\n                        if (result.reminder.isZero()) {\r\n                            P = result.quotient.clone();\r\n                            factors.push(dividerPolynom)\r\n                        }\r\n                        // console.log(dividerPolynom.tex, '=>', result.reminder.tex)\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        this.factors = factors\r\n        return factors;\r\n        // let securityLoop = P.degree() * 2;\r\n        // while (P.degree(letter) >= 2 && securityLoop >= 0) {\r\n        //     // Avoid infinite looping\r\n        //     securityLoop--;\r\n        //\r\n        //     console.log(letter, P.degree(letter))\r\n        //     if (P.degree(letter) === 1) {\r\n        //         factors.push(P.clone())\r\n        //         // We are done !\r\n        //         return factors;\r\n        //\r\n        //     } else if (P.degree(letter) === 2) {\r\n        //         if(P.monoms.length===3) {\r\n        //             // Resolve using delta.\r\n        //             factors = [...factors, ...P._factorize2ndDegree(letter)];\r\n        //             // We are done !\r\n        //             return factors;\r\n        //         }else if(P.degree(letter)===2 && P.monoms.length===4) {\r\n        //             // Resolve using groups\r\n        //             factors = [...factors, ...P._factorizeByGroups()]\r\n        //         }\r\n        //\r\n        //     }else {\r\n        //         console.log('NOTHING TO DO: ', this.tex)\r\n        //     }\r\n        //\r\n        // }\r\n\r\n\r\n        return [];\r\n    }\r\n\r\n    private _factorize2ndDegree = (letter: string): Polynom[] => {\r\n        let P1: Polynom, P2: Polynom,\r\n            a, b, c, delta, x1, x2, factor;\r\n\r\n        // One variable only\r\n        if (this.numberOfVars === 1) {\r\n            a = this.monomByDegree(2, letter).coefficient;\r\n            b = this.monomByDegree(1, letter).coefficient;\r\n            c = this.monomByDegree(0, letter).coefficient;\r\n            delta = b.clone().pow(2).subtract(a.clone().multiply(c).multiply(4));\r\n\r\n            if (delta.isZero()) {\r\n                x1 = b.clone().opposed().divide(a.clone().multiply(2))\r\n                P1 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                P2 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                factor = a.divide(x1.denominator).divide(x1.denominator);\r\n\r\n                if (!factor.isOne()) {\r\n                    // TODO: Update new Polynom to accept anything...\r\n                    return [new Polynom(factor.display), P1, P2]\r\n                } else {\r\n                    return [P1, P2]\r\n                }\r\n            } else if (delta.isPositive() && delta.isSquare()) {\r\n                x1 = b.clone().opposed()\r\n                    .add(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n                x2 = b.clone().opposed()\r\n                    .subtract(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n\r\n                // (2x+5)(3x-2)\r\n                // 6x^2+11x-10\r\n                // a = 6, b = 11, c = -10\r\n                // delta = 121-4*6*(-10) = 361= 19^2\r\n                // x1 = (-11 + 19)  / 12 = 8/12 = 2/3\r\n                // x2 = (-11 - 19)  / 12 = -30/12 = -5/2\r\n                factor = a.divide(x1.denominator).divide(x2.denominator);\r\n                if (factor.isOne()) {\r\n                    return [\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n                } else {\r\n                    return [\r\n                        new Polynom(factor.display),\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n\r\n                }\r\n            } else {\r\n                // No solution possible - return the complete value.\r\n                return [this.clone()]\r\n            }\r\n        } else {\r\n            // If multiple variables, only handle perfect squares...\r\n            a = this.monomByDegree(2, letter);\r\n            b = this.monomByDegree(1, letter);\r\n            c = this.monomByDegree(0, letter);\r\n\r\n\r\n            if (a.isLitteralSquare() && c.isLitteralSquare()) {\r\n                // Check the middle item is same as...\r\n                if (b.clone().pow(2).isSameAs(a.clone().multiply(c))) {\r\n                    // Determine if the coefficient values matches.\r\n\r\n                    // Search 4 values (r, s, t, u) that matches:\r\n                    // (r X + s Y)(t X + u Y) = rt X^2 + (ru + st) XY + su Y^2\r\n\r\n                    let xPolynom = new Polynom('x', a.coefficient, b.coefficient, c.coefficient);\r\n                    let xFactors = xPolynom._factorize2ndDegree('x');\r\n\r\n                    let factors = [], xyzPolynom: Polynom;\r\n\r\n                    if (xFactors.length >= 2) {\r\n                        for (let p of xFactors) {\r\n                            if (p.degree() === 0) {\r\n                                factors.push(p.clone())\r\n                            } else {\r\n                                xyzPolynom = p.clone();\r\n                                xyzPolynom.monoms[0].literal = a.literalSqrt\r\n                                xyzPolynom.monoms[1].literal = c.literalSqrt\r\n                                factors.push(xyzPolynom.clone())\r\n                            }\r\n                        }\r\n                        return factors\r\n                    }\r\n                }\r\n            }\r\n\r\n            return [this.clone()]\r\n            //\r\n            // console.log(a.tex, b.tex, c.tex)\r\n            // if (a.isSquare() && c.isSquare()) {\r\n            //     console.log('A C squares')\r\n            //     if (a.clone().sqrt().multiply(c.clone().sqrt()).multiplyByNumber(2).isSameAs(b)) {\r\n            //         console.log('HERE')\r\n            //         if (a.coefficient.sign() === b.coefficient.sign()) {\r\n            //             return []\r\n            //         }else{\r\n            //             return []\r\n            //         }\r\n            //     }\r\n            // } else if(a.isLitteralSquare() && c.isLitteralSquare()) {\r\n            //     console.log('A C litteral SQUARES')\r\n            //     // Check that the middle element is the product of a and c.\r\n            //\r\n            //     if(b.clone().pow(2).isSameAs(a.clone().multiply(c))){\r\n            //         console.log('SAME')\r\n            //\r\n            //     }else{\r\n            //         console.log('NOT SAME')\r\n            //     }\r\n            //\r\n            //     return [this.clone()]\r\n            // } else {\r\n            //     console.log('NOT SQUARES AT ALL !!!!')\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    private _factorizeByGroups = (): Polynom[] => {\r\n        // TODO: Factorize by groups.\r\n        return [];\r\n    }\r\n    // ------------------------------------------\r\n    // Polynoms helpers functions\r\n    // -------------------------------------\r\n    // TODO: get zeroes for more than first degree\r\n    getZeroes = (): (Fraction | boolean)[] => {\r\n        const Z: Fraction[] = [];\r\n\r\n        switch (this.degree()) {\r\n            case 0:\r\n                if (this._monoms[0].coefficient.value === 0) {\r\n                    return [true];\r\n                } else {\r\n                    return [false];\r\n                }\r\n            case 1:\r\n                // There is only one monoms,\r\n                if (this._monoms.length === 1) {\r\n                    return [new Fraction().zero()];\r\n                } else {\r\n                    const P = this.clone().reduce().reorder();\r\n                    return [P.monoms[1].coefficient.opposed().divide(P.monoms[0].coefficient)];\r\n                }\r\n            // TODO: Determine the zeros of an equation of second degree.\r\n            //case 2:\r\n            default:\r\n                // Make sure the polynom is factorized.\r\n                if (this._factors.length === 0) {\r\n                    this.factorize()\r\n                }\r\n\r\n                let zeroes = [], zeroesAsTex = [];\r\n                for (let P of this._factors) {\r\n                    if (P.degree() > 2) {\r\n                        // TODO: Handle other polynom.\r\n\r\n                    } else if (P.degree() === 2) {\r\n                        let A = P.monomByDegree(2).coefficient,\r\n                            B = P.monomByDegree(1).coefficient,\r\n                            C = P.monomByDegree(0).coefficient,\r\n                            D = B.clone().pow(2).subtract(A.clone().multiply(C).multiply(4));\r\n\r\n                        if (D.value > 0) {\r\n                            /*console.log('Two zeroes for ', P.tex); */\r\n                            let x1 = (-(B.value) + Math.sqrt(D.value)) / (2 * A.value),\r\n                                x2 = (-(B.value) - Math.sqrt(D.value)) / (2 * A.value);\r\n\r\n                            zeroes.push(new Fraction(x1.toFixed(3)).reduce());\r\n                            zeroes.push(new Fraction(x2.toFixed(3)).reduce());\r\n                        } else if (D.value === 0) {\r\n                            /*console.log('One zero for ', P.tex); */\r\n\r\n                        } else {\r\n                            console.log('No zero for ', P.tex);\r\n                        }\r\n                    } else {\r\n                        for (let z of P.getZeroes()) {\r\n                            // Check if the zero is already in the list.\r\n                            if (z === false || z === true) {\r\n                                continue;\r\n                            }\r\n                            if (zeroesAsTex.indexOf(z.frac) === -1) {\r\n                                zeroes.push(z);\r\n                                zeroesAsTex.push(z.frac);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return zeroes;\r\n        }\r\n        return Z;\r\n    };\r\n\r\n\r\n    // TODO: analyse the next functions to determine if they are useful or not...\r\n    monomByDegree = (degree?: number, letter?: string): Monom => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomByDegree(this.degree(letter), letter);\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter) === degree) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        // Nothing was found - return the null monom.\r\n        return new Monom().zero();\r\n    };\r\n\r\n    monomsByDegree = (degree?: number, letter?: string): Monom[] => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomsByDegree(this.degree(letter));\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        let Ms: Monom[] = [];\r\n\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter) === degree) {\r\n                Ms.push(m.clone())\r\n            }\r\n        }\r\n\r\n        return Ms\r\n        // Nothing was found - retur\r\n    }\r\n\r\n    // Used in LinearSystem.tex\r\n    monomByLetter = (letter: string): Monom => {\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.hasLetter(letter)) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        return new Monom().zero();\r\n    };\r\n\r\n\r\n    // Next functions are used for for commonMonom, which is used in the factorize method.\r\n    getDenominators = (): number[] => {\r\n        const denominators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            denominators.push(m.coefficient.denominator);\r\n        }\r\n        return denominators;\r\n    };\r\n\r\n    getNumerators = (): number[] => {\r\n        const numerators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            numerators.push(m.coefficient.numerator);\r\n        }\r\n        return numerators;\r\n    };\r\n\r\n    lcmDenominator = (): number => {\r\n        return Numeric.lcm(...this.getDenominators());\r\n    };\r\n\r\n    gcdDenominator = (): number => {\r\n        return Numeric.gcd(...this.getDenominators());\r\n    };\r\n\r\n    lcmNumerator = (): number => {\r\n        return Numeric.lcm(...this.getNumerators());\r\n    };\r\n\r\n    gcdNumerator = (): number => {\r\n        return Numeric.gcd(...this.getNumerators());\r\n    };\r\n\r\n    commonMonom = (): Monom => {\r\n        let M = new Monom().one(), numerator: number, denominator: number, degree = this.degree();\r\n\r\n        numerator = this.gcdNumerator();\r\n        denominator = this.gcdDenominator();\r\n\r\n        M.coefficient = new Fraction(numerator, denominator);\r\n        for (let L of this.variables) {\r\n            // Initialize the setLetter with the max degree\r\n            M.setLetter(L, degree);\r\n            for (let m of this._monoms) {\r\n                M.setLetter(L, Math.min(m.degree(L), M.degree(L)));\r\n                if (M.degree(L) === 0) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return M;\r\n    }\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * This will generate a not reduced tex string of the polynom.\r\n     * @param complexity : Number of iteration to increase the complexity.\r\n     */\r\n    makeItComplicate = (complexity: number = 1): Polynom => {\r\n        this._texString = '';\r\n\r\n        // The polynom must be at least of the first degree.\r\n        if (this.degree() < 1) {\r\n            return this;\r\n        }\r\n\r\n        const mDegree = Numeric.randomInt(0, this.degree() - 1);\r\n        const A = new Polynom().rndSimple(mDegree, false, complexity > 1, 'x', false, complexity > 1 ? -1 : 1);\r\n        const B = new Polynom().rndSimple(1, false, complexity > 1);\r\n        const C = this.clone().subtract(A.clone().multiply(B));\r\n\r\n        // Try to factorize a little bit the C polynom.\r\n        C.factorizePartial(true);\r\n        this._texString = `${A.genDisplay('tex', false, true)} \\\\cdot ${B.genDisplay('tex', false, true)} ${C.texString} `;\r\n\r\n        return this;\r\n    };\r\n    factorizePartial = (forceSign?: boolean): Polynom => {\r\n        this._texString = '';\r\n        // Try to find two monoms with a common coefficient.\r\n        if (this.length <= 1) {\r\n            return this;\r\n        }\r\n\r\n        let mMain: Monom,\r\n            mCheck: Monom,\r\n            mFactor: Monom,\r\n            pFactor: Polynom,\r\n            // pRemain: Polynom,\r\n            g: number, sign: string;\r\n\r\n        for (let i = 0; i < this.length; i++) {\r\n            mMain = this._monoms[i].clone();\r\n            // We factorize only if the main coefficient isn't a fraction\r\n            // if(mMain.coefficient.denominator!==1){continue;}\r\n            for (let j = i + 1; j < this.length; j++) {\r\n                mCheck = this._monoms[j].clone();\r\n                // if(mCheck.coefficient.denominator!==1){continue;}\r\n\r\n                g = Numeric.gcd(mMain.coefficient.numerator, mCheck.coefficient.numerator);\r\n                if (g !== 1) {\r\n                    // mFactor = mMain.clone().divide(mCheck); // This gets the literal part.\r\n                    // mFactor.coefficient = new Fraction(g); // Set the coefficient to the gcd.\r\n                    mFactor = Monom.lcm(mMain, mCheck);\r\n                    sign = mMain.coefficient.sign() === 1 ? '+' : '-';\r\n                    this._texString = `${forceSign === true ? sign : (sign === '+' ? '' : sign)}${mFactor.tex}`;\r\n\r\n                    pFactor = new Polynom().add(mMain.divide(mFactor)).add(mCheck.divide(mFactor));\r\n                    this._texString += pFactor.genDisplay('tex', false, true);\r\n\r\n                    this._texString += this.clone().subtract(pFactor.clone().multiply(mFactor)).genDisplay('tex', true, false);\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._texString = this.genDisplay('tex', forceSign);\r\n\r\n        return this;\r\n    };\r\n    /**\r\n     * reduce the coefficient value as if the polynom was equal to zero.\r\n     */\r\n    minify = (): Polynom => {\r\n        // First multiply by the common denominator.\r\n        this.multiply(this.lcmDenominator()).divide(this.gcdNumerator()).reduce();\r\n        return this.reduce();\r\n    };\r\n    /**\r\n     * Determine if the current polynom is divisible by P\r\n     * TODO: should work with any polynom, not only first degree polynoms and the setLetter should disappear\r\n     * @param P\r\n     * @param letter - default setLetter\r\n     */\r\n    canDivide = (P: Polynom, letter: string = 'x'): boolean => {\r\n        const d = P.degree();\r\n\r\n        const evalValue: { [key: string]: Fraction } = {};\r\n        // A zero degree polynom can always divide, except if it's the zero polynom.\r\n        if (d === 0) {\r\n            return !P.isZero;\r\n        }\r\n\r\n        // The polynom is of degree one.\r\n        if (d === 1) {\r\n            const z = P.getZeroes();\r\n            // The zero is an undefined zero.\r\n            if (z[0] === true || z[0] === false) {\r\n                return false;\r\n            }\r\n\r\n            evalValue[letter] = z[0];\r\n            return this.evaluate(evalValue).value === 0;\r\n        }\r\n\r\n        // The polynom is of degree 2 or more...\r\n        if (d > 1) {\r\n            console.log('Currently, only first degree polynom are supported');\r\n            return false;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n\r\n}\r\n","/**\r\n * Rational polynom module contains everything necessary to handle rational polynoms.\r\n * @module Polynom\r\n */\r\n\r\nimport {Polynom} from \"./polynom\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\n/**\r\n * Rational class can handle rational polynoms\r\n */\r\nexport class Rational {\r\n    private _rawString: string;\r\n    private _numerator: Polynom;\r\n    private _denominator: Polynom;\r\n\r\n    /**\r\n     *\r\n     * @param numerator\r\n     * @param denominator\r\n     */\r\n    constructor(numerator?: Polynom, denominator?: Polynom) {\r\n        this._numerator = numerator?numerator.clone():new Polynom();\r\n        this._denominator = denominator?denominator.clone():new Polynom();\r\n    }\r\n\r\n    clone = (): Rational => {\r\n        this._numerator = this._numerator.clone()\r\n        this._denominator = this._denominator.clone()\r\n\r\n        return this;\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\dfrac{ ${this._numerator.tex} }{ ${this._denominator.tex} }`;\r\n    }\r\n\r\n    get texFactors(): string {\r\n        this._numerator.factorize()\r\n        this._denominator.factorize()\r\n\r\n        return `\\\\dfrac{ ${this._numerator.texFactors} }{ ${this._denominator.texFactors} }`\r\n    }\r\n\r\n    get numerator(): Polynom {\r\n        return this._numerator\r\n    }\r\n    get denominator(): Polynom {\r\n        return this._denominator\r\n    }\r\n\r\n    domain = (): string => {\r\n        let zeroes = this._denominator.getZeroes();\r\n        if( zeroes.length===0 || zeroes[0]===false){\r\n            return '\\\\mathbb{R}'\r\n        }else if(zeroes[0]===true){\r\n            return '\\\\varnothing'\r\n        }else{\r\n            return '\\\\mathbb{R}\\\\setminus\\\\left{'+\r\n                zeroes.map(x=> {\r\n                    return (typeof x === 'boolean')?'':x.frac\r\n                    })\r\n                    .join(';')+'\\\\right}'\r\n        }\r\n    }\r\n\r\n    amplify = (P: Polynom): Rational => {\r\n        this._numerator.multiply(P);\r\n        this._denominator.multiply(P);\r\n\r\n        return this;\r\n    }\r\n\r\n    simplify = (P: Polynom): Rational => {\r\n        let NumeratorEuclidien = this._numerator.euclidian(P);\r\n        if(!NumeratorEuclidien.reminder.isZero()){return this;}\r\n\r\n        let DenominatorEuclidien = this._denominator.euclidian(P);\r\n        if(!DenominatorEuclidien.reminder.isZero()){return this;}\r\n\r\n        this._numerator = NumeratorEuclidien.quotient;\r\n        this._denominator = DenominatorEuclidien.quotient;\r\n        return this;\r\n    }\r\n\r\n    reduce = (): Rational => {\r\n        console.log(this._numerator.tex)\r\n        this._numerator.factorize();\r\n        console.log(this._numerator.factors.map(x => x.tex))\r\n        for(let f of this._numerator.factors){\r\n            this.simplify(f);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    opposed = (): Rational => {\r\n        this._numerator.opposed();\r\n        return this;\r\n    }\r\n    add = (R: Rational): Rational => {\r\n        // 1. Make sure both rational are at the same denominator\r\n        // 2. Add the numerators.\r\n        // 3. Simplify\r\n\r\n        // Store the adding denominator\r\n        let denominator = this._denominator.clone()\r\n\r\n        // Amplif the main rational polynom by the adding denominator\r\n        this.amplify(R._denominator)\r\n\r\n        // Add to the numerator the adding value...\r\n        this._numerator.add(R._numerator.clone().multiply(denominator));\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (R: Rational): Rational => {\r\n        return this.add(R.clone().opposed())\r\n    }\r\n\r\n    limits = (value: Fraction|number, letter?: string):Fraction|number => {\r\n        if(value===Infinity || value===-Infinity){\r\n            let N = this._numerator.monomByDegree(this._numerator.degree(letter), letter),\r\n                D = this._denominator.monomByDegree(this._denominator.degree(letter), letter)\r\n\r\n            N.divide(D)\r\n\r\n            if(N.degree(letter)>0){return N.coefficient.sign()*(Math.pow((value>0?1:-1),N.degree(letter)%2))===1?Infinity:-Infinity}\r\n            if(N.degree(letter)===0){return N.coefficient}\r\n            if(N.degree(letter)>0){return N.coefficient.sign()*(Math.pow(-1,N.degree(letter)%2))===1?0:-0}\r\n        }else{\r\n            return this._numerator.evaluate({letter: value}).divide(this._denominator.evaluate({letter: value}))\r\n        }\r\n    }\r\n}","import {Numeric} from \"../numeric\";\r\n\r\nexport class Fraction {\r\n    private _numerator: number;\r\n    private _denominator: number;\r\n\r\n    constructor(value?: any, denominatorOrPeriodic?: number) {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n\r\n        if (value !== undefined) {\r\n            this.parse(value, denominatorOrPeriodic);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isFraction() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n\r\n    get numerator(): number {\r\n        return this._numerator;\r\n    }\r\n\r\n    set numerator(value: number) {\r\n        this._numerator = value;\r\n    }\r\n\r\n    get denominator(): number {\r\n        return this._denominator;\r\n    }\r\n\r\n    set denominator(value: number) {\r\n        this._denominator = value;\r\n    }\r\n\r\n    get value(): number {\r\n        return this._numerator / this._denominator;\r\n    }\r\n\r\n    // Display getter\r\n    get tex(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else if (this._numerator < 0) {\r\n            return `-\\\\frac{ ${-this._numerator} }{ ${this._denominator} }`;\r\n        } else {\r\n            return `\\\\frac{ ${this._numerator} }{ ${this._denominator} }`;\r\n        }\r\n    }\r\n\r\n    get display(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else {\r\n            return `${this._numerator}/${this._denominator}`;\r\n        }\r\n    }\r\n\r\n    // Helper function to display fractions\r\n    get frac(): string {\r\n        return this.tex;\r\n    }\r\n\r\n    get dfrac(): string {\r\n        return this.tex.replace('\\\\frac', '\\\\dfrac');\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse the value to get the numerator and denominator\r\n     * @param value : number or string to parse to get the fraction\r\n     * @param denominatorOrPeriodic (optional|number) : length of the periodic part: 2.333333 => 1 or denominator value\r\n     */\r\n    parse = (value: any, denominatorOrPeriodic?: number): Fraction => {\r\n        let S: string[];\r\n\r\n        // A null value means a zero fraction.\r\n        if (value === null) {\r\n            this._numerator = 0;\r\n            this._denominator = 1;\r\n            return this;\r\n        }\r\n\r\n        switch (typeof value) {\r\n            case \"string\":\r\n                // Split the sting value in two parts: Numerator/Denominator\r\n                S = value.split('/');\r\n\r\n                // Security checks\r\n                    if (S.length > 2) throw \"Two many divide signs\";\r\n                    if (S.map(x => x === '' || isNaN(Number(x))).includes(true)) throw \"Not a number\"\r\n\r\n\r\n                if (S.length === 1) {\r\n                    // No divide sign\r\n                    return this.parse(+S[0]);\r\n                } else if (S.length === 2) {\r\n                    // One divide signe\r\n                    // We check if the denominator is zero\r\n                    if (S[1] === '0') {\r\n                        this._numerator = NaN;\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._numerator = +S[0];\r\n                        this._denominator = +S[1];\r\n                    }\r\n                } else {\r\n                    // More than one divide sign ?\r\n                    this._numerator = NaN;\r\n                    this._denominator = 1;\r\n                }\r\n                break;\r\n            case \"number\":\r\n                if (Number.isSafeInteger(value)) {\r\n                    // The given value is an integer\r\n                    this._numerator = +value;\r\n\r\n                    if (denominatorOrPeriodic === undefined || !Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._denominator = +denominatorOrPeriodic;\r\n                    }\r\n                } else {\r\n                    // The given value is a float number\r\n\r\n                    // Get the number of decimals after the float sign\r\n                    let p: number = (value.toString()).split('.')[1].length;\r\n\r\n                    // Transform the float number in two integer\r\n                    if (denominatorOrPeriodic === undefined) {\r\n                        this._numerator = value * Math.pow(10, p);\r\n                        this._denominator = Math.pow(10, p);\r\n                    } else if (Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._numerator = value * Math.pow(10, p) - Math.floor(value * Math.pow(10, p - denominatorOrPeriodic));\r\n                        this.denominator = Math.pow(10, p) - Math.pow(10, p - denominatorOrPeriodic)\r\n                    }\r\n                }\r\n                break;\r\n            case \"object\":\r\n                if (value.isFraction) {\r\n                    this._numerator = +value.numerator;\r\n                    this._denominator = +value.denominator;\r\n                }\r\n                break;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): Fraction => {\r\n        let F = new Fraction();\r\n        F.numerator = +this._numerator;\r\n        F.denominator = +this._denominator;\r\n        return F;\r\n    };\r\n\r\n    zero = (): Fraction => {\r\n        this._numerator = 0;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    one = (): Fraction => {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    infinite = (): Fraction => {\r\n        this._numerator = Infinity;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    invalid = (): Fraction => {\r\n        this._numerator = NaN;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Fraction => {\r\n        this._numerator = -this._numerator;\r\n        return this;\r\n    };\r\n\r\n    add = (F: Fraction): Fraction => {\r\n        let N: number = this._numerator,\r\n            D: number = this._denominator;\r\n\r\n        this._numerator = N * F.denominator + F.numerator * D;\r\n        this._denominator = D * F.denominator;\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (F: Fraction): Fraction => {\r\n        return this.add(F.clone().opposed());\r\n    };\r\n\r\n    multiply = (F: Fraction | number): Fraction => {\r\n        // Parse the value.\r\n        // If it's a fraction, return a clone of it\r\n        // If it's an integer, return the fraction F/1\r\n        let Q = new Fraction(F);\r\n\r\n        this._numerator = this._numerator * Q.numerator;\r\n        this._denominator = this._denominator * Q.denominator;\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    divide = (F: Fraction | number): Fraction => {\r\n        let Q = new Fraction(F);\r\n\r\n        if (Q.numerator === 0) {\r\n            return new Fraction().infinite();\r\n        }\r\n\r\n        let N: number = +this._numerator,\r\n            D: number = +this._denominator;\r\n\r\n        this._numerator = N * Q.denominator;\r\n        this._denominator = D * Q.numerator;\r\n        return this.reduce();\r\n    };\r\n\r\n    invert = (): Fraction => {\r\n        let n = +this._numerator, d = +this._denominator;\r\n        this._numerator = d;\r\n        this._denominator = n;\r\n\r\n        return this;\r\n    }\r\n    pow = (p: number): Fraction => {\r\n        if (!Number.isSafeInteger(p)) {\r\n            return this.invalid();\r\n        }\r\n        this.reduce();\r\n\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        this._numerator = this._numerator ** Math.abs(p);\r\n        this._denominator = this._denominator ** Math.abs(p);\r\n        return this;\r\n    };\r\n\r\n    root = (p: number): Fraction => {\r\n        // TODO: nth - root of a fraction => this will return another type of coefficient.\r\n\r\n        // Check if they are perfect roots..\r\n        if (p === 0) {\r\n            return this;\r\n        }\r\n\r\n        // If negative, invert the fraction\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        let n = Math.pow(this._numerator, Math.abs(1 / p)),\r\n            d = Math.pow(this._denominator, Math.abs(1 / p));\r\n\r\n        this._numerator = Math.pow(this._numerator, Math.abs(1 / p));\r\n        this._denominator = Math.pow(this._denominator, Math.abs(1 / p));\r\n        return this;\r\n    }\r\n\r\n    sqrt = (): Fraction => {\r\n        return this.root(2);\r\n    }\r\n\r\n    abs = (): Fraction => {\r\n        this._numerator = Math.abs(this._numerator);\r\n        this._denominator = Math.abs(this._denominator);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations specific to fractions\r\n    // ------------------------------------------\r\n    reduce = (): Fraction => {\r\n        let g = Numeric.gcd(this._numerator, this._denominator);\r\n        this._numerator = this._numerator / g;\r\n        this._denominator = this._denominator / g;\r\n\r\n        if (this._denominator < 0) {\r\n            this._denominator = -this._denominator;\r\n            this._numerator = -this._numerator;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    amplify = (k: number): Fraction => {\r\n        if (Number.isSafeInteger(k)) {\r\n            this._numerator *= k;\r\n            this._denominator *= k;\r\n        }\r\n        return this;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param F (Coefficient) The coefficient to compare\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (F: Fraction, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n\r\n        switch (sign) {\r\n            case '>':\r\n                return this.value > F.value;\r\n            case \">=\" || \"=>\" || \"geq\":\r\n                return this.value >= F.value;\r\n            case \"<\":\r\n                return this.value < F.value;\r\n            case \"<=\" || \"=>\" || \"leq\":\r\n                return this.value <= F.value;\r\n            case \"=\":\r\n                // let F2: Fraction = F.clone().reduce(),\r\n                //     F1: Fraction = this.clone().reduce();\r\n                // return (F1.numerator === F2.numerator && F1.denominator === F2.denominator);\r\n                return this.value === F.value;\r\n            case \"<>\":\r\n                return this.value !== F.value;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n    /* Compare shortcuts */\r\n    lesser = (than: Fraction): Boolean => {\r\n        return this.compare(than, '<');\r\n    };\r\n    leq = (than: Fraction): Boolean => {\r\n        return this.compare(than, '<=');\r\n    };\r\n    greater = (than: Fraction): Boolean => {\r\n        return this.compare(than, '>');\r\n    };\r\n    geq = (than: Fraction): Boolean => {\r\n        return this.compare(than, '>=');\r\n    };\r\n    isEqual = (than: Fraction): boolean => {\r\n        return this.compare(than, '=');\r\n    }\r\n    isDifferent = (than: Fraction): boolean => {\r\n        return this.compare(than, '<>');\r\n    }\r\n    isOpposed = (p: Fraction): boolean => {\r\n        return this.isEqual(p.clone().opposed());\r\n    }\r\n    isInverted = (p: Fraction): boolean => {\r\n        return this.isEqual(new Fraction().one().divide(p.clone()));\r\n    }\r\n    isZero = (): boolean => {\r\n        return this._numerator === 0;\r\n    }\r\n    isOne = (): boolean => {\r\n        return this._numerator === 1 && this._denominator === 1;\r\n    }\r\n    isPositive = (): boolean => {\r\n        return this.sign()===1;\r\n    }\r\n    isNegative = (): boolean => {\r\n        return this.sign()===-1;\r\n    }\r\n    isNaN = (): boolean => {\r\n        return isNaN(this._numerator);\r\n    }\r\n    isInfinity = (): boolean => {\r\n        return this._numerator === Infinity;\r\n    }\r\n    isFinite = (): boolean => {\r\n        return !this.isInfinity();\r\n    }\r\n    isSquare = (): boolean => {\r\n        return Math.sqrt(this._numerator) % 1 === 0 && Math.sqrt(this._denominator) % 1 === 0\r\n    }\r\n    isReduced = (): boolean => {\r\n        return Math.abs(Numeric.gcd(this._numerator, this._denominator))===1\r\n    }\r\n    sign = (): number => {\r\n        return (this._numerator * this._denominator >= 0) ? 1 : -1;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Simple function to determine if it's a fraction\r\n     */\r\n    areEquals = (...F: Fraction[]): boolean => {\r\n        for (let i = 0; i < F.length; i++) {\r\n            if (!this.isEqual(F[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n}","export class Nthroot {\r\n    private _radical: number;\r\n    private _nth: number;\r\n    private _coefficient: number;\r\n    private _isValid:boolean;\r\n\r\n    constructor() {\r\n        this._radical = 1;\r\n        this._coefficient = 1;\r\n        this._nth = 2;\r\n        this._isValid = true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get radical(): number {\r\n        return this._radical;\r\n    }\r\n\r\n    set radical(value: number) {\r\n        this._radical = value;\r\n    }\r\n\r\n    get nth(): number {\r\n        return this._nth;\r\n    }\r\n\r\n    set nth(value: number) {\r\n        if (Number.isSafeInteger(value) && value >= 2) {\r\n            this._nth = value;\r\n        } else {\r\n            // Error setting the nth root.\r\n            console.log('Error setting the nth root');\r\n            this._nth = 2;\r\n        }\r\n    }\r\n\r\n    get coefficient(): number {\r\n        return this._coefficient;\r\n    }\r\n\r\n    set coefficient(value: number) {\r\n        this._coefficient = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let C: string;\r\n\r\n        if (this._coefficient === 1) {\r\n            C = '';\r\n        } else if (this._coefficient === -1) {\r\n            C = '-';\r\n        } else {\r\n            C = this._coefficient.toString();\r\n        }\r\n\r\n        if (this._radical === 1) {\r\n            return `${this._coefficient}`;\r\n        } else {\r\n            if (this._nth === 2) {\r\n                return `${C}\\\\sqrt{${this._radical}}`\r\n            } else {\r\n                return `${C}\\\\sqrt[${this._nth}]{${this._radical}}`\r\n            }\r\n        }\r\n    }\r\n\r\n    get value(): number {\r\n        return this._coefficient * Math.pow(this._radical, 1 / this._nth);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (radical: number, nthroot?: number, coefficient?: number): Nthroot => {\r\n        this._coefficient = (coefficient === undefined) ? 1 : coefficient;\r\n        this._nth = (nthroot === undefined) ? 2 : nthroot;\r\n        this._radical = (radical === undefined) ? 1 : radical;\r\n\r\n        if(this._nth%2===0 && this._radical<0){\r\n            this._isValid = false;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    reduce = (): Nthroot => {\r\n        // Max value to test.\r\n        let V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n        while (V > 1) {\r\n            if (this._radical % Math.pow(V, this._nth) === 0) {\r\n                // It's dividable by V^n\r\n                this._coefficient *= V;\r\n                this._radical = this._radical / Math.pow(V, this._nth);\r\n\r\n                // Redifine the new testing value (this is optimization)\r\n                V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n                continue;\r\n            }\r\n            V--;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiply = (N: Nthroot): Nthroot => {\r\n        this._radical *= N.radical;\r\n        return this.reduce();\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Help functions\r\n    // ------------------------------------------\r\n    hasRadical = ():boolean => {\r\n        return !(this._radical===1 || this._radical===0 || this._isValid===false)\r\n    };\r\n}","/**\r\n * This class works for 2d line in a plane.\r\n */\r\n\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Vector} from \"./vector\";\r\nimport {Point} from \"./point\";\r\nimport {Polynom} from \"../algebra/polynom\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Equation} from \"../algebra/equation\";\r\n\r\nexport class Line {\r\n    // A line is defined as the canonical form\r\n    // ax + by + c = 0\r\n    private _a: Fraction;\r\n    private _b: Fraction;\r\n    private _c: Fraction;\r\n    private _OA: Point;\r\n    private _d: Vector;\r\n    private _n: Vector;\r\n    private _exists: boolean\r\n\r\n    constructor(...values: any) {\r\n\r\n        this._exists = false;\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isLine():boolean {return true;}\r\n    get exists(): boolean {return this._exists; }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equation(): Equation {\r\n        return new Equation(new Polynom().parse('xy', this._a, this._b, this._c), new Polynom('0')).simplify();\r\n    }\r\n    get tex(): { canonical: string, mxh: string, parametric: string } {\r\n        // canonical    =>  ax + by + c = 0\r\n        // mxh          =>  y = -a/b x - c/b\r\n        // parametric   =>  (xy) = OA + k*d\r\n\r\n        let canonical = this.equation;\r\n        // Make sur the first item is positive.\r\n        if(this._a.isNegative()){\r\n            canonical.multiply(-1);\r\n        }\r\n\r\n        return {\r\n            canonical: canonical.tex,\r\n            mxh: this.slope.isInfinity() ? 'x=' + this.OA.x.tex : 'y=' + new Polynom().parse('x', this.slope, this.height).tex,\r\n            parametric: `${Point.pmatrix('x', 'y')} = ${Point.pmatrix(this._OA.x, this._OA.y)} + k\\\\cdot ${Point.pmatrix(this._d.x, this._d.y)}`\r\n        }\r\n    }\r\n\r\n    get a(): Fraction {\r\n        return this._a;\r\n    }\r\n\r\n    set a(value: Fraction) {\r\n        this._a = value;\r\n    }\r\n\r\n    get b(): Fraction {\r\n        return this._b;\r\n    }\r\n\r\n    set b(value: Fraction) {\r\n        this._b = value;\r\n    }\r\n\r\n    get c(): Fraction {\r\n        return this._c;\r\n    }\r\n\r\n    set c(value: Fraction) {\r\n        this._c = value;\r\n    }\r\n\r\n    get OA(): Point {\r\n        return this._OA;\r\n    }\r\n\r\n    set OA(value: Point) {\r\n        this._OA = value;\r\n    }\r\n\r\n    get d(): Vector {\r\n        return this._d;\r\n    }\r\n\r\n    get n(): Vector {\r\n        return this._n;\r\n    }\r\n\r\n    get normal(): Vector {\r\n        return new Vector(this._a, this._b);\r\n    }\r\n\r\n    set d(value: Vector) {\r\n        this._d = value;\r\n    }\r\n\r\n    get slope(): Fraction {\r\n        return this._a.clone().opposed().divide(this._b);\r\n    }\r\n\r\n    get height(): Fraction {\r\n        return this._c.clone().opposed().divide(this._b);\r\n    }\r\n\r\n// ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...values: any): Line => {\r\n        this._exists = false;\r\n\r\n        if (values.length === 3) {\r\n            return this.parseByCoefficient(values[0], values[1], values[2]);\r\n        } else if (values.length === 2) {\r\n            if (values[0].isPoint && values[1].isVector) {\r\n                return this.parseByPointAndVector(values[0], values[1]);\r\n            } else if (values[0].isPoint && values[1].isPoint) {\r\n                return this.parseByPointAndVector(values[0], new Vector(values[0], values[1]));\r\n            }\r\n        } else if (values.length === 1){\r\n            // It's a already a line - clone it !\r\n            if(values[0].isLine){\r\n                return values[0].clone();\r\n            }\r\n\r\n            // Maybe it's a string or an equation\r\n            let equ = new Equation(values[0]);\r\n            if(equ.isEquation){\r\n                // Check if it's a valid equation.\r\n                equ.reorder(true)\r\n\r\n                // It must contain either x, y or both.\r\n                let letters = new Set(equ.letters());\r\n\r\n                // No 'x', no 'y' in the equations\r\n                if(!(letters.has('x') || letters.has('y'))){return;}\r\n\r\n                // Another letter in the equation.\r\n                for(let elem of ['x', 'y']){\r\n                    if(letters.has(elem)){\r\n                        letters.delete(elem)}\r\n                }\r\n\r\n                if(letters.size>0){\r\n                    console.log('Extra variable in the equation.')\r\n                    return this;\r\n                }\r\n\r\n                // Everything should be ok now...\r\n                return this.parseByCoefficient(equ.left.monomByLetter('x').coefficient, equ.left.monomByLetter('y').coefficient, equ.left.monomByDegree(0).coefficient)\r\n            }\r\n        }\r\n        // TODO: Add the ability to create line from a normal vector\r\n        console.log('Someting wrong happend while creating the line')\r\n        return this;\r\n    }\r\n\r\n    parseByCoefficient = (a: Fraction, b: Fraction, c: Fraction): Line => {\r\n        this._a = new Fraction(a);\r\n        this._b = new Fraction(b);\r\n        this._c = new Fraction(c);\r\n\r\n        // TODO: initialize direction and reference point\r\n        this._d = new Vector(this._b.clone(), this._a.clone().opposed());\r\n        this._OA = new Point(new Fraction().zero(), this._c.clone());\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    parseByPointAndVector = (P: Point, d: Vector): Line => {\r\n        // OX = OP + k*d\r\n        // x = px + kdx     * dy\r\n        // y = py + kdy     * dx\r\n        // ------------------\r\n        // dy * x = px * dy + kdxdy\r\n        // dx * y = py * dx + kdxdy\r\n        // ------------------\r\n        // dy * x - dx * y = px * dy - py * dx\r\n        // dy * x - dx * y - (px * dy - py * dx) = 0\r\n        this.parseByCoefficient(\r\n            d.y,\r\n            d.x.clone().opposed(),\r\n            P.x.clone().multiply(d.y).subtract(P.y.clone().multiply(d.x)).opposed()\r\n        )\r\n\r\n        // Choose the current values as point and direction vector instead of the automatic version.\r\n        this._OA = P.clone();\r\n        this._d = d.clone();\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    clone = (): Line => {\r\n        this._a = this._a.clone();\r\n        this._b = this._b.clone();\r\n        this._c = this._c.clone();\r\n\r\n        this._d = this._d.clone();\r\n        this._OA = this._OA.clone();\r\n        this._n = this._n.clone();\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    isParellelTo = (line: Line): Boolean => {\r\n        // Do they have the isSame direction ?\r\n        return this.slope.isEqual(line.slope) && this.height.isDifferent(line.height);\r\n    }\r\n    isSameAs = (line: Line): Boolean => {\r\n        return this.slope.isEqual(line.slope) && this.height.isEqual(line.height);\r\n    }\r\n    simplifyDirection = (): Line => {\r\n        let lcm = Numeric.lcm(this._d.x.denominator, this._d.y.denominator),\r\n            gcd = Numeric.gcd(this._d.x.numerator, this._d.y.numerator);\r\n\r\n        this._d.x.multiply(lcm).divide(gcd);\r\n        this._d.y.multiply(lcm).divide(gcd);\r\n        return this;\r\n    }\r\n    intersection = (line: Line): { point: Point, hasIntersection: boolean, isParallel: boolean, isSame: boolean } => {\r\n        let Pt = new Point(), isParallel = false, isSame = false, hasIntersection = true;\r\n\r\n        // this         => ax+by+c = 0\r\n        // line         => dx+ey+f = 0\r\n        //\r\n        //  aex + bey + ce = 0\r\n        //  dbx + bey + bf = 0\r\n        // (ae-db)x + ce-bf = 0\r\n        //\r\n        //  adx + bdy + cd = 0\r\n        //  adx + aey + af = 0\r\n        // (bd-ae)y + (cd-af)\r\n        //\r\n        // x = (bf-ce)/(ae-db)\r\n        // y = (af-cd)/(bd-ae)\r\n\r\n\r\n        // Theres is no 'y'\r\n        if (this._b.isZero() || line.b.isZero()) {\r\n            // TODO : handle no y in the line canonical form\r\n        }\r\n\r\n        if (this.isParellelTo(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isParallel = true;\r\n        } else if (this.isSameAs(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isSame = true;\r\n        } else {\r\n            Pt.x = this._b.clone().multiply(line.c).subtract(this._c.clone().multiply(line.b))\r\n                .divide(this._a.clone().multiply(line.b).subtract(this._b.clone().multiply(line.a)));\r\n            Pt.y = this._a.clone().multiply(line.c).subtract(this._c.clone().multiply(line.a))\r\n                .divide(this._b.clone().multiply(line.a).subtract(this._a.clone().multiply(line.b)));\r\n        }\r\n\r\n        return {\r\n            point: Pt,\r\n            hasIntersection: !(isParallel || isSame),\r\n            isParallel,\r\n            isSame\r\n        };\r\n    }\r\n\r\n    distanceTo(pt: Point): { value: number, fraction: Fraction, tex: string } {\r\n        let numerator = pt.x.clone().multiply(this._a)\r\n                .add(pt.y.clone().multiply(this._b))\r\n                .add(this._c).abs(),\r\n            d2 = this.normal.normSquare;\r\n\r\n        // The denominator is null - shouldn't be possible\r\n        if (d2.isZero()) {\r\n            return {\r\n                value: NaN,\r\n                tex: 'Not a line',\r\n                fraction: new Fraction().infinite()\r\n            }\r\n        }\r\n        // The denominator is a perfect square - simplify the tex result\r\n        let value = numerator.value / Math.sqrt(d2.value),\r\n            F = numerator.clone().divide(d2.clone().sqrt());\r\n\r\n        // The denominator is a perfect square.\r\n        if (d2.isSquare()) {\r\n            return {\r\n                value,\r\n                tex: F.tex,\r\n                fraction: F\r\n            }\r\n        }\r\n        // Complete answer...\r\n        return {\r\n            value,\r\n            tex: `\\\\frac{${numerator.tex}}{\\\\sqrt{${d2.tex}}}`,\r\n            fraction: F\r\n        };\r\n    }\r\n\r\n    hitSegment(A: Point, B: Point): boolean {\r\n        let iPt = this.intersection(\r\n            new Line(A, B)\r\n        )\r\n\r\n        // There is an intersection point\r\n        if(iPt.hasIntersection) {\r\n            return iPt.point.x.value >= Math.min(A.x.value, B.x.value)\r\n                && iPt.point.x.value <= Math.max(A.x.value, B.x.value)\r\n                && iPt.point.y.value >= Math.min(A.y.value, B.y.value)\r\n                && iPt.point.y.value <= Math.max(A.y.value, B.y.value)\r\n        }\r\n        return false;\r\n    }\r\n    // ------------------------------------------\r\n    // Special functions\r\n    // ------------------------------------------\r\n    canonicalAsFloatCoefficient(decimals: number): string{\r\n        if(decimals===undefined){\r\n            decimals = 2;\r\n        }\r\n\r\n        let ca = this._a.value,\r\n            cb = this._b.value,\r\n            cc= this._c.value,\r\n            canonical = '';\r\n\r\n        if(!this._a.isZero()){\r\n            if(this._a.isOne()){\r\n                canonical = 'x'\r\n            }else if(this._a.clone().opposed().isOne()){\r\n                canonical = '-x'\r\n            }else{\r\n                canonical = this._a.value.toFixed(decimals)+'x'\r\n            }\r\n        }\r\n\r\n        if(!this._b.isZero()){\r\n            if(this._b.isPositive()){canonical+='+'}\r\n            canonical += this._b.value.toFixed(decimals) + 'y'\r\n        }\r\n\r\n        if(!this._c.isZero()){\r\n            if(this._c.isPositive()){canonical+='+'}\r\n            canonical += this._c.value.toFixed(decimals)\r\n        }\r\n\r\n\r\n        return canonical + '=0';\r\n    }\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\n//TODO: Ajouter une vérification si la droite existe.\r\nexport class Point {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n    private _exist: Boolean;\r\n\r\n    constructor(...values: any) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n    };\r\n\r\n    get isPoint() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.tex);\r\n        pts.push(this._y.tex);\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Point => {\r\n        // Initialize the value.\r\n        this.zero();\r\n\r\n        // Nothing is given\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        // One element is given - might be already a point !\r\n        if (values.length === 1) {\r\n            if (values[0].isPoint) {\r\n                return values.clone();\r\n            }\r\n\r\n            // Value given as a dictionnary\r\n            if (values[0].x !== undefined && values[0].y !== undefined) {\r\n                this._x = new Fraction(values[0].x).reduce()\r\n                this._y = new Fraction(values[0].y).reduce()\r\n            } else {\r\n                return this.zero();\r\n            }\r\n        }\r\n        if (values.length === 2) {\r\n            this._x = new Fraction(values[0]).reduce()\r\n            this._y = new Fraction(values[1]).reduce()\r\n        }\r\n\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Point => {\r\n        let V = new Point();\r\n\r\n        if (this._x !== null) {\r\n            V.x = this._x.clone();\r\n        }\r\n        if (this._y !== null) {\r\n            V.y = this._y.clone();\r\n        }\r\n        return V;\r\n    }\r\n\r\n    zero = (): Point => {\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    origin = (): Point => {\r\n        this.zero();\r\n        return this;\r\n    }\r\n\r\n    middleOf = (P1: Point, P2: Point): Point => {\r\n        this._x = P1.x.clone().add(P2.x).divide(2);\r\n        this._y = P1.y.clone().add(P2.y).divide(2);\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Display functions\r\n    // ------------------------------------------\r\n    texValues = (numberOfDigits: number): string => {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.value.toFixed(numberOfDigits===undefined?2:numberOfDigits));\r\n        pts.push(this._y.value.toFixed(numberOfDigits===undefined?2:numberOfDigits));\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Static functions\r\n    // ------------------------------------------\r\n    static pmatrix = (a: any, b: any, c?: any): string => {\r\n        if (c === undefined) {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\end{pmatrix}`;\r\n        } else {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\\\\\ ${c.tex ? c.tex : c} \\\\end{pmatrix}`;\r\n        }\r\n    };\r\n\r\n}\r\n","import {Point} from \"./point\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Vector} from \"./vector\";\r\nimport {Line} from \"./line\";\r\nimport {Equation} from \"../algebra/equation\";\r\n\r\ninterface remarquableLines {\r\n    'medians': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'mediators': {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line,\r\n        'intersection': Point\r\n    },\r\n    'heights': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'bisectors': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    }\r\n}\r\n\r\nexport class Triangle {\r\n    private _A: Point;\r\n    private _B: Point;\r\n    private _C: Point;\r\n    private _lines: {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line\r\n    };\r\n    private _middles: {\r\n        'AB': Point,\r\n        'AC': Point,\r\n        'BC': Point\r\n    };\r\n    private _remarquables: remarquableLines;\r\n\r\n\r\n    constructor(...values: any) {\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    get isTriangle():boolean {return true;}\r\n\r\n    // ------------------------------------------\r\n    // Getter and setters\r\n    // ------------------------------------------\r\n\r\n    get A(): Point {\r\n        return this._A;\r\n    }\r\n\r\n    get B(): Point {\r\n        return this._B;\r\n    }\r\n\r\n    get C(): Point {\r\n        return this._C;\r\n    }\r\n\r\n    get AB(): Vector {\r\n        return this.getSegment('A', 'B');\r\n    }\r\n\r\n    get BA(): Vector {\r\n        return this.getSegment('B', 'A');\r\n    }\r\n\r\n    get BC(): Vector {\r\n        return this.getSegment('B', 'C');\r\n    }\r\n\r\n    get CB(): Vector {\r\n        return this.getSegment('C', 'B');\r\n    }\r\n\r\n    get AC(): Vector {\r\n        return this.getSegment('A', 'C');\r\n    }\r\n\r\n    get CA(): Vector {\r\n        return this.getSegment('C', 'A');\r\n    }\r\n\r\n    get isRectangle(): boolean {\r\n        if (this.AB.isNormalTo(this.BC)) {\r\n            return true;\r\n        }\r\n        if (this.AB.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n        if (this.BC.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    get isEquilateral(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) &&\r\n            this.AB.normSquare.isEqual(this.AC.normSquare);\r\n    }\r\n\r\n    get isIsocele(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) ||\r\n            this.AB.normSquare.isEqual(this.AC.normSquare) ||\r\n            this.BC.normSquare.isEqual(this.AC.normSquare)\r\n    }\r\n\r\n    get lines(): { 'AB': Line, 'BC': Line, 'AC': Line } {\r\n        return this._lines;\r\n    }\r\n\r\n    get remarquables(): remarquableLines {\r\n        return this._remarquables;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Parse values to a triangle. Supported formats:\r\n     * Point, Point, Point\r\n     * x1, y1, x2, y2, x3, y3\r\n     * TODO: Something else ?\r\n     * @param values\r\n     */\r\n    parse = (...values: any): Triangle => {\r\n        if (values.length === 6) {\r\n            // Check if all values are number or fractions.\r\n            let v = values.map((x: any) => new Fraction(x));\r\n            return this.parse(\r\n                new Point(v[0], v[1]),\r\n                new Point(v[2], v[3]),\r\n                new Point(v[4], v[5]),\r\n            )\r\n        } else if (values.length === 3) {\r\n            // Possibilities:\r\n            // - Three points (or part of points, only dict for example, or array (TODO: Add the array syntax for point)\r\n            // - Three lines\r\n            // - Three lines as text.\r\n            if(values.filter((x:any) => typeof x === 'string').length===3) {\r\n                return this.parse( ...values.map((x:string) => new Line(x)) )\r\n            }else if(values.filter((x:any) => x.isLine === true).length===3) {\r\n                // We have three lines\r\n                this._lines = {\r\n                    'AB': values[0],\r\n                    'BC': values[1],\r\n                    'AC': values[2]\r\n                };\r\n\r\n                // Get the intersection points -> build the triangle using these intersection points.\r\n                let intersect = values[0].intersection(values[1]);\r\n                if (intersect.hasIntersection) {\r\n                    this._B = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[1].intersection(values[2]);\r\n                if (intersect.hasIntersection) {\r\n                    this._C = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[2].intersection(values[0]);\r\n                if (intersect.hasIntersection) {\r\n                    this._A = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n            }else {\r\n                // At least, one of the value is not a point.\r\n                if (values.filter((x: any) => x.isPoint === true).length < 3) {\r\n                    return this.parse(\r\n                        new Point(values[0]),\r\n                        new Point(values[1]),\r\n                        new Point(values[2])\r\n                    )\r\n                }\r\n\r\n                // We have three points.\r\n                this._A = values[0].clone();\r\n                this._B = values[1].clone();\r\n                this._C = values[2].clone();\r\n\r\n                this._lines = {\r\n                    'AB': new Line(this._A, this._B),\r\n                    'BC': new Line(this._B, this._C),\r\n                    'AC': new Line(this._A, this._C)\r\n                };\r\n            }\r\n        } else if (values.length === 1) {\r\n            if (values[0].isTriangle === true) {\r\n                return values[0].clone();\r\n            }\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the Triangle class\r\n     */\r\n    clone = (): Triangle => {\r\n        this._A = this._A.clone();\r\n        this._B = this._B.clone();\r\n        this._C = this._C.clone();\r\n\r\n        this._lines = {\r\n            'AB': this._lines.AB.clone(),\r\n            'BC': this._lines.BC.clone(),\r\n            'AC': this._lines.AC.clone()\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Triangle operations and properties\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Generate the Line object for the three segments of the triangle\r\n     */\r\n    private _updateTriangle = () => {\r\n        this._middles = {\r\n            'AB': new Point().middleOf(this._A, this._B),\r\n            'AC': new Point().middleOf(this._A, this._C),\r\n            'BC': new Point().middleOf(this._B, this._C)\r\n        }\r\n\r\n        this._remarquables = this._calculateRemarquableLines();\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the Point class for the given name\r\n     * @param ptName\r\n     */\r\n    private getPointByName = (ptName: string): Point => {\r\n        switch (ptName.toUpperCase()) {\r\n            case 'A':\r\n                return this._A;\r\n            case 'B':\r\n                return this._B;\r\n            case 'C':\r\n                return this._C;\r\n        }\r\n\r\n        // Something went wrong ! Return the first point\r\n        return this._A;\r\n    }\r\n    /**\r\n     * Get the vector for the segment given by name.\r\n     * @param ptName1\r\n     * @param ptName2\r\n     */\r\n    private getSegment = (ptName1: string, ptName2: string): Vector => {\r\n        return new Vector(\r\n            this.getPointByName(ptName1),\r\n            this.getPointByName(ptName2)\r\n        );\r\n    }\r\n\r\n    private _calculateRemarquableLines = (): remarquableLines => {\r\n        let remarquables: remarquableLines = {\r\n            'medians': {\r\n                'A': new Line(this._A, this._middles.BC),\r\n                'B': new Line(this._B, this._middles.AC),\r\n                'C': new Line(this._C, this._middles.AB),\r\n                'intersection': null\r\n            },\r\n            'mediators': {\r\n                'AB': new Line(this._middles.AB, new Vector(this._A, this._B).normal()),\r\n                'AC': new Line(this._middles.AC, new Vector(this._A, this._C).normal()),\r\n                'BC': new Line(this._middles.BC, new Vector(this._B, this._C).normal()),\r\n                'intersection': null\r\n            },\r\n            'heights': {\r\n                'A': new Line(this._A, new Vector(this._B, this._C).normal()),\r\n                'B': new Line(this._B, new Vector(this._A, this._C).normal()),\r\n                'C': new Line(this._C, new Vector(this._A, this._B).normal()),\r\n                'intersection': null\r\n            },\r\n            'bisectors': {\r\n                'A': this._calculateBisectors('A'),\r\n                'B': this._calculateBisectors('B'),\r\n                'C': this._calculateBisectors('C'),\r\n                'intersection': null\r\n            }\r\n        }\r\n\r\n        // As it's a triangle, we assume the lines are intersecting and aren't parallel or superposed.\r\n        remarquables.medians.intersection = remarquables.medians.A.intersection(remarquables.medians.B).point;\r\n        remarquables.mediators.intersection = remarquables.mediators.AB.intersection(remarquables.mediators.BC).point;\r\n        remarquables.heights.intersection = remarquables.heights.A.intersection(remarquables.heights.B).point;\r\n        remarquables.bisectors.intersection = remarquables.bisectors.A.intersection(remarquables.bisectors.B).point;\r\n\r\n        // Everything was calculated for the remarquable lines.\r\n        return remarquables;\r\n    }\r\n\r\n    private _calculateBisectors = (pt: string): Line => {\r\n        let tlines = this.lines, d1, d2;\r\n\r\n        if(pt==='A'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.AC;\r\n        }else if(pt==='B'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.BC;\r\n        }else if(pt==='C'){\r\n            d1 = tlines.BC;\r\n            d2 = tlines.AC;\r\n        }\r\n\r\n        let b1 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm)).reorder(true).simplify()),\r\n            b2 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm).opposed()).reorder(true).simplify());\r\n\r\n        // Must determine which bisectors is in the triangle\r\n        if(pt==='A'){\r\n            return b1.hitSegment(this.B, this.C)?b1:b2;\r\n        }\r\n        if(pt==='B'){\r\n            return b1.hitSegment(this.A, this.C)?b1:b2;\r\n        }\r\n        if(pt==='C'){\r\n            return b1.hitSegment(this.B, this.A)?b1:b2;\r\n        }\r\n\r\n        // Default returns the first bisector\r\n        return b1;\r\n    }\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Numeric} from \"../numeric\";\r\n\r\nexport class Vector {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n\r\n    constructor(...values: any) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n    };\r\n\r\n    get isVector() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get normSquare(): Fraction {\r\n        return this._x.clone().pow(2).add(this._y.clone().pow(2));\r\n    }\r\n\r\n    get norm(): number {\r\n        return Math.sqrt(this.normSquare.value);\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\begin{pmatrix}${this._x.tex} \\\\\\\\\\ ${this._y.tex} \\\\end{pmatrix}`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Vector => {\r\n        // TODO: Must be more strict about what is given and limit to two dimensional vectors.p\r\n        // Maybe more than one value was given...\r\n        // Initialize the vector\r\n        this.zero();\r\n\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        if (values.length === 1) {\r\n            if (values[0].isVector) {\r\n                return values[0].clone()\r\n            } else {\r\n                return this._parseString(values[0])\r\n            }\r\n        }\r\n\r\n        if (values.length >= 2) {\r\n            // Two points are given - skip the third value.\r\n            if (values[0].isPoint && values[1].isPoint) {\r\n                this._x = values[1].x.clone().subtract(values[0].x)\r\n                this._y = values[1].y.clone().subtract(values[0].y)\r\n                return this;\r\n            }\r\n\r\n            // Fractions or a number are give\r\n            if (values[0].isFraction || !isNaN(values[0])) {\r\n                this._x = new Fraction(values[0])\r\n            }\r\n            if (values[1].isFraction || !isNaN(values[1])) {\r\n                this._y = new Fraction(values[1])\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Vector => {\r\n        let V = new Vector();\r\n\r\n        if (this._x !== null) {\r\n            V.x = this._x.clone();\r\n        }\r\n        if (this._y !== null) {\r\n            V.y = this._y.clone();\r\n        }\r\n        return V;\r\n    }\r\n\r\n    reset = (): Vector => {\r\n        this._x = null;\r\n        this._y = null;\r\n        return this;\r\n    }\r\n\r\n    zero = (): Vector => {\r\n        this.reset();\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    one = (): Vector => {\r\n        this._x = new Fraction();\r\n        this._y = new Fraction();\r\n        return this;\r\n    }\r\n\r\n    private _parseString = (value: string): Vector => {\r\n        // Split comma, semi colon or single space.\r\n        let components = value.split(/[,;\\s]/g);\r\n\r\n        // Validate the fraction values.\r\n        this.x = new Fraction(components[0] || null);\r\n        this.y = new Fraction(components[1] || null);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Vector => {\r\n        this._x.opposed();\r\n        this._y.opposed();\r\n        return this;\r\n    }\r\n\r\n    add = (V: Vector): Vector => {\r\n        this._x.add(V.x);\r\n        this._y.add(V.y);\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (V: Vector): Vector => {\r\n        return this.add(V.clone().opposed());\r\n    }\r\n\r\n    scalarProductWithVector = (V: Vector): Fraction => {\r\n        // TODO: Add the scalar factor !!!!\r\n        return this._x.clone().multiply(V.x).add(this._y.clone().multiply(V.y));\r\n    }\r\n\r\n    static scalarProduct = (v1: Vector, v2: Vector): number => {\r\n        // TODO: Transform to fraction with nthroot.\r\n        return  v1.x.value * v2.x.value + v1.y.value * v2.y.value;\r\n    };\r\n\r\n    normal = (): Vector => {\r\n        let x = this.x.clone().opposed(), y = this.y.clone();\r\n        this._x = y;\r\n        this._y = x;\r\n        return this;\r\n    }\r\n\r\n    isNormalTo = (v: Vector): boolean => {\r\n        return this.scalarProductWithVector(v).isZero()\r\n    }\r\n\r\n    multiplyByScalar = (k: any): Vector => {\r\n        let scalar = new Fraction(k);\r\n        this._x.multiply(scalar);\r\n        this._y.multiply(scalar);\r\n        return this;\r\n    }\r\n\r\n    divideByScalar = (k:any): Vector => {\r\n        return this.multiplyByScalar(new Fraction(k).invert());\r\n    }\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    simplify = (): Vector => {\r\n        // Multiply by the lcm of denominators.\r\n        return this.multiplyByScalar(Numeric.lcm(this._x.denominator, this._y.denominator))\r\n            .divideByScalar(Numeric.gcd(this._x.numerator, this._y.numerator));\r\n    }\r\n\r\n    angleWith = (V: Vector, sharp?: Boolean, radian?: Boolean): number => {\r\n        let scalar = this.scalarProductWithVector(V).value,\r\n            toDegree = radian ? 1 : 180 / Math.PI;\r\n        if (sharp) {\r\n            scalar = Math.abs(scalar);\r\n        }\r\n\r\n        return toDegree * Math.acos(scalar / (this.norm * V.norm));\r\n    }\r\n}\r\n","export class Numeric{\r\n    static round(value:number, decimals:number=2):number {\r\n        return Number(Math.round(Number(value+'e'+decimals))+'e-'+decimals);\r\n    }\r\n\r\n    /**\r\n     * Get the list of the nth first prime numbers.\r\n     * @param nb : number of primes to choose from\r\n     */\r\n    static prime(nb?:number):number[]{\r\n        let primes:number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973];\r\n        if(nb === undefined){\r\n            return primes;\r\n        }else{\r\n            return primes.slice(0,Math.max(primes.length,nb));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the list of all dividers of a number.\r\n     * @param value\r\n     */\r\n    static dividers(value:number):number[]{\r\n        let D: number[];\r\n        const maxV = Math.sqrt(Math.abs(value));\r\n\r\n        // Initialize the list of dividers.\r\n        D = [];\r\n\r\n        for(let i=1; i<=maxV; i++){\r\n            if(value%i===0){\r\n                D.push(i);\r\n                D.push(value/i);\r\n            }\r\n        }\r\n\r\n        // Order numbers.\r\n        D.sort(function(a, b){return a-b;});\r\n\r\n        // Make sure the array of value is unique.\r\n        return [...new Set(D)];\r\n    }\r\n    /**\r\n     * Great Common Divisor\r\n     * @param values : number values\r\n     */\r\n    static gcd(...values:number[]):number{\r\n        // Define the gcd for two number\r\n        let gcd2 = function(a:number,b:number):number{\r\n            if(b===0){return a;}\r\n            return gcd2(b, a%b);\r\n        };\r\n\r\n        let g:number = 1,\r\n            i:number = 2;\r\n\r\n        // Nothing is given\r\n        if(values.length===0){return 1;}\r\n        // Only one number is given\r\n        if(values.length===1){\r\n            // The first number is zero\r\n            if(values[0]===0){return 1;}\r\n            // Return the number\r\n            return values[0];\r\n        }\r\n\r\n        // We have at least 2 numbers.\r\n        g = gcd2(values[0],values[1]);\r\n\r\n        // The gcd of the two first value is one ? It's already finished.\r\n        if(g===1){return 1;}\r\n\r\n        // The current gcd isn't one. Continue with all next values.\r\n        for(i=2; i<values.length; i++){\r\n            g = gcd2(g, values[i]);\r\n            // Escape if gcd is already one.\r\n            if(g===1){break;}\r\n        }\r\n\r\n        return Math.abs(g);\r\n    }\r\n\r\n    /**\r\n     * Least Common Multiple\r\n     * @param values: list of numbers\r\n     */\r\n    static lcm(...values:number[]):number{\r\n        return values.reduce(function(a,b){\r\n            return Math.abs(a * b / Numeric.gcd(a, b));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Random boolean with a percent ratio\r\n     * @param percent\r\n     */\r\n    static randomBool(percent:number=0.5):boolean{\r\n        return Math.random()<percent;\r\n    }\r\n\r\n    /**\r\n     * Random integer between two values.\r\n     * @param a (number) : From this value to the second value. If the second is ommited, this value is the max value.\r\n     * @param b (number) : To this value. If this is ommited.\r\n     */\r\n    static randomInt(a:number, b?:number):number{\r\n        if(b===undefined){return Numeric.randomInt(0,a);}\r\n\r\n        return Math.floor(Math.random() * (b - a + 1) + a);\r\n    }\r\n\r\n    /**\r\n     * Random integer between -max and max value.\r\n     * @param max (number) : determine the limits.\r\n     * @param zero (bool) : determine if zero is allowed or not.\r\n     */\r\n    static randomIntSym(max:number, zero?:boolean):number{\r\n        if(zero===false){\r\n            return Numeric.randomBool()?this.randomInt(1,max):-this.randomInt(1,max);\r\n        }else{\r\n            return Numeric.randomInt(-max, max);\r\n        }\r\n    }\r\n\r\n    static randomArray(arr: any[], number?:number):any[]{\r\n        if(number===undefined){number = 1}\r\n\r\n        // Return a clone array\r\n        if(arr.length<=0){return Object.values(arr)}\r\n\r\n        // Randomize the array and return the n first elements.\r\n        return this.shuffleArray(arr).slice(0,number);\r\n    }\r\n\r\n    static randomItem(arr: any[]): any{\r\n        if(arr.length===0){return ''}\r\n        return this.randomArray(arr, 1)[0]\r\n    }\r\n\r\n    static shuffleArray(arr: any[]): any[] {\r\n        // The Fisher-Yates algorithm\r\n        let shuffleArray = Object.values(arr)\r\n        for (let i = shuffleArray.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            const temp = shuffleArray[i];\r\n            shuffleArray[i] = shuffleArray[j];\r\n            shuffleArray[j] = temp;\r\n        }\r\n\r\n        return shuffleArray;\r\n    }\r\n}","type tokenType = {\r\n    [key: string]: {\r\n        precedence: number,\r\n        associative: string\r\n    }\r\n}\r\n\r\nexport class Shutingyard {\r\n    private _rpn: { token: string, tokenType: string }[] = [];\r\n    private _mode: 'polynom' | 'set';\r\n    private _tokenConfig: tokenType;\r\n    private _uniformize: boolean;\r\n\r\n    constructor(mode?: 'polynom' | 'set') {\r\n        this._mode = typeof mode === 'undefined' ? 'polynom' : mode;\r\n        this.tokenConfigInitialization()\r\n    }\r\n\r\n    /**\r\n     * Determin if the token is a defined operation\r\n     * Defined operations: + - * / ^ sin cos tan\r\n     * @param token\r\n     */\r\n    isOperation(token: string): boolean {\r\n        if (token[0].match(/[+\\-*/^]/g)) {\r\n            return true;\r\n        }\r\n        //\r\n        // if (token.match(/^sin|cos|tan/g)) {\r\n        //     return true;\r\n        // }\r\n\r\n        return false;\r\n    }\r\n\r\n    tokenConfigInitialization(): tokenType {\r\n        if (this._mode === 'set') {\r\n            this._tokenConfig = {\r\n                '&': {precedence: 3, associative: 'left'},\r\n                '|': {precedence: 3, associative: 'left'},\r\n                '!': {precedence: 4, associative: 'right'},\r\n                '-': {precedence: 2, associative: 'left'}\r\n            }\r\n            this._uniformize = false;\r\n        } else {\r\n            this._tokenConfig = {\r\n                '^': {precedence: 4, associative: 'right'},\r\n                '*': {precedence: 3, associative: 'left'},\r\n                '/': {precedence: 3, associative: 'left'},\r\n                '+': {precedence: 2, associative: 'left'},\r\n                '-': {precedence: 2, associative: 'left'},\r\n                '%': {precedence: 3, associative: 'right'},\r\n                'sin': {precedence: 4, associative: 'right'},\r\n                'cos': {precedence: 4, associative: 'right'},\r\n                'tab': {precedence: 4, associative: 'right'},\r\n            }\r\n            this._uniformize = true\r\n        }\r\n        return this._tokenConfig\r\n    }\r\n\r\n    /**\r\n     * Get the next token to analyse.\r\n     * @param expr (string) Expression to analyse\r\n     * @param start (number) CUrrent position in the expr string.\r\n     */\r\n    NextToken2(expr: string, start: number): [string, number, string] {\r\n        let token: string, tokenType: string;\r\n        token = '';\r\n        tokenType = '';\r\n        // Case of parenthesis or comma (generic items)\r\n        if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        } else{\r\n            // Order token keys by token characters length (descending)\r\n            const keys = Object.keys(this._tokenConfig).sort((a,b)=>b.length-a.length)\r\n\r\n            for(let key of keys){\r\n                if(expr.substr(start, key.length) === key){\r\n                    token += key;\r\n                    tokenType = 'operation'\r\n                    break\r\n                }\r\n            }\r\n\r\n            if(token===''){\r\n                // No function found ! Might be a coefficient !\r\n                if( expr[start].match(/[0-9]/) ) {\r\n                    token = expr.substr(start).match(/^([0-9.,/]+)/)[0]\r\n                    tokenType = 'coefficient'\r\n                }else if (expr[start].match(/[a-zA-Z]/)) {\r\n                    token = expr.substr(start).match(/^([a-zA-Z])/)[0]\r\n                    tokenType = 'variable'\r\n                }else{\r\n                    console.log('Unidentified token', expr[start])\r\n                    token = expr[start]\r\n                    tokenType = 'monom'\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n\r\n        // console.log(token, tokenType)\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    NextToken(expr: string, start: number): [string, number, string] {\r\n        let tokenMatch: string[], token: string, tokenType: string;\r\n\r\n        this.NextToken2(expr, start)\r\n        // Detect a fraction monoms or return empty array\r\n        tokenMatch = (expr.substr(start).match(/^[0-9/a-zA-Z^]+/g)) || [];\r\n\r\n        if (expr.substr(start, start + 3).match(/^(sin|cos|tan)/g)) {\r\n            token = expr.substr(start, 3)\r\n            tokenType = 'function'\r\n        } else if (tokenMatch.length > 0) {\r\n            token = tokenMatch[0];\r\n            tokenType = 'monom';\r\n        }\r\n        // It's an operation !\r\n        else if (expr[start].match(/[+\\-*/^]/g)) {\r\n            token = expr[start];\r\n            tokenType = 'operation';\r\n        } else if (expr[start].match(/[&|!]/g)) {\r\n            token = expr[start];\r\n            tokenType = 'operation';\r\n        }\r\n        // It's an opening parenthese\r\n        else if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        }\r\n        // It's a monom.\r\n        else {\r\n            // TODO: Actually, negative exposant aren't supported.\r\n            // token = (expr.substr(start).match(/^[\\da-z\\^]+/g)[0])||'';\r\n            token = tokenMatch[0];\r\n            tokenType = 'monom';\r\n\r\n            if (token === '') {\r\n                token = expr[start];\r\n                tokenType = 'monom';\r\n                console.log('SHUTING YARD - NEXT TOKEN: error at ', start);\r\n            }\r\n        }\r\n\r\n        // console.log(token, start + token.length, tokenType);\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    /**\r\n     * Sanitize an expression by adding missing common operation (multiplication between parentheseses)\r\n     * @param expr\r\n     * @constructor\r\n     */\r\n    Uniformizer(expr: string): string {\r\n        if(!this._uniformize){return expr}\r\n        let expr2;\r\n        // Replace missing multiplication between two parenthese\r\n        expr2 = expr.replace(/\\)\\(/g, ')*(');\r\n\r\n        // Replace missing multiplication between number or setLetter and parenthese.\r\n\r\n        // 3x(x-4) => 3x*(x-4)\r\n        expr2 = expr2.replace(/([\\da-zA-Z])(\\()/g, \"$1*$2\");\r\n\r\n        // (x-4)3x => (x-4)*3x\r\n        expr2 = expr2.replace(/(\\))([\\da-zA-Z])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between number and letters.\r\n        expr2 = expr2.replace(/([0-9])([a-zA-Z])/g, \"$1*$2\");\r\n        expr2 = expr2.replace(/([a-zA-Z])([0-9])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between letters ?\r\n        // TODO: More robust solution to handle all letters ?\r\n        expr2 = expr2.replace(/([xyz])([xyz])/g, \"$1*$2\");\r\n\r\n\r\n        // Restore operation auto formating (prevent adding the mutliplcation star\r\n        let fnToken = ['sin', 'cos', 'tan']\r\n        for (let token of fnToken) {\r\n            expr2 = expr2.replace(new RegExp(token + '\\\\*', 'g'), token);\r\n        }\r\n\r\n        return expr2;\r\n    }\r\n\r\n    /**\r\n     * Parse an expression using the shutting yard tree algorithms\r\n     * @param expr (string) Expression to analyse\r\n     * Returns a RPN list of items.\r\n     */\r\n    parse(expr: string, operators?: string[]): Shutingyard {\r\n        let outQueue: {token:string, tokenType: string}[] = [],    // Output queue\r\n            opStack: {token:string, tokenType: string}[] = [],     // Operation queue\r\n            token: string = '',\r\n            tokenPos: number = 0,\r\n            tokenType: string = '',\r\n            previousOpStatckLength = 0\r\n\r\n        expr = this.Uniformizer(expr);\r\n\r\n        let securityLoopLvl1 = 50,\r\n            securityLoopLvl2_default = 50,\r\n            securityLoopLvl2;\r\n\r\n        while (tokenPos < expr.length) {\r\n            securityLoopLvl1--;\r\n            if (securityLoopLvl1 === 0) {\r\n                console.log('SECURITY LEVEL 1 EXIT');\r\n                break;\r\n            }\r\n\r\n            // Get the next token and the corresponding new (ending) position\r\n            [token, tokenPos, tokenType] = this.NextToken2(expr, tokenPos);\r\n\r\n            switch (tokenType) {\r\n                case 'monom':\r\n                case 'coefficient':\r\n                case 'variable':\r\n                    outQueue.push({\r\n                        token,\r\n                        tokenType\r\n                    });\r\n                    // if(previousOpStatckLength == opStack.length && outQueue.length>=2){\r\n                    //     console.log('opStatckLength', outQueue, opStack.length)\r\n                    //     outQueue.push('*')\r\n                    // }\r\n                    break;\r\n                case 'operation':\r\n                    previousOpStatckLength = opStack.length;\r\n                    //If the token is an operator, o1, then:\r\n                    if (opStack.length > 0) {\r\n                        let opTop = opStack[opStack.length - 1];\r\n\r\n\r\n                        securityLoopLvl2 = +securityLoopLvl2_default;\r\n\r\n                        //while there is an operator token o2, at the top of the operator stack and\r\n                        while (opTop.token in this._tokenConfig && (\r\n                                //either o1 is left-associative and its precedence is less than or equal to that of o2,\r\n                                (this._tokenConfig[token].associative === 'left' && this._tokenConfig[token].precedence <= this._tokenConfig[opTop.token].precedence)\r\n                                ||\r\n                                //or o1 is right associative, and has precedence less than that of o2,\r\n                                (this._tokenConfig[token].associative === 'right' && this._tokenConfig[token].precedence < this._tokenConfig[opTop.token].precedence)\r\n                            )\r\n                            ) {\r\n\r\n                            /* Security exit ! */\r\n                            securityLoopLvl2--;\r\n                            if (securityLoopLvl2 === 0) {\r\n                                console.log('SECURITY LEVEL 2 OPERATION EXIT');\r\n                                break;\r\n                            }\r\n\r\n                            // Add the operation to the queue\r\n                            outQueue.push((opStack.pop()) || {token: '', tokenType: 'operation'});\r\n\r\n                            // Get the next operation on top of the Stack.\r\n                            if(opStack.length===0){break;}\r\n                            opTop = opStack[opStack.length - 1];\r\n                        }\r\n                    }\r\n                    //at the end of iteration push o1 onto the operator stack\r\n                    opStack.push({token,tokenType});\r\n                    break;\r\n                case 'function-argument':\r\n                    // TODO: check if the opStack exist.\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 0) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 FUNCTION ARGUMENT EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n                    break;\r\n                case '(':\r\n                    opStack.push({token,tokenType});\r\n                    // Add an empty value if next element is negative.\r\n                    if (expr[tokenPos] === '-') {\r\n                        outQueue.push({token: '0', tokenType: 'coefficient'});\r\n                    }\r\n                    break;\r\n                case ')':\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    //Until the token at the top of the stack is a left parenthesis, pop operators off the stack onto the output queue.\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 1 /*Maybe zero !? */) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 CLOSING PARENTHESE EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n\r\n                    //Pop the left parenthesis from the stack, but not onto the output queue.\r\n                    opStack.pop();\r\n                    break;\r\n                case 'function':\r\n                    opStack.push({token, tokenType});\r\n                    break;\r\n                default:\r\n                    // In theory, everything should be handled.\r\n                    console.log(`SHUTING YARD: ${tokenType} : ${token} `);\r\n            }\r\n\r\n            // Output\r\n            // console.log(outQueue.concat(opStack.reverse()).join(\" \"));\r\n        }\r\n\r\n        // console.log(outQueue.concat(opStack.reverse()));\r\n        this._rpn = outQueue.concat(opStack.reverse());\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    // Getter\r\n    get rpn() {\r\n        // console.log(this._rpn)\r\n        return this._rpn;\r\n    }\r\n\r\n\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import {Fraction} from \"./maths/coefficients/fraction\";\r\nimport {Numeric} from \"./maths/numeric\";\r\nimport {Nthroot} from \"./maths/coefficients/nthroot\";\r\nimport {Monom} from \"./maths/algebra/monom\";\r\nimport {Polynom} from \"./maths/algebra/polynom\";\r\nimport {Equation} from \"./maths/algebra/equation\";\r\nimport {LinearSystem} from \"./maths/algebra/linearSystem\";\r\nimport {Rational} from \"./maths/algebra/rational\";\r\nimport {Vector} from \"./maths/geometry/vector\";\r\nimport {Line} from \"./maths/geometry/line\";\r\nimport {Point} from \"./maths/geometry/point\";\r\nimport {Triangle} from \"./maths/geometry/triangle\";\r\nimport {Shutingyard} from \"./maths/shutingyard\";\r\nimport {Logicalset} from \"./maths/algebra/logicalset\";\r\n\r\n// Expose as global\r\n(<any>window).Pi = {\r\n    ShutingYard: Shutingyard,\r\n    Numeric: Numeric,\r\n    Fraction: Fraction,\r\n    Root: Nthroot,\r\n    Monom: Monom,\r\n    Polynom: Polynom,\r\n    Equation: Equation,\r\n    LinearSystem: LinearSystem,\r\n    Rational: Rational,\r\n    Logicalset: Logicalset,\r\n    Geometry: {\r\n        Vector: Vector,\r\n        Point: Point,\r\n        Line: Line,\r\n        Triangle: Triangle\r\n    }\r\n};\r\n\r\nexport var Pi = {\r\n    ShutingYard: Shutingyard,\r\n    Numeric: Numeric,\r\n    Fraction: Fraction,\r\n    Root: Nthroot,\r\n    Monom: Monom,\r\n    Polynom: Polynom,\r\n    Equation: Equation,\r\n    LinearSystem: LinearSystem,\r\n    Rational: Rational,\r\n    Logicalset: Logicalset,\r\n    Geometry: {\r\n        Vector: Vector,\r\n        Point: Point,\r\n        Line: Line,\r\n        Triangle: Triangle\r\n    }\r\n};\r\n"],"names":["Equation","_left","_right","_sign","_polynom","_solutions","_varnothing","_real","constructor","equations","this","Polynom","zero","length","isEquation","clone","parse","left","isPolynom","right","includes","join","undefined","solve","tex","signAsTex","raw","Set","variables","concat","value","_formatSign","equationString","pStr","strSign","_findSign","split","create","console","log","signStr","_reverseSign","replace","sign","_randomizeDefaults","degree","randomize","opts","reorder","allLeft","subtract","mMove","m","monoms","simplify","multiply","Numeric","lcm","getDenominators","divide","gcd","getNumerators","isolate","letter","isMultiVariable","cMove","hasLetter","add","opposed","coefficient","F","Fraction","isZero","invert","Math","max","letters","_solveDegree1","_solveDegree2","_solveDegree3plus","isGreater","indexOf","isStrictEqual","isAlsoEqual","m1","monomByDegree","m0","v","display","s","delta","nthDelta","realX1","realX2","sX1","sX2","aF","bF","cF","denominator","a","b","sqrt","toFixed","Nthroot","reduce","hasRadical","dfrac","LinearSystem","_resolutionSteps","_equations","_letters","equationStrings","V","E","sort","equStr","LS","equArray","equ","L","monomByLetter","push","repeat","isReal","isVarnothing","map","_findLetters","setCoefficient","coefficients","i","slice","toString","setLetters","generate","solutions","solutionsF","_generateOneEquation","coeff","leftValue","equString","randomIntSym","_checkIfLinerCombination","_linearReduction","eq1","eq2","c1","c2","mergeEquations","factor1","factor2","eq1multiplied","eq2multiplied","_solveOneLetter","LE","reducedEquations","str","_rawString","_rpn","Shutingyard","rpn","evaluate","tokenSets","reference","varStack","referenceSet","key","token","tokenType","second","pop","first","filter","x","has","vennAB","A","B","vennABC","C","Monom","_coefficient","_literal","isLitteralSquare","inputStr","matchAll","clean","Object","keys","numerator","dividers","abs","litterals","literal","_getLitteralDividers","monomDividers","N","M","one","arr","tmpList","d","litt","item","currentLetter","literalStr","trim","k","setLetter","random","withFraction","allowZero","randomInt","isSameAs","multiplyByNumber","pow","nb","root","p","isSquare","compare","isEqual","M1","M2","K","isOne","Number","isSafeInteger","values","t","n","r","tmpValues","derivative","dM","primitive","coeffN","coeffD","min","areSameAs","areEquals","_monoms","_factors","_texString","polynomString","factorize","f","factors","genDisplay","output","forceSign","wrapParentheses","P","isNaN","empty","shutingYardToReducedPolynom","test","fractions","m2","tempPolynom","stack","previousToken","element","unit","factorable","allowNullMonom","numberOfMonoms","config","rndSimple","splice","rndFactorable","factorUnit","isMonom","multiplyByPolynom","isFraction","multiplyByFraction","multiplyByMonom","multiplyByInteger","xmultiply","euclidian","quotient","reminder","maxMP","degreeP","newM","MaxIteration","divideByFraction","divideByInteger","nbF","cP1","cP2","isOpposedAt","isFactorized","match","e","polynomStringNormalized","replaceAll","polynomStringReduced","substr","polyFactors","isDeveloped","j","S","replaceBy","resultPolynom","forEach","monom","dP","integrate","valuesA","valuesB","factorize_OLD","maxValue","nbFactorsFound","commonMonom","commonPolynom","Q","securityLoop","m1d","m2d","result","dividerPolynom","_factorize2ndDegree","P1","P2","c","x1","x2","factor","numberOfVars","isPositive","xyzPolynom","xFactors","literalSqrt","_factorizeByGroups","getZeroes","zeroes","zeroesAsTex","D","z","frac","monomsByDegree","Ms","denominators","numerators","lcmDenominator","gcdDenominator","lcmNumerator","gcdNumerator","makeItComplicate","complexity","mDegree","factorizePartial","texString","mMain","mCheck","mFactor","pFactor","g","minify","canDivide","evalValue","_numerator","_denominator","texFactors","domain","amplify","NumeratorEuclidien","DenominatorEuclidien","R","limits","Infinity","denominatorOrPeriodic","NaN","floor","infinite","invalid","lesser","than","leq","greater","geq","isDifferent","isOpposed","isInverted","isNegative","isInfinity","isFinite","isReduced","_radical","_nth","_isValid","radical","nthroot","Line","_a","_b","_c","_OA","_d","_n","_exists","canonical","equation","mxh","slope","OA","height","parametric","Point","pmatrix","y","Vector","parseByCoefficient","isPoint","isVector","parseByPointAndVector","isLine","elem","delete","size","normal","isParellelTo","line","simplifyDirection","intersection","Pt","isParallel","isSame","point","hasIntersection","distanceTo","pt","d2","normSquare","fraction","hitSegment","iPt","canonicalAsFloatCoefficient","decimals","_x","_y","_exist","pts","origin","middleOf","texValues","numberOfDigits","_A","_B","_C","_lines","_middles","_remarquables","getSegment","AB","isNormalTo","BC","AC","intersect","isTriangle","_updateTriangle","_calculateRemarquableLines","getPointByName","ptName","toUpperCase","ptName1","ptName2","remarquables","_calculateBisectors","medians","mediators","heights","bisectors","d1","tlines","lines","b1","norm","b2","_parseString","reset","components","scalarProductWithVector","v1","v2","multiplyByScalar","scalar","divideByScalar","angleWith","sharp","radian","toDegree","PI","acos","round","primes","maxV","gcd2","percent","randomBool","number","shuffleArray","randomArray","temp","_mode","_tokenConfig","_uniformize","mode","tokenConfigInitialization","isOperation","precedence","associative","NextToken2","expr","start","NextToken","tokenMatch","Uniformizer","expr2","fnToken","RegExp","operators","outQueue","opStack","tokenPos","previousOpStatckLength","securityLoopLvl2","securityLoopLvl1","opTop","reverse","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","window","Pi","ShutingYard","Root","Rational","Logicalset","Geometry","Triangle"],"sourceRoot":""}