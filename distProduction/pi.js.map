{"version":3,"file":"pi.js","mappings":"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","sources":["webpack://pimath/./src/maths/algebra/equation.ts","webpack://pimath/./src/maths/algebra/linearSystem.ts","webpack://pimath/./src/maths/algebra/logicalset.ts","webpack://pimath/./src/maths/algebra/monom.ts","webpack://pimath/./src/maths/algebra/polynom.ts","webpack://pimath/./src/maths/algebra/rational.ts","webpack://pimath/./src/maths/coefficients/fraction.ts","webpack://pimath/./src/maths/coefficients/nthroot.ts","webpack://pimath/./src/maths/geometry/circle.ts","webpack://pimath/./src/maths/geometry/line.ts","webpack://pimath/./src/maths/geometry/point.ts","webpack://pimath/./src/maths/geometry/triangle.ts","webpack://pimath/./src/maths/geometry/vector.ts","webpack://pimath/./src/maths/numeric.ts","webpack://pimath/./src/maths/random/random.ts","webpack://pimath/./src/maths/random/randomCore.ts","webpack://pimath/./src/maths/random/rndHelpers.ts","webpack://pimath/./src/maths/random/rndMonom.ts","webpack://pimath/./src/maths/random/rndPolynom.ts","webpack://pimath/./src/maths/shutingyard.ts","webpack://pimath/webpack/bootstrap","webpack://pimath/./src/main.ts"],"sourcesContent":["/**\r\n * Equation is a class to manage equations...\r\n */\r\nimport Polynom from \"./polynom\";\r\nimport Monom from \"./monom\";\r\nimport Numeric from \"../numeric\";\r\nimport Fraction from \"../coefficients/fraction\";\r\nimport Nthroot from \"../coefficients/nthroot\";\r\n\r\nexport default class Equation {\r\n    private _left: Polynom;  // Left part of the equation\r\n    private _right: Polynom; // Right part of the equation\r\n    private _sign: string;   // Signe of the equation, by default =\r\n\r\n    private _polynom: Polynom;  // Used to solve the equation // TODO: remove the private value ?\r\n    private _solutions: string[];    // Array of the solutions\r\n\r\n    // Undetermined solutions.\r\n    private _varnothing: string = '\\\\varnothing';\r\n    private _real: string = '\\\\mathbb{R}';\r\n\r\n    /**\r\n     * Create an Equation using two polynoms.\r\n     * @param equations\r\n     */\r\n    constructor(...equations: any) {\r\n        // Default equation\r\n        this._left = new Polynom().zero();\r\n        this._right = new Polynom().zero();\r\n        this._sign = '=';\r\n\r\n        if (equations.length === 1) {\r\n            if (equations[0].isEquation === true) {\r\n                return equations[0].clone();\r\n            } else {\r\n                this.parse(equations[0]);\r\n            }\r\n        } else if (equations.length === 2) {\r\n            this.left = equations[0].isPolynom ? equations[0].clone() : new Polynom(equations[0]);\r\n            this.right = equations[1].isPolynom ? equations[1].clone() : new Polynom(equations[1]);\r\n        } else {\r\n            // Return default empty equation\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isEquation() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    // TODO: Check the getters and setters.\r\n    get solutions(): string[] {\r\n        return this._solutions;\r\n    }\r\n\r\n    get solution(): string {\r\n        if (this._solutions.length === 1\r\n            &&\r\n            (\r\n                this._solutions[0] === this._real\r\n                || this._solutions[0] === this._varnothing\r\n                || this._solutions[0].includes('\\\\left')\r\n            )\r\n        ) {\r\n            return `S = ${this._solutions[0]}`;\r\n        }\r\n        return `S = \\\\left{ ${this._solutions.join(';')} \\\\right}`;\r\n    }\r\n\r\n    get isReal(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0] === this._real;\r\n    }\r\n\r\n    get isVarnothing(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0] === this._varnothing;\r\n    }\r\n\r\n    get signAsTex(): string {\r\n        if (this._sign === '>=' || this._sign === '=>' || this._sign === 'geq') {\r\n            return '\\\\geq';\r\n        }\r\n        if (this._sign === '<=' || this._sign === '=<' || this._sign === 'leq') {\r\n            return '\\\\leq';\r\n        }\r\n        return this._sign;\r\n    }\r\n\r\n    get tex(): string {\r\n        return `${this._left.tex}${this.signAsTex}${this._right.tex}`;\r\n    }\r\n\r\n    get raw(): string {\r\n        return `${this._left.raw}${this.signAsTex}${this._right.raw}`;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        return [...new Set(this._right.variables.concat(this._left.variables))];\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    get left(): Polynom {\r\n        return this._left;\r\n    }\r\n\r\n    set left(value: Polynom) {\r\n        this._left = value;\r\n    }\r\n\r\n    get right(): Polynom {\r\n        return this._right;\r\n    }\r\n\r\n    set right(value: Polynom) {\r\n        this._right = value;\r\n    }\r\n\r\n    get sign(): string {\r\n        return this._sign;\r\n    }\r\n\r\n    set sign(value: string) {\r\n        // Set the sign value as formatted.\r\n        this._sign = this._formatSign(value);\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (equationString: string): Equation => {\r\n        let pStr: string[], strSign: string | false;\r\n        // Find the string separator\r\n        strSign = this._findSign(equationString);\r\n\r\n        if (strSign === false) {\r\n            console.log('The equation is not valid (no sign found)');\r\n            return;\r\n        }\r\n\r\n        // The StrSign is found\r\n        pStr = equationString.split(strSign);\r\n\r\n        return this.create(new Polynom(pStr[0]), new Polynom(pStr[1]), this._formatSign(strSign));\r\n    };\r\n\r\n    private _findSign = (equationString: string): string | false => {\r\n        let strSign: string = '';\r\n\r\n        if (equationString.includes('geq')) {\r\n            return (equationString.includes('\\\\geq')) ? '\\\\geq' : 'geq';\r\n        } else if (equationString.includes('leq')) {\r\n            return (equationString.includes('\\\\leq')) ? '\\\\leq' : 'leq';\r\n        } else if (equationString.includes('>=')) {\r\n            return '>=';\r\n        } else if (equationString.includes('=>')) {\r\n            return '=>';\r\n        } else if (equationString.includes('>')) {\r\n            return '>';\r\n        } else if (equationString.includes('<=')) {\r\n            return '<=';\r\n        } else if (equationString.includes('=<')) {\r\n            return '=<';\r\n        } else if (equationString.includes('<')) {\r\n            return '<';\r\n        } else if (equationString.includes('=')) {\r\n            return '='\r\n        }\r\n        if (strSign === '') {\r\n            console.log('Equation: parse string : sign not found');\r\n            return false;\r\n        }\r\n    };\r\n\r\n    private _formatSign = (signStr: string): string => {\r\n        if (signStr === undefined) {\r\n            return '=';\r\n        }\r\n\r\n        if (signStr.includes('geq')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>=')) {\r\n            return '>=';\r\n        } else if (signStr.includes('=>')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>')) {\r\n            return '>';\r\n        } else if (signStr.includes('leq')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<=')) {\r\n            return '<=';\r\n        } else if (signStr.includes('=<')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<')) {\r\n            return '<';\r\n        } else {\r\n            return '='\r\n        }\r\n    };\r\n\r\n    private _reverseSign = (): Equation => {\r\n        if (this._sign === '=') {\r\n            return this;\r\n        }\r\n\r\n        if (this._sign.includes('<')) {\r\n            this._sign.replace('<', '>');\r\n            return this;\r\n        }\r\n        if (this._sign.includes('>')) {\r\n            this._sign.replace('>', '<');\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    create = (left: Polynom, right: Polynom, sign?: string): Equation => {\r\n        this._left = left;\r\n        this._right = right;\r\n        this._sign = this._formatSign(sign);\r\n        return this;\r\n    };\r\n\r\n    clone = (): Equation => {\r\n        return new Equation().create(this._left.clone(), this._right.clone(), this._sign + '');\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n    // -----------------------------------------------\r\n    private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n        degree: 2\r\n    };\r\n    get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n        return this._randomizeDefaults;\r\n    }\r\n\r\n    set randomizeDefaults(value) {\r\n        this._randomizeDefaults = value;\r\n    }\r\n\r\n    randomize = (opts?: {}, sign?: string): Equation => {\r\n        // TODO: Generate equations randomly, using config.\r\n        return new Equation().create(new Polynom(), new Polynom(), sign);\r\n    };\r\n\r\n\r\n    // -----------------------------------------------\r\n    // Equations operations\r\n    // -----------------------------------------------\r\n    /**\r\n     * Reorder will move all monoms containing a letter on the left, all the other on the right.\r\n     */\r\n    moveLeft = (): Equation => {\r\n        this._left = this._left.clone().subtract(this._right)\r\n        this._right.zero()\r\n        return this;\r\n    }\r\n    reorder = (allLeft?: boolean): Equation => {\r\n        // Move all monoms of degree greater than 0 to the left.\r\n        // and all zero degree monoms to the right.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n\r\n        if (allLeft) {\r\n            return this.moveLeft()\r\n        }\r\n        let mMove: Monom;\r\n        for (let m of this._left.monoms) {\r\n            if (m.degree() === 0) {\r\n                mMove = m.clone();\r\n                this._left.subtract(mMove);\r\n                this._right.subtract(mMove);\r\n            }\r\n        }\r\n\r\n        // Reorder the left and right polynoms\r\n        this._left.reorder();\r\n        this._right.reorder();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiply by the lcm denominator and divide by the gcm numerators.\r\n     */\r\n    simplify = (): Equation => {\r\n        this.multiply(Numeric.lcm(...this._left.getDenominators(),...this._right.getDenominators()));\r\n        this.divide(Numeric.gcd(...this._left.getNumerators(),...this._right.getNumerators()));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Reorder the polynom to have only one letter on the left, the rest on the right.\r\n     * @param letter\r\n     */\r\n    isolate = (letter?: string): Equation | false => {\r\n        // Determine if we can isolate the variables.\r\n\r\n        // Both part of the equations must be of the first degree.\r\n        //TODO: handle equations of degree two or more ?\r\n        if (this.degree(letter) !== 1) {\r\n            return false;\r\n        }\r\n\r\n        // Modify the equation to isolate the asked variable.\r\n        // TODO: must handle equations like 3xy+5y=4 => y = 4/(3x-5)\r\n        if (this.isMultiVariable()) {\r\n            return false;\r\n        }\r\n\r\n        // Isolate the letter.\r\n        let mMove: Monom, cMove: Fraction;\r\n        // Start by moving everything to the left.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n        for (let m of this._left.monoms) {\r\n            if (!m.hasLetter(letter)) {\r\n                mMove = m.clone();\r\n                this._left.add(mMove.clone().opposed());\r\n                this._right.add(mMove.clone().opposed());\r\n            }\r\n        }\r\n\r\n        // In theory, we should have only one item on the left.\r\n        if (this._left.length !== 1) {\r\n            return false;\r\n        }\r\n        cMove = this._left.monoms[0].coefficient.clone();\r\n        this._left.divide(cMove);\r\n        this._right.divide(cMove);\r\n        return this;\r\n    };\r\n\r\n    replaceBy = (letter: string, P: Polynom): Equation => {\r\n        this._left.replaceBy(letter, P)\r\n        this._right.replaceBy(letter, P)\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiple an equation by a fraction value.\r\n     * @param value\r\n     */\r\n    multiply = (value: any): Equation => {\r\n\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        // Multiply each part of the equation by the fraction\r\n        this._left.multiply(F);\r\n        this._right.multiply(F);\r\n\r\n        // The sign of the inequation must be changed.\r\n        if (this._sign !== '=' && F.sign() === -1) {\r\n            this._reverseSign();\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    divide = (value: any): Equation => {\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        if(F.isZero()){\r\n            return this;\r\n        }else {\r\n            return this.multiply(F.invert());\r\n        }\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations helpers\r\n    // -----------------------------------------------\r\n\r\n    /**\r\n     * Get the degree of the equation\r\n     * @param letter\r\n     */\r\n    degree = (letter?: string): number => {\r\n        return Math.max(this._left.degree(letter), this._right.degree(letter));\r\n    };\r\n\r\n    /**\r\n     * Determine if the equation contains more than one letter/variable.\r\n     */\r\n    isMultiVariable = (): boolean => {\r\n        return this._left.isMultiVariable || this._right.isMultiVariable;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        // @ts-ignore\r\n        return [...new Set([...this._left.letters(), ...this._right.letters()])];\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations solving algorithms\r\n    // -----------------------------------------------\r\n    solve = (letter?: string): Equation => {\r\n        // Initialise the variables:\r\n        this._solutions = [];\r\n\r\n        // TODO: this._polynom could be removed.\r\n        // TODO: consolidate solving equations (inequations vs equations)\r\n        this._polynom = this._left.clone().subtract(this._right);\r\n\r\n        switch (this._polynom.degree(letter)) {\r\n            case 0:\r\n            case 1:\r\n                this._solveDegree1(letter);\r\n                break;\r\n            case 2:\r\n                this._solveDegree2(letter);\r\n                break;\r\n            default:\r\n                this._solveDegree3plus(letter);\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    private isGreater = (): boolean => {\r\n        if (this._sign.indexOf('>') !== -1) {\r\n            return true;\r\n        }\r\n        return this._sign.indexOf('geq') !== -1;\r\n\r\n    };\r\n    private isStrictEqual = (): boolean => {\r\n        return this._sign === '=';\r\n    };\r\n    private isAlsoEqual = (): boolean => {\r\n        if (this._sign.indexOf('=') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('geq') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('leq') !== -1) {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    private _solveDegree1 = (letter?: string): string[] => {\r\n        const m1 = this._polynom.monomByDegree(1, letter).coefficient,\r\n            m0 = this._polynom.monomByDegree(0, letter).coefficient,\r\n            v = m0.clone().opposed().divide(m1).display;\r\n        let s: string;\r\n\r\n        if (this.isStrictEqual()) {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0) {\r\n                    this._solutions = [this._real];\r\n                } else {\r\n                    this._solutions = [this._varnothing];\r\n                }\r\n            } else {\r\n                this._solutions = [v];\r\n            }\r\n        } else {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0 && this.isAlsoEqual()) {\r\n                    s = '\\\\mathbb{R}';\r\n                } else {\r\n                    if (m0.value > 0) {\r\n                        s = this.isGreater() ? this._real : this._varnothing;\r\n                    } else {\r\n                        s = !this.isGreater() ? this._real : this._varnothing;\r\n                    }\r\n                }\r\n            } else {\r\n                // Must handle the case if the m1 monom is negative.\r\n                if ((this.isGreater() && m1.sign() === 1) || (!this.isGreater() && m1.sign() === -1)) {\r\n                    s = `\\\\left${this.isAlsoEqual() ? '\\\\[' : '\\\\]'}${v};+\\\\infty\\\\right\\\\[`;\r\n                } else {\r\n                    s = `\\\\left\\\\]-\\\\infty;${v} \\\\right\\\\${this.isAlsoEqual() ? '\\\\]' : '\\\\['}`;\r\n                }\r\n            }\r\n            this._solutions = [s];\r\n        }\r\n\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree2 = (letter?: string): string[] => {\r\n        let aF = this._polynom.monomByDegree(2, letter).coefficient,\r\n            bF = this._polynom.monomByDegree(1, letter).coefficient,\r\n            cF = this._polynom.monomByDegree(0, letter).coefficient,\r\n            delta: number, nthDelta: Nthroot,\r\n            lcm = Numeric.lcm(aF.denominator, bF.denominator, cF.denominator),\r\n            a = aF.multiply(lcm).value,\r\n            b = bF.multiply(lcm).value,\r\n            c = cF.multiply(lcm).value,\r\n            realX1: number, realX2: number,\r\n            sX1: string, sX2: string;\r\n\r\n        delta = b * b - 4 * a * c;\r\n\r\n        if (delta > 0) {\r\n            realX1 = (-b - Math.sqrt(delta)) / (2 * a);\r\n            realX2 = (-b + Math.sqrt(delta)) / (2 * a);\r\n\r\n            if(delta>1.0e5){\r\n                // The delta is too big to be parsed !\r\n                this._solutions = [\r\n                    ((-b - Math.sqrt(delta))/(2 * a)).toFixed(5),\r\n                    ((-b + Math.sqrt(delta))/(2 * a)).toFixed(5)\r\n                ]\r\n            }else {\r\n                nthDelta = new Nthroot().parse(delta).reduce();\r\n                if (nthDelta.hasRadical()) {\r\n                    // -b +- coeff\\sqrt{radical}\r\n                    // -------------------------\r\n                    //           2a\r\n                    let gcd = Numeric.gcd(b, 2 * a, nthDelta.coefficient);\r\n                    nthDelta.coefficient = nthDelta.coefficient / gcd;\r\n\r\n                    // TODO: Can i delete the next line ?\r\n                    // let deltaC = nthDelta.coefficient, deltaR = nthDelta.radical;\r\n                    if (b !== 0) {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                `${-b / gcd} - ${nthDelta.tex}`,\r\n                                `${-b / gcd} + ${nthDelta.tex}`,\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                `\\\\dfrac{${-b / gcd} - ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                `\\\\dfrac{${-b / gcd} + ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                            ]\r\n                        }\r\n                    } else {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                `- ${nthDelta.tex}`,\r\n                                `${nthDelta.tex}`,\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                `\\\\dfrac{- ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                `\\\\dfrac{${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                            ]\r\n                        }\r\n                    }\r\n                } else {\r\n                    // -b +- d / 2a\r\n                    this._solutions = [\r\n                        new Fraction(-b - nthDelta.coefficient, 2 * a).reduce().dfrac,\r\n                        new Fraction(-b + nthDelta.coefficient, 2 * a).reduce().dfrac\r\n                    ]\r\n                }\r\n            }\r\n\r\n        } else if (delta === 0) {\r\n            this._solutions = [new Fraction(-b, 2 * a).reduce().dfrac];\r\n        } else {\r\n            this._solutions = [this._varnothing];\r\n        }\r\n\r\n\r\n        // Handle now the inequations.\r\n        if (!this.isStrictEqual()) {\r\n            if (this._solutions.length === 2) {\r\n                sX1 = (realX1 < realX2) ? this._solutions[0] : this._solutions[1];\r\n                sX2 = (realX1 < realX2) ? this._solutions[1] : this._solutions[0];\r\n\r\n                if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                    this._solutions = [\r\n                        `\\\\left]-\\\\infty ; ${sX1}\\\\right${this.isAlsoEqual() ? ']' : '['} \\\\cup \\\\left${this.isAlsoEqual() ? '[' : ']'}${sX2};+\\\\infty\\\\right[`\r\n                    ];\r\n                } else {\r\n                    this._solutions = [\r\n                        `\\\\left${this.isAlsoEqual() ? '[' : ']'}${sX1} ; ${sX2}\\\\right${this.isAlsoEqual() ? ']' : '['}`\r\n                    ]\r\n                }\r\n            } else if (this._solutions.length === 1 && this._solutions[0] !== this._varnothing) {\r\n                if (!this.isAlsoEqual()) {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [\r\n                            `\\\\left]-\\\\infty ; ${this._solutions[0]}\\\\right[ \\\\cup \\\\left]${this._solutions[0]};+\\\\infty\\\\right[`\r\n                        ];\r\n                    } else {\r\n                        this._solutions = [this._varnothing];\r\n                    }\r\n                } else {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [this._real];\r\n                    } else {\r\n                        // this._solutions = [ this._solutions[0] ];\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.isGreater()) {\r\n                    this._solutions = [aF.sign() === 1 ? this._real : this._varnothing];\r\n                } else {\r\n                    this._solutions = [aF.sign() === -1 ? this._real : this._varnothing];\r\n                }\r\n            }\r\n        }\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree3plus = (letter?: string): string[] => {\r\n        // TODO: try to resolve equations with a degree superior than 2.\r\n        this._solutions = [letter];  // ESLint remove system :(\r\n        return this._solutions;\r\n    };\r\n\r\n}","import Fraction from \"../coefficients/fraction\";\r\nimport Equation from \"./equation\";\r\nimport Polynom from \"./polynom\";\r\nimport Monom from \"./monom\";\r\nimport {Random} from \"../random/random\";\r\n\r\nexport default class LinearSystem {\r\n    private _solutions: { [letter: string]: { value: Fraction, isReal: boolean, isVarnothing: boolean } };\r\n    private _resolutionSteps: LinearSystem[];\r\n    private _equations: Equation[];\r\n    private _letters: string[];\r\n\r\n    constructor(...equationStrings: string[]) {\r\n        this._equations = [];\r\n        this._letters = 'xy'.split('');\r\n\r\n        if (equationStrings !== undefined && equationStrings.length > 0) {\r\n            this.parse(...equationStrings);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isLinerarSystem() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equations(): Equation[] {\r\n        return this._equations;\r\n    }\r\n\r\n    set equations(value) {\r\n        this._equations = value;\r\n    }\r\n\r\n    get letters(): string {\r\n        return this._letters.join('')\r\n    }\r\n\r\n    set letters(value: string) {\r\n        this._letters = value.split('');\r\n    }\r\n\r\n    get isSolvable(): boolean {\r\n        let V = this.variables;\r\n\r\n        // TODO: in some case, it is possible to resolve systems if there isn't the isSame number of vars and equations\r\n        if (V.length !== this._equations.length) {\r\n            return false;\r\n        }\r\n\r\n        //TOOD: Must check if two equations isn't a linear combination of the others ?\r\n\r\n        return true;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n        for (let E of this._equations) {\r\n            V = V.concat(E.variables);\r\n        }\r\n        return [...new Set(V)].sort();\r\n    }\r\n\r\n    get tex(): string {\r\n        // Build the array of values.\r\n        // Reorder\r\n        // This clone the system :!!!\r\n        //TODO: Avoid cloning this linear system\r\n        let LS = this.clone().reorder(),\r\n            letters = LS.variables,\r\n            equStr: string[],\r\n            equArray: string[] = [],\r\n            m: Monom;\r\n\r\n        // TODO: Manage tex output of linear equations\r\n        for (let equ of LS.equations) {\r\n            equStr = [];\r\n            for (let L of letters) {\r\n                m = equ.left.monomByLetter(L);\r\n\r\n                if (equStr.length === 0) {\r\n                    equStr.push(m.isZero() ? '' : m.tex);\r\n                } else {\r\n                    equStr.push(m.isZero() ? '' : ((m.coefficient.sign() === 1) ? '+' : '') + m.tex);\r\n                }\r\n            }\r\n\r\n            // Add the equal sign\r\n            equStr.push('=');\r\n\r\n            // Add the right hand part of the equation (should be only a number, because it has been reorderd)\r\n            equStr.push(equ.right.tex);\r\n\r\n            // Add to the list.\r\n            equArray.push(equStr.join('&'));\r\n        }\r\n\r\n\r\n        return `\\\\left\\\\{\\\\begin{array}{${\"r\".repeat(letters.length)}cl}${equArray.join('\\\\\\\\\\ ')}\\\\end{array}\\\\right.`;\r\n        //return `\\\\left\\\\{\\\\begin{array}{rrrcl}${this._equations.map(equ => `${equ.tex}`).join('\\\\\\\\\\ \\n')}\\\\end{array}\\\\right.`;\r\n    }\r\n\r\n    get texSolution(): string {\r\n        let tex: string[] = [];\r\n\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n\r\n        for (let letter in this._solutions) {\r\n            if (this._solutions[letter].isReal) {\r\n                console.log(`Undetermined (letter ${letter})`);\r\n                return;\r\n            }\r\n            if (this._solutions[letter].isVarnothing) {\r\n                console.log(`Undefined (letter ${letter})`);\r\n                return;\r\n            }\r\n\r\n            tex.push(this._solutions[letter].value.dfrac);\r\n        }\r\n        return `(${tex.join(';')})`;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...equations: any[]): LinearSystem => {\r\n        this._equations = equations.map(value => new Equation(value));\r\n        this._findLetters();\r\n        return this;\r\n    };\r\n\r\n    setCoefficient = (...coefficients: string[]): LinearSystem => {\r\n        // Reset the equations list\r\n        this._equations = [];\r\n\r\n        let i = 0;\r\n        while (i < coefficients.length - this._letters.length) {\r\n            let left = new Polynom().parse(this._letters.join(''), ...coefficients.slice(i, i + this._letters.length)),\r\n                right = new Polynom(coefficients[i + this._letters.length].toString()),\r\n                equ = new Equation().create(left, right);\r\n            this._equations.push(equ.clone());\r\n\r\n            i = i + this._letters.length + 1;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): LinearSystem => {\r\n        return new LinearSystem().parse(...this._equations.map(equ => equ.clone()));\r\n    };\r\n\r\n    setLetters = (...letters: string[]): LinearSystem => {\r\n        this._letters = letters;\r\n        return this\r\n    }\r\n    private _findLetters = (): LinearSystem => {\r\n        // Find all letters used.\r\n        let variables = new Set();\r\n\r\n        for (let equ of this._equations) {\r\n            variables = new Set([...variables, ...equ.variables]);\r\n        }\r\n\r\n        // TODO: How to transform (Set of string) to string[]\r\n        // @ts-ignore\r\n        this._letters = [...variables];\r\n        return this;\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n    // -----------------------------------------------\r\n    generate = (...solutions: Fraction[] | number[]): LinearSystem => {\r\n        let solutionsF: Fraction[] = [];\r\n\r\n        // Convert the numbers to fractions if necessary\r\n        for (let s of solutions) {\r\n            if (typeof s === \"number\") {\r\n                solutionsF.push(new Fraction(s.toString()));\r\n            } else {\r\n                solutionsF.push(s.clone());\r\n            }\r\n        }\r\n\r\n        // Create the equations and make sure they are not linear combined.\r\n        this._equations = [];\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            this._equations.push(this._generateOneEquation(...solutionsF));\r\n        }\r\n        return this;\r\n    };\r\n    private _generateOneEquation = (...solutions: Fraction[]): Equation => {\r\n        let coeff: number[] = [], leftValue: Fraction = new Fraction().zero(),\r\n            letters: string[] = ['x', 'y', 'z', 't', 'u', 'v', 'w', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],\r\n            equString: string = '', equ: Equation;\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            coeff.push(Random.numberSym(5));\r\n            leftValue.add(solutions[i].clone().multiply(coeff[i]));\r\n            equString += `${(coeff[i] < 0) ? coeff[i] : '+' + coeff[i]}${letters[i]}`\r\n        }\r\n\r\n        // LeftValue contains the left part oof the equation - and is then the isSame as the right part.\r\n        // It might be a Fraction.\r\n\r\n        // Must check if it's not a linear combination\r\n        equ = new Equation(`${equString}=${leftValue.display}`);\r\n        if (equ.right.monoms[0].coefficient.denominator != 1) {\r\n            equ.multiply(new Fraction(equ.right.monoms[0].coefficient.denominator, 1));\r\n        }\r\n        if (this._checkIfLinerCombination(equ)) {\r\n            return equ;\r\n        } else {\r\n            return this._generateOneEquation(...solutions);\r\n        }\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    private _linearReduction(eq1: Equation, eq2: Equation, letter: string): Equation {\r\n        // TODO: handle other signs for equations ?\r\n        // Get the monom for the particular letter.\r\n        let c1 = eq1.left.monomByDegree(1, letter).coefficient.clone(),\r\n            c2 = eq2.left.monomByDegree(1, letter).coefficient.clone().opposed();\r\n\r\n        return this.mergeEquations(eq1, eq2, c2, c1);\r\n    }\r\n\r\n    mergeEquations = (eq1: Equation, eq2: Equation, factor1: any, factor2: any): Equation => {\r\n        // Set and clone the equations.\r\n\r\n        let eq1multiplied = eq1.clone().multiply(new Fraction(factor1)),\r\n            eq2multiplied = eq2.clone().multiply(new Fraction(factor2));\r\n\r\n        // Add both equations together.\r\n        eq1multiplied.left.add(eq2multiplied.left);\r\n        eq1multiplied.right.add(eq2multiplied.right);\r\n\r\n        return eq1multiplied;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Solvers algorithm\r\n    // ------------------------------------------\r\n    reorder = (): LinearSystem => {\r\n        for (let E of this._equations) {\r\n            E.reorder();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    solve = (): LinearSystem => {\r\n        // Solve it by linear\r\n        this._solutions = {};\r\n        this._resolutionSteps = [];\r\n\r\n        // Reorder all equations.\r\n        this.reorder();\r\n\r\n        // Get all variables in the linear system\r\n        let V = this.variables.sort();\r\n\r\n        for (let letter of V) {\r\n            this._solutions[letter] = this._solveOneLetter(letter, V)\r\n        }\r\n\r\n        // TODO: LinearSystem - solve: optimization and handle undetermined and undefined systems.\r\n        return this;\r\n    };\r\n\r\n    private _checkIfLinerCombination = (equ: Equation): boolean => {\r\n\r\n        return true;\r\n    };\r\n\r\n    private _solveOneLetter(letter: string, V: string[]): { value: Fraction, isReal: boolean, isVarnothing: boolean } {\r\n        // list of equations.\r\n        let LE: Equation[] = this.clone().equations,\r\n            reducedEquations: Equation[] = [];\r\n\r\n        // Reduce the equations.\r\n        // Do it as long as there is more than one step, but no more than the number of equations.\r\n        for (let L of V) {\r\n            // remove the setLetter from all equations using linear combinations\r\n            if (L === letter) {\r\n                continue;\r\n            }\r\n\r\n            // Linear reduction.\r\n            // TODO: Search for better association\r\n            for (let i = 0; i < LE.length - 1; i++) {\r\n                reducedEquations.push(this._linearReduction(LE[i], LE[i + 1], L));\r\n            }\r\n\r\n            // Keep track of each steps.\r\n            this._resolutionSteps.push(new LinearSystem().parse(...reducedEquations));\r\n\r\n            // Set the list of equations to the new version.\r\n            LE = this._resolutionSteps[this._resolutionSteps.length - 1].clone().equations;\r\n\r\n            // Reset the stack\r\n            reducedEquations = [];\r\n        }\r\n\r\n        // Solve the equations\r\n        let E = this._resolutionSteps[this._resolutionSteps.length - 1].equations[0];\r\n        E.solve();\r\n\r\n        return {\r\n            value: new Fraction(E.solutions[0]),\r\n            isReal: E.isReal,\r\n            isVarnothing: E.isVarnothing\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Helpers\r\n    // ------------------------------------------\r\n    log = (): string => {\r\n        let str: string = '';\r\n\r\n        for (let E of this._equations) {\r\n            console.log(E.tex);\r\n            str += `${E.tex}\\\\n}`;\r\n        }\r\n\r\n        return str;\r\n    };\r\n}","/**\r\n * Polynom module contains everything necessary to handle polynoms.\r\n * @module Logicalset\r\n */\r\n\r\nimport Shutingyard from '../shutingyard';\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n */\r\nexport default class Logicalset {\r\n    private _rawString: string;\r\n    private _rpn: { token: string, tokenType: string }[]\r\n\r\n    /**\r\n     *\r\n     * @param {string} value (optional) Default polynom to parse on class creation\r\n     */\r\n    constructor(value: string) {\r\n        this._rawString = value\r\n        this.parse(value)\r\n        return this;\r\n    }\r\n\r\n    get isLogicalset() {\r\n        return true;\r\n    };\r\n\r\n    private parse = (value: string): Logicalset => {\r\n        // TODO: Must format the value string to convert some items...\r\n\r\n        // Parse the updated value to the shutingyard algorithm\r\n        this._rpn = new Shutingyard('set').parse(value).rpn;\r\n\r\n        return this;\r\n    }\r\n\r\n    evaluate(tokenSets: { [key: string]: any[] }, reference?: any[]): any[] {\r\n        let varStack: (Set<unknown>)[] = []\r\n\r\n        let referenceSet: Set<unknown>\r\n        if (reference === undefined) {\r\n            referenceSet = new Set()\r\n            for (let key in tokenSets) {\r\n                referenceSet = new Set([...referenceSet, ...tokenSets[key]])\r\n            }\r\n        } else {\r\n            referenceSet = new Set(reference)\r\n        }\r\n\r\n        for (let token of this._rpn) {\r\n            if (token.tokenType === 'variable') {\r\n                // The variable has no token - assume it's empty.\r\n                if (tokenSets[token.token] === undefined) {\r\n                    varStack.push(new Set())\r\n                } else {\r\n                    varStack.push(new Set(tokenSets[token.token]));\r\n                }\r\n\r\n            } else {\r\n                switch (token.token) {\r\n                    case '&':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            varStack.push(new Set([...first].filter(x => second.has(x))))\r\n                        }\r\n                        break\r\n                    case '|':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n                            varStack.push(new Set([...first, ...second]))\r\n                        }\r\n                        break\r\n                    case '-':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n                            varStack.push(new Set([...first].filter(x => !second.has(x))))\r\n                        }\r\n                        break\r\n                    case '!':\r\n                        if (varStack.length >= 1) {\r\n                            let first = varStack.pop()\r\n\r\n                            varStack.push(new Set([...referenceSet].filter(x => !first.has(x))))\r\n                        }\r\n                        break\r\n                }\r\n            }\r\n        }\r\n\r\n        return [...varStack[0]].sort();\r\n    }\r\n\r\n    vennAB(): any[] {\r\n        return this.evaluate({\r\n                A: ['A', 'AB'],\r\n                B: ['B', 'AB']\r\n            },\r\n            ['A', 'B', 'AB', 'E']\r\n        )\r\n    }\r\n\r\n    vennABC(): any[] {\r\n        return this.evaluate({\r\n                A: ['A', 'AB', 'AC', 'ABC'],\r\n                B: ['B', 'AB', 'BC', 'ABC'],\r\n                C: ['C', 'AC', 'BC', 'ABC']\r\n            },\r\n            ['A', 'B', 'C', 'AB', 'AC', 'BC', 'E']\r\n        )\r\n    }\r\n\r\n    get rpn(): { token: string, tokenType: string }[] {\r\n        return this._rpn\r\n    }\r\n\r\n    get tex(): string {\r\n        let varStack: { token:string, tokenType: string } [] = []\r\n\r\n        for (let token of this._rpn) {\r\n            if (token.tokenType === 'variable') {\r\n                varStack.push(token);\r\n            } else {\r\n                switch (token.token) {\r\n                    case '&':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if(first.tokenType==='mix'){first.token = `( ${first.token} )`}\r\n                            if(second.tokenType==='mix'){second.token = `( ${second.token} )`}\r\n                            varStack.push({token: `${first.token} \\\\cap ${second.token}`, tokenType: 'mix'})\r\n                        }\r\n                        break\r\n                    case '|':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if(first.tokenType==='mix'){first.token = `( ${first.token} )`}\r\n                            if(second.tokenType==='mix'){second.token = `( ${second.token} )`}\r\n                            varStack.push({token: `${first.token} \\\\cup ${second.token}`, tokenType: 'mix'})\r\n                        }\r\n                        break\r\n                    case '-':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if(first.tokenType==='mix'){first.token = `( ${first.token} )`}\r\n                            if(second.tokenType==='mix'){second.token = `( ${second.token} )`}\r\n                            varStack.push({token: `${first.token} \\\\setminus ${second.token}`, tokenType: 'mix'})\r\n                        }\r\n                        break\r\n                    case '!':\r\n                        if (varStack.length >= 1) {\r\n                            let first = varStack.pop()\r\n                            varStack.push({token: `\\\\overline{ ${first.token} }`, tokenType: 'variable'})\r\n                        }\r\n                        break\r\n                }\r\n            }\r\n        }\r\n\r\n        return varStack[0].token\r\n    }\r\n}\r\n","/***\r\n * Monom class\r\n * Defined as coefficient * literal\r\n * Examples: 3x^2, 3/5x^2, ...\r\n */\r\nimport Fraction from \"../coefficients/fraction\";\r\nimport Numeric from \"../numeric\";\r\n\r\nexport default class Monom {\r\n    private _coefficient: Fraction;\r\n    private _literal: { [Key: string]: number };\r\n\r\n    /**\r\n     * Create the monom object.\r\n     * @param value (optional) string\r\n     */\r\n    constructor(value?: string) {\r\n        this.zero();\r\n\r\n        if (value !== undefined) {\r\n            // A string is given - try to parse the value.\r\n            this.parse(value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get isMonom() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Get the coefficient as fraction\r\n     */\r\n    get coefficient(): Fraction {\r\n        return this._coefficient;\r\n    }\r\n\r\n    /**\r\n     * Set the coefficient value of the monom\r\n     * @param F     Fraction\r\n     */\r\n    set coefficient(F: Fraction) {\r\n        this._coefficient = F;\r\n    }\r\n\r\n    /**\r\n     * Get the literal part, as dictionary\r\n     */\r\n    get literal(): { [Key: string]: number } {\r\n        return this._literal;\r\n    }\r\n\r\n    get literalSqrt(): { [Key: string]: number } {\r\n\r\n        if (this.isLitteralSquare()) {\r\n            let L: { [Key: string]: number } = {}\r\n            for (let key in this._literal) {\r\n                L[key] = this._literal[key] / 2\r\n            }\r\n            return L;\r\n        } else {\r\n            return this._literal;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom\r\n     * @param L     Literal part as dictionary: <setLetter: exposant>\r\n     */\r\n    set literal(L: { [Key: string]: number }) {\r\n        this._literal = L;\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom from a string\r\n     * @param inputStr  String like x^2y^3\r\n     */\r\n    set literalStr(inputStr: string) {\r\n        // Match all x^n\r\n        for (const v of [...inputStr.matchAll(/([a-z])\\^([+-]?[0-9]+)/g)]) {\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = 0;\r\n            }\r\n            this._literal[v[1]] += +v[2];\r\n        }\r\n        for (const v of [...inputStr.matchAll(/([a-z](?!\\^))/g)]) {\r\n            // Match all single letters\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = 0;\r\n            }\r\n            this._literal[v[1]] += 1;\r\n        }\r\n    }\r\n\r\n    // Getter heplers.\r\n    /**\r\n     * Get the variables letters\r\n     */\r\n    get variables(): string[] {\r\n        this.clone().clean();\r\n        return Object.keys(this._literal)\r\n    }\r\n\r\n    // Display getter\r\n    /**\r\n     * This display getter is to be used in the polynom display getter\r\n     */\r\n    get display(): string {\r\n        let L: string = '';\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter] !== 0) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter] > 1) {\r\n                    L += `^${this._literal[letter]}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.display}`;\r\n            } else {\r\n                return '';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.display}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    get dividers(): Monom[] {\r\n        // Decompose only if the coefficient it a complet value\r\n        if (this.coefficient.denominator !== 1) {\r\n            return [this.clone()]\r\n        }\r\n\r\n        // Security : do not do this if greater than 10000\r\n        if (this.coefficient.numerator > 10000) {\r\n            return [this.clone()]\r\n        }\r\n        const dividers = Numeric.dividers(Math.abs(this.coefficient.numerator))\r\n\r\n        // Decompose the litterals parts.\r\n        let litterals: { [key: string]: number }[] = [];\r\n        for (let L in this.literal) {\r\n            // L is the letter.\r\n            litterals = this._getLitteralDividers(litterals, L)\r\n        }\r\n\r\n        const monomDividers: Monom[] = [];\r\n        if (litterals.length > 0 && dividers.length>0) {\r\n            for (let N of dividers) {\r\n                for (let L of litterals) {\r\n                    let M = new Monom();\r\n                    M.coefficient = new Fraction(N)\r\n                    M.literal = L\r\n                    monomDividers.push(M)\r\n                }\r\n            }\r\n        }else if (dividers.length===0) {\r\n            for (let L of litterals) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction().one()\r\n                M.literal = L\r\n                monomDividers.push(M)\r\n            }\r\n        } else {\r\n            for (let N of dividers) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction(N)\r\n                monomDividers.push(M)\r\n            }\r\n        }\r\n\r\n        return monomDividers.length===0? [new Monom().one()]: monomDividers;\r\n    }\r\n\r\n    private _getLitteralDividers(arr: { [key: string]: number }[], letter: string): { [key: string]: number }[] {\r\n        let tmpList: { [key: string]: number }[] = [];\r\n\r\n        for (let d = 0; d <= this.literal[letter]; d++) {\r\n            if (arr.length === 0) {\r\n                let litt: { [key: string]: number } = {}\r\n                litt[letter] = d\r\n                tmpList.push(litt)\r\n            } else {\r\n                for (let item of arr) {\r\n                    let litt: { [key: string]: number } = {}\r\n                    for(let currentLetter in item){\r\n                        litt[currentLetter] = item[currentLetter]\r\n                    }\r\n                    litt[letter] = d\r\n                    tmpList.push(litt)\r\n                }\r\n            }\r\n        }\r\n        return tmpList;\r\n    }\r\n\r\n    /**\r\n     * Display the monom, forcing the '+' sign to appear\r\n     */\r\n    get displayWithSign(): string {\r\n        // TODO: Rename or remove this getter ?\r\n        let d: String = this.display;\r\n        return (d[0] !== '-' ? '+' : '') + d;\r\n    }\r\n\r\n    /**\r\n     * Get the tex output of the monom\r\n     */\r\n    get tex(): string {\r\n        let L: string = '';\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter] !== 0) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter] > 1) {\r\n                    L += `^${this._literal[letter]}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.dfrac}`;\r\n            } else {\r\n                return '0';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.dfrac}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // -----------------------------------------\r\n    /**\r\n     * Parse a string to a monom. The string may include fraction.\r\n     * @param inputStr\r\n     */\r\n    parse = (inputStr: string): Monom => {\r\n        // Set the literal part.\r\n        this.literalStr = inputStr;\r\n\r\n        // Get the coefficient\r\n        this._coefficient = new Fraction();\r\n\r\n        for (const v of [...inputStr.replace(/([a-z])|(\\^[+-]?[0-9]+)/g, ',').split(',')]) {\r\n            // The value is empty.\r\n            if (v.trim() === '') {\r\n                continue;\r\n            }\r\n\r\n            // Multiple the current coefficient by the new found value.\r\n            this._coefficient.multiply(new Fraction(v.trim()));\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Clone the current Monom.\r\n     */\r\n    clone = (): Monom => {\r\n        let F: Monom = new Monom();\r\n\r\n        F.coefficient = this._coefficient.clone();\r\n\r\n        // Copy the literal parts.\r\n        for (let k in this._literal) {\r\n            F.setLetter(k, this._literal[k]);\r\n        }\r\n        return F;\r\n    };\r\n\r\n    /**\r\n     * Create a zero value monom\r\n     */\r\n    zero = (): Monom => {\r\n        this._coefficient = new Fraction().zero();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Create a one value monom\r\n     */\r\n    one = (): Monom => {\r\n        this._coefficient = new Fraction().one();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Clean the monom by removing each letters with a power of zero.\r\n     */\r\n    clean = (): Monom => {\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter] === 0) {\r\n                delete this._literal[letter];\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Get the opposed\r\n     * Returns a monom.\r\n     */\r\n    opposed = (): Monom => {\r\n        this._coefficient.opposed();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Add all similar monoms. If they aren't similar, they are simply skipped.\r\n     * @param M (Monom[]) The monoms to add.\r\n     */\r\n    add = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                this._coefficient.add(m.coefficient);\r\n            } else {\r\n                console.log('Add: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Subtract multiple monoms\r\n     * @param M (Monom[]) The monoms to subtract\r\n     */\r\n    subtract = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                this._coefficient.add(m.coefficient.clone().opposed());\r\n            } else {\r\n                console.log('Subtract: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiple multiple monoms to the current monom\r\n     * @param M (Monom[]) The monoms to multiply to.\r\n     */\r\n    multiply = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            // Multiply the coefficient.\r\n            this._coefficient.multiply(m.coefficient);\r\n            // Multiply the literal parts.\r\n            for (let letter in m.literal) {\r\n                this._literal[letter] = (this._literal[letter] === undefined) ? m.literal[letter] : this._literal[letter] + m.literal[letter];\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiplyByNumber = (F: Fraction | number): Monom => {\r\n        this._coefficient.multiply(F);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divide the current monoms by multiple monoms\r\n     * @param M (Monom[])\r\n     */\r\n    divide = (...M: Monom[]): Monom => {\r\n        // Depending on the given value, choose the current item\r\n        for (let v of M) {\r\n            // Divide the coefficient\r\n            this._coefficient.divide(v.coefficient);\r\n\r\n            // Subtract the power values\r\n            for (let letter in v.literal) {\r\n                this._literal[letter] = (this._literal[letter] === undefined) ? -v.literal[letter] : this._literal[letter] - v.literal[letter];\r\n\r\n                // If the power of a particular setLetter is zero, delete it from the literal part..\r\n                if (this._literal[letter] === 0) {\r\n                    delete this._literal[letter];\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the pow of a monom.\r\n     * @param nb (number) : Mathematical pow\r\n     */\r\n    pow = (nb: number): Monom => {\r\n        this._coefficient.pow(nb);\r\n        for (let letter in this._literal) {\r\n            this._literal[letter] *= nb;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the nth-root of the monom\r\n     * @param p\r\n     */\r\n    root = (p: number): Monom => {\r\n        // TODO: determiner the nth root of a monom\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Return the square root of a monom\r\n     */\r\n    sqrt = (): Monom => {\r\n        if (this.isSquare()) {\r\n            this._coefficient.sqrt();\r\n            for (let letter in this._literal) {\r\n                this._literal[letter] /= 2;\r\n            }\r\n        }\r\n        return this.root(2);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    compare = (M: Monom, sign?: string): boolean => {\r\n        // TODO: Build the compare systems.\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // To be equal, they must be the isSame\r\n                if (!this.compare(M, 'same')) {\r\n                    return false;\r\n                }\r\n\r\n                // The litteral parts are the isSame. The coefficient must be equal\r\n                return this._coefficient.isEqual(M.coefficient);\r\n            case 'same':\r\n                // Get the list of all variables from both monoms.\r\n                let M1: string[] = this.variables,\r\n                    M2: string[] = M.variables,\r\n                    K: string[] = M1.concat(M2.filter((item) => M1.indexOf(item) < 0));\r\n\r\n                for (let key of K) {\r\n                    // The setLetter is not available in one of the monom\r\n                    if (this._literal[key] === undefined || M.literal[key] === undefined) {\r\n                        return false;\r\n                    }\r\n                    // The setLetter does not have the isSame power in each monoms.\r\n                    if (this._literal[key] !== M.literal[key]) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                // All are positive check - the monoms are the sames.\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is null\r\n     */\r\n    isZero(): boolean {\r\n        return this._coefficient.value === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is one\r\n     */\r\n    isOne(): boolean {\r\n        return this._coefficient.value === 1 && this.variables.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if two monoms are equals\r\n     * @param M\r\n     */\r\n    isEqual = (M: Monom): boolean => {\r\n        return this.compare(M, '=');\r\n    };\r\n\r\n    /**\r\n     * Determine if two monoms are similar\r\n     * @param M\r\n     */\r\n    isSameAs = (M: Monom): boolean => {\r\n        return this.compare(M, 'same');\r\n    };\r\n\r\n    isSquare = (): boolean => {\r\n        if (!this.coefficient.isSquare()) {\r\n            return false;\r\n        }\r\n        return this.isLitteralSquare();\r\n    }\r\n\r\n    isLitteralSquare = (): boolean => {\r\n        for (let letter in this.literal) {\r\n            if (this.literal[letter] % 2 !== 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    // ------------------------------------------\r\n    // Misc monoms functions\r\n    // -------------------------------------\r\n    /**\r\n     * Determine if a monom contains a setLetter in it's literal part\r\n     * @param letter\r\n     */\r\n    hasLetter = (letter?: string): boolean => {\r\n        return this._literal[letter === undefined ? 'x' : letter] > 0;\r\n    };\r\n\r\n    /**\r\n     * Set the power of a particular setLetter\r\n     * @param letter (string) Letter to change\r\n     * @param pow (number) Power of the setLetter (must be positive integer.\r\n     */\r\n    setLetter = (letter: string, pow: number): void => {\r\n        // If the power is not legal or is zero, remove the setLetter from the dict\r\n        if (pow <= 0 || !Number.isSafeInteger(pow)) {\r\n            if (this._literal[letter] !== undefined) {\r\n                delete this._literal[letter];\r\n            }\r\n        } else {\r\n            this._literal[letter] = pow;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the degree of a monom. If no setLetter is given, the result will be the global degree.\r\n     * @param letter (string) Letter to get to degree (power)\r\n     */\r\n    degree = (letter?: string): number => {\r\n        if (this.variables.length === 0) {\r\n            return 0;\r\n        }\r\n        if (letter === undefined) {\r\n            // Not setLetter given -> we get the global monom degree (sum of all the letters).\r\n            return Object.values(this._literal).reduce((t, n) => t + n);\r\n        } else {\r\n            // A setLetter is given -> get the corresponding power.\r\n            return this._literal[letter] === undefined ? 0 : this._literal[letter];\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Evaluate a monom. Each setLetter must be assigned to a Fraction.\r\n     * @param values    Dictionary of <setLetter: Fraction>\r\n     */\r\n    evaluate = (values: { [key: string]: Fraction|number }|Fraction|number): Fraction => {\r\n        let r = this.coefficient.clone();\r\n\r\n        if(typeof values === 'number' || values instanceof Fraction){\r\n            let tmpValues:{ [key: string]: Fraction|number } = {}\r\n\r\n            tmpValues[this.variables[0]] = new Fraction(values)\r\n            return this.evaluate(tmpValues);\r\n        }\r\n\r\n        if(typeof values === 'object') {\r\n            for (let L in this._literal) {\r\n                if (values[L] === undefined) {\r\n                    return new Fraction().zero();\r\n                }\r\n                let value = new Fraction(values[L])\r\n                r.multiply(value.pow(this._literal[L]));\r\n            }\r\n        }\r\n        return r;\r\n    };\r\n\r\n    /**\r\n     * Derivative the monom\r\n     * @param letter\r\n     */\r\n    derivative = (letter?: string): Monom => {\r\n        // No setLetter given - assume it's the setLetter 'x'\r\n        if (letter === undefined) {\r\n            letter = 'x';\r\n        }\r\n        if (this.hasLetter(letter)) {\r\n            let d = +this._literal[letter],\r\n                dM = this.clone();\r\n\r\n            // Subtract one to the degree.\r\n            dM._literal[letter] -= 1;\r\n\r\n            // Multiply the coefficient by the previous degree\r\n            dM._coefficient.multiply(new Fraction('' + d));\r\n            return dM;\r\n        } else {\r\n            return new Monom().zero();\r\n        }\r\n    };\r\n\r\n    primitive = (letter?: string): Monom => {\r\n        if(letter===undefined){letter = 'x'}\r\n\r\n        // Zero monom\r\n        let M = this.clone()\r\n\r\n        if(M.hasLetter(letter)){\r\n            M.coefficient = M.coefficient.clone().divide(M.degree(letter)+1)\r\n            M.setLetter(letter, M.degree(letter)+1)\r\n        }else{\r\n            // There is no letter.\r\n\r\n            // The coefficient might be zero (=> x) or a number a (=> ax)\r\n            if(M.coefficient.isZero()){\r\n                M.coefficient = new Fraction().one()\r\n            }\r\n            M.setLetter(letter, 1)\r\n        }\r\n        return M\r\n    }\r\n    // ----------------------------------------\r\n    // Static functions\r\n    // ----------------------------------------\r\n\r\n    /**\r\n     * Get the least common multiple of monoms\r\n     * @param monoms    Array of monoms\r\n     */\r\n    static lcm = (...monoms: Monom[]): Monom => {\r\n        let M = new Monom(),\r\n            coeffN: number[] = monoms.map(value => value.coefficient.numerator),\r\n            coeffD: number[] = monoms.map(value => value.coefficient.denominator),\r\n            n = Numeric.gcd(...coeffN),\r\n            d = Numeric.lcm(...coeffD);\r\n\r\n        // Get the coefficient.\r\n        M.coefficient = new Fraction(n, d).reduce();\r\n\r\n        // Set the literal parts - go through each monoms literal parts and get only the lowest degree of each letters.\r\n        for (let m of monoms) {\r\n            // Remove the inexistant letters from the resulting monom\r\n            for (let letter in M.literal) {\r\n                if (!(letter in m.literal)) {\r\n                    M.literal[letter] = 0;\r\n                }\r\n            }\r\n            for (let letter in m.literal) {\r\n                if (M.literal[letter] === undefined && m.literal[letter] > 0) {\r\n                    M.literal[letter] = m.literal[letter];\r\n                } else {\r\n                    M.literal[letter] = Math.min(m.literal[letter], M.literal[letter]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n    /**\r\n     * Multiply two monoms and return a NEW monom.\r\n     * @param monoms\r\n     */\r\n    static xmultiply = (...monoms: Monom[]): Monom => {\r\n        let M = new Monom().one();\r\n\r\n        for (let m of monoms) {\r\n            M.multiply(m);\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Determine if multiple monoms are similar\r\n     * @param M\r\n     */\r\n    areSameAs = (...M: Monom[]): boolean => {\r\n        let result: boolean = true;\r\n\r\n        // Check all monoms if they are the isSame as the \"this\" one.\r\n        for (let i = 0; i < M.length; i++) {\r\n            if (!this.isSameAs(M[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All check passed -> all the monoms are similar.\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Determine if multiple monoms are equals\r\n     * @param M\r\n     */\r\n    areEquals = (...M: Monom[]): boolean => {\r\n        // They are not similar.\r\n        if (!this.areSameAs(...M)) {\r\n            return false;\r\n        }\r\n\r\n        // Check all coefficient. They must be equals.\r\n        for (let m of M) {\r\n            if (!this._coefficient.isEqual(m.coefficient)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All checks passed.\r\n        return true;\r\n    };\r\n\r\n}","/**\r\n * Polynom module contains everything necessary to handle polynoms.*\r\n * @module Polynom\r\n */\r\n\r\nimport Monom from './monom';\r\nimport Shutingyard from '../shutingyard';\r\nimport Numeric from '../numeric';\r\nimport {Random} from \"../random/random\";\r\nimport Fraction from \"../coefficients/fraction\";\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n * ```\r\n * let P = new Polynom('3x-4')\r\n * ```\r\n */\r\nexport default class Polynom {\r\n    private _rawString: string;\r\n    private _monoms: Monom[];\r\n    private _factors: Polynom[];\r\n    private _texString: string;\r\n\r\n    /**\r\n     *\r\n     * @param {string} polynomString (optional) Default polynom to parse on class creation\r\n     * @param values\r\n     */\r\n    constructor(polynomString?: string, ...values: any[]) {\r\n        this._monoms = [];\r\n        this._factors = [];\r\n        if (polynomString !== undefined) {\r\n            this.parse(polynomString, ...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    get isPolynom() {\r\n        return true;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get monoms() {\r\n        return this._monoms;\r\n    }\r\n\r\n    set monoms(M: Monom[]) {\r\n        this._monoms = M;\r\n    }\r\n\r\n    get factors(): Polynom[] {\r\n        return this._factors;\r\n    }\r\n\r\n    set factors(value: Polynom[]) {\r\n        this._factors = value;\r\n    }\r\n\r\n    get texFactors(): string {\r\n        this.factorize()\r\n\r\n        let tex = ''\r\n        for (let f of this.factors) {\r\n            if (f.monoms.length > 1) {\r\n                tex += `(${f.tex})`\r\n            } else {\r\n                tex = f.tex + tex;\r\n            }\r\n        }\r\n        return tex;\r\n    }\r\n\r\n    get texString(): string {\r\n        return this._texString;\r\n    }\r\n\r\n    get length() {\r\n        // TODO: Must reduce the monoms list to remove the zero coefficient.\r\n        return this._monoms.length;\r\n    }\r\n\r\n    get display(): string {\r\n        return this.genDisplay();\r\n    }\r\n\r\n    get raw(): string {\r\n        return this._rawString\r\n    }\r\n\r\n    get tex(): string {\r\n        return this.genDisplay('tex');\r\n    }\r\n\r\n    get isMultiVariable(): boolean {\r\n        const B = false;\r\n        for (const m of this._monoms) {\r\n            if (m.variables.length > 1) {\r\n                return true;\r\n            }\r\n        }\r\n        return B;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            V = V.concat(m.variables);\r\n        }\r\n\r\n        // Remove duplicates.\r\n        V = [...new Set(V)];\r\n\r\n        return V;\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    private genDisplay = (output?: string, forceSign?: boolean, wrapParentheses?: boolean): string => {\r\n        let P: string = '';\r\n\r\n        for (const k of this._monoms) {\r\n            if (k.coefficient.value === 0) {\r\n                continue;\r\n            }\r\n\r\n            P += `${(k.coefficient.sign() === 1 && (P !== '' || forceSign === true)) ? '+' : ''}${(output === 'tex') ? k.tex : k.display}`;\r\n        }\r\n\r\n        if (wrapParentheses === true && this.length > 1) {\r\n            if (output === 'tex') {\r\n                P = `\\\\left( ${P} \\\\right)`;\r\n            } else {\r\n                P = `(${P})`;\r\n            }\r\n        }\r\n\r\n        if (P === '') {\r\n            P = '0';\r\n        }\r\n        return P;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse a string to a polynom.\r\n     * @param inputStr\r\n     * @param values: as string, numbers or fractions\r\n     */\r\n    parse = (inputStr: string, ...values: any[]): Polynom => {\r\n        if (values === undefined || values.length === 0) {\r\n            inputStr = '' + inputStr;\r\n            this._rawString = inputStr;\r\n\r\n            // Parse the polynom using the shuting yard algorithm\r\n            if (inputStr !== '' && !isNaN(Number(inputStr))) {\r\n                this.empty();\r\n                // It's a simple number.\r\n                let m = new Monom();\r\n                m.coefficient = new Fraction(inputStr);\r\n                m.literalStr = '';\r\n                this.add(m);\r\n                return this;\r\n            }\r\n\r\n            // Parse the string.\r\n            return this.shutingYardToReducedPolynom(inputStr);\r\n        } else if (/^[a-z]/.test(inputStr)) {\r\n            // We assume the inputStr contains only letters.\r\n            this.empty();\r\n\r\n            let fractions = values.map(x => new Fraction(x));\r\n            // Multiple setLetter version\r\n            if (inputStr.length > 1) {\r\n                // TODO: check that the number of values given correspond to the letters (+1 eventually)\r\n                let letters = inputStr.split(''),\r\n                    i = 0;\r\n                for (let F of fractions) {\r\n                    let m = new Monom();\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = letters[i] || '';\r\n                    this.add(m);\r\n                    i++;\r\n                }\r\n            }\r\n            // Single setLetter version\r\n            else {\r\n                let n = fractions.length - 1;\r\n                for (let F of fractions) {\r\n                    let m = new Monom()\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = `${inputStr}^${n}`\r\n                    this.add(m);\r\n                    n--;\r\n                }\r\n            }\r\n            return this;\r\n        } else {\r\n            return this.zero();\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * Main parse using a shutting yard class\r\n     * @param inputStr\r\n     */\r\n    private shutingYardToReducedPolynom = (inputStr: string): Polynom => {\r\n        // Get the RPN array of the current expression\r\n        const SY: Shutingyard = new Shutingyard().parse(inputStr);\r\n        const rpn: { token: string, tokenType: string }[] = SY.rpn;\r\n        let m1: Polynom;\r\n        let m2: Polynom;\r\n\r\n        let stack: Polynom[] = [],\r\n            previousToken: string = null,\r\n            tempPolynom\r\n        for (const element of rpn) {\r\n            if (element.tokenType === 'coefficient' || element.tokenType === 'variable') {\r\n                tempPolynom = new Polynom().zero();\r\n                tempPolynom.monoms = [new Monom(element.token)]\r\n                stack.push(tempPolynom.clone())\r\n            } else if (element.tokenType === 'operation') {\r\n                m2 = (stack.pop()) || new Polynom().zero();\r\n                m1 = (stack.pop()) || new Polynom().zero();\r\n                switch (element.token) {\r\n                    case '+':\r\n                        stack.push(m1.add(m2))\r\n                        break;\r\n                    case '-':\r\n                        stack.push(m1.subtract(m2))\r\n                        break;\r\n                    case '*':\r\n                        stack.push(m1.multiply(m2))\r\n                        break;\r\n                    case '^':\r\n                        stack.push(m1.pow(+previousToken))\r\n                }\r\n            }\r\n            previousToken = element.token;\r\n        }\r\n\r\n        this._monoms = stack[0].monoms;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the polynom\r\n     */\r\n    clone = (): Polynom => {\r\n        const P = new Polynom();\r\n        const M: Monom[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            M.push(m.clone());\r\n        }\r\n\r\n        P.monoms = M;\r\n        return P;\r\n    };\r\n\r\n    /**\r\n     * Set the polynom to zero.\r\n     * @returns {this}\r\n     */\r\n    zero = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().zero());\r\n        this._rawString = '0';\r\n        return this;\r\n    };\r\n\r\n    one = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().one());\r\n        this._rawString = '1';\r\n        return this;\r\n    }\r\n\r\n    empty = (): Polynom => {\r\n        this._monoms = [];\r\n        this._rawString = '';\r\n        return this;\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Polynom generators and randomizers\r\n    // -----------------------------------------------\r\n    private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n        degree: 2,\r\n        unit: true,\r\n        fractions: false,\r\n        factorable: false,\r\n        letters: 'x',\r\n        allowNullMonom: false,\r\n        numberOfMonoms: false\r\n    };\r\n    get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n        return this._randomizeDefaults;\r\n    }\r\n\r\n    set randomizeDefaults(value) {\r\n        this._randomizeDefaults = value;\r\n    }\r\n\r\n    randomize = (config: { [key: string]: number | string | boolean }): Polynom => {\r\n        let P = new Polynom();\r\n\r\n        // Check the config file and use the default values.\r\n        if (config === undefined) {\r\n            config = {};\r\n        }\r\n        for (let k in this._randomizeDefaults) {\r\n            if (config[k] === undefined) {\r\n                config[k] = this._randomizeDefaults[k];\r\n            }\r\n        }\r\n\r\n        // TODO: Build a more robust randomize function\r\n        return P;\r\n    }\r\n\r\n    rndFactorable = (degree: number = 2, unit: boolean | number = false, letters: string = 'x'): Polynom => {\r\n        // TODO: Make rndFactorable polynom generator more user friendly\r\n        this._factors = [];\r\n        for (let i = 0; i < degree; i++) {\r\n            let factorUnit = unit === true || i >= unit,\r\n                p = Random.polynom({\r\n                    degree: 1,\r\n                    unit: factorUnit,\r\n                    fraction: false,\r\n                    letters\r\n                });\r\n            this._factors.push(p);\r\n        }\r\n\r\n        this.empty().monoms = this._factors[0].monoms;\r\n        for (let i = 1; i < this._factors.length; i++) {\r\n            this.multiply(this._factors[i]);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Polynom => {\r\n        this._monoms = this._monoms.map(m => m.opposed());\r\n        return this;\r\n    };\r\n\r\n    add = (...values: any[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value.isPolynom) {\r\n                this._monoms = this._monoms.concat(value.monoms);\r\n            } else if (value.isMonom) {\r\n                this._monoms.push(value.clone());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()));\r\n            } else {\r\n                this._monoms.push(new Monom(value));\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (...values: any[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value.isPolynom) {\r\n                this._monoms = this._monoms.concat(value.clone().opposed().monoms);\r\n            } else if (value.isMonom) {\r\n                this._monoms.push(value.clone().opposed());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()).opposed());\r\n            } else {\r\n                this._monoms.push(new Monom(value).opposed());\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    multiply = (value: any): Polynom => {\r\n        if (value.isPolynom) {\r\n            return this.multiplyByPolynom(value);\r\n        } else if (value.isFraction) {\r\n            return this.multiplyByFraction(value);\r\n        } else if (value.isMonom) {\r\n            return this.multiplyByMonom(value);\r\n        } else if (Number.isSafeInteger(value)) {\r\n            return this.multiplyByInteger(value);\r\n        }\r\n\r\n        // Something went wrong...\r\n        return this;\r\n    }\r\n\r\n    private multiplyByPolynom = (P: Polynom): Polynom => {\r\n        const M: Monom[] = [];\r\n        for (const m1 of this._monoms) {\r\n            for (const m2 of P.monoms) {\r\n                M.push(Monom.xmultiply(m1, m2));\r\n            }\r\n        }\r\n\r\n        this._monoms = M;\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.multiply(F);\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByInteger = (nb: number): Polynom => {\r\n        return this.multiplyByFraction(new Fraction(nb));\r\n    };\r\n\r\n    private multiplyByMonom = (M: Monom): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.multiply(M)\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n    /**\r\n     * Divide the current polynom by another polynom.\r\n     * @param P\r\n     * returns {quotient: Polynom, reminder: Polynom}\r\n     */\r\n    euclidian = (P: Polynom): { quotient: Polynom, reminder: Polynom } => {\r\n        const letter: string = P.variables[0];\r\n        const quotient: Polynom = new Polynom().zero();\r\n        const reminder: Polynom = this.clone().reorder(letter);\r\n\r\n        // There is no variable !\r\n        if (P.variables.length === 0) {\r\n            return {quotient, reminder}\r\n        }\r\n\r\n        // Get at least a letter\r\n\r\n        const maxMP: Monom = P.monomByDegree(undefined, letter);\r\n        const degreeP: number = P.degree(letter);\r\n\r\n        let newM: Monom;\r\n\r\n        // Make the euclidian division of the two polynoms.\r\n        let MaxIteration = this.degree(letter) * 2;\r\n        while (reminder.degree(letter) >= degreeP && MaxIteration >= 0) {\r\n            // console.log('EUCLIDE Q', quotient.degree(letter), quotient.tex)\r\n            // console.log('EUCLIDE R', reminder.degree(letter), reminder.tex)\r\n            // console.log('ITERATION', MaxIteration)\r\n            MaxIteration--\r\n\r\n            // Get the greatest monom divided by the max monom of the divider\r\n            newM = reminder.monomByDegree(undefined, letter).clone().divide(maxMP);\r\n\r\n            if (newM.isZero()) {\r\n                break;\r\n            }\r\n\r\n            // Get the new quotient and reminder.\r\n            quotient.add(newM);\r\n            reminder.subtract(P.clone().multiply(newM));\r\n        }\r\n\r\n        return {quotient, reminder};\r\n    };\r\n\r\n    divide = (value: any): Polynom => {\r\n        if (value.isFraction) {\r\n            this.divideByFraction(value);\r\n        } else if (Number.isSafeInteger(value)) {\r\n            return this.divideByInteger(value);\r\n        }\r\n    }\r\n\r\n    private divideByInteger = (nb: number): Polynom => {\r\n        const nbF = new Fraction(nb);\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(nbF);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    private divideByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(F);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    pow = (nb: number): Polynom => {\r\n        if (!Number.isSafeInteger(nb)) {\r\n            return this.zero();\r\n        }\r\n        if (nb < 0) {\r\n            return this.zero();\r\n        }\r\n        if (nb === 0) {\r\n            return new Polynom();\r\n        }\r\n\r\n        const P = this.clone();\r\n        for (let i = 1; i < nb; i++) {\r\n            this.multiply(P);\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param P\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (P: Polynom, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '='\r\n        }\r\n\r\n        // Create clone version to reduce them without altering the original polynoms.\r\n        const cP1 = this.clone().reduce().reorder();\r\n        const cP2 = P.clone().reduce().reorder();\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree() !== cP2.degree()) {\r\n                    return false;\r\n                }\r\n\r\n                // Check if the coefficients are the isSame.\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isEqual(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            case 'same':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree() !== cP2.degree()) {\r\n                    return false;\r\n                }\r\n\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isSameAs(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    isZero(): boolean {\r\n        return (this._monoms.length === 1 && this._monoms[0].coefficient.isZero()) || this._monoms.length === 0;\r\n    }\r\n\r\n    isOne(): boolean {\r\n        return this._monoms.length === 1 && this._monoms[0].coefficient.isOne();\r\n    }\r\n\r\n    isEqual = (P: Polynom): boolean => {\r\n        return this.compare(P, '=');\r\n    };\r\n\r\n    isSameAs = (P: Polynom): boolean => {\r\n        return this.compare(P, 'same');\r\n    };\r\n\r\n    isOpposedAt = (P: Polynom): boolean => {\r\n        return this.compare(P.clone().opposed(), '=');\r\n    };\r\n\r\n    isFactorized = (polynomString: string): boolean => {\r\n        let P;\r\n\r\n        // Check if polynom is complete...\r\n        if (polynomString.match(/\\(/g).length !== polynomString.match(/\\)/g).length) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check if the provided (string) version is fully factorized.\r\n        // Run a regex on the string.\r\n        let polynomStringNormalized = polynomString.replaceAll('*', ''),\r\n            polynomStringReduced = '' + polynomStringNormalized,\r\n            factors: string[] = [];\r\n\r\n        for (let x of polynomStringNormalized.matchAll(/\\(([a-z0-9+\\-]+)\\)(\\^[0-9]*)?/g)) {\r\n            if (x[2] !== undefined) {\r\n                for (let i = 0; i < +x[2].substr(1); i++) {\r\n                    factors.push(x[1])\r\n                }\r\n            } else {\r\n                factors.push(x[1]);\r\n            }\r\n            polynomStringReduced = polynomStringReduced.replaceAll(x[0], '');\r\n        }\r\n        if (polynomStringReduced !== '') {\r\n            factors.push(polynomStringReduced);\r\n        }\r\n        let polyFactors = factors.map(x => new Polynom(x));\r\n\r\n        // Factorize the current polynom.\r\n        this.factorize();\r\n\r\n        // Compare the given factors with the generated factors\r\n        let sign = 1;\r\n        for (let f of this.factors) {\r\n            for (let i = 0; i < polyFactors.length; i++) {\r\n                if (f.isEqual(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    break;\r\n                } else if (f.isOpposedAt(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    sign = -sign;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // The polyfactors must be empty and the cumulative opposite factors must be 1.\r\n        return (polyFactors.length === 0 && sign === 1);\r\n    }\r\n\r\n    isDeveloped = (polynomString: string): Boolean => {\r\n        let P: Polynom;\r\n\r\n        // There is at least one parenthese - it is not developed.\r\n        if (polynomString.match(/\\(/g).length + polynomString.match(/\\)/g).length) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            // Build the polynom\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check that everything is completely developed. Actually, there are no parentheses... so it is fully developed\r\n\r\n        // maybe it wasn't reduced and not ordered...\r\n        // compare polynom string.\r\n\r\n        // normalize the string\r\n        let polynomStringNormalized = polynomString.replaceAll('[*\\s]', '')\r\n\r\n        // Determine if it's the exact same string.\r\n        // TODO: Maybe it's enough to just make this test !\r\n        return polynomStringNormalized === P.reduce().reorder().display\r\n    }\r\n    // ------------------------------------------\r\n    // Misc polynoms functions\r\n    // -------------------------------------\r\n    reduce = (): Polynom => {\r\n        for (let i = 0; i < this._monoms.length; i++) {\r\n            for (let j = i + 1; j < this._monoms.length; j++) {\r\n                if (this._monoms[i].isSameAs(this.monoms[j])) {\r\n                    this._monoms[i].add(this.monoms[j]);\r\n                    this._monoms.splice(j, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Remove all null monoms\r\n        this._monoms = this._monoms.filter((m) => {\r\n            return m.coefficient.value !== 0\r\n        });\r\n\r\n        // Reduce all monoms coefficient.\r\n        for (const m of this._monoms) {\r\n            m.coefficient.reduce();\r\n        }\r\n\r\n        if (this.length === 0) {\r\n            return new Polynom().zero();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    reorder = (letter: string = 'x'): Polynom => {\r\n        // TODO: Must handle multiple setLetter reorder system\r\n        this._monoms.sort(function (a, b) {\r\n            return b.degree(letter) - a.degree(letter)\r\n        });\r\n        return this.reduce();\r\n    };\r\n\r\n    degree = (letter?: string): number => {\r\n        let d: number = 0;\r\n        for (const m of this._monoms) {\r\n            d = Math.max(m.degree(letter), d);\r\n        }\r\n        return d;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        let L: string[] = [], S = new Set();\r\n\r\n        for (let m of this._monoms) {\r\n            S = new Set([...S, ...m.variables]);\r\n        }\r\n\r\n        // @ts-ignore\r\n        return [...S];\r\n    }\r\n\r\n    /**\r\n     * Replace a variable (letter) by a polynom.\r\n     * @param letter\r\n     * @param P\r\n     */\r\n    replaceBy = (letter: string, P: Polynom): Polynom => {\r\n        let pow: number;\r\n        const resultPolynom: Polynom = new Polynom().zero();\r\n\r\n        for (const m of this.monoms) {\r\n            if (m.literal[letter] === undefined || m.literal[letter] === 0) {\r\n                resultPolynom.add(m.clone());\r\n            } else {\r\n                // We have found a setLetter.\r\n                // Get the power and reset it.\r\n                pow = +m.literal[letter];\r\n                delete m.literal[letter];\r\n\r\n                resultPolynom.add(P.clone().pow(pow).multiply(m));\r\n            }\r\n        }\r\n\r\n        this._monoms = resultPolynom.reduce().reorder().monoms;\r\n        return this;\r\n    };\r\n\r\n    // Evaluate a polynom.\r\n    evaluate = (values: { [key: string]: Fraction | number } | Fraction | number): Fraction => {\r\n        const r = new Fraction().zero();\r\n\r\n        this._monoms.forEach(monom => {\r\n            //console.log('Evaluate polynom: ', monom.display, values, monom.evaluate(values).display);\r\n            r.add(monom.evaluate(values));\r\n        });\r\n        return r;\r\n    };\r\n\r\n    derivative = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.derivative(letter));\r\n        }\r\n        return dP;\r\n\r\n    }\r\n\r\n    primitive = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.primitive(letter))\r\n        }\r\n        return dP\r\n    }\r\n\r\n    integrate = (a: Fraction | number, b: Fraction | number, letter?: string): Fraction => {\r\n        const primitive = this.primitive(letter)\r\n\r\n        if (letter === undefined) {\r\n            letter = 'x'\r\n        }\r\n\r\n        let valuesA: { [key: string]: Fraction | number } = {},\r\n            valuesB: { [key: string]: Fraction | number } = {}\r\n        valuesA[letter] = a;\r\n        valuesB[letter] = b;\r\n\r\n        return primitive.evaluate(valuesB).subtract(primitive.evaluate(valuesA))\r\n    }\r\n    // ------------------------------------------\r\n    // Polynoms factorization functions\r\n    // -------------------------------------\r\n    /**\r\n     * Factorize a polynom and store the best results in factors.\r\n     * @param maxValue Defines the greatest value to search to (default is 20).\r\n     */\r\n    factorize_OLD = (maxValue?: number): Polynom => {\r\n        // TODO: Must handle other letters than 'x'\r\n        this._factors = [];\r\n\r\n        // Duplicate the polynom\r\n        let P = this.clone(),\r\n            nbFactorsFound = 0;\r\n\r\n        // Determine if the polynom is \"negative\", eg has a max monom degree with a negative coefficient.\r\n        if (P.monomByDegree().coefficient.numerator < 0) {\r\n            this._factors.push(new Polynom('-1'));\r\n        }\r\n\r\n        // Determine if there is a 'common' monom\r\n        let M = P.commonMonom();\r\n        if (!M.isOne()) {\r\n            let commonPolynom = new Polynom()\r\n            commonPolynom.monoms = [M]\r\n            if (this._factors.length === 0) {\r\n                this._factors.push(commonPolynom);\r\n            } else {\r\n                this._factors = [];\r\n                this._factors.push(commonPolynom.opposed());\r\n            }\r\n            P = P.euclidian(commonPolynom).quotient;\r\n\r\n            nbFactorsFound = commonPolynom.degree();\r\n        }\r\n\r\n        // Main loop.\r\n        //\r\n        // Do it only if degree is equal or less than one.\r\n        if (P.degree() <= 1) {\r\n            this._factors.push(P.clone());\r\n        } else {\r\n            // Force test.\r\n            let Q = new Fraction(),\r\n                F,\r\n                degree = P.degree();\r\n\r\n            maxValue = maxValue === undefined ? 20 : maxValue;\r\n\r\n            // Test all polynom similar to ax+b\r\n            for (let a = 1; a <= maxValue; a++) {\r\n                // Skip a coefficient of 0\r\n                for (let b = -maxValue; b <= maxValue; b++) {\r\n\r\n                    Q.parse(-b, a);\r\n\r\n                    if (P.evaluate({x: Q})) {\r\n                        F = new Polynom(`${a}x+${b}`);\r\n                        while (P.evaluate({x: Q}).value === 0) {\r\n                            this._factors.push(F.clone());\r\n                            nbFactorsFound++;\r\n\r\n                            // Means it can be divided without reminders.\r\n                            P = P.euclidian(F).quotient;\r\n                        }\r\n                    }\r\n\r\n                    // Continue if the numbers of factors found equals the degree.\r\n                    if (nbFactorsFound > degree) {\r\n                        return this;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (P.degree() > 1) {\r\n                this._factors.push(P.clone());\r\n                return this;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    factorize = (letter?: string): Polynom[] => {\r\n        let factors: Polynom[] = [];\r\n\r\n        // Extract the common monom\r\n        let P = this.clone().reorder(),\r\n            M = P.commonMonom(),\r\n            tempPolynom: Polynom\r\n        // It has a common monom.\r\n        if (!M.isOne()) {\r\n            tempPolynom = new Polynom()\r\n            tempPolynom.monoms = [M]\r\n            factors = [tempPolynom.clone()]\r\n            P = P.euclidian(tempPolynom).quotient;\r\n        }\r\n\r\n        let securityLoop = P.degree() * 2\r\n        // securityLoop = 0\r\n        while (securityLoop >= 0) {\r\n            securityLoop--\r\n\r\n\r\n            if (P.monoms.length < 2) {\r\n                if (!P.isOne()) {\r\n                    factors.push(P.clone());\r\n                }\r\n                break;\r\n            } else {\r\n                // Get the first and last monom.\r\n                let m1 = P.monoms[0].dividers,\r\n                    m2 = P.monoms[P.monoms.length - 1].dividers\r\n\r\n                // console.log('CURRENT VALUE')\r\n                // console.log(P.tex)\r\n                // console.log('---------------------')\r\n                for (let m1d of m1) {\r\n                    for (let m2d of m2) {\r\n                        // if(m1d.degree()===m2d.degree()){continue}\r\n                        let dividerPolynom = new Polynom(),\r\n                            result\r\n                        dividerPolynom.monoms = [m1d.clone(), m2d.clone()]\r\n                        result = P.euclidian(dividerPolynom)\r\n\r\n                        // console.log(dividerPolynom.tex, '=>', result.reminder.tex, '|||||', result.quotient.tex)\r\n                        if (result.reminder.isZero()) {\r\n                            P = result.quotient.clone();\r\n                            factors.push(dividerPolynom)\r\n                            continue;\r\n                        }\r\n\r\n                        dividerPolynom.monoms = [m1d.clone(), m2d.clone().opposed()]\r\n                        result = P.euclidian(dividerPolynom)\r\n                        if (result.reminder.isZero()) {\r\n                            P = result.quotient.clone();\r\n                            factors.push(dividerPolynom)\r\n                        }\r\n                        // console.log(dividerPolynom.tex, '=>', result.reminder.tex)\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        this.factors = factors\r\n        return factors;\r\n    }\r\n\r\n    private _factorize2ndDegree = (letter: string): Polynom[] => {\r\n        let P1: Polynom, P2: Polynom,\r\n            a, b, c, delta, x1, x2, factor;\r\n\r\n        // One variable only\r\n        if (this.numberOfVars === 1) {\r\n            a = this.monomByDegree(2, letter).coefficient;\r\n            b = this.monomByDegree(1, letter).coefficient;\r\n            c = this.monomByDegree(0, letter).coefficient;\r\n            delta = b.clone().pow(2).subtract(a.clone().multiply(c).multiply(4));\r\n\r\n            if (delta.isZero()) {\r\n                x1 = b.clone().opposed().divide(a.clone().multiply(2))\r\n                P1 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                P2 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                factor = a.divide(x1.denominator).divide(x1.denominator);\r\n\r\n                if (!factor.isOne()) {\r\n                    // TODO: Update new Polynom to accept anything...\r\n                    return [new Polynom(factor.display), P1, P2]\r\n                } else {\r\n                    return [P1, P2]\r\n                }\r\n            } else if (delta.isPositive() && delta.isSquare()) {\r\n                x1 = b.clone().opposed()\r\n                    .add(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n                x2 = b.clone().opposed()\r\n                    .subtract(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n\r\n                // (2x+5)(3x-2)\r\n                // 6x^2+11x-10\r\n                // a = 6, b = 11, c = -10\r\n                // delta = 121-4*6*(-10) = 361= 19^2\r\n                // x1 = (-11 + 19)  / 12 = 8/12 = 2/3\r\n                // x2 = (-11 - 19)  / 12 = -30/12 = -5/2\r\n                factor = a.divide(x1.denominator).divide(x2.denominator);\r\n                if (factor.isOne()) {\r\n                    return [\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n                } else {\r\n                    return [\r\n                        new Polynom(factor.display),\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n\r\n                }\r\n            } else {\r\n                // No solution possible - return the complete value.\r\n                return [this.clone()]\r\n            }\r\n        } else {\r\n            // If multiple variables, only handle perfect squares...\r\n            a = this.monomByDegree(2, letter);\r\n            b = this.monomByDegree(1, letter);\r\n            c = this.monomByDegree(0, letter);\r\n\r\n\r\n            if (a.isLitteralSquare() && c.isLitteralSquare()) {\r\n                // Check the middle item is same as...\r\n                if (b.clone().pow(2).isSameAs(a.clone().multiply(c))) {\r\n                    // Determine if the coefficient values matches.\r\n\r\n                    // Search 4 values (r, s, t, u) that matches:\r\n                    // (r X + s Y)(t X + u Y) = rt X^2 + (ru + st) XY + su Y^2\r\n\r\n                    let xPolynom = new Polynom('x', a.coefficient, b.coefficient, c.coefficient);\r\n                    let xFactors = xPolynom._factorize2ndDegree('x');\r\n\r\n                    let factors = [], xyzPolynom: Polynom;\r\n\r\n                    if (xFactors.length >= 2) {\r\n                        for (let p of xFactors) {\r\n                            if (p.degree() === 0) {\r\n                                factors.push(p.clone())\r\n                            } else {\r\n                                xyzPolynom = p.clone();\r\n                                xyzPolynom.monoms[0].literal = a.literalSqrt\r\n                                xyzPolynom.monoms[1].literal = c.literalSqrt\r\n                                factors.push(xyzPolynom.clone())\r\n                            }\r\n                        }\r\n                        return factors\r\n                    }\r\n                }\r\n            }\r\n\r\n            return [this.clone()]\r\n            //\r\n            // console.log(a.tex, b.tex, c.tex)\r\n            // if (a.isSquare() && c.isSquare()) {\r\n            //     console.log('A C squares')\r\n            //     if (a.clone().sqrt().multiply(c.clone().sqrt()).multiplyByNumber(2).isSameAs(b)) {\r\n            //         console.log('HERE')\r\n            //         if (a.coefficient.sign() === b.coefficient.sign()) {\r\n            //             return []\r\n            //         }else{\r\n            //             return []\r\n            //         }\r\n            //     }\r\n            // } else if(a.isLitteralSquare() && c.isLitteralSquare()) {\r\n            //     console.log('A C litteral SQUARES')\r\n            //     // Check that the middle element is the product of a and c.\r\n            //\r\n            //     if(b.clone().pow(2).isSameAs(a.clone().multiply(c))){\r\n            //         console.log('SAME')\r\n            //\r\n            //     }else{\r\n            //         console.log('NOT SAME')\r\n            //     }\r\n            //\r\n            //     return [this.clone()]\r\n            // } else {\r\n            //     console.log('NOT SQUARES AT ALL !!!!')\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    private _factorizeByGroups = (): Polynom[] => {\r\n        // TODO: Factorize by groups.\r\n        return [];\r\n    }\r\n    // ------------------------------------------\r\n    // Polynoms helpers functions\r\n    // -------------------------------------\r\n    // TODO: get zeroes for more than first degree\r\n    getZeroes = (): (Fraction | boolean)[] => {\r\n        const Z: Fraction[] = [];\r\n\r\n        switch (this.degree()) {\r\n            case 0:\r\n                if (this._monoms[0].coefficient.value === 0) {\r\n                    return [true];\r\n                } else {\r\n                    return [false];\r\n                }\r\n            case 1:\r\n                // There is only one monoms,\r\n                if (this._monoms.length === 1) {\r\n                    return [new Fraction().zero()];\r\n                } else {\r\n                    const P = this.clone().reduce().reorder();\r\n                    return [P.monoms[1].coefficient.opposed().divide(P.monoms[0].coefficient)];\r\n                }\r\n            // TODO: Determine the zeros of an equation of second degree.\r\n            //case 2:\r\n            default:\r\n                // Make sure the polynom is factorized.\r\n                if (this._factors.length === 0) {\r\n                    this.factorize()\r\n                }\r\n\r\n                let zeroes = [], zeroesAsTex = [];\r\n                for (let P of this._factors) {\r\n                    if (P.degree() > 2) {\r\n                        // TODO: Handle other polynom.\r\n\r\n                    } else if (P.degree() === 2) {\r\n                        let A = P.monomByDegree(2).coefficient,\r\n                            B = P.monomByDegree(1).coefficient,\r\n                            C = P.monomByDegree(0).coefficient,\r\n                            D = B.clone().pow(2).subtract(A.clone().multiply(C).multiply(4));\r\n\r\n                        if (D.value > 0) {\r\n                            /*console.log('Two zeroes for ', P.tex); */\r\n                            let x1 = (-(B.value) + Math.sqrt(D.value)) / (2 * A.value),\r\n                                x2 = (-(B.value) - Math.sqrt(D.value)) / (2 * A.value);\r\n\r\n                            zeroes.push(new Fraction(x1.toFixed(3)).reduce());\r\n                            zeroes.push(new Fraction(x2.toFixed(3)).reduce());\r\n                        } else if (D.value === 0) {\r\n                            /*console.log('One zero for ', P.tex); */\r\n\r\n                        } else {\r\n                            console.log('No zero for ', P.tex);\r\n                        }\r\n                    } else {\r\n                        for (let z of P.getZeroes()) {\r\n                            // Check if the zero is already in the list.\r\n                            if (z === false || z === true) {\r\n                                continue;\r\n                            }\r\n                            if (zeroesAsTex.indexOf(z.frac) === -1) {\r\n                                zeroes.push(z);\r\n                                zeroesAsTex.push(z.frac);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return zeroes;\r\n        }\r\n        return Z;\r\n    };\r\n\r\n\r\n    // TODO: analyse the next functions to determine if they are useful or not...\r\n    monomByDegree = (degree?: number, letter?: string): Monom => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomByDegree(this.degree(letter), letter);\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter) === degree) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        // Nothing was found - return the null monom.\r\n        return new Monom().zero();\r\n    };\r\n\r\n    monomsByDegree = (degree?: number, letter?: string): Monom[] => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomsByDegree(this.degree(letter));\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        let Ms: Monom[] = [];\r\n\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter) === degree) {\r\n                Ms.push(m.clone())\r\n            }\r\n        }\r\n\r\n        return Ms\r\n        // Nothing was found - retur\r\n    }\r\n\r\n    // Used in LinearSystem.tex\r\n    monomByLetter = (letter: string): Monom => {\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.hasLetter(letter)) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        return new Monom().zero();\r\n    };\r\n\r\n\r\n    // Next functions are used for for commonMonom, which is used in the factorize method.\r\n    getDenominators = (): number[] => {\r\n        const denominators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            denominators.push(m.coefficient.denominator);\r\n        }\r\n        return denominators;\r\n    };\r\n\r\n    getNumerators = (): number[] => {\r\n        const numerators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            numerators.push(m.coefficient.numerator);\r\n        }\r\n        return numerators;\r\n    };\r\n\r\n    lcmDenominator = (): number => {\r\n        return Numeric.lcm(...this.getDenominators());\r\n    };\r\n\r\n    gcdDenominator = (): number => {\r\n        return Numeric.gcd(...this.getDenominators());\r\n    };\r\n\r\n    lcmNumerator = (): number => {\r\n        return Numeric.lcm(...this.getNumerators());\r\n    };\r\n\r\n    gcdNumerator = (): number => {\r\n        return Numeric.gcd(...this.getNumerators());\r\n    };\r\n\r\n    commonMonom = (): Monom => {\r\n        let M = new Monom().one(), numerator: number, denominator: number, degree = this.degree();\r\n\r\n        numerator = this.gcdNumerator();\r\n        denominator = this.gcdDenominator();\r\n\r\n        M.coefficient = new Fraction(numerator, denominator);\r\n        for (let L of this.variables) {\r\n            // Initialize the setLetter with the max degree\r\n            M.setLetter(L, degree);\r\n            for (let m of this._monoms) {\r\n                M.setLetter(L, Math.min(m.degree(L), M.degree(L)));\r\n                if (M.degree(L) === 0) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return M;\r\n    }\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * This will generate a not reduced tex string of the polynom.\r\n     * @param complexity : Number of iteration to increase the complexity.\r\n     */\r\n    makeItComplicate = (complexity: number = 1): Polynom => {\r\n        this._texString = '';\r\n\r\n        // The polynom must be at least of the first degree.\r\n        if (this.degree() < 1) {\r\n            return this;\r\n        }\r\n\r\n        // TODO: update this function !\r\n\r\n        const mDegree = Random.number(0, this.degree() - 1);\r\n        // const A = new Polynom().rndSimple(mDegree, false, complexity > 1, 'x', false, complexity > 1 ? -1 : 1);\r\n        // const B = new Polynom().rndSimple(1, false, complexity > 1);\r\n        // const C = this.clone().subtract(A.clone().multiply(B));\r\n\r\n        // Try to factorize a little bit the C polynom.\r\n        // C.factorizePartial(true);\r\n        // this._texString = `${A.genDisplay('tex', false, true)} \\\\cdot ${B.genDisplay('tex', false, true)} ${C.texString} `;\r\n        //\r\n        return this;\r\n    };\r\n    factorizePartial = (forceSign?: boolean): Polynom => {\r\n        this._texString = '';\r\n        // Try to find two monoms with a common coefficient.\r\n        if (this.length <= 1) {\r\n            return this;\r\n        }\r\n\r\n        let mMain: Monom,\r\n            mCheck: Monom,\r\n            mFactor: Monom,\r\n            pFactor: Polynom,\r\n            // pRemain: Polynom,\r\n            g: number, sign: string;\r\n\r\n        for (let i = 0; i < this.length; i++) {\r\n            mMain = this._monoms[i].clone();\r\n            // We factorize only if the main coefficient isn't a fraction\r\n            // if(mMain.coefficient.denominator!==1){continue;}\r\n            for (let j = i + 1; j < this.length; j++) {\r\n                mCheck = this._monoms[j].clone();\r\n                // if(mCheck.coefficient.denominator!==1){continue;}\r\n\r\n                g = Numeric.gcd(mMain.coefficient.numerator, mCheck.coefficient.numerator);\r\n                if (g !== 1) {\r\n                    // mFactor = mMain.clone().divide(mCheck); // This gets the literal part.\r\n                    // mFactor.coefficient = new Fraction(g); // Set the coefficient to the gcd.\r\n                    mFactor = Monom.lcm(mMain, mCheck);\r\n                    sign = mMain.coefficient.sign() === 1 ? '+' : '-';\r\n                    this._texString = `${forceSign === true ? sign : (sign === '+' ? '' : sign)}${mFactor.tex}`;\r\n\r\n                    pFactor = new Polynom().add(mMain.divide(mFactor)).add(mCheck.divide(mFactor));\r\n                    this._texString += pFactor.genDisplay('tex', false, true);\r\n\r\n                    this._texString += this.clone().subtract(pFactor.clone().multiply(mFactor)).genDisplay('tex', true, false);\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._texString = this.genDisplay('tex', forceSign);\r\n\r\n        return this;\r\n    };\r\n    /**\r\n     * reduce the coefficient value as if the polynom was equal to zero.\r\n     */\r\n    minify = (): Polynom => {\r\n        // First multiply by the common denominator.\r\n        this.multiply(this.lcmDenominator()).divide(this.gcdNumerator()).reduce();\r\n        return this.reduce();\r\n    };\r\n    /**\r\n     * Determine if the current polynom is divisible by P\r\n     * TODO: should work with any polynom, not only first degree polynoms and the setLetter should disappear\r\n     * @param P\r\n     * @param letter - default setLetter\r\n     */\r\n    canDivide = (P: Polynom, letter: string = 'x'): boolean => {\r\n        const d = P.degree();\r\n\r\n        const evalValue: { [key: string]: Fraction } = {};\r\n        // A zero degree polynom can always divide, except if it's the zero polynom.\r\n        if (d === 0) {\r\n            return !P.isZero;\r\n        }\r\n\r\n        // The polynom is of degree one.\r\n        if (d === 1) {\r\n            const z = P.getZeroes();\r\n            // The zero is an undefined zero.\r\n            if (z[0] === true || z[0] === false) {\r\n                return false;\r\n            }\r\n\r\n            evalValue[letter] = z[0];\r\n            return this.evaluate(evalValue).value === 0;\r\n        }\r\n\r\n        // The polynom is of degree 2 or more...\r\n        if (d > 1) {\r\n            console.log('Currently, only first degree polynom are supported');\r\n            return false;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n\r\n}\r\n","/**\r\n * Rational polynom module contains everything necessary to handle rational polynoms.\r\n * @module Polynom\r\n */\r\n\r\nimport Polynom from \"./polynom\";\r\nimport Fraction from \"../coefficients/fraction\";\r\n\r\n/**\r\n * Rational class can handle rational polynoms\r\n */\r\nexport default class Rational {\r\n    private _rawString: string;\r\n    private _numerator: Polynom;\r\n    private _denominator: Polynom;\r\n\r\n    /**\r\n     *\r\n     * @param numerator\r\n     * @param denominator\r\n     */\r\n    constructor(numerator?: Polynom, denominator?: Polynom) {\r\n        this._numerator = numerator?numerator.clone():new Polynom();\r\n        this._denominator = denominator?denominator.clone():new Polynom();\r\n    }\r\n\r\n    clone = (): Rational => {\r\n        this._numerator = this._numerator.clone()\r\n        this._denominator = this._denominator.clone()\r\n\r\n        return this;\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\dfrac{ ${this._numerator.tex} }{ ${this._denominator.tex} }`;\r\n    }\r\n\r\n    get texFactors(): string {\r\n        this._numerator.factorize()\r\n        this._denominator.factorize()\r\n\r\n        return `\\\\dfrac{ ${this._numerator.texFactors} }{ ${this._denominator.texFactors} }`\r\n    }\r\n\r\n    get numerator(): Polynom {\r\n        return this._numerator\r\n    }\r\n    get denominator(): Polynom {\r\n        return this._denominator\r\n    }\r\n\r\n    domain = (): string => {\r\n        let zeroes = this._denominator.getZeroes();\r\n        if( zeroes.length===0 || zeroes[0]===false){\r\n            return '\\\\mathbb{R}'\r\n        }else if(zeroes[0]===true){\r\n            return '\\\\varnothing'\r\n        }else{\r\n            return '\\\\mathbb{R}\\\\setminus\\\\left{'+\r\n                zeroes.map(x=> {\r\n                    return (typeof x === 'boolean')?'':x.frac\r\n                    })\r\n                    .join(';')+'\\\\right}'\r\n        }\r\n    }\r\n\r\n    amplify = (P: Polynom): Rational => {\r\n        this._numerator.multiply(P);\r\n        this._denominator.multiply(P);\r\n\r\n        return this;\r\n    }\r\n\r\n    simplify = (P: Polynom): Rational => {\r\n        let NumeratorEuclidien = this._numerator.euclidian(P);\r\n        if(!NumeratorEuclidien.reminder.isZero()){return this;}\r\n\r\n        let DenominatorEuclidien = this._denominator.euclidian(P);\r\n        if(!DenominatorEuclidien.reminder.isZero()){return this;}\r\n\r\n        this._numerator = NumeratorEuclidien.quotient;\r\n        this._denominator = DenominatorEuclidien.quotient;\r\n        return this;\r\n    }\r\n\r\n    reduce = (): Rational => {\r\n        console.log(this._numerator.tex)\r\n        this._numerator.factorize();\r\n        console.log(this._numerator.factors.map(x => x.tex))\r\n        for(let f of this._numerator.factors){\r\n            this.simplify(f);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    opposed = (): Rational => {\r\n        this._numerator.opposed();\r\n        return this;\r\n    }\r\n    add = (R: Rational): Rational => {\r\n        // 1. Make sure both rational are at the same denominator\r\n        // 2. Add the numerators.\r\n        // 3. Simplify\r\n\r\n        // Store the adding denominator\r\n        let denominator = this._denominator.clone()\r\n\r\n        // Amplif the main rational polynom by the adding denominator\r\n        this.amplify(R._denominator)\r\n\r\n        // Add to the numerator the adding value...\r\n        this._numerator.add(R._numerator.clone().multiply(denominator));\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (R: Rational): Rational => {\r\n        return this.add(R.clone().opposed())\r\n    }\r\n\r\n    limits = (value: Fraction|number, letter?: string):Fraction|number => {\r\n        if(value===Infinity || value===-Infinity){\r\n            let N = this._numerator.monomByDegree(this._numerator.degree(letter), letter),\r\n                D = this._denominator.monomByDegree(this._denominator.degree(letter), letter)\r\n\r\n            N.divide(D)\r\n\r\n            if(N.degree(letter)>0){return N.coefficient.sign()*(Math.pow((value>0?1:-1),N.degree(letter)%2))===1?Infinity:-Infinity}\r\n            if(N.degree(letter)===0){return N.coefficient}\r\n            if(N.degree(letter)>0){return N.coefficient.sign()*(Math.pow(-1,N.degree(letter)%2))===1?0:-0}\r\n        }else{\r\n            return this._numerator.evaluate({letter: value}).divide(this._denominator.evaluate({letter: value}))\r\n        }\r\n    }\r\n}","import Numeric from \"../numeric\";\r\n\r\nexport default class Fraction {\r\n    private _numerator: number;\r\n    private _denominator: number;\r\n\r\n    constructor(value?: any, denominatorOrPeriodic?: number) {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n\r\n        if (value !== undefined) {\r\n            this.parse(value, denominatorOrPeriodic);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isFraction() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n\r\n    get numerator(): number {\r\n        return this._numerator;\r\n    }\r\n\r\n    set numerator(value: number) {\r\n        this._numerator = value;\r\n    }\r\n\r\n    get denominator(): number {\r\n        return this._denominator;\r\n    }\r\n\r\n    set denominator(value: number) {\r\n        this._denominator = value;\r\n    }\r\n\r\n    get value(): number {\r\n        return this._numerator / this._denominator;\r\n    }\r\n\r\n    // Display getter\r\n    get tex(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else if (this._numerator < 0) {\r\n            return `-\\\\frac{ ${-this._numerator} }{ ${this._denominator} }`;\r\n        } else {\r\n            return `\\\\frac{ ${this._numerator} }{ ${this._denominator} }`;\r\n        }\r\n    }\r\n\r\n    get display(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else {\r\n            return `${this._numerator}/${this._denominator}`;\r\n        }\r\n    }\r\n\r\n    // Helper function to display fractions\r\n    get frac(): string {\r\n        return this.tex;\r\n    }\r\n\r\n    get dfrac(): string {\r\n        return this.tex.replace('\\\\frac', '\\\\dfrac');\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse the value to get the numerator and denominator\r\n     * @param value : number or string to parse to get the fraction\r\n     * @param denominatorOrPeriodic (optional|number) : length of the periodic part: 2.333333 => 1 or denominator value\r\n     */\r\n    parse = (value: any, denominatorOrPeriodic?: number): Fraction => {\r\n        let S: string[];\r\n\r\n        // A null value means a zero fraction.\r\n        if (value === null || value === \"\") {\r\n            this._numerator = 0;\r\n            this._denominator = 1;\r\n            return this;\r\n        }\r\n\r\n        switch (typeof value) {\r\n            case \"string\":\r\n                // Split the sting value in two parts: Numerator/Denominator\r\n                S = value.split('/');\r\n\r\n                // Security checks\r\n                    if (S.length > 2) throw \"Two many divide signs\";\r\n                    if (S.map(x => x === '' || isNaN(Number(x))).includes(true)) throw \"Not a number\"\r\n\r\n\r\n                if (S.length === 1) {\r\n                    // No divide sign\r\n                    return this.parse(+S[0]);\r\n                } else if (S.length === 2) {\r\n                    // One divide signe\r\n                    // We check if the denominator is zero\r\n                    if (S[1] === '0') {\r\n                        this._numerator = NaN;\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._numerator = +S[0];\r\n                        this._denominator = +S[1];\r\n                    }\r\n                } else {\r\n                    // More than one divide sign ?\r\n                    this._numerator = NaN;\r\n                    this._denominator = 1;\r\n                }\r\n                break;\r\n            case \"number\":\r\n                if (Number.isSafeInteger(value)) {\r\n                    // The given value is an integer\r\n                    this._numerator = +value;\r\n\r\n                    if (denominatorOrPeriodic === undefined || !Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._denominator = +denominatorOrPeriodic;\r\n                    }\r\n                } else {\r\n                    // The given value is a float number\r\n\r\n                    // Get the number of decimals after the float sign\r\n                    let p: number = (value.toString()).split('.')[1].length;\r\n\r\n                    // Transform the float number in two integer\r\n                    if (denominatorOrPeriodic === undefined) {\r\n                        this._numerator = value * Math.pow(10, p);\r\n                        this._denominator = Math.pow(10, p);\r\n                    } else if (Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._numerator = value * Math.pow(10, p) - Math.floor(value * Math.pow(10, p - denominatorOrPeriodic));\r\n                        this.denominator = Math.pow(10, p) - Math.pow(10, p - denominatorOrPeriodic)\r\n                    }\r\n                }\r\n                break;\r\n            case \"object\":\r\n                if (value.isFraction) {\r\n                    this._numerator = +value.numerator;\r\n                    this._denominator = +value.denominator;\r\n                }\r\n                break;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): Fraction => {\r\n        let F = new Fraction();\r\n        F.numerator = +this._numerator;\r\n        F.denominator = +this._denominator;\r\n        return F;\r\n    };\r\n\r\n    zero = (): Fraction => {\r\n        this._numerator = 0;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    one = (): Fraction => {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    infinite = (): Fraction => {\r\n        this._numerator = Infinity;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    invalid = (): Fraction => {\r\n        this._numerator = NaN;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Fraction => {\r\n        this._numerator = -this._numerator;\r\n        return this;\r\n    };\r\n\r\n    add = (F: Fraction): Fraction => {\r\n        let N: number = this._numerator,\r\n            D: number = this._denominator;\r\n\r\n        this._numerator = N * F.denominator + F.numerator * D;\r\n        this._denominator = D * F.denominator;\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (F: Fraction): Fraction => {\r\n        return this.add(F.clone().opposed());\r\n    };\r\n\r\n    multiply = (F: Fraction | number): Fraction => {\r\n        // Parse the value.\r\n        // If it's a fraction, return a clone of it\r\n        // If it's an integer, return the fraction F/1\r\n        let Q = new Fraction(F);\r\n\r\n        this._numerator = this._numerator * Q.numerator;\r\n        this._denominator = this._denominator * Q.denominator;\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    divide = (F: Fraction | number): Fraction => {\r\n        let Q = new Fraction(F);\r\n\r\n        if (Q.numerator === 0) {\r\n            return new Fraction().infinite();\r\n        }\r\n\r\n        let N: number = +this._numerator,\r\n            D: number = +this._denominator;\r\n\r\n        this._numerator = N * Q.denominator;\r\n        this._denominator = D * Q.numerator;\r\n        return this.reduce();\r\n    };\r\n\r\n    invert = (): Fraction => {\r\n        let n = +this._numerator, d = +this._denominator;\r\n        this._numerator = d;\r\n        this._denominator = n;\r\n\r\n        return this;\r\n    }\r\n    pow = (p: number): Fraction => {\r\n        if (!Number.isSafeInteger(p)) {\r\n            return this.invalid();\r\n        }\r\n        this.reduce();\r\n\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        this._numerator = this._numerator ** Math.abs(p);\r\n        this._denominator = this._denominator ** Math.abs(p);\r\n        return this;\r\n    };\r\n\r\n    root = (p: number): Fraction => {\r\n        // TODO: nth - root of a fraction => this will return another type of coefficient.\r\n\r\n        // Check if they are perfect roots..\r\n        if (p === 0) {\r\n            return this;\r\n        }\r\n\r\n        // If negative, invert the fraction\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        let n = Math.pow(this._numerator, Math.abs(1 / p)),\r\n            d = Math.pow(this._denominator, Math.abs(1 / p));\r\n\r\n        this._numerator = Math.pow(this._numerator, Math.abs(1 / p));\r\n        this._denominator = Math.pow(this._denominator, Math.abs(1 / p));\r\n        return this;\r\n    }\r\n\r\n    sqrt = (): Fraction => {\r\n        return this.root(2);\r\n    }\r\n\r\n    abs = (): Fraction => {\r\n        this._numerator = Math.abs(this._numerator);\r\n        this._denominator = Math.abs(this._denominator);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations specific to fractions\r\n    // ------------------------------------------\r\n    reduce = (): Fraction => {\r\n        let g = Numeric.gcd(this._numerator, this._denominator);\r\n        this._numerator = this._numerator / g;\r\n        this._denominator = this._denominator / g;\r\n\r\n        if (this._denominator < 0) {\r\n            this._denominator = -this._denominator;\r\n            this._numerator = -this._numerator;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    amplify = (k: number): Fraction => {\r\n        if (Number.isSafeInteger(k)) {\r\n            this._numerator *= k;\r\n            this._denominator *= k;\r\n        }\r\n        return this;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param F (Coefficient) The coefficient to compare\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (F: Fraction, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n\r\n        switch (sign) {\r\n            case '>':\r\n                return this.value > F.value;\r\n            case \">=\" || \"=>\" || \"geq\":\r\n                return this.value >= F.value;\r\n            case \"<\":\r\n                return this.value < F.value;\r\n            case \"<=\" || \"=>\" || \"leq\":\r\n                return this.value <= F.value;\r\n            case \"=\":\r\n                // let F2: Fraction = F.clone().reduce(),\r\n                //     F1: Fraction = this.clone().reduce();\r\n                // return (F1.numerator === F2.numerator && F1.denominator === F2.denominator);\r\n                return this.value === F.value;\r\n            case \"<>\":\r\n                return this.value !== F.value;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n    /* Compare shortcuts */\r\n    lesser = (than: Fraction): Boolean => {\r\n        return this.compare(than, '<');\r\n    };\r\n    leq = (than: Fraction): Boolean => {\r\n        return this.compare(than, '<=');\r\n    };\r\n    greater = (than: Fraction): Boolean => {\r\n        return this.compare(than, '>');\r\n    };\r\n    geq = (than: Fraction): Boolean => {\r\n        return this.compare(than, '>=');\r\n    };\r\n    isEqual = (than: Fraction): boolean => {\r\n        return this.compare(than, '=');\r\n    }\r\n    isDifferent = (than: Fraction): boolean => {\r\n        return this.compare(than, '<>');\r\n    }\r\n    isOpposed = (p: Fraction): boolean => {\r\n        return this.isEqual(p.clone().opposed());\r\n    }\r\n    isInverted = (p: Fraction): boolean => {\r\n        return this.isEqual(new Fraction().one().divide(p.clone()));\r\n    }\r\n    isZero = (): boolean => {\r\n        return this._numerator === 0;\r\n    }\r\n    isOne = (): boolean => {\r\n        return this._numerator === 1 && this._denominator === 1;\r\n    }\r\n    isPositive = (): boolean => {\r\n        return this.sign()===1;\r\n    }\r\n    isNegative = (): boolean => {\r\n        return this.sign()===-1;\r\n    }\r\n    isNaN = (): boolean => {\r\n        return isNaN(this._numerator);\r\n    }\r\n    isInfinity = (): boolean => {\r\n        return this._numerator === Infinity;\r\n    }\r\n    isFinite = (): boolean => {\r\n        return !this.isInfinity();\r\n    }\r\n    isSquare = (): boolean => {\r\n        return Math.sqrt(this._numerator) % 1 === 0 && Math.sqrt(this._denominator) % 1 === 0\r\n    }\r\n    isReduced = (): boolean => {\r\n        return Math.abs(Numeric.gcd(this._numerator, this._denominator))===1\r\n    }\r\n    sign = (): number => {\r\n        return (this._numerator * this._denominator >= 0) ? 1 : -1;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Simple function to determine if it's a fraction\r\n     */\r\n    areEquals = (...F: Fraction[]): boolean => {\r\n        for (let i = 0; i < F.length; i++) {\r\n            if (!this.isEqual(F[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n}","export default class Nthroot {\r\n    private _radical: number;\r\n    private _nth: number;\r\n    private _coefficient: number;\r\n    private _isValid:boolean;\r\n\r\n    constructor() {\r\n        this._radical = 1;\r\n        this._coefficient = 1;\r\n        this._nth = 2;\r\n        this._isValid = true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get radical(): number {\r\n        return this._radical;\r\n    }\r\n\r\n    set radical(value: number) {\r\n        this._radical = value;\r\n    }\r\n\r\n    get nth(): number {\r\n        return this._nth;\r\n    }\r\n\r\n    set nth(value: number) {\r\n        if (Number.isSafeInteger(value) && value >= 2) {\r\n            this._nth = value;\r\n        } else {\r\n            // Error setting the nth root.\r\n            console.log('Error setting the nth root');\r\n            this._nth = 2;\r\n        }\r\n    }\r\n\r\n    get coefficient(): number {\r\n        return this._coefficient;\r\n    }\r\n\r\n    set coefficient(value: number) {\r\n        this._coefficient = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let C: string;\r\n\r\n        if (this._coefficient === 1) {\r\n            C = '';\r\n        } else if (this._coefficient === -1) {\r\n            C = '-';\r\n        } else {\r\n            C = this._coefficient.toString();\r\n        }\r\n\r\n        if (this._radical === 1) {\r\n            return `${this._coefficient}`;\r\n        } else {\r\n            if (this._nth === 2) {\r\n                return `${C}\\\\sqrt{${this._radical}}`\r\n            } else {\r\n                return `${C}\\\\sqrt[${this._nth}]{${this._radical}}`\r\n            }\r\n        }\r\n    }\r\n\r\n    get value(): number {\r\n        return this._coefficient * Math.pow(this._radical, 1 / this._nth);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (radical: number, nthroot?: number, coefficient?: number): Nthroot => {\r\n        this._coefficient = (coefficient === undefined) ? 1 : coefficient;\r\n        this._nth = (nthroot === undefined) ? 2 : nthroot;\r\n        this._radical = (radical === undefined) ? 1 : radical;\r\n\r\n        if(this._nth%2===0 && this._radical<0){\r\n            this._isValid = false;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    reduce = (): Nthroot => {\r\n        // Max value to test.\r\n        let V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n        while (V > 1) {\r\n            if (this._radical % Math.pow(V, this._nth) === 0) {\r\n                // It's dividable by V^n\r\n                this._coefficient *= V;\r\n                this._radical = this._radical / Math.pow(V, this._nth);\r\n\r\n                // Redifine the new testing value (this is optimization)\r\n                V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n                continue;\r\n            }\r\n            V--;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiply = (N: Nthroot): Nthroot => {\r\n        this._radical *= N.radical;\r\n        return this.reduce();\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Help functions\r\n    // ------------------------------------------\r\n    hasRadical = ():boolean => {\r\n        return !(this._radical===1 || this._radical===0 || this._isValid===false)\r\n    };\r\n}","import Point from \"./point\";\r\nimport Fraction from \"../coefficients/fraction\";\r\nimport Equation from \"../algebra/equation\";\r\nimport Polynom from \"../algebra/polynom\";\r\n\r\n\r\nexport default class Circle {\r\n    private _center: Point;\r\n    private _radius: Fraction;\r\n    private _exists: boolean;\r\n    constructor(...values: any) {\r\n        this._exists = false\r\n\r\n        if(values!==undefined){this.parse(...values)}\r\n    }\r\n\r\n    private parse(...values: any) {\r\n        if(values.length===2){\r\n            this._center = new Point(values[0])\r\n            this._radius = new Fraction(values[1])\r\n        }\r\n    }\r\n\r\n    get tex(): string {\r\n        let cx, cy\r\n        if(this._center.x.isZero()){\r\n            cx = 'x^2'\r\n        }else{\r\n            cx = `\\\\left(x-${this._center.x.tex}\\\\right)^2`\r\n        }\r\n        if(this._center.y.isZero()){\r\n            cy = 'y^2'\r\n        }else{\r\n            cy = `\\\\left(y-${this._center.y.tex}\\\\right)^2`\r\n        }\r\n        return `${cx}+${cy}=${this._radius.pow(2).tex}`\r\n    }\r\n\r\n    get developed():string {\r\n        let equ = new Equation(\r\n            new Polynom(`(x-(${this._center.x.display}))^2+(y-(${this._center.y.display}))^2`),\r\n            new Polynom(`${this._radius.pow(2).display}`)\r\n        )\r\n\r\n        return equ.moveLeft().tex;\r\n    }\r\n}","/**\r\n * This class works for 2d line in a plane.\r\n */\r\n\r\nimport Fraction from \"../coefficients/fraction\";\r\nimport Vector from \"./vector\";\r\nimport Point from \"./point\";\r\nimport Polynom from \"../algebra/polynom\";\r\nimport Numeric from \"../numeric\";\r\nimport Equation from \"../algebra/equation\";\r\n\r\nexport default class Line {\r\n    // A line is defined as the canonical form\r\n    // ax + by + c = 0\r\n    private _a: Fraction;\r\n    private _b: Fraction;\r\n    private _c: Fraction;\r\n    private _OA: Point;\r\n    private _d: Vector;\r\n    private _n: Vector;\r\n    private _exists: boolean\r\n\r\n    constructor(...values: any) {\r\n\r\n        this._exists = false;\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isLine():boolean {return true;}\r\n    get exists(): boolean {return this._exists; }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equation(): Equation {\r\n        return new Equation(new Polynom().parse('xy', this._a, this._b, this._c), new Polynom('0')).simplify();\r\n    }\r\n    get tex(): { canonical: string, mxh: string, parametric: string } {\r\n        // canonical    =>  ax + by + c = 0\r\n        // mxh          =>  y = -a/b x - c/b\r\n        // parametric   =>  (xy) = OA + k*d\r\n\r\n        let canonical = this.equation;\r\n        // Make sur the first item is positive.\r\n        if(this._a.isNegative()){\r\n            canonical.multiply(-1);\r\n        }\r\n\r\n        return {\r\n            canonical: canonical.tex,\r\n            mxh: this.slope.isInfinity() ? 'x=' + this.OA.x.tex : 'y=' + new Polynom().parse('x', this.slope, this.height).tex,\r\n            parametric: `${Point.pmatrix('x', 'y')} = ${Point.pmatrix(this._OA.x, this._OA.y)} + k\\\\cdot ${Point.pmatrix(this._d.x, this._d.y)}`\r\n        }\r\n    }\r\n\r\n    get a(): Fraction {\r\n        return this._a;\r\n    }\r\n\r\n    set a(value: Fraction) {\r\n        this._a = value;\r\n    }\r\n\r\n    get b(): Fraction {\r\n        return this._b;\r\n    }\r\n\r\n    set b(value: Fraction) {\r\n        this._b = value;\r\n    }\r\n\r\n    get c(): Fraction {\r\n        return this._c;\r\n    }\r\n\r\n    set c(value: Fraction) {\r\n        this._c = value;\r\n    }\r\n\r\n    get OA(): Point {\r\n        return this._OA;\r\n    }\r\n\r\n    set OA(value: Point) {\r\n        this._OA = value;\r\n    }\r\n\r\n    get d(): Vector {\r\n        return this._d;\r\n    }\r\n\r\n    get n(): Vector {\r\n        return this._n;\r\n    }\r\n\r\n    get normal(): Vector {\r\n        return new Vector(this._a, this._b);\r\n    }\r\n\r\n    set d(value: Vector) {\r\n        this._d = value;\r\n    }\r\n\r\n    get slope(): Fraction {\r\n        return this._a.clone().opposed().divide(this._b);\r\n    }\r\n\r\n    get height(): Fraction {\r\n        return this._c.clone().opposed().divide(this._b);\r\n    }\r\n\r\n// ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...values: any): Line => {\r\n        this._exists = false;\r\n\r\n        if (values.length === 3) {\r\n            return this.parseByCoefficient(values[0], values[1], values[2]);\r\n        } else if (values.length === 2) {\r\n            if (values[0].isPoint && values[1].isVector) {\r\n                return this.parseByPointAndVector(values[0], values[1]);\r\n            } else if (values[0].isPoint && values[1].isPoint) {\r\n                return this.parseByPointAndVector(values[0], new Vector(values[0], values[1]));\r\n            }\r\n        } else if (values.length === 1){\r\n            // It's a already a line - clone it !\r\n            if(values[0].isLine){\r\n                return values[0].clone();\r\n            }\r\n\r\n            // Maybe it's a string or an equation\r\n            let equ = new Equation(values[0]);\r\n            if(equ.isEquation){\r\n                // Check if it's a valid equation.\r\n                equ.reorder(true)\r\n\r\n                // It must contain either x, y or both.\r\n                let letters = new Set(equ.letters());\r\n\r\n                // No 'x', no 'y' in the equations\r\n                if(!(letters.has('x') || letters.has('y'))){return;}\r\n\r\n                // Another letter in the equation.\r\n                for(let elem of ['x', 'y']){\r\n                    if(letters.has(elem)){\r\n                        letters.delete(elem)}\r\n                }\r\n\r\n                if(letters.size>0){\r\n                    console.log('Extra variable in the equation.')\r\n                    return this;\r\n                }\r\n\r\n                // Everything should be ok now...\r\n                return this.parseByCoefficient(equ.left.monomByLetter('x').coefficient, equ.left.monomByLetter('y').coefficient, equ.left.monomByDegree(0).coefficient)\r\n            }\r\n        }\r\n        // TODO: Add the ability to create line from a normal vector\r\n        console.log('Someting wrong happend while creating the line')\r\n        return this;\r\n    }\r\n\r\n    parseByCoefficient = (a: Fraction, b: Fraction, c: Fraction): Line => {\r\n        this._a = new Fraction(a);\r\n        this._b = new Fraction(b);\r\n        this._c = new Fraction(c);\r\n\r\n        // TODO: initialize direction and reference point\r\n        this._d = new Vector(this._b.clone(), this._a.clone().opposed());\r\n        this._OA = new Point(new Fraction().zero(), this._c.clone());\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    parseByPointAndVector = (P: Point, d: Vector): Line => {\r\n        // OX = OP + k*d\r\n        // x = px + kdx     * dy\r\n        // y = py + kdy     * dx\r\n        // ------------------\r\n        // dy * x = px * dy + kdxdy\r\n        // dx * y = py * dx + kdxdy\r\n        // ------------------\r\n        // dy * x - dx * y = px * dy - py * dx\r\n        // dy * x - dx * y - (px * dy - py * dx) = 0\r\n        this.parseByCoefficient(\r\n            d.y,\r\n            d.x.clone().opposed(),\r\n            P.x.clone().multiply(d.y).subtract(P.y.clone().multiply(d.x)).opposed()\r\n        )\r\n\r\n        // Choose the current values as point and direction vector instead of the automatic version.\r\n        this._OA = P.clone();\r\n        this._d = d.clone();\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    clone = (): Line => {\r\n        this._a = this._a.clone();\r\n        this._b = this._b.clone();\r\n        this._c = this._c.clone();\r\n\r\n        this._d = this._d.clone();\r\n        this._OA = this._OA.clone();\r\n        this._n = this._n.clone();\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    isParellelTo = (line: Line): Boolean => {\r\n        // Do they have the isSame direction ?\r\n        return this.slope.isEqual(line.slope) && this.height.isDifferent(line.height);\r\n    }\r\n    isSameAs = (line: Line): Boolean => {\r\n        return this.slope.isEqual(line.slope) && this.height.isEqual(line.height);\r\n    }\r\n    simplifyDirection = (): Line => {\r\n        let lcm = Numeric.lcm(this._d.x.denominator, this._d.y.denominator),\r\n            gcd = Numeric.gcd(this._d.x.numerator, this._d.y.numerator);\r\n\r\n        this._d.x.multiply(lcm).divide(gcd);\r\n        this._d.y.multiply(lcm).divide(gcd);\r\n        return this;\r\n    }\r\n    intersection = (line: Line): { point: Point, hasIntersection: boolean, isParallel: boolean, isSame: boolean } => {\r\n        let Pt = new Point(), isParallel = false, isSame = false, hasIntersection = true;\r\n\r\n        // this         => ax+by+c = 0\r\n        // line         => dx+ey+f = 0\r\n        //\r\n        //  aex + bey + ce = 0\r\n        //  dbx + bey + bf = 0\r\n        // (ae-db)x + ce-bf = 0\r\n        //\r\n        //  adx + bdy + cd = 0\r\n        //  adx + aey + af = 0\r\n        // (bd-ae)y + (cd-af)\r\n        //\r\n        // x = (bf-ce)/(ae-db)\r\n        // y = (af-cd)/(bd-ae)\r\n\r\n\r\n        // Theres is no 'y'\r\n        if (this._b.isZero() || line.b.isZero()) {\r\n            // TODO : handle no y in the line canonical form\r\n        }\r\n\r\n        if (this.isParellelTo(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isParallel = true;\r\n        } else if (this.isSameAs(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isSame = true;\r\n        } else {\r\n            Pt.x = this._b.clone().multiply(line.c).subtract(this._c.clone().multiply(line.b))\r\n                .divide(this._a.clone().multiply(line.b).subtract(this._b.clone().multiply(line.a)));\r\n            Pt.y = this._a.clone().multiply(line.c).subtract(this._c.clone().multiply(line.a))\r\n                .divide(this._b.clone().multiply(line.a).subtract(this._a.clone().multiply(line.b)));\r\n        }\r\n\r\n        return {\r\n            point: Pt,\r\n            hasIntersection: !(isParallel || isSame),\r\n            isParallel,\r\n            isSame\r\n        };\r\n    }\r\n\r\n    distanceTo(pt: Point): { value: number, fraction: Fraction, tex: string } {\r\n        let numerator = pt.x.clone().multiply(this._a)\r\n                .add(pt.y.clone().multiply(this._b))\r\n                .add(this._c).abs(),\r\n            d2 = this.normal.normSquare;\r\n\r\n        // The denominator is null - shouldn't be possible\r\n        if (d2.isZero()) {\r\n            return {\r\n                value: NaN,\r\n                tex: 'Not a line',\r\n                fraction: new Fraction().infinite()\r\n            }\r\n        }\r\n        // The denominator is a perfect square - simplify the tex result\r\n        let value = numerator.value / Math.sqrt(d2.value),\r\n            F = numerator.clone().divide(d2.clone().sqrt());\r\n\r\n        // The denominator is a perfect square.\r\n        if (d2.isSquare()) {\r\n            return {\r\n                value,\r\n                tex: F.tex,\r\n                fraction: F\r\n            }\r\n        }\r\n        // Complete answer...\r\n        return {\r\n            value,\r\n            tex: `\\\\frac{${numerator.tex}}{\\\\sqrt{${d2.tex}}}`,\r\n            fraction: F\r\n        };\r\n    }\r\n\r\n    hitSegment(A: Point, B: Point): boolean {\r\n        let iPt = this.intersection(\r\n            new Line(A, B)\r\n        )\r\n\r\n        // There is an intersection point\r\n        if(iPt.hasIntersection) {\r\n            return iPt.point.x.value >= Math.min(A.x.value, B.x.value)\r\n                && iPt.point.x.value <= Math.max(A.x.value, B.x.value)\r\n                && iPt.point.y.value >= Math.min(A.y.value, B.y.value)\r\n                && iPt.point.y.value <= Math.max(A.y.value, B.y.value)\r\n        }\r\n        return false;\r\n    }\r\n    // ------------------------------------------\r\n    // Special functions\r\n    // ------------------------------------------\r\n    canonicalAsFloatCoefficient(decimals: number): string{\r\n        if(decimals===undefined){\r\n            decimals = 2;\r\n        }\r\n\r\n        let ca = this._a.value,\r\n            cb = this._b.value,\r\n            cc= this._c.value,\r\n            canonical = '';\r\n\r\n        if(!this._a.isZero()){\r\n            if(this._a.isOne()){\r\n                canonical = 'x'\r\n            }else if(this._a.clone().opposed().isOne()){\r\n                canonical = '-x'\r\n            }else{\r\n                canonical = this._a.value.toFixed(decimals)+'x'\r\n            }\r\n        }\r\n\r\n        if(!this._b.isZero()){\r\n            if(this._b.isPositive()){canonical+='+'}\r\n            canonical += this._b.value.toFixed(decimals) + 'y'\r\n        }\r\n\r\n        if(!this._c.isZero()){\r\n            if(this._c.isPositive()){canonical+='+'}\r\n            canonical += this._c.value.toFixed(decimals)\r\n        }\r\n\r\n\r\n        return canonical + '=0';\r\n    }\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport Fraction from \"../coefficients/fraction\";\r\n\r\n//TODO: Ajouter une vérification si la droite existe.\r\nexport default class Point {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n    private _exist: Boolean;\r\n\r\n    constructor(...values: any) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this\r\n    };\r\n\r\n    get isPoint() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.tex);\r\n        pts.push(this._y.tex);\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Point => {\r\n        // Initialize the value.\r\n        this.zero();\r\n\r\n        // Nothing is given\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        // One element is given - might be already a point !\r\n        if (values.length === 1) {\r\n            // it's already a point - clone it\r\n            if (values[0] instanceof Point) {\r\n                this._x = values[0].x.clone()\r\n                this._y = values[0].y.clone()\r\n                return this;\r\n            }\r\n\r\n            // Value is given as string, comma separated.\r\n            if(typeof values[0] === 'string'){\r\n                let xy = values[0].split(',')\r\n                if(xy.length===2){\r\n                    this._x = new Fraction(xy[0]).reduce()\r\n                    this._y = new Fraction(xy[1]).reduce()\r\n                    return this;\r\n                }\r\n            }\r\n\r\n            // Value given as an object with {x: value, y: value}\r\n            if (values[0].x !== undefined && values[0].y !== undefined) {\r\n                this._x = new Fraction(values[0].x).reduce()\r\n                this._y = new Fraction(values[0].y).reduce()\r\n            } else {\r\n                return this.zero();\r\n            }\r\n        }\r\n        if (values.length === 2) {\r\n            this._x = new Fraction(values[0]).reduce()\r\n            this._y = new Fraction(values[1]).reduce()\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Point => {\r\n        this._x = this._x.clone()\r\n        this._y = this._y.clone()\r\n\r\n        return this\r\n    }\r\n\r\n    zero = (): Point => {\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    origin = (): Point => {\r\n        this.zero();\r\n        return this;\r\n    }\r\n\r\n    middleOf = (P1: Point, P2: Point): Point => {\r\n        this._x = P1.x.clone().add(P2.x).divide(2);\r\n        this._y = P1.y.clone().add(P2.y).divide(2);\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Display functions\r\n    // ------------------------------------------\r\n    texValues = (numberOfDigits: number): string => {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.value.toFixed(numberOfDigits===undefined?2:numberOfDigits));\r\n        pts.push(this._y.value.toFixed(numberOfDigits===undefined?2:numberOfDigits));\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Static functions\r\n    // ------------------------------------------\r\n    static pmatrix = (a: any, b: any, c?: any): string => {\r\n        if (c === undefined) {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\end{pmatrix}`;\r\n        } else {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\\\\\ ${c.tex ? c.tex : c} \\\\end{pmatrix}`;\r\n        }\r\n    };\r\n\r\n}\r\n","import Point from \"./point\";\r\nimport Fraction from \"../coefficients/fraction\";\r\nimport Vector from \"./vector\";\r\nimport Line from \"./line\";\r\nimport Equation from \"../algebra/equation\";\r\n\r\ninterface remarquableLines {\r\n    'medians': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'mediators': {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line,\r\n        'intersection': Point\r\n    },\r\n    'heights': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'bisectors': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    }\r\n}\r\n\r\nexport default class Triangle {\r\n    private _A: Point;\r\n    private _B: Point;\r\n    private _C: Point;\r\n    private _lines: {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line\r\n    };\r\n    private _middles: {\r\n        'AB': Point,\r\n        'AC': Point,\r\n        'BC': Point\r\n    };\r\n    private _remarquables: remarquableLines;\r\n\r\n\r\n    constructor(...values: any) {\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    get isTriangle():boolean {return true;}\r\n\r\n    // ------------------------------------------\r\n    // Getter and setters\r\n    // ------------------------------------------\r\n\r\n    get A(): Point {\r\n        return this._A;\r\n    }\r\n\r\n    get B(): Point {\r\n        return this._B;\r\n    }\r\n\r\n    get C(): Point {\r\n        return this._C;\r\n    }\r\n\r\n    get AB(): Vector {\r\n        return this.getSegment('A', 'B');\r\n    }\r\n\r\n    get BA(): Vector {\r\n        return this.getSegment('B', 'A');\r\n    }\r\n\r\n    get BC(): Vector {\r\n        return this.getSegment('B', 'C');\r\n    }\r\n\r\n    get CB(): Vector {\r\n        return this.getSegment('C', 'B');\r\n    }\r\n\r\n    get AC(): Vector {\r\n        return this.getSegment('A', 'C');\r\n    }\r\n\r\n    get CA(): Vector {\r\n        return this.getSegment('C', 'A');\r\n    }\r\n\r\n    get isRectangle(): boolean {\r\n        if (this.AB.isNormalTo(this.BC)) {\r\n            return true;\r\n        }\r\n        if (this.AB.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n        if (this.BC.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    get isEquilateral(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) &&\r\n            this.AB.normSquare.isEqual(this.AC.normSquare);\r\n    }\r\n\r\n    get isIsocele(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) ||\r\n            this.AB.normSquare.isEqual(this.AC.normSquare) ||\r\n            this.BC.normSquare.isEqual(this.AC.normSquare)\r\n    }\r\n\r\n    get lines(): { 'AB': Line, 'BC': Line, 'AC': Line } {\r\n        return this._lines;\r\n    }\r\n\r\n    get remarquables(): remarquableLines {\r\n        return this._remarquables;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Parse values to a triangle. Supported formats:\r\n     * Point, Point, Point\r\n     * x1, y1, x2, y2, x3, y3\r\n     * TODO: Something else ?\r\n     * @param values\r\n     */\r\n    parse = (...values: any): Triangle => {\r\n        if (values.length === 6) {\r\n            // Check if all values are number or fractions.\r\n            let v = values.map((x: any) => new Fraction(x));\r\n            return this.parse(\r\n                new Point(v[0], v[1]),\r\n                new Point(v[2], v[3]),\r\n                new Point(v[4], v[5]),\r\n            )\r\n        } else if (values.length === 3) {\r\n            // Possibilities:\r\n            // - Three points (or part of points, only dict for example, or array (TODO: Add the array syntax for point)\r\n            // - Three lines\r\n            // - Three lines as text.\r\n            if(values.filter((x:any) => typeof x === 'string').length===3) {\r\n                return this.parse( ...values.map((x:string) => new Line(x)) )\r\n            }else if(values.filter((x:any) => x.isLine === true).length===3) {\r\n                // We have three lines\r\n                this._lines = {\r\n                    'AB': values[0],\r\n                    'BC': values[1],\r\n                    'AC': values[2]\r\n                };\r\n\r\n                // Get the intersection points -> build the triangle using these intersection points.\r\n                let intersect = values[0].intersection(values[1]);\r\n                if (intersect.hasIntersection) {\r\n                    this._B = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[1].intersection(values[2]);\r\n                if (intersect.hasIntersection) {\r\n                    this._C = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[2].intersection(values[0]);\r\n                if (intersect.hasIntersection) {\r\n                    this._A = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n            }else {\r\n                // At least, one of the value is not a point.\r\n                if (values.filter((x: any) => x.isPoint === true).length < 3) {\r\n                    return this.parse(\r\n                        new Point(values[0]),\r\n                        new Point(values[1]),\r\n                        new Point(values[2])\r\n                    )\r\n                }\r\n\r\n                // We have three points.\r\n                this._A = values[0].clone();\r\n                this._B = values[1].clone();\r\n                this._C = values[2].clone();\r\n\r\n                this._lines = {\r\n                    'AB': new Line(this._A, this._B),\r\n                    'BC': new Line(this._B, this._C),\r\n                    'AC': new Line(this._A, this._C)\r\n                };\r\n            }\r\n        } else if (values.length === 1) {\r\n            if (values[0].isTriangle === true) {\r\n                return values[0].clone();\r\n            }\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the Triangle class\r\n     */\r\n    clone = (): Triangle => {\r\n        this._A = this._A.clone();\r\n        this._B = this._B.clone();\r\n        this._C = this._C.clone();\r\n\r\n        this._lines = {\r\n            'AB': this._lines.AB.clone(),\r\n            'BC': this._lines.BC.clone(),\r\n            'AC': this._lines.AC.clone()\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Triangle operations and properties\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Generate the Line object for the three segments of the triangle\r\n     */\r\n    private _updateTriangle = () => {\r\n        this._middles = {\r\n            'AB': new Point().middleOf(this._A, this._B),\r\n            'AC': new Point().middleOf(this._A, this._C),\r\n            'BC': new Point().middleOf(this._B, this._C)\r\n        }\r\n\r\n        this._remarquables = this._calculateRemarquableLines();\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the Point class for the given name\r\n     * @param ptName\r\n     */\r\n    private getPointByName = (ptName: string): Point => {\r\n        switch (ptName.toUpperCase()) {\r\n            case 'A':\r\n                return this._A;\r\n            case 'B':\r\n                return this._B;\r\n            case 'C':\r\n                return this._C;\r\n        }\r\n\r\n        // Something went wrong ! Return the first point\r\n        return this._A;\r\n    }\r\n    /**\r\n     * Get the vector for the segment given by name.\r\n     * @param ptName1\r\n     * @param ptName2\r\n     */\r\n    private getSegment = (ptName1: string, ptName2: string): Vector => {\r\n        return new Vector(\r\n            this.getPointByName(ptName1),\r\n            this.getPointByName(ptName2)\r\n        );\r\n    }\r\n\r\n    private _calculateRemarquableLines = (): remarquableLines => {\r\n        let remarquables: remarquableLines = {\r\n            'medians': {\r\n                'A': new Line(this._A, this._middles.BC),\r\n                'B': new Line(this._B, this._middles.AC),\r\n                'C': new Line(this._C, this._middles.AB),\r\n                'intersection': null\r\n            },\r\n            'mediators': {\r\n                'AB': new Line(this._middles.AB, new Vector(this._A, this._B).normal()),\r\n                'AC': new Line(this._middles.AC, new Vector(this._A, this._C).normal()),\r\n                'BC': new Line(this._middles.BC, new Vector(this._B, this._C).normal()),\r\n                'intersection': null\r\n            },\r\n            'heights': {\r\n                'A': new Line(this._A, new Vector(this._B, this._C).normal()),\r\n                'B': new Line(this._B, new Vector(this._A, this._C).normal()),\r\n                'C': new Line(this._C, new Vector(this._A, this._B).normal()),\r\n                'intersection': null\r\n            },\r\n            'bisectors': {\r\n                'A': this._calculateBisectors('A'),\r\n                'B': this._calculateBisectors('B'),\r\n                'C': this._calculateBisectors('C'),\r\n                'intersection': null\r\n            }\r\n        }\r\n\r\n        // As it's a triangle, we assume the lines are intersecting and aren't parallel or superposed.\r\n        remarquables.medians.intersection = remarquables.medians.A.intersection(remarquables.medians.B).point;\r\n        remarquables.mediators.intersection = remarquables.mediators.AB.intersection(remarquables.mediators.BC).point;\r\n        remarquables.heights.intersection = remarquables.heights.A.intersection(remarquables.heights.B).point;\r\n        remarquables.bisectors.intersection = remarquables.bisectors.A.intersection(remarquables.bisectors.B).point;\r\n\r\n        // Everything was calculated for the remarquable lines.\r\n        return remarquables;\r\n    }\r\n\r\n    private _calculateBisectors = (pt: string): Line => {\r\n        let tlines = this.lines, d1, d2;\r\n\r\n        if(pt==='A'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.AC;\r\n        }else if(pt==='B'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.BC;\r\n        }else if(pt==='C'){\r\n            d1 = tlines.BC;\r\n            d2 = tlines.AC;\r\n        }\r\n\r\n        let b1 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm)).reorder(true).simplify()),\r\n            b2 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm).opposed()).reorder(true).simplify());\r\n\r\n        // Must determine which bisectors is in the triangle\r\n        if(pt==='A'){\r\n            return b1.hitSegment(this.B, this.C)?b1:b2;\r\n        }\r\n        if(pt==='B'){\r\n            return b1.hitSegment(this.A, this.C)?b1:b2;\r\n        }\r\n        if(pt==='C'){\r\n            return b1.hitSegment(this.B, this.A)?b1:b2;\r\n        }\r\n\r\n        // Default returns the first bisector\r\n        return b1;\r\n    }\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport Fraction from \"../coefficients/fraction\";\r\nimport Numeric from \"../numeric\";\r\n\r\nexport default class Vector {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n\r\n    constructor(...values: any) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n    };\r\n\r\n    get isVector() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get normSquare(): Fraction {\r\n        return this._x.clone().pow(2).add(this._y.clone().pow(2));\r\n    }\r\n\r\n    get norm(): number {\r\n        return Math.sqrt(this.normSquare.value);\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\begin{pmatrix}${this._x.tex} \\\\\\\\\\ ${this._y.tex} \\\\end{pmatrix}`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Vector => {\r\n        // TODO: Must be more strict about what is given and limit to two dimensional vectors.p\r\n        // Maybe more than one value was given...\r\n        // Initialize the vector\r\n        this.zero();\r\n\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        if (values.length === 1) {\r\n            if (values[0].isVector) {\r\n                return values[0].clone()\r\n            } else {\r\n                return this._parseString(values[0])\r\n            }\r\n        }\r\n\r\n        if (values.length >= 2) {\r\n            // Two points are given - skip the third value.\r\n            if (values[0].isPoint && values[1].isPoint) {\r\n                this._x = values[1].x.clone().subtract(values[0].x)\r\n                this._y = values[1].y.clone().subtract(values[0].y)\r\n                return this;\r\n            }\r\n\r\n            // Fractions or a number are give\r\n            if (values[0].isFraction || !isNaN(values[0])) {\r\n                this._x = new Fraction(values[0])\r\n            }\r\n            if (values[1].isFraction || !isNaN(values[1])) {\r\n                this._y = new Fraction(values[1])\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Vector => {\r\n        let V = new Vector();\r\n\r\n        if (this._x !== null) {\r\n            V.x = this._x.clone();\r\n        }\r\n        if (this._y !== null) {\r\n            V.y = this._y.clone();\r\n        }\r\n        return V;\r\n    }\r\n\r\n    reset = (): Vector => {\r\n        this._x = null;\r\n        this._y = null;\r\n        return this;\r\n    }\r\n\r\n    zero = (): Vector => {\r\n        this.reset();\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    one = (): Vector => {\r\n        this._x = new Fraction();\r\n        this._y = new Fraction();\r\n        return this;\r\n    }\r\n\r\n    private _parseString = (value: string): Vector => {\r\n        // Split comma, semi colon or single space.\r\n        let components = value.split(/[,;\\s]/g);\r\n\r\n        // Validate the fraction values.\r\n        this.x = new Fraction(components[0] || null);\r\n        this.y = new Fraction(components[1] || null);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Vector => {\r\n        this._x.opposed();\r\n        this._y.opposed();\r\n        return this;\r\n    }\r\n\r\n    add = (V: Vector): Vector => {\r\n        this._x.add(V.x);\r\n        this._y.add(V.y);\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (V: Vector): Vector => {\r\n        return this.add(V.clone().opposed());\r\n    }\r\n\r\n    scalarProductWithVector = (V: Vector): Fraction => {\r\n        // TODO: Add the scalar factor !!!!\r\n        return this._x.clone().multiply(V.x).add(this._y.clone().multiply(V.y));\r\n    }\r\n\r\n    static scalarProduct = (v1: Vector, v2: Vector): number => {\r\n        // TODO: Transform to fraction with nthroot.\r\n        return  v1.x.value * v2.x.value + v1.y.value * v2.y.value;\r\n    };\r\n\r\n    normal = (): Vector => {\r\n        let x = this.x.clone().opposed(), y = this.y.clone();\r\n        this._x = y;\r\n        this._y = x;\r\n        return this;\r\n    }\r\n\r\n    isNormalTo = (v: Vector): boolean => {\r\n        return this.scalarProductWithVector(v).isZero()\r\n    }\r\n\r\n    multiplyByScalar = (k: any): Vector => {\r\n        let scalar = new Fraction(k);\r\n        this._x.multiply(scalar);\r\n        this._y.multiply(scalar);\r\n        return this;\r\n    }\r\n\r\n    divideByScalar = (k:any): Vector => {\r\n        return this.multiplyByScalar(new Fraction(k).invert());\r\n    }\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    simplify = (): Vector => {\r\n        // Multiply by the lcm of denominators.\r\n        return this.multiplyByScalar(Numeric.lcm(this._x.denominator, this._y.denominator))\r\n            .divideByScalar(Numeric.gcd(this._x.numerator, this._y.numerator));\r\n    }\r\n\r\n    angleWith = (V: Vector, sharp?: Boolean, radian?: Boolean): number => {\r\n        let scalar = this.scalarProductWithVector(V).value,\r\n            toDegree = radian ? 1 : 180 / Math.PI;\r\n        if (sharp) {\r\n            scalar = Math.abs(scalar);\r\n        }\r\n\r\n        return toDegree * Math.acos(scalar / (this.norm * V.norm));\r\n    }\r\n}\r\n","export default class Numeric{\r\n    static round(value:number, decimals:number=2):number {\r\n        return Number(Math.round(Number(value+'e'+decimals))+'e-'+decimals);\r\n    }\r\n\r\n    /**\r\n     * Get the list of the nth first prime numbers.\r\n     * @param nb : number of primes to choose from\r\n     */\r\n    static prime(nb?:number):number[]{\r\n        let primes:number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973];\r\n        if(nb === undefined){\r\n            return primes;\r\n        }else{\r\n            return primes.slice(0,Math.max(primes.length,nb));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the list of all dividers of a number.\r\n     * @param value\r\n     */\r\n    static dividers(value:number):number[]{\r\n        let D: number[];\r\n        const maxV = Math.sqrt(Math.abs(value));\r\n\r\n        // Initialize the list of dividers.\r\n        D = [];\r\n\r\n        for(let i=1; i<=maxV; i++){\r\n            if(value%i===0){\r\n                D.push(i);\r\n                D.push(value/i);\r\n            }\r\n        }\r\n\r\n        // Order numbers.\r\n        D.sort(function(a, b){return a-b;});\r\n\r\n        // Make sure the array of value is unique.\r\n        return [...new Set(D)];\r\n    }\r\n    /**\r\n     * Great Common Divisor\r\n     * @param values : number values\r\n     */\r\n    static gcd(...values:number[]):number{\r\n        // Define the gcd for two number\r\n        let gcd2 = function(a:number,b:number):number{\r\n            if(b===0){return a;}\r\n            return gcd2(b, a%b);\r\n        };\r\n\r\n        let g:number = 1,\r\n            i:number = 2;\r\n\r\n        // Nothing is given\r\n        if(values.length===0){return 1;}\r\n        // Only one number is given\r\n        if(values.length===1){\r\n            // The first number is zero\r\n            if(values[0]===0){return 1;}\r\n            // Return the number\r\n            return values[0];\r\n        }\r\n\r\n        // We have at least 2 numbers.\r\n        g = gcd2(values[0],values[1]);\r\n\r\n        // The gcd of the two first value is one ? It's already finished.\r\n        if(g===1){return 1;}\r\n\r\n        // The current gcd isn't one. Continue with all next values.\r\n        for(i=2; i<values.length; i++){\r\n            g = gcd2(g, values[i]);\r\n            // Escape if gcd is already one.\r\n            if(g===1){break;}\r\n        }\r\n\r\n        return Math.abs(g);\r\n    }\r\n\r\n    /**\r\n     * Least Common Multiple\r\n     * @param values: list of numbers\r\n     */\r\n    static lcm(...values:number[]):number{\r\n        return values.reduce(function(a,b){\r\n            return Math.abs(a * b / Numeric.gcd(a, b));\r\n        });\r\n    }\r\n}","import rndPolynom from \"./rndPolynom\";\r\nimport rndMonom from \"./rndMonom\";\r\nimport rndHelpers from \"./rndHelpers\";\r\nimport {randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport Monom from \"../algebra/monom\";\r\nimport Polynom from \"../algebra/polynom\";\r\n\r\n// export var Random = {\r\n//     monom: rndMonom,\r\n//     polynom: rndPolynom,\r\n//     number: rndHelpers.randomInt,\r\n//     numberSym: rndHelpers.randomIntSym,\r\n//     bool: rndHelpers.randomBool,\r\n//     array: rndHelpers.randomArray,\r\n//     item: rndHelpers.randomItem,\r\n//     shuffle: rndHelpers.shuffleArray\r\n// }\r\n\r\nexport namespace Random {\r\n    export function polynom(config?: randomPolynomConfig): Polynom {\r\n        return new rndPolynom(config).generate()\r\n    }\r\n\r\n    export function monom(config?: randomMonomConfig): Monom {\r\n        return new rndMonom(config).generate()\r\n    }\r\n\r\n    export function number(from:number, to:number):number { return rndHelpers.randomInt(from,to)}\r\n    export function numberSym(max:number, allowZero?:boolean):number { return rndHelpers.randomIntSym(max, allowZero)}\r\n    export function bool(percent?:number):boolean { return rndHelpers.randomBool(percent)}\r\n    export function array(arr:any[], number?:number):any[] { return rndHelpers.randomArray(arr, number)}\r\n    export function item(arr:any[]):any { return rndHelpers.randomItem(arr)}\r\n    export function shuffle(arr:any[]):any { rndHelpers.shuffleArray(arr)}\r\n\r\n\r\n}","export default class randomCore {\r\n    protected _config: Object\r\n    protected _defaultConfig: Object\r\n    mergeConfig = (config: Object, defaultConfig: Object): Object => {\r\n        if (config !== undefined) {\r\n            return {...defaultConfig, ...config}\r\n        }\r\n        return defaultConfig\r\n    }\r\n\r\n    generate = (): unknown => {\r\n        return undefined\r\n    }\r\n\r\n    config = (config: Object): randomCore => {\r\n        this._config = this.mergeConfig(config, this._defaultConfig)\r\n        return this\r\n    }\r\n}","/**\r\n * Random helpers\r\n */\r\nexport default class rndHelpers {\r\n\r\n    /**\r\n     * Random boolean with a percent ratio\r\n     * @param percent\r\n     */\r\n    static randomBool(percent:number=0.5):boolean{\r\n        return Math.random()<percent;\r\n    }\r\n\r\n    /**\r\n     * Random integer between two values.\r\n     * @param a (number) : From this value to the second value. If the second is ommited, this value is the max value.\r\n     * @param b (number) : To this value. If this is ommited.\r\n     */\r\n    static randomInt(a:number, b?:number):number{\r\n        if(b===undefined){return this.randomInt(0,a);}\r\n\r\n        return Math.floor(Math.random() * (b - a + 1) + a);\r\n    }\r\n\r\n    /**\r\n     * Random integer between -max and max value.\r\n     * @param max (number) : determine the limits.\r\n     * @param zero (bool) : determine if zero is allowed or not.\r\n     */\r\n    static randomIntSym(max:number, zero?:boolean):number{\r\n        if(zero===false){\r\n            return this.randomBool()?this.randomInt(1,max):-this.randomInt(1,max);\r\n        }else{\r\n            return this.randomInt(-max, max);\r\n        }\r\n    }\r\n\r\n    static randomArray(arr: any[], number?:number):any[]{\r\n        if(number===undefined){number = 1}\r\n\r\n        // Return a clone array\r\n        if(arr.length<=0){return Object.values(arr)}\r\n\r\n        // Randomize the array and return the n first elements.\r\n        return rndHelpers.shuffleArray(arr).slice(0,number);\r\n    }\r\n\r\n    static randomItem(arr: any[]): any{\r\n        if(arr.length===0){return ''}\r\n        return this.randomArray(arr, 1)[0]\r\n    }\r\n\r\n    static shuffleArray(arr: any[]): any[] {\r\n        // The Fisher-Yates algorithm\r\n        let shuffleArray = Object.values(arr)\r\n        for (let i = shuffleArray.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            const temp = shuffleArray[i];\r\n            shuffleArray[i] = shuffleArray[j];\r\n            shuffleArray[j] = temp;\r\n        }\r\n\r\n        return shuffleArray;\r\n    }\r\n\r\n}","import randomCore from \"./randomCore\";\r\nimport {randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {Random} from \"./random\";\r\nimport Monom from \"../algebra/monom\";\r\n\r\n/**\r\n * Create a random monom based on a based configuration\r\n */\r\n    export default class rndMonom extends randomCore {\r\n        declare protected _config: randomMonomConfig\r\n        declare protected _defaultConfig: randomPolynomConfig\r\n\r\n        constructor(userConfig?: randomMonomConfig) {\r\n            super();\r\n\r\n            this._defaultConfig = {\r\n                letters: 'x',\r\n                degree: 2,\r\n                fraction: true,\r\n                zero: false\r\n            }\r\n\r\n            this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n        }\r\n\r\n        generate = (): Monom => {\r\n            // Create a monom instance\r\n            let M = new Monom()\r\n\r\n            // Generate the coefficient\r\n            M.coefficient.parse(Random.numberSym(10, this._config.zero), (this._config.fraction) ? Random.number(1, 10) : 1).reduce();\r\n\r\n            // Calculate the degree of the monom\r\n            if (this._config.letters.length > 1) {\r\n                // Initialise each items...\r\n                for (let L of this._config.letters.split('')) {\r\n                    M.setLetter(L, 0);\r\n                }\r\n                for (let i = 0; i < this._config.degree; i++) {\r\n                    const L = Random.item(this._config.letters.split(\"\"))\r\n                    M.setLetter(L, M.degree(L) + 1)\r\n                }\r\n            } else {\r\n                M.setLetter(this._config.letters, this._config.degree)\r\n            }\r\n\r\n            return M\r\n        }\r\n    }\r\n","import randomCore from \"./randomCore\";\r\nimport {randomPolynomConfig} from \"./rndTypes\";\r\nimport rndMonom from \"./rndMonom\";\r\nimport {Random} from \"./random\";\r\nimport Polynom from \"../algebra/polynom\";\r\nimport Monom from \"../algebra/monom\";\r\n\r\n/**\r\n * Random polynoms\r\n */\r\nexport default class rndPolynom extends randomCore {\r\n    declare protected _config: randomPolynomConfig\r\n    declare protected _defaultConfig: randomPolynomConfig\r\n\r\n    constructor(userConfig?: randomPolynomConfig) {\r\n        super();\r\n\r\n        // Default config for a random polynom\r\n        this._defaultConfig = {\r\n            letters: 'x',\r\n            degree: 2,\r\n            fraction: false,\r\n            zero: false,\r\n            unit: false,\r\n            factorable: false,\r\n            allowNullMonom: true,\r\n            numberOfMonoms: 0\r\n        }\r\n\r\n        // Merge config with initialiser\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Polynom => {\r\n        // Create the polynom\r\n        let P = new Polynom().empty(),\r\n            M: Monom\r\n\r\n        for (let i = this._config.degree; i >= 0; i--) {\r\n            // Create monom of corresponding degree.\r\n            M = new rndMonom({\r\n                letters: this._config.letters,\r\n                degree: i,\r\n                fraction: this._config.fraction,\r\n                zero: (i === this._config.degree) ? false : this._config.allowNullMonom\r\n            }).generate()\r\n\r\n            // If degree is the greatest and unit is true, set the monom value to one.\r\n            if (this._config.unit && this._config.degree === i) {\r\n                M.coefficient.one()\r\n            }\r\n\r\n            // Add to the polynom\r\n            P.add(M)\r\n        }\r\n\r\n        // If the number of monoms is greater than the allowed value, remove some of them...\r\n        if (this._config.numberOfMonoms > 0 && this._config.numberOfMonoms < P.length) {\r\n            console.log(P.monoms.length)\r\n            P.monoms = Random.array(P.monoms, this._config.numberOfMonoms)\r\n        }\r\n        return P\r\n    }\r\n\r\n    factorable = (): Polynom => {\r\n        let P = new Polynom()\r\n\r\n        return P\r\n    }\r\n}","type tokenType = {\r\n    [key: string]: {\r\n        precedence: number,\r\n        associative: string\r\n    }\r\n}\r\n\r\nexport default class Shutingyard {\r\n    private _rpn: { token: string, tokenType: string }[] = [];\r\n    readonly _mode: 'polynom' | 'set';\r\n    private _tokenConfig: tokenType;\r\n    private _uniformize: boolean;\r\n\r\n    constructor(mode?: 'polynom' | 'set') {\r\n        this._mode = typeof mode === 'undefined' ? 'polynom' : mode;\r\n        this.tokenConfigInitialization()\r\n    }\r\n\r\n    /**\r\n     * Determin if the token is a defined operation\r\n     * Defined operations: + - * / ^ sin cos tan\r\n     * @param token\r\n     */\r\n    isOperation(token: string): boolean {\r\n        if (token[0].match(/[+\\-*/^]/g)) {\r\n            return true;\r\n        }\r\n        //\r\n        // if (token.match(/^sin|cos|tan/g)) {\r\n        //     return true;\r\n        // }\r\n\r\n        return false;\r\n    }\r\n\r\n    tokenConfigInitialization(): tokenType {\r\n        if (this._mode === 'set') {\r\n            this._tokenConfig = {\r\n                '&': {precedence: 3, associative: 'left'},\r\n                '|': {precedence: 3, associative: 'left'},\r\n                '!': {precedence: 4, associative: 'right'},\r\n                '-': {precedence: 2, associative: 'left'}\r\n            }\r\n            this._uniformize = false;\r\n        } else {\r\n            this._tokenConfig = {\r\n                '^': {precedence: 4, associative: 'right'},\r\n                '*': {precedence: 3, associative: 'left'},\r\n                '/': {precedence: 3, associative: 'left'},\r\n                '+': {precedence: 2, associative: 'left'},\r\n                '-': {precedence: 2, associative: 'left'},\r\n                '%': {precedence: 3, associative: 'right'},\r\n                'sin': {precedence: 4, associative: 'right'},\r\n                'cos': {precedence: 4, associative: 'right'},\r\n                'tab': {precedence: 4, associative: 'right'},\r\n            }\r\n            this._uniformize = true\r\n        }\r\n        return this._tokenConfig\r\n    }\r\n\r\n    /**\r\n     * Get the next token to analyse.\r\n     * @param expr (string) Expression to analyse\r\n     * @param start (number) CUrrent position in the expr string.\r\n     */\r\n    NextToken2(expr: string, start: number): [string, number, string] {\r\n        let token: string, tokenType: string;\r\n        token = '';\r\n        tokenType = '';\r\n        // Case of parenthesis or comma (generic items)\r\n        if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        } else{\r\n            // Order token keys by token characters length (descending)\r\n            const keys = Object.keys(this._tokenConfig).sort((a,b)=>b.length-a.length)\r\n\r\n            for(let key of keys){\r\n                if(expr.substr(start, key.length) === key){\r\n                    token += key;\r\n                    tokenType = 'operation'\r\n                    break\r\n                }\r\n            }\r\n\r\n            if(token===''){\r\n                // No function found ! Might be a coefficient !\r\n                if( expr[start].match(/[0-9]/) ) {\r\n                    token = expr.substr(start).match(/^([0-9.,/]+)/)[0]\r\n                    tokenType = 'coefficient'\r\n                }else if (expr[start].match(/[a-zA-Z]/)) {\r\n                    token = expr.substr(start).match(/^([a-zA-Z])/)[0]\r\n                    tokenType = 'variable'\r\n                }else{\r\n                    console.log('Unidentified token', expr[start], expr, start)\r\n                    token = expr[start]\r\n                    tokenType = 'monom'\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n\r\n        // console.log(token, tokenType)\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    NextToken(expr: string, start: number): [string, number, string] {\r\n        let tokenMatch: string[], token: string, tokenType: string;\r\n\r\n        this.NextToken2(expr, start)\r\n        // Detect a fraction monoms or return empty array\r\n        tokenMatch = (expr.substr(start).match(/^[0-9/a-zA-Z^]+/g)) || [];\r\n\r\n        if (expr.substr(start, start + 3).match(/^(sin|cos|tan)/g)) {\r\n            token = expr.substr(start, 3)\r\n            tokenType = 'function'\r\n        } else if (tokenMatch.length > 0) {\r\n            token = tokenMatch[0];\r\n            tokenType = 'monom';\r\n        }\r\n        // It's an operation !\r\n        else if (expr[start].match(/[+\\-*/^]/g)) {\r\n            token = expr[start];\r\n            tokenType = 'operation';\r\n        } else if (expr[start].match(/[&|!]/g)) {\r\n            token = expr[start];\r\n            tokenType = 'operation';\r\n        }\r\n        // It's an opening parenthese\r\n        else if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        }\r\n        // It's a monom.\r\n        else {\r\n            // TODO: Actually, negative exposant aren't supported.\r\n            // token = (expr.substr(start).match(/^[\\da-z\\^]+/g)[0])||'';\r\n            token = tokenMatch[0];\r\n            tokenType = 'monom';\r\n\r\n            if (token === '') {\r\n                token = expr[start];\r\n                tokenType = 'monom';\r\n                console.log('SHUTING YARD - NEXT TOKEN: error at ', start);\r\n            }\r\n        }\r\n\r\n        // console.log(token, start + token.length, tokenType);\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    /**\r\n     * Sanitize an expression by adding missing common operation (multiplication between parentheseses)\r\n     * @param expr\r\n     * @constructor\r\n     */\r\n    Uniformizer(expr: string): string {\r\n        // Determiner if need to be uniformized\r\n        if(!this._uniformize){return expr}\r\n\r\n        let expr2;\r\n        // Replace missing multiplication between two parenthese\r\n        expr2 = expr.replace(/\\)\\(/g, ')*(');\r\n\r\n        // Replace missing multiplication between number or setLetter and parenthese.\r\n\r\n        // 3x(x-4) => 3x*(x-4)\r\n        expr2 = expr2.replace(/([\\da-zA-Z])(\\()/g, \"$1*$2\");\r\n\r\n        // (x-4)3x => (x-4)*3x\r\n        expr2 = expr2.replace(/(\\))([\\da-zA-Z])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between number and letters.\r\n        // 3x => 3*x\r\n        expr2 = expr2.replace(/([0-9])([a-zA-Z])/g, \"$1*$2\");\r\n        expr2 = expr2.replace(/([a-zA-Z])([0-9])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between letters ?\r\n        // TODO: More robust solution to handle all letters ?\r\n        expr2 = expr2.replace(/([abcxyz])([abcxyz])/g, \"$1*$2\");\r\n\r\n        // Restore operation auto formating (prevent adding the mutliplcation star)\r\n        // TODO: Accept list of functions\r\n        let fnToken = ['sin', 'cos', 'tan']\r\n        for (let token of fnToken) {\r\n            expr2 = expr2.replace(new RegExp(token + '\\\\*', 'g'), token);\r\n        }\r\n\r\n        return expr2;\r\n    }\r\n\r\n    /**\r\n     * Parse an expression using the shutting yard tree algorithms\r\n     * @param expr (string) Expression to analyse\r\n     * Returns a RPN list of items.\r\n     * @param operators\r\n     */\r\n    parse(expr: string, operators?: string[]): Shutingyard {\r\n        let outQueue: {token:string, tokenType: string}[] = [],    // Output queue\r\n            opStack: {token:string, tokenType: string}[] = [],     // Operation queue\r\n            token: string = '',\r\n            tokenPos: number = 0,\r\n            tokenType: string = '',\r\n            previousOpStatckLength = 0\r\n\r\n        expr = this.Uniformizer(expr);\r\n\r\n        let securityLoopLvl1 = 50,\r\n            securityLoopLvl2_default = 50,\r\n            securityLoopLvl2;\r\n\r\n        while (tokenPos < expr.length) {\r\n            securityLoopLvl1--;\r\n            if (securityLoopLvl1 === 0) {\r\n                console.log('SECURITY LEVEL 1 EXIT');\r\n                break;\r\n            }\r\n\r\n            // Get the next token and the corresponding new (ending) position\r\n            [token, tokenPos, tokenType] = this.NextToken2(expr, tokenPos);\r\n\r\n            switch (tokenType) {\r\n                case 'monom':\r\n                case 'coefficient':\r\n                case 'variable':\r\n                    outQueue.push({\r\n                        token,\r\n                        tokenType\r\n                    });\r\n                    // if(previousOpStatckLength == opStack.length && outQueue.length>=2){\r\n                    //     console.log('opStatckLength', outQueue, opStack.length)\r\n                    //     outQueue.push('*')\r\n                    // }\r\n                    break;\r\n                case 'operation':\r\n                    previousOpStatckLength = opStack.length;\r\n                    //If the token is an operator, o1, then:\r\n                    if (opStack.length > 0) {\r\n                        let opTop = opStack[opStack.length - 1];\r\n\r\n\r\n                        securityLoopLvl2 = +securityLoopLvl2_default;\r\n\r\n                        //while there is an operator token o2, at the top of the operator stack and\r\n                        while (opTop.token in this._tokenConfig && (\r\n                                //either o1 is left-associative and its precedence is less than or equal to that of o2,\r\n                                (this._tokenConfig[token].associative === 'left' && this._tokenConfig[token].precedence <= this._tokenConfig[opTop.token].precedence)\r\n                                ||\r\n                                //or o1 is right associative, and has precedence less than that of o2,\r\n                                (this._tokenConfig[token].associative === 'right' && this._tokenConfig[token].precedence < this._tokenConfig[opTop.token].precedence)\r\n                            )\r\n                            ) {\r\n\r\n                            /* Security exit ! */\r\n                            securityLoopLvl2--;\r\n                            if (securityLoopLvl2 === 0) {\r\n                                console.log('SECURITY LEVEL 2 OPERATION EXIT');\r\n                                break;\r\n                            }\r\n\r\n                            // Add the operation to the queue\r\n                            outQueue.push((opStack.pop()) || {token: '', tokenType: 'operation'});\r\n\r\n                            // Get the next operation on top of the Stack.\r\n                            if(opStack.length===0){break;}\r\n                            opTop = opStack[opStack.length - 1];\r\n                        }\r\n                    }\r\n                    //at the end of iteration push o1 onto the operator stack\r\n                    opStack.push({token,tokenType});\r\n                    break;\r\n                case 'function-argument':\r\n                    // TODO: check if the opStack exist.\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 0) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 FUNCTION ARGUMENT EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n                    break;\r\n                case '(':\r\n                    opStack.push({token,tokenType});\r\n                    // Add an empty value if next element is negative.\r\n                    if (expr[tokenPos] === '-') {\r\n                        outQueue.push({token: '0', tokenType: 'coefficient'});\r\n                    }\r\n                    break;\r\n                case ')':\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    //Until the token at the top of the stack is a left parenthesis, pop operators off the stack onto the output queue.\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 1 /*Maybe zero !? */) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 CLOSING PARENTHESE EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n\r\n                    //Pop the left parenthesis from the stack, but not onto the output queue.\r\n                    opStack.pop();\r\n                    break;\r\n                case 'function':\r\n                    opStack.push({token, tokenType});\r\n                    break;\r\n                default:\r\n                    // In theory, everything should be handled.\r\n                    console.log(`SHUTING YARD: ${tokenType} : ${token} `);\r\n            }\r\n\r\n            // Output\r\n            // console.log(outQueue.concat(opStack.reverse()).join(\" \"));\r\n        }\r\n\r\n        // console.log(outQueue.concat(opStack.reverse()));\r\n        this._rpn = outQueue.concat(opStack.reverse());\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    // Getter\r\n    get rpn() {\r\n        // console.log(this._rpn)\r\n        return this._rpn;\r\n    }\r\n\r\n\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import Numeric from \"./maths/numeric\";\r\nimport Shutingyard from \"./maths/shutingyard\";\r\nimport Fraction from \"./maths/coefficients/fraction\";\r\nimport Nthroot from \"./maths/coefficients/nthroot\";\r\nimport Monom from \"./maths/algebra/monom\";\r\nimport Polynom from \"./maths/algebra/polynom\";\r\nimport Equation from \"./maths/algebra/equation\";\r\nimport LinearSystem from \"./maths/algebra/linearSystem\";\r\nimport Line from \"./maths/geometry/line\";\r\nimport Circle from \"./maths/geometry/circle\";\r\nimport Logicalset from \"./maths/algebra/logicalset\";\r\nimport Rational from \"./maths/algebra/rational\";\r\nimport {Random} from \"./maths/random/random\";\r\nimport Triangle from \"./maths/geometry/triangle\";\r\nimport Point from \"./maths/geometry/point\";\r\nimport Vector from \"./maths/geometry/vector\";\r\n\r\n// Expose as global\r\n// export let Pi = {\r\n(<any>window).Pi = {\r\n    ShutingYard: Shutingyard,\r\n    Numeric: Numeric,\r\n    Fraction: Fraction,\r\n    Root: Nthroot,\r\n    Monom: Monom,\r\n    Polynom: Polynom,\r\n    Equation: Equation,\r\n    LinearSystem: LinearSystem,\r\n    Rational: Rational,\r\n    Logicalset: Logicalset,\r\n    Random: Random,\r\n    Geometry: {\r\n        Vector: Vector,\r\n        Point: Point,\r\n        Line: Line,\r\n        Triangle: Triangle,\r\n        Circle: Circle\r\n    }\r\n};\r\n"],"names":["Equation","_left","_right","_sign","_polynom","_solutions","_varnothing","_real","constructor","equations","this","zero","length","isEquation","clone","parse","left","isPolynom","right","solutions","solution","includes","join","isReal","undefined","solve","isVarnothing","signAsTex","tex","raw","variables","Set","concat","numberOfVars","value","sign","_formatSign","equationString","pStr","strSign","_findSign","split","create","console","log","signStr","_reverseSign","replace","_randomizeDefaults","degree","randomizeDefaults","randomize","opts","moveLeft","subtract","reorder","allLeft","mMove","m","monoms","simplify","multiply","lcm","getDenominators","divide","gcd","getNumerators","isolate","letter","isMultiVariable","cMove","hasLetter","add","opposed","coefficient","replaceBy","P","F","isZero","invert","Math","max","letters","_solveDegree1","_solveDegree2","_solveDegree3plus","isGreater","indexOf","isStrictEqual","isAlsoEqual","m1","monomByDegree","m0","v","display","s","delta","nthDelta","realX1","realX2","sX1","sX2","aF","bF","cF","denominator","a","b","sqrt","toFixed","reduce","hasRadical","dfrac","LinearSystem","_resolutionSteps","_equations","_letters","equationStrings","isLinerarSystem","isSolvable","V","E","sort","equStr","LS","equArray","equ","L","monomByLetter","push","repeat","texSolution","map","_findLetters","setCoefficient","coefficients","i","slice","toString","setLetters","generate","solutionsF","_generateOneEquation","coeff","leftValue","equString","Random","numberSym","_checkIfLinerCombination","_linearReduction","eq1","eq2","c1","c2","mergeEquations","factor1","factor2","eq1multiplied","eq2multiplied","_solveOneLetter","LE","reducedEquations","str","_rawString","_rpn","isLogicalset","rpn","evaluate","tokenSets","reference","referenceSet","varStack","key","token","tokenType","second","pop","first","filter","x","has","vennAB","A","B","vennABC","C","Monom","_coefficient","_literal","isMonom","literal","literalSqrt","isLitteralSquare","literalStr","inputStr","matchAll","clean","Object","keys","dividers","numerator","abs","litterals","_getLitteralDividers","monomDividers","N","M","one","arr","tmpList","d","litt","item","currentLetter","displayWithSign","trim","k","setLetter","isSameAs","multiplyByNumber","pow","nb","root","p","isSquare","compare","isEqual","M1","M2","K","isOne","Number","isSafeInteger","values","t","n","r","tmpValues","derivative","dM","primitive","static","coeffN","coeffD","min","areSameAs","areEquals","Polynom","_monoms","_factors","_texString","polynomString","factors","texFactors","factorize","f","texString","genDisplay","output","forceSign","wrapParentheses","isNaN","empty","shutingYardToReducedPolynom","test","fractions","m2","tempPolynom","stack","previousToken","element","unit","factorable","allowNullMonom","numberOfMonoms","config","rndFactorable","factorUnit","polynom","fraction","multiplyByPolynom","isFraction","multiplyByFraction","multiplyByMonom","multiplyByInteger","xmultiply","euclidian","quotient","reminder","maxMP","degreeP","newM","MaxIteration","divideByFraction","divideByInteger","nbF","cP1","cP2","isOpposedAt","isFactorized","match","e","polynomStringNormalized","replaceAll","polynomStringReduced","substr","polyFactors","splice","isDeveloped","j","S","resultPolynom","forEach","monom","dP","integrate","valuesA","valuesB","factorize_OLD","maxValue","nbFactorsFound","commonMonom","commonPolynom","Q","securityLoop","m1d","m2d","result","dividerPolynom","_factorize2ndDegree","P1","P2","c","x1","x2","factor","isPositive","xyzPolynom","xFactors","_factorizeByGroups","getZeroes","zeroes","zeroesAsTex","D","z","frac","monomsByDegree","Ms","denominators","numerators","lcmDenominator","gcdDenominator","lcmNumerator","gcdNumerator","makeItComplicate","complexity","number","factorizePartial","mMain","mCheck","mFactor","pFactor","g","minify","canDivide","evalValue","_numerator","_denominator","domain","amplify","NumeratorEuclidien","DenominatorEuclidien","R","limits","Infinity","Fraction","denominatorOrPeriodic","NaN","floor","infinite","invalid","lesser","than","leq","greater","geq","isDifferent","isOpposed","isInverted","isNegative","isInfinity","isFinite","isReduced","_radical","_nth","_isValid","radical","nth","nthroot","_center","_radius","_exists","cx","cy","y","developed","Line","_a","_b","_c","_OA","_d","_n","isLine","exists","equation","canonical","mxh","slope","OA","height","parametric","pmatrix","normal","parseByCoefficient","isPoint","isVector","parseByPointAndVector","elem","delete","size","isParellelTo","line","simplifyDirection","intersection","Pt","isParallel","isSame","point","hasIntersection","distanceTo","pt","d2","normSquare","hitSegment","iPt","canonicalAsFloatCoefficient","decimals","Point","_x","_y","_exist","pts","xy","origin","middleOf","texValues","numberOfDigits","_A","_B","_C","_lines","_middles","_remarquables","isTriangle","AB","getSegment","BA","BC","CB","AC","CA","isRectangle","isNormalTo","isEquilateral","isIsocele","lines","remarquables","intersect","_updateTriangle","_calculateRemarquableLines","getPointByName","ptName","toUpperCase","ptName1","ptName2","_calculateBisectors","medians","mediators","heights","bisectors","d1","tlines","b1","norm","b2","Vector","_parseString","reset","components","scalarProductWithVector","v1","v2","multiplyByScalar","scalar","divideByScalar","angleWith","sharp","radian","toDegree","PI","acos","Numeric","round","primes","maxV","gcd2","from","to","randomInt","allowZero","randomIntSym","bool","percent","randomBool","array","randomArray","randomItem","shuffle","shuffleArray","_config","_defaultConfig","mergeConfig","defaultConfig","rndHelpers","random","temp","rndMonom","userConfig","super","rndPolynom","_mode","_tokenConfig","_uniformize","mode","tokenConfigInitialization","isOperation","precedence","associative","NextToken2","expr","start","NextToken","tokenMatch","Uniformizer","expr2","fnToken","RegExp","operators","outQueue","opStack","tokenPos","previousOpStatckLength","securityLoopLvl2","securityLoopLvl1","opTop","reverse","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","window","Pi","ShutingYard","Root","Rational","Logicalset","Geometry","Triangle","Circle"],"sourceRoot":""}