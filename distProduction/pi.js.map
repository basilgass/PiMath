{"version":3,"file":"pi.js","mappings":"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","sources":["webpack://pimath/./src/maths/numeric.ts","webpack://pimath/./src/maths/coefficients/fraction.ts","webpack://pimath/./src/maths/coefficients/nthroot.ts","webpack://pimath/./src/maths/algebra/monom.ts","webpack://pimath/./src/maths/shutingyard.ts","webpack://pimath/./src/maths/random/randomCore.ts","webpack://pimath/./src/maths/random/rndPolynom.ts","webpack://pimath/./src/maths/random/rndHelpers.ts","webpack://pimath/./src/maths/random/random.ts","webpack://pimath/./src/maths/algebra/index.ts","webpack://pimath/./src/maths/random/rndMonom.ts","webpack://pimath/./src/maths/algebra/polynom.ts","webpack://pimath/./src/maths/algebra/equation.ts","webpack://pimath/./src/maths/algebra/linearSystem.ts","webpack://pimath/./src/maths/algebra/rational.ts","webpack://pimath/./src/maths/algebra/logicalset.ts","webpack://pimath/./src/maths/geometry/point.ts","webpack://pimath/./src/maths/geometry/vector.ts","webpack://pimath/./src/maths/geometry/line.ts","webpack://pimath/./src/main.ts","webpack://pimath/./src/maths/geometry/triangle.ts","webpack://pimath/./src/maths/geometry/circle.ts"],"sourcesContent":["export class Numeric{\r\n    static round(value:number, decimals:number=2):number {\r\n        return Number(Math.round(Number(value+'e'+decimals))+'e-'+decimals);\r\n    }\r\n\r\n    /**\r\n     * Get the list of the nth first prime numbers.\r\n     * @param nb : number of primes to choose from\r\n     */\r\n    static prime(nb?:number):number[]{\r\n        let primes:number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973];\r\n        if(nb === undefined){\r\n            return primes;\r\n        }else{\r\n            return primes.slice(0,Math.max(primes.length,nb));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the list of all dividers of a number.\r\n     * @param value\r\n     */\r\n    static dividers(value:number):number[]{\r\n        let D: number[];\r\n        const maxV = Math.sqrt(Math.abs(value));\r\n\r\n        // Initialize the list of dividers.\r\n        D = [];\r\n\r\n        for(let i=1; i<=maxV; i++){\r\n            if(value%i===0){\r\n                D.push(i);\r\n                D.push(value/i);\r\n            }\r\n        }\r\n\r\n        // Order numbers.\r\n        D.sort(function(a, b){return a-b;});\r\n\r\n        // Make sure the array of value is unique.\r\n        return [...new Set(D)];\r\n    }\r\n    /**\r\n     * Great Common Divisor\r\n     * @param values : number values\r\n     */\r\n    static gcd(...values:number[]):number{\r\n        // Define the gcd for two number\r\n        let gcd2 = function(a:number,b:number):number{\r\n            if(b===0){return a;}\r\n            return gcd2(b, a%b);\r\n        };\r\n\r\n        let g:number = 1,\r\n            i:number = 2;\r\n\r\n        // Nothing is given\r\n        if(values.length===0){return 1;}\r\n        // Only one number is given\r\n        if(values.length===1){\r\n            // The first number is zero\r\n            if(values[0]===0){return 1;}\r\n            // Return the number\r\n            return values[0];\r\n        }\r\n\r\n        // We have at least 2 numbers.\r\n        g = gcd2(values[0],values[1]);\r\n\r\n        // The gcd of the two first value is one ? It's already finished.\r\n        if(g===1){return 1;}\r\n\r\n        // The current gcd isn't one. Continue with all next values.\r\n        for(i=2; i<values.length; i++){\r\n            g = gcd2(g, values[i]);\r\n            // Escape if gcd is already one.\r\n            if(g===1){break;}\r\n        }\r\n\r\n        return Math.abs(g);\r\n    }\r\n\r\n    /**\r\n     * Least Common Multiple\r\n     * @param values: list of numbers\r\n     */\r\n    static lcm(...values:number[]):number{\r\n        return values.reduce(function(a,b){\r\n            return Math.abs(a * b / Numeric.gcd(a, b));\r\n        });\r\n    }\r\n}","import {Numeric} from \"../numeric\";\r\n\r\nexport class Fraction {\r\n    private _numerator: number;\r\n    private _denominator: number;\r\n\r\n    constructor(value?: any, denominatorOrPeriodic?: number) {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n\r\n        if (value !== undefined) {\r\n            this.parse(value, denominatorOrPeriodic);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isFraction() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n\r\n    get numerator(): number {\r\n        return this._numerator;\r\n    }\r\n\r\n    set numerator(value: number) {\r\n        this._numerator = value;\r\n    }\r\n\r\n    get denominator(): number {\r\n        return this._denominator;\r\n    }\r\n\r\n    set denominator(value: number) {\r\n        this._denominator = value;\r\n    }\r\n\r\n    get value(): number {\r\n        return this._numerator / this._denominator;\r\n    }\r\n\r\n    // Display getter\r\n    get tex(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else if (this._numerator < 0) {\r\n            return `-\\\\frac{ ${-this._numerator} }{ ${this._denominator} }`;\r\n        } else {\r\n            return `\\\\frac{ ${this._numerator} }{ ${this._denominator} }`;\r\n        }\r\n    }\r\n\r\n    get display(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else {\r\n            return `${this._numerator}/${this._denominator}`;\r\n        }\r\n    }\r\n\r\n    // Helper function to display fractions\r\n    get frac(): string {\r\n        return this.tex;\r\n    }\r\n\r\n    get dfrac(): string {\r\n        return this.tex.replace('\\\\frac', '\\\\dfrac');\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse the value to get the numerator and denominator\r\n     * @param value : number or string to parse to get the fraction\r\n     * @param denominatorOrPeriodic (optional|number) : length of the periodic part: 2.333333 => 1 or denominator value\r\n     */\r\n    parse = (value: any, denominatorOrPeriodic?: number): Fraction => {\r\n        let S: string[];\r\n\r\n        // A null value means a zero fraction.\r\n        if (value === null || value === \"\") {\r\n            this._numerator = 0;\r\n            this._denominator = 1;\r\n            return this;\r\n        }\r\n\r\n        switch (typeof value) {\r\n            case \"string\":\r\n                // Split the sting value in two parts: Numerator/Denominator\r\n                S = value.split('/');\r\n\r\n                // Security checks\r\n                    if (S.length > 2) throw \"Two many divide signs\";\r\n                    if (S.map(x => x === '' || isNaN(Number(x))).includes(true)) throw \"Not a number\"\r\n\r\n\r\n                if (S.length === 1) {\r\n                    // No divide sign\r\n                    return this.parse(+S[0]);\r\n                } else if (S.length === 2) {\r\n                    // One divide signe\r\n                    // We check if the denominator is zero\r\n                    if (S[1] === '0') {\r\n                        this._numerator = NaN;\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._numerator = +S[0];\r\n                        this._denominator = +S[1];\r\n                    }\r\n                } else {\r\n                    // More than one divide sign ?\r\n                    this._numerator = NaN;\r\n                    this._denominator = 1;\r\n                }\r\n                break;\r\n            case \"number\":\r\n                if (Number.isSafeInteger(value)) {\r\n                    // The given value is an integer\r\n                    this._numerator = +value;\r\n\r\n                    if (denominatorOrPeriodic === undefined || !Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._denominator = +denominatorOrPeriodic;\r\n                    }\r\n                } else {\r\n                    // The given value is a float number\r\n\r\n                    // Get the number of decimals after the float sign\r\n                    let p: number = (value.toString()).split('.')[1].length;\r\n\r\n                    // Transform the float number in two integer\r\n                    if (denominatorOrPeriodic === undefined) {\r\n                        this._numerator = value * Math.pow(10, p);\r\n                        this._denominator = Math.pow(10, p);\r\n                    } else if (Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._numerator = value * Math.pow(10, p) - Math.floor(value * Math.pow(10, p - denominatorOrPeriodic));\r\n                        this.denominator = Math.pow(10, p) - Math.pow(10, p - denominatorOrPeriodic)\r\n                    }\r\n                }\r\n                break;\r\n            case \"object\":\r\n                if (value.isFraction) {\r\n                    this._numerator = +value.numerator;\r\n                    this._denominator = +value.denominator;\r\n                }\r\n                break;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): Fraction => {\r\n        let F = new Fraction();\r\n        F.numerator = +this._numerator;\r\n        F.denominator = +this._denominator;\r\n        return F;\r\n    };\r\n\r\n    zero = (): Fraction => {\r\n        this._numerator = 0;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    one = (): Fraction => {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    infinite = (): Fraction => {\r\n        this._numerator = Infinity;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    invalid = (): Fraction => {\r\n        this._numerator = NaN;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Fraction => {\r\n        this._numerator = -this._numerator;\r\n        return this;\r\n    };\r\n\r\n    add = (F: Fraction): Fraction => {\r\n        let N: number = this._numerator,\r\n            D: number = this._denominator;\r\n\r\n        this._numerator = N * F.denominator + F.numerator * D;\r\n        this._denominator = D * F.denominator;\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (F: Fraction): Fraction => {\r\n        return this.add(F.clone().opposed());\r\n    };\r\n\r\n    multiply = (F: Fraction | number): Fraction => {\r\n        // Parse the value.\r\n        // If it's a fraction, return a clone of it\r\n        // If it's an integer, return the fraction F/1\r\n        let Q = new Fraction(F);\r\n\r\n        this._numerator = this._numerator * Q.numerator;\r\n        this._denominator = this._denominator * Q.denominator;\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    divide = (F: Fraction | number): Fraction => {\r\n        let Q = new Fraction(F);\r\n\r\n        if (Q.numerator === 0) {\r\n            return new Fraction().infinite();\r\n        }\r\n\r\n        let N: number = +this._numerator,\r\n            D: number = +this._denominator;\r\n\r\n        this._numerator = N * Q.denominator;\r\n        this._denominator = D * Q.numerator;\r\n        return this.reduce();\r\n    };\r\n\r\n    invert = (): Fraction => {\r\n        let n = +this._numerator, d = +this._denominator;\r\n        this._numerator = d;\r\n        this._denominator = n;\r\n\r\n        return this;\r\n    }\r\n    pow = (p: number): Fraction => {\r\n        if (!Number.isSafeInteger(p)) {\r\n            return this.invalid();\r\n        }\r\n        this.reduce();\r\n\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        this._numerator = this._numerator ** Math.abs(p);\r\n        this._denominator = this._denominator ** Math.abs(p);\r\n        return this;\r\n    };\r\n\r\n    root = (p: number): Fraction => {\r\n        // TODO: nth - root of a fraction => this will return another type of coefficient.\r\n\r\n        // Check if they are perfect roots..\r\n        if (p === 0) {\r\n            return this;\r\n        }\r\n\r\n        // If negative, invert the fraction\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        let n = Math.pow(this._numerator, Math.abs(1 / p)),\r\n            d = Math.pow(this._denominator, Math.abs(1 / p));\r\n\r\n        this._numerator = Math.pow(this._numerator, Math.abs(1 / p));\r\n        this._denominator = Math.pow(this._denominator, Math.abs(1 / p));\r\n        return this;\r\n    }\r\n\r\n    sqrt = (): Fraction => {\r\n        return this.root(2);\r\n    }\r\n\r\n    abs = (): Fraction => {\r\n        this._numerator = Math.abs(this._numerator);\r\n        this._denominator = Math.abs(this._denominator);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations specific to fractions\r\n    // ------------------------------------------\r\n    reduce = (): Fraction => {\r\n        let g = Numeric.gcd(this._numerator, this._denominator);\r\n        this._numerator = this._numerator / g;\r\n        this._denominator = this._denominator / g;\r\n\r\n        if (this._denominator < 0) {\r\n            this._denominator = -this._denominator;\r\n            this._numerator = -this._numerator;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    amplify = (k: number): Fraction => {\r\n        if (Number.isSafeInteger(k)) {\r\n            this._numerator *= k;\r\n            this._denominator *= k;\r\n        }\r\n        return this;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param F (Coefficient) The coefficient to compare\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (F: Fraction, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n\r\n        switch (sign) {\r\n            case '>':\r\n                return this.value > F.value;\r\n            case \">=\" || \"=>\" || \"geq\":\r\n                return this.value >= F.value;\r\n            case \"<\":\r\n                return this.value < F.value;\r\n            case \"<=\" || \"=>\" || \"leq\":\r\n                return this.value <= F.value;\r\n            case \"=\":\r\n                // let F2: Fraction = F.clone().reduce(),\r\n                //     F1: Fraction = this.clone().reduce();\r\n                // return (F1.numerator === F2.numerator && F1.denominator === F2.denominator);\r\n                return this.value === F.value;\r\n            case \"<>\":\r\n                return this.value !== F.value;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n    /* Compare shortcuts */\r\n    lesser = (than: Fraction): Boolean => {\r\n        return this.compare(than, '<');\r\n    };\r\n    leq = (than: Fraction): Boolean => {\r\n        return this.compare(than, '<=');\r\n    };\r\n    greater = (than: Fraction): Boolean => {\r\n        return this.compare(than, '>');\r\n    };\r\n    geq = (than: Fraction): Boolean => {\r\n        return this.compare(than, '>=');\r\n    };\r\n    isEqual = (than: Fraction): boolean => {\r\n        return this.compare(than, '=');\r\n    }\r\n    isDifferent = (than: Fraction): boolean => {\r\n        return this.compare(than, '<>');\r\n    }\r\n    isOpposed = (p: Fraction): boolean => {\r\n        return this.isEqual(p.clone().opposed());\r\n    }\r\n    isInverted = (p: Fraction): boolean => {\r\n        return this.isEqual(new Fraction().one().divide(p.clone()));\r\n    }\r\n    isZero = (): boolean => {\r\n        return this._numerator === 0;\r\n    }\r\n    isOne = (): boolean => {\r\n        return this._numerator === 1 && this._denominator === 1;\r\n    }\r\n    isPositive = (): boolean => {\r\n        return this.sign()===1;\r\n    }\r\n    isNegative = (): boolean => {\r\n        return this.sign()===-1;\r\n    }\r\n    isNaN = (): boolean => {\r\n        return isNaN(this._numerator);\r\n    }\r\n    isInfinity = (): boolean => {\r\n        return this._numerator === Infinity;\r\n    }\r\n    isFinite = (): boolean => {\r\n        return !this.isInfinity();\r\n    }\r\n    isSquare = (): boolean => {\r\n        return Math.sqrt(this._numerator) % 1 === 0 && Math.sqrt(this._denominator) % 1 === 0\r\n    }\r\n    isReduced = (): boolean => {\r\n        return Math.abs(Numeric.gcd(this._numerator, this._denominator))===1\r\n    }\r\n    sign = (): number => {\r\n        return (this._numerator * this._denominator >= 0) ? 1 : -1;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Simple function to determine if it's a fraction\r\n     */\r\n    areEquals = (...F: Fraction[]): boolean => {\r\n        for (let i = 0; i < F.length; i++) {\r\n            if (!this.isEqual(F[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n}","export class Nthroot {\r\n    private _radical: number;\r\n    private _nth: number;\r\n    private _coefficient: number;\r\n    private _isValid:boolean;\r\n\r\n    constructor() {\r\n        this._radical = 1;\r\n        this._coefficient = 1;\r\n        this._nth = 2;\r\n        this._isValid = true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get radical(): number {\r\n        return this._radical;\r\n    }\r\n\r\n    set radical(value: number) {\r\n        this._radical = value;\r\n    }\r\n\r\n    get nth(): number {\r\n        return this._nth;\r\n    }\r\n\r\n    set nth(value: number) {\r\n        if (Number.isSafeInteger(value) && value >= 2) {\r\n            this._nth = value;\r\n        } else {\r\n            // Error setting the nth root.\r\n            console.log('Error setting the nth root');\r\n            this._nth = 2;\r\n        }\r\n    }\r\n\r\n    get coefficient(): number {\r\n        return this._coefficient;\r\n    }\r\n\r\n    set coefficient(value: number) {\r\n        this._coefficient = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let C: string;\r\n\r\n        if (this._coefficient === 1) {\r\n            C = '';\r\n        } else if (this._coefficient === -1) {\r\n            C = '-';\r\n        } else {\r\n            C = this._coefficient.toString();\r\n        }\r\n\r\n        if (this._radical === 1) {\r\n            return `${this._coefficient}`;\r\n        } else {\r\n            if (this._nth === 2) {\r\n                return `${C}\\\\sqrt{${this._radical}}`\r\n            } else {\r\n                return `${C}\\\\sqrt[${this._nth}]{${this._radical}}`\r\n            }\r\n        }\r\n    }\r\n\r\n    get value(): number {\r\n        return this._coefficient * Math.pow(this._radical, 1 / this._nth);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (radical: number, nthroot?: number, coefficient?: number): Nthroot => {\r\n        this._coefficient = (coefficient === undefined) ? 1 : coefficient;\r\n        this._nth = (nthroot === undefined) ? 2 : nthroot;\r\n        this._radical = (radical === undefined) ? 1 : radical;\r\n\r\n        if(this._nth%2===0 && this._radical<0){\r\n            this._isValid = false;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    reduce = (): Nthroot => {\r\n        // Max value to test.\r\n        let V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n        while (V > 1) {\r\n            if (this._radical % Math.pow(V, this._nth) === 0) {\r\n                // It's dividable by V^n\r\n                this._coefficient *= V;\r\n                this._radical = this._radical / Math.pow(V, this._nth);\r\n\r\n                // Redifine the new testing value (this is optimization)\r\n                V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n                continue;\r\n            }\r\n            V--;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiply = (N: Nthroot): Nthroot => {\r\n        this._radical *= N.radical;\r\n        return this.reduce();\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Help functions\r\n    // ------------------------------------------\r\n    hasRadical = ():boolean => {\r\n        return !(this._radical===1 || this._radical===0 || this._isValid===false)\r\n    };\r\n}","/***\r\n * Monom class\r\n * Defined as coefficient * literal\r\n * Examples: 3x^2, 3/5x^2, ...\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Numeric} from \"../numeric\";\r\n\r\nexport class Monom {\r\n    private _coefficient: Fraction;\r\n    private _literal: { [Key: string]: number };\r\n\r\n    /**\r\n     * Create the monom object.\r\n     * @param value (optional) string\r\n     */\r\n    constructor(value?: string) {\r\n        this.zero();\r\n\r\n        if (value !== undefined) {\r\n            // A string is given - try to parse the value.\r\n            this.parse(value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get isMonom() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Get the coefficient as fraction\r\n     */\r\n    get coefficient(): Fraction {\r\n        return this._coefficient;\r\n    }\r\n\r\n    /**\r\n     * Set the coefficient value of the monom\r\n     * @param F     Fraction\r\n     */\r\n    set coefficient(F: Fraction) {\r\n        this._coefficient = F;\r\n    }\r\n\r\n    /**\r\n     * Get the literal part, as dictionary\r\n     */\r\n    get literal(): { [Key: string]: number } {\r\n        return this._literal;\r\n    }\r\n\r\n    get literalSqrt(): { [Key: string]: number } {\r\n\r\n        if (this.isLitteralSquare()) {\r\n            let L: { [Key: string]: number } = {}\r\n            for (let key in this._literal) {\r\n                L[key] = this._literal[key] / 2\r\n            }\r\n            return L;\r\n        } else {\r\n            return this._literal;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom\r\n     * @param L     Literal part as dictionary: <setLetter: exposant>\r\n     */\r\n    set literal(L: { [Key: string]: number }) {\r\n        this._literal = L;\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom from a string\r\n     * @param inputStr  String like x^2y^3\r\n     */\r\n    set literalStr(inputStr: string) {\r\n        // Match all x^n\r\n        for (const v of [...inputStr.matchAll(/([a-z])\\^([+-]?[0-9]+)/g)]) {\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = 0;\r\n            }\r\n            this._literal[v[1]] += +v[2];\r\n        }\r\n        for (const v of [...inputStr.matchAll(/([a-z](?!\\^))/g)]) {\r\n            // Match all single letters\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = 0;\r\n            }\r\n            this._literal[v[1]] += 1;\r\n        }\r\n    }\r\n\r\n    // Getter heplers.\r\n    /**\r\n     * Get the variables letters\r\n     */\r\n    get variables(): string[] {\r\n        this.clone().clean();\r\n        return Object.keys(this._literal)\r\n    }\r\n\r\n    // Display getter\r\n    /**\r\n     * This display getter is to be used in the polynom display getter\r\n     */\r\n    get display(): string {\r\n        let L: string = '';\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter] !== 0) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter] > 1) {\r\n                    L += `^${this._literal[letter]}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.display}`;\r\n            } else {\r\n                return '';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.display}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    get dividers(): Monom[] {\r\n        // Decompose only if the coefficient it a complet value\r\n        if (this.coefficient.denominator !== 1) {\r\n            return [this.clone()]\r\n        }\r\n\r\n        // Security : do not do this if greater than 10000\r\n        if (this.coefficient.numerator > 10000) {\r\n            return [this.clone()]\r\n        }\r\n        const dividers = Numeric.dividers(Math.abs(this.coefficient.numerator))\r\n\r\n        // Decompose the litterals parts.\r\n        let litterals: { [key: string]: number }[] = [];\r\n        for (let L in this.literal) {\r\n            // L is the letter.\r\n            litterals = this._getLitteralDividers(litterals, L)\r\n        }\r\n\r\n        const monomDividers: Monom[] = [];\r\n        if (litterals.length > 0 && dividers.length>0) {\r\n            for (let N of dividers) {\r\n                for (let L of litterals) {\r\n                    let M = new Monom();\r\n                    M.coefficient = new Fraction(N)\r\n                    M.literal = L\r\n                    monomDividers.push(M)\r\n                }\r\n            }\r\n        }else if (dividers.length===0) {\r\n            for (let L of litterals) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction().one()\r\n                M.literal = L\r\n                monomDividers.push(M)\r\n            }\r\n        } else {\r\n            for (let N of dividers) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction(N)\r\n                monomDividers.push(M)\r\n            }\r\n        }\r\n\r\n        return monomDividers.length===0? [new Monom().one()]: monomDividers;\r\n    }\r\n\r\n    private _getLitteralDividers(arr: { [key: string]: number }[], letter: string): { [key: string]: number }[] {\r\n        let tmpList: { [key: string]: number }[] = [];\r\n\r\n        for (let d = 0; d <= this.literal[letter]; d++) {\r\n            if (arr.length === 0) {\r\n                let litt: { [key: string]: number } = {}\r\n                litt[letter] = d\r\n                tmpList.push(litt)\r\n            } else {\r\n                for (let item of arr) {\r\n                    let litt: { [key: string]: number } = {}\r\n                    for(let currentLetter in item){\r\n                        litt[currentLetter] = item[currentLetter]\r\n                    }\r\n                    litt[letter] = d\r\n                    tmpList.push(litt)\r\n                }\r\n            }\r\n        }\r\n        return tmpList;\r\n    }\r\n\r\n    /**\r\n     * Display the monom, forcing the '+' sign to appear\r\n     */\r\n    get displayWithSign(): string {\r\n        // TODO: Rename or remove this getter ?\r\n        let d: String = this.display;\r\n        return (d[0] !== '-' ? '+' : '') + d;\r\n    }\r\n\r\n    /**\r\n     * Get the tex output of the monom\r\n     */\r\n    get tex(): string {\r\n        let L: string = '';\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter] !== 0) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter] > 1) {\r\n                    L += `^${this._literal[letter]}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.dfrac}`;\r\n            } else {\r\n                return '0';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.dfrac}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // -----------------------------------------\r\n    /**\r\n     * Parse a string to a monom. The string may include fraction.\r\n     * @param inputStr\r\n     */\r\n    parse = (inputStr: string): Monom => {\r\n        // Set the literal part.\r\n        this.literalStr = inputStr;\r\n\r\n        // Get the coefficient\r\n        this._coefficient = new Fraction();\r\n\r\n        for (const v of [...inputStr.replace(/([a-z])|(\\^[+-]?[0-9]+)/g, ',').split(',')]) {\r\n            // The value is empty.\r\n            if (v.trim() === '') {\r\n                continue;\r\n            }\r\n\r\n            // Multiple the current coefficient by the new found value.\r\n            this._coefficient.multiply(new Fraction(v.trim()));\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Clone the current Monom.\r\n     */\r\n    clone = (): Monom => {\r\n        let F: Monom = new Monom();\r\n\r\n        F.coefficient = this._coefficient.clone();\r\n\r\n        // Copy the literal parts.\r\n        for (let k in this._literal) {\r\n            F.setLetter(k, this._literal[k]);\r\n        }\r\n        return F;\r\n    };\r\n\r\n    /**\r\n     * Create a zero value monom\r\n     */\r\n    zero = (): Monom => {\r\n        this._coefficient = new Fraction().zero();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Create a one value monom\r\n     */\r\n    one = (): Monom => {\r\n        this._coefficient = new Fraction().one();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Clean the monom by removing each letters with a power of zero.\r\n     */\r\n    clean = (): Monom => {\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter] === 0) {\r\n                delete this._literal[letter];\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Get the opposed\r\n     * Returns a monom.\r\n     */\r\n    opposed = (): Monom => {\r\n        this._coefficient.opposed();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Add all similar monoms. If they aren't similar, they are simply skipped.\r\n     * @param M (Monom[]) The monoms to add.\r\n     */\r\n    add = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                this._coefficient.add(m.coefficient);\r\n            } else {\r\n                console.log('Add: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Subtract multiple monoms\r\n     * @param M (Monom[]) The monoms to subtract\r\n     */\r\n    subtract = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                this._coefficient.add(m.coefficient.clone().opposed());\r\n            } else {\r\n                console.log('Subtract: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiple multiple monoms to the current monom\r\n     * @param M (Monom[]) The monoms to multiply to.\r\n     */\r\n    multiply = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            // Multiply the coefficient.\r\n            this._coefficient.multiply(m.coefficient);\r\n            // Multiply the literal parts.\r\n            for (let letter in m.literal) {\r\n                this._literal[letter] = (this._literal[letter] === undefined) ? m.literal[letter] : this._literal[letter] + m.literal[letter];\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiplyByNumber = (F: Fraction | number): Monom => {\r\n        this._coefficient.multiply(F);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divide the current monoms by multiple monoms\r\n     * @param M (Monom[])\r\n     */\r\n    divide = (...M: Monom[]): Monom => {\r\n        // Depending on the given value, choose the current item\r\n        for (let v of M) {\r\n            // Divide the coefficient\r\n            this._coefficient.divide(v.coefficient);\r\n\r\n            // Subtract the power values\r\n            for (let letter in v.literal) {\r\n                this._literal[letter] = (this._literal[letter] === undefined) ? -v.literal[letter] : this._literal[letter] - v.literal[letter];\r\n\r\n                // If the power of a particular setLetter is zero, delete it from the literal part..\r\n                if (this._literal[letter] === 0) {\r\n                    delete this._literal[letter];\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the pow of a monom.\r\n     * @param nb (number) : Mathematical pow\r\n     */\r\n    pow = (nb: number): Monom => {\r\n        this._coefficient.pow(nb);\r\n        for (let letter in this._literal) {\r\n            this._literal[letter] *= nb;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the nth-root of the monom\r\n     * @param p\r\n     */\r\n    root = (p: number): Monom => {\r\n        // TODO: determiner the nth root of a monom\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Return the square root of a monom\r\n     */\r\n    sqrt = (): Monom => {\r\n        if (this.isSquare()) {\r\n            this._coefficient.sqrt();\r\n            for (let letter in this._literal) {\r\n                this._literal[letter] /= 2;\r\n            }\r\n        }\r\n        return this.root(2);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    compare = (M: Monom, sign?: string): boolean => {\r\n        // TODO: Build the compare systems.\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // To be equal, they must be the isSame\r\n                if (!this.compare(M, 'same')) {\r\n                    return false;\r\n                }\r\n\r\n                // The litteral parts are the isSame. The coefficient must be equal\r\n                return this._coefficient.isEqual(M.coefficient);\r\n            case 'same':\r\n                // Get the list of all variables from both monoms.\r\n                let M1: string[] = this.variables,\r\n                    M2: string[] = M.variables,\r\n                    K: string[] = M1.concat(M2.filter((item) => M1.indexOf(item) < 0));\r\n\r\n                for (let key of K) {\r\n                    // The setLetter is not available in one of the monom\r\n                    if (this._literal[key] === undefined || M.literal[key] === undefined) {\r\n                        return false;\r\n                    }\r\n                    // The setLetter does not have the isSame power in each monoms.\r\n                    if (this._literal[key] !== M.literal[key]) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                // All are positive check - the monoms are the sames.\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is null\r\n     */\r\n    isZero(): boolean {\r\n        return this._coefficient.value === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is one\r\n     */\r\n    isOne(): boolean {\r\n        return this._coefficient.value === 1 && this.variables.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if two monoms are equals\r\n     * @param M\r\n     */\r\n    isEqual = (M: Monom): boolean => {\r\n        return this.compare(M, '=');\r\n    };\r\n\r\n    /**\r\n     * Determine if two monoms are similar\r\n     * @param M\r\n     */\r\n    isSameAs = (M: Monom): boolean => {\r\n        return this.compare(M, 'same');\r\n    };\r\n\r\n    isSquare = (): boolean => {\r\n        if (!this.coefficient.isSquare()) {\r\n            return false;\r\n        }\r\n        return this.isLitteralSquare();\r\n    }\r\n\r\n    isLitteralSquare = (): boolean => {\r\n        for (let letter in this.literal) {\r\n            if (this.literal[letter] % 2 !== 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    // ------------------------------------------\r\n    // Misc monoms functions\r\n    // -------------------------------------\r\n    /**\r\n     * Determine if a monom contains a setLetter in it's literal part\r\n     * @param letter\r\n     */\r\n    hasLetter = (letter?: string): boolean => {\r\n        return this._literal[letter === undefined ? 'x' : letter] > 0;\r\n    };\r\n\r\n    /**\r\n     * Set the power of a particular setLetter\r\n     * @param letter (string) Letter to change\r\n     * @param pow (number) Power of the setLetter (must be positive integer.\r\n     */\r\n    setLetter = (letter: string, pow: number): void => {\r\n        // If the power is not legal or is zero, remove the setLetter from the dict\r\n        if (pow <= 0 || !Number.isSafeInteger(pow)) {\r\n            if (this._literal[letter] !== undefined) {\r\n                delete this._literal[letter];\r\n            }\r\n        } else {\r\n            this._literal[letter] = pow;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the degree of a monom. If no setLetter is given, the result will be the global degree.\r\n     * @param letter (string) Letter to get to degree (power)\r\n     */\r\n    degree = (letter?: string): number => {\r\n        if (this.variables.length === 0) {\r\n            return 0;\r\n        }\r\n        if (letter === undefined) {\r\n            // Not setLetter given -> we get the global monom degree (sum of all the letters).\r\n            return Object.values(this._literal).reduce((t, n) => t + n);\r\n        } else {\r\n            // A setLetter is given -> get the corresponding power.\r\n            return this._literal[letter] === undefined ? 0 : this._literal[letter];\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Evaluate a monom. Each setLetter must be assigned to a Fraction.\r\n     * @param values    Dictionary of <setLetter: Fraction>\r\n     */\r\n    evaluate = (values: { [key: string]: Fraction|number }|Fraction|number): Fraction => {\r\n        let r = this.coefficient.clone();\r\n\r\n        if(typeof values === 'number' || values instanceof Fraction){\r\n            let tmpValues:{ [key: string]: Fraction|number } = {}\r\n\r\n            tmpValues[this.variables[0]] = new Fraction(values)\r\n            return this.evaluate(tmpValues);\r\n        }\r\n\r\n        if(typeof values === 'object') {\r\n            for (let L in this._literal) {\r\n                if (values[L] === undefined) {\r\n                    return new Fraction().zero();\r\n                }\r\n                let value = new Fraction(values[L])\r\n                r.multiply(value.pow(this._literal[L]));\r\n            }\r\n        }\r\n        return r;\r\n    };\r\n\r\n    /**\r\n     * Derivative the monom\r\n     * @param letter\r\n     */\r\n    derivative = (letter?: string): Monom => {\r\n        // No setLetter given - assume it's the setLetter 'x'\r\n        if (letter === undefined) {\r\n            letter = 'x';\r\n        }\r\n        if (this.hasLetter(letter)) {\r\n            let d = +this._literal[letter],\r\n                dM = this.clone();\r\n\r\n            // Subtract one to the degree.\r\n            dM._literal[letter] -= 1;\r\n\r\n            // Multiply the coefficient by the previous degree\r\n            dM._coefficient.multiply(new Fraction('' + d));\r\n            return dM;\r\n        } else {\r\n            return new Monom().zero();\r\n        }\r\n    };\r\n\r\n    primitive = (letter?: string): Monom => {\r\n        if(letter===undefined){letter = 'x'}\r\n\r\n        // Zero monom\r\n        let M = this.clone()\r\n\r\n        if(M.hasLetter(letter)){\r\n            M.coefficient = M.coefficient.clone().divide(M.degree(letter)+1)\r\n            M.setLetter(letter, M.degree(letter)+1)\r\n        }else{\r\n            // There is no letter.\r\n\r\n            // The coefficient might be zero (=> x) or a number a (=> ax)\r\n            if(M.coefficient.isZero()){\r\n                M.coefficient = new Fraction().one()\r\n            }\r\n            M.setLetter(letter, 1)\r\n        }\r\n        return M\r\n    }\r\n    // ----------------------------------------\r\n    // Static functions\r\n    // ----------------------------------------\r\n\r\n    /**\r\n     * Get the least common multiple of monoms\r\n     * @param monoms    Array of monoms\r\n     */\r\n    static lcm = (...monoms: Monom[]): Monom => {\r\n        let M = new Monom(),\r\n            coeffN: number[] = monoms.map(value => value.coefficient.numerator),\r\n            coeffD: number[] = monoms.map(value => value.coefficient.denominator),\r\n            n = Numeric.gcd(...coeffN),\r\n            d = Numeric.lcm(...coeffD);\r\n\r\n        // Get the coefficient.\r\n        M.coefficient = new Fraction(n, d).reduce();\r\n\r\n        // Set the literal parts - go through each monoms literal parts and get only the lowest degree of each letters.\r\n        for (let m of monoms) {\r\n            // Remove the inexistant letters from the resulting monom\r\n            for (let letter in M.literal) {\r\n                if (!(letter in m.literal)) {\r\n                    M.literal[letter] = 0;\r\n                }\r\n            }\r\n            for (let letter in m.literal) {\r\n                if (M.literal[letter] === undefined && m.literal[letter] > 0) {\r\n                    M.literal[letter] = m.literal[letter];\r\n                } else {\r\n                    M.literal[letter] = Math.min(m.literal[letter], M.literal[letter]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n    /**\r\n     * Multiply two monoms and return a NEW monom.\r\n     * @param monoms\r\n     */\r\n    static xmultiply = (...monoms: Monom[]): Monom => {\r\n        let M = new Monom().one();\r\n\r\n        for (let m of monoms) {\r\n            M.multiply(m);\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Determine if multiple monoms are similar\r\n     * @param M\r\n     */\r\n    areSameAs = (...M: Monom[]): boolean => {\r\n        let result: boolean = true;\r\n\r\n        // Check all monoms if they are the isSame as the \"this\" one.\r\n        for (let i = 0; i < M.length; i++) {\r\n            if (!this.isSameAs(M[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All check passed -> all the monoms are similar.\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Determine if multiple monoms are equals\r\n     * @param M\r\n     */\r\n    areEquals = (...M: Monom[]): boolean => {\r\n        // They are not similar.\r\n        if (!this.areSameAs(...M)) {\r\n            return false;\r\n        }\r\n\r\n        // Check all coefficient. They must be equals.\r\n        for (let m of M) {\r\n            if (!this._coefficient.isEqual(m.coefficient)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All checks passed.\r\n        return true;\r\n    };\r\n\r\n}","type tokenType = {\r\n    [key: string]: {\r\n        precedence: number,\r\n        associative: string\r\n    }\r\n}\r\n\r\nexport class Shutingyard {\r\n    private _rpn: { token: string, tokenType: string }[] = [];\r\n    readonly _mode: 'polynom' | 'set';\r\n    private _tokenConfig: tokenType;\r\n    private _uniformize: boolean;\r\n\r\n    constructor(mode?: 'polynom' | 'set') {\r\n        this._mode = typeof mode === 'undefined' ? 'polynom' : mode;\r\n        this.tokenConfigInitialization()\r\n    }\r\n\r\n    /**\r\n     * Determin if the token is a defined operation\r\n     * Defined operations: + - * / ^ sin cos tan\r\n     * @param token\r\n     */\r\n    isOperation(token: string): boolean {\r\n        if (token[0].match(/[+\\-*/^]/g)) {\r\n            return true;\r\n        }\r\n        //\r\n        // if (token.match(/^sin|cos|tan/g)) {\r\n        //     return true;\r\n        // }\r\n\r\n        return false;\r\n    }\r\n\r\n    tokenConfigInitialization(): tokenType {\r\n        if (this._mode === 'set') {\r\n            this._tokenConfig = {\r\n                '&': {precedence: 3, associative: 'left'},\r\n                '|': {precedence: 3, associative: 'left'},\r\n                '!': {precedence: 4, associative: 'right'},\r\n                '-': {precedence: 2, associative: 'left'}\r\n            }\r\n            this._uniformize = false;\r\n        } else {\r\n            this._tokenConfig = {\r\n                '^': {precedence: 4, associative: 'right'},\r\n                '*': {precedence: 3, associative: 'left'},\r\n                '/': {precedence: 3, associative: 'left'},\r\n                '+': {precedence: 2, associative: 'left'},\r\n                '-': {precedence: 2, associative: 'left'},\r\n                '%': {precedence: 3, associative: 'right'},\r\n                'sin': {precedence: 4, associative: 'right'},\r\n                'cos': {precedence: 4, associative: 'right'},\r\n                'tab': {precedence: 4, associative: 'right'},\r\n            }\r\n            this._uniformize = true\r\n        }\r\n        return this._tokenConfig\r\n    }\r\n\r\n    /**\r\n     * Get the next token to analyse.\r\n     * @param expr (string) Expression to analyse\r\n     * @param start (number) CUrrent position in the expr string.\r\n     */\r\n    NextToken2(expr: string, start: number): [string, number, string] {\r\n        let token: string, tokenType: string;\r\n        token = '';\r\n        tokenType = '';\r\n        // Case of parenthesis or comma (generic items)\r\n        if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        } else{\r\n            // Order token keys by token characters length (descending)\r\n            const keys = Object.keys(this._tokenConfig).sort((a,b)=>b.length-a.length)\r\n\r\n            for(let key of keys){\r\n                if(expr.substr(start, key.length) === key){\r\n                    token += key;\r\n                    tokenType = 'operation'\r\n                    break\r\n                }\r\n            }\r\n\r\n            if(token===''){\r\n                // No function found ! Might be a coefficient !\r\n                if( expr[start].match(/[0-9]/) ) {\r\n                    token = expr.substr(start).match(/^([0-9.,/]+)/)[0]\r\n                    tokenType = 'coefficient'\r\n                }else if (expr[start].match(/[a-zA-Z]/)) {\r\n                    token = expr.substr(start).match(/^([a-zA-Z])/)[0]\r\n                    tokenType = 'variable'\r\n                }else{\r\n                    console.log('Unidentified token', expr[start], expr, start)\r\n                    token = expr[start]\r\n                    tokenType = 'monom'\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n\r\n        // console.log(token, tokenType)\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    NextToken(expr: string, start: number): [string, number, string] {\r\n        let tokenMatch: string[], token: string, tokenType: string;\r\n\r\n        this.NextToken2(expr, start)\r\n        // Detect a fraction monoms or return empty array\r\n        tokenMatch = (expr.substr(start).match(/^[0-9/a-zA-Z^]+/g)) || [];\r\n\r\n        if (expr.substr(start, start + 3).match(/^(sin|cos|tan)/g)) {\r\n            token = expr.substr(start, 3)\r\n            tokenType = 'function'\r\n        } else if (tokenMatch.length > 0) {\r\n            token = tokenMatch[0];\r\n            tokenType = 'monom';\r\n        }\r\n        // It's an operation !\r\n        else if (expr[start].match(/[+\\-*/^]/g)) {\r\n            token = expr[start];\r\n            tokenType = 'operation';\r\n        } else if (expr[start].match(/[&|!]/g)) {\r\n            token = expr[start];\r\n            tokenType = 'operation';\r\n        }\r\n        // It's an opening parenthese\r\n        else if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        }\r\n        // It's a monom.\r\n        else {\r\n            // TODO: Actually, negative exposant aren't supported.\r\n            // token = (expr.substr(start).match(/^[\\da-z\\^]+/g)[0])||'';\r\n            token = tokenMatch[0];\r\n            tokenType = 'monom';\r\n\r\n            if (token === '') {\r\n                token = expr[start];\r\n                tokenType = 'monom';\r\n                console.log('SHUTING YARD - NEXT TOKEN: error at ', start);\r\n            }\r\n        }\r\n\r\n        // console.log(token, start + token.length, tokenType);\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    /**\r\n     * Sanitize an expression by adding missing common operation (multiplication between parentheseses)\r\n     * @param expr\r\n     * @constructor\r\n     */\r\n    Uniformizer(expr: string): string {\r\n        // Determiner if need to be uniformized\r\n        if(!this._uniformize){return expr}\r\n\r\n        let expr2;\r\n        // Replace missing multiplication between two parenthese\r\n        expr2 = expr.replace(/\\)\\(/g, ')*(');\r\n\r\n        // Replace missing multiplication between number or setLetter and parenthese.\r\n\r\n        // 3x(x-4) => 3x*(x-4)\r\n        expr2 = expr2.replace(/([\\da-zA-Z])(\\()/g, \"$1*$2\");\r\n\r\n        // (x-4)3x => (x-4)*3x\r\n        expr2 = expr2.replace(/(\\))([\\da-zA-Z])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between number and letters.\r\n        // 3x => 3*x\r\n        expr2 = expr2.replace(/([0-9])([a-zA-Z])/g, \"$1*$2\");\r\n        expr2 = expr2.replace(/([a-zA-Z])([0-9])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between letters ?\r\n        // TODO: More robust solution to handle all letters ?\r\n        expr2 = expr2.replace(/([abcxyz])([abcxyz])/g, \"$1*$2\");\r\n\r\n        // Restore operation auto formating (prevent adding the mutliplcation star)\r\n        // TODO: Accept list of functions\r\n        let fnToken = ['sin', 'cos', 'tan']\r\n        for (let token of fnToken) {\r\n            expr2 = expr2.replace(new RegExp(token + '\\\\*', 'g'), token);\r\n        }\r\n\r\n        return expr2;\r\n    }\r\n\r\n    /**\r\n     * Parse an expression using the shutting yard tree algorithms\r\n     * @param expr (string) Expression to analyse\r\n     * Returns a RPN list of items.\r\n     * @param operators\r\n     */\r\n    parse(expr: string, operators?: string[]): Shutingyard {\r\n        let outQueue: {token:string, tokenType: string}[] = [],    // Output queue\r\n            opStack: {token:string, tokenType: string}[] = [],     // Operation queue\r\n            token: string = '',\r\n            tokenPos: number = 0,\r\n            tokenType: string = '',\r\n            previousOpStatckLength = 0\r\n\r\n        expr = this.Uniformizer(expr);\r\n\r\n        let securityLoopLvl1 = 50,\r\n            securityLoopLvl2_default = 50,\r\n            securityLoopLvl2;\r\n\r\n        while (tokenPos < expr.length) {\r\n            securityLoopLvl1--;\r\n            if (securityLoopLvl1 === 0) {\r\n                console.log('SECURITY LEVEL 1 EXIT');\r\n                break;\r\n            }\r\n\r\n            // Get the next token and the corresponding new (ending) position\r\n            [token, tokenPos, tokenType] = this.NextToken2(expr, tokenPos);\r\n\r\n            switch (tokenType) {\r\n                case 'monom':\r\n                case 'coefficient':\r\n                case 'variable':\r\n                    outQueue.push({\r\n                        token,\r\n                        tokenType\r\n                    });\r\n                    // if(previousOpStatckLength == opStack.length && outQueue.length>=2){\r\n                    //     console.log('opStatckLength', outQueue, opStack.length)\r\n                    //     outQueue.push('*')\r\n                    // }\r\n                    break;\r\n                case 'operation':\r\n                    previousOpStatckLength = opStack.length;\r\n                    //If the token is an operator, o1, then:\r\n                    if (opStack.length > 0) {\r\n                        let opTop = opStack[opStack.length - 1];\r\n\r\n\r\n                        securityLoopLvl2 = +securityLoopLvl2_default;\r\n\r\n                        //while there is an operator token o2, at the top of the operator stack and\r\n                        while (opTop.token in this._tokenConfig && (\r\n                                //either o1 is left-associative and its precedence is less than or equal to that of o2,\r\n                                (this._tokenConfig[token].associative === 'left' && this._tokenConfig[token].precedence <= this._tokenConfig[opTop.token].precedence)\r\n                                ||\r\n                                //or o1 is right associative, and has precedence less than that of o2,\r\n                                (this._tokenConfig[token].associative === 'right' && this._tokenConfig[token].precedence < this._tokenConfig[opTop.token].precedence)\r\n                            )\r\n                            ) {\r\n\r\n                            /* Security exit ! */\r\n                            securityLoopLvl2--;\r\n                            if (securityLoopLvl2 === 0) {\r\n                                console.log('SECURITY LEVEL 2 OPERATION EXIT');\r\n                                break;\r\n                            }\r\n\r\n                            // Add the operation to the queue\r\n                            outQueue.push((opStack.pop()) || {token: '', tokenType: 'operation'});\r\n\r\n                            // Get the next operation on top of the Stack.\r\n                            if(opStack.length===0){break;}\r\n                            opTop = opStack[opStack.length - 1];\r\n                        }\r\n                    }\r\n                    //at the end of iteration push o1 onto the operator stack\r\n                    opStack.push({token,tokenType});\r\n                    break;\r\n                case 'function-argument':\r\n                    // TODO: check if the opStack exist.\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 0) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 FUNCTION ARGUMENT EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n                    break;\r\n                case '(':\r\n                    opStack.push({token,tokenType});\r\n                    // Add an empty value if next element is negative.\r\n                    if (expr[tokenPos] === '-') {\r\n                        outQueue.push({token: '0', tokenType: 'coefficient'});\r\n                    }\r\n                    break;\r\n                case ')':\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    //Until the token at the top of the stack is a left parenthesis, pop operators off the stack onto the output queue.\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 1 /*Maybe zero !? */) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 CLOSING PARENTHESE EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n\r\n                    //Pop the left parenthesis from the stack, but not onto the output queue.\r\n                    opStack.pop();\r\n                    break;\r\n                case 'function':\r\n                    opStack.push({token, tokenType});\r\n                    break;\r\n                default:\r\n                    // In theory, everything should be handled.\r\n                    console.log(`SHUTING YARD: ${tokenType} : ${token} `);\r\n            }\r\n\r\n            // Output\r\n            // console.log(outQueue.concat(opStack.reverse()).join(\" \"));\r\n        }\r\n\r\n        // console.log(outQueue.concat(opStack.reverse()));\r\n        this._rpn = outQueue.concat(opStack.reverse());\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    // Getter\r\n    get rpn() {\r\n        // console.log(this._rpn)\r\n        return this._rpn;\r\n    }\r\n\r\n\r\n}\r\n","export default class randomCore {\r\n    protected _config: Object\r\n    protected _defaultConfig: Object\r\n    mergeConfig = (config: Object, defaultConfig: Object): Object => {\r\n        if (config !== undefined) {\r\n            return {...defaultConfig, ...config}\r\n        }\r\n        return defaultConfig\r\n    }\r\n\r\n    generate = (): unknown => {\r\n        return undefined\r\n    }\r\n\r\n    config = (config: Object): randomCore => {\r\n        this._config = this.mergeConfig(config, this._defaultConfig)\r\n        return this\r\n    }\r\n}","import randomCore from \"./randomCore\";\r\nimport {randomPolynomConfig} from \"./rndTypes\";\r\nimport {Polynom} from \"../algebra\";\r\nimport {Monom} from \"../algebra\";\r\nimport {rndMonom} from \"./rndMonom\";\r\nimport {Random} from \"./random\";\r\n\r\n/**\r\n * Random polynoms\r\n */\r\nexport class rndPolynom extends randomCore {\r\n    declare protected _config: randomPolynomConfig\r\n    declare protected _defaultConfig: randomPolynomConfig\r\n\r\n    constructor(userConfig?: randomPolynomConfig) {\r\n        super();\r\n\r\n        // Default config for a random polynom\r\n        this._defaultConfig = {\r\n            letters: 'x',\r\n            degree: 2,\r\n            fraction: false,\r\n            zero: false,\r\n            unit: false,\r\n            factorable: false,\r\n            allowNullMonom: true,\r\n            numberOfMonoms: 0\r\n        }\r\n\r\n        // Merge config with initialiser\r\n        this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n    }\r\n\r\n    generate = (): Polynom => {\r\n        // Create the polynom\r\n        let P = new Polynom().empty(),\r\n            M: Monom\r\n\r\n        for (let i = this._config.degree; i >= 0; i--) {\r\n            // Create monom of corresponding degree.\r\n            M = new rndMonom({\r\n                letters: this._config.letters,\r\n                degree: i,\r\n                fraction: this._config.fraction,\r\n                zero: (i === this._config.degree) ? false : this._config.allowNullMonom\r\n            }).generate()\r\n\r\n            // If degree is the greatest and unit is true, set the monom value to one.\r\n            if (this._config.unit && this._config.degree === i) {\r\n                M.coefficient.one()\r\n            }\r\n\r\n            // Add to the polynom\r\n            P.add(M)\r\n        }\r\n\r\n        // If the number of monoms is greater than the allowed value, remove some of them...\r\n        if (this._config.numberOfMonoms > 0 && this._config.numberOfMonoms < P.length) {\r\n            console.log(P.monoms.length)\r\n            P.monoms = Random.array(P.monoms, this._config.numberOfMonoms)\r\n        }\r\n        return P\r\n    }\r\n\r\n    factorable = (): Polynom => {\r\n        let P = new Polynom()\r\n\r\n        return P\r\n    }\r\n}","/**\r\n * Random helpers\r\n */\r\nexport class rndHelpers {\r\n\r\n    /**\r\n     * Random boolean with a percent ratio\r\n     * @param percent\r\n     */\r\n    static randomBool(percent:number=0.5):boolean{\r\n        return Math.random()<percent;\r\n    }\r\n\r\n    /**\r\n     * Random integer between two values.\r\n     * @param a (number) : From this value to the second value. If the second is ommited, this value is the max value.\r\n     * @param b (number) : To this value. If this is ommited.\r\n     */\r\n    static randomInt(a:number, b?:number):number{\r\n        if(b===undefined){return this.randomInt(0,a);}\r\n\r\n        return Math.floor(Math.random() * (b - a + 1) + a);\r\n    }\r\n\r\n    /**\r\n     * Random integer between -max and max value.\r\n     * @param max (number) : determine the limits.\r\n     * @param zero (bool) : determine if zero is allowed or not.\r\n     */\r\n    static randomIntSym(max:number, zero?:boolean):number{\r\n        if(zero===false){\r\n            return this.randomBool()?this.randomInt(1,max):-this.randomInt(1,max);\r\n        }else{\r\n            return this.randomInt(-max, max);\r\n        }\r\n    }\r\n\r\n    static randomArray(arr: any[], number?:number):any[]{\r\n        if(number===undefined){number = 1}\r\n\r\n        // Return a clone array\r\n        if(arr.length<=0){return Object.values(arr)}\r\n\r\n        // Randomize the array and return the n first elements.\r\n        return rndHelpers.shuffleArray(arr).slice(0,number);\r\n    }\r\n\r\n    static randomItem(arr: any[]): any{\r\n        if(arr.length===0){return ''}\r\n        return this.randomArray(arr, 1)[0]\r\n    }\r\n\r\n    static shuffleArray(arr: any[]): any[] {\r\n        // The Fisher-Yates algorithm\r\n        let shuffleArray = Object.values(arr)\r\n        for (let i = shuffleArray.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            const temp = shuffleArray[i];\r\n            shuffleArray[i] = shuffleArray[j];\r\n            shuffleArray[j] = temp;\r\n        }\r\n\r\n        return shuffleArray;\r\n    }\r\n\r\n}","import {rndPolynom} from \"./rndPolynom\";\r\nimport {rndMonom} from \"./rndMonom\";\r\nimport {rndHelpers} from \"./rndHelpers\";\r\nimport {randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {Monom, Polynom} from \"../algebra\";\r\n\r\n// export var Random = {\r\n//     monom: rndMonom,\r\n//     polynom: rndPolynom,\r\n//     number: rndHelpers.randomInt,\r\n//     numberSym: rndHelpers.randomIntSym,\r\n//     bool: rndHelpers.randomBool,\r\n//     array: rndHelpers.randomArray,\r\n//     item: rndHelpers.randomItem,\r\n//     shuffle: rndHelpers.shuffleArray\r\n// }\r\n\r\nexport namespace Random {\r\n    export function polynom(config?: randomPolynomConfig): Polynom {\r\n        return new rndPolynom(config).generate()\r\n    }\r\n\r\n    export function monom(config?: randomMonomConfig): Monom {\r\n        return new rndMonom(config).generate()\r\n    }\r\n\r\n    export function number(from:number, to:number):number { return rndHelpers.randomInt(from,to)}\r\n    export function numberSym(max:number, allowZero?:boolean):number { return rndHelpers.randomIntSym(max, allowZero)}\r\n    export function bool(percent?:number):boolean { return rndHelpers.randomBool(percent)}\r\n    export function array(arr:any[], number?:number):any[] { return rndHelpers.randomArray(arr, number)}\r\n    export function item(arr:any[]):any { return rndHelpers.randomItem(arr)}\r\n    export function shuffle(arr:any[]):any { rndHelpers.shuffleArray(arr)}\r\n\r\n\r\n}","import {Monom} from \"./monom\";\r\nimport {Polynom} from \"./polynom\";\r\nimport {Equation} from \"./equation\";\r\nimport {LinearSystem} from \"./linearSystem\";\r\nimport {Rational} from \"./rational\";\r\nimport {Logicalset} from \"./logicalset\";\r\n\r\nexport * from \"./equation\"\r\nexport * from \"./linearSystem\"\r\nexport * from \"./logicalset\"\r\nexport * from \"./monom\"\r\nexport * from \"./polynom\"\r\nexport * from \"./rational\"\r\n\r\nexport namespace Algebra {\r\n    export function monom(value?: string): Monom {\r\n        return new Monom(value)\r\n    }\r\n\r\n    export function polynom(polynomString?: string, ...values: any[]): Polynom {\r\n        return new Polynom(polynomString, ...values)\r\n    }\r\n\r\n    export function equation(...equations: any): Equation {\r\n        return new Equation(...equations)\r\n    }\r\n\r\n    export function linearSystem(...equations: string[]): LinearSystem {\r\n        return new LinearSystem(...equations)\r\n    }\r\n\r\n    export function rational(numerator?: Polynom, denominator?: Polynom):Rational {\r\n        return new Rational(numerator, denominator)\r\n    }\r\n\r\n    export function logicalset(value: string):Logicalset {\r\n        return new Logicalset(value)\r\n    }\r\n}","import randomCore from \"./randomCore\";\r\nimport {Monom} from \"../algebra\";\r\nimport {randomMonomConfig, randomPolynomConfig} from \"./rndTypes\";\r\nimport {Random} from \"./random\";\r\n\r\n/**\r\n * Create a random monom based on a based configuration\r\n */\r\n    export class rndMonom extends randomCore {\r\n        declare protected _config: randomMonomConfig\r\n        declare protected _defaultConfig: randomPolynomConfig\r\n\r\n        constructor(userConfig?: randomMonomConfig) {\r\n            super();\r\n\r\n            this._defaultConfig = {\r\n                letters: 'x',\r\n                degree: 2,\r\n                fraction: true,\r\n                zero: false\r\n            }\r\n\r\n            this._config = this.mergeConfig(userConfig, this._defaultConfig)\r\n        }\r\n\r\n        generate = (): Monom => {\r\n            // Create a monom instance\r\n            let M = new Monom()\r\n\r\n            // Generate the coefficient\r\n            M.coefficient.parse(Random.numberSym(10, this._config.zero), (this._config.fraction) ? Random.number(1, 10) : 1).reduce();\r\n\r\n            // Calculate the degree of the monom\r\n            if (this._config.letters.length > 1) {\r\n                // Initialise each items...\r\n                for (let L of this._config.letters.split('')) {\r\n                    M.setLetter(L, 0);\r\n                }\r\n                for (let i = 0; i < this._config.degree; i++) {\r\n                    const L = Random.item(this._config.letters.split(\"\"))\r\n                    M.setLetter(L, M.degree(L) + 1)\r\n                }\r\n            } else {\r\n                M.setLetter(this._config.letters, this._config.degree)\r\n            }\r\n\r\n            return M\r\n        }\r\n    }\r\n","/**\r\n * Polynom module contains everything necessary to handle polynoms.*\r\n * @module Polynom\r\n */\r\n\r\nimport {Monom} from './monom';\r\nimport {Shutingyard} from '../shutingyard';\r\nimport {Numeric} from '../numeric';\r\nimport {Fraction} from '../coefficients';\r\nimport {Random} from \"../random\";\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n * ```\r\n * let P = new Polynom('3x-4')\r\n * ```\r\n */\r\nexport class Polynom {\r\n    private _rawString: string;\r\n    private _monoms: Monom[];\r\n    private _factors: Polynom[];\r\n    private _texString: string;\r\n\r\n    /**\r\n     *\r\n     * @param {string} polynomString (optional) Default polynom to parse on class creation\r\n     * @param values\r\n     */\r\n    constructor(polynomString?: string, ...values: any[]) {\r\n        this._monoms = [];\r\n        this._factors = [];\r\n        if (polynomString !== undefined) {\r\n            this.parse(polynomString, ...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    get isPolynom() {\r\n        return true;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get monoms() {\r\n        return this._monoms;\r\n    }\r\n\r\n    set monoms(M: Monom[]) {\r\n        this._monoms = M;\r\n    }\r\n\r\n    get factors(): Polynom[] {\r\n        return this._factors;\r\n    }\r\n\r\n    set factors(value: Polynom[]) {\r\n        this._factors = value;\r\n    }\r\n\r\n    get texFactors(): string {\r\n        this.factorize()\r\n\r\n        let tex = ''\r\n        for (let f of this.factors) {\r\n            if (f.monoms.length > 1) {\r\n                tex += `(${f.tex})`\r\n            } else {\r\n                tex = f.tex + tex;\r\n            }\r\n        }\r\n        return tex;\r\n    }\r\n\r\n    get texString(): string {\r\n        return this._texString;\r\n    }\r\n\r\n    get length() {\r\n        // TODO: Must reduce the monoms list to remove the zero coefficient.\r\n        return this._monoms.length;\r\n    }\r\n\r\n    get display(): string {\r\n        return this.genDisplay();\r\n    }\r\n\r\n    get raw(): string {\r\n        return this._rawString\r\n    }\r\n\r\n    get tex(): string {\r\n        return this.genDisplay('tex');\r\n    }\r\n\r\n    get isMultiVariable(): boolean {\r\n        const B = false;\r\n        for (const m of this._monoms) {\r\n            if (m.variables.length > 1) {\r\n                return true;\r\n            }\r\n        }\r\n        return B;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            V = V.concat(m.variables);\r\n        }\r\n\r\n        // Remove duplicates.\r\n        V = [...new Set(V)];\r\n\r\n        return V;\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    private genDisplay = (output?: string, forceSign?: boolean, wrapParentheses?: boolean): string => {\r\n        let P: string = '';\r\n\r\n        for (const k of this._monoms) {\r\n            if (k.coefficient.value === 0) {\r\n                continue;\r\n            }\r\n\r\n            P += `${(k.coefficient.sign() === 1 && (P !== '' || forceSign === true)) ? '+' : ''}${(output === 'tex') ? k.tex : k.display}`;\r\n        }\r\n\r\n        if (wrapParentheses === true && this.length > 1) {\r\n            if (output === 'tex') {\r\n                P = `\\\\left( ${P} \\\\right)`;\r\n            } else {\r\n                P = `(${P})`;\r\n            }\r\n        }\r\n\r\n        if (P === '') {\r\n            P = '0';\r\n        }\r\n        return P;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse a string to a polynom.\r\n     * @param inputStr\r\n     * @param values: as string, numbers or fractions\r\n     */\r\n    parse = (inputStr: string, ...values: any[]): Polynom => {\r\n        if (values === undefined || values.length === 0) {\r\n            inputStr = '' + inputStr;\r\n            this._rawString = inputStr;\r\n\r\n            // Parse the polynom using the shuting yard algorithm\r\n            if (inputStr !== '' && !isNaN(Number(inputStr))) {\r\n                this.empty();\r\n                // It's a simple number.\r\n                let m = new Monom();\r\n                m.coefficient = new Fraction(inputStr);\r\n                m.literalStr = '';\r\n                this.add(m);\r\n                return this;\r\n            }\r\n\r\n            // Parse the string.\r\n            return this.shutingYardToReducedPolynom(inputStr);\r\n        } else if (/^[a-z]/.test(inputStr)) {\r\n            // We assume the inputStr contains only letters.\r\n            this.empty();\r\n\r\n            let fractions = values.map(x => new Fraction(x));\r\n            // Multiple setLetter version\r\n            if (inputStr.length > 1) {\r\n                // TODO: check that the number of values given correspond to the letters (+1 eventually)\r\n                let letters = inputStr.split(''),\r\n                    i = 0;\r\n                for (let F of fractions) {\r\n                    let m = new Monom();\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = letters[i] || '';\r\n                    this.add(m);\r\n                    i++;\r\n                }\r\n            }\r\n            // Single setLetter version\r\n            else {\r\n                let n = fractions.length - 1;\r\n                for (let F of fractions) {\r\n                    let m = new Monom()\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = `${inputStr}^${n}`\r\n                    this.add(m);\r\n                    n--;\r\n                }\r\n            }\r\n            return this;\r\n        } else {\r\n            return this.zero();\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * Main parse using a shutting yard class\r\n     * @param inputStr\r\n     */\r\n    private shutingYardToReducedPolynom = (inputStr: string): Polynom => {\r\n        // Get the RPN array of the current expression\r\n        const SY: Shutingyard = new Shutingyard().parse(inputStr);\r\n        const rpn: { token: string, tokenType: string }[] = SY.rpn;\r\n        let m1: Polynom;\r\n        let m2: Polynom;\r\n\r\n        let stack: Polynom[] = [],\r\n            previousToken: string = null,\r\n            tempPolynom\r\n        for (const element of rpn) {\r\n            if (element.tokenType === 'coefficient' || element.tokenType === 'variable') {\r\n                tempPolynom = new Polynom().zero();\r\n                tempPolynom.monoms = [new Monom(element.token)]\r\n                stack.push(tempPolynom.clone())\r\n            } else if (element.tokenType === 'operation') {\r\n                m2 = (stack.pop()) || new Polynom().zero();\r\n                m1 = (stack.pop()) || new Polynom().zero();\r\n                switch (element.token) {\r\n                    case '+':\r\n                        stack.push(m1.add(m2))\r\n                        break;\r\n                    case '-':\r\n                        stack.push(m1.subtract(m2))\r\n                        break;\r\n                    case '*':\r\n                        stack.push(m1.multiply(m2))\r\n                        break;\r\n                    case '^':\r\n                        stack.push(m1.pow(+previousToken))\r\n                }\r\n            }\r\n            previousToken = element.token;\r\n        }\r\n\r\n        this._monoms = stack[0].monoms;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the polynom\r\n     */\r\n    clone = (): Polynom => {\r\n        const P = new Polynom();\r\n        const M: Monom[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            M.push(m.clone());\r\n        }\r\n\r\n        P.monoms = M;\r\n        return P;\r\n    };\r\n\r\n    /**\r\n     * Set the polynom to zero.\r\n     * @returns {this}\r\n     */\r\n    zero = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().zero());\r\n        this._rawString = '0';\r\n        return this;\r\n    };\r\n\r\n    one = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().one());\r\n        this._rawString = '1';\r\n        return this;\r\n    }\r\n\r\n    empty = (): Polynom => {\r\n        this._monoms = [];\r\n        this._rawString = '';\r\n        return this;\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Polynom generators and randomizers\r\n    // -----------------------------------------------\r\n    private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n        degree: 2,\r\n        unit: true,\r\n        fractions: false,\r\n        factorable: false,\r\n        letters: 'x',\r\n        allowNullMonom: false,\r\n        numberOfMonoms: false\r\n    };\r\n    get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n        return this._randomizeDefaults;\r\n    }\r\n\r\n    set randomizeDefaults(value) {\r\n        this._randomizeDefaults = value;\r\n    }\r\n\r\n    randomize = (config: { [key: string]: number | string | boolean }): Polynom => {\r\n        let P = new Polynom();\r\n\r\n        // Check the config file and use the default values.\r\n        if (config === undefined) {\r\n            config = {};\r\n        }\r\n        for (let k in this._randomizeDefaults) {\r\n            if (config[k] === undefined) {\r\n                config[k] = this._randomizeDefaults[k];\r\n            }\r\n        }\r\n\r\n        // TODO: Build a more robust randomize function\r\n        return P;\r\n    }\r\n\r\n    rndFactorable = (degree: number = 2, unit: boolean | number = false, letters: string = 'x'): Polynom => {\r\n        // TODO: Make rndFactorable polynom generator more user friendly\r\n        this._factors = [];\r\n        for (let i = 0; i < degree; i++) {\r\n            let factorUnit = unit === true || i >= unit,\r\n                p = Random.polynom({\r\n                    degree: 1,\r\n                    unit: factorUnit,\r\n                    fraction: false,\r\n                    letters\r\n                });\r\n            this._factors.push(p);\r\n        }\r\n\r\n        this.empty().monoms = this._factors[0].monoms;\r\n        for (let i = 1; i < this._factors.length; i++) {\r\n            this.multiply(this._factors[i]);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Polynom => {\r\n        this._monoms = this._monoms.map(m => m.opposed());\r\n        return this;\r\n    };\r\n\r\n    add = (...values: any[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value.isPolynom) {\r\n                this._monoms = this._monoms.concat(value.monoms);\r\n            } else if (value.isMonom) {\r\n                this._monoms.push(value.clone());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()));\r\n            } else {\r\n                this._monoms.push(new Monom(value));\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (...values: any[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value.isPolynom) {\r\n                this._monoms = this._monoms.concat(value.clone().opposed().monoms);\r\n            } else if (value.isMonom) {\r\n                this._monoms.push(value.clone().opposed());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()).opposed());\r\n            } else {\r\n                this._monoms.push(new Monom(value).opposed());\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    multiply = (value: any): Polynom => {\r\n        if (value.isPolynom) {\r\n            return this.multiplyByPolynom(value);\r\n        } else if (value.isFraction) {\r\n            return this.multiplyByFraction(value);\r\n        } else if (value.isMonom) {\r\n            return this.multiplyByMonom(value);\r\n        } else if (Number.isSafeInteger(value)) {\r\n            return this.multiplyByInteger(value);\r\n        }\r\n\r\n        // Something went wrong...\r\n        return this;\r\n    }\r\n\r\n    private multiplyByPolynom = (P: Polynom): Polynom => {\r\n        const M: Monom[] = [];\r\n        for (const m1 of this._monoms) {\r\n            for (const m2 of P.monoms) {\r\n                M.push(Monom.xmultiply(m1, m2));\r\n            }\r\n        }\r\n\r\n        this._monoms = M;\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.multiply(F);\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByInteger = (nb: number): Polynom => {\r\n        return this.multiplyByFraction(new Fraction(nb));\r\n    };\r\n\r\n    private multiplyByMonom = (M: Monom): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.multiply(M)\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n    /**\r\n     * Divide the current polynom by another polynom.\r\n     * @param P\r\n     * returns {quotient: Polynom, reminder: Polynom}\r\n     */\r\n    euclidian = (P: Polynom): { quotient: Polynom, reminder: Polynom } => {\r\n        const letter: string = P.variables[0];\r\n        const quotient: Polynom = new Polynom().zero();\r\n        const reminder: Polynom = this.clone().reorder(letter);\r\n\r\n        // There is no variable !\r\n        if (P.variables.length === 0) {\r\n            return {quotient, reminder}\r\n        }\r\n\r\n        // Get at least a letter\r\n\r\n        const maxMP: Monom = P.monomByDegree(undefined, letter);\r\n        const degreeP: number = P.degree(letter);\r\n\r\n        let newM: Monom;\r\n\r\n        // Make the euclidian division of the two polynoms.\r\n        let MaxIteration = this.degree(letter) * 2;\r\n        while (reminder.degree(letter) >= degreeP && MaxIteration >= 0) {\r\n            // console.log('EUCLIDE Q', quotient.degree(letter), quotient.tex)\r\n            // console.log('EUCLIDE R', reminder.degree(letter), reminder.tex)\r\n            // console.log('ITERATION', MaxIteration)\r\n            MaxIteration--\r\n\r\n            // Get the greatest monom divided by the max monom of the divider\r\n            newM = reminder.monomByDegree(undefined, letter).clone().divide(maxMP);\r\n\r\n            if (newM.isZero()) {\r\n                break;\r\n            }\r\n\r\n            // Get the new quotient and reminder.\r\n            quotient.add(newM);\r\n            reminder.subtract(P.clone().multiply(newM));\r\n        }\r\n\r\n        return {quotient, reminder};\r\n    };\r\n\r\n    divide = (value: any): Polynom => {\r\n        if (value.isFraction) {\r\n            this.divideByFraction(value);\r\n        } else if (Number.isSafeInteger(value)) {\r\n            return this.divideByInteger(value);\r\n        }\r\n    }\r\n\r\n    private divideByInteger = (nb: number): Polynom => {\r\n        const nbF = new Fraction(nb);\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(nbF);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    private divideByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(F);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    pow = (nb: number): Polynom => {\r\n        if (!Number.isSafeInteger(nb)) {\r\n            return this.zero();\r\n        }\r\n        if (nb < 0) {\r\n            return this.zero();\r\n        }\r\n        if (nb === 0) {\r\n            return new Polynom();\r\n        }\r\n\r\n        const P = this.clone();\r\n        for (let i = 1; i < nb; i++) {\r\n            this.multiply(P);\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param P\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (P: Polynom, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '='\r\n        }\r\n\r\n        // Create clone version to reduce them without altering the original polynoms.\r\n        const cP1 = this.clone().reduce().reorder();\r\n        const cP2 = P.clone().reduce().reorder();\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree() !== cP2.degree()) {\r\n                    return false;\r\n                }\r\n\r\n                // Check if the coefficients are the isSame.\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isEqual(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            case 'same':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree() !== cP2.degree()) {\r\n                    return false;\r\n                }\r\n\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isSameAs(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    isZero(): boolean {\r\n        return (this._monoms.length === 1 && this._monoms[0].coefficient.isZero()) || this._monoms.length === 0;\r\n    }\r\n\r\n    isOne(): boolean {\r\n        return this._monoms.length === 1 && this._monoms[0].coefficient.isOne();\r\n    }\r\n\r\n    isEqual = (P: Polynom): boolean => {\r\n        return this.compare(P, '=');\r\n    };\r\n\r\n    isSameAs = (P: Polynom): boolean => {\r\n        return this.compare(P, 'same');\r\n    };\r\n\r\n    isOpposedAt = (P: Polynom): boolean => {\r\n        return this.compare(P.clone().opposed(), '=');\r\n    };\r\n\r\n    isFactorized = (polynomString: string): boolean => {\r\n        let P;\r\n\r\n        // Check if polynom is complete...\r\n        if (polynomString.match(/\\(/g).length !== polynomString.match(/\\)/g).length) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check if the provided (string) version is fully factorized.\r\n        // Run a regex on the string.\r\n        let polynomStringNormalized = polynomString.replaceAll('*', ''),\r\n            polynomStringReduced = '' + polynomStringNormalized,\r\n            factors: string[] = [];\r\n\r\n        for (let x of polynomStringNormalized.matchAll(/\\(([a-z0-9+\\-]+)\\)(\\^[0-9]*)?/g)) {\r\n            if (x[2] !== undefined) {\r\n                for (let i = 0; i < +x[2].substr(1); i++) {\r\n                    factors.push(x[1])\r\n                }\r\n            } else {\r\n                factors.push(x[1]);\r\n            }\r\n            polynomStringReduced = polynomStringReduced.replaceAll(x[0], '');\r\n        }\r\n        if (polynomStringReduced !== '') {\r\n            factors.push(polynomStringReduced);\r\n        }\r\n        let polyFactors = factors.map(x => new Polynom(x));\r\n\r\n        // Factorize the current polynom.\r\n        this.factorize();\r\n\r\n        // Compare the given factors with the generated factors\r\n        let sign = 1;\r\n        for (let f of this.factors) {\r\n            for (let i = 0; i < polyFactors.length; i++) {\r\n                if (f.isEqual(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    break;\r\n                } else if (f.isOpposedAt(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    sign = -sign;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // The polyfactors must be empty and the cumulative opposite factors must be 1.\r\n        return (polyFactors.length === 0 && sign === 1);\r\n    }\r\n\r\n    isDeveloped = (polynomString: string): Boolean => {\r\n        let P: Polynom;\r\n\r\n        // There is at least one parenthese - it is not developed.\r\n        if (polynomString.match(/\\(/g).length + polynomString.match(/\\)/g).length) {\r\n            return false\r\n        }\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            // Build the polynom\r\n            P = new Polynom(polynomString);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check that everything is completely developed. Actually, there are no parentheses... so it is fully developed\r\n\r\n        // maybe it wasn't reduced and not ordered...\r\n        // compare polynom string.\r\n\r\n        // normalize the string\r\n        let polynomStringNormalized = polynomString.replaceAll('[*\\s]', '')\r\n\r\n        // Determine if it's the exact same string.\r\n        // TODO: Maybe it's enough to just make this test !\r\n        return polynomStringNormalized === P.reduce().reorder().display\r\n    }\r\n    // ------------------------------------------\r\n    // Misc polynoms functions\r\n    // -------------------------------------\r\n    reduce = (): Polynom => {\r\n        for (let i = 0; i < this._monoms.length; i++) {\r\n            for (let j = i + 1; j < this._monoms.length; j++) {\r\n                if (this._monoms[i].isSameAs(this.monoms[j])) {\r\n                    this._monoms[i].add(this.monoms[j]);\r\n                    this._monoms.splice(j, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Remove all null monoms\r\n        this._monoms = this._monoms.filter((m) => {\r\n            return m.coefficient.value !== 0\r\n        });\r\n\r\n        // Reduce all monoms coefficient.\r\n        for (const m of this._monoms) {\r\n            m.coefficient.reduce();\r\n        }\r\n\r\n        if (this.length === 0) {\r\n            return new Polynom().zero();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    reorder = (letter: string = 'x'): Polynom => {\r\n        // TODO: Must handle multiple setLetter reorder system\r\n        this._monoms.sort(function (a, b) {\r\n            return b.degree(letter) - a.degree(letter)\r\n        });\r\n        return this.reduce();\r\n    };\r\n\r\n    degree = (letter?: string): number => {\r\n        let d: number = 0;\r\n        for (const m of this._monoms) {\r\n            d = Math.max(m.degree(letter), d);\r\n        }\r\n        return d;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        let L: string[] = [], S = new Set();\r\n\r\n        for (let m of this._monoms) {\r\n            S = new Set([...S, ...m.variables]);\r\n        }\r\n\r\n        // @ts-ignore\r\n        return [...S];\r\n    }\r\n\r\n    /**\r\n     * Replace a variable (letter) by a polynom.\r\n     * @param letter\r\n     * @param P\r\n     */\r\n    replaceBy = (letter: string, P: Polynom): Polynom => {\r\n        let pow: number;\r\n        const resultPolynom: Polynom = new Polynom().zero();\r\n\r\n        for (const m of this.monoms) {\r\n            if (m.literal[letter] === undefined || m.literal[letter] === 0) {\r\n                resultPolynom.add(m.clone());\r\n            } else {\r\n                // We have found a setLetter.\r\n                // Get the power and reset it.\r\n                pow = +m.literal[letter];\r\n                delete m.literal[letter];\r\n\r\n                resultPolynom.add(P.clone().pow(pow).multiply(m));\r\n            }\r\n        }\r\n\r\n        this._monoms = resultPolynom.reduce().reorder().monoms;\r\n        return this;\r\n    };\r\n\r\n    // Evaluate a polynom.\r\n    evaluate = (values: { [key: string]: Fraction | number } | Fraction | number): Fraction => {\r\n        const r = new Fraction().zero();\r\n\r\n        this._monoms.forEach(monom => {\r\n            //console.log('Evaluate polynom: ', monom.display, values, monom.evaluate(values).display);\r\n            r.add(monom.evaluate(values));\r\n        });\r\n        return r;\r\n    };\r\n\r\n    derivative = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.derivative(letter));\r\n        }\r\n        return dP;\r\n\r\n    }\r\n\r\n    primitive = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.primitive(letter))\r\n        }\r\n        return dP\r\n    }\r\n\r\n    integrate = (a: Fraction | number, b: Fraction | number, letter?: string): Fraction => {\r\n        const primitive = this.primitive(letter)\r\n\r\n        if (letter === undefined) {\r\n            letter = 'x'\r\n        }\r\n\r\n        let valuesA: { [key: string]: Fraction | number } = {},\r\n            valuesB: { [key: string]: Fraction | number } = {}\r\n        valuesA[letter] = a;\r\n        valuesB[letter] = b;\r\n\r\n        return primitive.evaluate(valuesB).subtract(primitive.evaluate(valuesA))\r\n    }\r\n    // ------------------------------------------\r\n    // Polynoms factorization functions\r\n    // -------------------------------------\r\n    /**\r\n     * Factorize a polynom and store the best results in factors.\r\n     * @param maxValue Defines the greatest value to search to (default is 20).\r\n     */\r\n    factorize_OLD = (maxValue?: number): Polynom => {\r\n        // TODO: Must handle other letters than 'x'\r\n        this._factors = [];\r\n\r\n        // Duplicate the polynom\r\n        let P = this.clone(),\r\n            nbFactorsFound = 0;\r\n\r\n        // Determine if the polynom is \"negative\", eg has a max monom degree with a negative coefficient.\r\n        if (P.monomByDegree().coefficient.numerator < 0) {\r\n            this._factors.push(new Polynom('-1'));\r\n        }\r\n\r\n        // Determine if there is a 'common' monom\r\n        let M = P.commonMonom();\r\n        if (!M.isOne()) {\r\n            let commonPolynom = new Polynom()\r\n            commonPolynom.monoms = [M]\r\n            if (this._factors.length === 0) {\r\n                this._factors.push(commonPolynom);\r\n            } else {\r\n                this._factors = [];\r\n                this._factors.push(commonPolynom.opposed());\r\n            }\r\n            P = P.euclidian(commonPolynom).quotient;\r\n\r\n            nbFactorsFound = commonPolynom.degree();\r\n        }\r\n\r\n        // Main loop.\r\n        //\r\n        // Do it only if degree is equal or less than one.\r\n        if (P.degree() <= 1) {\r\n            this._factors.push(P.clone());\r\n        } else {\r\n            // Force test.\r\n            let Q = new Fraction(),\r\n                F,\r\n                degree = P.degree();\r\n\r\n            maxValue = maxValue === undefined ? 20 : maxValue;\r\n\r\n            // Test all polynom similar to ax+b\r\n            for (let a = 1; a <= maxValue; a++) {\r\n                // Skip a coefficient of 0\r\n                for (let b = -maxValue; b <= maxValue; b++) {\r\n\r\n                    Q.parse(-b, a);\r\n\r\n                    if (P.evaluate({x: Q})) {\r\n                        F = new Polynom(`${a}x+${b}`);\r\n                        while (P.evaluate({x: Q}).value === 0) {\r\n                            this._factors.push(F.clone());\r\n                            nbFactorsFound++;\r\n\r\n                            // Means it can be divided without reminders.\r\n                            P = P.euclidian(F).quotient;\r\n                        }\r\n                    }\r\n\r\n                    // Continue if the numbers of factors found equals the degree.\r\n                    if (nbFactorsFound > degree) {\r\n                        return this;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (P.degree() > 1) {\r\n                this._factors.push(P.clone());\r\n                return this;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    factorize = (letter?: string): Polynom[] => {\r\n        let factors: Polynom[] = [];\r\n\r\n        // Extract the common monom\r\n        let P = this.clone().reorder(),\r\n            M = P.commonMonom(),\r\n            tempPolynom: Polynom\r\n        // It has a common monom.\r\n        if (!M.isOne()) {\r\n            tempPolynom = new Polynom()\r\n            tempPolynom.monoms = [M]\r\n            factors = [tempPolynom.clone()]\r\n            P = P.euclidian(tempPolynom).quotient;\r\n        }\r\n\r\n        let securityLoop = P.degree() * 2\r\n        // securityLoop = 0\r\n        while (securityLoop >= 0) {\r\n            securityLoop--\r\n\r\n\r\n            if (P.monoms.length < 2) {\r\n                if (!P.isOne()) {\r\n                    factors.push(P.clone());\r\n                }\r\n                break;\r\n            } else {\r\n                // Get the first and last monom.\r\n                let m1 = P.monoms[0].dividers,\r\n                    m2 = P.monoms[P.monoms.length - 1].dividers\r\n\r\n                // console.log('CURRENT VALUE')\r\n                // console.log(P.tex)\r\n                // console.log('---------------------')\r\n                for (let m1d of m1) {\r\n                    for (let m2d of m2) {\r\n                        // if(m1d.degree()===m2d.degree()){continue}\r\n                        let dividerPolynom = new Polynom(),\r\n                            result\r\n                        dividerPolynom.monoms = [m1d.clone(), m2d.clone()]\r\n                        result = P.euclidian(dividerPolynom)\r\n\r\n                        // console.log(dividerPolynom.tex, '=>', result.reminder.tex, '|||||', result.quotient.tex)\r\n                        if (result.reminder.isZero()) {\r\n                            P = result.quotient.clone();\r\n                            factors.push(dividerPolynom)\r\n                            continue;\r\n                        }\r\n\r\n                        dividerPolynom.monoms = [m1d.clone(), m2d.clone().opposed()]\r\n                        result = P.euclidian(dividerPolynom)\r\n                        if (result.reminder.isZero()) {\r\n                            P = result.quotient.clone();\r\n                            factors.push(dividerPolynom)\r\n                        }\r\n                        // console.log(dividerPolynom.tex, '=>', result.reminder.tex)\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        this.factors = factors\r\n        return factors;\r\n    }\r\n\r\n    private _factorize2ndDegree = (letter: string): Polynom[] => {\r\n        let P1: Polynom, P2: Polynom,\r\n            a, b, c, delta, x1, x2, factor;\r\n\r\n        // One variable only\r\n        if (this.numberOfVars === 1) {\r\n            a = this.monomByDegree(2, letter).coefficient;\r\n            b = this.monomByDegree(1, letter).coefficient;\r\n            c = this.monomByDegree(0, letter).coefficient;\r\n            delta = b.clone().pow(2).subtract(a.clone().multiply(c).multiply(4));\r\n\r\n            if (delta.isZero()) {\r\n                x1 = b.clone().opposed().divide(a.clone().multiply(2))\r\n                P1 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                P2 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                factor = a.divide(x1.denominator).divide(x1.denominator);\r\n\r\n                if (!factor.isOne()) {\r\n                    // TODO: Update new Polynom to accept anything...\r\n                    return [new Polynom(factor.display), P1, P2]\r\n                } else {\r\n                    return [P1, P2]\r\n                }\r\n            } else if (delta.isPositive() && delta.isSquare()) {\r\n                x1 = b.clone().opposed()\r\n                    .add(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n                x2 = b.clone().opposed()\r\n                    .subtract(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n\r\n                // (2x+5)(3x-2)\r\n                // 6x^2+11x-10\r\n                // a = 6, b = 11, c = -10\r\n                // delta = 121-4*6*(-10) = 361= 19^2\r\n                // x1 = (-11 + 19)  / 12 = 8/12 = 2/3\r\n                // x2 = (-11 - 19)  / 12 = -30/12 = -5/2\r\n                factor = a.divide(x1.denominator).divide(x2.denominator);\r\n                if (factor.isOne()) {\r\n                    return [\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n                } else {\r\n                    return [\r\n                        new Polynom(factor.display),\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n\r\n                }\r\n            } else {\r\n                // No solution possible - return the complete value.\r\n                return [this.clone()]\r\n            }\r\n        } else {\r\n            // If multiple variables, only handle perfect squares...\r\n            a = this.monomByDegree(2, letter);\r\n            b = this.monomByDegree(1, letter);\r\n            c = this.monomByDegree(0, letter);\r\n\r\n\r\n            if (a.isLitteralSquare() && c.isLitteralSquare()) {\r\n                // Check the middle item is same as...\r\n                if (b.clone().pow(2).isSameAs(a.clone().multiply(c))) {\r\n                    // Determine if the coefficient values matches.\r\n\r\n                    // Search 4 values (r, s, t, u) that matches:\r\n                    // (r X + s Y)(t X + u Y) = rt X^2 + (ru + st) XY + su Y^2\r\n\r\n                    let xPolynom = new Polynom('x', a.coefficient, b.coefficient, c.coefficient);\r\n                    let xFactors = xPolynom._factorize2ndDegree('x');\r\n\r\n                    let factors = [], xyzPolynom: Polynom;\r\n\r\n                    if (xFactors.length >= 2) {\r\n                        for (let p of xFactors) {\r\n                            if (p.degree() === 0) {\r\n                                factors.push(p.clone())\r\n                            } else {\r\n                                xyzPolynom = p.clone();\r\n                                xyzPolynom.monoms[0].literal = a.literalSqrt\r\n                                xyzPolynom.monoms[1].literal = c.literalSqrt\r\n                                factors.push(xyzPolynom.clone())\r\n                            }\r\n                        }\r\n                        return factors\r\n                    }\r\n                }\r\n            }\r\n\r\n            return [this.clone()]\r\n            //\r\n            // console.log(a.tex, b.tex, c.tex)\r\n            // if (a.isSquare() && c.isSquare()) {\r\n            //     console.log('A C squares')\r\n            //     if (a.clone().sqrt().multiply(c.clone().sqrt()).multiplyByNumber(2).isSameAs(b)) {\r\n            //         console.log('HERE')\r\n            //         if (a.coefficient.sign() === b.coefficient.sign()) {\r\n            //             return []\r\n            //         }else{\r\n            //             return []\r\n            //         }\r\n            //     }\r\n            // } else if(a.isLitteralSquare() && c.isLitteralSquare()) {\r\n            //     console.log('A C litteral SQUARES')\r\n            //     // Check that the middle element is the product of a and c.\r\n            //\r\n            //     if(b.clone().pow(2).isSameAs(a.clone().multiply(c))){\r\n            //         console.log('SAME')\r\n            //\r\n            //     }else{\r\n            //         console.log('NOT SAME')\r\n            //     }\r\n            //\r\n            //     return [this.clone()]\r\n            // } else {\r\n            //     console.log('NOT SQUARES AT ALL !!!!')\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    private _factorizeByGroups = (): Polynom[] => {\r\n        // TODO: Factorize by groups.\r\n        return [];\r\n    }\r\n    // ------------------------------------------\r\n    // Polynoms helpers functions\r\n    // -------------------------------------\r\n    // TODO: get zeroes for more than first degree\r\n    getZeroes = (): (Fraction | boolean)[] => {\r\n        const Z: Fraction[] = [];\r\n\r\n        switch (this.degree()) {\r\n            case 0:\r\n                if (this._monoms[0].coefficient.value === 0) {\r\n                    return [true];\r\n                } else {\r\n                    return [false];\r\n                }\r\n            case 1:\r\n                // There is only one monoms,\r\n                if (this._monoms.length === 1) {\r\n                    return [new Fraction().zero()];\r\n                } else {\r\n                    const P = this.clone().reduce().reorder();\r\n                    return [P.monoms[1].coefficient.opposed().divide(P.monoms[0].coefficient)];\r\n                }\r\n            // TODO: Determine the zeros of an equation of second degree.\r\n            //case 2:\r\n            default:\r\n                // Make sure the polynom is factorized.\r\n                if (this._factors.length === 0) {\r\n                    this.factorize()\r\n                }\r\n\r\n                let zeroes = [], zeroesAsTex = [];\r\n                for (let P of this._factors) {\r\n                    if (P.degree() > 2) {\r\n                        // TODO: Handle other polynom.\r\n\r\n                    } else if (P.degree() === 2) {\r\n                        let A = P.monomByDegree(2).coefficient,\r\n                            B = P.monomByDegree(1).coefficient,\r\n                            C = P.monomByDegree(0).coefficient,\r\n                            D = B.clone().pow(2).subtract(A.clone().multiply(C).multiply(4));\r\n\r\n                        if (D.value > 0) {\r\n                            /*console.log('Two zeroes for ', P.tex); */\r\n                            let x1 = (-(B.value) + Math.sqrt(D.value)) / (2 * A.value),\r\n                                x2 = (-(B.value) - Math.sqrt(D.value)) / (2 * A.value);\r\n\r\n                            zeroes.push(new Fraction(x1.toFixed(3)).reduce());\r\n                            zeroes.push(new Fraction(x2.toFixed(3)).reduce());\r\n                        } else if (D.value === 0) {\r\n                            /*console.log('One zero for ', P.tex); */\r\n\r\n                        } else {\r\n                            console.log('No zero for ', P.tex);\r\n                        }\r\n                    } else {\r\n                        for (let z of P.getZeroes()) {\r\n                            // Check if the zero is already in the list.\r\n                            if (z === false || z === true) {\r\n                                continue;\r\n                            }\r\n                            if (zeroesAsTex.indexOf(z.frac) === -1) {\r\n                                zeroes.push(z);\r\n                                zeroesAsTex.push(z.frac);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return zeroes;\r\n        }\r\n        return Z;\r\n    };\r\n\r\n\r\n    // TODO: analyse the next functions to determine if they are useful or not...\r\n    monomByDegree = (degree?: number, letter?: string): Monom => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomByDegree(this.degree(letter), letter);\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter) === degree) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        // Nothing was found - return the null monom.\r\n        return new Monom().zero();\r\n    };\r\n\r\n    monomsByDegree = (degree?: number, letter?: string): Monom[] => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomsByDegree(this.degree(letter));\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        let Ms: Monom[] = [];\r\n\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter) === degree) {\r\n                Ms.push(m.clone())\r\n            }\r\n        }\r\n\r\n        return Ms\r\n        // Nothing was found - retur\r\n    }\r\n\r\n    // Used in LinearSystem.tex\r\n    monomByLetter = (letter: string): Monom => {\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.hasLetter(letter)) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        return new Monom().zero();\r\n    };\r\n\r\n\r\n    // Next functions are used for for commonMonom, which is used in the factorize method.\r\n    getDenominators = (): number[] => {\r\n        const denominators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            denominators.push(m.coefficient.denominator);\r\n        }\r\n        return denominators;\r\n    };\r\n\r\n    getNumerators = (): number[] => {\r\n        const numerators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            numerators.push(m.coefficient.numerator);\r\n        }\r\n        return numerators;\r\n    };\r\n\r\n    lcmDenominator = (): number => {\r\n        return Numeric.lcm(...this.getDenominators());\r\n    };\r\n\r\n    gcdDenominator = (): number => {\r\n        return Numeric.gcd(...this.getDenominators());\r\n    };\r\n\r\n    lcmNumerator = (): number => {\r\n        return Numeric.lcm(...this.getNumerators());\r\n    };\r\n\r\n    gcdNumerator = (): number => {\r\n        return Numeric.gcd(...this.getNumerators());\r\n    };\r\n\r\n    commonMonom = (): Monom => {\r\n        let M = new Monom().one(), numerator: number, denominator: number, degree = this.degree();\r\n\r\n        numerator = this.gcdNumerator();\r\n        denominator = this.gcdDenominator();\r\n\r\n        M.coefficient = new Fraction(numerator, denominator);\r\n        for (let L of this.variables) {\r\n            // Initialize the setLetter with the max degree\r\n            M.setLetter(L, degree);\r\n            for (let m of this._monoms) {\r\n                M.setLetter(L, Math.min(m.degree(L), M.degree(L)));\r\n                if (M.degree(L) === 0) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return M;\r\n    }\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * This will generate a not reduced tex string of the polynom.\r\n     * @param complexity : Number of iteration to increase the complexity.\r\n     */\r\n    makeItComplicate = (complexity: number = 1): Polynom => {\r\n        this._texString = '';\r\n\r\n        // The polynom must be at least of the first degree.\r\n        if (this.degree() < 1) {\r\n            return this;\r\n        }\r\n\r\n        // TODO: update this function !\r\n\r\n        const mDegree = Random.number(0, this.degree() - 1);\r\n        // const A = new Polynom().rndSimple(mDegree, false, complexity > 1, 'x', false, complexity > 1 ? -1 : 1);\r\n        // const B = new Polynom().rndSimple(1, false, complexity > 1);\r\n        // const C = this.clone().subtract(A.clone().multiply(B));\r\n\r\n        // Try to factorize a little bit the C polynom.\r\n        // C.factorizePartial(true);\r\n        // this._texString = `${A.genDisplay('tex', false, true)} \\\\cdot ${B.genDisplay('tex', false, true)} ${C.texString} `;\r\n        //\r\n        return this;\r\n    };\r\n    factorizePartial = (forceSign?: boolean): Polynom => {\r\n        this._texString = '';\r\n        // Try to find two monoms with a common coefficient.\r\n        if (this.length <= 1) {\r\n            return this;\r\n        }\r\n\r\n        let mMain: Monom,\r\n            mCheck: Monom,\r\n            mFactor: Monom,\r\n            pFactor: Polynom,\r\n            // pRemain: Polynom,\r\n            g: number, sign: string;\r\n\r\n        for (let i = 0; i < this.length; i++) {\r\n            mMain = this._monoms[i].clone();\r\n            // We factorize only if the main coefficient isn't a fraction\r\n            // if(mMain.coefficient.denominator!==1){continue;}\r\n            for (let j = i + 1; j < this.length; j++) {\r\n                mCheck = this._monoms[j].clone();\r\n                // if(mCheck.coefficient.denominator!==1){continue;}\r\n\r\n                g = Numeric.gcd(mMain.coefficient.numerator, mCheck.coefficient.numerator);\r\n                if (g !== 1) {\r\n                    // mFactor = mMain.clone().divide(mCheck); // This gets the literal part.\r\n                    // mFactor.coefficient = new Fraction(g); // Set the coefficient to the gcd.\r\n                    mFactor = Monom.lcm(mMain, mCheck);\r\n                    sign = mMain.coefficient.sign() === 1 ? '+' : '-';\r\n                    this._texString = `${forceSign === true ? sign : (sign === '+' ? '' : sign)}${mFactor.tex}`;\r\n\r\n                    pFactor = new Polynom().add(mMain.divide(mFactor)).add(mCheck.divide(mFactor));\r\n                    this._texString += pFactor.genDisplay('tex', false, true);\r\n\r\n                    this._texString += this.clone().subtract(pFactor.clone().multiply(mFactor)).genDisplay('tex', true, false);\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._texString = this.genDisplay('tex', forceSign);\r\n\r\n        return this;\r\n    };\r\n    /**\r\n     * reduce the coefficient value as if the polynom was equal to zero.\r\n     */\r\n    minify = (): Polynom => {\r\n        // First multiply by the common denominator.\r\n        this.multiply(this.lcmDenominator()).divide(this.gcdNumerator()).reduce();\r\n        return this.reduce();\r\n    };\r\n    /**\r\n     * Determine if the current polynom is divisible by P\r\n     * TODO: should work with any polynom, not only first degree polynoms and the setLetter should disappear\r\n     * @param P\r\n     * @param letter - default setLetter\r\n     */\r\n    canDivide = (P: Polynom, letter: string = 'x'): boolean => {\r\n        const d = P.degree();\r\n\r\n        const evalValue: { [key: string]: Fraction } = {};\r\n        // A zero degree polynom can always divide, except if it's the zero polynom.\r\n        if (d === 0) {\r\n            return !P.isZero;\r\n        }\r\n\r\n        // The polynom is of degree one.\r\n        if (d === 1) {\r\n            const z = P.getZeroes();\r\n            // The zero is an undefined zero.\r\n            if (z[0] === true || z[0] === false) {\r\n                return false;\r\n            }\r\n\r\n            evalValue[letter] = z[0];\r\n            return this.evaluate(evalValue).value === 0;\r\n        }\r\n\r\n        // The polynom is of degree 2 or more...\r\n        if (d > 1) {\r\n            console.log('Currently, only first degree polynom are supported');\r\n            return false;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n\r\n}\r\n","import {Polynom} from \"./polynom\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Nthroot} from \"../coefficients/nthroot\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Monom} from \"./monom\";\r\n\r\n/**\r\n * Equation is a class to manage equations...\r\n */\r\nexport class Equation {\r\n    private _left: Polynom;  // Left part of the equation\r\n    private _right: Polynom; // Right part of the equation\r\n    private _sign: string;   // Signe of the equation, by default =\r\n\r\n    private _polynom: Polynom;  // Used to solve the equation // TODO: remove the private value ?\r\n    private _solutions: string[];    // Array of the solutions\r\n\r\n    // Undetermined solutions.\r\n    private _varnothing: string = '\\\\varnothing';\r\n    private _real: string = '\\\\mathbb{R}';\r\n\r\n    /**\r\n     * Create an Equation using two polynoms.\r\n     * @param equations\r\n     */\r\n    constructor(...equations: any) {\r\n        // Default equation\r\n        this._left = new Polynom().zero();\r\n        this._right = new Polynom().zero();\r\n        this._sign = '=';\r\n\r\n        if (equations.length === 1) {\r\n            if (equations[0].isEquation === true) {\r\n                return equations[0].clone();\r\n            } else {\r\n                this.parse(equations[0]);\r\n            }\r\n        } else if (equations.length === 2) {\r\n            this.left = equations[0].isPolynom ? equations[0].clone() : new Polynom(equations[0]);\r\n            this.right = equations[1].isPolynom ? equations[1].clone() : new Polynom(equations[1]);\r\n        } else {\r\n            // Return default empty equation\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isEquation() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    // TODO: Check the getters and setters.\r\n    get solutions(): string[] {\r\n        return this._solutions;\r\n    }\r\n\r\n    get solution(): string {\r\n        if (this._solutions.length === 1\r\n            &&\r\n            (\r\n                this._solutions[0] === this._real\r\n                || this._solutions[0] === this._varnothing\r\n                || this._solutions[0].includes('\\\\left')\r\n            )\r\n        ) {\r\n            return `S = ${this._solutions[0]}`;\r\n        }\r\n        return `S = \\\\left{ ${this._solutions.join(';')} \\\\right}`;\r\n    }\r\n\r\n    get isReal(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0] === this._real;\r\n    }\r\n\r\n    get isVarnothing(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0] === this._varnothing;\r\n    }\r\n\r\n    get signAsTex(): string {\r\n        if (this._sign === '>=' || this._sign === '=>' || this._sign === 'geq') {\r\n            return '\\\\geq';\r\n        }\r\n        if (this._sign === '<=' || this._sign === '=<' || this._sign === 'leq') {\r\n            return '\\\\leq';\r\n        }\r\n        return this._sign;\r\n    }\r\n\r\n    get tex(): string {\r\n        return `${this._left.tex}${this.signAsTex}${this._right.tex}`;\r\n    }\r\n\r\n    get raw(): string {\r\n        return `${this._left.raw}${this.signAsTex}${this._right.raw}`;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        return [...new Set(this._right.variables.concat(this._left.variables))];\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    get left(): Polynom {\r\n        return this._left;\r\n    }\r\n\r\n    set left(value: Polynom) {\r\n        this._left = value;\r\n    }\r\n\r\n    get right(): Polynom {\r\n        return this._right;\r\n    }\r\n\r\n    set right(value: Polynom) {\r\n        this._right = value;\r\n    }\r\n\r\n    get sign(): string {\r\n        return this._sign;\r\n    }\r\n\r\n    set sign(value: string) {\r\n        // Set the sign value as formatted.\r\n        this._sign = this._formatSign(value);\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (equationString: string): Equation => {\r\n        let pStr: string[], strSign: string | false;\r\n        // Find the string separator\r\n        strSign = this._findSign(equationString);\r\n\r\n        if (strSign === false) {\r\n            console.log('The equation is not valid (no sign found)');\r\n            return;\r\n        }\r\n\r\n        // The StrSign is found\r\n        pStr = equationString.split(strSign);\r\n\r\n        return this.create(new Polynom(pStr[0]), new Polynom(pStr[1]), this._formatSign(strSign));\r\n    };\r\n\r\n    private _findSign = (equationString: string): string | false => {\r\n        let strSign: string = '';\r\n\r\n        if (equationString.includes('geq')) {\r\n            return (equationString.includes('\\\\geq')) ? '\\\\geq' : 'geq';\r\n        } else if (equationString.includes('leq')) {\r\n            return (equationString.includes('\\\\leq')) ? '\\\\leq' : 'leq';\r\n        } else if (equationString.includes('>=')) {\r\n            return '>=';\r\n        } else if (equationString.includes('=>')) {\r\n            return '=>';\r\n        } else if (equationString.includes('>')) {\r\n            return '>';\r\n        } else if (equationString.includes('<=')) {\r\n            return '<=';\r\n        } else if (equationString.includes('=<')) {\r\n            return '=<';\r\n        } else if (equationString.includes('<')) {\r\n            return '<';\r\n        } else if (equationString.includes('=')) {\r\n            return '='\r\n        }\r\n        if (strSign === '') {\r\n            console.log('Equation: parse string : sign not found');\r\n            return false;\r\n        }\r\n    };\r\n\r\n    private _formatSign = (signStr: string): string => {\r\n        if (signStr === undefined) {\r\n            return '=';\r\n        }\r\n\r\n        if (signStr.includes('geq')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>=')) {\r\n            return '>=';\r\n        } else if (signStr.includes('=>')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>')) {\r\n            return '>';\r\n        } else if (signStr.includes('leq')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<=')) {\r\n            return '<=';\r\n        } else if (signStr.includes('=<')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<')) {\r\n            return '<';\r\n        } else {\r\n            return '='\r\n        }\r\n    };\r\n\r\n    private _reverseSign = (): Equation => {\r\n        if (this._sign === '=') {\r\n            return this;\r\n        }\r\n\r\n        if (this._sign.includes('<')) {\r\n            this._sign.replace('<', '>');\r\n            return this;\r\n        }\r\n        if (this._sign.includes('>')) {\r\n            this._sign.replace('>', '<');\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    create = (left: Polynom, right: Polynom, sign?: string): Equation => {\r\n        this._left = left;\r\n        this._right = right;\r\n        this._sign = this._formatSign(sign);\r\n        return this;\r\n    };\r\n\r\n    clone = (): Equation => {\r\n        return new Equation().create(this._left.clone(), this._right.clone(), this._sign + '');\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n    // -----------------------------------------------\r\n    private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n        degree: 2\r\n    };\r\n    get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n        return this._randomizeDefaults;\r\n    }\r\n\r\n    set randomizeDefaults(value) {\r\n        this._randomizeDefaults = value;\r\n    }\r\n\r\n    randomize = (opts?: {}, sign?: string): Equation => {\r\n        // TODO: Generate equations randomly, using config.\r\n        return new Equation().create(new Polynom(), new Polynom(), sign);\r\n    };\r\n\r\n\r\n    // -----------------------------------------------\r\n    // Equations operations\r\n    // -----------------------------------------------\r\n    /**\r\n     * Reorder will move all monoms containing a letter on the left, all the other on the right.\r\n     */\r\n    moveLeft = (): Equation => {\r\n        this._left = this._left.clone().subtract(this._right)\r\n        this._right.zero()\r\n        return this;\r\n    }\r\n    reorder = (allLeft?: boolean): Equation => {\r\n        // Move all monoms of degree greater than 0 to the left.\r\n        // and all zero degree monoms to the right.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n\r\n        if (allLeft) {\r\n            return this.moveLeft()\r\n        }\r\n        let mMove: Monom;\r\n        for (let m of this._left.monoms) {\r\n            if (m.degree() === 0) {\r\n                mMove = m.clone();\r\n                this._left.subtract(mMove);\r\n                this._right.subtract(mMove);\r\n            }\r\n        }\r\n\r\n        // Reorder the left and right polynoms\r\n        this._left.reorder();\r\n        this._right.reorder();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiply by the lcm denominator and divide by the gcm numerators.\r\n     */\r\n    simplify = (): Equation => {\r\n        this.multiply(Numeric.lcm(...this._left.getDenominators(),...this._right.getDenominators()));\r\n        this.divide(Numeric.gcd(...this._left.getNumerators(),...this._right.getNumerators()));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Reorder the polynom to have only one letter on the left, the rest on the right.\r\n     * @param letter\r\n     */\r\n    isolate = (letter?: string): Equation | false => {\r\n        // Determine if we can isolate the variables.\r\n\r\n        // Both part of the equations must be of the first degree.\r\n        //TODO: handle equations of degree two or more ?\r\n        if (this.degree(letter) !== 1) {\r\n            return false;\r\n        }\r\n\r\n        // Modify the equation to isolate the asked variable.\r\n        // TODO: must handle equations like 3xy+5y=4 => y = 4/(3x-5)\r\n        if (this.isMultiVariable()) {\r\n            return false;\r\n        }\r\n\r\n        // Isolate the letter.\r\n        let mMove: Monom, cMove: Fraction;\r\n        // Start by moving everything to the left.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n        for (let m of this._left.monoms) {\r\n            if (!m.hasLetter(letter)) {\r\n                mMove = m.clone();\r\n                this._left.add(mMove.clone().opposed());\r\n                this._right.add(mMove.clone().opposed());\r\n            }\r\n        }\r\n\r\n        // In theory, we should have only one item on the left.\r\n        if (this._left.length !== 1) {\r\n            return false;\r\n        }\r\n        cMove = this._left.monoms[0].coefficient.clone();\r\n        this._left.divide(cMove);\r\n        this._right.divide(cMove);\r\n        return this;\r\n    };\r\n\r\n    replaceBy = (letter: string, P: Polynom): Equation => {\r\n        this._left.replaceBy(letter, P)\r\n        this._right.replaceBy(letter, P)\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiple an equation by a fraction value.\r\n     * @param value\r\n     */\r\n    multiply = (value: any): Equation => {\r\n\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        // Multiply each part of the equation by the fraction\r\n        this._left.multiply(F);\r\n        this._right.multiply(F);\r\n\r\n        // The sign of the inequation must be changed.\r\n        if (this._sign !== '=' && F.sign() === -1) {\r\n            this._reverseSign();\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    divide = (value: any): Equation => {\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        if(F.isZero()){\r\n            return this;\r\n        }else {\r\n            return this.multiply(F.invert());\r\n        }\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations helpers\r\n    // -----------------------------------------------\r\n\r\n    /**\r\n     * Get the degree of the equation\r\n     * @param letter\r\n     */\r\n    degree = (letter?: string): number => {\r\n        return Math.max(this._left.degree(letter), this._right.degree(letter));\r\n    };\r\n\r\n    /**\r\n     * Determine if the equation contains more than one letter/variable.\r\n     */\r\n    isMultiVariable = (): boolean => {\r\n        return this._left.isMultiVariable || this._right.isMultiVariable;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        // @ts-ignore\r\n        return [...new Set([...this._left.letters(), ...this._right.letters()])];\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations solving algorithms\r\n    // -----------------------------------------------\r\n    solve = (letter?: string): Equation => {\r\n        // Initialise the variables:\r\n        this._solutions = [];\r\n\r\n        // TODO: this._polynom could be removed.\r\n        // TODO: consolidate solving equations (inequations vs equations)\r\n        this._polynom = this._left.clone().subtract(this._right);\r\n\r\n        switch (this._polynom.degree(letter)) {\r\n            case 0:\r\n            case 1:\r\n                this._solveDegree1(letter);\r\n                break;\r\n            case 2:\r\n                this._solveDegree2(letter);\r\n                break;\r\n            default:\r\n                this._solveDegree3plus(letter);\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    private isGreater = (): boolean => {\r\n        if (this._sign.indexOf('>') !== -1) {\r\n            return true;\r\n        }\r\n        return this._sign.indexOf('geq') !== -1;\r\n\r\n    };\r\n    private isStrictEqual = (): boolean => {\r\n        return this._sign === '=';\r\n    };\r\n    private isAlsoEqual = (): boolean => {\r\n        if (this._sign.indexOf('=') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('geq') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('leq') !== -1) {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    private _solveDegree1 = (letter?: string): string[] => {\r\n        const m1 = this._polynom.monomByDegree(1, letter).coefficient,\r\n            m0 = this._polynom.monomByDegree(0, letter).coefficient,\r\n            v = m0.clone().opposed().divide(m1).display;\r\n        let s: string;\r\n\r\n        if (this.isStrictEqual()) {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0) {\r\n                    this._solutions = [this._real];\r\n                } else {\r\n                    this._solutions = [this._varnothing];\r\n                }\r\n            } else {\r\n                this._solutions = [v];\r\n            }\r\n        } else {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0 && this.isAlsoEqual()) {\r\n                    s = '\\\\mathbb{R}';\r\n                } else {\r\n                    if (m0.value > 0) {\r\n                        s = this.isGreater() ? this._real : this._varnothing;\r\n                    } else {\r\n                        s = !this.isGreater() ? this._real : this._varnothing;\r\n                    }\r\n                }\r\n            } else {\r\n                // Must handle the case if the m1 monom is negative.\r\n                if ((this.isGreater() && m1.sign() === 1) || (!this.isGreater() && m1.sign() === -1)) {\r\n                    s = `\\\\left${this.isAlsoEqual() ? '\\\\[' : '\\\\]'}${v};+\\\\infty\\\\right\\\\[`;\r\n                } else {\r\n                    s = `\\\\left\\\\]-\\\\infty;${v} \\\\right\\\\${this.isAlsoEqual() ? '\\\\]' : '\\\\['}`;\r\n                }\r\n            }\r\n            this._solutions = [s];\r\n        }\r\n\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree2 = (letter?: string): string[] => {\r\n        let aF = this._polynom.monomByDegree(2, letter).coefficient,\r\n            bF = this._polynom.monomByDegree(1, letter).coefficient,\r\n            cF = this._polynom.monomByDegree(0, letter).coefficient,\r\n            delta: number, nthDelta: Nthroot,\r\n            lcm = Numeric.lcm(aF.denominator, bF.denominator, cF.denominator),\r\n            a = aF.multiply(lcm).value,\r\n            b = bF.multiply(lcm).value,\r\n            c = cF.multiply(lcm).value,\r\n            realX1: number, realX2: number,\r\n            sX1: string, sX2: string;\r\n\r\n        delta = b * b - 4 * a * c;\r\n\r\n        if (delta > 0) {\r\n            realX1 = (-b - Math.sqrt(delta)) / (2 * a);\r\n            realX2 = (-b + Math.sqrt(delta)) / (2 * a);\r\n\r\n            if(delta>1.0e5){\r\n                // The delta is too big to be parsed !\r\n                this._solutions = [\r\n                    ((-b - Math.sqrt(delta))/(2 * a)).toFixed(5),\r\n                    ((-b + Math.sqrt(delta))/(2 * a)).toFixed(5)\r\n                ]\r\n            }else {\r\n                nthDelta = new Nthroot().parse(delta).reduce();\r\n                if (nthDelta.hasRadical()) {\r\n                    // -b +- coeff\\sqrt{radical}\r\n                    // -------------------------\r\n                    //           2a\r\n                    let gcd = Numeric.gcd(b, 2 * a, nthDelta.coefficient);\r\n                    nthDelta.coefficient = nthDelta.coefficient / gcd;\r\n\r\n                    // TODO: Can i delete the next line ?\r\n                    // let deltaC = nthDelta.coefficient, deltaR = nthDelta.radical;\r\n                    if (b !== 0) {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                `${-b / gcd} - ${nthDelta.tex}`,\r\n                                `${-b / gcd} + ${nthDelta.tex}`,\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                `\\\\dfrac{${-b / gcd} - ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                `\\\\dfrac{${-b / gcd} + ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                            ]\r\n                        }\r\n                    } else {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                `- ${nthDelta.tex}`,\r\n                                `${nthDelta.tex}`,\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                `\\\\dfrac{- ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                `\\\\dfrac{${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                            ]\r\n                        }\r\n                    }\r\n                } else {\r\n                    // -b +- d / 2a\r\n                    this._solutions = [\r\n                        new Fraction(-b - nthDelta.coefficient, 2 * a).reduce().dfrac,\r\n                        new Fraction(-b + nthDelta.coefficient, 2 * a).reduce().dfrac\r\n                    ]\r\n                }\r\n            }\r\n\r\n        } else if (delta === 0) {\r\n            this._solutions = [new Fraction(-b, 2 * a).reduce().dfrac];\r\n        } else {\r\n            this._solutions = [this._varnothing];\r\n        }\r\n\r\n\r\n        // Handle now the inequations.\r\n        if (!this.isStrictEqual()) {\r\n            if (this._solutions.length === 2) {\r\n                sX1 = (realX1 < realX2) ? this._solutions[0] : this._solutions[1];\r\n                sX2 = (realX1 < realX2) ? this._solutions[1] : this._solutions[0];\r\n\r\n                if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                    this._solutions = [\r\n                        `\\\\left]-\\\\infty ; ${sX1}\\\\right${this.isAlsoEqual() ? ']' : '['} \\\\cup \\\\left${this.isAlsoEqual() ? '[' : ']'}${sX2};+\\\\infty\\\\right[`\r\n                    ];\r\n                } else {\r\n                    this._solutions = [\r\n                        `\\\\left${this.isAlsoEqual() ? '[' : ']'}${sX1} ; ${sX2}\\\\right${this.isAlsoEqual() ? ']' : '['}`\r\n                    ]\r\n                }\r\n            } else if (this._solutions.length === 1 && this._solutions[0] !== this._varnothing) {\r\n                if (!this.isAlsoEqual()) {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [\r\n                            `\\\\left]-\\\\infty ; ${this._solutions[0]}\\\\right[ \\\\cup \\\\left]${this._solutions[0]};+\\\\infty\\\\right[`\r\n                        ];\r\n                    } else {\r\n                        this._solutions = [this._varnothing];\r\n                    }\r\n                } else {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [this._real];\r\n                    } else {\r\n                        // this._solutions = [ this._solutions[0] ];\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.isGreater()) {\r\n                    this._solutions = [aF.sign() === 1 ? this._real : this._varnothing];\r\n                } else {\r\n                    this._solutions = [aF.sign() === -1 ? this._real : this._varnothing];\r\n                }\r\n            }\r\n        }\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree3plus = (letter?: string): string[] => {\r\n        // TODO: try to resolve equations with a degree superior than 2.\r\n        this._solutions = [letter];  // ESLint remove system :(\r\n        return this._solutions;\r\n    };\r\n\r\n}","import {Fraction} from \"../coefficients/fraction\";\r\nimport {Equation} from \"./equation\";\r\nimport {Monom} from \"./monom\";\r\nimport {Polynom} from \"./polynom\";\r\nimport {Random} from \"../random/random\";\r\n\r\n\r\nexport class LinearSystem {\r\n    private _solutions: { [letter: string]: { value: Fraction, isReal: boolean, isVarnothing: boolean } };\r\n    private _resolutionSteps: LinearSystem[];\r\n    private _equations: Equation[];\r\n    private _letters: string[];\r\n\r\n    constructor(...equationStrings: string[]) {\r\n        this._equations = [];\r\n        this._letters = 'xy'.split('');\r\n\r\n        if (equationStrings !== undefined && equationStrings.length > 0) {\r\n            this.parse(...equationStrings);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isLinerarSystem() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equations(): Equation[] {\r\n        return this._equations;\r\n    }\r\n\r\n    set equations(value) {\r\n        this._equations = value;\r\n    }\r\n\r\n    get letters(): string {\r\n        return this._letters.join('')\r\n    }\r\n\r\n    set letters(value: string) {\r\n        this._letters = value.split('');\r\n    }\r\n\r\n    get isSolvable(): boolean {\r\n        let V = this.variables;\r\n\r\n        // TODO: in some case, it is possible to resolve systems if there isn't the isSame number of vars and equations\r\n        if (V.length !== this._equations.length) {\r\n            return false;\r\n        }\r\n\r\n        //TOOD: Must check if two equations isn't a linear combination of the others ?\r\n\r\n        return true;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n        for (let E of this._equations) {\r\n            V = V.concat(E.variables);\r\n        }\r\n        return [...new Set(V)].sort();\r\n    }\r\n\r\n    get tex(): string {\r\n        // Build the array of values.\r\n        // Reorder\r\n        // This clone the system :!!!\r\n        //TODO: Avoid cloning this linear system\r\n        let LS = this.clone().reorder(),\r\n            letters = LS.variables,\r\n            equStr: string[],\r\n            equArray: string[] = [],\r\n            m: Monom;\r\n\r\n        // TODO: Manage tex output of linear equations\r\n        for (let equ of LS.equations) {\r\n            equStr = [];\r\n            for (let L of letters) {\r\n                m = equ.left.monomByLetter(L);\r\n\r\n                if (equStr.length === 0) {\r\n                    equStr.push(m.isZero() ? '' : m.tex);\r\n                } else {\r\n                    equStr.push(m.isZero() ? '' : ((m.coefficient.sign() === 1) ? '+' : '') + m.tex);\r\n                }\r\n            }\r\n\r\n            // Add the equal sign\r\n            equStr.push('=');\r\n\r\n            // Add the right hand part of the equation (should be only a number, because it has been reorderd)\r\n            equStr.push(equ.right.tex);\r\n\r\n            // Add to the list.\r\n            equArray.push(equStr.join('&'));\r\n        }\r\n\r\n\r\n        return `\\\\left\\\\{\\\\begin{array}{${\"r\".repeat(letters.length)}cl}${equArray.join('\\\\\\\\\\ ')}\\\\end{array}\\\\right.`;\r\n        //return `\\\\left\\\\{\\\\begin{array}{rrrcl}${this._equations.map(equ => `${equ.tex}`).join('\\\\\\\\\\ \\n')}\\\\end{array}\\\\right.`;\r\n    }\r\n\r\n    get texSolution(): string {\r\n        let tex: string[] = [];\r\n\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n\r\n        for (let letter in this._solutions) {\r\n            if (this._solutions[letter].isReal) {\r\n                console.log(`Undetermined (letter ${letter})`);\r\n                return;\r\n            }\r\n            if (this._solutions[letter].isVarnothing) {\r\n                console.log(`Undefined (letter ${letter})`);\r\n                return;\r\n            }\r\n\r\n            tex.push(this._solutions[letter].value.dfrac);\r\n        }\r\n        return `(${tex.join(';')})`;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...equations: any[]): LinearSystem => {\r\n        this._equations = equations.map(value => new Equation(value));\r\n        this._findLetters();\r\n        return this;\r\n    };\r\n\r\n    setCoefficient = (...coefficients: string[]): LinearSystem => {\r\n        // Reset the equations list\r\n        this._equations = [];\r\n\r\n        let i = 0;\r\n        while (i < coefficients.length - this._letters.length) {\r\n            let left = new Polynom().parse(this._letters.join(''), ...coefficients.slice(i, i + this._letters.length)),\r\n                right = new Polynom(coefficients[i + this._letters.length].toString()),\r\n                equ = new Equation().create(left, right);\r\n            this._equations.push(equ.clone());\r\n\r\n            i = i + this._letters.length + 1;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): LinearSystem => {\r\n        return new LinearSystem().parse(...this._equations.map(equ => equ.clone()));\r\n    };\r\n\r\n    setLetters = (...letters: string[]): LinearSystem => {\r\n        this._letters = letters;\r\n        return this\r\n    }\r\n    private _findLetters = (): LinearSystem => {\r\n        // Find all letters used.\r\n        let variables = new Set();\r\n\r\n        for (let equ of this._equations) {\r\n            variables = new Set([...variables, ...equ.variables]);\r\n        }\r\n\r\n        // TODO: How to transform (Set of string) to string[]\r\n        // @ts-ignore\r\n        this._letters = [...variables];\r\n        return this;\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n    // -----------------------------------------------\r\n    generate = (...solutions: Fraction[] | number[]): LinearSystem => {\r\n        let solutionsF: Fraction[] = [];\r\n\r\n        // Convert the numbers to fractions if necessary\r\n        for (let s of solutions) {\r\n            if (typeof s === \"number\") {\r\n                solutionsF.push(new Fraction(s.toString()));\r\n            } else {\r\n                solutionsF.push(s.clone());\r\n            }\r\n        }\r\n\r\n        // Create the equations and make sure they are not linear combined.\r\n        this._equations = [];\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            this._equations.push(this._generateOneEquation(...solutionsF));\r\n        }\r\n        return this;\r\n    };\r\n    private _generateOneEquation = (...solutions: Fraction[]): Equation => {\r\n        let coeff: number[] = [], leftValue: Fraction = new Fraction().zero(),\r\n            letters: string[] = ['x', 'y', 'z', 't', 'u', 'v', 'w', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],\r\n            equString: string = '', equ: Equation;\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            coeff.push(Random.numberSym(5));\r\n            leftValue.add(solutions[i].clone().multiply(coeff[i]));\r\n            equString += `${(coeff[i] < 0) ? coeff[i] : '+' + coeff[i]}${letters[i]}`\r\n        }\r\n\r\n        // LeftValue contains the left part oof the equation - and is then the isSame as the right part.\r\n        // It might be a Fraction.\r\n\r\n        // Must check if it's not a linear combination\r\n        equ = new Equation(`${equString}=${leftValue.display}`);\r\n        if (equ.right.monoms[0].coefficient.denominator != 1) {\r\n            equ.multiply(new Fraction(equ.right.monoms[0].coefficient.denominator, 1));\r\n        }\r\n        if (this._checkIfLinerCombination(equ)) {\r\n            return equ;\r\n        } else {\r\n            return this._generateOneEquation(...solutions);\r\n        }\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    private _linearReduction(eq1: Equation, eq2: Equation, letter: string): Equation {\r\n        // TODO: handle other signs for equations ?\r\n        // Get the monom for the particular letter.\r\n        let c1 = eq1.left.monomByDegree(1, letter).coefficient.clone(),\r\n            c2 = eq2.left.monomByDegree(1, letter).coefficient.clone().opposed();\r\n\r\n        return this.mergeEquations(eq1, eq2, c2, c1);\r\n    }\r\n\r\n    mergeEquations = (eq1: Equation, eq2: Equation, factor1: any, factor2: any): Equation => {\r\n        // Set and clone the equations.\r\n\r\n        let eq1multiplied = eq1.clone().multiply(new Fraction(factor1)),\r\n            eq2multiplied = eq2.clone().multiply(new Fraction(factor2));\r\n\r\n        // Add both equations together.\r\n        eq1multiplied.left.add(eq2multiplied.left);\r\n        eq1multiplied.right.add(eq2multiplied.right);\r\n\r\n        return eq1multiplied;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Solvers algorithm\r\n    // ------------------------------------------\r\n    reorder = (): LinearSystem => {\r\n        for (let E of this._equations) {\r\n            E.reorder();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    solve = (): LinearSystem => {\r\n        // Solve it by linear\r\n        this._solutions = {};\r\n        this._resolutionSteps = [];\r\n\r\n        // Reorder all equations.\r\n        this.reorder();\r\n\r\n        // Get all variables in the linear system\r\n        let V = this.variables.sort();\r\n\r\n        for (let letter of V) {\r\n            this._solutions[letter] = this._solveOneLetter(letter, V)\r\n        }\r\n\r\n        // TODO: LinearSystem - solve: optimization and handle undetermined and undefined systems.\r\n        return this;\r\n    };\r\n\r\n    private _checkIfLinerCombination = (equ: Equation): boolean => {\r\n\r\n        return true;\r\n    };\r\n\r\n    private _solveOneLetter(letter: string, V: string[]): { value: Fraction, isReal: boolean, isVarnothing: boolean } {\r\n        // list of equations.\r\n        let LE: Equation[] = this.clone().equations,\r\n            reducedEquations: Equation[] = [];\r\n\r\n        // Reduce the equations.\r\n        // Do it as long as there is more than one step, but no more than the number of equations.\r\n        for (let L of V) {\r\n            // remove the setLetter from all equations using linear combinations\r\n            if (L === letter) {\r\n                continue;\r\n            }\r\n\r\n            // Linear reduction.\r\n            // TODO: Search for better association\r\n            for (let i = 0; i < LE.length - 1; i++) {\r\n                reducedEquations.push(this._linearReduction(LE[i], LE[i + 1], L));\r\n            }\r\n\r\n            // Keep track of each steps.\r\n            this._resolutionSteps.push(new LinearSystem().parse(...reducedEquations));\r\n\r\n            // Set the list of equations to the new version.\r\n            LE = this._resolutionSteps[this._resolutionSteps.length - 1].clone().equations;\r\n\r\n            // Reset the stack\r\n            reducedEquations = [];\r\n        }\r\n\r\n        // Solve the equations\r\n        let E = this._resolutionSteps[this._resolutionSteps.length - 1].equations[0];\r\n        E.solve();\r\n\r\n        return {\r\n            value: new Fraction(E.solutions[0]),\r\n            isReal: E.isReal,\r\n            isVarnothing: E.isVarnothing\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Helpers\r\n    // ------------------------------------------\r\n    log = (): string => {\r\n        let str: string = '';\r\n\r\n        for (let E of this._equations) {\r\n            console.log(E.tex);\r\n            str += `${E.tex}\\\\n}`;\r\n        }\r\n\r\n        return str;\r\n    };\r\n}","/**\r\n * Rational polynom module contains everything necessary to handle rational polynoms.\r\n * @module Polynom\r\n */\r\n\r\nimport {Polynom} from \"./polynom\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\n/**\r\n * Rational class can handle rational polynoms\r\n */\r\nexport class Rational {\r\n    private _rawString: string;\r\n    private _numerator: Polynom;\r\n    private _denominator: Polynom;\r\n\r\n    /**\r\n     *\r\n     * @param numerator\r\n     * @param denominator\r\n     */\r\n    constructor(numerator?: Polynom, denominator?: Polynom) {\r\n        this._numerator = numerator?numerator.clone():new Polynom();\r\n        this._denominator = denominator?denominator.clone():new Polynom();\r\n    }\r\n\r\n    clone = (): Rational => {\r\n        this._numerator = this._numerator.clone()\r\n        this._denominator = this._denominator.clone()\r\n\r\n        return this;\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\dfrac{ ${this._numerator.tex} }{ ${this._denominator.tex} }`;\r\n    }\r\n\r\n    get texFactors(): string {\r\n        this._numerator.factorize()\r\n        this._denominator.factorize()\r\n\r\n        return `\\\\dfrac{ ${this._numerator.texFactors} }{ ${this._denominator.texFactors} }`\r\n    }\r\n\r\n    get numerator(): Polynom {\r\n        return this._numerator\r\n    }\r\n    get denominator(): Polynom {\r\n        return this._denominator\r\n    }\r\n\r\n    domain = (): string => {\r\n        let zeroes = this._denominator.getZeroes();\r\n        if( zeroes.length===0 || zeroes[0]===false){\r\n            return '\\\\mathbb{R}'\r\n        }else if(zeroes[0]===true){\r\n            return '\\\\varnothing'\r\n        }else{\r\n            return '\\\\mathbb{R}\\\\setminus\\\\left{'+\r\n                zeroes.map(x=> {\r\n                    return (typeof x === 'boolean')?'':x.frac\r\n                    })\r\n                    .join(';')+'\\\\right}'\r\n        }\r\n    }\r\n\r\n    amplify = (P: Polynom): Rational => {\r\n        this._numerator.multiply(P);\r\n        this._denominator.multiply(P);\r\n\r\n        return this;\r\n    }\r\n\r\n    simplify = (P: Polynom): Rational => {\r\n        let NumeratorEuclidien = this._numerator.euclidian(P);\r\n        if(!NumeratorEuclidien.reminder.isZero()){return this;}\r\n\r\n        let DenominatorEuclidien = this._denominator.euclidian(P);\r\n        if(!DenominatorEuclidien.reminder.isZero()){return this;}\r\n\r\n        this._numerator = NumeratorEuclidien.quotient;\r\n        this._denominator = DenominatorEuclidien.quotient;\r\n        return this;\r\n    }\r\n\r\n    reduce = (): Rational => {\r\n        console.log(this._numerator.tex)\r\n        this._numerator.factorize();\r\n        console.log(this._numerator.factors.map(x => x.tex))\r\n        for(let f of this._numerator.factors){\r\n            this.simplify(f);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    opposed = (): Rational => {\r\n        this._numerator.opposed();\r\n        return this;\r\n    }\r\n    add = (R: Rational): Rational => {\r\n        // 1. Make sure both rational are at the same denominator\r\n        // 2. Add the numerators.\r\n        // 3. Simplify\r\n\r\n        // Store the adding denominator\r\n        let denominator = this._denominator.clone()\r\n\r\n        // Amplif the main rational polynom by the adding denominator\r\n        this.amplify(R._denominator)\r\n\r\n        // Add to the numerator the adding value...\r\n        this._numerator.add(R._numerator.clone().multiply(denominator));\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (R: Rational): Rational => {\r\n        return this.add(R.clone().opposed())\r\n    }\r\n\r\n    limits = (value: Fraction|number, letter?: string):Fraction|number => {\r\n        if(value===Infinity || value===-Infinity){\r\n            let N = this._numerator.monomByDegree(this._numerator.degree(letter), letter),\r\n                D = this._denominator.monomByDegree(this._denominator.degree(letter), letter)\r\n\r\n            N.divide(D)\r\n\r\n            if(N.degree(letter)>0){return N.coefficient.sign()*(Math.pow((value>0?1:-1),N.degree(letter)%2))===1?Infinity:-Infinity}\r\n            if(N.degree(letter)===0){return N.coefficient}\r\n            if(N.degree(letter)>0){return N.coefficient.sign()*(Math.pow(-1,N.degree(letter)%2))===1?0:-0}\r\n        }else{\r\n            return this._numerator.evaluate({letter: value}).divide(this._denominator.evaluate({letter: value}))\r\n        }\r\n    }\r\n}","/**\r\n * Polynom module contains everything necessary to handle polynoms.\r\n * @module Logicalset\r\n */\r\n\r\nimport {Shutingyard} from '../shutingyard';\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n */\r\nexport class Logicalset {\r\n    private _rawString: string;\r\n    private _rpn: { token: string, tokenType: string }[]\r\n\r\n    /**\r\n     *\r\n     * @param {string} value (optional) Default polynom to parse on class creation\r\n     */\r\n    constructor(value: string) {\r\n        this._rawString = value\r\n        this.parse(value)\r\n        return this;\r\n    }\r\n\r\n    get isLogicalset() {\r\n        return true;\r\n    };\r\n\r\n    private parse = (value: string): Logicalset => {\r\n        // TODO: Must format the value string to convert some items...\r\n\r\n        // Parse the updated value to the shutingyard algorithm\r\n        this._rpn = new Shutingyard('set').parse(value).rpn;\r\n\r\n        return this;\r\n    }\r\n\r\n    evaluate(tokenSets: { [key: string]: any[] }, reference?: any[]): any[] {\r\n        let varStack: (Set<unknown>)[] = []\r\n\r\n        let referenceSet: Set<unknown>\r\n        if (reference === undefined) {\r\n            referenceSet = new Set()\r\n            for (let key in tokenSets) {\r\n                referenceSet = new Set([...referenceSet, ...tokenSets[key]])\r\n            }\r\n        } else {\r\n            referenceSet = new Set(reference)\r\n        }\r\n\r\n        for (let token of this._rpn) {\r\n            if (token.tokenType === 'variable') {\r\n                // The variable has no token - assume it's empty.\r\n                if (tokenSets[token.token] === undefined) {\r\n                    varStack.push(new Set())\r\n                } else {\r\n                    varStack.push(new Set(tokenSets[token.token]));\r\n                }\r\n\r\n            } else {\r\n                switch (token.token) {\r\n                    case '&':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            varStack.push(new Set([...first].filter(x => second.has(x))))\r\n                        }\r\n                        break\r\n                    case '|':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n                            varStack.push(new Set([...first, ...second]))\r\n                        }\r\n                        break\r\n                    case '-':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n                            varStack.push(new Set([...first].filter(x => !second.has(x))))\r\n                        }\r\n                        break\r\n                    case '!':\r\n                        if (varStack.length >= 1) {\r\n                            let first = varStack.pop()\r\n\r\n                            varStack.push(new Set([...referenceSet].filter(x => !first.has(x))))\r\n                        }\r\n                        break\r\n                }\r\n            }\r\n        }\r\n\r\n        return [...varStack[0]].sort();\r\n    }\r\n\r\n    vennAB(): any[] {\r\n        return this.evaluate({\r\n                A: ['A', 'AB'],\r\n                B: ['B', 'AB']\r\n            },\r\n            ['A', 'B', 'AB', 'E']\r\n        )\r\n    }\r\n\r\n    vennABC(): any[] {\r\n        return this.evaluate({\r\n                A: ['A', 'AB', 'AC', 'ABC'],\r\n                B: ['B', 'AB', 'BC', 'ABC'],\r\n                C: ['C', 'AC', 'BC', 'ABC']\r\n            },\r\n            ['A', 'B', 'C', 'AB', 'AC', 'BC', 'E']\r\n        )\r\n    }\r\n\r\n    get rpn(): { token: string, tokenType: string }[] {\r\n        return this._rpn\r\n    }\r\n\r\n    get tex(): string {\r\n        let varStack: { token:string, tokenType: string } [] = []\r\n\r\n        for (let token of this._rpn) {\r\n            if (token.tokenType === 'variable') {\r\n                varStack.push(token);\r\n            } else {\r\n                switch (token.token) {\r\n                    case '&':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if(first.tokenType==='mix'){first.token = `( ${first.token} )`}\r\n                            if(second.tokenType==='mix'){second.token = `( ${second.token} )`}\r\n                            varStack.push({token: `${first.token} \\\\cap ${second.token}`, tokenType: 'mix'})\r\n                        }\r\n                        break\r\n                    case '|':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if(first.tokenType==='mix'){first.token = `( ${first.token} )`}\r\n                            if(second.tokenType==='mix'){second.token = `( ${second.token} )`}\r\n                            varStack.push({token: `${first.token} \\\\cup ${second.token}`, tokenType: 'mix'})\r\n                        }\r\n                        break\r\n                    case '-':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if(first.tokenType==='mix'){first.token = `( ${first.token} )`}\r\n                            if(second.tokenType==='mix'){second.token = `( ${second.token} )`}\r\n                            varStack.push({token: `${first.token} \\\\setminus ${second.token}`, tokenType: 'mix'})\r\n                        }\r\n                        break\r\n                    case '!':\r\n                        if (varStack.length >= 1) {\r\n                            let first = varStack.pop()\r\n                            varStack.push({token: `\\\\overline{ ${first.token} }`, tokenType: 'variable'})\r\n                        }\r\n                        break\r\n                }\r\n            }\r\n        }\r\n\r\n        return varStack[0].token\r\n    }\r\n}\r\n","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\n//TODO: Ajouter une vérification si la droite existe.\r\nexport class Point {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n    private _exist: Boolean;\r\n\r\n    constructor(...values: any) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this\r\n    };\r\n\r\n    get isPoint() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.tex);\r\n        pts.push(this._y.tex);\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Point => {\r\n        // Initialize the value.\r\n        this.zero();\r\n\r\n        // Nothing is given\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        // One element is given - might be already a point !\r\n        if (values.length === 1) {\r\n            // it's already a point - clone it\r\n            if (values[0] instanceof Point) {\r\n                this._x = values[0].x.clone()\r\n                this._y = values[0].y.clone()\r\n                return this;\r\n            }\r\n\r\n            // Value is given as string, comma separated.\r\n            if(typeof values[0] === 'string'){\r\n                let xy = values[0].split(',')\r\n                if(xy.length===2){\r\n                    this._x = new Fraction(xy[0]).reduce()\r\n                    this._y = new Fraction(xy[1]).reduce()\r\n                    return this;\r\n                }\r\n            }\r\n\r\n            // Value given as an object with {x: value, y: value}\r\n            if (values[0].x !== undefined && values[0].y !== undefined) {\r\n                this._x = new Fraction(values[0].x).reduce()\r\n                this._y = new Fraction(values[0].y).reduce()\r\n            } else {\r\n                return this.zero();\r\n            }\r\n        }\r\n        if (values.length === 2) {\r\n            this._x = new Fraction(values[0]).reduce()\r\n            this._y = new Fraction(values[1]).reduce()\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Point => {\r\n        this._x = this._x.clone()\r\n        this._y = this._y.clone()\r\n\r\n        return this\r\n    }\r\n\r\n    zero = (): Point => {\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    origin = (): Point => {\r\n        this.zero();\r\n        return this;\r\n    }\r\n\r\n    middleOf = (P1: Point, P2: Point): Point => {\r\n        this._x = P1.x.clone().add(P2.x).divide(2);\r\n        this._y = P1.y.clone().add(P2.y).divide(2);\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Display functions\r\n    // ------------------------------------------\r\n    texValues = (numberOfDigits: number): string => {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.value.toFixed(numberOfDigits===undefined?2:numberOfDigits));\r\n        pts.push(this._y.value.toFixed(numberOfDigits===undefined?2:numberOfDigits));\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Static functions\r\n    // ------------------------------------------\r\n    static pmatrix = (a: any, b: any, c?: any): string => {\r\n        if (c === undefined) {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\end{pmatrix}`;\r\n        } else {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\\\\\ ${c.tex ? c.tex : c} \\\\end{pmatrix}`;\r\n        }\r\n    };\r\n\r\n}\r\n","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Numeric} from \"../numeric\";\r\n\r\nexport class Vector {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n\r\n    constructor(...values: any) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n    };\r\n\r\n    get isVector() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get normSquare(): Fraction {\r\n        return this._x.clone().pow(2).add(this._y.clone().pow(2));\r\n    }\r\n\r\n    get norm(): number {\r\n        return Math.sqrt(this.normSquare.value);\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\begin{pmatrix}${this._x.tex} \\\\\\\\\\ ${this._y.tex} \\\\end{pmatrix}`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Vector => {\r\n        // TODO: Must be more strict about what is given and limit to two dimensional vectors.p\r\n        // Maybe more than one value was given...\r\n        // Initialize the vector\r\n        this.zero();\r\n\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        if (values.length === 1) {\r\n            if (values[0].isVector) {\r\n                return values[0].clone()\r\n            } else {\r\n                return this._parseString(values[0])\r\n            }\r\n        }\r\n\r\n        if (values.length >= 2) {\r\n            // Two points are given - skip the third value.\r\n            if (values[0].isPoint && values[1].isPoint) {\r\n                this._x = values[1].x.clone().subtract(values[0].x)\r\n                this._y = values[1].y.clone().subtract(values[0].y)\r\n                return this;\r\n            }\r\n\r\n            // Fractions or a number are give\r\n            if (values[0].isFraction || !isNaN(values[0])) {\r\n                this._x = new Fraction(values[0])\r\n            }\r\n            if (values[1].isFraction || !isNaN(values[1])) {\r\n                this._y = new Fraction(values[1])\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Vector => {\r\n        let V = new Vector();\r\n\r\n        if (this._x !== null) {\r\n            V.x = this._x.clone();\r\n        }\r\n        if (this._y !== null) {\r\n            V.y = this._y.clone();\r\n        }\r\n        return V;\r\n    }\r\n\r\n    reset = (): Vector => {\r\n        this._x = null;\r\n        this._y = null;\r\n        return this;\r\n    }\r\n\r\n    zero = (): Vector => {\r\n        this.reset();\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    one = (): Vector => {\r\n        this._x = new Fraction();\r\n        this._y = new Fraction();\r\n        return this;\r\n    }\r\n\r\n    private _parseString = (value: string): Vector => {\r\n        // Split comma, semi colon or single space.\r\n        let components = value.split(/[,;\\s]/g);\r\n\r\n        // Validate the fraction values.\r\n        this.x = new Fraction(components[0] || null);\r\n        this.y = new Fraction(components[1] || null);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Vector => {\r\n        this._x.opposed();\r\n        this._y.opposed();\r\n        return this;\r\n    }\r\n\r\n    add = (V: Vector): Vector => {\r\n        this._x.add(V.x);\r\n        this._y.add(V.y);\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (V: Vector): Vector => {\r\n        return this.add(V.clone().opposed());\r\n    }\r\n\r\n    scalarProductWithVector = (V: Vector): Fraction => {\r\n        // TODO: Add the scalar factor !!!!\r\n        return this._x.clone().multiply(V.x).add(this._y.clone().multiply(V.y));\r\n    }\r\n\r\n    static scalarProduct = (v1: Vector, v2: Vector): number => {\r\n        // TODO: Transform to fraction with nthroot.\r\n        return  v1.x.value * v2.x.value + v1.y.value * v2.y.value;\r\n    };\r\n\r\n    normal = (): Vector => {\r\n        let x = this.x.clone().opposed(), y = this.y.clone();\r\n        this._x = y;\r\n        this._y = x;\r\n        return this;\r\n    }\r\n\r\n    isNormalTo = (v: Vector): boolean => {\r\n        return this.scalarProductWithVector(v).isZero()\r\n    }\r\n\r\n    multiplyByScalar = (k: any): Vector => {\r\n        let scalar = new Fraction(k);\r\n        this._x.multiply(scalar);\r\n        this._y.multiply(scalar);\r\n        return this;\r\n    }\r\n\r\n    divideByScalar = (k:any): Vector => {\r\n        return this.multiplyByScalar(new Fraction(k).invert());\r\n    }\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    simplify = (): Vector => {\r\n        // Multiply by the lcm of denominators.\r\n        return this.multiplyByScalar(Numeric.lcm(this._x.denominator, this._y.denominator))\r\n            .divideByScalar(Numeric.gcd(this._x.numerator, this._y.numerator));\r\n    }\r\n\r\n    angleWith = (V: Vector, sharp?: Boolean, radian?: Boolean): number => {\r\n        let scalar = this.scalarProductWithVector(V).value,\r\n            toDegree = radian ? 1 : 180 / Math.PI;\r\n        if (sharp) {\r\n            scalar = Math.abs(scalar);\r\n        }\r\n\r\n        return toDegree * Math.acos(scalar / (this.norm * V.norm));\r\n    }\r\n}\r\n","/**\r\n * This class works for 2d line in a plane.\r\n */\r\n\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Vector} from \"./vector\";\r\nimport {Point} from \"./point\";\r\nimport {Polynom} from \"../algebra/polynom\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Equation} from \"../algebra/equation\";\r\n\r\nexport class Line {\r\n    // A line is defined as the canonical form\r\n    // ax + by + c = 0\r\n    private _a: Fraction;\r\n    private _b: Fraction;\r\n    private _c: Fraction;\r\n    private _OA: Point;\r\n    private _d: Vector;\r\n    private _n: Vector;\r\n    private _exists: boolean\r\n\r\n    constructor(...values: any) {\r\n\r\n        this._exists = false;\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isLine():boolean {return true;}\r\n    get exists(): boolean {return this._exists; }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equation(): Equation {\r\n        return new Equation(new Polynom().parse('xy', this._a, this._b, this._c), new Polynom('0')).simplify();\r\n    }\r\n    get tex(): { canonical: string, mxh: string, parametric: string } {\r\n        // canonical    =>  ax + by + c = 0\r\n        // mxh          =>  y = -a/b x - c/b\r\n        // parametric   =>  (xy) = OA + k*d\r\n\r\n        let canonical = this.equation;\r\n        // Make sur the first item is positive.\r\n        if(this._a.isNegative()){\r\n            canonical.multiply(-1);\r\n        }\r\n\r\n        return {\r\n            canonical: canonical.tex,\r\n            mxh: this.slope.isInfinity() ? 'x=' + this.OA.x.tex : 'y=' + new Polynom().parse('x', this.slope, this.height).tex,\r\n            parametric: `${Point.pmatrix('x', 'y')} = ${Point.pmatrix(this._OA.x, this._OA.y)} + k\\\\cdot ${Point.pmatrix(this._d.x, this._d.y)}`\r\n        }\r\n    }\r\n\r\n    get a(): Fraction {\r\n        return this._a;\r\n    }\r\n\r\n    set a(value: Fraction) {\r\n        this._a = value;\r\n    }\r\n\r\n    get b(): Fraction {\r\n        return this._b;\r\n    }\r\n\r\n    set b(value: Fraction) {\r\n        this._b = value;\r\n    }\r\n\r\n    get c(): Fraction {\r\n        return this._c;\r\n    }\r\n\r\n    set c(value: Fraction) {\r\n        this._c = value;\r\n    }\r\n\r\n    get OA(): Point {\r\n        return this._OA;\r\n    }\r\n\r\n    set OA(value: Point) {\r\n        this._OA = value;\r\n    }\r\n\r\n    get d(): Vector {\r\n        return this._d;\r\n    }\r\n\r\n    get n(): Vector {\r\n        return this._n;\r\n    }\r\n\r\n    get normal(): Vector {\r\n        return new Vector(this._a, this._b);\r\n    }\r\n\r\n    set d(value: Vector) {\r\n        this._d = value;\r\n    }\r\n\r\n    get slope(): Fraction {\r\n        return this._a.clone().opposed().divide(this._b);\r\n    }\r\n\r\n    get height(): Fraction {\r\n        return this._c.clone().opposed().divide(this._b);\r\n    }\r\n\r\n// ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...values: any): Line => {\r\n        this._exists = false;\r\n\r\n        if (values.length === 3) {\r\n            return this.parseByCoefficient(values[0], values[1], values[2]);\r\n        } else if (values.length === 2) {\r\n            if (values[0].isPoint && values[1].isVector) {\r\n                return this.parseByPointAndVector(values[0], values[1]);\r\n            } else if (values[0].isPoint && values[1].isPoint) {\r\n                return this.parseByPointAndVector(values[0], new Vector(values[0], values[1]));\r\n            }\r\n        } else if (values.length === 1){\r\n            // It's a already a line - clone it !\r\n            if(values[0].isLine){\r\n                return values[0].clone();\r\n            }\r\n\r\n            // Maybe it's a string or an equation\r\n            let equ = new Equation(values[0]);\r\n            if(equ.isEquation){\r\n                // Check if it's a valid equation.\r\n                equ.reorder(true)\r\n\r\n                // It must contain either x, y or both.\r\n                let letters = new Set(equ.letters());\r\n\r\n                // No 'x', no 'y' in the equations\r\n                if(!(letters.has('x') || letters.has('y'))){return;}\r\n\r\n                // Another letter in the equation.\r\n                for(let elem of ['x', 'y']){\r\n                    if(letters.has(elem)){\r\n                        letters.delete(elem)}\r\n                }\r\n\r\n                if(letters.size>0){\r\n                    console.log('Extra variable in the equation.')\r\n                    return this;\r\n                }\r\n\r\n                // Everything should be ok now...\r\n                return this.parseByCoefficient(equ.left.monomByLetter('x').coefficient, equ.left.monomByLetter('y').coefficient, equ.left.monomByDegree(0).coefficient)\r\n            }\r\n        }\r\n        // TODO: Add the ability to create line from a normal vector\r\n        console.log('Someting wrong happend while creating the line')\r\n        return this;\r\n    }\r\n\r\n    parseByCoefficient = (a: Fraction, b: Fraction, c: Fraction): Line => {\r\n        this._a = new Fraction(a);\r\n        this._b = new Fraction(b);\r\n        this._c = new Fraction(c);\r\n\r\n        // TODO: initialize direction and reference point\r\n        this._d = new Vector(this._b.clone(), this._a.clone().opposed());\r\n        this._OA = new Point(new Fraction().zero(), this._c.clone());\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    parseByPointAndVector = (P: Point, d: Vector): Line => {\r\n        // OX = OP + k*d\r\n        // x = px + kdx     * dy\r\n        // y = py + kdy     * dx\r\n        // ------------------\r\n        // dy * x = px * dy + kdxdy\r\n        // dx * y = py * dx + kdxdy\r\n        // ------------------\r\n        // dy * x - dx * y = px * dy - py * dx\r\n        // dy * x - dx * y - (px * dy - py * dx) = 0\r\n        this.parseByCoefficient(\r\n            d.y,\r\n            d.x.clone().opposed(),\r\n            P.x.clone().multiply(d.y).subtract(P.y.clone().multiply(d.x)).opposed()\r\n        )\r\n\r\n        // Choose the current values as point and direction vector instead of the automatic version.\r\n        this._OA = P.clone();\r\n        this._d = d.clone();\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    clone = (): Line => {\r\n        this._a = this._a.clone();\r\n        this._b = this._b.clone();\r\n        this._c = this._c.clone();\r\n\r\n        this._d = this._d.clone();\r\n        this._OA = this._OA.clone();\r\n        this._n = this._n.clone();\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    isParellelTo = (line: Line): Boolean => {\r\n        // Do they have the isSame direction ?\r\n        return this.slope.isEqual(line.slope) && this.height.isDifferent(line.height);\r\n    }\r\n    isSameAs = (line: Line): Boolean => {\r\n        return this.slope.isEqual(line.slope) && this.height.isEqual(line.height);\r\n    }\r\n    simplifyDirection = (): Line => {\r\n        let lcm = Numeric.lcm(this._d.x.denominator, this._d.y.denominator),\r\n            gcd = Numeric.gcd(this._d.x.numerator, this._d.y.numerator);\r\n\r\n        this._d.x.multiply(lcm).divide(gcd);\r\n        this._d.y.multiply(lcm).divide(gcd);\r\n        return this;\r\n    }\r\n    intersection = (line: Line): { point: Point, hasIntersection: boolean, isParallel: boolean, isSame: boolean } => {\r\n        let Pt = new Point(), isParallel = false, isSame = false, hasIntersection = true;\r\n\r\n        // this         => ax+by+c = 0\r\n        // line         => dx+ey+f = 0\r\n        //\r\n        //  aex + bey + ce = 0\r\n        //  dbx + bey + bf = 0\r\n        // (ae-db)x + ce-bf = 0\r\n        //\r\n        //  adx + bdy + cd = 0\r\n        //  adx + aey + af = 0\r\n        // (bd-ae)y + (cd-af)\r\n        //\r\n        // x = (bf-ce)/(ae-db)\r\n        // y = (af-cd)/(bd-ae)\r\n\r\n\r\n        // Theres is no 'y'\r\n        if (this._b.isZero() || line.b.isZero()) {\r\n            // TODO : handle no y in the line canonical form\r\n        }\r\n\r\n        if (this.isParellelTo(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isParallel = true;\r\n        } else if (this.isSameAs(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isSame = true;\r\n        } else {\r\n            Pt.x = this._b.clone().multiply(line.c).subtract(this._c.clone().multiply(line.b))\r\n                .divide(this._a.clone().multiply(line.b).subtract(this._b.clone().multiply(line.a)));\r\n            Pt.y = this._a.clone().multiply(line.c).subtract(this._c.clone().multiply(line.a))\r\n                .divide(this._b.clone().multiply(line.a).subtract(this._a.clone().multiply(line.b)));\r\n        }\r\n\r\n        return {\r\n            point: Pt,\r\n            hasIntersection: !(isParallel || isSame),\r\n            isParallel,\r\n            isSame\r\n        };\r\n    }\r\n\r\n    distanceTo(pt: Point): { value: number, fraction: Fraction, tex: string } {\r\n        let numerator = pt.x.clone().multiply(this._a)\r\n                .add(pt.y.clone().multiply(this._b))\r\n                .add(this._c).abs(),\r\n            d2 = this.normal.normSquare;\r\n\r\n        // The denominator is null - shouldn't be possible\r\n        if (d2.isZero()) {\r\n            return {\r\n                value: NaN,\r\n                tex: 'Not a line',\r\n                fraction: new Fraction().infinite()\r\n            }\r\n        }\r\n        // The denominator is a perfect square - simplify the tex result\r\n        let value = numerator.value / Math.sqrt(d2.value),\r\n            F = numerator.clone().divide(d2.clone().sqrt());\r\n\r\n        // The denominator is a perfect square.\r\n        if (d2.isSquare()) {\r\n            return {\r\n                value,\r\n                tex: F.tex,\r\n                fraction: F\r\n            }\r\n        }\r\n        // Complete answer...\r\n        return {\r\n            value,\r\n            tex: `\\\\frac{${numerator.tex}}{\\\\sqrt{${d2.tex}}}`,\r\n            fraction: F\r\n        };\r\n    }\r\n\r\n    hitSegment(A: Point, B: Point): boolean {\r\n        let iPt = this.intersection(\r\n            new Line(A, B)\r\n        )\r\n\r\n        // There is an intersection point\r\n        if(iPt.hasIntersection) {\r\n            return iPt.point.x.value >= Math.min(A.x.value, B.x.value)\r\n                && iPt.point.x.value <= Math.max(A.x.value, B.x.value)\r\n                && iPt.point.y.value >= Math.min(A.y.value, B.y.value)\r\n                && iPt.point.y.value <= Math.max(A.y.value, B.y.value)\r\n        }\r\n        return false;\r\n    }\r\n    // ------------------------------------------\r\n    // Special functions\r\n    // ------------------------------------------\r\n    canonicalAsFloatCoefficient(decimals: number): string{\r\n        if(decimals===undefined){\r\n            decimals = 2;\r\n        }\r\n\r\n        let ca = this._a.value,\r\n            cb = this._b.value,\r\n            cc= this._c.value,\r\n            canonical = '';\r\n\r\n        if(!this._a.isZero()){\r\n            if(this._a.isOne()){\r\n                canonical = 'x'\r\n            }else if(this._a.clone().opposed().isOne()){\r\n                canonical = '-x'\r\n            }else{\r\n                canonical = this._a.value.toFixed(decimals)+'x'\r\n            }\r\n        }\r\n\r\n        if(!this._b.isZero()){\r\n            if(this._b.isPositive()){canonical+='+'}\r\n            canonical += this._b.value.toFixed(decimals) + 'y'\r\n        }\r\n\r\n        if(!this._c.isZero()){\r\n            if(this._c.isPositive()){canonical+='+'}\r\n            canonical += this._c.value.toFixed(decimals)\r\n        }\r\n\r\n\r\n        return canonical + '=0';\r\n    }\r\n}","import {Fraction} from \"./maths/coefficients\";\r\nimport {Numeric} from \"./maths/numeric\";\r\nimport {Nthroot} from \"./maths/coefficients\";\r\nimport {Monom} from \"./maths/algebra\";\r\nimport {Polynom} from \"./maths/algebra\";\r\nimport {Equation} from \"./maths/algebra\";\r\nimport {LinearSystem} from \"./maths/algebra\";\r\nimport {Rational} from \"./maths/algebra\";\r\nimport {Vector} from \"./maths/geometry\";\r\nimport {Line} from \"./maths/geometry\";\r\nimport {Point} from \"./maths/geometry\";\r\nimport {Triangle} from \"./maths/geometry\";\r\nimport {Shutingyard} from \"./maths/shutingyard\";\r\nimport {Logicalset} from \"./maths/algebra\";\r\nimport {Circle} from \"./maths/geometry\";\r\nimport {Random} from \"./maths/random\";\r\n\r\nexport * from \"./maths/algebra\"\r\nexport * from \"./maths/coefficients\"\r\nexport * from \"./maths/geometry\"\r\nexport * from \"./maths/random\"\r\n// export * from \"./maths/space\"\r\nexport * from \"./maths/numeric\"\r\nexport * from \"./maths/shutingyard\"\r\n\r\n// Expose as global\r\n// export let Pi = {\r\n(<any>window).Pi = {\r\n    ShutingYard: Shutingyard,\r\n    Numeric: Numeric,\r\n    Fraction: Fraction,\r\n    Root: Nthroot,\r\n    Monom: Monom,\r\n    Polynom: Polynom,\r\n    Equation: Equation,\r\n    LinearSystem: LinearSystem,\r\n    Rational: Rational,\r\n    Logicalset: Logicalset,\r\n    Random: Random,\r\n    Geometry: {\r\n        Vector: Vector,\r\n        Point: Point,\r\n        Line: Line,\r\n        Triangle: Triangle,\r\n        Circle: Circle\r\n    }\r\n};\r\n","import {Point} from \"./point\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Vector} from \"./vector\";\r\nimport {Line} from \"./line\";\r\nimport {Equation} from \"../algebra/equation\";\r\n\r\ninterface remarquableLines {\r\n    'medians': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'mediators': {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line,\r\n        'intersection': Point\r\n    },\r\n    'heights': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'bisectors': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    }\r\n}\r\n\r\nexport class Triangle {\r\n    private _A: Point;\r\n    private _B: Point;\r\n    private _C: Point;\r\n    private _lines: {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line\r\n    };\r\n    private _middles: {\r\n        'AB': Point,\r\n        'AC': Point,\r\n        'BC': Point\r\n    };\r\n    private _remarquables: remarquableLines;\r\n\r\n\r\n    constructor(...values: any) {\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    get isTriangle():boolean {return true;}\r\n\r\n    // ------------------------------------------\r\n    // Getter and setters\r\n    // ------------------------------------------\r\n\r\n    get A(): Point {\r\n        return this._A;\r\n    }\r\n\r\n    get B(): Point {\r\n        return this._B;\r\n    }\r\n\r\n    get C(): Point {\r\n        return this._C;\r\n    }\r\n\r\n    get AB(): Vector {\r\n        return this.getSegment('A', 'B');\r\n    }\r\n\r\n    get BA(): Vector {\r\n        return this.getSegment('B', 'A');\r\n    }\r\n\r\n    get BC(): Vector {\r\n        return this.getSegment('B', 'C');\r\n    }\r\n\r\n    get CB(): Vector {\r\n        return this.getSegment('C', 'B');\r\n    }\r\n\r\n    get AC(): Vector {\r\n        return this.getSegment('A', 'C');\r\n    }\r\n\r\n    get CA(): Vector {\r\n        return this.getSegment('C', 'A');\r\n    }\r\n\r\n    get isRectangle(): boolean {\r\n        if (this.AB.isNormalTo(this.BC)) {\r\n            return true;\r\n        }\r\n        if (this.AB.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n        if (this.BC.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    get isEquilateral(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) &&\r\n            this.AB.normSquare.isEqual(this.AC.normSquare);\r\n    }\r\n\r\n    get isIsocele(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) ||\r\n            this.AB.normSquare.isEqual(this.AC.normSquare) ||\r\n            this.BC.normSquare.isEqual(this.AC.normSquare)\r\n    }\r\n\r\n    get lines(): { 'AB': Line, 'BC': Line, 'AC': Line } {\r\n        return this._lines;\r\n    }\r\n\r\n    get remarquables(): remarquableLines {\r\n        return this._remarquables;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Parse values to a triangle. Supported formats:\r\n     * Point, Point, Point\r\n     * x1, y1, x2, y2, x3, y3\r\n     * TODO: Something else ?\r\n     * @param values\r\n     */\r\n    parse = (...values: any): Triangle => {\r\n        if (values.length === 6) {\r\n            // Check if all values are number or fractions.\r\n            let v = values.map((x: any) => new Fraction(x));\r\n            return this.parse(\r\n                new Point(v[0], v[1]),\r\n                new Point(v[2], v[3]),\r\n                new Point(v[4], v[5]),\r\n            )\r\n        } else if (values.length === 3) {\r\n            // Possibilities:\r\n            // - Three points (or part of points, only dict for example, or array (TODO: Add the array syntax for point)\r\n            // - Three lines\r\n            // - Three lines as text.\r\n            if(values.filter((x:any) => typeof x === 'string').length===3) {\r\n                return this.parse( ...values.map((x:string) => new Line(x)) )\r\n            }else if(values.filter((x:any) => x.isLine === true).length===3) {\r\n                // We have three lines\r\n                this._lines = {\r\n                    'AB': values[0],\r\n                    'BC': values[1],\r\n                    'AC': values[2]\r\n                };\r\n\r\n                // Get the intersection points -> build the triangle using these intersection points.\r\n                let intersect = values[0].intersection(values[1]);\r\n                if (intersect.hasIntersection) {\r\n                    this._B = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[1].intersection(values[2]);\r\n                if (intersect.hasIntersection) {\r\n                    this._C = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[2].intersection(values[0]);\r\n                if (intersect.hasIntersection) {\r\n                    this._A = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n            }else {\r\n                // At least, one of the value is not a point.\r\n                if (values.filter((x: any) => x.isPoint === true).length < 3) {\r\n                    return this.parse(\r\n                        new Point(values[0]),\r\n                        new Point(values[1]),\r\n                        new Point(values[2])\r\n                    )\r\n                }\r\n\r\n                // We have three points.\r\n                this._A = values[0].clone();\r\n                this._B = values[1].clone();\r\n                this._C = values[2].clone();\r\n\r\n                this._lines = {\r\n                    'AB': new Line(this._A, this._B),\r\n                    'BC': new Line(this._B, this._C),\r\n                    'AC': new Line(this._A, this._C)\r\n                };\r\n            }\r\n        } else if (values.length === 1) {\r\n            if (values[0].isTriangle === true) {\r\n                return values[0].clone();\r\n            }\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the Triangle class\r\n     */\r\n    clone = (): Triangle => {\r\n        this._A = this._A.clone();\r\n        this._B = this._B.clone();\r\n        this._C = this._C.clone();\r\n\r\n        this._lines = {\r\n            'AB': this._lines.AB.clone(),\r\n            'BC': this._lines.BC.clone(),\r\n            'AC': this._lines.AC.clone()\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Triangle operations and properties\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Generate the Line object for the three segments of the triangle\r\n     */\r\n    private _updateTriangle = () => {\r\n        this._middles = {\r\n            'AB': new Point().middleOf(this._A, this._B),\r\n            'AC': new Point().middleOf(this._A, this._C),\r\n            'BC': new Point().middleOf(this._B, this._C)\r\n        }\r\n\r\n        this._remarquables = this._calculateRemarquableLines();\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the Point class for the given name\r\n     * @param ptName\r\n     */\r\n    private getPointByName = (ptName: string): Point => {\r\n        switch (ptName.toUpperCase()) {\r\n            case 'A':\r\n                return this._A;\r\n            case 'B':\r\n                return this._B;\r\n            case 'C':\r\n                return this._C;\r\n        }\r\n\r\n        // Something went wrong ! Return the first point\r\n        return this._A;\r\n    }\r\n    /**\r\n     * Get the vector for the segment given by name.\r\n     * @param ptName1\r\n     * @param ptName2\r\n     */\r\n    private getSegment = (ptName1: string, ptName2: string): Vector => {\r\n        return new Vector(\r\n            this.getPointByName(ptName1),\r\n            this.getPointByName(ptName2)\r\n        );\r\n    }\r\n\r\n    private _calculateRemarquableLines = (): remarquableLines => {\r\n        let remarquables: remarquableLines = {\r\n            'medians': {\r\n                'A': new Line(this._A, this._middles.BC),\r\n                'B': new Line(this._B, this._middles.AC),\r\n                'C': new Line(this._C, this._middles.AB),\r\n                'intersection': null\r\n            },\r\n            'mediators': {\r\n                'AB': new Line(this._middles.AB, new Vector(this._A, this._B).normal()),\r\n                'AC': new Line(this._middles.AC, new Vector(this._A, this._C).normal()),\r\n                'BC': new Line(this._middles.BC, new Vector(this._B, this._C).normal()),\r\n                'intersection': null\r\n            },\r\n            'heights': {\r\n                'A': new Line(this._A, new Vector(this._B, this._C).normal()),\r\n                'B': new Line(this._B, new Vector(this._A, this._C).normal()),\r\n                'C': new Line(this._C, new Vector(this._A, this._B).normal()),\r\n                'intersection': null\r\n            },\r\n            'bisectors': {\r\n                'A': this._calculateBisectors('A'),\r\n                'B': this._calculateBisectors('B'),\r\n                'C': this._calculateBisectors('C'),\r\n                'intersection': null\r\n            }\r\n        }\r\n\r\n        // As it's a triangle, we assume the lines are intersecting and aren't parallel or superposed.\r\n        remarquables.medians.intersection = remarquables.medians.A.intersection(remarquables.medians.B).point;\r\n        remarquables.mediators.intersection = remarquables.mediators.AB.intersection(remarquables.mediators.BC).point;\r\n        remarquables.heights.intersection = remarquables.heights.A.intersection(remarquables.heights.B).point;\r\n        remarquables.bisectors.intersection = remarquables.bisectors.A.intersection(remarquables.bisectors.B).point;\r\n\r\n        // Everything was calculated for the remarquable lines.\r\n        return remarquables;\r\n    }\r\n\r\n    private _calculateBisectors = (pt: string): Line => {\r\n        let tlines = this.lines, d1, d2;\r\n\r\n        if(pt==='A'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.AC;\r\n        }else if(pt==='B'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.BC;\r\n        }else if(pt==='C'){\r\n            d1 = tlines.BC;\r\n            d2 = tlines.AC;\r\n        }\r\n\r\n        let b1 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm)).reorder(true).simplify()),\r\n            b2 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm).opposed()).reorder(true).simplify());\r\n\r\n        // Must determine which bisectors is in the triangle\r\n        if(pt==='A'){\r\n            return b1.hitSegment(this.B, this.C)?b1:b2;\r\n        }\r\n        if(pt==='B'){\r\n            return b1.hitSegment(this.A, this.C)?b1:b2;\r\n        }\r\n        if(pt==='C'){\r\n            return b1.hitSegment(this.B, this.A)?b1:b2;\r\n        }\r\n\r\n        // Default returns the first bisector\r\n        return b1;\r\n    }\r\n}","import {Point} from \"./point\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Equation} from \"../algebra/equation\";\r\nimport {Polynom} from \"../algebra/polynom\";\r\n\r\n\r\nexport class Circle {\r\n    private _center: Point;\r\n    private _radius: Fraction;\r\n    private _exists: boolean;\r\n    constructor(...values: any) {\r\n        this._exists = false\r\n\r\n        if(values!==undefined){this.parse(...values)}\r\n    }\r\n\r\n    private parse(...values: any) {\r\n        if(values.length===2){\r\n            this._center = new Point(values[0])\r\n            this._radius = new Fraction(values[1])\r\n        }\r\n    }\r\n\r\n    get tex(): string {\r\n        let cx, cy\r\n        if(this._center.x.isZero()){\r\n            cx = 'x^2'\r\n        }else{\r\n            cx = `\\\\left(x-${this._center.x.tex}\\\\right)^2`\r\n        }\r\n        if(this._center.y.isZero()){\r\n            cy = 'y^2'\r\n        }else{\r\n            cy = `\\\\left(y-${this._center.y.tex}\\\\right)^2`\r\n        }\r\n        return `${cx}+${cy}=${this._radius.pow(2).tex}`\r\n    }\r\n\r\n    get developed():string {\r\n        let equ = new Equation(\r\n            new Polynom(`(x-(${this._center.x.display}))^2+(y-(${this._center.y.display}))^2`),\r\n            new Polynom(`${this._radius.pow(2).display}`)\r\n        )\r\n\r\n        return equ.moveLeft().tex;\r\n    }\r\n}"],"names":["Numeric","static","value","decimals","Number","Math","round","nb","primes","undefined","slice","max","length","D","maxV","sqrt","abs","i","push","sort","a","b","Set","values","gcd2","g","reduce","gcd","Fraction","_numerator","_denominator","constructor","denominatorOrPeriodic","this","parse","isFraction","numerator","denominator","tex","display","frac","dfrac","replace","S","split","map","x","isNaN","includes","NaN","isSafeInteger","p","toString","pow","floor","clone","F","zero","one","infinite","Infinity","invalid","opposed","add","N","subtract","multiply","Q","divide","invert","n","d","root","amplify","k","compare","sign","lesser","than","leq","greater","geq","isEqual","isDifferent","isOpposed","isInverted","isZero","isOne","isPositive","isNegative","isInfinity","isFinite","isSquare","isReduced","areEquals","Nthroot","_radical","_nth","_coefficient","_isValid","radical","nth","console","log","coefficient","C","nthroot","V","hasRadical","Monom","_literal","isMonom","literal","literalSqrt","isLitteralSquare","L","key","literalStr","inputStr","v","matchAll","variables","clean","Object","keys","letter","dividers","litterals","_getLitteralDividers","monomDividers","M","arr","tmpList","litt","item","currentLetter","displayWithSign","trim","setLetter","m","isSameAs","multiplyByNumber","M1","M2","K","concat","filter","indexOf","hasLetter","degree","t","evaluate","r","tmpValues","derivative","dM","primitive","monoms","coeffN","coeffD","lcm","min","areSameAs","Shutingyard","_rpn","_mode","_tokenConfig","_uniformize","mode","tokenConfigInitialization","isOperation","token","match","precedence","associative","NextToken2","expr","start","tokenType","substr","NextToken","tokenMatch","Uniformizer","expr2","fnToken","RegExp","operators","outQueue","opStack","tokenPos","previousOpStatckLength","securityLoopLvl2","securityLoopLvl1","opTop","pop","reverse","rpn","randomCore","_config","_defaultConfig","mergeConfig","config","defaultConfig","generate","rndPolynom","userConfig","super","letters","fraction","unit","factorable","allowNullMonom","numberOfMonoms","P","Polynom","empty","rndMonom","Random","array","rndHelpers","percent","random","randomInt","randomBool","number","shuffleArray","randomArray","j","temp","Algebra","polynom","monom","from","to","numberSym","allowZero","randomIntSym","bool","randomItem","shuffle","_rawString","_monoms","_factors","_texString","polynomString","isPolynom","factors","texFactors","factorize","f","texString","genDisplay","raw","isMultiVariable","numberOfVars","output","forceSign","wrapParentheses","shutingYardToReducedPolynom","test","fractions","m1","m2","tempPolynom","stack","previousToken","element","_randomizeDefaults","randomizeDefaults","randomize","rndFactorable","factorUnit","multiplyByPolynom","multiplyByFraction","multiplyByMonom","multiplyByInteger","xmultiply","euclidian","quotient","reminder","reorder","maxMP","monomByDegree","degreeP","newM","MaxIteration","divideByFraction","divideByInteger","nbF","cP1","cP2","isOpposedAt","isFactorized","e","polynomStringNormalized","replaceAll","polynomStringReduced","polyFactors","splice","isDeveloped","replaceBy","resultPolynom","forEach","dP","integrate","valuesA","valuesB","factorize_OLD","maxValue","nbFactorsFound","commonMonom","commonPolynom","securityLoop","m1d","m2d","result","dividerPolynom","_factorize2ndDegree","P1","P2","c","delta","x1","x2","factor","xyzPolynom","xFactors","_factorizeByGroups","getZeroes","zeroes","zeroesAsTex","A","B","toFixed","z","monomsByDegree","Ms","monomByLetter","getDenominators","denominators","getNumerators","numerators","lcmDenominator","gcdDenominator","lcmNumerator","gcdNumerator","makeItComplicate","complexity","factorizePartial","mMain","mCheck","mFactor","pFactor","minify","canDivide","evalValue","Equation","_left","_right","_sign","_polynom","_solutions","_varnothing","_real","equations","isEquation","left","right","solutions","solution","join","isReal","solve","isVarnothing","signAsTex","_formatSign","equationString","pStr","strSign","_findSign","create","signStr","_reverseSign","opts","moveLeft","allLeft","mMove","simplify","isolate","cMove","_solveDegree1","_solveDegree2","_solveDegree3plus","isGreater","isStrictEqual","isAlsoEqual","m0","s","nthDelta","realX1","realX2","sX1","sX2","aF","bF","cF","LinearSystem","_resolutionSteps","_equations","_letters","equationStrings","isLinerarSystem","isSolvable","E","equStr","LS","equArray","equ","repeat","texSolution","_findLetters","setCoefficient","coefficients","setLetters","solutionsF","_generateOneEquation","coeff","leftValue","equString","_checkIfLinerCombination","_linearReduction","eq1","eq2","c1","c2","mergeEquations","factor1","factor2","eq1multiplied","eq2multiplied","_solveOneLetter","LE","reducedEquations","str","Rational","domain","NumeratorEuclidien","DenominatorEuclidien","R","limits","Logicalset","isLogicalset","tokenSets","reference","referenceSet","varStack","second","first","has","vennAB","vennABC","equation","linearSystem","rational","logicalset","Point","_x","_y","_exist","isPoint","y","pts","xy","origin","middleOf","texValues","numberOfDigits","Vector","isVector","normSquare","norm","_parseString","reset","components","scalarProductWithVector","v1","v2","normal","isNormalTo","multiplyByScalar","scalar","divideByScalar","angleWith","sharp","radian","toDegree","PI","acos","Line","_a","_b","_c","_OA","_d","_n","_exists","isLine","exists","canonical","mxh","slope","OA","height","parametric","pmatrix","parseByCoefficient","parseByPointAndVector","elem","delete","size","isParellelTo","line","simplifyDirection","intersection","Pt","isParallel","isSame","point","hasIntersection","distanceTo","pt","d2","hitSegment","iPt","canonicalAsFloatCoefficient","window","Pi","ShutingYard","Root","Geometry","Triangle","_A","_B","_C","_lines","_middles","_remarquables","isTriangle","AB","getSegment","BA","BC","CB","AC","CA","isRectangle","isEquilateral","isIsocele","lines","remarquables","intersect","_updateTriangle","_calculateRemarquableLines","getPointByName","ptName","toUpperCase","ptName1","ptName2","_calculateBisectors","medians","mediators","heights","bisectors","d1","tlines","b1","b2","Circle","_center","_radius","cx","cy","developed"],"sourceRoot":""}